
.vsteensy/build/zeroLogger_T40.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.headers	00000000 .text.headers
60001400 l    d  .text.code	00000000 .text.code
60001aac l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
0000f6d0 l    d  .fini	00000000 .fini
0000f6d4 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .data	00000000 .data
20001ac0 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
60012d80 l    d  .text.csf	00000000 .text.csf
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
60001400 l     F .text.code	00000016 memory_copy
60001418 l     F .text.code	00000010 memory_clear
00000000 l    df *ABS*	00000000 usb.c
00008c4c l     F .text.itcm	00000090 schedule_transfer
00008cdc l     F .text.itcm	00000036 run_callbacks
00008d14 l     F .text.itcm	000000a8 endpoint0_receive.constprop.1
00008dbc l     F .text.itcm	000000a0 endpoint0_transmit.constprop.2
2000c248 l     O .bss	00000004 endpointN_notify_mask
2000ed9f l     O .bss	00000001 sof_usage
2000c244 l     O .bss	00000004 endpoint0_notify_mask
2000eda7 l     O .bss	00000001 usb_reboot_timer
20004180 l     O .bss	00000008 endpoint0_setupdata
2000c2b0 l     O .bss	00000008 reply_buffer
2000c23c l     O .bss	00000008 endpoint0_buffer
00000000 l    df *ABS*	00000000 tempmon.c
2000c308 l     O .bss	00000004 s_hotTemp
2000c30c l     O .bss	00000004 s_hot_ROOM
2000c310 l     O .bss	00000004 s_roomC_hotC
2000c304 l     O .bss	00000004 s_hotCount
00000000 l    df *ABS*	00000000 analog.c
2000ed9a l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.19/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.19/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 __do_global_dtors_aux
20004188 l       .bss	00000000 completed.8605
00000044 l     F .text.itcm	00000000 frame_dummy
2000418c l       .bss	00000000 object.8610
60001aa0 l     O .text.code	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 zeroLogger.cpp
0000007c l     F .text.itcm	00000084 MTPD::write(char const*, int) [clone .part.19]
000064b8 l     F .text.itcm	00000034 _GLOBAL__sub_I_data
20000414 l     O .data	00000016 supported_op
20000404 l     O .data	00000010 propertyList
200017f6 l     O .data	00000002 newHour(int)::old
200017f4 l     O .data	00000002 newFile(int)::old
200017f2 l     O .data	00000002 newDay(int)::old
00000000 l    df *ABS*	00000000 sd_spi.cpp
000078c4 l     F .text.itcm	00000050 sd_chipSelect(unsigned short) [clone .part.0]
00007914 l     F .text.itcm	00000058 spi_transfer(void const*, void*, unsigned int) [clone .part.4]
00008394 l     F .text.itcm	00000010 _GLOBAL__sub_I__Z15SPI_disk_statusv
200041c8 l     O .bss	00000004 spi
2000042c l     O .data	00000200 crctab
00000000 l    df *ABS*	00000000 usb_desc.c
60001bd8 l     O .text.progmem	0000000a qualifier_descriptor
200017c0 l     O .data	00000012 device_descriptor
00000000 l    df *ABS*	00000000 serialEvent.cpp
00000000 l    df *ABS*	00000000 Time.cpp
00006694 l     F .text.itcm	00000018 refreshCache(long) [clone .part.0]
200041d4 l     O .bss	00000004 cacheTime
200041c0 l     O .bss	00000007 tm
200041d0 l     O .bss	00000004 sysTime
2000ed96 l     O .bss	00000001 Status
200041a8 l     O .bss	00000004 prevMillis
20001238 l     O .data	00000004 syncInterval
2000062c l     O .data	0000000c monthDays
200041bc l     O .bss	00000004 nextSyncTime
00000000 l    df *ABS*	00000000 zeroFS.cpp
00000000 l    df *ABS*	00000000 diskio.cpp
00000000 l    df *ABS*	00000000 sd_sdhc.cpp
000070ac l     F .text.itcm	000000b4 setSdclk(unsigned long)
000071b0 l     F .text.itcm	0000005c sd_CMD(unsigned long, unsigned long)
0000720c l     F .text.itcm	00000020 sd_ACMD(unsigned long, unsigned long, unsigned long)
0000722c l     F .text.itcm	00000040 sd_CMD12_StopTransferWaitForBusy()
200041cc l     O .bss	00000004 dmaDone
200041ac l     O .bss	00000010 sdCardDesc
00000000 l    df *ABS*	00000000 sd_msc.cpp
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
000084e4 l     F .text.itcm	0000006c rx_queue_transfer
00008550 l     F .text.itcm	000000b4 rx_event
00008604 l     F .text.itcm	00000098 usb_serial_flush_callback
0000869c l     F .text.itcm	00000194 usb_serial_write.part.1
2000c2cc l     O .bss	00000010 rx_index
2000ed92 l     O .bss	00000002 tx_packet_size
2000eda3 l     O .bss	00000001 tx_noautoflush
2000eda1 l     O .bss	00000001 tx_head
20003f00 l     O .bss	00000100 rx_transfer
2000ed9d l     O .bss	00000001 rx_tail
2000c2dc l     O .bss	00000009 rx_list
2000ed8c l     O .bss	00000002 rx_packet_size
20200000 l     O .bss.dma	00001000 rx_buffer
20201000 l     O .bss.dma	00002000 txbuffer
2000c2bc l     O .bss	00000010 rx_count
2000c2b8 l     O .bss	00000004 rx_available
2000ed9b l     O .bss	00000001 rx_head
2000eda0 l     O .bss	00000001 transmit_previous_timeout
2000ed90 l     O .bss	00000002 tx_available
20004080 l     O .bss	00000080 tx_transfer
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 digital.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 usb_mtp.c
0000a020 l     F .text.itcm	00000010 txEvent_event
0000a030 l     F .text.itcm	00000044 rx_event
0000a074 l     F .text.itcm	00000068 rx_queue_transfer
2000ed94 l     O .bss	00000002 tx_packet_size
2000eda2 l     O .bss	00000001 tx_head
20004000 l     O .bss	00000080 rx_transfer
2000c2f0 l     O .bss	00000014 rx_list_transfer_len
2000ed9e l     O .bss	00000001 rx_tail
2000c2e8 l     O .bss	00000005 rx_list
2000ed8e l     O .bss	00000002 rx_packet_size
20203000 l     O .bss.dma	00000800 rx_buffer
20203800 l     O .bss.dma	00000800 txbuffer
2000ed9c l     O .bss	00000001 rx_head
20004100 l     O .bss	00000080 tx_transfer
00000000 l    df *ABS*	00000000 yield.cpp
2000ed99 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 Stream.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 efgcvt.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlcat.c
00000000 l    df *ABS*	00000000 strlcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 vfprintf.c
20000dc8 l     O .data	00000010 zeroes.7258
20000764 l     O .data	00000010 blanks.7257
00000000 l    df *ABS*	00000000 vdprintf.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 dtoa.c
0000daf0 l     F .text.itcm	00000128 quorem
00000000 l    df *ABS*	00000000 ecvtbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 mprec.c
200009f4 l     O .data	0000000c p05.6087
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 vasnprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 impure.c
20000dd8 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 __fini_array_end
00000000 l       *UND*	00000000 __bss_start__
60013c00 l       .text.csf	00000000 __text_csf_end
00000000 l       *UND*	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 __fini_array_start
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __libc_fini
00000000 l       *UND*	00000000 __stack
60001a68 l     F .text.code	00000008 __main_veneer
60001a70 l     F .text.code	00000008 ____libc_init_array_veneer
60001a78 l     F .text.code	00000008 __memset_veneer
60001a80 l     F .text.code	00000008 __delay_veneer
60001a88 l     F .text.code	00000008 __set_arm_clock_veneer
60001a90 l     F .text.code	00000008 __usb_init_serialnumber_veneer
60001a98 l     F .text.code	00000008 __pwm_init_veneer
0000f6b8 l     F .text.itcm	00000008 ___init_veneer
0000f6c0 l     F .text.itcm	00000008 ___reboot_Teensyduino__veneer
0000b21c g     F .text.itcm	0000002c .hidden __aeabi_dcmpun
00008a6c g     F .text.itcm	00000014 usb_serial_available
00006860 g     F .text.itcm	0000002c die(char const*, DRESULT)
0000b1e0 g     F .text.itcm	00000012 .hidden __aeabi_dcmple
0000c138 g     F .text.itcm	000000ba strcpy
0000b11c g     F .text.itcm	0000007a .hidden __cmpdf2
60001798 g     F .text.code	00000002 startup_default_late_hook
0000a394  w    F .text.itcm	000000f0 yield
2000c328 g     O .bss	00000004 t3
00007ec8 g     F .text.itcm	00000040 sd_readStop()
2000c334 g     O .bss	00000004 usb_timer1_callback
0000b11c g     F .text.itcm	0000007a .hidden __eqdf2
60001ae4 g     O .text.progmem	00000018 usb_string_manufacturer_name_default
0000ac8c g     F .text.itcm	0000005a .hidden __floatdidf
0000a5e0 g     F .text.itcm	00000020 Print::println()
0000ea4c g     F .text.itcm	00000100 fcvtbuf
00006f70 g     F .text.itcm	0000003c zeroFS_class::GetSize(unsigned long)
0000bce4 g     F .text.itcm	00000002 __malloc_unlock
000079c0 g     F .text.itcm	000000f0 sd_cardCommand(unsigned char, unsigned long)
200041a4 g     O .bss	00000004 SerNum
60001a00 g     F .text.code	00000058 analog_init
0000da44 g     F .text.itcm	0000004a _vdprintf_r
0000688c g     F .text.itcm	00000040 die(char const*, unsigned long, DRESULT)
20001224 g     O .data	00000004 F_CPU_ACTUAL
000083ac g     F .text.itcm	00000004 MSC_disk_write
0000bb7c g     F .text.itcm	000000c6 memmove
0000ee80 g     F .text.itcm	0000004c _Balloc
0000f6dc g       .ARM.exidx	00000000 __exidx_end
00007e0c g     F .text.itcm	0000004c sd_readBlock(unsigned long, unsigned char*)
0000807c g     F .text.itcm	0000006c sd_writeStart(unsigned long, unsigned long)
2000ed97 g     O .bss	00000001 EventResponder::runningFromYield
2000c32c g     O .bss	00000004 tmx
00009c88 g     F .text.itcm	00000060 tempmonGetTemp
0000b10c g     F .text.itcm	0000008a .hidden __gtdf2
0000b584 g     F .text.itcm	0000000c __errno
60001000 g     O .text.headers	00000020 ImageVectorTable
00007f54 g     F .text.itcm	000000a8 sd_writeData(unsigned char, unsigned char const*)
200041e0 g     O .bss	00000004 EventResponder::firstInterrupt
0000959c g     F .text.itcm	00000028 usb_transfer_status
00006da0 g     F .text.itcm	000000d4 zeroFS_class::ListAll()
0000a504  w    F .text.itcm	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
20000774 g     O .data	00000280 digital_pin_to_info_PGM
2000ee10 g     O .bss	00000004 errno
0000f6d8 g       .text.itcm	00000000 _etext
20001ac0 g       .bss	00000000 _sbss
0000b1a8 g     F .text.itcm	00000010 .hidden __aeabi_cdcmple
60001be4 g       *ABS*	00000000 _stextload
00006234 g     F .text.itcm	00000284 loop
00009454 g     F .text.itcm	00000064 usb_config_rx
00001568  w    F .text.itcm	00000634 MTPD::GetStorageInfo(unsigned long)
00006cc4 g     F .text.itcm	000000dc zeroFS_class::Init(unsigned char, unsigned char, char const*)
0000a554 g     F .text.itcm	00000028 Stream::peekNextDigit()
200041dc g     O .bss	00000004 EventResponder::lastInterrupt
000083b0 g     F .text.itcm	00000134 memcpy
0000b198 g     F .text.itcm	00000020 .hidden __aeabi_cdrcmple
0000c360 g     F .text.itcm	000016e4 _svfprintf_r
0000ac1c g     F .text.itcm	00000022 .hidden __floatsidf
2000c320 g     O .bss	00000004 systick_millis_count
0000b114 g     F .text.itcm	00000082 .hidden __ltdf2
0000a240 g     F .text.itcm	00000030 usb_mtp_available
00006fd0 g     F .text.itcm	00000032 disk_initialize
00004f54  w    F .text.itcm	000012de MTPD::loop()
0000b248 g     F .text.itcm	00000000 .hidden __aeabi_uldivmod
0000762c g     F .text.itcm	00000004 SDHC_disk_initialize
2000eda5 g     O .bss	00000001 usb_configuration
60000000 g     O .text.headers	00000200 FlexSPI_NOR_Config
00006fac g     F .text.itcm	00000024 zeroFS_class::Read(unsigned long, char*, unsigned long)
60001ae4  w    O .text.progmem	00000018 usb_string_manufacturer_name
000080e8 g     F .text.itcm	000000b0 sd_writeStop()
60001aac g     O .text.progmem	00000008 usb_string_mtp
20004204  w    O .bss	00000004 MTPD::write(char const*, int)::dst
20000328 g     O .data	000000c8 __mprec_tens
60001650 g     F .text.code	000000ec usb_init
2000c318 g     O .bss	00000004 sessionID_
20004238 g     O .bss	00000004 __malloc_top_pad
2000ee0c g     O .bss	00000004 systick_safe_read
aaaaaaaf g       *ABS*	00000000 _flexram_bank_config
0000abfc g     F .text.itcm	0000001e .hidden __aeabi_ui2d
0000edb8 g     F .text.itcm	0000001c _localeconv_r
0000effc g     F .text.itcm	00000012 __i2b
20000000 g       .data	00000000 _sdata
0000a0dc g     F .text.itcm	000000b0 usb_mtp_configure
60001b6c g     O .text.progmem	00000069 usb_config_descriptor_480
0000b278 g     F .text.itcm	000002e2 .hidden __udivmoddi4
00004470  w    F .text.itcm	00000ae4 MTPD::getObjectPropValue(unsigned long, unsigned long)
0000a978 g     F .text.itcm	00000000 .hidden __aeabi_drsub
0000c0c8 g     F .text.itcm	00000024 _sbrk_r
60001790 g     F .text.code	00000002 startup_default_early_hook
60001428 g     F .text.code	00000228 ResetHandler
00008af4 g     F .text.itcm	00000020 usb_serial_getchar
2000ee00 g     O .bss	00000008 usb_cdc_line_coding
20001200 g     O .data	00000020 Dev
00006a50 g     F .text.itcm	00000190 zeroFS_class::Create(HDR_TYPE, char const*)
200041e4 g     O .bss	00000004 EventResponder::lastYield
00006818  w    F .text.itcm	0000001c Print::write(char const*)
0000708c g     F .text.itcm	00000020 disk_ioctl
0000b1cc g     F .text.itcm	00000012 .hidden __aeabi_dcmplt
2000ed82 g     O .bss	00000002 m_sd_status
20004230 g     O .bss	00000004 __malloc_max_sbrked_mem
00009ce8 g     F .text.itcm	00000080 pinMode
0000ac40 g     F .text.itcm	0000003a .hidden __extendsfdf2
0000af3c g     F .text.itcm	000001d0 .hidden __aeabi_ddiv
0000a984 g     F .text.itcm	00000276 .hidden __adddf3
60013000 g     O .text.csf	00000c00 hab_csf
000002b4  w    F .text.itcm	00000250 MTPD::writestring(char const*)
20280000 g       .text.csf	00000000 _heap_end
2000ed80 g     O .bss	00000002 m_sd_errorCode
0000f6d4 g       .ARM.exidx	00000000 __exidx_start
0000ace8 g     F .text.itcm	00000254 .hidden __aeabi_dmul
200041d8 g     O .bss	00000004 EventResponder::firstYield
00007ba4 g     F .text.itcm	0000003c sd_readRegister(unsigned char, void*)
0000bce8 g     F .text.itcm	000003de _realloc_r
0000b590 g     F .text.itcm	00000050 __libc_init_array
00009934 g     F .text.itcm	00000350 dtostrf
00008238 g     F .text.itcm	000000a8 spi_begin(unsigned long, unsigned char, unsigned char)
00008384 g     F .text.itcm	0000000e SPI_disk_initialize()
2000c250 g     O .bss	00000054 mFS
20000300 g     O .data	00000028 __mprec_bigtens
0000a4ec  w    F .text.itcm	00000004 usb_serial_class::clear()
0000abfc g     F .text.itcm	0000001e .hidden __floatunsidf
2000ed86 g     O .bss	00000002 open1
00009884 g     F .text.itcm	00000030 _sbrk
600112c0 g       *ABS*	00000000 _sdataload
0000f290 g     F .text.itcm	00000042 __mcmp
2000123c g     O .data	00000004 __brkval
2000eda4 g     O .bss	00000001 usb_cdc_line_rtsdtr
60001a58 g     F .text.code	00000000 _init
00006be0 g     F .text.itcm	0000003c zeroFS_class::Close(HDR_TYPE)
00008830 g     F .text.itcm	00000002 usb_serial_reset
2000c338 g     O .bss	00002a48 zFS
00007160 g     F .text.itcm	00000050 sd_isr()
00006798 g     F .text.itcm	00000020 day()
60001b00 g     O .text.progmem	00000069 usb_config_descriptor_12
00007270 g     F .text.itcm	000003bc sd_CardInit()
2000ee40 g       .bss	00000000 _ebss
00000504  w    F .text.itcm	00001064 MTPD::WriteDescriptor()
200017d4 g     O .data	00000004 propertyListNum
00006ed0 g     F .text.itcm	00000040 zeroFS_class::Next()
00006f10 g     F .text.itcm	00000060 zeroFS_class::Info(unsigned long, char*, unsigned long*, unsigned long*)
0000ef60 g     F .text.itcm	00000040 __hi0bits
0000f664 g     F .text.itcm	0000004e .hidden __fixdfsi
20204080 g       .bss.dma	00000000 _heap_start
200017f8 g     O .data	00000002 m_chipSelectPin
00000002 g       *ABS*	00000000 _itcm_block_count
2000edc0 g     O .bss	00000020 endpoint0_transfer_data
000067d8 g     F .text.itcm	00000024 year()
00009d68 g     F .text.itcm	000002b8 pwm_init
0000a984 g     F .text.itcm	00000276 .hidden __aeabi_dadd
0000b114 g     F .text.itcm	00000082 .hidden __ledf2
200017fc g     O .data	00000001 usb_mtp_status
60001880 g     F .text.code	00000064 usb_pll_start
0000f140 g     F .text.itcm	000000a0 __pow5mult
0000ac7c g     F .text.itcm	0000006a .hidden __aeabi_ul2d
00007750 g     F .text.itcm	00000168 sd_CardWriteBlocks(void const*, unsigned long, unsigned long)
00000000  w      *UND*	00000000 __deregister_frame_info
2000ede0 g     O .bss	00000020 endpoint0_transfer_ack
2000ee08 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
00009550 g     F .text.itcm	00000028 usb_transmit
0000a4cc g     F .text.itcm	00000020 systick_isr
2000ed88 g     O .bss	00000002 open2
2000c2a4 g     O .bss	00000004 mode
20001228 g     O .data	00000010 Serial
00007630 g     F .text.itcm	00000114 sd_CardReadBlocks(void*, unsigned long, unsigned long)
0000a50c  w    F .text.itcm	00000006 usb_serial_class::write(unsigned char)
60001790  w    F .text.code	00000002 startup_early_hook
0000b208 g     F .text.itcm	00000012 .hidden __aeabi_dcmpgt
00008a28 g     F .text.itcm	00000044 usb_serial_peekchar
000082e0 g     F .text.itcm	000000a4 sd_init()
0000ede0 g     F .text.itcm	00000000 memchr
0000a6b4 g     F .text.itcm	000002c4 set_arm_clock
2000c31c g     O .bss	00000004 systick_cycle_count
200017dc g     O .data	00000016 usb_string_serial_number_default
0000ebe8 g     F .text.itcm	000001d0 _free_r
0000b1f4 g     F .text.itcm	00000012 .hidden __aeabi_dcmpge
0000a4fc  w    F .text.itcm	00000004 usb_serial_class::flush()
0000a980 g     F .text.itcm	0000027a .hidden __aeabi_dsub
200017b4 g     O .data	00000004 __malloc_sbrk_base
0000a4f4  w    F .text.itcm	00000004 usb_serial_class::read()
00007e58 g     F .text.itcm	00000024 sd_readData2(unsigned char*)
0000ac7c g     F .text.itcm	0000006a .hidden __floatundidf
0000f1e0 g     F .text.itcm	000000ae __lshift
00009520 g     F .text.itcm	0000002e usb_prepare_transfer
000096f4 g     F .text.itcm	00000190 unused_interrupt_vector
0000f4a4 g     F .text.itcm	00000100 __ssprint_r
600018e4 g     F .text.code	0000011c tempmon_init
2000c330 g     O .bss	00000004 usb_timer0_callback
0000f5a4 g     F .text.itcm	0000005e _vasnprintf_r
0000a6b0  w    F .text.itcm	00000002 serialEvent()
0000c248 g     F .text.itcm	0000002c strlcpy
000067fc g     F .text.itcm	0000001c setSyncProvider(long (*)())
00008a80 g     F .text.itcm	00000074 usb_serial_flush_input
2000ed84 g     O .bss	00000002 m_sd_type
0000f010 g     F .text.itcm	00000130 __multiply
00008b14 g     F .text.itcm	0000002c usb_serial_putchar
00000024 g       *ABS*	00000000 _teensy_model_identifier
000081d8 g     F .text.itcm	00000060 spi_init()
20004208 g     O .bss	00000028 __malloc_current_mallinfo
0000f3e8 g     F .text.itcm	000000ba __d2b
200041e8 g     O .bss	0000001c HardwareSerial::s_serials_with_serial_events
6000173c g     F .text.code	00000054 _reboot_Teensyduino_
60001794 g     F .text.code	00000002 startup_default_middle_hook
0000a270 g     F .text.itcm	000000cc usb_mtp_send
00008e5c g     F .text.itcm	000005f8 usb_isr
00007744 g     F .text.itcm	0000000a SDHC_disk_read
0000ac1c g     F .text.itcm	00000022 .hidden __aeabi_i2d
0000a5d8 g     F .text.itcm	00000006 Stream::parseInt()
20000638  w    O .data	00000028 vtable for usb_serial_class
0000a524 g     F .text.itcm	00000030 Stream::timedPeek()
00007980 g     F .text.itcm	00000040 sd_waitNotBusy(unsigned short)
2000c314 g     O .bss	00000004 scale_cpu_cycles_to_microseconds
0000b55c  w    F .text.itcm	00000002 .hidden __aeabi_ldiv0
00002720  w    F .text.itcm	00001d50 MTPD::getObjectPropDesc(unsigned long, unsigned long)
0000af3c g     F .text.itcm	000001d0 .hidden __divdf3
200013ac g     O .data	00000408 __malloc_av_
0000ace8 g     F .text.itcm	00000254 .hidden __muldf3
00008ba8 g     F .text.itcm	000000a4 usb_serial_flush_output
0000bce0 g     F .text.itcm	00000002 __malloc_lock
20001800 g     O .data	000002c0 _VectorsRam
0000f604 g     F .text.itcm	0000005e _calloc_r
2000c24c g     O .bss	00000004 getTimePtr
00006c1c g     F .text.itcm	00000058 zeroFS_class::Create(unsigned long, int)
200017fd g     O .data	00000001 yield_active_check_flags
2000eda6 g     O .bss	00000001 usb_high_speed
2000423c g     O .bss	00008000 data
0000bc44 g     F .text.itcm	0000009a memset
0000a514 g     F .text.itcm	00000010 main
20004234 g     O .bss	00000004 __malloc_max_total_mem
20204000 g     O .bss.dma	00000069 usb_descriptor_buffer
000083a8 g     F .text.itcm	00000004 MSC_disk_read
000066ac g     F .text.itcm	0000008c now()
0000c1f4 g     F .text.itcm	00000052 strlcat
0000a33c g     F .text.itcm	00000058 usb_init_serialnumber
60001aac g       .text.code	00000000 __init_array_end
0000dc18 g     F .text.itcm	00000e34 _dtoa_r
0000b5e0 g     F .text.itcm	00000570 _malloc_r
2000ed98 g     O .bss	00000001 HardwareSerial::s_count_serials_with_serial_events
0000daa8 g     F .text.itcm	0000001a __ascii_wctomb
00007ffc g     F .text.itcm	00000080 sd_writeData2(unsigned char const*)
0000ac8c g     F .text.itcm	0000005a .hidden __aeabi_l2d
00000031 g       *ABS*	00000000 __rtc_localtime
00009690 g     F .text.itcm	00000064 micros
0000eb4c g     F .text.itcm	0000009c _malloc_trim_r
60001afc g     O .text.progmem	00000004 string0
00008b40 g     F .text.itcm	00000018 usb_serial_write
200017d8 g     O .data	00000004 tmn
60001798  w    F .text.code	00000002 startup_late_hook
0000a4f8  w    F .text.itcm	00000004 usb_serial_class::available()
60001be2 g     O .text.progmem	00000001 _serialEvent_default
20000000 g     O .data	00000300 endpoint_queue_head
60001ab4  w    O .text.progmem	0000002e usb_string_product_name
200017fa g     O .data	00000002 m_enableChipSelect
000095c4 g     F .text.itcm	000000cc delay
0000b11c g     F .text.itcm	0000007a .hidden __nedf2
00007ab0 g     F .text.itcm	000000f4 sd_readData(unsigned char*, unsigned int)
0000f6d0 g     F .fini	00000000 _fini
60001020 g     O .text.headers	0000000c BootData
000067b8 g     F .text.itcm	00000020 month()
0000c0ec g     F .text.itcm	0000004c sprintf
0000a610 g     F .text.itcm	0000001e Print::printf(char const*, ...)
00009c84 g     F .text.itcm	00000004 Panic_Temp_isr
0000dac4 g     F .text.itcm	0000002c _write_r
00007f08 g     F .text.itcm	0000004c SPI_disk_read(unsigned char*, unsigned long, unsigned int)
0000a18c g     F .text.itcm	000000b4 usb_mtp_recv
200017bc g     O .data	00000004 _impure_ptr
2000c324 g     O .bss	00000004 t0
00006834 g     F .text.itcm	0000002c die(char const*, unsigned char)
60001aa0 g       .text.code	00000000 __preinit_array_end
00006758 g     F .text.itcm	00000020 minute()
0000bb50 g     F .text.itcm	0000002a __ascii_mbtowc
00000100 g     F .text.itcm	000001b4 setup
20000d50 g     O .data	00000078 usb_descriptor_list
00006e74 g     F .text.itcm	0000005c zeroFS_class::Count(unsigned long)
00007be0 g     F .text.itcm	000001a0 sd_connect()
20070000 g       .text.csf	00000000 _estack
00008b58 g     F .text.itcm	00000050 usb_serial_write_buffer_free
2000c2ac g     O .bss	00000004 ncount
0000b1b8 g     F .text.itcm	00000012 .hidden __aeabi_dcmpeq
00008834 g     F .text.itcm	00000108 usb_serial_configure
0000a600  w    F .text.itcm	0000000e _write
20001ac0 g       .data	00000000 _edata
00001b9c  w    F .text.itcm	00000b84 MTPD::GetObjectInfo(unsigned long)
0000a500  w    F .text.itcm	00000004 usb_serial_class::availableForWrite()
000078b8 g     F .text.itcm	0000000a SDHC_disk_write
000098e4 g     F .text.itcm	0000004e ultoa
00006778 g     F .text.itcm	00000020 second()
0000a484 g     F .text.itcm	00000044 EventResponder::runFromInterrupt()
200017b8 g     O .data	00000004 __malloc_trim_threshold
0000a4f0  w    F .text.itcm	00000004 usb_serial_class::peek()
0000b560 g     F .text.itcm	00000024 fcvtf
00007048 g     F .text.itcm	00000042 disk_write
00008198 g     F .text.itcm	00000040 SPI_disk_write(unsigned char const*, unsigned long, unsigned int)
20001ac0 g     O .bss	00002440 mtpd
0000f2d4 g     F .text.itcm	00000114 __mdiff
00006c74 g     F .text.itcm	00000050 zeroFS_class::Write(void*, unsigned long)
0000f664 g     F .text.itcm	0000004e .hidden __aeabi_d2iz
0000796c g     F .text.itcm	00000014 SPI_disk_ioctl(unsigned char, unsigned char*)
0000726c g     F .text.itcm	00000004 SDHC_disk_ioctl
00006738 g     F .text.itcm	00000020 hour()
2000c2a8 g     O .bss	00000004 mtp_txEventCount
20000660 g     O .data	00000101 _ctype_
60001aa0 g       .text.code	00000000 __init_array_start
0000b55c  w    F .text.itcm	00000002 .hidden __aeabi_idiv0
0000b21c g     F .text.itcm	0000002c .hidden __unorddf2
20001220 g     O .data	00000004 F_BUS_ACTUAL
0000a57c g     F .text.itcm	0000005a Stream::parseInt(char)
000083a4 g     F .text.itcm	00000004 MSC_disk_initialize
00000000 g       .text.itcm	00000000 _stext
0000c280 g     F .text.itcm	000000dc strlen
00007004 g     F .text.itcm	00000042 disk_read
00007e7c g     F .text.itcm	0000004c sd_readStart(unsigned long)
0000b1a8 g     F .text.itcm	00000010 .hidden __aeabi_cdcmpeq
0000b10c g     F .text.itcm	0000008a .hidden __gedf2
60001ab4 g     O .text.progmem	0000002e usb_string_product_name_default
0000da90 g     F .text.itcm	00000018 vdprintf
60001794  w    F .text.code	00000002 startup_middle_hook
0000ac40 g     F .text.itcm	0000003a .hidden __aeabi_f2d
2000ed8a g     O .bss	00000002 open3
6000179c g     F .text.code	000000e4 configure_cache
00000000  w      *UND*	00000000 _Jv_RegisterClasses
0000a980 g     F .text.itcm	0000027a .hidden __subdf3
60001aa0 g       .text.code	00000000 __preinit_array_start
00009578 g     F .text.itcm	00000024 usb_receive
0000efa0 g     F .text.itcm	0000005a __lo0bits
00013c00 g       *ABS*	00000000 _flashimagelen
00000000  w      *UND*	00000000 __register_frame_info
000098b4 g     F .text.itcm	00000030 rtc_get
0000a4c8 g     F .text.itcm	00000004 pendablesrvreq_isr
20001240 g     O .data	0000016c __global_locale
00007d80 g     F .text.itcm	0000008c sd_cardSize()
000068cc g     F .text.itcm	00000184 zeroFS_class::Append()
0000893c g     F .text.itcm	000000ec usb_serial_read
000064ec g     F .text.itcm	000001a8 breakTime(long, tmElements_t&)
0000a630 g     F .text.itcm	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
000094b8 g     F .text.itcm	00000068 usb_config_tx
0000eee0 g     F .text.itcm	00000080 __multadd
0000eecc g     F .text.itcm	00000012 _Bfree
200017dc  w    O .data	00000016 usb_string_serial_number



Disassembly of section .text.code:

60001400 <memory_copy>:
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001400:	cmp	r0, r1
60001402:	beq.n	60001414 <memory_copy+0x14>
	while (dest < dest_end) {
60001404:	cmp	r0, r2
60001406:	bcs.n	60001414 <memory_copy+0x14>
		*dest++ = *src++;
60001408:	ldr.w	r3, [r1], #4
6000140c:	str.w	r3, [r0], #4

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001410:	cmp	r2, r0
60001412:	bhi.n	60001408 <memory_copy+0x8>
60001414:	bx	lr
60001416:	nop

60001418 <memory_clear>:
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001418:	cmp	r0, r1
6000141a:	bcs.n	60001426 <memory_clear+0xe>
		*dest++ = 0;
6000141c:	movs	r3, #0
6000141e:	str.w	r3, [r0], #4
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001422:	cmp	r1, r0
60001424:	bhi.n	6000141e <memory_clear+0x6>
60001426:	bx	lr

60001428 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001428:	ldr	r3, [pc, #404]	; (600015c0 <ResetHandler+0x198>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000142a:	mov.w	r1, #11141120	; 0xaa0000
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000142e:	ldr	r2, [pc, #404]	; (600015c4 <ResetHandler+0x19c>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001430:	ldr	r0, [pc, #404]	; (600015c8 <ResetHandler+0x1a0>)
void startup_middle_hook(void)	__attribute__ ((weak, alias("startup_default_middle_hook")));
FLASHMEM void startup_default_late_hook(void) {}
void startup_late_hook(void)	__attribute__ ((weak, alias("startup_default_late_hook")));
__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
void ResetHandler(void)
{
60001432:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001436:	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001438:	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
6000143a:	ldr	r2, [pc, #400]	; (600015cc <ResetHandler+0x1a4>)
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000143c:	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
6000143e:	mov	sp, r2
	__asm__ volatile("dsb":::"memory");
60001440:	dsb	sy
	__asm__ volatile("isb":::"memory");
60001444:	isb	sy
#endif
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001448:	bl	60001790 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000144c:	ldr	r3, [pc, #384]	; (600015d0 <ResetHandler+0x1a8>)
6000144e:	movs	r0, #8
	//IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
	//GPIO7_GDIR |= (1<<3);
	//GPIO7_DR_SET = (1<<3); // digitalWrite(13, HIGH);

	// Initialize memory
	memory_copy(&_stext, &_stextload, &_etext);
60001450:	ldr	r2, [pc, #384]	; (600015d4 <ResetHandler+0x1ac>)
60001452:	ldr	r1, [pc, #388]	; (600015d8 <ResetHandler+0x1b0>)
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
	__asm__ volatile("dsb":::"memory");
	__asm__ volatile("isb":::"memory");
#endif
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001454:	str.w	r0, [r3, #340]	; 0x154
	//IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
	//GPIO7_GDIR |= (1<<3);
	//GPIO7_DR_SET = (1<<3); // digitalWrite(13, HIGH);

	// Initialize memory
	memory_copy(&_stext, &_stextload, &_etext);
60001458:	ldr	r0, [pc, #384]	; (600015dc <ResetHandler+0x1b4>)
6000145a:	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
6000145e:	ldr	r2, [pc, #384]	; (600015e0 <ResetHandler+0x1b8>)
60001460:	ldr	r1, [pc, #384]	; (600015e4 <ResetHandler+0x1bc>)
60001462:	ldr	r0, [pc, #388]	; (600015e8 <ResetHandler+0x1c0>)
60001464:	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001468:	ldr	r1, [pc, #384]	; (600015ec <ResetHandler+0x1c4>)
6000146a:	ldr	r0, [pc, #388]	; (600015f0 <ResetHandler+0x1c8>)
6000146c:	bl	60001418 <memory_clear>
60001470:	ldr	r4, [pc, #384]	; (600015f4 <ResetHandler+0x1cc>)

	// enable FPU
	SCB_CPACR = 0x00F00000;
60001472:	ldr	r1, [pc, #388]	; (600015f8 <ResetHandler+0x1d0>)
60001474:	mov.w	r0, #15728640	; 0xf00000

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001478:	movs	r3, #0
6000147a:	ldr	r2, [pc, #384]	; (600015fc <ResetHandler+0x1d4>)
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
6000147c:	str	r0, [r1, #0]

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000147e:	str.w	r2, [r4, r3, lsl #2]
60001482:	adds	r3, #1
60001484:	cmp	r3, #176	; 0xb0
60001486:	bne.n	6000147e <ResetHandler+0x56>
60001488:	ldr	r3, [pc, #372]	; (60001600 <ResetHandler+0x1d8>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
6000148a:	movs	r1, #128	; 0x80
6000148c:	ldr	r2, [pc, #372]	; (60001604 <ResetHandler+0x1dc>)
6000148e:	strb.w	r1, [r3], #1
60001492:	cmp	r3, r2
60001494:	bne.n	6000148e <ResetHandler+0x66>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001496:	ldr	r5, [pc, #312]	; (600015d0 <ResetHandler+0x1a8>)
60001498:	mov.w	r8, #2155905152	; 0x80808080
	SCB_VTOR = (uint32_t)_VectorsRam;

	reset_PFD();

	// enable exception handling
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
6000149c:	ldr	r1, [pc, #360]	; (60001608 <ResetHandler+0x1e0>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000149e:	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600014a2:	ldr	r3, [pc, #360]	; (6000160c <ResetHandler+0x1e4>)
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600014a4:	movs	r6, #0

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014a6:	ldr.w	sl, [pc, #416]	; 60001648 <ResetHandler+0x220>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014aa:	ldr.w	r9, [pc, #416]	; 6000164c <ResetHandler+0x224>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600014ae:	str	r4, [r3, #0]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b0:	str.w	r8, [r5, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b4:	str.w	sl, [r5, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014b8:	str.w	r8, [r5, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014bc:	str.w	r9, [r5, #240]	; 0xf0
	SCB_VTOR = (uint32_t)_VectorsRam;

	reset_PFD();

	// enable exception handling
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014c0:	ldr	r3, [r1, #0]

	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014c2:	ldr	r7, [pc, #332]	; (60001610 <ResetHandler+0x1e8>)
	SCB_VTOR = (uint32_t)_VectorsRam;

	reset_PFD();

	// enable exception handling
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014c4:	orr.w	r3, r3, #458752	; 0x70000
600014c8:	str	r3, [r1, #0]

	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ca:	ldr	r3, [r7, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014cc:	ldr	r1, [pc, #240]	; (600015c0 <ResetHandler+0x198>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;

	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ce:	bic.w	r3, r3, #127	; 0x7f
600014d2:	orr.w	r3, r3, #64	; 0x40
600014d6:	str	r3, [r7, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014d8:	ldr	r3, [r7, #36]	; 0x24
600014da:	bic.w	r3, r3, #127	; 0x7f
600014de:	orr.w	r3, r3, #64	; 0x40
600014e2:	str	r3, [r7, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014e4:	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
600014e6:	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
600014e8:	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
600014ea:	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
600014ec:	bl	6000179c <configure_cache>
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
600014f0:	ldr	r2, [pc, #288]	; (60001614 <ResetHandler+0x1ec>)
	_VectorsRam[15] = systick_isr;
600014f2:	ldr	r3, [pc, #292]	; (60001618 <ResetHandler+0x1f0>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
600014f4:	movs	r0, #99	; 0x63
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
600014f6:	str	r2, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014f8:	movs	r1, #3

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
600014fa:	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
600014fc:	ldr	r2, [pc, #284]	; (6000161c <ResetHandler+0x1f4>)
	SYST_CVR = 0;
600014fe:	ldr	r3, [pc, #288]	; (60001620 <ResetHandler+0x1f8>)
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001500:	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001502:	add.w	r0, r0, #3758096384	; 0xe0000000
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
60001506:	str	r6, [r3, #0]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001508:	str.w	r1, [r2, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000150c:	addw	r0, r0, #4001	; 0xfa1
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001510:	ldr	r1, [pc, #272]	; (60001624 <ResetHandler+0x1fc>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001512:	ldr	r2, [pc, #276]	; (60001628 <ResetHandler+0x200>)
60001514:	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001518:	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000151a:	ldr	r2, [pc, #272]	; (6000162c <ResetHandler+0x204>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000151c:	orr.w	r3, r3, #16777216	; 0x1000000
60001520:	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001522:	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001524:	ldr	r1, [pc, #264]	; (60001630 <ResetHandler+0x208>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001526:	orr.w	r3, r3, #1
6000152a:	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000152c:	ldr	r3, [r0, #0]
6000152e:	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
60001530:	bl	60001880 <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001534:	str.w	r8, [r5, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001538:	ldr	r0, [pc, #248]	; (60001634 <ResetHandler+0x20c>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000153a:	str.w	sl, [r5, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000153e:	str.w	r8, [r5, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001542:	str.w	r9, [r5, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001546:	bl	60001a88 <__set_arm_clock_veneer>
#endif

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000154a:	ldr	r1, [r7, #108]	; 0x6c
	PIT_MCR = 0;
6000154c:	ldr	r2, [pc, #232]	; (60001638 <ResetHandler+0x210>)
#ifdef F_CPU
	set_arm_clock(F_CPU);
#endif

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000154e:	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001552:	ldr	r3, [pc, #232]	; (6000163c <ResetHandler+0x214>)
#ifdef F_CPU
	set_arm_clock(F_CPU);
#endif

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001554:	str	r1, [r7, #108]	; 0x6c
	PIT_MCR = 0;
60001556:	str	r6, [r2, #0]
	PIT_TCTRL0 = 0;
60001558:	str.w	r6, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000155c:	str.w	r6, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001560:	str.w	r6, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001564:	str.w	r6, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001568:	ldr	r2, [r3, #56]	; 0x38
6000156a:	lsls	r2, r2, #31
6000156c:	bmi.n	60001580 <ResetHandler+0x158>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000156e:	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
60001572:	ldr	r1, [pc, #204]	; (60001640 <ResetHandler+0x218>)
60001574:	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001576:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001578:	ldr	r2, [r3, #56]	; 0x38
6000157a:	orr.w	r2, r2, #1
6000157e:	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
60001580:	ldr	r2, [pc, #184]	; (6000163c <ResetHandler+0x214>)
60001582:	ldr	r4, [pc, #192]	; (60001644 <ResetHandler+0x21c>)
60001584:	ldr	r3, [r2, #8]
60001586:	orr.w	r3, r3, #65537	; 0x10001
6000158a:	str	r3, [r2, #8]

#ifdef ARDUINO_TEENSY41
	configure_external_ram();
#endif
	analog_init();
6000158c:	bl	60001a00 <analog_init>
	pwm_init();
60001590:	bl	60001a98 <__pwm_init_veneer>
	tempmon_init();
60001594:	bl	600018e4 <tempmon_init>
	startup_middle_hook();
60001598:	bl	60001794 <startup_default_middle_hook>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
6000159c:	ldr	r3, [r4, #0]
	while (millis() < 20) ; // wait at least 20ms before starting USB
6000159e:	cmp	r3, #19
600015a0:	bls.n	6000159c <ResetHandler+0x174>
	usb_init();
600015a2:	bl	60001650 <usb_init>
600015a6:	ldr	r3, [r4, #0]

	while (millis() < 300) ; // wait at least 300ms before calling user code
600015a8:	cmp.w	r3, #300	; 0x12c
600015ac:	bcc.n	600015a6 <ResetHandler+0x17e>
	//printf("before C++ constructors\n");
	startup_late_hook();
600015ae:	bl	60001798 <startup_default_late_hook>
	__libc_init_array();
600015b2:	bl	60001a70 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
600015b6:	bl	60001a68 <__main_veneer>
	
	while (1) asm("WFI");
600015ba:	wfi
600015bc:	b.n	600015ba <ResetHandler+0x192>
600015be:	nop
600015c0:	.word	0x400ac000
600015c4:	.word	0xaaaaaaaf
600015c8:	.word	0x00200007
600015cc:	.word	0x20070000
600015d0:	.word	0x400d8000
600015d4:	.word	0x0000f6d8
600015d8:	.word	0x60001be4
600015dc:	.word	0x00000000
600015e0:	.word	0x20001ac0
600015e4:	.word	0x600112c0
600015e8:	.word	0x20000000
600015ec:	.word	0x2000ee40
600015f0:	.word	0x20001ac0
600015f4:	.word	0x20001800
600015f8:	.word	0xe000ed88
600015fc:	.word	0x000096f5
60001600:	.word	0xe000e400
60001604:	.word	0xe000e4a0
60001608:	.word	0xe000ed24
6000160c:	.word	0xe000ed08
60001610:	.word	0x400fc000
60001614:	.word	0x0000a4c9
60001618:	.word	0x0000a4cd
6000161c:	.word	0xe000e014
60001620:	.word	0xe000e018
60001624:	.word	0xe000edfc
60001628:	.word	0x20200000
6000162c:	.word	0xe0001000
60001630:	.word	0x2000c31c
60001634:	.word	0x179a7b00
60001638:	.word	0x40084000
6000163c:	.word	0x400d4000
60001640:	.word	0x56c00000
60001644:	.word	0x2000c320
60001648:	.word	0x2018101b
6000164c:	.word	0x13110d0c

60001650 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001650:	ldr	r3, [pc, #192]	; (60001714 <usb_init+0xc4>)
60001652:	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
60001656:	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001658:	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
6000165c:	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
60001660:	bl	60001a90 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001664:	ldr	r1, [pc, #176]	; (60001718 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001666:	ldr	r0, [pc, #180]	; (6000171c <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001668:	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000166c:	ldr	r4, [pc, #176]	; (60001720 <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000166e:	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001672:	ldr	r3, [pc, #176]	; (60001724 <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001674:	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001678:	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
6000167c:	ldr	r2, [r4, #0]
6000167e:	ands	r3, r2
60001680:	cbnz	r3, 6000168a <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60001682:	ldr.w	r3, [r0, #424]	; 0x1a8
60001686:	lsls	r2, r3, #30
60001688:	beq.n	600016c0 <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
6000168a:	ldr	r3, [pc, #144]	; (6000171c <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
6000168c:	mov.w	r1, #2147483648	; 0x80000000
60001690:	ldr	r2, [pc, #140]	; (60001720 <usb_init+0xd0>)
60001692:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001694:	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001696:	ldr.w	r1, [r3, #320]	; 0x140
6000169a:	orr.w	r1, r1, #2
6000169e:	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600016a2:	ldr.w	r3, [r2, #320]	; 0x140
600016a6:	lsls	r3, r3, #30
600016a8:	bmi.n	600016a2 <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600016aa:	mov.w	r0, #131072	; 0x20000
600016ae:	ldr	r1, [pc, #120]	; (60001728 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600016b0:	ldr	r3, [pc, #108]	; (60001720 <usb_init+0xd0>)
600016b2:	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
600016b6:	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600016b8:	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600016ba:	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600016bc:	bl	60001a80 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600016c0:	ldr	r5, [pc, #104]	; (6000172c <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
600016c2:	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600016c4:	ldr	r3, [pc, #88]	; (60001720 <usb_init+0xd0>)
600016c6:	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600016ca:	ldr	r4, [pc, #80]	; (6000171c <usb_init+0xcc>)
600016cc:	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600016ce:	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600016d0:	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
600016d2:	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600016d4:	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600016d6:	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600016da:	mov.w	r2, #768	; 0x300
600016de:	bl	60001a78 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600016e2:	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600016e6:	movw	r1, #323	; 0x143
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
600016ea:	mov.w	r0, #4194304	; 0x400000
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
600016ee:	ldr	r3, [pc, #64]	; (60001730 <usb_init+0xe0>)
600016f0:	ldr	r2, [pc, #64]	; (60001734 <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600016f2:	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
600016f4:	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
600016f6:	str.w	r5, [r4, #344]	; 0x158
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600016fa:	str.w	r1, [r4, #328]	; 0x148
600016fe:	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001702:	ldr	r2, [pc, #52]	; (60001738 <usb_init+0xe8>)
60001704:	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001708:	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000170a:	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
6000170c:	str.w	r3, [r4, #320]	; 0x140
60001710:	pop	{r4, r5, r6, pc}
60001712:	nop
60001714:	.word	0x400d8000
60001718:	.word	0x400fc000
6000171c:	.word	0x402e0000
60001720:	.word	0x400d9000
60001724:	.word	0x001e1c00
60001728:	.word	0xe000e28c
6000172c:	.word	0x20000000
60001730:	.word	0x20001800
60001734:	.word	0x00008e5d
60001738:	.word	0xe000e10c

6000173c <_reboot_Teensyduino_>:
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


FLASHMEM void _reboot_Teensyduino_(void)
{
6000173c:	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
6000173e:	ldr	r3, [pc, #56]	; (60001778 <_reboot_Teensyduino_+0x3c>)
60001740:	ldr	r3, [r3, #96]	; 0x60
60001742:	lsls	r3, r3, #30
60001744:	bmi.n	60001748 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001746:	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001748:	cpsid	i
		USB1_USBCMD = 0;
6000174a:	ldr	r3, [pc, #48]	; (6000177c <_reboot_Teensyduino_+0x40>)
6000174c:	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
6000174e:	ldr	r2, [pc, #48]	; (60001780 <_reboot_Teensyduino_+0x44>)
{
	if (!(HW_OCOTP_CFG5 & 0x02)) {
		asm("bkpt #251"); // run bootloader
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
		USB1_USBCMD = 0;
60001750:	str.w	r0, [r3, #320]	; 0x140
		IOMUXC_GPR_GPR16 = 0x00200003;
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001754:	add.w	r3, r3, #3758096384	; 0xe0000000
	if (!(HW_OCOTP_CFG5 & 0x02)) {
		asm("bkpt #251"); // run bootloader
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
		USB1_USBCMD = 0;
		IOMUXC_GPR_GPR16 = 0x00200003;
60001758:	ldr	r1, [pc, #40]	; (60001784 <_reboot_Teensyduino_+0x48>)
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
6000175a:	sub.w	r3, r3, #913408	; 0xdf000
	if (!(HW_OCOTP_CFG5 & 0x02)) {
		asm("bkpt #251"); // run bootloader
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
		USB1_USBCMD = 0;
		IOMUXC_GPR_GPR16 = 0x00200003;
6000175e:	str	r1, [r2, #64]	; 0x40
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001760:	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001762:	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001766:	ldr	r2, [pc, #32]	; (60001788 <_reboot_Teensyduino_+0x4c>)
		IOMUXC_GPR_GPR16 = 0x00200003;
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
		__asm__ volatile("dsb":::"memory");
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
60001768:	add.w	r3, r3, #28672	; 0x7000
6000176c:	ldr	r1, [pc, #28]	; (6000178c <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
6000176e:	ldr	r2, [r2, #0]
60001770:	mov	r0, r3
		IOMUXC_GPR_GPR16 = 0x00200003;
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
		__asm__ volatile("dsb":::"memory");
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
60001772:	str	r1, [r3, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001774:	ldr	r3, [r2, #8]
60001776:	blx	r3
60001778:	.word	0x401f4400
6000177c:	.word	0x402e0000
60001780:	.word	0x400ac000
60001784:	.word	0x00200003
60001788:	.word	0x0020001c
6000178c:	.word	0xeb120000

60001790 <startup_default_early_hook>:
60001790:	bx	lr
60001792:	nop

60001794 <startup_default_middle_hook>:
60001794:	bx	lr
60001796:	nop

60001798 <startup_default_late_hook>:
extern int main (void);
FLASHMEM void startup_default_early_hook(void) {}
void startup_early_hook(void)	__attribute__ ((weak, alias("startup_default_early_hook")));
FLASHMEM void startup_default_middle_hook(void) {}
void startup_middle_hook(void)	__attribute__ ((weak, alias("startup_default_middle_hook")));
FLASHMEM void startup_default_late_hook(void) {}
60001798:	bx	lr
6000179a:	nop

6000179c <configure_cache>:
#define SIZE_2G		(SCB_MPU_RASR_SIZE(30) | SCB_MPU_RASR_ENABLE)
#define SIZE_4G		(SCB_MPU_RASR_SIZE(31) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
6000179c:	push	{r4, r5, r6, r7, lr}
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
6000179e:	ldr	r2, [pc, #144]	; (60001830 <configure_cache+0x94>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600017a0:	movs	r0, #0

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600017a2:	ldr	r3, [pc, #144]	; (60001834 <configure_cache+0x98>)
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600017a4:	mov.w	ip, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600017a8:	ldr	r4, [pc, #140]	; (60001838 <configure_cache+0x9c>)

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600017aa:	movs	r6, #17

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600017ac:	ldr.w	lr, [pc, #200]	; 60001878 <configure_cache+0xdc>
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600017b0:	movs	r7, #18
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600017b2:	str	r0, [r4, #0]
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600017b4:	movs	r5, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600017b6:	str.w	ip, [r2]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600017ba:	str.w	lr, [r3]
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600017be:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600017c0:	ldr.w	lr, [pc, #184]	; 6000187c <configure_cache+0xe0>

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600017c4:	ldr	r6, [pc, #116]	; (6000183c <configure_cache+0xa0>)
	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600017c6:	str.w	lr, [r3]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600017ca:	ldr	r1, [pc, #116]	; (60001840 <configure_cache+0xa4>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600017cc:	str	r7, [r2, #0]
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600017ce:	str	r6, [r3, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600017d0:	orr.w	r1, r1, #21
	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600017d4:	ldr	r7, [pc, #108]	; (60001844 <configure_cache+0xa8>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600017d6:	ldr	r6, [pc, #112]	; (60001848 <configure_cache+0xac>)
	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600017d8:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600017da:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600017dc:	ldr	r7, [pc, #108]	; (6000184c <configure_cache+0xb0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600017de:	ldr	r6, [pc, #112]	; (60001850 <configure_cache+0xb4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600017e0:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600017e2:	str	r6, [r3, #0]
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600017e4:	ldr	r7, [pc, #108]	; (60001854 <configure_cache+0xb8>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600017e6:	str	r1, [r2, #0]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600017e8:	ldr	r6, [pc, #108]	; (60001858 <configure_cache+0xbc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600017ea:	ldr	r1, [pc, #112]	; (6000185c <configure_cache+0xc0>)

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600017ec:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600017ee:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600017f0:	ldr	r7, [pc, #108]	; (60001860 <configure_cache+0xc4>)
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600017f2:	str	r1, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600017f4:	ldr	r6, [pc, #108]	; (60001864 <configure_cache+0xc8>)

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600017f6:	ldr	r1, [pc, #112]	; (60001868 <configure_cache+0xcc>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600017f8:	str	r7, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600017fa:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600017fc:	ldr	r7, [pc, #108]	; (6000186c <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600017fe:	str	r1, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001800:	ldr	r6, [pc, #108]	; (60001870 <configure_cache+0xd4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001802:	ldr	r1, [pc, #112]	; (60001874 <configure_cache+0xd8>)

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001804:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001806:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001808:	str	r1, [r3, #0]

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
6000180a:	str	r5, [r4, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
6000180c:	dsb	sy
	asm("isb");
60001810:	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001814:	str.w	r0, [r3, #432]	; 0x1b0

	asm("dsb");
60001818:	dsb	sy
	asm("isb");
6000181c:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001820:	ldr.w	r3, [r2, #-136]
60001824:	orr.w	r3, r3, #196608	; 0x30000
60001828:	str.w	r3, [r2, #-136]
6000182c:	pop	{r4, r5, r6, r7, pc}
6000182e:	nop
60001830:	.word	0xe000ed9c
60001834:	.word	0xe000eda0
60001838:	.word	0xe000ed94
6000183c:	.word	0x00100009
60001840:	.word	0x2000ee40
60001844:	.word	0x00200013
60001848:	.word	0x07020021
6000184c:	.word	0x20000014
60001850:	.word	0x13080025
60001854:	.word	0x10000009
60001858:	.word	0x20200016
6000185c:	.word	0x130b0027
60001860:	.word	0x40000017
60001864:	.word	0x13100033
60001868:	.word	0x60000018
6000186c:	.word	0x070b002f
60001870:	.word	0x70000019
60001874:	.word	0x130b002f
60001878:	.word	0x1000003f
6000187c:	.word	0x03080025

60001880 <usb_pll_start>:

#endif // ARDUINO_TEENSY41


FLASHMEM void usb_pll_start()
{
60001880:	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001882:	ldr	r2, [pc, #92]	; (600018e0 <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001884:	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001886:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
6000188a:	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000188e:	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001892:	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001896:	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000189a:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
6000189c:	tst.w	r3, #2
600018a0:	beq.n	600018b0 <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600018a2:	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
600018a4:	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600018a6:	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600018a8:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
600018aa:	tst.w	r3, #2
600018ae:	bne.n	600018a2 <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
600018b0:	tst.w	r3, #8192	; 0x2000
600018b4:	bne.n	600018ba <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
600018b6:	str	r5, [r2, #20]
			continue;
600018b8:	b.n	6000189a <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
600018ba:	tst.w	r3, #4096	; 0x1000
600018be:	bne.n	600018c4 <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600018c0:	str	r6, [r2, #20]
			continue;
600018c2:	b.n	6000189a <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
600018c4:	cmp	r3, #0
600018c6:	bge.n	6000189a <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
600018c8:	tst.w	r3, #65536	; 0x10000
600018cc:	beq.n	600018d2 <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600018ce:	str	r1, [r2, #24]
			continue;
600018d0:	b.n	6000189a <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
600018d2:	lsls	r3, r3, #25
600018d4:	bmi.n	600018da <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600018d6:	str	r7, [r2, #20]
			continue;
600018d8:	b.n	6000189a <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
600018da:	pop	{r4, r5, r6, r7}
600018dc:	bx	lr
600018de:	nop
600018e0:	.word	0x400d8000

600018e4 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600018e4:	ldr	r2, [pc, #228]	; (600019cc <tempmon_init+0xe8>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600018e6:	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600018e8:	ldr	r1, [pc, #228]	; (600019d0 <tempmon_init+0xec>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600018ea:	vmov.f32	s11, #57	; 0x41c80000  25.0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600018ee:	ldr	r3, [r2, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600018f0:	vldr	s12, [pc, #224]	; 600019d4 <tempmon_init+0xf0>
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600018f4:	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600018f8:	vldr	s13, [pc, #220]	; 600019d8 <tempmon_init+0xf4>
  //asm volatile ("dsb":::"memory");
  //while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
600018fc:	push	{r4, r5, r6, r7}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600018fe:	str	r3, [r2, #0]
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001900:	movs	r4, #0
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001902:	str	r0, [r2, #16]
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001904:	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001908:	ldr	r7, [pc, #208]	; (600019dc <tempmon_init+0xf8>)
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
6000190a:	uxtb	r0, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000190c:	ubfx	r1, r3, #8, #12
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001910:	lsrs	r3, r3, #20
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001912:	ldr	r6, [pc, #204]	; (600019e0 <tempmon_init+0xfc>)
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001914:	vmov	s14, r0
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001918:	vmov	s10, r1
6000191c:	vmov	s15, r3
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001920:	ldr	r3, [pc, #192]	; (600019e4 <tempmon_init+0x100>)
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001922:	vcvt.f32.s32	s10, s10
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001926:	ldr	r5, [pc, #192]	; (600019e8 <tempmon_init+0x104>)
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001928:	vcvt.f32.s32	s14, s14
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
6000192c:	str	r0, [r6, #0]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
6000192e:	vcvt.f32.s32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001932:	str	r1, [r5, #0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001934:	ldr	r1, [pc, #180]	; (600019ec <tempmon_init+0x108>)
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001936:	vsub.f32	s12, s14, s12
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
6000193a:	ldr	r6, [pc, #180]	; (600019f0 <tempmon_init+0x10c>)
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
6000193c:	vsub.f32	s15, s15, s10
60001940:	ldr	r0, [pc, #176]	; (600019f4 <tempmon_init+0x110>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001942:	vsub.f32	s13, s14, s13
60001946:	ldr	r5, [pc, #176]	; (600019f8 <tempmon_init+0x114>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001948:	vsub.f32	s14, s14, s11
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000194c:	vmul.f32	s12, s12, s15
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001950:	vstr	s15, [r7]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001954:	vmul.f32	s13, s13, s15
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001958:	ldr	r7, [r2, #0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000195a:	vmul.f32	s15, s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
6000195e:	vstr	s14, [r3]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001962:	vdiv.f32	s11, s12, s14
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001966:	vdiv.f32	s12, s13, s14
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000196a:	vdiv.f32	s13, s15, s14
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000196e:	vadd.f32	s14, s11, s10
60001972:	vcvt.u32.f32	s15, s14
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001976:	vadd.f32	s14, s12, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000197a:	vmov	r3, s15
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000197e:	vcvt.u32.f32	s14, s14
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001982:	orr.w	r3, r7, r3, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001986:	vadd.f32	s15, s13, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000198a:	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000198c:	vmov	r3, s14
60001990:	ldr.w	r7, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001994:	vcvt.u32.f32	s15, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001998:	and.w	r1, r1, r3, lsl #16
6000199c:	orrs	r1, r7
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000199e:	vmov	r3, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600019a2:	str.w	r1, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600019a6:	ubfx	r3, r3, #0, #12
600019aa:	ldr.w	r1, [r2, #272]	; 0x110
600019ae:	orrs	r3, r1
600019b0:	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
600019b4:	ldr	r3, [r2, #0]
600019b6:	orr.w	r3, r3, #2
600019ba:	str	r3, [r2, #0]

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600019bc:	strb	r4, [r6, #0]
600019be:	str.w	r5, [r0, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
600019c2:	ldr	r3, [pc, #56]	; (600019fc <tempmon_init+0x118>)
600019c4:	movs	r2, #1
}
600019c6:	pop	{r4, r5, r6, r7}
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
600019c8:	str	r2, [r3, #0]
}
600019ca:	bx	lr
600019cc:	.word	0x400d8180
600019d0:	.word	0x401f4400
600019d4:	.word	0x42aa0000
600019d8:	.word	0x42b40000
600019dc:	.word	0x2000c310
600019e0:	.word	0x2000c308
600019e4:	.word	0x2000c30c
600019e8:	.word	0x2000c304
600019ec:	.word	0x0fff0000
600019f0:	.word	0xe000e440
600019f4:	.word	0x20001800
600019f8:	.word	0x00009c85
600019fc:	.word	0xe000e108

60001a00 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001a00:	ldr	r3, [pc, #68]	; (60001a48 <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001a02:	ldr	r1, [pc, #72]	; (60001a4c <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001a04:	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60001a06:	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001a08:	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
60001a0c:	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001a0e:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001a10:	movw	r5, #1591	; 0x637
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001a14:	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001a16:	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001a18:	orr.w	r0, r0, #768	; 0x300
60001a1c:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001a1e:	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001a20:	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60001a22:	ldr	r3, [r2, #72]	; 0x48
60001a24:	lsls	r3, r3, #24
60001a26:	bmi.n	60001a22 <analog_init+0x22>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001a28:	ldr	r3, [pc, #36]	; (60001a50 <analog_init+0x50>)
60001a2a:	movw	r0, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001a2e:	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60001a30:	mov	r2, r3
	while (ADC1_GC & ADC_GC_CAL) {
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001a32:	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001a34:	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60001a36:	ldr	r3, [r2, #72]	; 0x48
60001a38:	ands.w	r3, r3, #128	; 0x80
60001a3c:	bne.n	60001a36 <analog_init+0x36>
		//yield();
	}
	calibrating = 0;
60001a3e:	ldr	r2, [pc, #20]	; (60001a54 <analog_init+0x54>)
60001a40:	strb	r3, [r2, #0]
}
60001a42:	pop	{r4, r5}
60001a44:	bx	lr
60001a46:	nop
60001a48:	.word	0x400fc000
60001a4c:	.word	0x400c4000
60001a50:	.word	0x400c8000
60001a54:	.word	0x2000ed9a

60001a58 <_init>:
60001a58:	push	{r3, r4, r5, r6, r7, lr}
60001a5a:	nop
60001a5c:	pop	{r3, r4, r5, r6, r7}
60001a5e:	pop	{r3}
60001a60:	mov	lr, r3
60001a62:	bx	lr
60001a64:	movs	r0, r0
	...

60001a68 <__main_veneer>:
60001a68:	ldr.w	pc, [pc]	; 60001a6c <__main_veneer+0x4>
60001a6c:	.word	0x0000a515

60001a70 <____libc_init_array_veneer>:
60001a70:	ldr.w	pc, [pc]	; 60001a74 <____libc_init_array_veneer+0x4>
60001a74:	.word	0x0000b591

60001a78 <__memset_veneer>:
60001a78:	ldr.w	pc, [pc]	; 60001a7c <__memset_veneer+0x4>
60001a7c:	.word	0x0000bc45

60001a80 <__delay_veneer>:
60001a80:	ldr.w	pc, [pc]	; 60001a84 <__delay_veneer+0x4>
60001a84:	.word	0x000095c5

60001a88 <__set_arm_clock_veneer>:
60001a88:	ldr.w	pc, [pc]	; 60001a8c <__set_arm_clock_veneer+0x4>
60001a8c:	.word	0x0000a6b5

60001a90 <__usb_init_serialnumber_veneer>:
60001a90:	ldr.w	pc, [pc]	; 60001a94 <__usb_init_serialnumber_veneer+0x4>
60001a94:	.word	0x0000a33d

60001a98 <__pwm_init_veneer>:
60001a98:	ldr.w	pc, [pc]	; 60001a9c <__pwm_init_veneer+0x4>
60001a9c:	.word	0x00009d69

60001aa0 <__init_array_start>:
60001aa0:	.word	0x00000045
60001aa4:	.word	0x000064b9
60001aa8:	.word	0x00008395

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
void usb_config_tx_iso(uint32_t ep, uint32_t packet_size, int mult, void (*cb)(transfer_t *))
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
      20:	.word	0x4c05b510
      24:	ldrb	r3, [r4, #0]
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
      26:	.short	0xb933
      28:	ldr	r3, [pc, #16]	; (3c <__rtc_localtime+0xb>)
void usb_config_tx_iso(uint32_t ep, uint32_t packet_size, int mult, void (*cb)(transfer_t *))
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
      2a:	cbz	r3, 32 <__rtc_localtime+0x1>
      2c:	ldr	r0, [pc, #16]	; (40 <__rtc_localtime+0xf>)
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
      2e:	nop.w
      32:	movs	r3, #1
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
      34:	strb	r3, [r4, #0]
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
      36:	pop	{r4, pc}
      38:	sbcs	r0, r1
      3a:	movs	r0, #0
      3c:	.word	0x00000000
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
      40:			; <UNDEFINED> instruction: 0xf6d40000

00000044 <frame_dummy>:

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
      44:	ldr	r3, [pc, #32]	; (68 <frame_dummy+0x24>)
      46:	push	{r4, lr}
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	ldr	r1, [pc, #32]	; (6c <frame_dummy+0x28>)
      4c:	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	nop.w
      52:	ldr	r0, [pc, #32]	; (74 <frame_dummy+0x30>)
      54:	ldr	r3, [r0, #0]
      56:	.short	0xb903
      58:	pop	{r4, pc}
      5a:	.short	0x4b07
      5c:	cmp	r3, #0
      5e:	.short	0xd0fb
      60:	ldmia.w	sp!, {r4, lr}
      64:	.word	0xbf004718
			yield(); // TODO: what happens if yield-called code uses analogRead()
		}
		return ADC1_R0;
	} else {
		ADC2_HC0 = ch & 0x7f;
		while (!(ADC2_HS & ADC_HS_COCO0)) {
      68:	movs	r0, r0
      6a:	movs	r0, r0
			yield(); // TODO: what happens if yield-called code uses analogRead()
      6c:	.word	0x2000418c
			yield(); // TODO: what happens if yield-called code uses analogRead()
		}
		return ADC1_R0;
	} else {
		ADC2_HC0 = ch & 0x7f;
		while (!(ADC2_HS & ADC_HS_COCO0)) {
      70:			; <UNDEFINED> instruction: 0xf6d40000
      74:	.word	0x20001ac0
			yield(); // TODO: what happens if yield-called code uses analogRead()
		}
		return ADC2_R0;
      78:	movs	r0, r0
	...

0000007c <MTPD::write(char const*, int) [clone .part.19]>:
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
      7c:	.word	0xe92d6843
    int fetch_packet(uint8_t *data_buffer)
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
      80:	blx	lr
      82:	.short	0x460e
      84:	mov	r8, r2
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
      86:	.short	0xb92b
      88:	ldr.w	sl, [pc, #112]	; fc <MTPD::write(char const*, int) [clone .part.19]+0x80>
      8c:	add.w	r2, r0, #544	; 0x220
      90:	.word	0x2000f8ca
        write_length_ += len;
      94:	add	r3, r8
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
      96:	cmp.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
      9a:	.short	0x6043
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
      9c:	ble.n	f6 <MTPD::write(char const*, int) [clone .part.19]+0x7a>
      9e:	add.w	r9, r0, #1056	; 0x420
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
      a2:	.short	0xf500
      a4:	strb	r0, [r1, #28]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
      a6:	.short	0x2500
      a8:	ldr.w	sl, [pc, #80]	; fc <MTPD::write(char const*, int) [clone .part.19]+0x80>
      ac:	.word	0x45a8e001
      b0:	ble.n	f6 <MTPD::write(char const*, int) [clone .part.19]+0x7a>
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
      b2:	.short	0xf8da
      b4:	movs	r0, r0
          int to_copy = min(len - pos, avail);
      b6:	.short	0xebc5
      b8:	lsls	r0, r1, #12
          memcpy(dst,src,to_copy);
      ba:	.short	0x4631
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
      bc:	rsb	r4, r0, r9
      c0:	.word	0xbfa8429c
      c4:	movge	r4, r3
          memcpy(dst,src,to_copy);
      c6:	.short	0x4622
          pos += to_copy;
      c8:	add	r5, r4
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
      ca:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
      ce:	ldr.w	r3, [sl]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
      d2:	add	r6, r4
          dst += to_copy;
      d4:	add	r4, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
      d6:	.short	0x454c
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
      d8:	str.w	r4, [sl]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
      dc:	.word	0x223cd1e7

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
      e0:	mov.w	r1, #512	; 0x200
      e4:	mov	r0, r7
      e6:	.short	0xf00a
      e8:	str.w	r2, [r3, #2048]	; 0x800
      ec:	ble.n	de <MTPD::write(char const*, int) [clone .part.19]+0x62>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
      ee:	cmp	r8, r5
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
      f0:	str.w	r7, [sl]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
      f4:	bgt.n	b2 <MTPD::write(char const*, int) [clone .part.19]+0x36>
      f6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      fa:	.short	0xbf00
      fc:	tst	r4, r0
      fe:	.short	0x2000

00000100 <setup>:
uint16_t open3=0;
uint32_t ncount=0;


extern "C" void setup() 
{
     100:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     104:	.word	0xb0854c55
     108:	ldr	r5, [pc, #340]	; (260 <setup+0x160>)
     10a:	.short	0x4f56
     10c:	ldr	r6, [pc, #344]	; (268 <setup+0x168>)
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() {
		yield();
     10e:	bl	a394 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     112:	ldrb	r3, [r4, #0]
     114:	cmp	r3, #0
     116:	beq.n	10e <setup+0xe>
     118:	ldrb	r3, [r5, #0]
     11a:	lsls	r3, r3, #31
     11c:	bpl.n	10e <setup+0xe>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     11e:	ldr	r3, [r7, #0]
     120:	.word	0x1a9b6832
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     124:	cmp	r3, #14
     126:	bls.n	10e <setup+0xe>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     128:	movs	r1, #15
     12a:	ldr	r0, [pc, #320]	; (26c <setup+0x16c>)
     12c:	bl	8b40 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     130:	.word	0xf00a484f
     134:			; <UNDEFINED> instruction: 0xfa554b4f
  while(!Serial);

  Serial.println("Test zeroLogger");

#if defined(__IMXRT1062__)
  SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
     138:	ldr	r4, [pc, #316]	; (278 <setup+0x178>)
     13a:	movs	r1, #14
     13c:	ldr.w	r3, [r3, #544]	; 0x220
     140:	.word	0xf023484e
     144:	muls	r7, r7
     146:	str	r3, [r4, #0]
     148:	bl	8b40 <usb_serial_write>
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
     14c:	ldr	r1, [r4, #0]
     14e:	movs	r3, #0
     150:	movs	r2, #16
     152:	ldr	r0, [pc, #284]	; (270 <setup+0x170>)
     154:	bl	a630 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(uint64_t n)			{ return print(n) + println(); }

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
     158:	ldr	r0, [pc, #276]	; (270 <setup+0x170>)
     15a:	bl	a5e0 <Print::println()>
  Serial.print("Serial Number "); Serial.println((int32_t)SerNum,HEX);
#else
  SerNum = 0xFFFFFF;
#endif  
  setSyncProvider((getExternalTime) rtc_get);
     15e:	.short	0x4848
     160:	bl	67fc <setSyncProvider(long (*)())>
  Serial.printf("Now: %04d-%02d-%02d_%02d:%02d:%02d\r\n", 
     164:	bl	67d8 <year()>
     168:	.word	0xf0064606
     16c:			; <UNDEFINED> instruction: 0xfb254680
     170:	.word	0xfb12f006
     174:	mov	r9, r0
     176:	.short	0xf006
     178:			; <UNDEFINED> instruction: 0xfadf4605
     17c:	.word	0xfaecf006
     180:	mov	r7, r0
     182:	.short	0xf006
     184:			; <UNDEFINED> instruction: 0xfaf94643
                      year(),month(),day(),hour(),minute(),second());
     188:	.word	0x46329003
     18c:	ldr	r1, [pc, #244]	; (284 <setup+0x184>)
     18e:	.short	0xf8cd
     190:	str	r0, [sp, #0]
     192:	.short	0x9702
     194:	str	r5, [sp, #4]
     196:	.short	0x4836
     198:	bl	a610 <Print::printf(char const*, ...)>
     19c:	.word	0x483a212f
     1a0:	bl	8b40 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     1a4:	.word	0xf00a4832
     1a8:	lsls.w	r0, fp, r8
			}
			yield();
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
     1ac:	.word	0x2800fc5f

  Serial.println("Enter 0 to skip logging or 1 to perform logging");
  while(!Serial.available());
     1b0:	beq.n	1aa <setup+0xaa>
  mode = Serial.parseInt();  
     1b2:	.short	0x4d36
     1b4:	ldr	r0, [pc, #184]	; (270 <setup+0x170>)
     1b6:	bl	a5d8 <Stream::parseInt()>
     1ba:	.short	0x6028

  uint32_t flag=1;
  if(mode>0)
     1bc:	cmp	r0, #0
     1be:	bne.n	228 <setup+0x128>

  Serial.println("Enter 0 to skip logging or 1 to perform logging");
  while(!Serial.available());
  mode = Serial.parseInt();  

  uint32_t flag=1;
     1c0:	.word	0xf0082601
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
     1c4:	ldc2l	9, cr4, [r1], #200	; 0xc8
    flag = Serial.parseInt();      
  }

  Serial.flush();

  zFS[0].Init(Dev[0].dev, Dev[0].cs, Dev[0].name);
     1c8:	.word	0x1c8b4832
     1cc:	ldrb	r2, [r1, #0]
     1ce:	.short	0x7849
     1d0:	bl	6cc4 <zeroFS_class::Init(unsigned char, unsigned char, char const*)>
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     1d4:	.word	0x4830210b
     1d8:	bl	8b40 <usb_serial_write>
     1dc:	.word	0xf00a4824
     1e0:	ldr??.w	r2, [pc, #100]	; 248 <setup+0x148>
  Serial.println("Initialized"); //while(1);
  delay(100);
     1e4:	.word	0xf9eef009
/*
  disk_read (Dev[0].dev, (BYTE *) data, 0, 1);
  printSector(data);
*/

  if(mode)
     1e8:	ldr	r3, [r5, #0]
     1ea:	.short	0xb183
     1ec:	movs	r1, #10
     1ee:	.short	0x482b
     1f0:	bl	8b40 <usb_serial_write>
     1f4:	ldr	r0, [pc, #120]	; (270 <setup+0x170>)
     1f6:	.short	0xf00a
     1f8:	ldr??.w	r4, [r3, #1586]	; 0x632
  {
    Serial.println("Do Logging");
    zFS[0].Create(SerNum,flag);
     1fc:	.word	0x48256821
     200:	bl	6c1c <zeroFS_class::Create(unsigned long, int)>
    if(flag==1)
     204:	.word	0xd01f2e01
  else
  {
    Serial.println("List All");
    zFS[0].ListAll();
  }
}
     208:	add	sp, #20
     20a:	.short	0xe8bd
     20c:	strh	r0, [r6, #30]
     20e:	.short	0x2108
     210:	ldr	r0, [pc, #140]	; (2a0 <setup+0x1a0>)
     212:	.short	0xf008
     214:	ldc2	8, cr4, [r5], {22}
     218:	bl	a5e0 <Print::println()>
    }
  }
  else
  {
    Serial.println("List All");
    zFS[0].ListAll();
     21c:	.word	0xb005481d
  }
}
     220:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    }
  }
  else
  {
    Serial.println("List All");
    zFS[0].ListAll();
     224:	.word	0xbdbcf006
     228:	movs	r1, #52	; 0x34
     22a:	.short	0x481e
     22c:	bl	8b40 <usb_serial_write>
     230:	.word	0xf00a480f
     234:	ldr??.w	pc, [r5, #8]
			}
			yield();
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
     238:	.word	0x2800fc19

  uint32_t flag=1;
  if(mode>0)
  {
    Serial.println("Enter 0 to reset to beginning, 1 to continue logging");
    while(!Serial.available());
     23c:	beq.n	236 <setup+0x136>
    flag = Serial.parseInt();      
     23e:	ldr	r0, [pc, #48]	; (270 <setup+0x170>)
     240:	.word	0xf9caf00a
     244:	mov	r6, r0
     246:	.short	0xe7bc
  {
    Serial.println("Do Logging");
    zFS[0].Create(SerNum,flag);
    if(flag==1)
    { // force closing 
      open1=0;
     248:	movs	r3, #0
     24a:	.short	0x4817
      open2=0;
     24c:	ldr	r1, [pc, #92]	; (2ac <setup+0x1ac>)
      open3=0;
     24e:	.short	0x4a18
  {
    Serial.println("Do Logging");
    zFS[0].Create(SerNum,flag);
    if(flag==1)
    { // force closing 
      open1=0;
     250:	strh	r3, [r0, #0]
      open2=0;
     252:	.short	0x800b
      open3=0;
     254:	strh	r3, [r2, #0]
  else
  {
    Serial.println("List All");
    zFS[0].ListAll();
  }
}
     256:	add	sp, #20
     258:	.word	0x83f0e8bd
     25c:	stc	0, cr2, [r5]
     260:	.word	0x2000eda4
     264:	stmia	r3!, {r5}
     266:	.short	0x2000
     268:	cdp	0, 0, cr2, cr8, cr0, {0}
     26c:	.word	0x20000a5c
     270:	asrs	r0, r5, #8
     272:	movs	r0, #0
     274:	add	r0, r0
     276:	ands	r7, r3
     278:	sbcs	r4, r4
     27a:	.short	0x2000
     27c:	lsrs	r4, r5, #9
     27e:	movs	r0, #0
     280:	.word	0x000098b5
     284:	lsrs	r4, r7, #9
     286:	.short	0x2000
     288:	lsrs	r4, r4, #10
     28a:	.short	0x2000
     28c:	stmia	r2!, {r2, r5, r7}
     28e:	movs	r0, #0
     290:	.word	0x20001200
     294:	stmia	r3!, {r3, r4, r5}
     296:	.short	0x2000
     298:	lsrs	r0, r7, #8
     29a:	.short	0x2000
     29c:	lsrs	r4, r0, #9
     29e:	.short	0x2000
     2a0:	lsrs	r0, r2, #9
     2a2:	movs	r0, #0
     2a4:	.word	0x20000a00
     2a8:	stc	0, cr2, [r6]
     2ac:	.word	0x2000ed88
     2b0:	stc	0, cr2, [sl]

000002b4 <MTPD::writestring(char const*)>:
  void write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  #define Store2Storage(x) (x+1)
  #define Storage2Store(x) (x-1)

  void writestring(const char* str) {
     2b4:	.word	0x4ff0e92d
    if (*str) 
     2b8:	ldrb	r3, [r1, #0]
  void write64(uint64_t x) { write((char*)&x, sizeof(x)); }

  #define Store2Storage(x) (x+1)
  #define Storage2Store(x) (x-1)

  void writestring(const char* str) {
     2ba:	.short	0xb083
     2bc:	mov	r9, r0
    if (*str) 
     2be:	.short	0x2b00
     2c0:	beq.n	38a <MTPD::writestring(char const*)+0xd6>
    { write8(strlen(str) + 1);
     2c2:	.short	0x4608
     2c4:	mov	sl, r1
     2c6:	.short	0xf00b
     2c8:			; <UNDEFINED> instruction: 0xffdbf899
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     2cc:	.word	0x30011000
      {
        write_length_ += len;
     2d0:	ldr.w	r3, [r9, #4]
     2d4:	.word	0x0002f88d
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     2d8:	cmp	r1, #0
     2da:	.short	0xf000
     2dc:	strh	r5, [r2, #4]
      {
        write_length_ += len;
     2de:	.short	0x3301
     2e0:	str.w	r3, [r9, #4]
  #define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
     2e4:	.word	0x2000f89a
     2e8:	cmp	r2, #0
     2ea:	.short	0xd048
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     2ec:	add.w	r8, r9, #544	; 0x220
     2f0:	b.n	300 <MTPD::writestring(char const*)+0x4c>
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
     2f2:	.short	0x3302
     2f4:	str.w	r3, [r9, #4]
  #define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
     2f8:	ldrb.w	r2, [sl, #1]!
     2fc:	.word	0xd0392a00
     300:	strh.w	r2, [sp, #6]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     304:	cmp	r1, #0
     306:	.short	0xd1f4
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     308:	ldr	r4, [pc, #500]	; (500 <MTPD::writestring(char const*)+0x24c>)
     30a:	.short	0x2b00
     30c:	beq.n	39e <MTPD::writestring(char const*)+0xea>
     30e:	ldr	r0, [r4, #0]
        write_length_ += len;
     310:	.word	0xf5093302
     314:	str	r4, [r0, #120]	; 0x78
        
        const char * src=data;
     316:	.short	0xf10d
     318:	lsls	r6, r0, #24
        //
        int pos = 0; // into data
     31a:	.short	0x2500
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     31c:	str.w	r3, [r9, #4]
     320:	.word	0x2d01e002
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     324:	bgt.n	364 <MTPD::writestring(char const*)+0xb0>
     326:	.short	0x6820
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     328:	subs	r2, r7, r0
     32a:	rsb	r3, r5, #2
          memcpy(dst,src,to_copy);
     32e:	mov	r1, r6
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     330:	cmp	r2, r3
     332:	it	ge
     334:	.word	0x4693461a
          memcpy(dst,src,to_copy);
          pos += to_copy;
     338:	add	r5, r2
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     33a:	.short	0xf008
     33c:	ldrh.w	r6, [r9, <undefined>]
          pos += to_copy;
          src += to_copy;
     340:	.word	0xeb02445e
          dst += to_copy;
     344:	lsls	r3, r1, #12
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     346:	.short	0x42bb
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     348:	str	r3, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     34a:	.short	0xd1ea

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     34c:	movs	r2, #60	; 0x3c
     34e:	.short	0xf44f
     350:	strb	r0, [r0, #4]
     352:	.short	0x4640
     354:	bl	a270 <usb_mtp_send>	; unpredictable branch in IT block

     358:	.word	0xddf72800
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     35c:	cmp	r5, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     35e:	.short	0xf8c4
     360:	strh	r0, [r0, #0]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     362:	.short	0xdde0
  #define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
     364:	ldrb.w	r2, [sl, #1]!
     368:	.word	0x1000f899
     36c:	ldr.w	r3, [r9, #4]
     370:	.word	0xd1c52a00
     374:	movs	r2, #0
     376:	.short	0xf8ad
     378:	movs	r0, #4
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     37a:	.short	0x2900
     37c:	beq.n	47c <MTPD::writestring(char const*)+0x1c8>
      {
        write_length_ += len;
     37e:	.short	0x3302
     380:	str.w	r3, [r9, #4]
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    } else 
    { write8(0);
    }
  }
     384:	addge	sp, #12
     386:	.short	0xe8bd
     388:	ldrh	r0, [r6, #62]	; 0x3e
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     38a:	.short	0x7802
     38c:	strb.w	r3, [sp, #3]
      {
        write_length_ += len;
     390:	.word	0xb1426843
     394:	adds	r3, #1
     396:	.short	0x6043
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    } else 
    { write8(0);
    }
  }
     398:	add	sp, #12
     39a:	.short	0xe8bd
     39c:	ldrh	r0, [r6, #62]	; 0x3e
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     39e:	.short	0x4640
     3a0:	str.w	r8, [r4]
     3a4:	.word	0x2b00e7b4
     3a8:	beq.w	4da <MTPD::writestring(char const*)+0x226>
     3ac:	.word	0x68204c54
        write_length_ += len;
     3b0:	adds	r3, #1
     3b2:	.short	0xf509
     3b4:	str	r4, [r0, #120]	; 0x78
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     3b6:	.short	0xf509
     3b8:	ldrb	r0, [r1, #0]
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
     3ba:	.short	0xf10d
     3bc:	lsls	r3, r0, #24
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     3be:	.short	0xf8c9
     3c0:	adds	r0, #4
        
        const char * src=data;
        //
        int pos = 0; // into data
     3c2:	mov.w	r9, #0
     3c6:	.short	0xe003
        while(pos<len)
     3c8:	cmp.w	r9, #0
     3cc:	.word	0x6820dce4
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     3d0:	subs	r5, r7, r0
     3d2:	.short	0xf1c9
     3d4:	lsls	r1, r0, #12
          memcpy(dst,src,to_copy);
     3d6:	.short	0x4631
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     3d8:	cmp	r5, r3
     3da:	.short	0xbfa8
     3dc:	movge	r5, r3
          memcpy(dst,src,to_copy);
     3de:	.short	0x462a
          pos += to_copy;
     3e0:	add	r9, r5
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     3e2:	.short	0xf007
     3e4:	vmlal.u32	q11, d5, d19
          pos += to_copy;
          src += to_copy;
     3e8:	.word	0x441d442e
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     3ec:	cmp	r5, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     3ee:	.short	0x6025
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     3f0:	bne.n	3c8 <MTPD::writestring(char const*)+0x114>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     3f2:	.short	0x223c
     3f4:	mov.w	r1, #512	; 0x200
     3f8:	.word	0xf0094640
     3fc:	vsub.i64	d2, d9, d0
     400:	.word	0xf8c4ddf7
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     404:	strh	r0, [r0, #0]
     406:	.short	0xe7df
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     408:	cmp	r3, #0
     40a:	.short	0xd072
     40c:	ldr	r4, [pc, #240]	; (500 <MTPD::writestring(char const*)+0x24c>)
     40e:	.short	0x6820
        write_length_ += len;
     410:	adds	r3, #1
     412:	.short	0xf509
     414:	ldr	r4, [r0, #8]
        
        const char * src=data;
     416:	.short	0xf10d
     418:	lsls	r2, r0, #28
        //
        int pos = 0; // into data
     41a:	.short	0x2600
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     41c:	str.w	r3, [r9, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     420:	.word	0x7b08f509
     424:	b.n	42c <MTPD::writestring(char const*)+0x178>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     426:	.short	0x2e00
     428:	bgt.n	468 <MTPD::writestring(char const*)+0x1b4>
     42a:	.short	0x6820
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     42c:	rsb	r5, r0, r8
     430:	.word	0x0301f1c6
          memcpy(dst,src,to_copy);
     434:	mov	r1, r7
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     436:	.short	0x429d
     438:	it	ge
     43a:	.short	0x461d
          memcpy(dst,src,to_copy);
     43c:	mov	r2, r5
          pos += to_copy;
     43e:	.short	0x442e
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     440:	bl	83b0 <memcpy>	; unpredictable branch in IT block

          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     444:	.word	0x442f6823
     448:	add	r5, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     44a:	cmpge	r5, r8
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     44c:	str	r5, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     44e:	bne.n	426 <MTPD::writestring(char const*)+0x172>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     450:	movs	r2, #60	; 0x3c
     452:	mov.w	r1, #512	; 0x200
     456:	mov	r0, fp
     458:	bl	a270 <usb_mtp_send>
     45c:	cmp	r0, #0
     45e:	ble.n	450 <MTPD::writestring(char const*)+0x19c>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     460:	cmp	r6, #0
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     462:	str.w	fp, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     466:	ble.n	42a <MTPD::writestring(char const*)+0x176>
  #define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
     468:	ldrb.w	r2, [sl]
     46c:	ldrb.w	r1, [r9]
     470:	ldr.w	r3, [r9, #4]
     474:	cmp	r2, #0
     476:	bne.w	2ec <MTPD::writestring(char const*)+0x38>
     47a:	b.n	374 <MTPD::writestring(char const*)+0xc0>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     47c:	cbz	r3, 4e6 <MTPD::writestring(char const*)+0x232>
     47e:	ldr	r4, [pc, #128]	; (500 <MTPD::writestring(char const*)+0x24c>)
     480:	ldr	r0, [r4, #0]
        write_length_ += len;
     482:	adds	r3, #2
     484:	add.w	r7, r9, #1056	; 0x420
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     488:	add.w	r8, r9, #544	; 0x220
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
     48c:	add	r6, sp, #4
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     48e:	str.w	r3, [r9, #4]
        
        const char * src=data;
        //
        int pos = 0; // into data
     492:	mov.w	r9, #0
     496:	b.n	4a2 <MTPD::writestring(char const*)+0x1ee>
        while(pos<len)
     498:	cmp.w	r9, #1
     49c:	bgt.w	398 <MTPD::writestring(char const*)+0xe4>
     4a0:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     4a2:	subs	r5, r7, r0
     4a4:	rsb	r3, r9, #2
          memcpy(dst,src,to_copy);
     4a8:	mov	r1, r6
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     4aa:	cmp	r5, r3
     4ac:	it	ge
     4ae:	movge	r5, r3
          memcpy(dst,src,to_copy);
     4b0:	mov	r2, r5
          pos += to_copy;
     4b2:	add	r9, r5
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     4b4:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     4b8:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
     4ba:	add	r6, r5
          dst += to_copy;
     4bc:	add	r5, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     4be:	cmp	r5, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     4c0:	str	r5, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     4c2:	bne.n	498 <MTPD::writestring(char const*)+0x1e4>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     4c4:	movs	r2, #60	; 0x3c
     4c6:	mov.w	r1, #512	; 0x200
     4ca:	mov	r0, r8
     4cc:	bl	a270 <usb_mtp_send>
     4d0:	cmp	r0, #0
     4d2:	ble.n	4c4 <MTPD::writestring(char const*)+0x210>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     4d4:	str.w	r8, [r4]
     4d8:	b.n	498 <MTPD::writestring(char const*)+0x1e4>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     4da:	add.w	r2, r0, #544	; 0x220
     4de:	ldr	r4, [pc, #32]	; (500 <MTPD::writestring(char const*)+0x24c>)
     4e0:	mov	r0, r2
     4e2:	str	r2, [r4, #0]
     4e4:	b.n	3b0 <MTPD::writestring(char const*)+0xfc>
     4e6:	add.w	r2, r9, #544	; 0x220
     4ea:	ldr	r4, [pc, #20]	; (500 <MTPD::writestring(char const*)+0x24c>)
     4ec:	mov	r0, r2
     4ee:	str	r2, [r4, #0]
     4f0:	b.n	482 <MTPD::writestring(char const*)+0x1ce>
     4f2:	add.w	r2, r9, #544	; 0x220
     4f6:	ldr	r4, [pc, #8]	; (500 <MTPD::writestring(char const*)+0x24c>)
     4f8:	mov	r0, r2
     4fa:	str	r2, [r4, #0]
     4fc:	b.n	410 <MTPD::writestring(char const*)+0x15c>
     4fe:	nop
     500:	.word	0x20004204

00000504 <MTPD::WriteDescriptor()>:
    } else 
    { write8(0);
    }
  }

  void WriteDescriptor() {
     504:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     508:	movs	r2, #100	; 0x64
     50a:	sub	sp, #92	; 0x5c
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     50c:	ldrb	r3, [r0, #0]
    } else 
    { write8(0);
    }
  }

  void WriteDescriptor() {
     50e:	mov	r5, r0
     510:	strh.w	r2, [sp, #14]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     514:	cmp	r3, #0
     516:	beq.w	db4 <MTPD::WriteDescriptor()+0x8b0>
      {
        write_length_ += len;
     51a:	ldr	r3, [r0, #4]
     51c:	movs	r2, #6
     51e:	adds	r3, #2
     520:	str	r2, [sp, #48]	; 0x30
     522:	movs	r2, #100	; 0x64
     524:	adds	r3, #4
     526:	strh.w	r2, [sp, #12]
     52a:	movs	r2, #20
     52c:	adds	r3, #2
     52e:	strb.w	r2, [sp, #3]
     532:	adds	r3, #1
     534:	movs	r1, #1
     536:	str	r3, [r5, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     538:	add.w	r9, r5, #544	; 0x220
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
     53c:	movs	r2, #109	; 0x6d
     53e:	ldr.w	sl, [pc, #824]	; 878 <MTPD::WriteDescriptor()+0x374>
     542:	mov	r0, r9
     544:	mov	r9, r5
     546:	mov	r5, r0
     548:	b.n	558 <MTPD::WriteDescriptor()+0x54>
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
     54a:	adds	r3, #2
  #define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
     54c:	ldrb.w	r2, [sl, #1]!
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
     550:	str.w	r3, [r9, #4]
  #define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
     554:	cmp	r2, #0
     556:	beq.n	5cc <MTPD::WriteDescriptor()+0xc8>
     558:	strh.w	r2, [sp, #26]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     55c:	cmp	r1, #0
     55e:	bne.n	54a <MTPD::WriteDescriptor()+0x46>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     560:	ldr	r7, [pc, #772]	; (868 <MTPD::WriteDescriptor()+0x364>)
     562:	cmp	r3, #0
     564:	beq.w	91c <MTPD::WriteDescriptor()+0x418>
     568:	ldr	r0, [r7, #0]
        write_length_ += len;
     56a:	adds	r3, #2
     56c:	add.w	fp, r9, #1056	; 0x420
        
        const char * src=data;
     570:	add.w	r8, sp, #26
        //
        int pos = 0; // into data
     574:	movs	r6, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     576:	str.w	r3, [r9, #4]
     57a:	b.n	582 <MTPD::WriteDescriptor()+0x7e>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     57c:	cmp	r6, #1
     57e:	bgt.n	5bc <MTPD::WriteDescriptor()+0xb8>
     580:	ldr	r0, [r7, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     582:	rsb	r4, r0, fp
     586:	rsb	r3, r6, #2
          memcpy(dst,src,to_copy);
     58a:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     58c:	cmp	r4, r3
     58e:	it	ge
     590:	movge	r4, r3
          memcpy(dst,src,to_copy);
     592:	mov	r2, r4
          pos += to_copy;
     594:	add	r6, r4
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     596:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     59a:	ldr	r3, [r7, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
     59c:	add	r8, r4
          dst += to_copy;
     59e:	add	r4, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     5a0:	cmp	r4, fp
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     5a2:	str	r4, [r7, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     5a4:	bne.n	57c <MTPD::WriteDescriptor()+0x78>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     5a6:	movs	r2, #60	; 0x3c
     5a8:	mov.w	r1, #512	; 0x200
     5ac:	mov	r0, r5
     5ae:	bl	a270 <usb_mtp_send>
     5b2:	cmp	r0, #0
     5b4:	ble.n	5a6 <MTPD::WriteDescriptor()+0xa2>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     5b6:	cmp	r6, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     5b8:	str	r5, [r7, #0]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     5ba:	ble.n	580 <MTPD::WriteDescriptor()+0x7c>
  #define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
     5bc:	ldrb.w	r2, [sl, #1]!
     5c0:	ldrb.w	r1, [r9]
     5c4:	ldr.w	r3, [r9, #4]
     5c8:	cmp	r2, #0
     5ca:	bne.n	558 <MTPD::WriteDescriptor()+0x54>
     5cc:	mov	r5, r9
     5ce:	strh.w	r2, [sp, #24]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     5d2:	cmp	r1, #0
     5d4:	beq.w	f82 <MTPD::WriteDescriptor()+0xa7e>
      {
        write_length_ += len;
     5d8:	adds	r3, #2
     5da:	strh.w	r2, [sp, #10]
     5de:	movs	r2, #11
     5e0:	adds	r3, #2
     5e2:	str	r2, [sp, #44]	; 0x2c
     5e4:	adds	r3, #4
     5e6:	movs	r1, #1
     5e8:	str	r3, [r5, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     5ea:	add.w	r9, r5, #544	; 0x220
     5ee:	ldr.w	sl, [pc, #652]	; 87c <MTPD::WriteDescriptor()+0x378>
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
     5f2:	movw	r2, #4097	; 0x1001
     5f6:	mov	r0, r9
     5f8:	mov	r9, r5
     5fa:	mov	r5, r0
     5fc:	b.n	60e <MTPD::WriteDescriptor()+0x10a>
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
    write32(supported_op_num);
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
     5fe:	ldr	r2, [pc, #620]	; (86c <MTPD::WriteDescriptor()+0x368>)
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
     600:	adds	r3, #2
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
    write32(supported_op_num);
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
     602:	cmp	r2, sl
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
     604:	str.w	r3, [r9, #4]
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
    write32(supported_op_num);
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
     608:	beq.n	680 <MTPD::WriteDescriptor()+0x17c>
     60a:	ldrh.w	r2, [sl, #2]!
     60e:	strh.w	r2, [sp, #16]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     612:	cmp	r1, #0
     614:	bne.n	5fe <MTPD::WriteDescriptor()+0xfa>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     616:	ldr	r7, [pc, #592]	; (868 <MTPD::WriteDescriptor()+0x364>)
     618:	cmp	r3, #0
     61a:	beq.w	922 <MTPD::WriteDescriptor()+0x41e>
     61e:	ldr	r0, [r7, #0]
        write_length_ += len;
     620:	adds	r3, #2
     622:	add.w	fp, r9, #1056	; 0x420
        
        const char * src=data;
     626:	add.w	r8, sp, #16
        //
        int pos = 0; // into data
     62a:	movs	r6, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     62c:	str.w	r3, [r9, #4]
     630:	b.n	638 <MTPD::WriteDescriptor()+0x134>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     632:	cmp	r6, #1
     634:	bgt.n	672 <MTPD::WriteDescriptor()+0x16e>
     636:	ldr	r0, [r7, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     638:	rsb	r4, r0, fp
     63c:	rsb	r3, r6, #2
          memcpy(dst,src,to_copy);
     640:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     642:	cmp	r4, r3
     644:	it	ge
     646:	movge	r4, r3
          memcpy(dst,src,to_copy);
     648:	mov	r2, r4
          pos += to_copy;
     64a:	add	r6, r4
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     64c:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     650:	ldr	r3, [r7, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
     652:	add	r8, r4
          dst += to_copy;
     654:	add	r4, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     656:	cmp	r4, fp
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     658:	str	r4, [r7, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     65a:	bne.n	632 <MTPD::WriteDescriptor()+0x12e>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     65c:	movs	r2, #60	; 0x3c
     65e:	mov.w	r1, #512	; 0x200
     662:	mov	r0, r5
     664:	bl	a270 <usb_mtp_send>
     668:	cmp	r0, #0
     66a:	ble.n	65c <MTPD::WriteDescriptor()+0x158>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     66c:	cmp	r6, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     66e:	str	r5, [r7, #0]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     670:	ble.n	636 <MTPD::WriteDescriptor()+0x132>
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
    write32(supported_op_num);
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
     672:	ldr	r2, [pc, #504]	; (86c <MTPD::WriteDescriptor()+0x368>)
     674:	ldrb.w	r1, [r9]
     678:	cmp	r2, sl
     67a:	ldr.w	r3, [r9, #4]
     67e:	bne.n	60a <MTPD::WriteDescriptor()+0x106>
     680:	movs	r2, #0
     682:	mov	r5, r9
     684:	str	r2, [sp, #52]	; 0x34
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     686:	cmp	r1, #0
     688:	beq.w	a40 <MTPD::WriteDescriptor()+0x53c>
     68c:	movs	r2, #1
      {
        write_length_ += len;
     68e:	adds	r3, #4
     690:	str	r2, [sp, #64]	; 0x40
     692:	movw	r2, #54274	; 0xd402
     696:	adds	r3, #4
     698:	strh.w	r2, [sp, #22]
     69c:	movs	r2, #0
     69e:	adds	r3, #2
     6a0:	str	r2, [sp, #60]	; 0x3c
     6a2:	movs	r2, #2
     6a4:	adds	r3, #4
     6a6:	str	r2, [sp, #56]	; 0x38
     6a8:	mov.w	r2, #12288	; 0x3000
     6ac:	adds	r3, #4
     6ae:	strh.w	r2, [sp, #20]
     6b2:	movw	r2, #12289	; 0x3001
     6b6:	adds	r3, #2
     6b8:	strh.w	r2, [sp, #18]
     6bc:	movs	r2, #5
     6be:	adds	r3, #2
     6c0:	strb.w	r2, [sp, #7]
     6c4:	adds	r3, #1
     6c6:	movs	r1, #1
     6c8:	str	r3, [r5, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     6ca:	add.w	r9, r5, #544	; 0x220
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
     6ce:	movs	r2, #80	; 0x50
     6d0:	ldr.w	sl, [pc, #428]	; 880 <MTPD::WriteDescriptor()+0x37c>
     6d4:	mov	r0, r9
     6d6:	mov	r9, r5
     6d8:	mov	r5, r0
     6da:	b.n	6ea <MTPD::WriteDescriptor()+0x1e6>
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
     6dc:	adds	r3, #2
  #define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
     6de:	ldrb.w	r2, [sl, #1]!
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
     6e2:	str.w	r3, [r9, #4]
  #define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
     6e6:	cmp	r2, #0
     6e8:	beq.n	75e <MTPD::WriteDescriptor()+0x25a>
     6ea:	strh.w	r2, [sp, #30]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     6ee:	cmp	r1, #0
     6f0:	bne.n	6dc <MTPD::WriteDescriptor()+0x1d8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     6f2:	ldr	r7, [pc, #372]	; (868 <MTPD::WriteDescriptor()+0x364>)
     6f4:	cmp	r3, #0
     6f6:	beq.w	928 <MTPD::WriteDescriptor()+0x424>
     6fa:	ldr	r0, [r7, #0]
        write_length_ += len;
     6fc:	adds	r3, #2
     6fe:	add.w	fp, r9, #1056	; 0x420
        
        const char * src=data;
     702:	add.w	r8, sp, #30
        //
        int pos = 0; // into data
     706:	movs	r6, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     708:	str.w	r3, [r9, #4]
     70c:	b.n	714 <MTPD::WriteDescriptor()+0x210>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     70e:	cmp	r6, #1
     710:	bgt.n	74e <MTPD::WriteDescriptor()+0x24a>
     712:	ldr	r0, [r7, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     714:	rsb	r4, r0, fp
     718:	rsb	r3, r6, #2
          memcpy(dst,src,to_copy);
     71c:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     71e:	cmp	r4, r3
     720:	it	ge
     722:	movge	r4, r3
          memcpy(dst,src,to_copy);
     724:	mov	r2, r4
          pos += to_copy;
     726:	add	r6, r4
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     728:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     72c:	ldr	r3, [r7, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
     72e:	add	r8, r4
          dst += to_copy;
     730:	add	r4, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     732:	cmp	r4, fp
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     734:	str	r4, [r7, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     736:	bne.n	70e <MTPD::WriteDescriptor()+0x20a>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     738:	movs	r2, #60	; 0x3c
     73a:	mov.w	r1, #512	; 0x200
     73e:	mov	r0, r5
     740:	bl	a270 <usb_mtp_send>
     744:	cmp	r0, #0
     746:	ble.n	738 <MTPD::WriteDescriptor()+0x234>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     748:	cmp	r6, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     74a:	str	r5, [r7, #0]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     74c:	ble.n	712 <MTPD::WriteDescriptor()+0x20e>
  #define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
     74e:	ldrb.w	r2, [sl, #1]!
     752:	ldrb.w	r1, [r9]
     756:	ldr.w	r3, [r9, #4]
     75a:	cmp	r2, #0
     75c:	bne.n	6ea <MTPD::WriteDescriptor()+0x1e6>
     75e:	mov	r5, r9
     760:	strh.w	r2, [sp, #28]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     764:	cmp	r1, #0
     766:	beq.w	12f6 <MTPD::WriteDescriptor()+0xdf2>
     76a:	movs	r2, #7
      {
        write_length_ += len;
     76c:	adds	r3, #2
     76e:	strb.w	r2, [sp, #6]
     772:	adds	r3, #1
     774:	movs	r1, #1
     776:	str	r3, [r5, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     778:	add.w	r9, r5, #544	; 0x220
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
     77c:	movs	r2, #84	; 0x54
     77e:	ldr.w	sl, [pc, #260]	; 884 <MTPD::WriteDescriptor()+0x380>
     782:	mov	r0, r9
     784:	mov	r9, r5
     786:	mov	r5, r0
     788:	b.n	798 <MTPD::WriteDescriptor()+0x294>
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
     78a:	adds	r3, #2
  #define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
     78c:	ldrb.w	r2, [sl, #1]!
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
     790:	str.w	r3, [r9, #4]
  #define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
     794:	cmp	r2, #0
     796:	beq.n	80c <MTPD::WriteDescriptor()+0x308>
     798:	strh.w	r2, [sp, #34]	; 0x22
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     79c:	cmp	r1, #0
     79e:	bne.n	78a <MTPD::WriteDescriptor()+0x286>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     7a0:	ldr	r7, [pc, #196]	; (868 <MTPD::WriteDescriptor()+0x364>)
     7a2:	cmp	r3, #0
     7a4:	beq.w	92e <MTPD::WriteDescriptor()+0x42a>
     7a8:	ldr	r0, [r7, #0]
        write_length_ += len;
     7aa:	adds	r3, #2
     7ac:	add.w	fp, r9, #1056	; 0x420
        
        const char * src=data;
     7b0:	add.w	r8, sp, #34	; 0x22
        //
        int pos = 0; // into data
     7b4:	movs	r6, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     7b6:	str.w	r3, [r9, #4]
     7ba:	b.n	7c2 <MTPD::WriteDescriptor()+0x2be>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     7bc:	cmp	r6, #1
     7be:	bgt.n	7fc <MTPD::WriteDescriptor()+0x2f8>
     7c0:	ldr	r0, [r7, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     7c2:	rsb	r4, r0, fp
     7c6:	rsb	r3, r6, #2
          memcpy(dst,src,to_copy);
     7ca:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     7cc:	cmp	r4, r3
     7ce:	it	ge
     7d0:	movge	r4, r3
          memcpy(dst,src,to_copy);
     7d2:	mov	r2, r4
          pos += to_copy;
     7d4:	add	r6, r4
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     7d6:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     7da:	ldr	r3, [r7, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
     7dc:	add	r8, r4
          dst += to_copy;
     7de:	add	r4, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     7e0:	cmp	r4, fp
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     7e2:	str	r4, [r7, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     7e4:	bne.n	7bc <MTPD::WriteDescriptor()+0x2b8>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     7e6:	movs	r2, #60	; 0x3c
     7e8:	mov.w	r1, #512	; 0x200
     7ec:	mov	r0, r5
     7ee:	bl	a270 <usb_mtp_send>
     7f2:	cmp	r0, #0
     7f4:	ble.n	7e6 <MTPD::WriteDescriptor()+0x2e2>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     7f6:	cmp	r6, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     7f8:	str	r5, [r7, #0]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     7fa:	ble.n	7c0 <MTPD::WriteDescriptor()+0x2bc>
  #define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
     7fc:	ldrb.w	r2, [sl, #1]!
     800:	ldrb.w	r1, [r9]
     804:	ldr.w	r3, [r9, #4]
     808:	cmp	r2, #0
     80a:	bne.n	798 <MTPD::WriteDescriptor()+0x294>
     80c:	mov	r5, r9
     80e:	strh.w	r2, [sp, #32]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     812:	cmp	r1, #0
     814:	beq.w	1448 <MTPD::WriteDescriptor()+0xf44>
      {
        write_length_ += len;
     818:	adds	r3, #2
     81a:	str.w	r3, [r9, #4]
    writestring(MTP_MODEL);     // Model
    //writestring(MTP_VERS);      // version
    //writestring(MTP_SERNR);     // serial
    
    char buf[20];    
    dtostrf( (float)(TEENSYDUINO / 100.0f), 3, 2, buf);
     81e:	movs	r1, #2
     820:	vldr	s0, [pc, #76]	; 870 <MTPD::WriteDescriptor()+0x36c>
     824:	add	r2, sp, #68	; 0x44
     826:	movs	r0, #3
     828:	bl	9934 <dtostrf>
    strlcat(buf, " / MTP " MTP_VERS, sizeof(buf) );
     82c:	add	r0, sp, #68	; 0x44
     82e:	movs	r2, #20
     830:	ldr	r1, [pc, #64]	; (874 <MTPD::WriteDescriptor()+0x370>)
     832:	bl	c1f4 <strlcat>

  #define Store2Storage(x) (x+1)
  #define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
     836:	ldrb.w	r6, [sp, #68]	; 0x44
     83a:	cmp	r6, #0
     83c:	beq.n	93a <MTPD::WriteDescriptor()+0x436>
    { write8(strlen(str) + 1);
     83e:	add	r0, sp, #68	; 0x44
     840:	bl	c280 <strlen>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     844:	ldrb	r4, [r5, #0]
     846:	adds	r0, #1
      {
        write_length_ += len;
     848:	ldr	r3, [r5, #4]
     84a:	strb.w	r0, [sp, #5]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     84e:	cmp	r4, #0
     850:	beq.w	13d0 <MTPD::WriteDescriptor()+0xecc>
      {
        write_length_ += len;
     854:	adds	r3, #1
     856:	str	r3, [r5, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     858:	add.w	r9, r5, #544	; 0x220
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
     85c:	add.w	sl, sp, #68	; 0x44
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     860:	mov	r2, r9
     862:	mov	r9, r5
     864:	mov	r5, r2
     866:	b.n	896 <MTPD::WriteDescriptor()+0x392>
     868:	.word	0x20004204
     86c:	.word	0x20000428
     870:	.word	0x3fc51eb8
     874:	.word	0x20000af8
     878:	.word	0x20000ad4
     87c:	.word	0x20000414
     880:	.word	0x20000ae8
     884:	.word	0x20000af0
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
     888:	adds	r3, #2
  #define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
     88a:	ldrb.w	r6, [sl, #1]!
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
     88e:	str.w	r3, [r9, #4]
  #define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
     892:	cmp	r6, #0
     894:	beq.n	908 <MTPD::WriteDescriptor()+0x404>
     896:	strh.w	r6, [sp, #38]	; 0x26
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     89a:	cmp	r4, #0
     89c:	bne.n	888 <MTPD::WriteDescriptor()+0x384>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     89e:	ldr	r7, [pc, #776]	; (ba8 <MTPD::WriteDescriptor()+0x6a4>)
     8a0:	cmp	r3, #0
     8a2:	beq.n	934 <MTPD::WriteDescriptor()+0x430>
     8a4:	ldr	r0, [r7, #0]
        write_length_ += len;
     8a6:	adds	r3, #2
     8a8:	add.w	fp, r9, #1056	; 0x420
        
        const char * src=data;
     8ac:	add.w	r8, sp, #38	; 0x26
        //
        int pos = 0; // into data
     8b0:	movs	r6, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     8b2:	str.w	r3, [r9, #4]
     8b6:	b.n	8be <MTPD::WriteDescriptor()+0x3ba>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     8b8:	cmp	r6, #1
     8ba:	bgt.n	8f8 <MTPD::WriteDescriptor()+0x3f4>
     8bc:	ldr	r0, [r7, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     8be:	rsb	r4, r0, fp
     8c2:	rsb	r3, r6, #2
          memcpy(dst,src,to_copy);
     8c6:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     8c8:	cmp	r4, r3
     8ca:	it	ge
     8cc:	movge	r4, r3
          memcpy(dst,src,to_copy);
     8ce:	mov	r2, r4
          pos += to_copy;
     8d0:	add	r6, r4
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     8d2:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     8d6:	ldr	r3, [r7, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
     8d8:	add	r8, r4
          dst += to_copy;
     8da:	add	r4, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     8dc:	cmp	r4, fp
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     8de:	str	r4, [r7, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     8e0:	bne.n	8b8 <MTPD::WriteDescriptor()+0x3b4>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     8e2:	movs	r2, #60	; 0x3c
     8e4:	mov.w	r1, #512	; 0x200
     8e8:	mov	r0, r5
     8ea:	bl	a270 <usb_mtp_send>
     8ee:	cmp	r0, #0
     8f0:	ble.n	8e2 <MTPD::WriteDescriptor()+0x3de>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     8f2:	cmp	r6, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     8f4:	str	r5, [r7, #0]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     8f6:	ble.n	8bc <MTPD::WriteDescriptor()+0x3b8>
  #define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
     8f8:	ldrb.w	r6, [sl, #1]!
     8fc:	ldrb.w	r4, [r9]
     900:	ldr.w	r3, [r9, #4]
     904:	cmp	r6, #0
     906:	bne.n	896 <MTPD::WriteDescriptor()+0x392>
     908:	mov	r5, r9
     90a:	movs	r2, #0
     90c:	strh.w	r2, [sp, #36]	; 0x24
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     910:	cmp	r4, #0
     912:	beq.w	1238 <MTPD::WriteDescriptor()+0xd34>
      {
        write_length_ += len;
     916:	adds	r7, r3, #2
     918:	str	r7, [r5, #4]
     91a:	b.n	94c <MTPD::WriteDescriptor()+0x448>
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     91c:	mov	r0, r5
     91e:	str	r5, [r7, #0]
     920:	b.n	56a <MTPD::WriteDescriptor()+0x66>
     922:	mov	r0, r5
     924:	str	r5, [r7, #0]
     926:	b.n	620 <MTPD::WriteDescriptor()+0x11c>
     928:	mov	r0, r5
     92a:	str	r5, [r7, #0]
     92c:	b.n	6fc <MTPD::WriteDescriptor()+0x1f8>
     92e:	mov	r0, r5
     930:	str	r5, [r7, #0]
     932:	b.n	7aa <MTPD::WriteDescriptor()+0x2a6>
     934:	mov	r0, r5
     936:	str	r5, [r7, #0]
     938:	b.n	8a6 <MTPD::WriteDescriptor()+0x3a2>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     93a:	ldrb	r4, [r5, #0]
     93c:	strb.w	r6, [sp, #4]
      {
        write_length_ += len;
     940:	ldr	r3, [r5, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     942:	cmp	r4, #0
     944:	beq.w	112c <MTPD::WriteDescriptor()+0xc28>
      {
        write_length_ += len;
     948:	adds	r7, r3, #1
     94a:	str	r7, [r5, #4]
     94c:	ldr	r2, [pc, #604]	; (bac <MTPD::WriteDescriptor()+0x6a8>)
     94e:	add	r3, sp, #68	; 0x44
     950:	add.w	r0, sp, #78	; 0x4e
    dtostrf( (float)(TEENSYDUINO / 100.0f), 3, 2, buf);
    strlcat(buf, " / MTP " MTP_VERS, sizeof(buf) );
    writestring( buf );    
    #pragma GCC diagnostic push
    #pragma GCC diagnostic ignored "-Warray-bounds"
    for (size_t i=0; i<10; i++) buf[i] = usb_string_serial_number.wString[i];
     954:	ldrh.w	r1, [r2, #2]!
     958:	strb.w	r1, [r3], #1
     95c:	cmp	r0, r3
     95e:	bne.n	954 <MTPD::WriteDescriptor()+0x450>

  #define Store2Storage(x) (x+1)
  #define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
     960:	ldrb.w	r6, [sp, #68]	; 0x44
     964:	cmp	r6, #0
     966:	beq.n	a2c <MTPD::WriteDescriptor()+0x528>
    { write8(strlen(str) + 1);
     968:	add	r0, sp, #68	; 0x44
     96a:	bl	c280 <strlen>
     96e:	adds	r0, #1
     970:	strb.w	r0, [sp, #9]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     974:	cmp	r4, #0
     976:	beq.w	11c6 <MTPD::WriteDescriptor()+0xcc2>
      {
        write_length_ += len;
     97a:	adds	r3, r7, #1
     97c:	str	r3, [r5, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     97e:	add.w	r9, r5, #544	; 0x220
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
     982:	add.w	sl, sp, #68	; 0x44
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     986:	mov	r2, r9
     988:	mov	r9, r5
     98a:	mov	r5, r2
     98c:	b.n	99c <MTPD::WriteDescriptor()+0x498>
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
     98e:	adds	r3, #2
  #define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
     990:	ldrb.w	r6, [sl, #1]!
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
     994:	str.w	r3, [r9, #4]
  #define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
     998:	cmp	r6, #0
     99a:	beq.n	a0e <MTPD::WriteDescriptor()+0x50a>
     99c:	strh.w	r6, [sp, #42]	; 0x2a
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     9a0:	cmp	r4, #0
     9a2:	bne.n	98e <MTPD::WriteDescriptor()+0x48a>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     9a4:	ldr	r7, [pc, #512]	; (ba8 <MTPD::WriteDescriptor()+0x6a4>)
     9a6:	cmp	r3, #0
     9a8:	beq.n	a26 <MTPD::WriteDescriptor()+0x522>
     9aa:	ldr	r0, [r7, #0]
        write_length_ += len;
     9ac:	adds	r3, #2
     9ae:	add.w	fp, r9, #1056	; 0x420
        
        const char * src=data;
     9b2:	add.w	r8, sp, #42	; 0x2a
        //
        int pos = 0; // into data
     9b6:	movs	r6, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     9b8:	str.w	r3, [r9, #4]
     9bc:	b.n	9c4 <MTPD::WriteDescriptor()+0x4c0>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     9be:	cmp	r6, #1
     9c0:	bgt.n	9fe <MTPD::WriteDescriptor()+0x4fa>
     9c2:	ldr	r0, [r7, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     9c4:	rsb	r4, r0, fp
     9c8:	rsb	r3, r6, #2
          memcpy(dst,src,to_copy);
     9cc:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     9ce:	cmp	r4, r3
     9d0:	it	ge
     9d2:	movge	r4, r3
          memcpy(dst,src,to_copy);
     9d4:	mov	r2, r4
          pos += to_copy;
     9d6:	add	r6, r4
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     9d8:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     9dc:	ldr	r3, [r7, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
     9de:	add	r8, r4
          dst += to_copy;
     9e0:	add	r4, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     9e2:	cmp	r4, fp
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     9e4:	str	r4, [r7, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     9e6:	bne.n	9be <MTPD::WriteDescriptor()+0x4ba>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     9e8:	movs	r2, #60	; 0x3c
     9ea:	mov.w	r1, #512	; 0x200
     9ee:	mov	r0, r5
     9f0:	bl	a270 <usb_mtp_send>
     9f4:	cmp	r0, #0
     9f6:	ble.n	9e8 <MTPD::WriteDescriptor()+0x4e4>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     9f8:	cmp	r6, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     9fa:	str	r5, [r7, #0]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     9fc:	ble.n	9c2 <MTPD::WriteDescriptor()+0x4be>
  #define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
     9fe:	ldrb.w	r6, [sl, #1]!
     a02:	ldrb.w	r4, [r9]
     a06:	ldr.w	r3, [r9, #4]
     a0a:	cmp	r6, #0
     a0c:	bne.n	99c <MTPD::WriteDescriptor()+0x498>
     a0e:	mov	r5, r9
     a10:	movs	r2, #0
     a12:	strh.w	r2, [sp, #40]	; 0x28
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     a16:	cmp	r4, #0
     a18:	beq.w	1296 <MTPD::WriteDescriptor()+0xd92>
      {
        write_length_ += len;
     a1c:	adds	r3, #2
     a1e:	str	r3, [r5, #4]
    #pragma GCC diagnostic push
    #pragma GCC diagnostic ignored "-Warray-bounds"
    for (size_t i=0; i<10; i++) buf[i] = usb_string_serial_number.wString[i];
    #pragma GCC diagnostic pop
    writestring(buf);    
  }
     a20:	add	sp, #92	; 0x5c
     a22:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     a26:	mov	r0, r5
     a28:	str	r5, [r7, #0]
     a2a:	b.n	9ac <MTPD::WriteDescriptor()+0x4a8>
     a2c:	strb.w	r6, [sp, #8]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     a30:	cmp	r4, #0
     a32:	beq.w	10cc <MTPD::WriteDescriptor()+0xbc8>
      {
        write_length_ += len;
     a36:	adds	r3, r7, #1
     a38:	str	r3, [r5, #4]
    #pragma GCC diagnostic push
    #pragma GCC diagnostic ignored "-Warray-bounds"
    for (size_t i=0; i<10; i++) buf[i] = usb_string_serial_number.wString[i];
    #pragma GCC diagnostic pop
    writestring(buf);    
  }
     a3a:	add	sp, #92	; 0x5c
     a3c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     a40:	cmp	r3, #0
     a42:	beq.w	f76 <MTPD::WriteDescriptor()+0xa72>
     a46:	ldr	r4, [pc, #352]	; (ba8 <MTPD::WriteDescriptor()+0x6a4>)
     a48:	ldr	r0, [r4, #0]
        write_length_ += len;
     a4a:	adds	r3, #4
     a4c:	add.w	r6, r5, #1056	; 0x420
        
        const char * src=data;
     a50:	add.w	r9, sp, #52	; 0x34
        //
        int pos = 0; // into data
     a54:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     a58:	str	r3, [r5, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     a5a:	add.w	sl, r5, #544	; 0x220
     a5e:	b.n	a68 <MTPD::WriteDescriptor()+0x564>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     a60:	cmp.w	r8, #3
     a64:	bgt.n	aa4 <MTPD::WriteDescriptor()+0x5a0>
     a66:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     a68:	subs	r7, r6, r0
     a6a:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
     a6e:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     a70:	cmp	r7, r3
     a72:	it	ge
     a74:	movge	r7, r3
          memcpy(dst,src,to_copy);
     a76:	mov	r2, r7
          pos += to_copy;
     a78:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     a7a:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     a7e:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
     a80:	add	r9, r7
          dst += to_copy;
     a82:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     a84:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     a86:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     a88:	bne.n	a60 <MTPD::WriteDescriptor()+0x55c>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     a8a:	movs	r2, #60	; 0x3c
     a8c:	mov.w	r1, #512	; 0x200
     a90:	mov	r0, sl
     a92:	bl	a270 <usb_mtp_send>
     a96:	cmp	r0, #0
     a98:	ble.n	a8a <MTPD::WriteDescriptor()+0x586>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     a9a:	cmp.w	r8, #3
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     a9e:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     aa2:	ble.n	a66 <MTPD::WriteDescriptor()+0x562>
     aa4:	movs	r1, #1
     aa6:	ldrb	r2, [r5, #0]
     aa8:	ldr	r3, [r5, #4]
     aaa:	str	r1, [sp, #64]	; 0x40
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     aac:	cmp	r2, #0
     aae:	bne.w	692 <MTPD::WriteDescriptor()+0x18e>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     ab2:	cmp	r3, #0
     ab4:	beq.w	14ba <MTPD::WriteDescriptor()+0xfb6>
     ab8:	ldr	r0, [r4, #0]
        write_length_ += len;
     aba:	adds	r3, #4
        
        const char * src=data;
     abc:	add.w	r9, sp, #64	; 0x40
        //
        int pos = 0; // into data
     ac0:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     ac4:	add.w	sl, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     ac8:	str	r3, [r5, #4]
     aca:	b.n	ad4 <MTPD::WriteDescriptor()+0x5d0>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     acc:	cmp.w	r8, #3
     ad0:	bgt.n	b10 <MTPD::WriteDescriptor()+0x60c>
     ad2:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     ad4:	subs	r7, r6, r0
     ad6:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
     ada:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     adc:	cmp	r7, r3
     ade:	it	ge
     ae0:	movge	r7, r3
          memcpy(dst,src,to_copy);
     ae2:	mov	r2, r7
          pos += to_copy;
     ae4:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     ae6:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     aea:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
     aec:	add	r9, r7
          dst += to_copy;
     aee:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     af0:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     af2:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     af4:	bne.n	acc <MTPD::WriteDescriptor()+0x5c8>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     af6:	movs	r2, #60	; 0x3c
     af8:	mov.w	r1, #512	; 0x200
     afc:	mov	r0, sl
     afe:	bl	a270 <usb_mtp_send>
     b02:	cmp	r0, #0
     b04:	ble.n	af6 <MTPD::WriteDescriptor()+0x5f2>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     b06:	cmp.w	r8, #3
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     b0a:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     b0e:	ble.n	ad2 <MTPD::WriteDescriptor()+0x5ce>
     b10:	movw	r1, #54274	; 0xd402
     b14:	ldrb	r2, [r5, #0]
     b16:	ldr	r3, [r5, #4]
     b18:	strh.w	r1, [sp, #22]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     b1c:	cmp	r2, #0
     b1e:	bne.w	69c <MTPD::WriteDescriptor()+0x198>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     b22:	cmp	r3, #0
     b24:	beq.w	11bc <MTPD::WriteDescriptor()+0xcb8>
     b28:	ldr	r0, [r4, #0]
        write_length_ += len;
     b2a:	adds	r3, #2
        
        const char * src=data;
     b2c:	add.w	r9, sp, #22
        //
        int pos = 0; // into data
     b30:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     b34:	add.w	sl, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     b38:	str	r3, [r5, #4]
     b3a:	b.n	b44 <MTPD::WriteDescriptor()+0x640>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     b3c:	cmp.w	r8, #1
     b40:	bgt.n	b80 <MTPD::WriteDescriptor()+0x67c>
     b42:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     b44:	subs	r7, r6, r0
     b46:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
     b4a:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     b4c:	cmp	r7, r3
     b4e:	it	ge
     b50:	movge	r7, r3
          memcpy(dst,src,to_copy);
     b52:	mov	r2, r7
          pos += to_copy;
     b54:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     b56:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     b5a:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
     b5c:	add	r9, r7
          dst += to_copy;
     b5e:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     b60:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     b62:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     b64:	bne.n	b3c <MTPD::WriteDescriptor()+0x638>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     b66:	movs	r2, #60	; 0x3c
     b68:	mov.w	r1, #512	; 0x200
     b6c:	mov	r0, sl
     b6e:	bl	a270 <usb_mtp_send>
     b72:	cmp	r0, #0
     b74:	ble.n	b66 <MTPD::WriteDescriptor()+0x662>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     b76:	cmp.w	r8, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     b7a:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     b7e:	ble.n	b42 <MTPD::WriteDescriptor()+0x63e>
     b80:	movs	r1, #0
     b82:	ldrb	r2, [r5, #0]
     b84:	ldr	r3, [r5, #4]
     b86:	str	r1, [sp, #60]	; 0x3c
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     b88:	cmp	r2, #0
     b8a:	bne.w	6a2 <MTPD::WriteDescriptor()+0x19e>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     b8e:	cmp	r3, #0
     b90:	beq.w	11b2 <MTPD::WriteDescriptor()+0xcae>
     b94:	ldr	r0, [r4, #0]
        write_length_ += len;
     b96:	adds	r3, #4
        
        const char * src=data;
     b98:	add.w	r9, sp, #60	; 0x3c
        //
        int pos = 0; // into data
     b9c:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     ba0:	add.w	sl, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     ba4:	str	r3, [r5, #4]
     ba6:	b.n	bb8 <MTPD::WriteDescriptor()+0x6b4>
     ba8:	.word	0x20004204
     bac:	.word	0x200017dc
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     bb0:	cmp.w	r8, #3
     bb4:	bgt.n	bf4 <MTPD::WriteDescriptor()+0x6f0>
     bb6:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     bb8:	subs	r7, r6, r0
     bba:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
     bbe:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     bc0:	cmp	r7, r3
     bc2:	it	ge
     bc4:	movge	r7, r3
          memcpy(dst,src,to_copy);
     bc6:	mov	r2, r7
          pos += to_copy;
     bc8:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     bca:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     bce:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
     bd0:	add	r9, r7
          dst += to_copy;
     bd2:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     bd4:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     bd6:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     bd8:	bne.n	bb0 <MTPD::WriteDescriptor()+0x6ac>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     bda:	movs	r2, #60	; 0x3c
     bdc:	mov.w	r1, #512	; 0x200
     be0:	mov	r0, sl
     be2:	bl	a270 <usb_mtp_send>
     be6:	cmp	r0, #0
     be8:	ble.n	bda <MTPD::WriteDescriptor()+0x6d6>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     bea:	cmp.w	r8, #3
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     bee:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     bf2:	ble.n	bb6 <MTPD::WriteDescriptor()+0x6b2>
     bf4:	movs	r1, #2
     bf6:	ldrb	r2, [r5, #0]
     bf8:	ldr	r3, [r5, #4]
     bfa:	str	r1, [sp, #56]	; 0x38
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     bfc:	cmp	r2, #0
     bfe:	bne.w	6a8 <MTPD::WriteDescriptor()+0x1a4>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     c02:	cmp	r3, #0
     c04:	beq.w	11a8 <MTPD::WriteDescriptor()+0xca4>
     c08:	ldr	r0, [r4, #0]
        write_length_ += len;
     c0a:	adds	r3, #4
        
        const char * src=data;
     c0c:	add.w	r9, sp, #56	; 0x38
        //
        int pos = 0; // into data
     c10:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     c14:	add.w	sl, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     c18:	str	r3, [r5, #4]
     c1a:	b.n	c24 <MTPD::WriteDescriptor()+0x720>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     c1c:	cmp.w	r8, #3
     c20:	bgt.n	c60 <MTPD::WriteDescriptor()+0x75c>
     c22:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     c24:	subs	r7, r6, r0
     c26:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
     c2a:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     c2c:	cmp	r7, r3
     c2e:	it	ge
     c30:	movge	r7, r3
          memcpy(dst,src,to_copy);
     c32:	mov	r2, r7
          pos += to_copy;
     c34:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     c36:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     c3a:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
     c3c:	add	r9, r7
          dst += to_copy;
     c3e:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     c40:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     c42:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     c44:	bne.n	c1c <MTPD::WriteDescriptor()+0x718>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     c46:	movs	r2, #60	; 0x3c
     c48:	mov.w	r1, #512	; 0x200
     c4c:	mov	r0, sl
     c4e:	bl	a270 <usb_mtp_send>
     c52:	cmp	r0, #0
     c54:	ble.n	c46 <MTPD::WriteDescriptor()+0x742>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     c56:	cmp.w	r8, #3
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     c5a:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     c5e:	ble.n	c22 <MTPD::WriteDescriptor()+0x71e>
     c60:	mov.w	r1, #12288	; 0x3000
     c64:	ldrb	r2, [r5, #0]
     c66:	ldr	r3, [r5, #4]
     c68:	strh.w	r1, [sp, #20]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     c6c:	cmp	r2, #0
     c6e:	bne.w	6b2 <MTPD::WriteDescriptor()+0x1ae>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     c72:	cmp	r3, #0
     c74:	beq.w	119e <MTPD::WriteDescriptor()+0xc9a>
     c78:	ldr	r0, [r4, #0]
        write_length_ += len;
     c7a:	adds	r3, #2
        
        const char * src=data;
     c7c:	add.w	r9, sp, #20
        //
        int pos = 0; // into data
     c80:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     c84:	add.w	sl, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     c88:	str	r3, [r5, #4]
     c8a:	b.n	c94 <MTPD::WriteDescriptor()+0x790>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     c8c:	cmp.w	r8, #1
     c90:	bgt.n	cd0 <MTPD::WriteDescriptor()+0x7cc>
     c92:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     c94:	subs	r7, r6, r0
     c96:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
     c9a:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     c9c:	cmp	r7, r3
     c9e:	it	ge
     ca0:	movge	r7, r3
          memcpy(dst,src,to_copy);
     ca2:	mov	r2, r7
          pos += to_copy;
     ca4:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     ca6:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     caa:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
     cac:	add	r9, r7
          dst += to_copy;
     cae:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     cb0:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     cb2:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     cb4:	bne.n	c8c <MTPD::WriteDescriptor()+0x788>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     cb6:	movs	r2, #60	; 0x3c
     cb8:	mov.w	r1, #512	; 0x200
     cbc:	mov	r0, sl
     cbe:	bl	a270 <usb_mtp_send>
     cc2:	cmp	r0, #0
     cc4:	ble.n	cb6 <MTPD::WriteDescriptor()+0x7b2>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     cc6:	cmp.w	r8, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     cca:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     cce:	ble.n	c92 <MTPD::WriteDescriptor()+0x78e>
     cd0:	movw	r1, #12289	; 0x3001
     cd4:	ldrb	r2, [r5, #0]
     cd6:	ldr	r3, [r5, #4]
     cd8:	strh.w	r1, [sp, #18]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     cdc:	cmp	r2, #0
     cde:	bne.w	6bc <MTPD::WriteDescriptor()+0x1b8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     ce2:	cmp	r3, #0
     ce4:	beq.w	1194 <MTPD::WriteDescriptor()+0xc90>
     ce8:	ldr	r0, [r4, #0]
        write_length_ += len;
     cea:	adds	r3, #2
        
        const char * src=data;
     cec:	add.w	r9, sp, #18
        //
        int pos = 0; // into data
     cf0:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     cf4:	add.w	sl, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     cf8:	str	r3, [r5, #4]
     cfa:	b.n	d04 <MTPD::WriteDescriptor()+0x800>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     cfc:	cmp.w	r8, #1
     d00:	bgt.n	d40 <MTPD::WriteDescriptor()+0x83c>
     d02:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     d04:	subs	r7, r6, r0
     d06:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
     d0a:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     d0c:	cmp	r7, r3
     d0e:	it	ge
     d10:	movge	r7, r3
          memcpy(dst,src,to_copy);
     d12:	mov	r2, r7
          pos += to_copy;
     d14:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     d16:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     d1a:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
     d1c:	add	r9, r7
          dst += to_copy;
     d1e:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     d20:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     d22:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     d24:	bne.n	cfc <MTPD::WriteDescriptor()+0x7f8>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     d26:	movs	r2, #60	; 0x3c
     d28:	mov.w	r1, #512	; 0x200
     d2c:	mov	r0, sl
     d2e:	bl	a270 <usb_mtp_send>
     d32:	cmp	r0, #0
     d34:	ble.n	d26 <MTPD::WriteDescriptor()+0x822>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     d36:	cmp.w	r8, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     d3a:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     d3e:	ble.n	d02 <MTPD::WriteDescriptor()+0x7fe>
     d40:	movs	r1, #5
     d42:	ldrb	r2, [r5, #0]
     d44:	ldr	r3, [r5, #4]
     d46:	strb.w	r1, [sp, #7]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     d4a:	cmp	r2, #0
     d4c:	bne.w	6c4 <MTPD::WriteDescriptor()+0x1c0>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     d50:	cmp	r3, #0
     d52:	beq.w	14fe <MTPD::WriteDescriptor()+0xffa>
     d56:	ldr	r0, [r4, #0]
        write_length_ += len;
     d58:	adds	r3, #1
        
        const char * src=data;
     d5a:	add.w	r9, sp, #7
        //
        int pos = 0; // into data
     d5e:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     d62:	add.w	sl, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     d66:	str	r3, [r5, #4]
     d68:	b.n	d72 <MTPD::WriteDescriptor()+0x86e>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     d6a:	cmp.w	r8, #0
     d6e:	bgt.n	dae <MTPD::WriteDescriptor()+0x8aa>
     d70:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     d72:	subs	r7, r6, r0
     d74:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
     d78:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     d7a:	cmp	r7, r3
     d7c:	it	ge
     d7e:	movge	r7, r3
          memcpy(dst,src,to_copy);
     d80:	mov	r2, r7
          pos += to_copy;
     d82:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     d84:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     d88:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
     d8a:	add	r9, r7
          dst += to_copy;
     d8c:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     d8e:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     d90:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     d92:	bne.n	d6a <MTPD::WriteDescriptor()+0x866>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     d94:	movs	r2, #60	; 0x3c
     d96:	mov.w	r1, #512	; 0x200
     d9a:	mov	r0, sl
     d9c:	bl	a270 <usb_mtp_send>
     da0:	cmp	r0, #0
     da2:	ble.n	d94 <MTPD::WriteDescriptor()+0x890>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     da4:	cmp.w	r8, #0
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     da8:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     dac:	ble.n	d70 <MTPD::WriteDescriptor()+0x86c>
     dae:	ldrb	r1, [r5, #0]
     db0:	ldr	r3, [r5, #4]
     db2:	b.n	6ca <MTPD::WriteDescriptor()+0x1c6>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     db4:	ldr	r3, [r0, #4]
     db6:	cmp	r3, #0
     db8:	beq.w	f6a <MTPD::WriteDescriptor()+0xa66>
     dbc:	ldr	r4, [pc, #776]	; (10c8 <MTPD::WriteDescriptor()+0xbc4>)
     dbe:	ldr	r0, [r4, #0]
        write_length_ += len;
     dc0:	adds	r3, #2
     dc2:	add.w	r6, r5, #1056	; 0x420
        
        const char * src=data;
     dc6:	add.w	r9, sp, #14
        //
        int pos = 0; // into data
     dca:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     dce:	str	r3, [r5, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     dd0:	add.w	sl, r5, #544	; 0x220
     dd4:	b.n	dde <MTPD::WriteDescriptor()+0x8da>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     dd6:	cmp.w	r8, #1
     dda:	bgt.n	e1a <MTPD::WriteDescriptor()+0x916>
     ddc:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     dde:	subs	r7, r6, r0
     de0:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
     de4:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     de6:	cmp	r7, r3
     de8:	it	ge
     dea:	movge	r7, r3
          memcpy(dst,src,to_copy);
     dec:	mov	r2, r7
          pos += to_copy;
     dee:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     df0:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     df4:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
     df6:	add	r9, r7
          dst += to_copy;
     df8:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     dfa:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     dfc:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     dfe:	bne.n	dd6 <MTPD::WriteDescriptor()+0x8d2>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     e00:	movs	r2, #60	; 0x3c
     e02:	mov.w	r1, #512	; 0x200
     e06:	mov	r0, sl
     e08:	bl	a270 <usb_mtp_send>
     e0c:	cmp	r0, #0
     e0e:	ble.n	e00 <MTPD::WriteDescriptor()+0x8fc>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     e10:	cmp.w	r8, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     e14:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     e18:	ble.n	ddc <MTPD::WriteDescriptor()+0x8d8>
     e1a:	movs	r1, #6
     e1c:	ldrb	r2, [r5, #0]
     e1e:	ldr	r3, [r5, #4]
     e20:	str	r1, [sp, #48]	; 0x30
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     e22:	cmp	r2, #0
     e24:	bne.w	522 <MTPD::WriteDescriptor()+0x1e>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     e28:	cmp	r3, #0
     e2a:	beq.w	14d0 <MTPD::WriteDescriptor()+0xfcc>
     e2e:	ldr	r0, [r4, #0]
        write_length_ += len;
     e30:	adds	r3, #4
        
        const char * src=data;
     e32:	add.w	r9, sp, #48	; 0x30
        //
        int pos = 0; // into data
     e36:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     e3a:	add.w	sl, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     e3e:	str	r3, [r5, #4]
     e40:	b.n	e4a <MTPD::WriteDescriptor()+0x946>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     e42:	cmp.w	r8, #3
     e46:	bgt.n	e86 <MTPD::WriteDescriptor()+0x982>
     e48:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     e4a:	subs	r7, r6, r0
     e4c:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
     e50:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     e52:	cmp	r7, r3
     e54:	it	ge
     e56:	movge	r7, r3
          memcpy(dst,src,to_copy);
     e58:	mov	r2, r7
          pos += to_copy;
     e5a:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     e5c:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     e60:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
     e62:	add	r9, r7
          dst += to_copy;
     e64:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     e66:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     e68:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     e6a:	bne.n	e42 <MTPD::WriteDescriptor()+0x93e>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     e6c:	movs	r2, #60	; 0x3c
     e6e:	mov.w	r1, #512	; 0x200
     e72:	mov	r0, sl
     e74:	bl	a270 <usb_mtp_send>
     e78:	cmp	r0, #0
     e7a:	ble.n	e6c <MTPD::WriteDescriptor()+0x968>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     e7c:	cmp.w	r8, #3
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     e80:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     e84:	ble.n	e48 <MTPD::WriteDescriptor()+0x944>
     e86:	movs	r1, #100	; 0x64
     e88:	ldrb	r2, [r5, #0]
     e8a:	ldr	r3, [r5, #4]
     e8c:	strh.w	r1, [sp, #12]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     e90:	cmp	r2, #0
     e92:	bne.w	52a <MTPD::WriteDescriptor()+0x26>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     e96:	cmp	r3, #0
     e98:	beq.w	14c6 <MTPD::WriteDescriptor()+0xfc2>
     e9c:	ldr	r0, [r4, #0]
        write_length_ += len;
     e9e:	adds	r3, #2
        
        const char * src=data;
     ea0:	add.w	r9, sp, #12
        //
        int pos = 0; // into data
     ea4:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     ea8:	add.w	sl, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     eac:	str	r3, [r5, #4]
     eae:	b.n	eb8 <MTPD::WriteDescriptor()+0x9b4>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     eb0:	cmp.w	r8, #1
     eb4:	bgt.n	ef4 <MTPD::WriteDescriptor()+0x9f0>
     eb6:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     eb8:	subs	r7, r6, r0
     eba:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
     ebe:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     ec0:	cmp	r7, r3
     ec2:	it	ge
     ec4:	movge	r7, r3
          memcpy(dst,src,to_copy);
     ec6:	mov	r2, r7
          pos += to_copy;
     ec8:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     eca:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     ece:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
     ed0:	add	r9, r7
          dst += to_copy;
     ed2:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     ed4:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     ed6:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     ed8:	bne.n	eb0 <MTPD::WriteDescriptor()+0x9ac>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     eda:	movs	r2, #60	; 0x3c
     edc:	mov.w	r1, #512	; 0x200
     ee0:	mov	r0, sl
     ee2:	bl	a270 <usb_mtp_send>
     ee6:	cmp	r0, #0
     ee8:	ble.n	eda <MTPD::WriteDescriptor()+0x9d6>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     eea:	cmp.w	r8, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     eee:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     ef2:	ble.n	eb6 <MTPD::WriteDescriptor()+0x9b2>
     ef4:	movs	r1, #20
     ef6:	ldrb	r2, [r5, #0]
     ef8:	ldr	r3, [r5, #4]
     efa:	strb.w	r1, [sp, #3]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     efe:	cmp	r2, #0
     f00:	bne.w	532 <MTPD::WriteDescriptor()+0x2e>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     f04:	cmp	r3, #0
     f06:	beq.w	152c <MTPD::WriteDescriptor()+0x1028>
     f0a:	ldr	r0, [r4, #0]
        write_length_ += len;
     f0c:	adds	r3, #1
        
        const char * src=data;
     f0e:	add.w	r9, sp, #3
        //
        int pos = 0; // into data
     f12:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     f16:	add.w	sl, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     f1a:	str	r3, [r5, #4]
     f1c:	b.n	f26 <MTPD::WriteDescriptor()+0xa22>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     f1e:	cmp.w	r8, #0
     f22:	bgt.n	f62 <MTPD::WriteDescriptor()+0xa5e>
     f24:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     f26:	subs	r7, r6, r0
     f28:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
     f2c:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     f2e:	cmp	r7, r3
     f30:	it	ge
     f32:	movge	r7, r3
          memcpy(dst,src,to_copy);
     f34:	mov	r2, r7
          pos += to_copy;
     f36:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     f38:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     f3c:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
     f3e:	add	r9, r7
          dst += to_copy;
     f40:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     f42:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     f44:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     f46:	bne.n	f1e <MTPD::WriteDescriptor()+0xa1a>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     f48:	movs	r2, #60	; 0x3c
     f4a:	mov.w	r1, #512	; 0x200
     f4e:	mov	r0, sl
     f50:	bl	a270 <usb_mtp_send>
     f54:	cmp	r0, #0
     f56:	ble.n	f48 <MTPD::WriteDescriptor()+0xa44>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     f58:	cmp.w	r8, #0
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     f5c:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     f60:	ble.n	f24 <MTPD::WriteDescriptor()+0xa20>
     f62:	ldrb	r1, [r5, #0]
     f64:	ldr	r3, [r5, #4]
     f66:	b.w	538 <MTPD::WriteDescriptor()+0x34>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     f6a:	add.w	r2, r0, #544	; 0x220
     f6e:	ldr	r4, [pc, #344]	; (10c8 <MTPD::WriteDescriptor()+0xbc4>)
     f70:	mov	r0, r2
     f72:	str	r2, [r4, #0]
     f74:	b.n	dc0 <MTPD::WriteDescriptor()+0x8bc>
     f76:	add.w	r2, r9, #544	; 0x220
     f7a:	ldr	r4, [pc, #332]	; (10c8 <MTPD::WriteDescriptor()+0xbc4>)
     f7c:	mov	r0, r2
     f7e:	str	r2, [r4, #0]
     f80:	b.n	a4a <MTPD::WriteDescriptor()+0x546>
     f82:	cmp	r3, #0
     f84:	beq.w	1520 <MTPD::WriteDescriptor()+0x101c>
     f88:	ldr	r4, [pc, #316]	; (10c8 <MTPD::WriteDescriptor()+0xbc4>)
     f8a:	ldr	r0, [r4, #0]
        write_length_ += len;
     f8c:	adds	r3, #2
     f8e:	add.w	r6, r5, #1056	; 0x420
        
        const char * src=data;
     f92:	add.w	r9, sp, #24
        //
        int pos = 0; // into data
     f96:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     f9a:	str	r3, [r5, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     f9c:	add.w	sl, r5, #544	; 0x220
     fa0:	b.n	faa <MTPD::WriteDescriptor()+0xaa6>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     fa2:	cmp.w	r8, #1
     fa6:	bgt.n	fe6 <MTPD::WriteDescriptor()+0xae2>
     fa8:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     faa:	subs	r7, r6, r0
     fac:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
     fb0:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     fb2:	cmp	r7, r3
     fb4:	it	ge
     fb6:	movge	r7, r3
          memcpy(dst,src,to_copy);
     fb8:	mov	r2, r7
          pos += to_copy;
     fba:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     fbc:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     fc0:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
     fc2:	add	r9, r7
          dst += to_copy;
     fc4:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     fc6:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     fc8:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     fca:	bne.n	fa2 <MTPD::WriteDescriptor()+0xa9e>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     fcc:	movs	r2, #60	; 0x3c
     fce:	mov.w	r1, #512	; 0x200
     fd2:	mov	r0, sl
     fd4:	bl	a270 <usb_mtp_send>
     fd8:	cmp	r0, #0
     fda:	ble.n	fcc <MTPD::WriteDescriptor()+0xac8>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     fdc:	cmp.w	r8, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     fe0:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     fe4:	ble.n	fa8 <MTPD::WriteDescriptor()+0xaa4>
     fe6:	movs	r1, #0
     fe8:	ldrb	r2, [r5, #0]
     fea:	ldr	r3, [r5, #4]
     fec:	strh.w	r1, [sp, #10]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     ff0:	cmp	r2, #0
     ff2:	bne.w	5de <MTPD::WriteDescriptor()+0xda>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     ff6:	cmp	r3, #0
     ff8:	beq.w	14b0 <MTPD::WriteDescriptor()+0xfac>
     ffc:	ldr	r0, [r4, #0]
        write_length_ += len;
     ffe:	adds	r3, #2
        
        const char * src=data;
    1000:	add.w	r9, sp, #10
        //
        int pos = 0; // into data
    1004:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    1008:	add.w	sl, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    100c:	str	r3, [r5, #4]
    100e:	b.n	1018 <MTPD::WriteDescriptor()+0xb14>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1010:	cmp.w	r8, #1
    1014:	bgt.n	1054 <MTPD::WriteDescriptor()+0xb50>
    1016:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1018:	subs	r7, r6, r0
    101a:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    101e:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1020:	cmp	r7, r3
    1022:	it	ge
    1024:	movge	r7, r3
          memcpy(dst,src,to_copy);
    1026:	mov	r2, r7
          pos += to_copy;
    1028:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    102a:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    102e:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    1030:	add	r9, r7
          dst += to_copy;
    1032:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1034:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1036:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1038:	bne.n	1010 <MTPD::WriteDescriptor()+0xb0c>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    103a:	movs	r2, #60	; 0x3c
    103c:	mov.w	r1, #512	; 0x200
    1040:	mov	r0, sl
    1042:	bl	a270 <usb_mtp_send>
    1046:	cmp	r0, #0
    1048:	ble.n	103a <MTPD::WriteDescriptor()+0xb36>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    104a:	cmp.w	r8, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    104e:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1052:	ble.n	1016 <MTPD::WriteDescriptor()+0xb12>
    1054:	movs	r1, #11
    1056:	ldrb	r2, [r5, #0]
    1058:	ldr	r3, [r5, #4]
    105a:	str	r1, [sp, #44]	; 0x2c
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    105c:	cmp	r2, #0
    105e:	bne.w	5e4 <MTPD::WriteDescriptor()+0xe0>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1062:	cmp	r3, #0
    1064:	beq.w	14a6 <MTPD::WriteDescriptor()+0xfa2>
    1068:	ldr	r0, [r4, #0]
        write_length_ += len;
    106a:	adds	r3, #4
        
        const char * src=data;
    106c:	add.w	r9, sp, #44	; 0x2c
        //
        int pos = 0; // into data
    1070:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    1074:	add.w	sl, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    1078:	str	r3, [r5, #4]
    107a:	b.n	1084 <MTPD::WriteDescriptor()+0xb80>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    107c:	cmp.w	r8, #3
    1080:	bgt.n	10c0 <MTPD::WriteDescriptor()+0xbbc>
    1082:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1084:	subs	r7, r6, r0
    1086:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    108a:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    108c:	cmp	r7, r3
    108e:	it	ge
    1090:	movge	r7, r3
          memcpy(dst,src,to_copy);
    1092:	mov	r2, r7
          pos += to_copy;
    1094:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    1096:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    109a:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    109c:	add	r9, r7
          dst += to_copy;
    109e:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    10a0:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    10a2:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    10a4:	bne.n	107c <MTPD::WriteDescriptor()+0xb78>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    10a6:	movs	r2, #60	; 0x3c
    10a8:	mov.w	r1, #512	; 0x200
    10ac:	mov	r0, sl
    10ae:	bl	a270 <usb_mtp_send>
    10b2:	cmp	r0, #0
    10b4:	ble.n	10a6 <MTPD::WriteDescriptor()+0xba2>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    10b6:	cmp.w	r8, #3
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    10ba:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    10be:	ble.n	1082 <MTPD::WriteDescriptor()+0xb7e>
    10c0:	ldrb	r1, [r5, #0]
    10c2:	ldr	r3, [r5, #4]
    10c4:	b.w	5ea <MTPD::WriteDescriptor()+0xe6>
    10c8:	.word	0x20004204
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    10cc:	cmp	r7, #0
    10ce:	beq.w	14e6 <MTPD::WriteDescriptor()+0xfe2>
    10d2:	ldr	r4, [pc, #796]	; (13f0 <MTPD::WriteDescriptor()+0xeec>)
    10d4:	ldr	r0, [r4, #0]
        write_length_ += len;
    10d6:	adds	r3, r7, #1
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    10d8:	add.w	r8, r5, #544	; 0x220
    10dc:	add.w	r7, r5, #1056	; 0x420
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    10e0:	add	r6, sp, #8
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    10e2:	str	r3, [r5, #4]
        
        const char * src=data;
        //
        int pos = 0; // into data
    10e4:	mov.w	r9, #0
    10e8:	b.n	10f4 <MTPD::WriteDescriptor()+0xbf0>
        while(pos<len)
    10ea:	cmp.w	r9, #0
    10ee:	bgt.w	a3a <MTPD::WriteDescriptor()+0x536>
    10f2:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    10f4:	subs	r5, r7, r0
    10f6:	rsb	r3, r9, #1
          memcpy(dst,src,to_copy);
    10fa:	mov	r1, r6
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    10fc:	cmp	r5, r3
    10fe:	it	ge
    1100:	movge	r5, r3
          memcpy(dst,src,to_copy);
    1102:	mov	r2, r5
          pos += to_copy;
    1104:	add	r9, r5
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    1106:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    110a:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    110c:	add	r6, r5
          dst += to_copy;
    110e:	add	r5, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1110:	cmp	r5, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1112:	str	r5, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1114:	bne.n	10ea <MTPD::WriteDescriptor()+0xbe6>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    1116:	movs	r2, #60	; 0x3c
    1118:	mov.w	r1, #512	; 0x200
    111c:	mov	r0, r8
    111e:	bl	a270 <usb_mtp_send>
    1122:	cmp	r0, #0
    1124:	ble.n	1116 <MTPD::WriteDescriptor()+0xc12>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    1126:	str.w	r8, [r4]
    112a:	b.n	10ea <MTPD::WriteDescriptor()+0xbe6>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    112c:	cmp	r3, #0
    112e:	beq.w	14da <MTPD::WriteDescriptor()+0xfd6>
    1132:	ldr	r4, [pc, #700]	; (13f0 <MTPD::WriteDescriptor()+0xeec>)
    1134:	ldr	r0, [r4, #0]
        write_length_ += len;
    1136:	adds	r3, #1
    1138:	add.w	r9, r5, #1056	; 0x420
        
        const char * src=data;
    113c:	add.w	r8, sp, #4
        //
        int pos = 0; // into data
    1140:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    1142:	str	r3, [r5, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    1144:	add.w	sl, r5, #544	; 0x220
    1148:	b.n	1150 <MTPD::WriteDescriptor()+0xc4c>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    114a:	cmp	r7, #0
    114c:	bgt.n	118c <MTPD::WriteDescriptor()+0xc88>
    114e:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1150:	rsb	r6, r0, r9
    1154:	rsb	r3, r7, #1
          memcpy(dst,src,to_copy);
    1158:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    115a:	cmp	r6, r3
    115c:	it	ge
    115e:	movge	r6, r3
          memcpy(dst,src,to_copy);
    1160:	mov	r2, r6
          pos += to_copy;
    1162:	add	r7, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    1164:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1168:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    116a:	add	r8, r6
          dst += to_copy;
    116c:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    116e:	cmp	r6, r9
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1170:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1172:	bne.n	114a <MTPD::WriteDescriptor()+0xc46>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    1174:	movs	r2, #60	; 0x3c
    1176:	mov.w	r1, #512	; 0x200
    117a:	mov	r0, sl
    117c:	bl	a270 <usb_mtp_send>
    1180:	cmp	r0, #0
    1182:	ble.n	1174 <MTPD::WriteDescriptor()+0xc70>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1184:	cmp	r7, #0
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    1186:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    118a:	ble.n	114e <MTPD::WriteDescriptor()+0xc4a>
    118c:	ldrb	r4, [r5, #0]
    118e:	ldr	r7, [r5, #4]
    1190:	b.w	94c <MTPD::WriteDescriptor()+0x448>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1194:	add.w	r2, r5, #544	; 0x220
    1198:	mov	r0, r2
    119a:	str	r2, [r4, #0]
    119c:	b.n	cea <MTPD::WriteDescriptor()+0x7e6>
    119e:	add.w	r2, r5, #544	; 0x220
    11a2:	mov	r0, r2
    11a4:	str	r2, [r4, #0]
    11a6:	b.n	c7a <MTPD::WriteDescriptor()+0x776>
    11a8:	add.w	r2, r5, #544	; 0x220
    11ac:	mov	r0, r2
    11ae:	str	r2, [r4, #0]
    11b0:	b.n	c0a <MTPD::WriteDescriptor()+0x706>
    11b2:	add.w	r2, r5, #544	; 0x220
    11b6:	mov	r0, r2
    11b8:	str	r2, [r4, #0]
    11ba:	b.n	b96 <MTPD::WriteDescriptor()+0x692>
    11bc:	add.w	r2, r5, #544	; 0x220
    11c0:	mov	r0, r2
    11c2:	str	r2, [r4, #0]
    11c4:	b.n	b2a <MTPD::WriteDescriptor()+0x626>
    11c6:	cmp	r7, #0
    11c8:	beq.w	14f2 <MTPD::WriteDescriptor()+0xfee>
    11cc:	ldr	r4, [pc, #544]	; (13f0 <MTPD::WriteDescriptor()+0xeec>)
    11ce:	ldr	r0, [r4, #0]
        write_length_ += len;
    11d0:	adds	r3, r7, #1
    11d2:	add.w	r9, r5, #1056	; 0x420
        
        const char * src=data;
    11d6:	add.w	r8, sp, #9
        //
        int pos = 0; // into data
    11da:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    11dc:	str	r3, [r5, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    11de:	add.w	sl, r5, #544	; 0x220
    11e2:	b.n	11ea <MTPD::WriteDescriptor()+0xce6>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    11e4:	cmp	r7, #0
    11e6:	bgt.n	1226 <MTPD::WriteDescriptor()+0xd22>
    11e8:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    11ea:	rsb	r6, r0, r9
    11ee:	rsb	r3, r7, #1
          memcpy(dst,src,to_copy);
    11f2:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    11f4:	cmp	r6, r3
    11f6:	it	ge
    11f8:	movge	r6, r3
          memcpy(dst,src,to_copy);
    11fa:	mov	r2, r6
          pos += to_copy;
    11fc:	add	r7, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    11fe:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1202:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    1204:	add	r8, r6
          dst += to_copy;
    1206:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1208:	cmp	r6, r9
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    120a:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    120c:	bne.n	11e4 <MTPD::WriteDescriptor()+0xce0>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    120e:	movs	r2, #60	; 0x3c
    1210:	mov.w	r1, #512	; 0x200
    1214:	mov	r0, sl
    1216:	bl	a270 <usb_mtp_send>
    121a:	cmp	r0, #0
    121c:	ble.n	120e <MTPD::WriteDescriptor()+0xd0a>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    121e:	cmp	r7, #0
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    1220:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1224:	ble.n	11e8 <MTPD::WriteDescriptor()+0xce4>
  #define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    1226:	ldrb.w	r6, [sp, #68]	; 0x44
    122a:	ldrb	r4, [r5, #0]
    122c:	ldr	r3, [r5, #4]
    122e:	cmp	r6, #0
    1230:	bne.w	97e <MTPD::WriteDescriptor()+0x47a>
    1234:	b.w	a10 <MTPD::WriteDescriptor()+0x50c>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1238:	cmp	r3, #0
    123a:	beq.w	1558 <MTPD::WriteDescriptor()+0x1054>
    123e:	ldr	r4, [pc, #432]	; (13f0 <MTPD::WriteDescriptor()+0xeec>)
    1240:	ldr	r0, [r4, #0]
        write_length_ += len;
    1242:	adds	r3, #2
    1244:	add.w	r9, r5, #1056	; 0x420
        
        const char * src=data;
    1248:	add.w	r8, sp, #36	; 0x24
        //
        int pos = 0; // into data
    124c:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    124e:	str	r3, [r5, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    1250:	add.w	sl, r5, #544	; 0x220
    1254:	b.n	125c <MTPD::WriteDescriptor()+0xd58>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1256:	cmp	r7, #1
    1258:	bgt.n	118c <MTPD::WriteDescriptor()+0xc88>
    125a:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    125c:	rsb	r6, r0, r9
    1260:	rsb	r3, r7, #2
          memcpy(dst,src,to_copy);
    1264:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1266:	cmp	r6, r3
    1268:	it	ge
    126a:	movge	r6, r3
          memcpy(dst,src,to_copy);
    126c:	mov	r2, r6
          pos += to_copy;
    126e:	add	r7, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    1270:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1274:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    1276:	add	r8, r6
          dst += to_copy;
    1278:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    127a:	cmp	r6, r9
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    127c:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    127e:	bne.n	1256 <MTPD::WriteDescriptor()+0xd52>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    1280:	movs	r2, #60	; 0x3c
    1282:	mov.w	r1, #512	; 0x200
    1286:	mov	r0, sl
    1288:	bl	a270 <usb_mtp_send>
    128c:	cmp	r0, #0
    128e:	ble.n	1280 <MTPD::WriteDescriptor()+0xd7c>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    1290:	str.w	sl, [r4]
    1294:	b.n	1256 <MTPD::WriteDescriptor()+0xd52>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1296:	cmp	r3, #0
    1298:	beq.w	154c <MTPD::WriteDescriptor()+0x1048>
    129c:	ldr	r4, [pc, #336]	; (13f0 <MTPD::WriteDescriptor()+0xeec>)
    129e:	ldr	r0, [r4, #0]
        write_length_ += len;
    12a0:	adds	r3, #2
    12a2:	add.w	r7, r5, #1056	; 0x420
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    12a6:	add.w	r8, r5, #544	; 0x220
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    12aa:	add	r6, sp, #40	; 0x28
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    12ac:	str	r3, [r5, #4]
        
        const char * src=data;
        //
        int pos = 0; // into data
    12ae:	mov.w	r9, #0
    12b2:	b.n	12be <MTPD::WriteDescriptor()+0xdba>
        while(pos<len)
    12b4:	cmp.w	r9, #1
    12b8:	bgt.w	a3a <MTPD::WriteDescriptor()+0x536>
    12bc:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    12be:	subs	r5, r7, r0
    12c0:	rsb	r3, r9, #2
          memcpy(dst,src,to_copy);
    12c4:	mov	r1, r6
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    12c6:	cmp	r5, r3
    12c8:	it	ge
    12ca:	movge	r5, r3
          memcpy(dst,src,to_copy);
    12cc:	mov	r2, r5
          pos += to_copy;
    12ce:	add	r9, r5
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    12d0:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    12d4:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    12d6:	add	r6, r5
          dst += to_copy;
    12d8:	add	r5, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    12da:	cmp	r5, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    12dc:	str	r5, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    12de:	bne.n	12b4 <MTPD::WriteDescriptor()+0xdb0>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    12e0:	movs	r2, #60	; 0x3c
    12e2:	mov.w	r1, #512	; 0x200
    12e6:	mov	r0, r8
    12e8:	bl	a270 <usb_mtp_send>
    12ec:	cmp	r0, #0
    12ee:	ble.n	12e0 <MTPD::WriteDescriptor()+0xddc>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    12f0:	str.w	r8, [r4]
    12f4:	b.n	12b4 <MTPD::WriteDescriptor()+0xdb0>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    12f6:	cmp	r3, #0
    12f8:	beq.w	1540 <MTPD::WriteDescriptor()+0x103c>
    12fc:	ldr	r4, [pc, #240]	; (13f0 <MTPD::WriteDescriptor()+0xeec>)
    12fe:	ldr	r0, [r4, #0]
        write_length_ += len;
    1300:	adds	r3, #2
    1302:	add.w	r6, r5, #1056	; 0x420
        
        const char * src=data;
    1306:	add.w	r9, sp, #28
        //
        int pos = 0; // into data
    130a:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    130e:	str	r3, [r5, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    1310:	add.w	sl, r5, #544	; 0x220
    1314:	b.n	131e <MTPD::WriteDescriptor()+0xe1a>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1316:	cmp.w	r8, #1
    131a:	bgt.n	135a <MTPD::WriteDescriptor()+0xe56>
    131c:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    131e:	subs	r7, r6, r0
    1320:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    1324:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1326:	cmp	r7, r3
    1328:	it	ge
    132a:	movge	r7, r3
          memcpy(dst,src,to_copy);
    132c:	mov	r2, r7
          pos += to_copy;
    132e:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    1330:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1334:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    1336:	add	r9, r7
          dst += to_copy;
    1338:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    133a:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    133c:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    133e:	bne.n	1316 <MTPD::WriteDescriptor()+0xe12>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    1340:	movs	r2, #60	; 0x3c
    1342:	mov.w	r1, #512	; 0x200
    1346:	mov	r0, sl
    1348:	bl	a270 <usb_mtp_send>
    134c:	cmp	r0, #0
    134e:	ble.n	1340 <MTPD::WriteDescriptor()+0xe3c>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1350:	cmp.w	r8, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    1354:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1358:	ble.n	131c <MTPD::WriteDescriptor()+0xe18>
    135a:	movs	r1, #7
    135c:	ldrb	r2, [r5, #0]
    135e:	ldr	r3, [r5, #4]
    1360:	strb.w	r1, [sp, #6]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    1364:	cmp	r2, #0
    1366:	bne.w	772 <MTPD::WriteDescriptor()+0x26e>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    136a:	cmp	r3, #0
    136c:	beq.w	1536 <MTPD::WriteDescriptor()+0x1032>
    1370:	ldr	r0, [r4, #0]
        write_length_ += len;
    1372:	adds	r3, #1
        
        const char * src=data;
    1374:	add.w	r9, sp, #6
        //
        int pos = 0; // into data
    1378:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    137c:	add.w	sl, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    1380:	str	r3, [r5, #4]
    1382:	b.n	138c <MTPD::WriteDescriptor()+0xe88>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1384:	cmp.w	r8, #0
    1388:	bgt.n	13c8 <MTPD::WriteDescriptor()+0xec4>
    138a:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    138c:	subs	r7, r6, r0
    138e:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    1392:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1394:	cmp	r7, r3
    1396:	it	ge
    1398:	movge	r7, r3
          memcpy(dst,src,to_copy);
    139a:	mov	r2, r7
          pos += to_copy;
    139c:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    139e:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    13a2:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    13a4:	add	r9, r7
          dst += to_copy;
    13a6:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    13a8:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    13aa:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    13ac:	bne.n	1384 <MTPD::WriteDescriptor()+0xe80>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    13ae:	movs	r2, #60	; 0x3c
    13b0:	mov.w	r1, #512	; 0x200
    13b4:	mov	r0, sl
    13b6:	bl	a270 <usb_mtp_send>
    13ba:	cmp	r0, #0
    13bc:	ble.n	13ae <MTPD::WriteDescriptor()+0xeaa>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    13be:	cmp.w	r8, #0
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    13c2:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    13c6:	ble.n	138a <MTPD::WriteDescriptor()+0xe86>
    13c8:	ldrb	r1, [r5, #0]
    13ca:	ldr	r3, [r5, #4]
    13cc:	b.w	778 <MTPD::WriteDescriptor()+0x274>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    13d0:	cmp	r3, #0
    13d2:	beq.w	1514 <MTPD::WriteDescriptor()+0x1010>
    13d6:	ldr	r4, [pc, #24]	; (13f0 <MTPD::WriteDescriptor()+0xeec>)
    13d8:	ldr	r0, [r4, #0]
        write_length_ += len;
    13da:	adds	r3, #1
    13dc:	add.w	r9, r5, #1056	; 0x420
        
        const char * src=data;
    13e0:	add.w	r8, sp, #5
        //
        int pos = 0; // into data
    13e4:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    13e6:	str	r3, [r5, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    13e8:	add.w	sl, r5, #544	; 0x220
    13ec:	b.n	13fa <MTPD::WriteDescriptor()+0xef6>
    13ee:	nop
    13f0:	.word	0x20004204
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    13f4:	cmp	r7, #0
    13f6:	bgt.n	1436 <MTPD::WriteDescriptor()+0xf32>
    13f8:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    13fa:	rsb	r6, r0, r9
    13fe:	rsb	r3, r7, #1
          memcpy(dst,src,to_copy);
    1402:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1404:	cmp	r6, r3
    1406:	it	ge
    1408:	movge	r6, r3
          memcpy(dst,src,to_copy);
    140a:	mov	r2, r6
          pos += to_copy;
    140c:	add	r7, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    140e:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1412:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    1414:	add	r8, r6
          dst += to_copy;
    1416:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1418:	cmp	r6, r9
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    141a:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    141c:	bne.n	13f4 <MTPD::WriteDescriptor()+0xef0>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    141e:	movs	r2, #60	; 0x3c
    1420:	mov.w	r1, #512	; 0x200
    1424:	mov	r0, sl
    1426:	bl	a270 <usb_mtp_send>
    142a:	cmp	r0, #0
    142c:	ble.n	141e <MTPD::WriteDescriptor()+0xf1a>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    142e:	cmp	r7, #0
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    1430:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1434:	ble.n	13f8 <MTPD::WriteDescriptor()+0xef4>
  #define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    1436:	ldrb.w	r6, [sp, #68]	; 0x44
    143a:	ldrb	r4, [r5, #0]
    143c:	ldr	r3, [r5, #4]
    143e:	cmp	r6, #0
    1440:	bne.w	858 <MTPD::WriteDescriptor()+0x354>
    1444:	b.w	90a <MTPD::WriteDescriptor()+0x406>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1448:	cmp	r3, #0
    144a:	beq.n	1508 <MTPD::WriteDescriptor()+0x1004>
    144c:	ldr	r4, [pc, #276]	; (1564 <MTPD::WriteDescriptor()+0x1060>)
    144e:	ldr	r0, [r4, #0]
        write_length_ += len;
    1450:	adds	r3, #2
    1452:	add.w	r9, r5, #1056	; 0x420
        
        const char * src=data;
    1456:	add.w	r8, sp, #32
        //
        int pos = 0; // into data
    145a:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    145c:	str	r3, [r5, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    145e:	add.w	sl, r5, #544	; 0x220
    1462:	b.n	146c <MTPD::WriteDescriptor()+0xf68>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1464:	cmp	r7, #1
    1466:	bgt.w	81e <MTPD::WriteDescriptor()+0x31a>
    146a:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    146c:	rsb	r6, r0, r9
    1470:	rsb	r3, r7, #2
          memcpy(dst,src,to_copy);
    1474:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1476:	cmp	r6, r3
    1478:	it	ge
    147a:	movge	r6, r3
          memcpy(dst,src,to_copy);
    147c:	mov	r2, r6
          pos += to_copy;
    147e:	add	r7, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    1480:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1484:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    1486:	add	r8, r6
          dst += to_copy;
    1488:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    148a:	cmp	r6, r9
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    148c:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    148e:	bne.n	1464 <MTPD::WriteDescriptor()+0xf60>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    1490:	movs	r2, #60	; 0x3c
    1492:	mov.w	r1, #512	; 0x200
    1496:	mov	r0, sl
    1498:	bl	a270 <usb_mtp_send>
    149c:	cmp	r0, #0
    149e:	ble.n	1490 <MTPD::WriteDescriptor()+0xf8c>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    14a0:	str.w	sl, [r4]
    14a4:	b.n	1464 <MTPD::WriteDescriptor()+0xf60>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    14a6:	add.w	r2, r5, #544	; 0x220
    14aa:	mov	r0, r2
    14ac:	str	r2, [r4, #0]
    14ae:	b.n	106a <MTPD::WriteDescriptor()+0xb66>
    14b0:	add.w	r2, r5, #544	; 0x220
    14b4:	mov	r0, r2
    14b6:	str	r2, [r4, #0]
    14b8:	b.n	ffe <MTPD::WriteDescriptor()+0xafa>
    14ba:	add.w	r2, r5, #544	; 0x220
    14be:	mov	r0, r2
    14c0:	str	r2, [r4, #0]
    14c2:	b.w	aba <MTPD::WriteDescriptor()+0x5b6>
    14c6:	add.w	r2, r5, #544	; 0x220
    14ca:	mov	r0, r2
    14cc:	str	r2, [r4, #0]
    14ce:	b.n	e9e <MTPD::WriteDescriptor()+0x99a>
    14d0:	add.w	r2, r5, #544	; 0x220
    14d4:	mov	r0, r2
    14d6:	str	r2, [r4, #0]
    14d8:	b.n	e30 <MTPD::WriteDescriptor()+0x92c>
    14da:	add.w	r2, r5, #544	; 0x220
    14de:	ldr	r4, [pc, #132]	; (1564 <MTPD::WriteDescriptor()+0x1060>)
    14e0:	mov	r0, r2
    14e2:	str	r2, [r4, #0]
    14e4:	b.n	1136 <MTPD::WriteDescriptor()+0xc32>
    14e6:	add.w	r3, r5, #544	; 0x220
    14ea:	ldr	r4, [pc, #120]	; (1564 <MTPD::WriteDescriptor()+0x1060>)
    14ec:	mov	r0, r3
    14ee:	str	r3, [r4, #0]
    14f0:	b.n	10d6 <MTPD::WriteDescriptor()+0xbd2>
    14f2:	add.w	r3, r5, #544	; 0x220
    14f6:	ldr	r4, [pc, #108]	; (1564 <MTPD::WriteDescriptor()+0x1060>)
    14f8:	mov	r0, r3
    14fa:	str	r3, [r4, #0]
    14fc:	b.n	11d0 <MTPD::WriteDescriptor()+0xccc>
    14fe:	add.w	r2, r5, #544	; 0x220
    1502:	mov	r0, r2
    1504:	str	r2, [r4, #0]
    1506:	b.n	d58 <MTPD::WriteDescriptor()+0x854>
    1508:	add.w	r2, r9, #544	; 0x220
    150c:	ldr	r4, [pc, #84]	; (1564 <MTPD::WriteDescriptor()+0x1060>)
    150e:	mov	r0, r2
    1510:	str	r2, [r4, #0]
    1512:	b.n	1450 <MTPD::WriteDescriptor()+0xf4c>
    1514:	add.w	r2, r5, #544	; 0x220
    1518:	ldr	r4, [pc, #72]	; (1564 <MTPD::WriteDescriptor()+0x1060>)
    151a:	mov	r0, r2
    151c:	str	r2, [r4, #0]
    151e:	b.n	13da <MTPD::WriteDescriptor()+0xed6>
    1520:	add.w	r2, r9, #544	; 0x220
    1524:	ldr	r4, [pc, #60]	; (1564 <MTPD::WriteDescriptor()+0x1060>)
    1526:	mov	r0, r2
    1528:	str	r2, [r4, #0]
    152a:	b.n	f8c <MTPD::WriteDescriptor()+0xa88>
    152c:	add.w	r2, r5, #544	; 0x220
    1530:	mov	r0, r2
    1532:	str	r2, [r4, #0]
    1534:	b.n	f0c <MTPD::WriteDescriptor()+0xa08>
    1536:	add.w	r2, r5, #544	; 0x220
    153a:	mov	r0, r2
    153c:	str	r2, [r4, #0]
    153e:	b.n	1372 <MTPD::WriteDescriptor()+0xe6e>
    1540:	add.w	r2, r9, #544	; 0x220
    1544:	ldr	r4, [pc, #28]	; (1564 <MTPD::WriteDescriptor()+0x1060>)
    1546:	mov	r0, r2
    1548:	str	r2, [r4, #0]
    154a:	b.n	1300 <MTPD::WriteDescriptor()+0xdfc>
    154c:	add.w	r2, r5, #544	; 0x220
    1550:	ldr	r4, [pc, #16]	; (1564 <MTPD::WriteDescriptor()+0x1060>)
    1552:	mov	r0, r2
    1554:	str	r2, [r4, #0]
    1556:	b.n	12a0 <MTPD::WriteDescriptor()+0xd9c>
    1558:	add.w	r2, r5, #544	; 0x220
    155c:	ldr	r4, [pc, #4]	; (1564 <MTPD::WriteDescriptor()+0x1060>)
    155e:	mov	r0, r2
    1560:	str	r2, [r4, #0]
    1562:	b.n	1242 <MTPD::WriteDescriptor()+0xd3e>
    1564:	.word	0x20004204

00001568 <MTPD::GetStorageInfo(unsigned long)>:
    uint32_t num=1; // mFS_get_FSCount();
    write32(num);   // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
  }

  void GetStorageInfo(uint32_t storage) {
    1568:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    156c:	movs	r2, #1
    156e:	sub	sp, #52	; 0x34
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    1570:	ldrb	r3, [r0, #0]
    uint32_t num=1; // mFS_get_FSCount();
    write32(num);   // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
  }

  void GetStorageInfo(uint32_t storage) {
    1572:	mov	r6, r0
    1574:	strh.w	r2, [sp, #22]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    1578:	cmp	r3, #0
    157a:	beq.w	16b2 <MTPD::GetStorageInfo(unsigned long)+0x14a>
    157e:	movs	r2, #2
      {
        write_length_ += len;
    1580:	ldr	r3, [r0, #4]
    1582:	add	r3, r2
    1584:	strh.w	r2, [sp, #20]
    1588:	movs	r2, #0
    158a:	adds	r3, #2
    158c:	strh.w	r2, [sp, #18]
    1590:	ldr.w	fp, [pc, #908]	; 1920 <MTPD::GetStorageInfo(unsigned long)+0x3b8>
    1594:	adds	r3, #2
    1596:	ldr.w	r0, [fp, #80]	; 0x50
    159a:	str	r3, [r6, #4]
    159c:	ldr	r1, [r0, #24]
public:
    uint32_t Count(uint32_t store,uint32_t parent) {return zFs_[0].Count(parent);}
    uint32_t Next(uint32_t store) {return zFs_[0].Next();}

    uint64_t size(uint32_t store)  
    { return (uint64_t)512 *(uint64_t)(zFs_[0].totalSectors() - zFs_[0].rootSector()); }
    159e:	ldr	r2, [r0, #0]
    uint64_t free(uint32_t store)  
    { return (uint64_t)512 *(uint64_t)(zFs_[0].totalSectors() - zFs_[0].eofSector()); }
    15a0:	ldr	r0, [r0, #16]
public:
    uint32_t Count(uint32_t store,uint32_t parent) {return zFs_[0].Count(parent);}
    uint32_t Next(uint32_t store) {return zFs_[0].Next();}

    uint64_t size(uint32_t store)  
    { return (uint64_t)512 *(uint64_t)(zFs_[0].totalSectors() - zFs_[0].rootSector()); }
    15a2:	subs	r2, r1, r2
    uint64_t free(uint32_t store)  
    { return (uint64_t)512 *(uint64_t)(zFs_[0].totalSectors() - zFs_[0].eofSector()); }
    15a4:	rsb	r9, r0, r1
    15a8:	lsrs	r1, r2, #23
    15aa:	lsls	r2, r2, #9
    15ac:	str	r1, [sp, #44]	; 0x2c
    15ae:	mov.w	r1, r9, lsr #23
    15b2:	str	r2, [sp, #40]	; 0x28
    15b4:	mov.w	r2, r9, lsl #9
    15b8:	str	r1, [sp, #4]
    15ba:	str	r2, [sp, #0]
    15bc:	ldr	r2, [sp, #0]
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    15be:	adds	r3, #8
    15c0:	str	r2, [sp, #32]
    15c2:	ldr	r2, [sp, #4]
    15c4:	str	r2, [sp, #36]	; 0x24
    15c6:	mov.w	r2, #4294967295
    15ca:	adds	r3, #8
    15cc:	str	r2, [sp, #28]
    15ce:	adds	r7, r3, #4
    15d0:	ldr.w	r3, [fp, #80]	; 0x50
    15d4:	str	r7, [r6, #4]
    15d6:	str	r3, [sp, #0]

  #define Store2Storage(x) (x+1)
  #define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    15d8:	ldrb.w	r3, [r3, #32]
    15dc:	cmp	r3, #0
    15de:	beq.n	16a0 <MTPD::GetStorageInfo(unsigned long)+0x138>
    uint32_t Read(uint32_t handle, char* out, uint32_t count) ;

    uint64_t size()  {  return (uint64_t)512 *(uint64_t)(total_sectors - root_sector); }
    uint64_t free()  {  return (uint64_t)512 *(uint64_t)(total_sectors - eof_sector); }

    char * getName() {return devName;}
    15e0:	ldr	r3, [sp, #0]
    15e2:	add.w	r9, r3, #32
    { write8(strlen(str) + 1);
    15e6:	mov	r0, r9
    15e8:	bl	c280 <strlen>
    15ec:	adds	r0, #1
    15ee:	strb.w	r0, [sp, #17]
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    15f2:	adds	r3, r7, #1
  #define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    15f4:	ldr	r2, [sp, #0]
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    15f6:	str	r3, [r6, #4]
  #define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    15f8:	ldrb.w	r2, [r2, #32]
    15fc:	cmp	r2, #0
    15fe:	beq.n	169c <MTPD::GetStorageInfo(unsigned long)+0x134>
    1600:	movs	r1, #1
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    1602:	add.w	sl, r6, #544	; 0x220
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1606:	mov	r0, sl
    1608:	mov	sl, r6
    160a:	mov	r6, r0
    160c:	b.n	161c <MTPD::GetStorageInfo(unsigned long)+0xb4>
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    160e:	adds	r3, #2
    1610:	str.w	r3, [sl, #4]
  #define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    1614:	ldrb.w	r2, [r9, #1]!
    1618:	cmp	r2, #0
    161a:	beq.n	168e <MTPD::GetStorageInfo(unsigned long)+0x126>
    161c:	strh.w	r2, [sp, #26]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    1620:	cmp	r1, #0
    1622:	bne.n	160e <MTPD::GetStorageInfo(unsigned long)+0xa6>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1624:	ldr	r7, [pc, #756]	; (191c <MTPD::GetStorageInfo(unsigned long)+0x3b4>)
    1626:	cmp	r3, #0
    1628:	beq.n	16ac <MTPD::GetStorageInfo(unsigned long)+0x144>
    162a:	ldr	r0, [r7, #0]
        write_length_ += len;
    162c:	adds	r3, #2
    162e:	add.w	fp, sl, #1056	; 0x420
        
        const char * src=data;
    1632:	add.w	r8, sp, #26
        //
        int pos = 0; // into data
    1636:	movs	r5, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    1638:	str.w	r3, [sl, #4]
    163c:	b.n	1644 <MTPD::GetStorageInfo(unsigned long)+0xdc>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    163e:	cmp	r5, #1
    1640:	bgt.n	167e <MTPD::GetStorageInfo(unsigned long)+0x116>
    1642:	ldr	r0, [r7, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1644:	rsb	r4, r0, fp
    1648:	rsb	r3, r5, #2
          memcpy(dst,src,to_copy);
    164c:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    164e:	cmp	r4, r3
    1650:	it	ge
    1652:	movge	r4, r3
          memcpy(dst,src,to_copy);
    1654:	mov	r2, r4
          pos += to_copy;
    1656:	add	r5, r4
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    1658:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    165c:	ldr	r3, [r7, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    165e:	add	r8, r4
          dst += to_copy;
    1660:	add	r4, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1662:	cmp	r4, fp
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1664:	str	r4, [r7, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1666:	bne.n	163e <MTPD::GetStorageInfo(unsigned long)+0xd6>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    1668:	movs	r2, #60	; 0x3c
    166a:	mov.w	r1, #512	; 0x200
    166e:	mov	r0, r6
    1670:	bl	a270 <usb_mtp_send>
    1674:	cmp	r0, #0
    1676:	ble.n	1668 <MTPD::GetStorageInfo(unsigned long)+0x100>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1678:	cmp	r5, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    167a:	str	r6, [r7, #0]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    167c:	ble.n	1642 <MTPD::GetStorageInfo(unsigned long)+0xda>
  #define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    167e:	ldrb.w	r2, [r9, #1]!
    1682:	ldrb.w	r1, [sl]
    1686:	ldr.w	r3, [sl, #4]
    168a:	cmp	r2, #0
    168c:	bne.n	161c <MTPD::GetStorageInfo(unsigned long)+0xb4>
    168e:	mov	r6, sl
    1690:	movs	r2, #0
    1692:	strh.w	r2, [sp, #24]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    1696:	cmp	r1, #0
    1698:	beq.w	1b10 <MTPD::GetStorageInfo(unsigned long)+0x5a8>
      {
        write_length_ += len;
    169c:	adds	r3, #2
    169e:	b.n	16a2 <MTPD::GetStorageInfo(unsigned long)+0x13a>
    16a0:	adds	r3, r7, #1
    16a2:	adds	r3, #1
    16a4:	str	r3, [r6, #4]
    const char *name = mFS.getName(store);
    writestring(name);  // storage descriptor
    writestring("");  // volume identifier

    //Printf("%d %d ",storage,store); Serial.println(name); Serial.flush();
  }
    16a6:	add	sp, #52	; 0x34
    16a8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    16ac:	mov	r0, r6
    16ae:	str	r6, [r7, #0]
    16b0:	b.n	162c <MTPD::GetStorageInfo(unsigned long)+0xc4>
    16b2:	ldr	r3, [r0, #4]
    16b4:	cmp	r3, #0
    16b6:	beq.w	1a02 <MTPD::GetStorageInfo(unsigned long)+0x49a>
    16ba:	ldr	r4, [pc, #608]	; (191c <MTPD::GetStorageInfo(unsigned long)+0x3b4>)
    16bc:	ldr	r0, [r4, #0]
        write_length_ += len;
    16be:	adds	r3, #2
    16c0:	add.w	r5, r6, #1056	; 0x420
        
        const char * src=data;
    16c4:	add.w	r9, sp, #22
        //
        int pos = 0; // into data
    16c8:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    16cc:	str	r3, [r6, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    16ce:	add.w	sl, r6, #544	; 0x220
    16d2:	b.n	16dc <MTPD::GetStorageInfo(unsigned long)+0x174>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    16d4:	cmp.w	r8, #1
    16d8:	bgt.n	1718 <MTPD::GetStorageInfo(unsigned long)+0x1b0>
    16da:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    16dc:	subs	r7, r5, r0
    16de:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    16e2:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    16e4:	cmp	r7, r3
    16e6:	it	ge
    16e8:	movge	r7, r3
          memcpy(dst,src,to_copy);
    16ea:	mov	r2, r7
          pos += to_copy;
    16ec:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    16ee:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    16f2:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    16f4:	add	r9, r7
          dst += to_copy;
    16f6:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    16f8:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    16fa:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    16fc:	bne.n	16d4 <MTPD::GetStorageInfo(unsigned long)+0x16c>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    16fe:	movs	r2, #60	; 0x3c
    1700:	mov.w	r1, #512	; 0x200
    1704:	mov	r0, sl
    1706:	bl	a270 <usb_mtp_send>
    170a:	cmp	r0, #0
    170c:	ble.n	16fe <MTPD::GetStorageInfo(unsigned long)+0x196>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    170e:	cmp.w	r8, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    1712:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1716:	ble.n	16da <MTPD::GetStorageInfo(unsigned long)+0x172>
    1718:	movs	r1, #2
    171a:	ldrb	r2, [r6, #0]
    171c:	ldr	r3, [r6, #4]
    171e:	strh.w	r1, [sp, #20]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    1722:	cmp	r2, #0
    1724:	bne.w	1588 <MTPD::GetStorageInfo(unsigned long)+0x20>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1728:	cmp	r3, #0
    172a:	beq.w	1b06 <MTPD::GetStorageInfo(unsigned long)+0x59e>
    172e:	ldr	r0, [r4, #0]
        write_length_ += len;
    1730:	adds	r3, #2
        
        const char * src=data;
    1732:	add.w	r9, sp, #20
        //
        int pos = 0; // into data
    1736:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    173a:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    173e:	str	r3, [r6, #4]
    1740:	b.n	174a <MTPD::GetStorageInfo(unsigned long)+0x1e2>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1742:	cmp.w	r8, #1
    1746:	bgt.n	1786 <MTPD::GetStorageInfo(unsigned long)+0x21e>
    1748:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    174a:	subs	r7, r5, r0
    174c:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    1750:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1752:	cmp	r7, r3
    1754:	it	ge
    1756:	movge	r7, r3
          memcpy(dst,src,to_copy);
    1758:	mov	r2, r7
          pos += to_copy;
    175a:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    175c:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1760:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    1762:	add	r9, r7
          dst += to_copy;
    1764:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1766:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1768:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    176a:	bne.n	1742 <MTPD::GetStorageInfo(unsigned long)+0x1da>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    176c:	movs	r2, #60	; 0x3c
    176e:	mov.w	r1, #512	; 0x200
    1772:	mov	r0, sl
    1774:	bl	a270 <usb_mtp_send>
    1778:	cmp	r0, #0
    177a:	ble.n	176c <MTPD::GetStorageInfo(unsigned long)+0x204>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    177c:	cmp.w	r8, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    1780:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1784:	ble.n	1748 <MTPD::GetStorageInfo(unsigned long)+0x1e0>
    1786:	movs	r1, #0
    1788:	ldrb	r2, [r6, #0]
    178a:	ldr	r3, [r6, #4]
    178c:	strh.w	r1, [sp, #18]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    1790:	cmp	r2, #0
    1792:	bne.w	1590 <MTPD::GetStorageInfo(unsigned long)+0x28>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1796:	cmp	r3, #0
    1798:	beq.w	1afc <MTPD::GetStorageInfo(unsigned long)+0x594>
    179c:	ldr	r0, [r4, #0]
        write_length_ += len;
    179e:	adds	r3, #2
        
        const char * src=data;
    17a0:	add.w	r9, sp, #18
        //
        int pos = 0; // into data
    17a4:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    17a8:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    17ac:	str	r3, [r6, #4]
    17ae:	b.n	17b8 <MTPD::GetStorageInfo(unsigned long)+0x250>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    17b0:	cmp.w	r8, #1
    17b4:	bgt.n	17f4 <MTPD::GetStorageInfo(unsigned long)+0x28c>
    17b6:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    17b8:	subs	r7, r5, r0
    17ba:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    17be:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    17c0:	cmp	r7, r3
    17c2:	it	ge
    17c4:	movge	r7, r3
          memcpy(dst,src,to_copy);
    17c6:	mov	r2, r7
          pos += to_copy;
    17c8:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    17ca:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    17ce:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    17d0:	add	r9, r7
          dst += to_copy;
    17d2:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    17d4:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    17d6:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    17d8:	bne.n	17b0 <MTPD::GetStorageInfo(unsigned long)+0x248>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    17da:	movs	r2, #60	; 0x3c
    17dc:	mov.w	r1, #512	; 0x200
    17e0:	mov	r0, sl
    17e2:	bl	a270 <usb_mtp_send>
    17e6:	cmp	r0, #0
    17e8:	ble.n	17da <MTPD::GetStorageInfo(unsigned long)+0x272>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    17ea:	cmp.w	r8, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    17ee:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    17f2:	ble.n	17b6 <MTPD::GetStorageInfo(unsigned long)+0x24e>
    17f4:	ldr.w	fp, [pc, #296]	; 1920 <MTPD::GetStorageInfo(unsigned long)+0x3b8>
    17f8:	ldrb	r7, [r6, #0]
    17fa:	ldr.w	r0, [fp, #80]	; 0x50
    17fe:	ldr	r3, [r6, #4]
    1800:	ldr	r1, [r0, #24]
public:
    uint32_t Count(uint32_t store,uint32_t parent) {return zFs_[0].Count(parent);}
    uint32_t Next(uint32_t store) {return zFs_[0].Next();}

    uint64_t size(uint32_t store)  
    { return (uint64_t)512 *(uint64_t)(zFs_[0].totalSectors() - zFs_[0].rootSector()); }
    1802:	ldr	r2, [r0, #0]
    uint64_t free(uint32_t store)  
    { return (uint64_t)512 *(uint64_t)(zFs_[0].totalSectors() - zFs_[0].eofSector()); }
    1804:	ldr	r0, [r0, #16]
public:
    uint32_t Count(uint32_t store,uint32_t parent) {return zFs_[0].Count(parent);}
    uint32_t Next(uint32_t store) {return zFs_[0].Next();}

    uint64_t size(uint32_t store)  
    { return (uint64_t)512 *(uint64_t)(zFs_[0].totalSectors() - zFs_[0].rootSector()); }
    1806:	subs	r2, r1, r2
    uint64_t free(uint32_t store)  
    { return (uint64_t)512 *(uint64_t)(zFs_[0].totalSectors() - zFs_[0].eofSector()); }
    1808:	rsb	r9, r0, r1
    180c:	lsrs	r1, r2, #23
    180e:	lsls	r2, r2, #9
    1810:	str	r1, [sp, #44]	; 0x2c
    1812:	mov.w	r1, r9, lsr #23
    1816:	str	r2, [sp, #40]	; 0x28
    1818:	mov.w	r2, r9, lsl #9
    181c:	str	r1, [sp, #4]
    181e:	str	r2, [sp, #0]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    1820:	cmp	r7, #0
    1822:	bne.w	15bc <MTPD::GetStorageInfo(unsigned long)+0x54>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1826:	cmp	r3, #0
    1828:	beq.w	1af2 <MTPD::GetStorageInfo(unsigned long)+0x58a>
    182c:	ldr	r0, [r4, #0]
        write_length_ += len;
    182e:	adds	r3, #8
        
        const char * src=data;
    1830:	add.w	r8, sp, #40	; 0x28
        //
        int pos = 0; // into data
    1834:	movs	r7, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    1836:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    183a:	str	r3, [r6, #4]
    183c:	b.n	1844 <MTPD::GetStorageInfo(unsigned long)+0x2dc>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    183e:	cmp	r7, #7
    1840:	bgt.n	1880 <MTPD::GetStorageInfo(unsigned long)+0x318>
    1842:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1844:	rsb	r9, r0, r5
    1848:	rsb	r3, r7, #8
          memcpy(dst,src,to_copy);
    184c:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    184e:	cmp	r9, r3
    1850:	it	ge
    1852:	movge	r9, r3
          memcpy(dst,src,to_copy);
    1854:	mov	r2, r9
          pos += to_copy;
    1856:	add	r7, r9
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    1858:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    185c:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    185e:	add	r8, r9
          dst += to_copy;
    1860:	add	r3, r9
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1862:	cmp	r3, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1864:	str	r3, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1866:	bne.n	183e <MTPD::GetStorageInfo(unsigned long)+0x2d6>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    1868:	movs	r2, #60	; 0x3c
    186a:	mov.w	r1, #512	; 0x200
    186e:	mov	r0, sl
    1870:	bl	a270 <usb_mtp_send>
    1874:	cmp	r0, #0
    1876:	ble.n	1868 <MTPD::GetStorageInfo(unsigned long)+0x300>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1878:	cmp	r7, #7
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    187a:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    187e:	ble.n	1842 <MTPD::GetStorageInfo(unsigned long)+0x2da>
    1880:	ldr	r3, [sp, #0]
    1882:	ldrb	r2, [r6, #0]
    1884:	str	r3, [sp, #32]
    1886:	ldr	r3, [sp, #4]
    1888:	str	r3, [sp, #36]	; 0x24
    188a:	ldr	r3, [r6, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    188c:	cmp	r2, #0
    188e:	bne.w	15c6 <MTPD::GetStorageInfo(unsigned long)+0x5e>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1892:	cmp	r3, #0
    1894:	beq.w	1ae8 <MTPD::GetStorageInfo(unsigned long)+0x580>
    1898:	ldr	r0, [r4, #0]
        write_length_ += len;
    189a:	adds	r3, #8
        
        const char * src=data;
    189c:	add.w	r9, sp, #32
        //
        int pos = 0; // into data
    18a0:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    18a4:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    18a8:	str	r3, [r6, #4]
    18aa:	b.n	18b4 <MTPD::GetStorageInfo(unsigned long)+0x34c>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    18ac:	cmp.w	r8, #7
    18b0:	bgt.n	18f0 <MTPD::GetStorageInfo(unsigned long)+0x388>
    18b2:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    18b4:	subs	r7, r5, r0
    18b6:	rsb	r3, r8, #8
          memcpy(dst,src,to_copy);
    18ba:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    18bc:	cmp	r7, r3
    18be:	it	ge
    18c0:	movge	r7, r3
          memcpy(dst,src,to_copy);
    18c2:	mov	r2, r7
          pos += to_copy;
    18c4:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    18c6:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    18ca:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    18cc:	add	r9, r7
          dst += to_copy;
    18ce:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    18d0:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    18d2:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    18d4:	bne.n	18ac <MTPD::GetStorageInfo(unsigned long)+0x344>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    18d6:	movs	r2, #60	; 0x3c
    18d8:	mov.w	r1, #512	; 0x200
    18dc:	mov	r0, sl
    18de:	bl	a270 <usb_mtp_send>
    18e2:	cmp	r0, #0
    18e4:	ble.n	18d6 <MTPD::GetStorageInfo(unsigned long)+0x36e>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    18e6:	cmp.w	r8, #7
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    18ea:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    18ee:	ble.n	18b2 <MTPD::GetStorageInfo(unsigned long)+0x34a>
    18f0:	mov.w	r1, #4294967295
    18f4:	ldrb	r2, [r6, #0]
    18f6:	ldr	r3, [r6, #4]
    18f8:	str	r1, [sp, #28]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    18fa:	cmp	r2, #0
    18fc:	bne.w	15ce <MTPD::GetStorageInfo(unsigned long)+0x66>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1900:	cmp	r3, #0
    1902:	beq.w	1a0e <MTPD::GetStorageInfo(unsigned long)+0x4a6>
    1906:	ldr	r0, [r4, #0]
        write_length_ += len;
    1908:	adds	r3, #4
        
        const char * src=data;
    190a:	add.w	r9, sp, #28
        //
        int pos = 0; // into data
    190e:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    1912:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    1916:	str	r3, [r6, #4]
    1918:	b.n	192c <MTPD::GetStorageInfo(unsigned long)+0x3c4>
    191a:	nop
    191c:	.word	0x20004204
    1920:	.word	0x2000c250
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1924:	cmp.w	r8, #3
    1928:	bgt.n	1968 <MTPD::GetStorageInfo(unsigned long)+0x400>
    192a:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    192c:	subs	r7, r5, r0
    192e:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    1932:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1934:	cmp	r7, r3
    1936:	it	ge
    1938:	movge	r7, r3
          memcpy(dst,src,to_copy);
    193a:	mov	r2, r7
          pos += to_copy;
    193c:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    193e:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1942:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    1944:	add	r9, r7
          dst += to_copy;
    1946:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1948:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    194a:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    194c:	bne.n	1924 <MTPD::GetStorageInfo(unsigned long)+0x3bc>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    194e:	movs	r2, #60	; 0x3c
    1950:	mov.w	r1, #512	; 0x200
    1954:	mov	r0, sl
    1956:	bl	a270 <usb_mtp_send>
    195a:	cmp	r0, #0
    195c:	ble.n	194e <MTPD::GetStorageInfo(unsigned long)+0x3e6>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    195e:	cmp.w	r8, #3
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    1962:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1966:	ble.n	192a <MTPD::GetStorageInfo(unsigned long)+0x3c2>
    1968:	ldr.w	r3, [fp, #80]	; 0x50
    196c:	ldrb.w	r8, [r6]
    1970:	mov	r1, r3
    1972:	str	r3, [sp, #0]

  #define Store2Storage(x) (x+1)
  #define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    1974:	ldrb.w	r3, [r3, #32]
    1978:	ldr	r7, [r6, #4]
    197a:	cmp	r3, #0
    197c:	beq.n	1a18 <MTPD::GetStorageInfo(unsigned long)+0x4b0>
    197e:	add.w	r9, r1, #32
    { write8(strlen(str) + 1);
    1982:	mov	r0, r9
    1984:	bl	c280 <strlen>
    1988:	adds	r0, #1
    198a:	strb.w	r0, [sp, #17]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    198e:	cmp.w	r8, #0
    1992:	bne.w	15f2 <MTPD::GetStorageInfo(unsigned long)+0x8a>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1996:	cmp	r7, #0
    1998:	beq.w	1b8c <MTPD::GetStorageInfo(unsigned long)+0x624>
    199c:	ldr	r0, [r4, #0]
        write_length_ += len;
    199e:	adds	r3, r7, #1
        
        const char * src=data;
    19a0:	add.w	r8, sp, #17
        //
        int pos = 0; // into data
    19a4:	movs	r7, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    19a6:	add.w	fp, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    19aa:	str	r3, [r6, #4]
    19ac:	b.n	19b4 <MTPD::GetStorageInfo(unsigned long)+0x44c>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    19ae:	cmp	r7, #0
    19b0:	bgt.n	19f0 <MTPD::GetStorageInfo(unsigned long)+0x488>
    19b2:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    19b4:	rsb	sl, r0, r5
    19b8:	rsb	r3, r7, #1
          memcpy(dst,src,to_copy);
    19bc:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    19be:	cmp	sl, r3
    19c0:	it	ge
    19c2:	movge	sl, r3
          memcpy(dst,src,to_copy);
    19c4:	mov	r2, sl
          pos += to_copy;
    19c6:	add	r7, sl
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    19c8:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    19cc:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    19ce:	add	r8, sl
          dst += to_copy;
    19d0:	add	r3, sl
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    19d2:	cmp	r3, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    19d4:	str	r3, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    19d6:	bne.n	19ae <MTPD::GetStorageInfo(unsigned long)+0x446>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    19d8:	movs	r2, #60	; 0x3c
    19da:	mov.w	r1, #512	; 0x200
    19de:	mov	r0, fp
    19e0:	bl	a270 <usb_mtp_send>
    19e4:	cmp	r0, #0
    19e6:	ble.n	19d8 <MTPD::GetStorageInfo(unsigned long)+0x470>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    19e8:	cmp	r7, #0
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    19ea:	str.w	fp, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    19ee:	ble.n	19b2 <MTPD::GetStorageInfo(unsigned long)+0x44a>
  #define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    19f0:	ldr	r3, [sp, #0]
    19f2:	ldrb	r1, [r6, #0]
    19f4:	ldrb.w	r2, [r3, #32]
    19f8:	ldr	r3, [r6, #4]
    19fa:	cmp	r2, #0
    19fc:	bne.w	1602 <MTPD::GetStorageInfo(unsigned long)+0x9a>
    1a00:	b.n	1690 <MTPD::GetStorageInfo(unsigned long)+0x128>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1a02:	add.w	r2, r0, #544	; 0x220
    1a06:	ldr	r4, [pc, #400]	; (1b98 <MTPD::GetStorageInfo(unsigned long)+0x630>)
    1a08:	mov	r0, r2
    1a0a:	str	r2, [r4, #0]
    1a0c:	b.n	16be <MTPD::GetStorageInfo(unsigned long)+0x156>
    1a0e:	add.w	r2, r6, #544	; 0x220
    1a12:	mov	r0, r2
    1a14:	str	r2, [r4, #0]
    1a16:	b.n	1908 <MTPD::GetStorageInfo(unsigned long)+0x3a0>
    1a18:	strb.w	r3, [sp, #16]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    1a1c:	cmp.w	r8, #0
    1a20:	bne.w	16a0 <MTPD::GetStorageInfo(unsigned long)+0x138>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1a24:	cmp	r7, #0
    1a26:	beq.w	1b76 <MTPD::GetStorageInfo(unsigned long)+0x60e>
    1a2a:	ldr	r0, [r4, #0]
        write_length_ += len;
    1a2c:	adds	r3, r7, #1
        
        const char * src=data;
    1a2e:	add.w	r9, sp, #16
        //
        int pos = 0; // into data
    1a32:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    1a36:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    1a3a:	str	r3, [r6, #4]
    1a3c:	b.n	1a46 <MTPD::GetStorageInfo(unsigned long)+0x4de>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1a3e:	cmp.w	r8, #0
    1a42:	bgt.n	1a82 <MTPD::GetStorageInfo(unsigned long)+0x51a>
    1a44:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1a46:	subs	r7, r5, r0
    1a48:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    1a4c:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1a4e:	cmp	r7, r3
    1a50:	it	ge
    1a52:	movge	r7, r3
          memcpy(dst,src,to_copy);
    1a54:	mov	r2, r7
          pos += to_copy;
    1a56:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    1a58:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1a5c:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    1a5e:	add	r9, r7
          dst += to_copy;
    1a60:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1a62:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1a64:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1a66:	bne.n	1a3e <MTPD::GetStorageInfo(unsigned long)+0x4d6>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    1a68:	movs	r2, #60	; 0x3c
    1a6a:	mov.w	r1, #512	; 0x200
    1a6e:	mov	r0, sl
    1a70:	bl	a270 <usb_mtp_send>
    1a74:	cmp	r0, #0
    1a76:	ble.n	1a68 <MTPD::GetStorageInfo(unsigned long)+0x500>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1a78:	cmp.w	r8, #0
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    1a7c:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1a80:	ble.n	1a44 <MTPD::GetStorageInfo(unsigned long)+0x4dc>
    1a82:	movs	r2, #0
    1a84:	ldrb	r1, [r6, #0]
    1a86:	ldr	r3, [r6, #4]
    1a88:	strb.w	r2, [sp, #15]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    1a8c:	cmp	r1, #0
    1a8e:	bne.w	16a2 <MTPD::GetStorageInfo(unsigned long)+0x13a>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1a92:	cmp	r3, #0
    1a94:	beq.n	1b6c <MTPD::GetStorageInfo(unsigned long)+0x604>
    1a96:	ldr	r0, [r4, #0]
        write_length_ += len;
    1a98:	adds	r3, #1
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    1a9a:	add.w	r9, r6, #544	; 0x220
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    1a9e:	add.w	r8, sp, #15
        //
        int pos = 0; // into data
    1aa2:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    1aa4:	str	r3, [r6, #4]
    1aa6:	b.n	1ab0 <MTPD::GetStorageInfo(unsigned long)+0x548>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1aa8:	cmp	r7, #0
    1aaa:	bgt.w	16a6 <MTPD::GetStorageInfo(unsigned long)+0x13e>
    1aae:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1ab0:	subs	r6, r5, r0
    1ab2:	rsb	r3, r7, #1
          memcpy(dst,src,to_copy);
    1ab6:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1ab8:	cmp	r6, r3
    1aba:	it	ge
    1abc:	movge	r6, r3
          memcpy(dst,src,to_copy);
    1abe:	mov	r2, r6
          pos += to_copy;
    1ac0:	add	r7, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    1ac2:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1ac6:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    1ac8:	add	r8, r6
          dst += to_copy;
    1aca:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1acc:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1ace:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1ad0:	bne.n	1aa8 <MTPD::GetStorageInfo(unsigned long)+0x540>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    1ad2:	movs	r2, #60	; 0x3c
    1ad4:	mov.w	r1, #512	; 0x200
    1ad8:	mov	r0, r9
    1ada:	bl	a270 <usb_mtp_send>
    1ade:	cmp	r0, #0
    1ae0:	ble.n	1ad2 <MTPD::GetStorageInfo(unsigned long)+0x56a>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    1ae2:	str.w	r9, [r4]
    1ae6:	b.n	1aa8 <MTPD::GetStorageInfo(unsigned long)+0x540>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1ae8:	add.w	r2, r6, #544	; 0x220
    1aec:	mov	r0, r2
    1aee:	str	r2, [r4, #0]
    1af0:	b.n	189a <MTPD::GetStorageInfo(unsigned long)+0x332>
    1af2:	add.w	r2, r6, #544	; 0x220
    1af6:	mov	r0, r2
    1af8:	str	r2, [r4, #0]
    1afa:	b.n	182e <MTPD::GetStorageInfo(unsigned long)+0x2c6>
    1afc:	add.w	r2, r6, #544	; 0x220
    1b00:	mov	r0, r2
    1b02:	str	r2, [r4, #0]
    1b04:	b.n	179e <MTPD::GetStorageInfo(unsigned long)+0x236>
    1b06:	add.w	r2, r6, #544	; 0x220
    1b0a:	mov	r0, r2
    1b0c:	str	r2, [r4, #0]
    1b0e:	b.n	1730 <MTPD::GetStorageInfo(unsigned long)+0x1c8>
    1b10:	cbz	r3, 1b80 <MTPD::GetStorageInfo(unsigned long)+0x618>
    1b12:	ldr	r4, [pc, #132]	; (1b98 <MTPD::GetStorageInfo(unsigned long)+0x630>)
    1b14:	ldr	r0, [r4, #0]
        write_length_ += len;
    1b16:	adds	r3, #2
    1b18:	add.w	r5, r6, #1056	; 0x420
        
        const char * src=data;
    1b1c:	add.w	r9, sp, #24
        //
        int pos = 0; // into data
    1b20:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    1b24:	str	r3, [r6, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    1b26:	add.w	sl, r6, #544	; 0x220
    1b2a:	b.n	1b34 <MTPD::GetStorageInfo(unsigned long)+0x5cc>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1b2c:	cmp.w	r8, #1
    1b30:	bgt.n	1a82 <MTPD::GetStorageInfo(unsigned long)+0x51a>
    1b32:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1b34:	subs	r7, r5, r0
    1b36:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    1b3a:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1b3c:	cmp	r7, r3
    1b3e:	it	ge
    1b40:	movge	r7, r3
          memcpy(dst,src,to_copy);
    1b42:	mov	r2, r7
          pos += to_copy;
    1b44:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    1b46:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1b4a:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    1b4c:	add	r9, r7
          dst += to_copy;
    1b4e:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1b50:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1b52:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1b54:	bne.n	1b2c <MTPD::GetStorageInfo(unsigned long)+0x5c4>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    1b56:	movs	r2, #60	; 0x3c
    1b58:	mov.w	r1, #512	; 0x200
    1b5c:	mov	r0, sl
    1b5e:	bl	a270 <usb_mtp_send>
    1b62:	cmp	r0, #0
    1b64:	ble.n	1b56 <MTPD::GetStorageInfo(unsigned long)+0x5ee>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    1b66:	str.w	sl, [r4]
    1b6a:	b.n	1b2c <MTPD::GetStorageInfo(unsigned long)+0x5c4>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1b6c:	add.w	r2, r6, #544	; 0x220
    1b70:	mov	r0, r2
    1b72:	str	r2, [r4, #0]
    1b74:	b.n	1a98 <MTPD::GetStorageInfo(unsigned long)+0x530>
    1b76:	add.w	r3, r6, #544	; 0x220
    1b7a:	mov	r0, r3
    1b7c:	str	r3, [r4, #0]
    1b7e:	b.n	1a2c <MTPD::GetStorageInfo(unsigned long)+0x4c4>
    1b80:	add.w	r2, r6, #544	; 0x220
    1b84:	ldr	r4, [pc, #16]	; (1b98 <MTPD::GetStorageInfo(unsigned long)+0x630>)
    1b86:	mov	r0, r2
    1b88:	str	r2, [r4, #0]
    1b8a:	b.n	1b16 <MTPD::GetStorageInfo(unsigned long)+0x5ae>
    1b8c:	add.w	r3, r6, #544	; 0x220
    1b90:	mov	r0, r3
    1b92:	str	r3, [r4, #0]
    1b94:	b.n	199e <MTPD::GetStorageInfo(unsigned long)+0x436>
    1b96:	nop
    1b98:	.word	0x20004204

00001b9c <MTPD::GetObjectInfo(unsigned long)>:
        write32(handle);
      }
    }
    return;
  }
  void GetObjectInfo(uint32_t handle) 
    1b9c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1ba0:	ldr	r3, [pc, #732]	; (1e80 <MTPD::GetObjectInfo(unsigned long)+0x2e4>)
    1ba2:	sub	sp, #348	; 0x15c
    1ba4:	mov	r7, r0
    { return (uint64_t)512 *(uint64_t)(zFs_[0].totalSectors() - zFs_[0].eofSector()); }

    char * getName(uint32_t store) {return zFs_[0].getName();}

    uint32_t Info(uint32_t handle, char *filename, uint32_t *size, uint32_t *parent)
    { return zFs_[0].Info(handle, filename, size, parent);}
    1ba6:	ldr	r4, [r3, #80]	; 0x50
    1ba8:	add	r6, sp, #40	; 0x28
    1baa:	add	r3, sp, #36	; 0x24
    1bac:	add	r2, sp, #88	; 0x58
    1bae:	mov	r0, r4
    1bb0:	str	r6, [sp, #0]
    1bb2:	bl	6f10 <zeroFS_class::Info(unsigned long, char*, unsigned long*, unsigned long*)>
    1bb6:	movs	r2, #1
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    1bb8:	ldrb	r3, [r7, #0]
    1bba:	str	r2, [sp, #44]	; 0x2c
    1bbc:	cmp	r3, #0
    1bbe:	beq.w	1d04 <MTPD::GetObjectInfo(unsigned long)+0x168>
      {
        write_length_ += len;
    1bc2:	ldr	r3, [r7, #4]
      Serial.println(parent,HEX);
    #endif

    uint32_t storage = Store2Storage(store);
    write32(storage); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    1bc4:	ldr	r2, [sp, #36]	; 0x24
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    1bc6:	adds	r3, #4
      Serial.println(parent,HEX);
    #endif

    uint32_t storage = Store2Storage(store);
    write32(storage); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    1bc8:	adds	r2, #1
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    1bca:	str	r3, [r7, #4]
      Serial.println(parent,HEX);
    #endif

    uint32_t storage = Store2Storage(store);
    write32(storage); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    1bcc:	beq.w	242e <MTPD::GetObjectInfo(unsigned long)+0x892>
    1bd0:	movs	r2, #0
    1bd2:	strh.w	r2, [sp, #28]
    1bd6:	movs	r2, #0
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    1bd8:	adds	r3, #2
    1bda:	strh.w	r2, [sp, #26]
    1bde:	ldr	r2, [sp, #36]	; 0x24
    1be0:	adds	r3, #2
    1be2:	str	r2, [sp, #76]	; 0x4c
    1be4:	movs	r2, #0
    1be6:	adds	r3, #4
    1be8:	strh.w	r2, [sp, #24]
    1bec:	movs	r2, #0
    1bee:	adds	r3, #2
    1bf0:	str	r2, [sp, #72]	; 0x48
    1bf2:	movs	r2, #0
    1bf4:	adds	r3, #4
    1bf6:	str	r2, [sp, #68]	; 0x44
    1bf8:	movs	r2, #0
    1bfa:	adds	r3, #4
    1bfc:	str	r2, [sp, #64]	; 0x40
    1bfe:	movs	r2, #0
    1c00:	adds	r3, #4
    1c02:	str	r2, [sp, #60]	; 0x3c
    1c04:	movs	r2, #0
    1c06:	adds	r3, #4
    1c08:	str	r2, [sp, #56]	; 0x38
    1c0a:	movs	r2, #0
    1c0c:	adds	r3, #4
    1c0e:	str	r2, [sp, #52]	; 0x34
    1c10:	ldr	r2, [r6, #0]
    1c12:	adds	r3, #4
    1c14:	str	r2, [sp, #48]	; 0x30
    1c16:	ldr	r2, [sp, #36]	; 0x24
    1c18:	adds	r3, #4
    1c1a:	sub.w	r2, r2, #4294967295
    1c1e:	clz	r2, r2
    1c22:	lsrs	r2, r2, #5
    1c24:	strh.w	r2, [sp, #30]
    1c28:	movs	r2, #0
    1c2a:	adds	r3, #2
    1c2c:	str	r2, [sp, #84]	; 0x54
    1c2e:	movs	r2, #0
    1c30:	adds	r3, #4
    1c32:	str	r2, [sp, #80]	; 0x50
    1c34:	adds	r6, r3, #4

  #define Store2Storage(x) (x+1)
  #define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    1c36:	ldrb.w	r2, [sp, #88]	; 0x58
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    1c3a:	str	r6, [r7, #4]

  #define Store2Storage(x) (x+1)
  #define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    1c3c:	cmp	r2, #0
    1c3e:	beq.n	1cec <MTPD::GetObjectInfo(unsigned long)+0x150>
    { write8(strlen(str) + 1);
    1c40:	add	r0, sp, #88	; 0x58
    1c42:	str	r2, [sp, #12]
    1c44:	bl	c280 <strlen>
    1c48:	ldr	r2, [sp, #12]
    1c4a:	adds	r0, #1
    1c4c:	strb.w	r0, [sp, #23]
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    1c50:	adds	r3, r6, #1
    1c52:	movs	r1, #1
    1c54:	str	r3, [r7, #4]
    1c56:	add.w	sl, sp, #88	; 0x58
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    1c5a:	add.w	r9, r7, #544	; 0x220
    1c5e:	b.n	1c6c <MTPD::GetObjectInfo(unsigned long)+0xd0>
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    1c60:	adds	r3, #2
  #define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    1c62:	ldrb.w	r2, [sl, #1]!
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    1c66:	str	r3, [r7, #4]
  #define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    1c68:	cmp	r2, #0
    1c6a:	beq.n	1cdc <MTPD::GetObjectInfo(unsigned long)+0x140>
    1c6c:	strh.w	r2, [sp, #34]	; 0x22
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    1c70:	cmp	r1, #0
    1c72:	bne.n	1c60 <MTPD::GetObjectInfo(unsigned long)+0xc4>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1c74:	ldr	r4, [pc, #524]	; (1e84 <MTPD::GetObjectInfo(unsigned long)+0x2e8>)
    1c76:	cmp	r3, #0
    1c78:	beq.n	1cfc <MTPD::GetObjectInfo(unsigned long)+0x160>
    1c7a:	ldr	r0, [r4, #0]
        write_length_ += len;
    1c7c:	adds	r3, #2
    1c7e:	add.w	r8, r7, #1056	; 0x420
        
        const char * src=data;
    1c82:	add.w	r6, sp, #34	; 0x22
        //
        int pos = 0; // into data
    1c86:	movs	r5, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    1c88:	str	r3, [r7, #4]
    1c8a:	b.n	1c92 <MTPD::GetObjectInfo(unsigned long)+0xf6>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1c8c:	cmp	r5, #1
    1c8e:	bgt.n	1cd0 <MTPD::GetObjectInfo(unsigned long)+0x134>
    1c90:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1c92:	rsb	r2, r0, r8
    1c96:	rsb	r3, r5, #2
          memcpy(dst,src,to_copy);
    1c9a:	mov	r1, r6
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1c9c:	cmp	r2, r3
    1c9e:	it	ge
    1ca0:	movge	r2, r3
    1ca2:	mov	fp, r2
          memcpy(dst,src,to_copy);
          pos += to_copy;
    1ca4:	add	r5, r2
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    1ca6:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1caa:	ldr	r2, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    1cac:	add	r6, fp
          dst += to_copy;
    1cae:	add.w	r3, r2, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1cb2:	cmp	r3, r8
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1cb4:	str	r3, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1cb6:	bne.n	1c8c <MTPD::GetObjectInfo(unsigned long)+0xf0>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    1cb8:	movs	r2, #60	; 0x3c
    1cba:	mov.w	r1, #512	; 0x200
    1cbe:	mov	r0, r9
    1cc0:	bl	a270 <usb_mtp_send>
    1cc4:	cmp	r0, #0
    1cc6:	ble.n	1cb8 <MTPD::GetObjectInfo(unsigned long)+0x11c>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1cc8:	cmp	r5, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    1cca:	str.w	r9, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1cce:	ble.n	1c90 <MTPD::GetObjectInfo(unsigned long)+0xf4>
  #define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    1cd0:	ldrb.w	r2, [sl, #1]!
    1cd4:	ldrb	r1, [r7, #0]
    1cd6:	ldr	r3, [r7, #4]
    1cd8:	cmp	r2, #0
    1cda:	bne.n	1c6c <MTPD::GetObjectInfo(unsigned long)+0xd0>
    1cdc:	movs	r2, #0
    1cde:	strh.w	r2, [sp, #32]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    1ce2:	cmp	r1, #0
    1ce4:	beq.w	263c <MTPD::GetObjectInfo(unsigned long)+0xaa0>
      {
        write_length_ += len;
    1ce8:	adds	r3, #2
    1cea:	b.n	1cee <MTPD::GetObjectInfo(unsigned long)+0x152>
    1cec:	adds	r3, r6, #1
    1cee:	adds	r3, #1
    1cf0:	adds	r3, #1
    1cf2:	adds	r3, #1
    1cf4:	str	r3, [r7, #4]
    write32(0);  // sequence number
    writestring(filename);
    writestring("");  // date created
    writestring("");  // date modified
    writestring("");  // keywords
  }
    1cf6:	add	sp, #348	; 0x15c
    1cf8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1cfc:	mov	r0, r9
    1cfe:	str.w	r9, [r4]
    1d02:	b.n	1c7c <MTPD::GetObjectInfo(unsigned long)+0xe0>
    1d04:	ldr	r3, [r7, #4]
    1d06:	cmp	r3, #0
    1d08:	beq.w	2422 <MTPD::GetObjectInfo(unsigned long)+0x886>
    1d0c:	ldr	r4, [pc, #372]	; (1e84 <MTPD::GetObjectInfo(unsigned long)+0x2e8>)
    1d0e:	ldr	r0, [r4, #0]
        write_length_ += len;
    1d10:	adds	r3, #4
        
        const char * src=data;
    1d12:	add.w	sl, sp, #44	; 0x2c
    1d16:	add.w	r5, r7, #1056	; 0x420
        //
        int pos = 0; // into data
    1d1a:	mov.w	r9, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    1d1e:	str	r3, [r7, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    1d20:	add.w	fp, r7, #544	; 0x220
    1d24:	b.n	1d2e <MTPD::GetObjectInfo(unsigned long)+0x192>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1d26:	cmp.w	r9, #3
    1d2a:	bgt.n	1d6c <MTPD::GetObjectInfo(unsigned long)+0x1d0>
    1d2c:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1d2e:	rsb	r8, r0, r5
    1d32:	rsb	r3, r9, #4
          memcpy(dst,src,to_copy);
    1d36:	mov	r1, sl
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1d38:	cmp	r8, r3
    1d3a:	it	ge
    1d3c:	movge	r8, r3
          memcpy(dst,src,to_copy);
    1d3e:	mov	r2, r8
          pos += to_copy;
    1d40:	add	r9, r8
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    1d42:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1d46:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    1d48:	add	sl, r8
          dst += to_copy;
    1d4a:	add	r3, r8
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1d4c:	cmp	r3, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1d4e:	str	r3, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1d50:	bne.n	1d26 <MTPD::GetObjectInfo(unsigned long)+0x18a>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    1d52:	movs	r2, #60	; 0x3c
    1d54:	mov.w	r1, #512	; 0x200
    1d58:	mov	r0, fp
    1d5a:	bl	a270 <usb_mtp_send>
    1d5e:	cmp	r0, #0
    1d60:	ble.n	1d52 <MTPD::GetObjectInfo(unsigned long)+0x1b6>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1d62:	cmp.w	r9, #3
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    1d66:	str.w	fp, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1d6a:	ble.n	1d2c <MTPD::GetObjectInfo(unsigned long)+0x190>
      Serial.println(parent,HEX);
    #endif

    uint32_t storage = Store2Storage(store);
    write32(storage); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    1d6c:	ldr	r3, [sp, #36]	; 0x24
    1d6e:	movw	r2, #12289	; 0x3001
    1d72:	ldrb	r1, [r7, #0]
    1d74:	adds	r3, #1
    1d76:	ldr	r3, [r7, #4]
    1d78:	it	ne
    1d7a:	movne	r2, #0
    1d7c:	strh.w	r2, [sp, #28]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    1d80:	cmp	r1, #0
    1d82:	bne.w	1bd6 <MTPD::GetObjectInfo(unsigned long)+0x3a>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1d86:	cmp	r3, #0
    1d88:	beq.w	26a8 <MTPD::GetObjectInfo(unsigned long)+0xb0c>
    1d8c:	ldr	r0, [r4, #0]
        write_length_ += len;
    1d8e:	adds	r3, #2
        
        const char * src=data;
    1d90:	add.w	r9, sp, #28
        //
        int pos = 0; // into data
    1d94:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    1d98:	add.w	sl, r7, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    1d9c:	str	r3, [r7, #4]
    1d9e:	b.n	1da8 <MTPD::GetObjectInfo(unsigned long)+0x20c>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1da0:	cmp.w	r8, #1
    1da4:	bgt.n	1de6 <MTPD::GetObjectInfo(unsigned long)+0x24a>
    1da6:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1da8:	rsb	fp, r0, r5
    1dac:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    1db0:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1db2:	cmp	fp, r3
    1db4:	it	ge
    1db6:	movge	fp, r3
          memcpy(dst,src,to_copy);
    1db8:	mov	r2, fp
          pos += to_copy;
    1dba:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    1dbc:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1dc0:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    1dc2:	add	r9, fp
          dst += to_copy;
    1dc4:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1dc6:	cmp	r3, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1dc8:	str	r3, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1dca:	bne.n	1da0 <MTPD::GetObjectInfo(unsigned long)+0x204>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    1dcc:	movs	r2, #60	; 0x3c
    1dce:	mov.w	r1, #512	; 0x200
    1dd2:	mov	r0, sl
    1dd4:	bl	a270 <usb_mtp_send>
    1dd8:	cmp	r0, #0
    1dda:	ble.n	1dcc <MTPD::GetObjectInfo(unsigned long)+0x230>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1ddc:	cmp.w	r8, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    1de0:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1de4:	ble.n	1da6 <MTPD::GetObjectInfo(unsigned long)+0x20a>
    1de6:	movs	r3, #0
    1de8:	ldrb	r2, [r7, #0]
    1dea:	strh.w	r3, [sp, #26]
    1dee:	ldr	r3, [r7, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    1df0:	cmp	r2, #0
    1df2:	bne.w	1bde <MTPD::GetObjectInfo(unsigned long)+0x42>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1df6:	cmp	r3, #0
    1df8:	beq.w	269c <MTPD::GetObjectInfo(unsigned long)+0xb00>
    1dfc:	ldr	r0, [r4, #0]
        write_length_ += len;
    1dfe:	adds	r3, #2
        
        const char * src=data;
    1e00:	add.w	r9, sp, #26
        //
        int pos = 0; // into data
    1e04:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    1e08:	add.w	sl, r7, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    1e0c:	str	r3, [r7, #4]
    1e0e:	b.n	1e18 <MTPD::GetObjectInfo(unsigned long)+0x27c>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1e10:	cmp.w	r8, #1
    1e14:	bgt.n	1e56 <MTPD::GetObjectInfo(unsigned long)+0x2ba>
    1e16:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1e18:	rsb	fp, r0, r5
    1e1c:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    1e20:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1e22:	cmp	fp, r3
    1e24:	it	ge
    1e26:	movge	fp, r3
          memcpy(dst,src,to_copy);
    1e28:	mov	r2, fp
          pos += to_copy;
    1e2a:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    1e2c:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1e30:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    1e32:	add	r9, fp
          dst += to_copy;
    1e34:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1e36:	cmp	r3, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1e38:	str	r3, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1e3a:	bne.n	1e10 <MTPD::GetObjectInfo(unsigned long)+0x274>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    1e3c:	movs	r2, #60	; 0x3c
    1e3e:	mov.w	r1, #512	; 0x200
    1e42:	mov	r0, sl
    1e44:	bl	a270 <usb_mtp_send>
    1e48:	cmp	r0, #0
    1e4a:	ble.n	1e3c <MTPD::GetObjectInfo(unsigned long)+0x2a0>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1e4c:	cmp.w	r8, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    1e50:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1e54:	ble.n	1e16 <MTPD::GetObjectInfo(unsigned long)+0x27a>
    1e56:	ldr	r3, [sp, #36]	; 0x24
    1e58:	ldrb	r2, [r7, #0]
    1e5a:	str	r3, [sp, #76]	; 0x4c
    1e5c:	ldr	r3, [r7, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    1e5e:	cmp	r2, #0
    1e60:	bne.w	1be4 <MTPD::GetObjectInfo(unsigned long)+0x48>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1e64:	cmp	r3, #0
    1e66:	beq.w	26d2 <MTPD::GetObjectInfo(unsigned long)+0xb36>
    1e6a:	ldr	r0, [r4, #0]
        write_length_ += len;
    1e6c:	adds	r3, #4
        
        const char * src=data;
    1e6e:	add.w	r9, sp, #76	; 0x4c
        //
        int pos = 0; // into data
    1e72:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    1e76:	add.w	sl, r7, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    1e7a:	str	r3, [r7, #4]
    1e7c:	b.n	1e90 <MTPD::GetObjectInfo(unsigned long)+0x2f4>
    1e7e:	nop
    1e80:	.word	0x2000c250
    1e84:	.word	0x20004204
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1e88:	cmp.w	r8, #3
    1e8c:	bgt.n	1ece <MTPD::GetObjectInfo(unsigned long)+0x332>
    1e8e:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1e90:	rsb	fp, r0, r5
    1e94:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    1e98:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1e9a:	cmp	fp, r3
    1e9c:	it	ge
    1e9e:	movge	fp, r3
          memcpy(dst,src,to_copy);
    1ea0:	mov	r2, fp
          pos += to_copy;
    1ea2:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    1ea4:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1ea8:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    1eaa:	add	r9, fp
          dst += to_copy;
    1eac:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1eae:	cmp	r3, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1eb0:	str	r3, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1eb2:	bne.n	1e88 <MTPD::GetObjectInfo(unsigned long)+0x2ec>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    1eb4:	movs	r2, #60	; 0x3c
    1eb6:	mov.w	r1, #512	; 0x200
    1eba:	mov	r0, sl
    1ebc:	bl	a270 <usb_mtp_send>
    1ec0:	cmp	r0, #0
    1ec2:	ble.n	1eb4 <MTPD::GetObjectInfo(unsigned long)+0x318>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1ec4:	cmp.w	r8, #3
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    1ec8:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1ecc:	ble.n	1e8e <MTPD::GetObjectInfo(unsigned long)+0x2f2>
    1ece:	movs	r3, #0
    1ed0:	ldrb	r2, [r7, #0]
    1ed2:	strh.w	r3, [sp, #24]
    1ed6:	ldr	r3, [r7, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    1ed8:	cmp	r2, #0
    1eda:	bne.w	1bec <MTPD::GetObjectInfo(unsigned long)+0x50>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1ede:	cmp	r3, #0
    1ee0:	beq.w	26c8 <MTPD::GetObjectInfo(unsigned long)+0xb2c>
    1ee4:	ldr	r0, [r4, #0]
        write_length_ += len;
    1ee6:	adds	r3, #2
        
        const char * src=data;
    1ee8:	add.w	r9, sp, #24
        //
        int pos = 0; // into data
    1eec:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    1ef0:	add.w	sl, r7, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    1ef4:	str	r3, [r7, #4]
    1ef6:	b.n	1f00 <MTPD::GetObjectInfo(unsigned long)+0x364>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1ef8:	cmp.w	r8, #1
    1efc:	bgt.n	1f3e <MTPD::GetObjectInfo(unsigned long)+0x3a2>
    1efe:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1f00:	rsb	fp, r0, r5
    1f04:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    1f08:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1f0a:	cmp	fp, r3
    1f0c:	it	ge
    1f0e:	movge	fp, r3
          memcpy(dst,src,to_copy);
    1f10:	mov	r2, fp
          pos += to_copy;
    1f12:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    1f14:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1f18:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    1f1a:	add	r9, fp
          dst += to_copy;
    1f1c:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1f1e:	cmp	r3, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1f20:	str	r3, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1f22:	bne.n	1ef8 <MTPD::GetObjectInfo(unsigned long)+0x35c>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    1f24:	movs	r2, #60	; 0x3c
    1f26:	mov.w	r1, #512	; 0x200
    1f2a:	mov	r0, sl
    1f2c:	bl	a270 <usb_mtp_send>
    1f30:	cmp	r0, #0
    1f32:	ble.n	1f24 <MTPD::GetObjectInfo(unsigned long)+0x388>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1f34:	cmp.w	r8, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    1f38:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1f3c:	ble.n	1efe <MTPD::GetObjectInfo(unsigned long)+0x362>
    1f3e:	movs	r3, #0
    1f40:	ldrb	r2, [r7, #0]
    1f42:	str	r3, [sp, #72]	; 0x48
    1f44:	ldr	r3, [r7, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    1f46:	cmp	r2, #0
    1f48:	bne.w	1bf2 <MTPD::GetObjectInfo(unsigned long)+0x56>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1f4c:	cmp	r3, #0
    1f4e:	beq.w	26be <MTPD::GetObjectInfo(unsigned long)+0xb22>
    1f52:	ldr	r0, [r4, #0]
        write_length_ += len;
    1f54:	adds	r3, #4
        
        const char * src=data;
    1f56:	add.w	r9, sp, #72	; 0x48
        //
        int pos = 0; // into data
    1f5a:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    1f5e:	add.w	sl, r7, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    1f62:	str	r3, [r7, #4]
    1f64:	b.n	1f6e <MTPD::GetObjectInfo(unsigned long)+0x3d2>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1f66:	cmp.w	r8, #3
    1f6a:	bgt.n	1fac <MTPD::GetObjectInfo(unsigned long)+0x410>
    1f6c:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1f6e:	rsb	fp, r0, r5
    1f72:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    1f76:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1f78:	cmp	fp, r3
    1f7a:	it	ge
    1f7c:	movge	fp, r3
          memcpy(dst,src,to_copy);
    1f7e:	mov	r2, fp
          pos += to_copy;
    1f80:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    1f82:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1f86:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    1f88:	add	r9, fp
          dst += to_copy;
    1f8a:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1f8c:	cmp	r3, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1f8e:	str	r3, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1f90:	bne.n	1f66 <MTPD::GetObjectInfo(unsigned long)+0x3ca>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    1f92:	movs	r2, #60	; 0x3c
    1f94:	mov.w	r1, #512	; 0x200
    1f98:	mov	r0, sl
    1f9a:	bl	a270 <usb_mtp_send>
    1f9e:	cmp	r0, #0
    1fa0:	ble.n	1f92 <MTPD::GetObjectInfo(unsigned long)+0x3f6>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1fa2:	cmp.w	r8, #3
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    1fa6:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1faa:	ble.n	1f6c <MTPD::GetObjectInfo(unsigned long)+0x3d0>
    1fac:	movs	r3, #0
    1fae:	ldrb	r2, [r7, #0]
    1fb0:	str	r3, [sp, #68]	; 0x44
    1fb2:	ldr	r3, [r7, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    1fb4:	cmp	r2, #0
    1fb6:	bne.w	1bf8 <MTPD::GetObjectInfo(unsigned long)+0x5c>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1fba:	cmp	r3, #0
    1fbc:	beq.w	26b4 <MTPD::GetObjectInfo(unsigned long)+0xb18>
    1fc0:	ldr	r0, [r4, #0]
        write_length_ += len;
    1fc2:	adds	r3, #4
        
        const char * src=data;
    1fc4:	add.w	r9, sp, #68	; 0x44
        //
        int pos = 0; // into data
    1fc8:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    1fcc:	add.w	sl, r7, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    1fd0:	str	r3, [r7, #4]
    1fd2:	b.n	1fdc <MTPD::GetObjectInfo(unsigned long)+0x440>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1fd4:	cmp.w	r8, #3
    1fd8:	bgt.n	201a <MTPD::GetObjectInfo(unsigned long)+0x47e>
    1fda:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1fdc:	rsb	fp, r0, r5
    1fe0:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    1fe4:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1fe6:	cmp	fp, r3
    1fe8:	it	ge
    1fea:	movge	fp, r3
          memcpy(dst,src,to_copy);
    1fec:	mov	r2, fp
          pos += to_copy;
    1fee:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    1ff0:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1ff4:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    1ff6:	add	r9, fp
          dst += to_copy;
    1ff8:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1ffa:	cmp	r3, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1ffc:	str	r3, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1ffe:	bne.n	1fd4 <MTPD::GetObjectInfo(unsigned long)+0x438>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2000:	movs	r2, #60	; 0x3c
    2002:	mov.w	r1, #512	; 0x200
    2006:	mov	r0, sl
    2008:	bl	a270 <usb_mtp_send>
    200c:	cmp	r0, #0
    200e:	ble.n	2000 <MTPD::GetObjectInfo(unsigned long)+0x464>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2010:	cmp.w	r8, #3
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2014:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2018:	ble.n	1fda <MTPD::GetObjectInfo(unsigned long)+0x43e>
    201a:	movs	r3, #0
    201c:	ldrb	r2, [r7, #0]
    201e:	str	r3, [sp, #64]	; 0x40
    2020:	ldr	r3, [r7, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2022:	cmp	r2, #0
    2024:	bne.w	1bfe <MTPD::GetObjectInfo(unsigned long)+0x62>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2028:	cmp	r3, #0
    202a:	beq.w	2632 <MTPD::GetObjectInfo(unsigned long)+0xa96>
    202e:	ldr	r0, [r4, #0]
        write_length_ += len;
    2030:	adds	r3, #4
        
        const char * src=data;
    2032:	add.w	r9, sp, #64	; 0x40
        //
        int pos = 0; // into data
    2036:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    203a:	add.w	sl, r7, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    203e:	str	r3, [r7, #4]
    2040:	b.n	204a <MTPD::GetObjectInfo(unsigned long)+0x4ae>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2042:	cmp.w	r8, #3
    2046:	bgt.n	2088 <MTPD::GetObjectInfo(unsigned long)+0x4ec>
    2048:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    204a:	rsb	fp, r0, r5
    204e:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    2052:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2054:	cmp	fp, r3
    2056:	it	ge
    2058:	movge	fp, r3
          memcpy(dst,src,to_copy);
    205a:	mov	r2, fp
          pos += to_copy;
    205c:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    205e:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2062:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    2064:	add	r9, fp
          dst += to_copy;
    2066:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2068:	cmp	r3, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    206a:	str	r3, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    206c:	bne.n	2042 <MTPD::GetObjectInfo(unsigned long)+0x4a6>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    206e:	movs	r2, #60	; 0x3c
    2070:	mov.w	r1, #512	; 0x200
    2074:	mov	r0, sl
    2076:	bl	a270 <usb_mtp_send>
    207a:	cmp	r0, #0
    207c:	ble.n	206e <MTPD::GetObjectInfo(unsigned long)+0x4d2>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    207e:	cmp.w	r8, #3
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2082:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2086:	ble.n	2048 <MTPD::GetObjectInfo(unsigned long)+0x4ac>
    2088:	movs	r3, #0
    208a:	ldrb	r2, [r7, #0]
    208c:	str	r3, [sp, #60]	; 0x3c
    208e:	ldr	r3, [r7, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2090:	cmp	r2, #0
    2092:	bne.w	1c04 <MTPD::GetObjectInfo(unsigned long)+0x68>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2096:	cmp	r3, #0
    2098:	beq.w	2628 <MTPD::GetObjectInfo(unsigned long)+0xa8c>
    209c:	ldr	r0, [r4, #0]
        write_length_ += len;
    209e:	adds	r3, #4
        
        const char * src=data;
    20a0:	add.w	r9, sp, #60	; 0x3c
        //
        int pos = 0; // into data
    20a4:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    20a8:	add.w	sl, r7, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    20ac:	str	r3, [r7, #4]
    20ae:	b.n	20b8 <MTPD::GetObjectInfo(unsigned long)+0x51c>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    20b0:	cmp.w	r8, #3
    20b4:	bgt.n	20f6 <MTPD::GetObjectInfo(unsigned long)+0x55a>
    20b6:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    20b8:	rsb	fp, r0, r5
    20bc:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    20c0:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    20c2:	cmp	fp, r3
    20c4:	it	ge
    20c6:	movge	fp, r3
          memcpy(dst,src,to_copy);
    20c8:	mov	r2, fp
          pos += to_copy;
    20ca:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    20cc:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    20d0:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    20d2:	add	r9, fp
          dst += to_copy;
    20d4:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    20d6:	cmp	r3, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    20d8:	str	r3, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    20da:	bne.n	20b0 <MTPD::GetObjectInfo(unsigned long)+0x514>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    20dc:	movs	r2, #60	; 0x3c
    20de:	mov.w	r1, #512	; 0x200
    20e2:	mov	r0, sl
    20e4:	bl	a270 <usb_mtp_send>
    20e8:	cmp	r0, #0
    20ea:	ble.n	20dc <MTPD::GetObjectInfo(unsigned long)+0x540>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    20ec:	cmp.w	r8, #3
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    20f0:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    20f4:	ble.n	20b6 <MTPD::GetObjectInfo(unsigned long)+0x51a>
    20f6:	movs	r3, #0
    20f8:	ldrb	r2, [r7, #0]
    20fa:	str	r3, [sp, #56]	; 0x38
    20fc:	ldr	r3, [r7, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    20fe:	cmp	r2, #0
    2100:	bne.w	1c0a <MTPD::GetObjectInfo(unsigned long)+0x6e>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2104:	cmp	r3, #0
    2106:	beq.w	261e <MTPD::GetObjectInfo(unsigned long)+0xa82>
    210a:	ldr	r0, [r4, #0]
        write_length_ += len;
    210c:	adds	r3, #4
        
        const char * src=data;
    210e:	add.w	r9, sp, #56	; 0x38
        //
        int pos = 0; // into data
    2112:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2116:	add.w	sl, r7, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    211a:	str	r3, [r7, #4]
    211c:	b.n	2126 <MTPD::GetObjectInfo(unsigned long)+0x58a>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    211e:	cmp.w	r8, #3
    2122:	bgt.n	2164 <MTPD::GetObjectInfo(unsigned long)+0x5c8>
    2124:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2126:	rsb	fp, r0, r5
    212a:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    212e:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2130:	cmp	fp, r3
    2132:	it	ge
    2134:	movge	fp, r3
          memcpy(dst,src,to_copy);
    2136:	mov	r2, fp
          pos += to_copy;
    2138:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    213a:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    213e:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    2140:	add	r9, fp
          dst += to_copy;
    2142:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2144:	cmp	r3, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2146:	str	r3, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2148:	bne.n	211e <MTPD::GetObjectInfo(unsigned long)+0x582>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    214a:	movs	r2, #60	; 0x3c
    214c:	mov.w	r1, #512	; 0x200
    2150:	mov	r0, sl
    2152:	bl	a270 <usb_mtp_send>
    2156:	cmp	r0, #0
    2158:	ble.n	214a <MTPD::GetObjectInfo(unsigned long)+0x5ae>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    215a:	cmp.w	r8, #3
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    215e:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2162:	ble.n	2124 <MTPD::GetObjectInfo(unsigned long)+0x588>
    2164:	movs	r3, #0
    2166:	ldrb	r2, [r7, #0]
    2168:	str	r3, [sp, #52]	; 0x34
    216a:	ldr	r3, [r7, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    216c:	cmp	r2, #0
    216e:	bne.w	1c10 <MTPD::GetObjectInfo(unsigned long)+0x74>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2172:	cmp	r3, #0
    2174:	beq.w	2614 <MTPD::GetObjectInfo(unsigned long)+0xa78>
    2178:	ldr	r0, [r4, #0]
        write_length_ += len;
    217a:	adds	r3, #4
        
        const char * src=data;
    217c:	add.w	r9, sp, #52	; 0x34
        //
        int pos = 0; // into data
    2180:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2184:	add.w	sl, r7, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2188:	str	r3, [r7, #4]
    218a:	b.n	2194 <MTPD::GetObjectInfo(unsigned long)+0x5f8>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    218c:	cmp.w	r8, #3
    2190:	bgt.n	21d2 <MTPD::GetObjectInfo(unsigned long)+0x636>
    2192:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2194:	rsb	fp, r0, r5
    2198:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    219c:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    219e:	cmp	fp, r3
    21a0:	it	ge
    21a2:	movge	fp, r3
          memcpy(dst,src,to_copy);
    21a4:	mov	r2, fp
          pos += to_copy;
    21a6:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    21a8:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    21ac:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    21ae:	add	r9, fp
          dst += to_copy;
    21b0:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    21b2:	cmp	r3, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    21b4:	str	r3, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    21b6:	bne.n	218c <MTPD::GetObjectInfo(unsigned long)+0x5f0>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    21b8:	movs	r2, #60	; 0x3c
    21ba:	mov.w	r1, #512	; 0x200
    21be:	mov	r0, sl
    21c0:	bl	a270 <usb_mtp_send>
    21c4:	cmp	r0, #0
    21c6:	ble.n	21b8 <MTPD::GetObjectInfo(unsigned long)+0x61c>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    21c8:	cmp.w	r8, #3
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    21cc:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    21d0:	ble.n	2192 <MTPD::GetObjectInfo(unsigned long)+0x5f6>
    21d2:	ldr	r3, [r6, #0]
    21d4:	ldrb	r2, [r7, #0]
    21d6:	str	r3, [sp, #48]	; 0x30
    21d8:	ldr	r3, [r7, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    21da:	cmp	r2, #0
    21dc:	bne.w	1c16 <MTPD::GetObjectInfo(unsigned long)+0x7a>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    21e0:	cmp	r3, #0
    21e2:	beq.w	260a <MTPD::GetObjectInfo(unsigned long)+0xa6e>
    21e6:	ldr	r0, [r4, #0]
        write_length_ += len;
    21e8:	adds	r3, #4
        
        const char * src=data;
    21ea:	add.w	r9, sp, #48	; 0x30
        //
        int pos = 0; // into data
    21ee:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    21f2:	add.w	sl, r7, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    21f6:	str	r3, [r7, #4]
    21f8:	b.n	2202 <MTPD::GetObjectInfo(unsigned long)+0x666>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    21fa:	cmp.w	r8, #3
    21fe:	bgt.n	223e <MTPD::GetObjectInfo(unsigned long)+0x6a2>
    2200:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2202:	subs	r6, r5, r0
    2204:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    2208:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    220a:	cmp	r6, r3
    220c:	it	ge
    220e:	movge	r6, r3
          memcpy(dst,src,to_copy);
    2210:	mov	r2, r6
          pos += to_copy;
    2212:	add	r8, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2214:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2218:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    221a:	add	r9, r6
          dst += to_copy;
    221c:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    221e:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2220:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2222:	bne.n	21fa <MTPD::GetObjectInfo(unsigned long)+0x65e>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2224:	movs	r2, #60	; 0x3c
    2226:	mov.w	r1, #512	; 0x200
    222a:	mov	r0, sl
    222c:	bl	a270 <usb_mtp_send>
    2230:	cmp	r0, #0
    2232:	ble.n	2224 <MTPD::GetObjectInfo(unsigned long)+0x688>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2234:	cmp.w	r8, #3
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2238:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    223c:	ble.n	2200 <MTPD::GetObjectInfo(unsigned long)+0x664>
    223e:	ldr	r2, [sp, #36]	; 0x24
    2240:	ldrb	r1, [r7, #0]
    2242:	sub.w	r2, r2, #4294967295
    2246:	ldr	r3, [r7, #4]
    2248:	clz	r2, r2
    224c:	lsrs	r2, r2, #5
    224e:	strh.w	r2, [sp, #30]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2252:	cmp	r1, #0
    2254:	bne.w	1c28 <MTPD::GetObjectInfo(unsigned long)+0x8c>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2258:	cmp	r3, #0
    225a:	beq.w	2600 <MTPD::GetObjectInfo(unsigned long)+0xa64>
    225e:	ldr	r0, [r4, #0]
        write_length_ += len;
    2260:	adds	r3, #2
        
        const char * src=data;
    2262:	add.w	r9, sp, #30
        //
        int pos = 0; // into data
    2266:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    226a:	add.w	sl, r7, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    226e:	str	r3, [r7, #4]
    2270:	b.n	227a <MTPD::GetObjectInfo(unsigned long)+0x6de>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2272:	cmp.w	r8, #1
    2276:	bgt.n	22b6 <MTPD::GetObjectInfo(unsigned long)+0x71a>
    2278:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    227a:	subs	r6, r5, r0
    227c:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    2280:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2282:	cmp	r6, r3
    2284:	it	ge
    2286:	movge	r6, r3
          memcpy(dst,src,to_copy);
    2288:	mov	r2, r6
          pos += to_copy;
    228a:	add	r8, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    228c:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2290:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    2292:	add	r9, r6
          dst += to_copy;
    2294:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2296:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2298:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    229a:	bne.n	2272 <MTPD::GetObjectInfo(unsigned long)+0x6d6>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    229c:	movs	r2, #60	; 0x3c
    229e:	mov.w	r1, #512	; 0x200
    22a2:	mov	r0, sl
    22a4:	bl	a270 <usb_mtp_send>
    22a8:	cmp	r0, #0
    22aa:	ble.n	229c <MTPD::GetObjectInfo(unsigned long)+0x700>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    22ac:	cmp.w	r8, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    22b0:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    22b4:	ble.n	2278 <MTPD::GetObjectInfo(unsigned long)+0x6dc>
    22b6:	movs	r3, #0
    22b8:	ldrb	r2, [r7, #0]
    22ba:	str	r3, [sp, #84]	; 0x54
    22bc:	ldr	r3, [r7, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    22be:	cmp	r2, #0
    22c0:	bne.w	1c2e <MTPD::GetObjectInfo(unsigned long)+0x92>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    22c4:	cmp	r3, #0
    22c6:	beq.w	25f6 <MTPD::GetObjectInfo(unsigned long)+0xa5a>
    22ca:	ldr	r0, [r4, #0]
        write_length_ += len;
    22cc:	adds	r3, #4
        
        const char * src=data;
    22ce:	add.w	r9, sp, #84	; 0x54
        //
        int pos = 0; // into data
    22d2:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    22d6:	add.w	sl, r7, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    22da:	str	r3, [r7, #4]
    22dc:	b.n	22e6 <MTPD::GetObjectInfo(unsigned long)+0x74a>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    22de:	cmp.w	r8, #3
    22e2:	bgt.n	2322 <MTPD::GetObjectInfo(unsigned long)+0x786>
    22e4:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    22e6:	subs	r6, r5, r0
    22e8:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    22ec:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    22ee:	cmp	r6, r3
    22f0:	it	ge
    22f2:	movge	r6, r3
          memcpy(dst,src,to_copy);
    22f4:	mov	r2, r6
          pos += to_copy;
    22f6:	add	r8, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    22f8:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    22fc:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    22fe:	add	r9, r6
          dst += to_copy;
    2300:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2302:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2304:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2306:	bne.n	22de <MTPD::GetObjectInfo(unsigned long)+0x742>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2308:	movs	r2, #60	; 0x3c
    230a:	mov.w	r1, #512	; 0x200
    230e:	mov	r0, sl
    2310:	bl	a270 <usb_mtp_send>
    2314:	cmp	r0, #0
    2316:	ble.n	2308 <MTPD::GetObjectInfo(unsigned long)+0x76c>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2318:	cmp.w	r8, #3
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    231c:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2320:	ble.n	22e4 <MTPD::GetObjectInfo(unsigned long)+0x748>
    2322:	movs	r3, #0
    2324:	ldrb	r2, [r7, #0]
    2326:	str	r3, [sp, #80]	; 0x50
    2328:	ldr	r3, [r7, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    232a:	cmp	r2, #0
    232c:	bne.w	1c34 <MTPD::GetObjectInfo(unsigned long)+0x98>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2330:	cmp	r3, #0
    2332:	beq.w	243a <MTPD::GetObjectInfo(unsigned long)+0x89e>
    2336:	ldr	r0, [r4, #0]
        write_length_ += len;
    2338:	adds	r3, #4
        
        const char * src=data;
    233a:	add.w	r9, sp, #80	; 0x50
        //
        int pos = 0; // into data
    233e:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2342:	add.w	sl, r7, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2346:	str	r3, [r7, #4]
    2348:	b.n	2352 <MTPD::GetObjectInfo(unsigned long)+0x7b6>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    234a:	cmp.w	r8, #3
    234e:	bgt.n	238e <MTPD::GetObjectInfo(unsigned long)+0x7f2>
    2350:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2352:	subs	r6, r5, r0
    2354:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    2358:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    235a:	cmp	r6, r3
    235c:	it	ge
    235e:	movge	r6, r3
          memcpy(dst,src,to_copy);
    2360:	mov	r2, r6
          pos += to_copy;
    2362:	add	r8, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2364:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2368:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    236a:	add	r9, r6
          dst += to_copy;
    236c:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    236e:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2370:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2372:	bne.n	234a <MTPD::GetObjectInfo(unsigned long)+0x7ae>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2374:	movs	r2, #60	; 0x3c
    2376:	mov.w	r1, #512	; 0x200
    237a:	mov	r0, sl
    237c:	bl	a270 <usb_mtp_send>
    2380:	cmp	r0, #0
    2382:	ble.n	2374 <MTPD::GetObjectInfo(unsigned long)+0x7d8>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2384:	cmp.w	r8, #3
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2388:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    238c:	ble.n	2350 <MTPD::GetObjectInfo(unsigned long)+0x7b4>

  #define Store2Storage(x) (x+1)
  #define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    238e:	ldrb.w	r2, [sp, #88]	; 0x58
    2392:	ldrb.w	r8, [r7]
    2396:	ldr	r6, [r7, #4]
    2398:	cmp	r2, #0
    239a:	beq.n	2444 <MTPD::GetObjectInfo(unsigned long)+0x8a8>
    { write8(strlen(str) + 1);
    239c:	add	r0, sp, #88	; 0x58
    239e:	str	r2, [sp, #12]
    23a0:	bl	c280 <strlen>
    23a4:	adds	r0, #1
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    23a6:	ldr	r2, [sp, #12]
    23a8:	strb.w	r0, [sp, #23]
    23ac:	cmp.w	r8, #0
    23b0:	bne.w	1c50 <MTPD::GetObjectInfo(unsigned long)+0xb4>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    23b4:	cmp	r6, #0
    23b6:	beq.w	2712 <MTPD::GetObjectInfo(unsigned long)+0xb76>
    23ba:	ldr	r0, [r4, #0]
        write_length_ += len;
    23bc:	adds	r3, r6, #1
        
        const char * src=data;
    23be:	add.w	r9, sp, #23
        //
        int pos = 0; // into data
    23c2:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    23c6:	add.w	sl, r7, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    23ca:	str	r3, [r7, #4]
    23cc:	b.n	23d6 <MTPD::GetObjectInfo(unsigned long)+0x83a>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    23ce:	cmp.w	r8, #0
    23d2:	bgt.n	2412 <MTPD::GetObjectInfo(unsigned long)+0x876>
    23d4:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    23d6:	subs	r6, r5, r0
    23d8:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    23dc:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    23de:	cmp	r6, r3
    23e0:	it	ge
    23e2:	movge	r6, r3
          memcpy(dst,src,to_copy);
    23e4:	mov	r2, r6
          pos += to_copy;
    23e6:	add	r8, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    23e8:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    23ec:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    23ee:	add	r9, r6
          dst += to_copy;
    23f0:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    23f2:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    23f4:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    23f6:	bne.n	23ce <MTPD::GetObjectInfo(unsigned long)+0x832>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    23f8:	movs	r2, #60	; 0x3c
    23fa:	mov.w	r1, #512	; 0x200
    23fe:	mov	r0, sl
    2400:	bl	a270 <usb_mtp_send>
    2404:	cmp	r0, #0
    2406:	ble.n	23f8 <MTPD::GetObjectInfo(unsigned long)+0x85c>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2408:	cmp.w	r8, #0
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    240c:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2410:	ble.n	23d4 <MTPD::GetObjectInfo(unsigned long)+0x838>
  #define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    2412:	ldrb.w	r2, [sp, #88]	; 0x58
    2416:	ldrb	r1, [r7, #0]
    2418:	ldr	r3, [r7, #4]
    241a:	cmp	r2, #0
    241c:	bne.w	1c56 <MTPD::GetObjectInfo(unsigned long)+0xba>
    2420:	b.n	1cdc <MTPD::GetObjectInfo(unsigned long)+0x140>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2422:	add.w	r2, r7, #544	; 0x220
    2426:	ldr	r4, [pc, #756]	; (271c <MTPD::GetObjectInfo(unsigned long)+0xb80>)
    2428:	mov	r0, r2
    242a:	str	r2, [r4, #0]
    242c:	b.n	1d10 <MTPD::GetObjectInfo(unsigned long)+0x174>
    242e:	movw	r2, #12289	; 0x3001
    2432:	strh.w	r2, [sp, #28]
    2436:	b.w	1bd6 <MTPD::GetObjectInfo(unsigned long)+0x3a>
    243a:	add.w	r2, r7, #544	; 0x220
    243e:	mov	r0, r2
    2440:	str	r2, [r4, #0]
    2442:	b.n	2338 <MTPD::GetObjectInfo(unsigned long)+0x79c>
    2444:	strb.w	r2, [sp, #22]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2448:	cmp.w	r8, #0
    244c:	bne.w	1cec <MTPD::GetObjectInfo(unsigned long)+0x150>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2450:	cmp	r6, #0
    2452:	beq.w	26fc <MTPD::GetObjectInfo(unsigned long)+0xb60>
    2456:	ldr	r0, [r4, #0]
        write_length_ += len;
    2458:	adds	r3, r6, #1
        
        const char * src=data;
    245a:	add.w	r9, sp, #22
        //
        int pos = 0; // into data
    245e:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2462:	add.w	sl, r7, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2466:	str	r3, [r7, #4]
    2468:	b.n	2472 <MTPD::GetObjectInfo(unsigned long)+0x8d6>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    246a:	cmp.w	r8, #0
    246e:	bgt.n	24ae <MTPD::GetObjectInfo(unsigned long)+0x912>
    2470:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2472:	subs	r6, r5, r0
    2474:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    2478:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    247a:	cmp	r6, r3
    247c:	it	ge
    247e:	movge	r6, r3
          memcpy(dst,src,to_copy);
    2480:	mov	r2, r6
          pos += to_copy;
    2482:	add	r8, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2484:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2488:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    248a:	add	r9, r6
          dst += to_copy;
    248c:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    248e:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2490:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2492:	bne.n	246a <MTPD::GetObjectInfo(unsigned long)+0x8ce>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2494:	movs	r2, #60	; 0x3c
    2496:	mov.w	r1, #512	; 0x200
    249a:	mov	r0, sl
    249c:	bl	a270 <usb_mtp_send>
    24a0:	cmp	r0, #0
    24a2:	ble.n	2494 <MTPD::GetObjectInfo(unsigned long)+0x8f8>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    24a4:	cmp.w	r8, #0
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    24a8:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    24ac:	ble.n	2470 <MTPD::GetObjectInfo(unsigned long)+0x8d4>
    24ae:	movs	r2, #0
    24b0:	ldrb	r1, [r7, #0]
    24b2:	ldr	r3, [r7, #4]
    24b4:	strb.w	r2, [sp, #21]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    24b8:	cmp	r1, #0
    24ba:	bne.w	1cee <MTPD::GetObjectInfo(unsigned long)+0x152>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    24be:	cmp	r3, #0
    24c0:	beq.w	26f2 <MTPD::GetObjectInfo(unsigned long)+0xb56>
    24c4:	ldr	r0, [r4, #0]
        write_length_ += len;
    24c6:	adds	r3, #1
        
        const char * src=data;
    24c8:	add.w	r9, sp, #21
        //
        int pos = 0; // into data
    24cc:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    24d0:	add.w	sl, r7, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    24d4:	str	r3, [r7, #4]
    24d6:	b.n	24e0 <MTPD::GetObjectInfo(unsigned long)+0x944>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    24d8:	cmp.w	r8, #0
    24dc:	bgt.n	251c <MTPD::GetObjectInfo(unsigned long)+0x980>
    24de:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    24e0:	subs	r6, r5, r0
    24e2:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    24e6:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    24e8:	cmp	r6, r3
    24ea:	it	ge
    24ec:	movge	r6, r3
          memcpy(dst,src,to_copy);
    24ee:	mov	r2, r6
          pos += to_copy;
    24f0:	add	r8, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    24f2:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    24f6:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    24f8:	add	r9, r6
          dst += to_copy;
    24fa:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    24fc:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    24fe:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2500:	bne.n	24d8 <MTPD::GetObjectInfo(unsigned long)+0x93c>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2502:	movs	r2, #60	; 0x3c
    2504:	mov.w	r1, #512	; 0x200
    2508:	mov	r0, sl
    250a:	bl	a270 <usb_mtp_send>
    250e:	cmp	r0, #0
    2510:	ble.n	2502 <MTPD::GetObjectInfo(unsigned long)+0x966>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2512:	cmp.w	r8, #0
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2516:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    251a:	ble.n	24de <MTPD::GetObjectInfo(unsigned long)+0x942>
    251c:	movs	r3, #0
    251e:	ldrb	r2, [r7, #0]
    2520:	strb.w	r3, [sp, #20]
    2524:	ldr	r3, [r7, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2526:	cmp	r2, #0
    2528:	bne.w	1cf0 <MTPD::GetObjectInfo(unsigned long)+0x154>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    252c:	cmp	r3, #0
    252e:	beq.w	26e8 <MTPD::GetObjectInfo(unsigned long)+0xb4c>
    2532:	ldr	r0, [r4, #0]
        write_length_ += len;
    2534:	adds	r3, #1
        
        const char * src=data;
    2536:	add.w	r9, sp, #20
        //
        int pos = 0; // into data
    253a:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    253e:	add.w	sl, r7, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2542:	str	r3, [r7, #4]
    2544:	b.n	254e <MTPD::GetObjectInfo(unsigned long)+0x9b2>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2546:	cmp.w	r8, #0
    254a:	bgt.n	258a <MTPD::GetObjectInfo(unsigned long)+0x9ee>
    254c:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    254e:	subs	r6, r5, r0
    2550:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    2554:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2556:	cmp	r6, r3
    2558:	it	ge
    255a:	movge	r6, r3
          memcpy(dst,src,to_copy);
    255c:	mov	r2, r6
          pos += to_copy;
    255e:	add	r8, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2560:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2564:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    2566:	add	r9, r6
          dst += to_copy;
    2568:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    256a:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    256c:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    256e:	bne.n	2546 <MTPD::GetObjectInfo(unsigned long)+0x9aa>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2570:	movs	r2, #60	; 0x3c
    2572:	mov.w	r1, #512	; 0x200
    2576:	mov	r0, sl
    2578:	bl	a270 <usb_mtp_send>
    257c:	cmp	r0, #0
    257e:	ble.n	2570 <MTPD::GetObjectInfo(unsigned long)+0x9d4>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2580:	cmp.w	r8, #0
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2584:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2588:	ble.n	254c <MTPD::GetObjectInfo(unsigned long)+0x9b0>
    258a:	movs	r3, #0
    258c:	ldrb	r2, [r7, #0]
    258e:	strb.w	r3, [sp, #19]
    2592:	ldr	r3, [r7, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2594:	cmp	r2, #0
    2596:	bne.w	1cf2 <MTPD::GetObjectInfo(unsigned long)+0x156>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    259a:	cmp	r3, #0
    259c:	beq.w	26de <MTPD::GetObjectInfo(unsigned long)+0xb42>
    25a0:	ldr	r0, [r4, #0]
        write_length_ += len;
    25a2:	adds	r3, #1
        
        const char * src=data;
    25a4:	add.w	r9, sp, #19
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    25a8:	add.w	sl, r7, #544	; 0x220
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
    25ac:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    25b0:	str	r3, [r7, #4]
    25b2:	b.n	25be <MTPD::GetObjectInfo(unsigned long)+0xa22>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    25b4:	cmp.w	r8, #0
    25b8:	bgt.w	1cf6 <MTPD::GetObjectInfo(unsigned long)+0x15a>
    25bc:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    25be:	subs	r6, r5, r0
    25c0:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    25c4:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    25c6:	cmp	r6, r3
    25c8:	it	ge
    25ca:	movge	r6, r3
          memcpy(dst,src,to_copy);
    25cc:	mov	r2, r6
          pos += to_copy;
    25ce:	add	r8, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    25d0:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    25d4:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    25d6:	add	r9, r6
          dst += to_copy;
    25d8:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    25da:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    25dc:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    25de:	bne.n	25b4 <MTPD::GetObjectInfo(unsigned long)+0xa18>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    25e0:	movs	r2, #60	; 0x3c
    25e2:	mov.w	r1, #512	; 0x200
    25e6:	mov	r0, sl
    25e8:	bl	a270 <usb_mtp_send>
    25ec:	cmp	r0, #0
    25ee:	ble.n	25e0 <MTPD::GetObjectInfo(unsigned long)+0xa44>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    25f0:	str.w	sl, [r4]
    25f4:	b.n	25b4 <MTPD::GetObjectInfo(unsigned long)+0xa18>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    25f6:	add.w	r2, r7, #544	; 0x220
    25fa:	mov	r0, r2
    25fc:	str	r2, [r4, #0]
    25fe:	b.n	22cc <MTPD::GetObjectInfo(unsigned long)+0x730>
    2600:	add.w	r2, r7, #544	; 0x220
    2604:	mov	r0, r2
    2606:	str	r2, [r4, #0]
    2608:	b.n	2260 <MTPD::GetObjectInfo(unsigned long)+0x6c4>
    260a:	add.w	r2, r7, #544	; 0x220
    260e:	mov	r0, r2
    2610:	str	r2, [r4, #0]
    2612:	b.n	21e8 <MTPD::GetObjectInfo(unsigned long)+0x64c>
    2614:	add.w	r2, r7, #544	; 0x220
    2618:	mov	r0, r2
    261a:	str	r2, [r4, #0]
    261c:	b.n	217a <MTPD::GetObjectInfo(unsigned long)+0x5de>
    261e:	add.w	r2, r7, #544	; 0x220
    2622:	mov	r0, r2
    2624:	str	r2, [r4, #0]
    2626:	b.n	210c <MTPD::GetObjectInfo(unsigned long)+0x570>
    2628:	add.w	r2, r7, #544	; 0x220
    262c:	mov	r0, r2
    262e:	str	r2, [r4, #0]
    2630:	b.n	209e <MTPD::GetObjectInfo(unsigned long)+0x502>
    2632:	add.w	r2, r7, #544	; 0x220
    2636:	mov	r0, r2
    2638:	str	r2, [r4, #0]
    263a:	b.n	2030 <MTPD::GetObjectInfo(unsigned long)+0x494>
    263c:	cmp	r3, #0
    263e:	beq.n	2706 <MTPD::GetObjectInfo(unsigned long)+0xb6a>
    2640:	ldr	r4, [pc, #216]	; (271c <MTPD::GetObjectInfo(unsigned long)+0xb80>)
    2642:	ldr	r0, [r4, #0]
        write_length_ += len;
    2644:	adds	r3, #2
        
        const char * src=data;
    2646:	add.w	r9, sp, #32
    264a:	add.w	r5, r7, #1056	; 0x420
        //
        int pos = 0; // into data
    264e:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2652:	str	r3, [r7, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2654:	add.w	sl, r7, #544	; 0x220
    2658:	b.n	2664 <MTPD::GetObjectInfo(unsigned long)+0xac8>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    265a:	cmp.w	r8, #1
    265e:	bgt.w	24ae <MTPD::GetObjectInfo(unsigned long)+0x912>
    2662:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2664:	subs	r6, r5, r0
    2666:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    266a:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    266c:	cmp	r6, r3
    266e:	it	ge
    2670:	movge	r6, r3
          memcpy(dst,src,to_copy);
    2672:	mov	r2, r6
          pos += to_copy;
    2674:	add	r8, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2676:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    267a:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    267c:	add	r9, r6
          dst += to_copy;
    267e:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2680:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2682:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2684:	bne.n	265a <MTPD::GetObjectInfo(unsigned long)+0xabe>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2686:	movs	r2, #60	; 0x3c
    2688:	mov.w	r1, #512	; 0x200
    268c:	mov	r0, sl
    268e:	bl	a270 <usb_mtp_send>
    2692:	cmp	r0, #0
    2694:	ble.n	2686 <MTPD::GetObjectInfo(unsigned long)+0xaea>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2696:	str.w	sl, [r4]
    269a:	b.n	265a <MTPD::GetObjectInfo(unsigned long)+0xabe>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    269c:	add.w	r2, r7, #544	; 0x220
    26a0:	mov	r0, r2
    26a2:	str	r2, [r4, #0]
    26a4:	b.w	1dfe <MTPD::GetObjectInfo(unsigned long)+0x262>
    26a8:	add.w	r2, r7, #544	; 0x220
    26ac:	mov	r0, r2
    26ae:	str	r2, [r4, #0]
    26b0:	b.w	1d8e <MTPD::GetObjectInfo(unsigned long)+0x1f2>
    26b4:	add.w	r2, r7, #544	; 0x220
    26b8:	mov	r0, r2
    26ba:	str	r2, [r4, #0]
    26bc:	b.n	1fc2 <MTPD::GetObjectInfo(unsigned long)+0x426>
    26be:	add.w	r2, r7, #544	; 0x220
    26c2:	mov	r0, r2
    26c4:	str	r2, [r4, #0]
    26c6:	b.n	1f54 <MTPD::GetObjectInfo(unsigned long)+0x3b8>
    26c8:	add.w	r2, r7, #544	; 0x220
    26cc:	mov	r0, r2
    26ce:	str	r2, [r4, #0]
    26d0:	b.n	1ee6 <MTPD::GetObjectInfo(unsigned long)+0x34a>
    26d2:	add.w	r2, r7, #544	; 0x220
    26d6:	mov	r0, r2
    26d8:	str	r2, [r4, #0]
    26da:	b.w	1e6c <MTPD::GetObjectInfo(unsigned long)+0x2d0>
    26de:	add.w	r2, r7, #544	; 0x220
    26e2:	mov	r0, r2
    26e4:	str	r2, [r4, #0]
    26e6:	b.n	25a2 <MTPD::GetObjectInfo(unsigned long)+0xa06>
    26e8:	add.w	r2, r7, #544	; 0x220
    26ec:	mov	r0, r2
    26ee:	str	r2, [r4, #0]
    26f0:	b.n	2534 <MTPD::GetObjectInfo(unsigned long)+0x998>
    26f2:	add.w	r2, r7, #544	; 0x220
    26f6:	mov	r0, r2
    26f8:	str	r2, [r4, #0]
    26fa:	b.n	24c6 <MTPD::GetObjectInfo(unsigned long)+0x92a>
    26fc:	add.w	r3, r7, #544	; 0x220
    2700:	mov	r0, r3
    2702:	str	r3, [r4, #0]
    2704:	b.n	2458 <MTPD::GetObjectInfo(unsigned long)+0x8bc>
    2706:	add.w	r2, r7, #544	; 0x220
    270a:	ldr	r4, [pc, #16]	; (271c <MTPD::GetObjectInfo(unsigned long)+0xb80>)
    270c:	mov	r0, r2
    270e:	str	r2, [r4, #0]
    2710:	b.n	2644 <MTPD::GetObjectInfo(unsigned long)+0xaa8>
    2712:	add.w	r3, r7, #544	; 0x220
    2716:	mov	r0, r3
    2718:	str	r3, [r4, #0]
    271a:	b.n	23bc <MTPD::GetObjectInfo(unsigned long)+0x820>
    271c:	.word	0x20004204

00002720 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>:
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    }

    void getObjectPropDesc(uint32_t p1, uint32_t p2)
    {
      switch(p1)
    2720:	mvn.w	r3, #56320	; 0xdc00
    2724:	add	r3, r1
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    }

    void getObjectPropDesc(uint32_t p1, uint32_t p2)
    2726:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    272a:	mov	r6, r0
    272c:	sub	sp, #144	; 0x90
    {
      switch(p1)
    272e:	cmp	r3, #67	; 0x43
    2730:	bhi.n	27de <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbe>
    2732:	tbh	[pc, r3, lsl #1]
    2736:	.short	0x0057
    2738:	.word	0x00730065
    273c:	.word	0x005400ac
    2740:	.word	0x00ba0054
    2744:	.word	0x012d00f3
    2748:	.word	0x01670054
    274c:	.word	0x00540054
    2750:	.word	0x00540054
    2754:	.word	0x00540054
    2758:	.word	0x00540054
    275c:	.word	0x00540054
    2760:	.word	0x00540054
    2764:	.word	0x00540054
    2768:	.word	0x00540054
    276c:	.word	0x00540054
    2770:	.word	0x00540054
    2774:	.word	0x00540054
    2778:	.word	0x00540054
    277c:	.word	0x00540054
    2780:	.word	0x00540054
    2784:	.word	0x00540054
    2788:	.word	0x00540054
    278c:	.word	0x00540054
    2790:	.word	0x00540054
    2794:	.word	0x00540054
    2798:	.word	0x00540054
    279c:	.word	0x00540054
    27a0:	.word	0x00540054
    27a4:	.word	0x00540054
    27a8:	.word	0x00540054
    27ac:	.word	0x00540054
    27b0:	.word	0x00540054
    27b4:	.word	0x01a10054
    27b8:	.word	0x00540054
    27bc:	.short	0x0044
    27be:	movw	r2, #56388	; 0xdc44
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    27c2:	ldrb	r3, [r0, #0]
    27c4:	strh.w	r2, [sp, #70]	; 0x46
    27c8:	cmp	r3, #0
    27ca:	beq.w	333c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc1c>
      {
        write_length_ += len;
    27ce:	ldr	r3, [r6, #4]
    27d0:	adds	r3, #2
    27d2:	adds	r3, #2
    27d4:	adds	r3, #1
    27d6:	adds	r3, #1
    27d8:	adds	r3, #4
    27da:	adds	r3, #1
    27dc:	str	r3, [r6, #4]
          write8(0);
          break;
        default:
          break;
      }
    }
    27de:	add	sp, #144	; 0x90
    27e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    27e4:	movw	r2, #56321	; 0xdc01
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    27e8:	ldrb	r3, [r0, #0]
    27ea:	strh.w	r2, [sp, #30]
    27ee:	cmp	r3, #0
    27f0:	beq.w	31fe <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xade>
      {
        write_length_ += len;
    27f4:	ldr	r3, [r6, #4]
    27f6:	adds	r3, #2
    27f8:	adds	r3, #2
    27fa:	adds	r3, #1
    27fc:	adds	r3, #4
    27fe:	b.n	27d8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb8>
    2800:	movw	r2, #56322	; 0xdc02
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2804:	ldrb	r3, [r0, #0]
    2806:	strh.w	r2, [sp, #36]	; 0x24
    280a:	cmp	r3, #0
    280c:	beq.w	2f8e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x86e>
      {
        write_length_ += len;
    2810:	ldr	r3, [r6, #4]
    2812:	adds	r3, #2
    2814:	adds	r3, #2
    2816:	adds	r3, #1
    2818:	adds	r3, #2
    281a:	b.n	27d8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb8>
    281c:	movw	r2, #56323	; 0xdc03
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2820:	ldrb	r3, [r0, #0]
    2822:	strh.w	r2, [sp, #42]	; 0x2a
    2826:	cmp	r3, #0
    2828:	bne.n	2810 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf0>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    282a:	ldr	r3, [r0, #4]
    282c:	cmp	r3, #0
    282e:	beq.w	425c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b3c>
    2832:	ldr	r4, [pc, #760]	; (2b2c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x40c>)
    2834:	ldr	r0, [r4, #0]
        write_length_ += len;
    2836:	adds	r3, #2
    2838:	add.w	r5, r6, #1056	; 0x420
        
        const char * src=data;
    283c:	add.w	r9, sp, #42	; 0x2a
        //
        int pos = 0; // into data
    2840:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2844:	str	r3, [r6, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2846:	add.w	sl, r6, #544	; 0x220
    284a:	b.n	2856 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x136>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    284c:	cmp.w	r8, #1
    2850:	bgt.w	3892 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1172>
    2854:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2856:	subs	r7, r5, r0
    2858:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    285c:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    285e:	cmp	r7, r3
    2860:	it	ge
    2862:	movge	r7, r3
          memcpy(dst,src,to_copy);
    2864:	mov	r2, r7
          pos += to_copy;
    2866:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2868:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    286c:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    286e:	add	r9, r7
          dst += to_copy;
    2870:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2872:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2874:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2876:	bne.n	284c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x12c>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2878:	movs	r2, #60	; 0x3c
    287a:	mov.w	r1, #512	; 0x200
    287e:	mov	r0, sl
    2880:	bl	a270 <usb_mtp_send>
    2884:	cmp	r0, #0
    2886:	ble.n	2878 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x158>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2888:	str.w	sl, [r4]
    288c:	b.n	284c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x12c>
    288e:	movw	r2, #56324	; 0xdc04
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2892:	ldrb	r3, [r0, #0]
    2894:	strh.w	r2, [sp, #46]	; 0x2e
    2898:	cmp	r3, #0
    289a:	beq.w	38fe <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x11de>
      {
        write_length_ += len;
    289e:	ldr	r3, [r0, #4]
    28a0:	adds	r3, #2
    28a2:	adds	r3, #2
    28a4:	adds	r3, #1
    28a6:	adds	r3, #8
    28a8:	b.n	27d8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb8>
    28aa:	movw	r2, #56327	; 0xdc07
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    28ae:	ldrb	r3, [r0, #0]
    28b0:	strh.w	r2, [sp, #50]	; 0x32
    28b4:	cmp	r3, #0
    28b6:	bne.n	27ce <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xae>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    28b8:	ldr	r3, [r0, #4]
    28ba:	cmp	r3, #0
    28bc:	beq.w	436a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c4a>
    28c0:	ldr	r4, [pc, #616]	; (2b2c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x40c>)
    28c2:	ldr	r0, [r4, #0]
        write_length_ += len;
    28c4:	adds	r3, #2
    28c6:	add.w	r5, r6, #1056	; 0x420
        
        const char * src=data;
    28ca:	add.w	r9, sp, #50	; 0x32
        //
        int pos = 0; // into data
    28ce:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    28d2:	str	r3, [r6, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    28d4:	add.w	sl, r6, #544	; 0x220
    28d8:	b.n	28e4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c4>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    28da:	cmp.w	r8, #1
    28de:	bgt.w	3d1c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x15fc>
    28e2:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    28e4:	subs	r7, r5, r0
    28e6:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    28ea:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    28ec:	cmp	r7, r3
    28ee:	it	ge
    28f0:	movge	r7, r3
          memcpy(dst,src,to_copy);
    28f2:	mov	r2, r7
          pos += to_copy;
    28f4:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    28f6:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    28fa:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    28fc:	add	r9, r7
          dst += to_copy;
    28fe:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2900:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2902:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2904:	bne.n	28da <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1ba>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2906:	movs	r2, #60	; 0x3c
    2908:	mov.w	r1, #512	; 0x200
    290c:	mov	r0, sl
    290e:	bl	a270 <usb_mtp_send>
    2912:	cmp	r0, #0
    2914:	ble.n	2906 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1e6>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2916:	str.w	sl, [r4]
    291a:	b.n	28da <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1ba>
    291c:	movw	r2, #56328	; 0xdc08
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2920:	ldrb	r3, [r0, #0]
    2922:	strh.w	r2, [sp, #54]	; 0x36
    2926:	cmp	r3, #0
    2928:	bne.w	27ce <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xae>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    292c:	ldr	r3, [r0, #4]
    292e:	cmp	r3, #0
    2930:	beq.w	4276 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b56>
    2934:	ldr	r4, [pc, #500]	; (2b2c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x40c>)
    2936:	ldr	r0, [r4, #0]
        write_length_ += len;
    2938:	adds	r3, #2
    293a:	add.w	r5, r6, #1056	; 0x420
        
        const char * src=data;
    293e:	add.w	r9, sp, #54	; 0x36
        //
        int pos = 0; // into data
    2942:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2946:	str	r3, [r6, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2948:	add.w	sl, r6, #544	; 0x220
    294c:	b.n	2958 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x238>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    294e:	cmp.w	r8, #1
    2952:	bgt.w	2a94 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x374>
    2956:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2958:	subs	r7, r5, r0
    295a:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    295e:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2960:	cmp	r7, r3
    2962:	it	ge
    2964:	movge	r7, r3
          memcpy(dst,src,to_copy);
    2966:	mov	r2, r7
          pos += to_copy;
    2968:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    296a:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    296e:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    2970:	add	r9, r7
          dst += to_copy;
    2972:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2974:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2976:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2978:	bne.n	294e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x22e>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    297a:	movs	r2, #60	; 0x3c
    297c:	mov.w	r1, #512	; 0x200
    2980:	mov	r0, sl
    2982:	bl	a270 <usb_mtp_send>
    2986:	cmp	r0, #0
    2988:	ble.n	297a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x25a>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    298a:	str.w	sl, [r4]
    298e:	b.n	294e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x22e>
    2990:	movw	r2, #56329	; 0xdc09
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2994:	ldrb	r3, [r0, #0]
    2996:	strh.w	r2, [sp, #58]	; 0x3a
    299a:	cmp	r3, #0
    299c:	bne.w	27ce <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xae>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    29a0:	ldr	r3, [r0, #4]
    29a2:	cmp	r3, #0
    29a4:	beq.w	433c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c1c>
    29a8:	ldr	r4, [pc, #384]	; (2b2c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x40c>)
    29aa:	ldr	r0, [r4, #0]
        write_length_ += len;
    29ac:	adds	r3, #2
    29ae:	add.w	r5, r6, #1056	; 0x420
        
        const char * src=data;
    29b2:	add.w	r9, sp, #58	; 0x3a
        //
        int pos = 0; // into data
    29b6:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    29ba:	str	r3, [r6, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    29bc:	add.w	sl, r6, #544	; 0x220
    29c0:	b.n	29cc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x2ac>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    29c2:	cmp.w	r8, #1
    29c6:	bgt.w	2b72 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x452>
    29ca:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    29cc:	subs	r7, r5, r0
    29ce:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    29d2:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    29d4:	cmp	r7, r3
    29d6:	it	ge
    29d8:	movge	r7, r3
          memcpy(dst,src,to_copy);
    29da:	mov	r2, r7
          pos += to_copy;
    29dc:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    29de:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    29e2:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    29e4:	add	r9, r7
          dst += to_copy;
    29e6:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    29e8:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    29ea:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    29ec:	bne.n	29c2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x2a2>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    29ee:	movs	r2, #60	; 0x3c
    29f0:	mov.w	r1, #512	; 0x200
    29f4:	mov	r0, sl
    29f6:	bl	a270 <usb_mtp_send>
    29fa:	cmp	r0, #0
    29fc:	ble.n	29ee <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x2ce>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    29fe:	str.w	sl, [r4]
    2a02:	b.n	29c2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x2a2>
    2a04:	movw	r2, #56331	; 0xdc0b
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2a08:	ldrb	r3, [r0, #0]
    2a0a:	strh.w	r2, [sp, #62]	; 0x3e
    2a0e:	cmp	r3, #0
    2a10:	bne.w	27f4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xd4>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2a14:	ldr	r3, [r0, #4]
    2a16:	cmp	r3, #0
    2a18:	beq.w	4322 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c02>
    2a1c:	ldr	r4, [pc, #268]	; (2b2c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x40c>)
    2a1e:	ldr	r0, [r4, #0]
        write_length_ += len;
    2a20:	adds	r3, #2
    2a22:	add.w	r5, r6, #1056	; 0x420
        
        const char * src=data;
    2a26:	add.w	r9, sp, #62	; 0x3e
        //
        int pos = 0; // into data
    2a2a:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2a2e:	str	r3, [r6, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2a30:	add.w	sl, r6, #544	; 0x220
    2a34:	b.n	2a40 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x320>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2a36:	cmp.w	r8, #1
    2a3a:	bgt.w	2d82 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x662>
    2a3e:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2a40:	subs	r7, r5, r0
    2a42:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    2a46:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2a48:	cmp	r7, r3
    2a4a:	it	ge
    2a4c:	movge	r7, r3
          memcpy(dst,src,to_copy);
    2a4e:	mov	r2, r7
          pos += to_copy;
    2a50:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2a52:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2a56:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    2a58:	add	r9, r7
          dst += to_copy;
    2a5a:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2a5c:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2a5e:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2a60:	bne.n	2a36 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x316>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2a62:	movs	r2, #60	; 0x3c
    2a64:	mov.w	r1, #512	; 0x200
    2a68:	mov	r0, sl
    2a6a:	bl	a270 <usb_mtp_send>
    2a6e:	cmp	r0, #0
    2a70:	ble.n	2a62 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x342>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2a72:	str.w	sl, [r4]
    2a76:	b.n	2a36 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x316>
    2a78:	movw	r2, #56385	; 0xdc41
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2a7c:	ldrb	r3, [r0, #0]
    2a7e:	strh.w	r2, [sp, #66]	; 0x42
    2a82:	cmp	r3, #0
    2a84:	beq.w	35ae <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe8e>
      {
        write_length_ += len;
    2a88:	ldr	r3, [r0, #4]
    2a8a:	adds	r3, #2
    2a8c:	adds	r3, #2
    2a8e:	adds	r3, #1
    2a90:	adds	r3, #8
    2a92:	b.n	28a6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x186>
    2a94:	movw	r1, #65535	; 0xffff
    2a98:	ldrb	r2, [r6, #0]
    2a9a:	ldr	r3, [r6, #4]
    2a9c:	strh.w	r1, [sp, #52]	; 0x34
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2aa0:	cmp	r2, #0
    2aa2:	bne.w	27d2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb2>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2aa6:	cmp	r3, #0
    2aa8:	beq.w	4354 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c34>
    2aac:	ldr	r0, [r4, #0]
        write_length_ += len;
    2aae:	adds	r3, #2
        
        const char * src=data;
    2ab0:	add.w	r9, sp, #52	; 0x34
        //
        int pos = 0; // into data
    2ab4:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2ab8:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2abc:	str	r3, [r6, #4]
    2abe:	b.n	2ac8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3a8>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2ac0:	cmp.w	r8, #1
    2ac4:	bgt.n	2b00 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3e0>
    2ac6:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2ac8:	subs	r7, r5, r0
    2aca:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    2ace:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2ad0:	cmp	r7, r3
    2ad2:	it	ge
    2ad4:	movge	r7, r3
          memcpy(dst,src,to_copy);
    2ad6:	mov	r2, r7
          pos += to_copy;
    2ad8:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2ada:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2ade:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    2ae0:	add	r9, r7
          dst += to_copy;
    2ae2:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2ae4:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2ae6:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2ae8:	bne.n	2ac0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3a0>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2aea:	movs	r2, #60	; 0x3c
    2aec:	mov.w	r1, #512	; 0x200
    2af0:	mov	r0, sl
    2af2:	bl	a270 <usb_mtp_send>
    2af6:	cmp	r0, #0
    2af8:	ble.n	2aea <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3ca>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2afa:	str.w	sl, [r4]
    2afe:	b.n	2ac0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3a0>
    2b00:	movs	r1, #0
    2b02:	ldrb	r2, [r6, #0]
    2b04:	ldr	r3, [r6, #4]
    2b06:	strb.w	r1, [sp, #17]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2b0a:	cmp	r2, #0
    2b0c:	bne.w	27d4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb4>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2b10:	cmp	r3, #0
    2b12:	beq.w	4330 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c10>
    2b16:	ldr	r0, [r4, #0]
        write_length_ += len;
    2b18:	adds	r3, #1
        
        const char * src=data;
    2b1a:	add.w	r9, sp, #17
        //
        int pos = 0; // into data
    2b1e:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2b22:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2b26:	str	r3, [r6, #4]
    2b28:	b.n	2b3a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x41a>
    2b2a:	nop
    2b2c:	.word	0x20004204
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2b30:	cmp.w	r8, #0
    2b34:	bgt.w	3f2c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x180c>
    2b38:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2b3a:	subs	r7, r5, r0
    2b3c:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    2b40:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2b42:	cmp	r7, r3
    2b44:	it	ge
    2b46:	movge	r7, r3
          memcpy(dst,src,to_copy);
    2b48:	mov	r2, r7
          pos += to_copy;
    2b4a:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2b4c:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2b50:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    2b52:	add	r9, r7
          dst += to_copy;
    2b54:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2b56:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2b58:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2b5a:	bne.n	2b30 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x410>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2b5c:	movs	r2, #60	; 0x3c
    2b5e:	mov.w	r1, #512	; 0x200
    2b62:	mov	r0, sl
    2b64:	bl	a270 <usb_mtp_send>
    2b68:	cmp	r0, #0
    2b6a:	ble.n	2b5c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x43c>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2b6c:	str.w	sl, [r4]
    2b70:	b.n	2b30 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x410>
    2b72:	movw	r1, #65535	; 0xffff
    2b76:	ldrb	r2, [r6, #0]
    2b78:	ldr	r3, [r6, #4]
    2b7a:	strh.w	r1, [sp, #56]	; 0x38
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2b7e:	cmp	r2, #0
    2b80:	bne.w	27d2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb2>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2b84:	cmp	r3, #0
    2b86:	beq.w	445e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1d3e>
    2b8a:	ldr	r0, [r4, #0]
        write_length_ += len;
    2b8c:	adds	r3, #2
        
        const char * src=data;
    2b8e:	add.w	r9, sp, #56	; 0x38
        //
        int pos = 0; // into data
    2b92:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2b96:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2b9a:	str	r3, [r6, #4]
    2b9c:	b.n	2ba6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x486>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2b9e:	cmp.w	r8, #1
    2ba2:	bgt.n	2bde <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x4be>
    2ba4:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2ba6:	subs	r7, r5, r0
    2ba8:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    2bac:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2bae:	cmp	r7, r3
    2bb0:	it	ge
    2bb2:	movge	r7, r3
          memcpy(dst,src,to_copy);
    2bb4:	mov	r2, r7
          pos += to_copy;
    2bb6:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2bb8:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2bbc:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    2bbe:	add	r9, r7
          dst += to_copy;
    2bc0:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2bc2:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2bc4:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2bc6:	bne.n	2b9e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x47e>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2bc8:	movs	r2, #60	; 0x3c
    2bca:	mov.w	r1, #512	; 0x200
    2bce:	mov	r0, sl
    2bd0:	bl	a270 <usb_mtp_send>
    2bd4:	cmp	r0, #0
    2bd6:	ble.n	2bc8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x4a8>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2bd8:	str.w	sl, [r4]
    2bdc:	b.n	2b9e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x47e>
    2bde:	movs	r1, #0
    2be0:	ldrb	r2, [r6, #0]
    2be2:	ldr	r3, [r6, #4]
    2be4:	strb.w	r1, [sp, #20]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2be8:	cmp	r2, #0
    2bea:	bne.w	27d4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb4>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2bee:	cmp	r3, #0
    2bf0:	beq.w	4452 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1d32>
    2bf4:	ldr	r0, [r4, #0]
        write_length_ += len;
    2bf6:	adds	r3, #1
        
        const char * src=data;
    2bf8:	add.w	r9, sp, #20
        //
        int pos = 0; // into data
    2bfc:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2c00:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2c04:	str	r3, [r6, #4]
    2c06:	b.n	2c10 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x4f0>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2c08:	cmp.w	r8, #0
    2c0c:	bgt.n	2c48 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x528>
    2c0e:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2c10:	subs	r7, r5, r0
    2c12:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    2c16:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2c18:	cmp	r7, r3
    2c1a:	it	ge
    2c1c:	movge	r7, r3
          memcpy(dst,src,to_copy);
    2c1e:	mov	r2, r7
          pos += to_copy;
    2c20:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2c22:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2c26:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    2c28:	add	r9, r7
          dst += to_copy;
    2c2a:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2c2c:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2c2e:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2c30:	bne.n	2c08 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x4e8>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2c32:	movs	r2, #60	; 0x3c
    2c34:	mov.w	r1, #512	; 0x200
    2c38:	mov	r0, sl
    2c3a:	bl	a270 <usb_mtp_send>
    2c3e:	cmp	r0, #0
    2c40:	ble.n	2c32 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x512>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2c42:	str.w	sl, [r4]
    2c46:	b.n	2c08 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x4e8>
    2c48:	movs	r1, #0
    2c4a:	ldrb	r2, [r6, #0]
    2c4c:	ldr	r3, [r6, #4]
    2c4e:	strb.w	r1, [sp, #19]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2c52:	cmp	r2, #0
    2c54:	bne.w	27d6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb6>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2c58:	cmp	r3, #0
    2c5a:	beq.w	4446 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1d26>
    2c5e:	ldr	r0, [r4, #0]
        write_length_ += len;
    2c60:	adds	r3, #1
        
        const char * src=data;
    2c62:	add.w	r9, sp, #19
        //
        int pos = 0; // into data
    2c66:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2c6a:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2c6e:	str	r3, [r6, #4]
    2c70:	b.n	2c7a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x55a>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2c72:	cmp.w	r8, #0
    2c76:	bgt.n	2cb2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x592>
    2c78:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2c7a:	subs	r7, r5, r0
    2c7c:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    2c80:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2c82:	cmp	r7, r3
    2c84:	it	ge
    2c86:	movge	r7, r3
          memcpy(dst,src,to_copy);
    2c88:	mov	r2, r7
          pos += to_copy;
    2c8a:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2c8c:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2c90:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    2c92:	add	r9, r7
          dst += to_copy;
    2c94:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2c96:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2c98:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2c9a:	bne.n	2c72 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x552>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2c9c:	movs	r2, #60	; 0x3c
    2c9e:	mov.w	r1, #512	; 0x200
    2ca2:	mov	r0, sl
    2ca4:	bl	a270 <usb_mtp_send>
    2ca8:	cmp	r0, #0
    2caa:	ble.n	2c9c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x57c>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2cac:	str.w	sl, [r4]
    2cb0:	b.n	2c72 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x552>
    2cb2:	movs	r1, #0
    2cb4:	ldrb	r2, [r6, #0]
    2cb6:	ldr	r3, [r6, #4]
    2cb8:	str	r1, [sp, #100]	; 0x64
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2cba:	cmp	r2, #0
    2cbc:	bne.w	27d8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2cc0:	cmp	r3, #0
    2cc2:	beq.w	443a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1d1a>
    2cc6:	ldr	r0, [r4, #0]
        write_length_ += len;
    2cc8:	adds	r3, #4
        
        const char * src=data;
    2cca:	add.w	r9, sp, #100	; 0x64
        //
        int pos = 0; // into data
    2cce:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2cd2:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2cd6:	str	r3, [r6, #4]
    2cd8:	b.n	2ce2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x5c2>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2cda:	cmp.w	r8, #3
    2cde:	bgt.n	2d1a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x5fa>
    2ce0:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2ce2:	subs	r7, r5, r0
    2ce4:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    2ce8:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2cea:	cmp	r7, r3
    2cec:	it	ge
    2cee:	movge	r7, r3
          memcpy(dst,src,to_copy);
    2cf0:	mov	r2, r7
          pos += to_copy;
    2cf2:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2cf4:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2cf8:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    2cfa:	add	r9, r7
          dst += to_copy;
    2cfc:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2cfe:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2d00:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2d02:	bne.n	2cda <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x5ba>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2d04:	movs	r2, #60	; 0x3c
    2d06:	mov.w	r1, #512	; 0x200
    2d0a:	mov	r0, sl
    2d0c:	bl	a270 <usb_mtp_send>
    2d10:	cmp	r0, #0
    2d12:	ble.n	2d04 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x5e4>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2d14:	str.w	sl, [r4]
    2d18:	b.n	2cda <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x5ba>
    2d1a:	movs	r1, #0
    2d1c:	ldrb	r2, [r6, #0]
    2d1e:	ldr	r3, [r6, #4]
    2d20:	strb.w	r1, [sp, #18]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2d24:	cmp	r2, #0
    2d26:	bne.w	27da <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xba>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2d2a:	cmp	r3, #0
    2d2c:	beq.w	4316 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1bf6>
    2d30:	ldr	r0, [r4, #0]
        write_length_ += len;
    2d32:	adds	r3, #1
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2d34:	add.w	r9, r6, #544	; 0x220
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    2d38:	add.w	r8, sp, #18
        //
        int pos = 0; // into data
    2d3c:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2d3e:	str	r3, [r6, #4]
    2d40:	b.n	2d4a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x62a>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2d42:	cmp	r7, #0
    2d44:	bgt.w	27de <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbe>
    2d48:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2d4a:	subs	r6, r5, r0
    2d4c:	rsb	r3, r7, #1
          memcpy(dst,src,to_copy);
    2d50:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2d52:	cmp	r6, r3
    2d54:	it	ge
    2d56:	movge	r6, r3
          memcpy(dst,src,to_copy);
    2d58:	mov	r2, r6
          pos += to_copy;
    2d5a:	add	r7, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2d5c:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2d60:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    2d62:	add	r8, r6
          dst += to_copy;
    2d64:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2d66:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2d68:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2d6a:	bne.n	2d42 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x622>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2d6c:	movs	r2, #60	; 0x3c
    2d6e:	mov.w	r1, #512	; 0x200
    2d72:	mov	r0, r9
    2d74:	bl	a270 <usb_mtp_send>
    2d78:	cmp	r0, #0
    2d7a:	ble.n	2d6c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x64c>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2d7c:	str.w	r9, [r4]
    2d80:	b.n	2d42 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x622>
    2d82:	movs	r1, #6
    2d84:	ldrb	r2, [r6, #0]
    2d86:	ldr	r3, [r6, #4]
    2d88:	strh.w	r1, [sp, #60]	; 0x3c
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2d8c:	cmp	r2, #0
    2d8e:	bne.w	27f8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xd8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2d92:	cmp	r3, #0
    2d94:	beq.w	442e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1d0e>
    2d98:	ldr	r0, [r4, #0]
        write_length_ += len;
    2d9a:	adds	r3, #2
        
        const char * src=data;
    2d9c:	add.w	r9, sp, #60	; 0x3c
        //
        int pos = 0; // into data
    2da0:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2da4:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2da8:	str	r3, [r6, #4]
    2daa:	b.n	2db4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x694>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2dac:	cmp.w	r8, #1
    2db0:	bgt.n	2dec <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6cc>
    2db2:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2db4:	subs	r7, r5, r0
    2db6:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    2dba:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2dbc:	cmp	r7, r3
    2dbe:	it	ge
    2dc0:	movge	r7, r3
          memcpy(dst,src,to_copy);
    2dc2:	mov	r2, r7
          pos += to_copy;
    2dc4:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2dc6:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2dca:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    2dcc:	add	r9, r7
          dst += to_copy;
    2dce:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2dd0:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2dd2:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2dd4:	bne.n	2dac <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x68c>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2dd6:	movs	r2, #60	; 0x3c
    2dd8:	mov.w	r1, #512	; 0x200
    2ddc:	mov	r0, sl
    2dde:	bl	a270 <usb_mtp_send>
    2de2:	cmp	r0, #0
    2de4:	ble.n	2dd6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b6>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2de6:	str.w	sl, [r4]
    2dea:	b.n	2dac <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x68c>
    2dec:	movs	r1, #0
    2dee:	ldrb	r2, [r6, #0]
    2df0:	ldr	r3, [r6, #4]
    2df2:	strb.w	r1, [sp, #22]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2df6:	cmp	r2, #0
    2df8:	bne.w	27fa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xda>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2dfc:	cmp	r3, #0
    2dfe:	beq.w	4422 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1d02>
    2e02:	ldr	r0, [r4, #0]
        write_length_ += len;
    2e04:	adds	r3, #1
        
        const char * src=data;
    2e06:	add.w	r9, sp, #22
        //
        int pos = 0; // into data
    2e0a:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2e0e:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2e12:	str	r3, [r6, #4]
    2e14:	b.n	2e1e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6fe>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2e16:	cmp.w	r8, #0
    2e1a:	bgt.n	2e56 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x736>
    2e1c:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2e1e:	subs	r7, r5, r0
    2e20:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    2e24:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2e26:	cmp	r7, r3
    2e28:	it	ge
    2e2a:	movge	r7, r3
          memcpy(dst,src,to_copy);
    2e2c:	mov	r2, r7
          pos += to_copy;
    2e2e:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2e30:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2e34:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    2e36:	add	r9, r7
          dst += to_copy;
    2e38:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2e3a:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2e3c:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2e3e:	bne.n	2e16 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6f6>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2e40:	movs	r2, #60	; 0x3c
    2e42:	mov.w	r1, #512	; 0x200
    2e46:	mov	r0, sl
    2e48:	bl	a270 <usb_mtp_send>
    2e4c:	cmp	r0, #0
    2e4e:	ble.n	2e40 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x720>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2e50:	str.w	sl, [r4]
    2e54:	b.n	2e16 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6f6>
    2e56:	movs	r1, #0
    2e58:	ldrb	r2, [r6, #0]
    2e5a:	ldr	r3, [r6, #4]
    2e5c:	str	r1, [sp, #108]	; 0x6c
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2e5e:	cmp	r2, #0
    2e60:	bne.w	27fc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xdc>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2e64:	cmp	r3, #0
    2e66:	beq.w	4416 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1cf6>
    2e6a:	ldr	r0, [r4, #0]
        write_length_ += len;
    2e6c:	adds	r3, #4
        
        const char * src=data;
    2e6e:	add.w	r9, sp, #108	; 0x6c
        //
        int pos = 0; // into data
    2e72:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2e76:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2e7a:	str	r3, [r6, #4]
    2e7c:	b.n	2e86 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x766>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2e7e:	cmp.w	r8, #3
    2e82:	bgt.n	2ebe <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x79e>
    2e84:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2e86:	subs	r7, r5, r0
    2e88:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    2e8c:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2e8e:	cmp	r7, r3
    2e90:	it	ge
    2e92:	movge	r7, r3
          memcpy(dst,src,to_copy);
    2e94:	mov	r2, r7
          pos += to_copy;
    2e96:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2e98:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2e9c:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    2e9e:	add	r9, r7
          dst += to_copy;
    2ea0:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2ea2:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2ea4:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2ea6:	bne.n	2e7e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x75e>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2ea8:	movs	r2, #60	; 0x3c
    2eaa:	mov.w	r1, #512	; 0x200
    2eae:	mov	r0, sl
    2eb0:	bl	a270 <usb_mtp_send>
    2eb4:	cmp	r0, #0
    2eb6:	ble.n	2ea8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x788>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2eb8:	str.w	sl, [r4]
    2ebc:	b.n	2e7e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x75e>
    2ebe:	movs	r1, #0
    2ec0:	ldrb	r2, [r6, #0]
    2ec2:	ldr	r3, [r6, #4]
    2ec4:	str	r1, [sp, #104]	; 0x68
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2ec6:	cmp	r2, #0
    2ec8:	bne.w	27d8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2ecc:	cmp	r3, #0
    2ece:	beq.w	440a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1cea>
    2ed2:	ldr	r0, [r4, #0]
        write_length_ += len;
    2ed4:	adds	r3, #4
        
        const char * src=data;
    2ed6:	add.w	r9, sp, #104	; 0x68
        //
        int pos = 0; // into data
    2eda:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2ede:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2ee2:	str	r3, [r6, #4]
    2ee4:	b.n	2eee <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x7ce>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2ee6:	cmp.w	r8, #3
    2eea:	bgt.n	2f26 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x806>
    2eec:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2eee:	subs	r7, r5, r0
    2ef0:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    2ef4:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2ef6:	cmp	r7, r3
    2ef8:	it	ge
    2efa:	movge	r7, r3
          memcpy(dst,src,to_copy);
    2efc:	mov	r2, r7
          pos += to_copy;
    2efe:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2f00:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2f04:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    2f06:	add	r9, r7
          dst += to_copy;
    2f08:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2f0a:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2f0c:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2f0e:	bne.n	2ee6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x7c6>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2f10:	movs	r2, #60	; 0x3c
    2f12:	mov.w	r1, #512	; 0x200
    2f16:	mov	r0, sl
    2f18:	bl	a270 <usb_mtp_send>
    2f1c:	cmp	r0, #0
    2f1e:	ble.n	2f10 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x7f0>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2f20:	str.w	sl, [r4]
    2f24:	b.n	2ee6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x7c6>
    2f26:	movs	r1, #0
    2f28:	ldrb	r2, [r6, #0]
    2f2a:	ldr	r3, [r6, #4]
    2f2c:	strb.w	r1, [sp, #21]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2f30:	cmp	r2, #0
    2f32:	bne.w	27da <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xba>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2f36:	cmp	r3, #0
    2f38:	beq.w	43cc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1cac>
    2f3c:	ldr	r0, [r4, #0]
        write_length_ += len;
    2f3e:	adds	r3, #1
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2f40:	add.w	r9, r6, #544	; 0x220
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    2f44:	add.w	r8, sp, #21
        //
        int pos = 0; // into data
    2f48:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2f4a:	str	r3, [r6, #4]
    2f4c:	b.n	2f56 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x836>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2f4e:	cmp	r7, #0
    2f50:	bgt.w	27de <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbe>
    2f54:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2f56:	subs	r6, r5, r0
    2f58:	rsb	r3, r7, #1
          memcpy(dst,src,to_copy);
    2f5c:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2f5e:	cmp	r6, r3
    2f60:	it	ge
    2f62:	movge	r6, r3
          memcpy(dst,src,to_copy);
    2f64:	mov	r2, r6
          pos += to_copy;
    2f66:	add	r7, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2f68:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2f6c:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    2f6e:	add	r8, r6
          dst += to_copy;
    2f70:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2f72:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2f74:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2f76:	bne.n	2f4e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x82e>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2f78:	movs	r2, #60	; 0x3c
    2f7a:	mov.w	r1, #512	; 0x200
    2f7e:	mov	r0, r9
    2f80:	bl	a270 <usb_mtp_send>
    2f84:	cmp	r0, #0
    2f86:	ble.n	2f78 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x858>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2f88:	str.w	r9, [r4]
    2f8c:	b.n	2f4e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x82e>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2f8e:	ldr	r3, [r0, #4]
    2f90:	cmp	r3, #0
    2f92:	beq.w	43fc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1cdc>
    2f96:	ldr	r4, [pc, #756]	; (328c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb6c>)
    2f98:	ldr	r0, [r4, #0]
        write_length_ += len;
    2f9a:	adds	r3, #2
    2f9c:	add.w	r5, r6, #1056	; 0x420
        
        const char * src=data;
    2fa0:	add.w	r9, sp, #36	; 0x24
        //
        int pos = 0; // into data
    2fa4:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2fa8:	str	r3, [r6, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2faa:	add.w	sl, r6, #544	; 0x220
    2fae:	b.n	2fb8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x898>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2fb0:	cmp.w	r8, #1
    2fb4:	bgt.n	2ff0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x8d0>
    2fb6:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2fb8:	subs	r7, r5, r0
    2fba:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    2fbe:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2fc0:	cmp	r7, r3
    2fc2:	it	ge
    2fc4:	movge	r7, r3
          memcpy(dst,src,to_copy);
    2fc6:	mov	r2, r7
          pos += to_copy;
    2fc8:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2fca:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2fce:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    2fd0:	add	r9, r7
          dst += to_copy;
    2fd2:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2fd4:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2fd6:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2fd8:	bne.n	2fb0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x890>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2fda:	movs	r2, #60	; 0x3c
    2fdc:	mov.w	r1, #512	; 0x200
    2fe0:	mov	r0, sl
    2fe2:	bl	a270 <usb_mtp_send>
    2fe6:	cmp	r0, #0
    2fe8:	ble.n	2fda <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x8ba>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2fea:	str.w	sl, [r4]
    2fee:	b.n	2fb0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x890>
    2ff0:	movs	r1, #4
    2ff2:	ldrb	r2, [r6, #0]
    2ff4:	ldr	r3, [r6, #4]
    2ff6:	strh.w	r1, [sp, #34]	; 0x22
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2ffa:	cmp	r2, #0
    2ffc:	bne.w	2814 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf4>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3000:	cmp	r3, #0
    3002:	beq.w	43f0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1cd0>
    3006:	ldr	r0, [r4, #0]
        write_length_ += len;
    3008:	adds	r3, #2
        
        const char * src=data;
    300a:	add.w	r9, sp, #34	; 0x22
        //
        int pos = 0; // into data
    300e:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3012:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3016:	str	r3, [r6, #4]
    3018:	b.n	3022 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x902>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    301a:	cmp.w	r8, #1
    301e:	bgt.n	305a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x93a>
    3020:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3022:	subs	r7, r5, r0
    3024:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    3028:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    302a:	cmp	r7, r3
    302c:	it	ge
    302e:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3030:	mov	r2, r7
          pos += to_copy;
    3032:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3034:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3038:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    303a:	add	r9, r7
          dst += to_copy;
    303c:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    303e:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3040:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3042:	bne.n	301a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x8fa>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3044:	movs	r2, #60	; 0x3c
    3046:	mov.w	r1, #512	; 0x200
    304a:	mov	r0, sl
    304c:	bl	a270 <usb_mtp_send>
    3050:	cmp	r0, #0
    3052:	ble.n	3044 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x924>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3054:	str.w	sl, [r4]
    3058:	b.n	301a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x8fa>
    305a:	movs	r1, #0
    305c:	ldrb	r2, [r6, #0]
    305e:	ldr	r3, [r6, #4]
    3060:	strb.w	r1, [sp, #7]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3064:	cmp	r2, #0
    3066:	bne.w	2816 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf6>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    306a:	cmp	r3, #0
    306c:	beq.w	43e4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1cc4>
    3070:	ldr	r0, [r4, #0]
        write_length_ += len;
    3072:	adds	r3, #1
        
        const char * src=data;
    3074:	add.w	r9, sp, #7
        //
        int pos = 0; // into data
    3078:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    307c:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3080:	str	r3, [r6, #4]
    3082:	b.n	308c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x96c>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3084:	cmp.w	r8, #0
    3088:	bgt.n	30c4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x9a4>
    308a:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    308c:	subs	r7, r5, r0
    308e:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    3092:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3094:	cmp	r7, r3
    3096:	it	ge
    3098:	movge	r7, r3
          memcpy(dst,src,to_copy);
    309a:	mov	r2, r7
          pos += to_copy;
    309c:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    309e:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    30a2:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    30a4:	add	r9, r7
          dst += to_copy;
    30a6:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    30a8:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    30aa:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    30ac:	bne.n	3084 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x964>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    30ae:	movs	r2, #60	; 0x3c
    30b0:	mov.w	r1, #512	; 0x200
    30b4:	mov	r0, sl
    30b6:	bl	a270 <usb_mtp_send>
    30ba:	cmp	r0, #0
    30bc:	ble.n	30ae <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x98e>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    30be:	str.w	sl, [r4]
    30c2:	b.n	3084 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x964>
    30c4:	movs	r1, #0
    30c6:	ldrb	r2, [r6, #0]
    30c8:	ldr	r3, [r6, #4]
    30ca:	strh.w	r1, [sp, #32]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    30ce:	cmp	r2, #0
    30d0:	bne.w	2818 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    30d4:	cmp	r3, #0
    30d6:	beq.w	43d8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1cb8>
    30da:	ldr	r0, [r4, #0]
        write_length_ += len;
    30dc:	adds	r3, #2
        
        const char * src=data;
    30de:	add.w	r9, sp, #32
        //
        int pos = 0; // into data
    30e2:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    30e6:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    30ea:	str	r3, [r6, #4]
    30ec:	b.n	30f6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x9d6>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    30ee:	cmp.w	r8, #1
    30f2:	bgt.n	312e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xa0e>
    30f4:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    30f6:	subs	r7, r5, r0
    30f8:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    30fc:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    30fe:	cmp	r7, r3
    3100:	it	ge
    3102:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3104:	mov	r2, r7
          pos += to_copy;
    3106:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3108:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    310c:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    310e:	add	r9, r7
          dst += to_copy;
    3110:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3112:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3114:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3116:	bne.n	30ee <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x9ce>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3118:	movs	r2, #60	; 0x3c
    311a:	mov.w	r1, #512	; 0x200
    311e:	mov	r0, sl
    3120:	bl	a270 <usb_mtp_send>
    3124:	cmp	r0, #0
    3126:	ble.n	3118 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x9f8>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3128:	str.w	sl, [r4]
    312c:	b.n	30ee <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x9ce>
    312e:	movs	r1, #0
    3130:	ldrb	r2, [r6, #0]
    3132:	ldr	r3, [r6, #4]
    3134:	str	r1, [sp, #80]	; 0x50
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3136:	cmp	r2, #0
    3138:	bne.w	27d8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    313c:	cmp	r3, #0
    313e:	beq.w	430a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1bea>
    3142:	ldr	r0, [r4, #0]
        write_length_ += len;
    3144:	adds	r3, #4
        
        const char * src=data;
    3146:	add.w	r9, sp, #80	; 0x50
        //
        int pos = 0; // into data
    314a:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    314e:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3152:	str	r3, [r6, #4]
    3154:	b.n	315e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xa3e>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3156:	cmp.w	r8, #3
    315a:	bgt.n	3196 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xa76>
    315c:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    315e:	subs	r7, r5, r0
    3160:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    3164:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3166:	cmp	r7, r3
    3168:	it	ge
    316a:	movge	r7, r3
          memcpy(dst,src,to_copy);
    316c:	mov	r2, r7
          pos += to_copy;
    316e:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3170:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3174:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3176:	add	r9, r7
          dst += to_copy;
    3178:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    317a:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    317c:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    317e:	bne.n	3156 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xa36>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3180:	movs	r2, #60	; 0x3c
    3182:	mov.w	r1, #512	; 0x200
    3186:	mov	r0, sl
    3188:	bl	a270 <usb_mtp_send>
    318c:	cmp	r0, #0
    318e:	ble.n	3180 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xa60>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3190:	str.w	sl, [r4]
    3194:	b.n	3156 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xa36>
    3196:	movs	r1, #0
    3198:	ldrb	r2, [r6, #0]
    319a:	ldr	r3, [r6, #4]
    319c:	strb.w	r1, [sp, #6]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    31a0:	cmp	r2, #0
    31a2:	bne.w	27da <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xba>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    31a6:	cmp	r3, #0
    31a8:	beq.w	42fe <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1bde>
    31ac:	ldr	r0, [r4, #0]
        write_length_ += len;
    31ae:	adds	r3, #1
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    31b0:	add.w	r9, r6, #544	; 0x220
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    31b4:	add.w	r8, sp, #6
        //
        int pos = 0; // into data
    31b8:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    31ba:	str	r3, [r6, #4]
    31bc:	b.n	31c6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xaa6>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    31be:	cmp	r7, #0
    31c0:	bgt.w	27de <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbe>
    31c4:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    31c6:	subs	r6, r5, r0
    31c8:	rsb	r3, r7, #1
          memcpy(dst,src,to_copy);
    31cc:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    31ce:	cmp	r6, r3
    31d0:	it	ge
    31d2:	movge	r6, r3
          memcpy(dst,src,to_copy);
    31d4:	mov	r2, r6
          pos += to_copy;
    31d6:	add	r7, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    31d8:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    31dc:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    31de:	add	r8, r6
          dst += to_copy;
    31e0:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    31e2:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    31e4:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    31e6:	bne.n	31be <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xa9e>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    31e8:	movs	r2, #60	; 0x3c
    31ea:	mov.w	r1, #512	; 0x200
    31ee:	mov	r0, r9
    31f0:	bl	a270 <usb_mtp_send>
    31f4:	cmp	r0, #0
    31f6:	ble.n	31e8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xac8>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    31f8:	str.w	r9, [r4]
    31fc:	b.n	31be <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xa9e>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    31fe:	ldr	r3, [r0, #4]
    3200:	cmp	r3, #0
    3202:	beq.w	43be <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c9e>
    3206:	ldr	r4, [pc, #132]	; (328c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb6c>)
    3208:	ldr	r0, [r4, #0]
        write_length_ += len;
    320a:	adds	r3, #2
    320c:	add.w	r5, r6, #1056	; 0x420
        
        const char * src=data;
    3210:	add.w	r9, sp, #30
        //
        int pos = 0; // into data
    3214:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3218:	str	r3, [r6, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    321a:	add.w	sl, r6, #544	; 0x220
    321e:	b.n	3228 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb08>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3220:	cmp.w	r8, #1
    3224:	bgt.n	3260 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb40>
    3226:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3228:	subs	r7, r5, r0
    322a:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    322e:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3230:	cmp	r7, r3
    3232:	it	ge
    3234:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3236:	mov	r2, r7
          pos += to_copy;
    3238:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    323a:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    323e:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3240:	add	r9, r7
          dst += to_copy;
    3242:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3244:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3246:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3248:	bne.n	3220 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb00>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    324a:	movs	r2, #60	; 0x3c
    324c:	mov.w	r1, #512	; 0x200
    3250:	mov	r0, sl
    3252:	bl	a270 <usb_mtp_send>
    3256:	cmp	r0, #0
    3258:	ble.n	324a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb2a>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    325a:	str.w	sl, [r4]
    325e:	b.n	3220 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb00>
    3260:	movs	r1, #6
    3262:	ldrb	r2, [r6, #0]
    3264:	ldr	r3, [r6, #4]
    3266:	strh.w	r1, [sp, #28]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    326a:	cmp	r2, #0
    326c:	bne.w	27f8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xd8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3270:	cmp	r3, #0
    3272:	beq.w	43b2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c92>
    3276:	ldr	r0, [r4, #0]
        write_length_ += len;
    3278:	adds	r3, #2
        
        const char * src=data;
    327a:	add.w	r9, sp, #28
        //
        int pos = 0; // into data
    327e:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3282:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3286:	str	r3, [r6, #4]
    3288:	b.n	3298 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb78>
    328a:	nop
    328c:	.word	0x20004204
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3290:	cmp.w	r8, #1
    3294:	bgt.n	32d0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbb0>
    3296:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3298:	subs	r7, r5, r0
    329a:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    329e:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    32a0:	cmp	r7, r3
    32a2:	it	ge
    32a4:	movge	r7, r3
          memcpy(dst,src,to_copy);
    32a6:	mov	r2, r7
          pos += to_copy;
    32a8:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    32aa:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    32ae:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    32b0:	add	r9, r7
          dst += to_copy;
    32b2:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    32b4:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    32b6:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    32b8:	bne.n	3290 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb70>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    32ba:	movs	r2, #60	; 0x3c
    32bc:	mov.w	r1, #512	; 0x200
    32c0:	mov	r0, sl
    32c2:	bl	a270 <usb_mtp_send>
    32c6:	cmp	r0, #0
    32c8:	ble.n	32ba <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb9a>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    32ca:	str.w	sl, [r4]
    32ce:	b.n	3290 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb70>
    32d0:	movs	r1, #0
    32d2:	ldrb	r2, [r6, #0]
    32d4:	ldr	r3, [r6, #4]
    32d6:	strb.w	r1, [sp, #5]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    32da:	cmp	r2, #0
    32dc:	bne.w	27fa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xda>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    32e0:	cmp	r3, #0
    32e2:	beq.w	42aa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b8a>
    32e6:	ldr	r0, [r4, #0]
        write_length_ += len;
    32e8:	adds	r3, #1
        
        const char * src=data;
    32ea:	add.w	r9, sp, #5
        //
        int pos = 0; // into data
    32ee:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    32f2:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    32f6:	str	r3, [r6, #4]
    32f8:	b.n	3304 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbe4>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    32fa:	cmp.w	r8, #0
    32fe:	bgt.w	4066 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1946>
    3302:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3304:	subs	r7, r5, r0
    3306:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    330a:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    330c:	cmp	r7, r3
    330e:	it	ge
    3310:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3312:	mov	r2, r7
          pos += to_copy;
    3314:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3316:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    331a:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    331c:	add	r9, r7
          dst += to_copy;
    331e:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3320:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3322:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3324:	bne.n	32fa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbda>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3326:	movs	r2, #60	; 0x3c
    3328:	mov.w	r1, #512	; 0x200
    332c:	mov	r0, sl
    332e:	bl	a270 <usb_mtp_send>
    3332:	cmp	r0, #0
    3334:	ble.n	3326 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc06>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3336:	str.w	sl, [r4]
    333a:	b.n	32fa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbda>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    333c:	ldr	r3, [r0, #4]
    333e:	cmp	r3, #0
    3340:	beq.w	42da <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1bba>
    3344:	ldr	r4, [pc, #756]	; (363c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf1c>)
    3346:	ldr	r0, [r4, #0]
        write_length_ += len;
    3348:	adds	r3, #2
    334a:	add.w	r5, r6, #1056	; 0x420
        
        const char * src=data;
    334e:	add.w	r9, sp, #70	; 0x46
        //
        int pos = 0; // into data
    3352:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3356:	str	r3, [r6, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3358:	add.w	sl, r6, #544	; 0x220
    335c:	b.n	3366 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc46>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    335e:	cmp.w	r8, #1
    3362:	bgt.n	339e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc7e>
    3364:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3366:	subs	r7, r5, r0
    3368:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    336c:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    336e:	cmp	r7, r3
    3370:	it	ge
    3372:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3374:	mov	r2, r7
          pos += to_copy;
    3376:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3378:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    337c:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    337e:	add	r9, r7
          dst += to_copy;
    3380:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3382:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3384:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3386:	bne.n	335e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc3e>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3388:	movs	r2, #60	; 0x3c
    338a:	mov.w	r1, #512	; 0x200
    338e:	mov	r0, sl
    3390:	bl	a270 <usb_mtp_send>
    3394:	cmp	r0, #0
    3396:	ble.n	3388 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc68>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3398:	str.w	sl, [r4]
    339c:	b.n	335e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc3e>
    339e:	movw	r1, #65535	; 0xffff
    33a2:	ldrb	r2, [r6, #0]
    33a4:	ldr	r3, [r6, #4]
    33a6:	strh.w	r1, [sp, #68]	; 0x44
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    33aa:	cmp	r2, #0
    33ac:	bne.w	27d2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb2>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    33b0:	cmp	r3, #0
    33b2:	beq.w	42ce <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1bae>
    33b6:	ldr	r0, [r4, #0]
        write_length_ += len;
    33b8:	adds	r3, #2
        
        const char * src=data;
    33ba:	add.w	r9, sp, #68	; 0x44
        //
        int pos = 0; // into data
    33be:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    33c2:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    33c6:	str	r3, [r6, #4]
    33c8:	b.n	33d2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xcb2>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    33ca:	cmp.w	r8, #1
    33ce:	bgt.n	340a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xcea>
    33d0:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    33d2:	subs	r7, r5, r0
    33d4:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    33d8:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    33da:	cmp	r7, r3
    33dc:	it	ge
    33de:	movge	r7, r3
          memcpy(dst,src,to_copy);
    33e0:	mov	r2, r7
          pos += to_copy;
    33e2:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    33e4:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    33e8:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    33ea:	add	r9, r7
          dst += to_copy;
    33ec:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    33ee:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    33f0:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    33f2:	bne.n	33ca <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xcaa>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    33f4:	movs	r2, #60	; 0x3c
    33f6:	mov.w	r1, #512	; 0x200
    33fa:	mov	r0, sl
    33fc:	bl	a270 <usb_mtp_send>
    3400:	cmp	r0, #0
    3402:	ble.n	33f4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xcd4>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3404:	str.w	sl, [r4]
    3408:	b.n	33ca <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xcaa>
    340a:	movs	r1, #0
    340c:	ldrb	r2, [r6, #0]
    340e:	ldr	r3, [r6, #4]
    3410:	strb.w	r1, [sp, #27]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3414:	cmp	r2, #0
    3416:	bne.w	27d4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb4>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    341a:	cmp	r3, #0
    341c:	beq.w	42c2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1ba2>
    3420:	ldr	r0, [r4, #0]
        write_length_ += len;
    3422:	adds	r3, #1
        
        const char * src=data;
    3424:	add.w	r9, sp, #27
        //
        int pos = 0; // into data
    3428:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    342c:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3430:	str	r3, [r6, #4]
    3432:	b.n	343c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xd1c>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3434:	cmp.w	r8, #0
    3438:	bgt.n	3474 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xd54>
    343a:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    343c:	subs	r7, r5, r0
    343e:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    3442:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3444:	cmp	r7, r3
    3446:	it	ge
    3448:	movge	r7, r3
          memcpy(dst,src,to_copy);
    344a:	mov	r2, r7
          pos += to_copy;
    344c:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    344e:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3452:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3454:	add	r9, r7
          dst += to_copy;
    3456:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3458:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    345a:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    345c:	bne.n	3434 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xd14>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    345e:	movs	r2, #60	; 0x3c
    3460:	mov.w	r1, #512	; 0x200
    3464:	mov	r0, sl
    3466:	bl	a270 <usb_mtp_send>
    346a:	cmp	r0, #0
    346c:	ble.n	345e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xd3e>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    346e:	str.w	sl, [r4]
    3472:	b.n	3434 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xd14>
    3474:	movs	r1, #0
    3476:	ldrb	r2, [r6, #0]
    3478:	ldr	r3, [r6, #4]
    347a:	strb.w	r1, [sp, #26]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    347e:	cmp	r2, #0
    3480:	bne.w	27d6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb6>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3484:	cmp	r3, #0
    3486:	beq.w	42b6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b96>
    348a:	ldr	r0, [r4, #0]
        write_length_ += len;
    348c:	adds	r3, #1
        
        const char * src=data;
    348e:	add.w	r9, sp, #26
        //
        int pos = 0; // into data
    3492:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3496:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    349a:	str	r3, [r6, #4]
    349c:	b.n	34a6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xd86>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    349e:	cmp.w	r8, #0
    34a2:	bgt.n	34de <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xdbe>
    34a4:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    34a6:	subs	r7, r5, r0
    34a8:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    34ac:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    34ae:	cmp	r7, r3
    34b0:	it	ge
    34b2:	movge	r7, r3
          memcpy(dst,src,to_copy);
    34b4:	mov	r2, r7
          pos += to_copy;
    34b6:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    34b8:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    34bc:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    34be:	add	r9, r7
          dst += to_copy;
    34c0:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    34c2:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    34c4:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    34c6:	bne.n	349e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xd7e>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    34c8:	movs	r2, #60	; 0x3c
    34ca:	mov.w	r1, #512	; 0x200
    34ce:	mov	r0, sl
    34d0:	bl	a270 <usb_mtp_send>
    34d4:	cmp	r0, #0
    34d6:	ble.n	34c8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xda8>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    34d8:	str.w	sl, [r4]
    34dc:	b.n	349e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xd7e>
    34de:	movs	r1, #0
    34e0:	ldrb	r2, [r6, #0]
    34e2:	ldr	r3, [r6, #4]
    34e4:	str	r1, [sp, #116]	; 0x74
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    34e6:	cmp	r2, #0
    34e8:	bne.w	27d8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    34ec:	cmp	r3, #0
    34ee:	beq.w	42f2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1bd2>
    34f2:	ldr	r0, [r4, #0]
        write_length_ += len;
    34f4:	adds	r3, #4
        
        const char * src=data;
    34f6:	add.w	r9, sp, #116	; 0x74
        //
        int pos = 0; // into data
    34fa:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    34fe:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3502:	str	r3, [r6, #4]
    3504:	b.n	350e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xdee>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3506:	cmp.w	r8, #3
    350a:	bgt.n	3546 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe26>
    350c:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    350e:	subs	r7, r5, r0
    3510:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    3514:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3516:	cmp	r7, r3
    3518:	it	ge
    351a:	movge	r7, r3
          memcpy(dst,src,to_copy);
    351c:	mov	r2, r7
          pos += to_copy;
    351e:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3520:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3524:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3526:	add	r9, r7
          dst += to_copy;
    3528:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    352a:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    352c:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    352e:	bne.n	3506 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xde6>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3530:	movs	r2, #60	; 0x3c
    3532:	mov.w	r1, #512	; 0x200
    3536:	mov	r0, sl
    3538:	bl	a270 <usb_mtp_send>
    353c:	cmp	r0, #0
    353e:	ble.n	3530 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe10>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3540:	str.w	sl, [r4]
    3544:	b.n	3506 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xde6>
    3546:	movs	r1, #0
    3548:	ldrb	r2, [r6, #0]
    354a:	ldr	r3, [r6, #4]
    354c:	strb.w	r1, [sp, #25]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3550:	cmp	r2, #0
    3552:	bne.w	27da <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xba>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3556:	cmp	r3, #0
    3558:	beq.w	419c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1a7c>
    355c:	ldr	r0, [r4, #0]
        write_length_ += len;
    355e:	adds	r3, #1
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3560:	add.w	r9, r6, #544	; 0x220
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    3564:	add.w	r8, sp, #25
        //
        int pos = 0; // into data
    3568:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    356a:	str	r3, [r6, #4]
    356c:	b.n	3576 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe56>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    356e:	cmp	r7, #0
    3570:	bgt.w	27de <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbe>
    3574:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3576:	subs	r6, r5, r0
    3578:	rsb	r3, r7, #1
          memcpy(dst,src,to_copy);
    357c:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    357e:	cmp	r6, r3
    3580:	it	ge
    3582:	movge	r6, r3
          memcpy(dst,src,to_copy);
    3584:	mov	r2, r6
          pos += to_copy;
    3586:	add	r7, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3588:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    358c:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    358e:	add	r8, r6
          dst += to_copy;
    3590:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3592:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3594:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3596:	bne.n	356e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe4e>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3598:	movs	r2, #60	; 0x3c
    359a:	mov.w	r1, #512	; 0x200
    359e:	mov	r0, r9
    35a0:	bl	a270 <usb_mtp_send>
    35a4:	cmp	r0, #0
    35a6:	ble.n	3598 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe78>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    35a8:	str.w	r9, [r4]
    35ac:	b.n	356e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe4e>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    35ae:	ldr	r3, [r0, #4]
    35b0:	cmp	r3, #0
    35b2:	beq.w	429c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b7c>
    35b6:	ldr	r4, [pc, #132]	; (363c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf1c>)
    35b8:	ldr	r0, [r4, #0]
        write_length_ += len;
    35ba:	adds	r3, #2
    35bc:	add.w	r5, r6, #1056	; 0x420
        
        const char * src=data;
    35c0:	add.w	r9, sp, #66	; 0x42
        //
        int pos = 0; // into data
    35c4:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    35c8:	str	r3, [r6, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    35ca:	add.w	sl, r6, #544	; 0x220
    35ce:	b.n	35d8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xeb8>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    35d0:	cmp.w	r8, #1
    35d4:	bgt.n	3610 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xef0>
    35d6:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    35d8:	subs	r7, r5, r0
    35da:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    35de:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    35e0:	cmp	r7, r3
    35e2:	it	ge
    35e4:	movge	r7, r3
          memcpy(dst,src,to_copy);
    35e6:	mov	r2, r7
          pos += to_copy;
    35e8:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    35ea:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    35ee:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    35f0:	add	r9, r7
          dst += to_copy;
    35f2:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    35f4:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    35f6:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    35f8:	bne.n	35d0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xeb0>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    35fa:	movs	r2, #60	; 0x3c
    35fc:	mov.w	r1, #512	; 0x200
    3600:	mov	r0, sl
    3602:	bl	a270 <usb_mtp_send>
    3606:	cmp	r0, #0
    3608:	ble.n	35fa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xeda>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    360a:	str.w	sl, [r4]
    360e:	b.n	35d0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xeb0>
    3610:	movs	r1, #10
    3612:	ldrb	r2, [r6, #0]
    3614:	ldr	r3, [r6, #4]
    3616:	strh.w	r1, [sp, #64]	; 0x40
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    361a:	cmp	r2, #0
    361c:	bne.w	2a8c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x36c>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3620:	cmp	r3, #0
    3622:	beq.w	4290 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b70>
    3626:	ldr	r0, [r4, #0]
        write_length_ += len;
    3628:	adds	r3, #2
        
        const char * src=data;
    362a:	add.w	r9, sp, #64	; 0x40
        //
        int pos = 0; // into data
    362e:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3632:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3636:	str	r3, [r6, #4]
    3638:	b.n	3648 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf28>
    363a:	nop
    363c:	.word	0x20004204
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3640:	cmp.w	r8, #1
    3644:	bgt.n	3680 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf60>
    3646:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3648:	subs	r7, r5, r0
    364a:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    364e:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3650:	cmp	r7, r3
    3652:	it	ge
    3654:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3656:	mov	r2, r7
          pos += to_copy;
    3658:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    365a:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    365e:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3660:	add	r9, r7
          dst += to_copy;
    3662:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3664:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3666:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3668:	bne.n	3640 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf20>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    366a:	movs	r2, #60	; 0x3c
    366c:	mov.w	r1, #512	; 0x200
    3670:	mov	r0, sl
    3672:	bl	a270 <usb_mtp_send>
    3676:	cmp	r0, #0
    3678:	ble.n	366a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf4a>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    367a:	str.w	sl, [r4]
    367e:	b.n	3640 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf20>
    3680:	movs	r1, #0
    3682:	ldrb	r2, [r6, #0]
    3684:	ldr	r3, [r6, #4]
    3686:	strb.w	r1, [sp, #24]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    368a:	cmp	r2, #0
    368c:	bne.w	2a8e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x36e>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3690:	cmp	r3, #0
    3692:	beq.w	4284 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b64>
    3696:	ldr	r0, [r4, #0]
        write_length_ += len;
    3698:	adds	r3, #1
        
        const char * src=data;
    369a:	add.w	r9, sp, #24
        //
        int pos = 0; // into data
    369e:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    36a2:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    36a6:	str	r3, [r6, #4]
    36a8:	b.n	36b2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf92>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    36aa:	cmp.w	r8, #0
    36ae:	bgt.n	36ea <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xfca>
    36b0:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    36b2:	subs	r7, r5, r0
    36b4:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    36b8:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    36ba:	cmp	r7, r3
    36bc:	it	ge
    36be:	movge	r7, r3
          memcpy(dst,src,to_copy);
    36c0:	mov	r2, r7
          pos += to_copy;
    36c2:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    36c4:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    36c8:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    36ca:	add	r9, r7
          dst += to_copy;
    36cc:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    36ce:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    36d0:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    36d2:	bne.n	36aa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf8a>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    36d4:	movs	r2, #60	; 0x3c
    36d6:	mov.w	r1, #512	; 0x200
    36da:	mov	r0, sl
    36dc:	bl	a270 <usb_mtp_send>
    36e0:	cmp	r0, #0
    36e2:	ble.n	36d4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xfb4>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    36e4:	str.w	sl, [r4]
    36e8:	b.n	36aa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf8a>
    36ea:	movs	r0, #0
    36ec:	movs	r1, #0
    36ee:	ldrb	r2, [r6, #0]
    36f0:	ldr	r3, [r6, #4]
    36f2:	strd	r0, r1, [sp, #136]	; 0x88
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    36f6:	cmp	r2, #0
    36f8:	bne.w	2a90 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x370>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    36fc:	cmp	r3, #0
    36fe:	beq.w	439c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c7c>
    3702:	ldr	r0, [r4, #0]
        write_length_ += len;
    3704:	adds	r3, #8
        
        const char * src=data;
    3706:	add.w	r9, sp, #136	; 0x88
        //
        int pos = 0; // into data
    370a:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    370e:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3712:	str	r3, [r6, #4]
    3714:	b.n	371e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xffe>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3716:	cmp.w	r8, #7
    371a:	bgt.n	3756 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1036>
    371c:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    371e:	subs	r7, r5, r0
    3720:	rsb	r3, r8, #8
          memcpy(dst,src,to_copy);
    3724:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3726:	cmp	r7, r3
    3728:	it	ge
    372a:	movge	r7, r3
          memcpy(dst,src,to_copy);
    372c:	mov	r2, r7
          pos += to_copy;
    372e:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3730:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3734:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3736:	add	r9, r7
          dst += to_copy;
    3738:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    373a:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    373c:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    373e:	bne.n	3716 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xff6>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3740:	movs	r2, #60	; 0x3c
    3742:	mov.w	r1, #512	; 0x200
    3746:	mov	r0, sl
    3748:	bl	a270 <usb_mtp_send>
    374c:	cmp	r0, #0
    374e:	ble.n	3740 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1020>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3750:	str.w	sl, [r4]
    3754:	b.n	3716 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xff6>
    3756:	movs	r0, #0
    3758:	movs	r1, #0
    375a:	ldrb	r2, [r6, #0]
    375c:	ldr	r3, [r6, #4]
    375e:	strd	r0, r1, [sp, #128]	; 0x80
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3762:	cmp	r2, #0
    3764:	bne.w	28a6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x186>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3768:	cmp	r3, #0
    376a:	beq.w	4390 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c70>
    376e:	ldr	r0, [r4, #0]
        write_length_ += len;
    3770:	adds	r3, #8
        
        const char * src=data;
    3772:	add.w	r9, sp, #128	; 0x80
        //
        int pos = 0; // into data
    3776:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    377a:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    377e:	str	r3, [r6, #4]
    3780:	b.n	378a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x106a>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3782:	cmp.w	r8, #7
    3786:	bgt.n	37c2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x10a2>
    3788:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    378a:	subs	r7, r5, r0
    378c:	rsb	r3, r8, #8
          memcpy(dst,src,to_copy);
    3790:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3792:	cmp	r7, r3
    3794:	it	ge
    3796:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3798:	mov	r2, r7
          pos += to_copy;
    379a:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    379c:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    37a0:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    37a2:	add	r9, r7
          dst += to_copy;
    37a4:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    37a6:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    37a8:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    37aa:	bne.n	3782 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1062>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    37ac:	movs	r2, #60	; 0x3c
    37ae:	mov.w	r1, #512	; 0x200
    37b2:	mov	r0, sl
    37b4:	bl	a270 <usb_mtp_send>
    37b8:	cmp	r0, #0
    37ba:	ble.n	37ac <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x108c>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    37bc:	str.w	sl, [r4]
    37c0:	b.n	3782 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1062>
    37c2:	movs	r1, #0
    37c4:	ldrb	r2, [r6, #0]
    37c6:	ldr	r3, [r6, #4]
    37c8:	str	r1, [sp, #112]	; 0x70
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    37ca:	cmp	r2, #0
    37cc:	bne.w	27d8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    37d0:	cmp	r3, #0
    37d2:	beq.w	4384 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c64>
    37d6:	ldr	r0, [r4, #0]
        write_length_ += len;
    37d8:	adds	r3, #4
        
        const char * src=data;
    37da:	add.w	r9, sp, #112	; 0x70
        //
        int pos = 0; // into data
    37de:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    37e2:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    37e6:	str	r3, [r6, #4]
    37e8:	b.n	37f2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x10d2>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    37ea:	cmp.w	r8, #3
    37ee:	bgt.n	382a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x110a>
    37f0:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    37f2:	subs	r7, r5, r0
    37f4:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    37f8:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    37fa:	cmp	r7, r3
    37fc:	it	ge
    37fe:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3800:	mov	r2, r7
          pos += to_copy;
    3802:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3804:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3808:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    380a:	add	r9, r7
          dst += to_copy;
    380c:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    380e:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3810:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3812:	bne.n	37ea <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x10ca>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3814:	movs	r2, #60	; 0x3c
    3816:	mov.w	r1, #512	; 0x200
    381a:	mov	r0, sl
    381c:	bl	a270 <usb_mtp_send>
    3820:	cmp	r0, #0
    3822:	ble.n	3814 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x10f4>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3824:	str.w	sl, [r4]
    3828:	b.n	37ea <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x10ca>
    382a:	movs	r1, #0
    382c:	ldrb	r2, [r6, #0]
    382e:	ldr	r3, [r6, #4]
    3830:	strb.w	r1, [sp, #23]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3834:	cmp	r2, #0
    3836:	bne.w	27da <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xba>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    383a:	cmp	r3, #0
    383c:	beq.w	4378 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c58>
    3840:	ldr	r0, [r4, #0]
        write_length_ += len;
    3842:	adds	r3, #1
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3844:	add.w	r9, r6, #544	; 0x220
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    3848:	add.w	r8, sp, #23
        //
        int pos = 0; // into data
    384c:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    384e:	str	r3, [r6, #4]
    3850:	b.n	385a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x113a>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3852:	cmp	r7, #0
    3854:	bgt.w	27de <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbe>
    3858:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    385a:	subs	r6, r5, r0
    385c:	rsb	r3, r7, #1
          memcpy(dst,src,to_copy);
    3860:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3862:	cmp	r6, r3
    3864:	it	ge
    3866:	movge	r6, r3
          memcpy(dst,src,to_copy);
    3868:	mov	r2, r6
          pos += to_copy;
    386a:	add	r7, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    386c:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3870:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3872:	add	r8, r6
          dst += to_copy;
    3874:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3876:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3878:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    387a:	bne.n	3852 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1132>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    387c:	movs	r2, #60	; 0x3c
    387e:	mov.w	r1, #512	; 0x200
    3882:	mov	r0, r9
    3884:	bl	a270 <usb_mtp_send>
    3888:	cmp	r0, #0
    388a:	ble.n	387c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x115c>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    388c:	str.w	r9, [r4]
    3890:	b.n	3852 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1132>
    3892:	movs	r1, #4
    3894:	ldrb	r2, [r6, #0]
    3896:	ldr	r3, [r6, #4]
    3898:	strh.w	r1, [sp, #40]	; 0x28
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    389c:	cmp	r2, #0
    389e:	bne.w	2814 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf4>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    38a2:	cmp	r3, #0
    38a4:	beq.w	426a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b4a>
    38a8:	ldr	r0, [r4, #0]
        write_length_ += len;
    38aa:	adds	r3, #2
        
        const char * src=data;
    38ac:	add.w	r9, sp, #40	; 0x28
        //
        int pos = 0; // into data
    38b0:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    38b4:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    38b8:	str	r3, [r6, #4]
    38ba:	b.n	38c6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x11a6>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    38bc:	cmp.w	r8, #1
    38c0:	bgt.w	3aa2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1382>
    38c4:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    38c6:	subs	r7, r5, r0
    38c8:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    38cc:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    38ce:	cmp	r7, r3
    38d0:	it	ge
    38d2:	movge	r7, r3
          memcpy(dst,src,to_copy);
    38d4:	mov	r2, r7
          pos += to_copy;
    38d6:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    38d8:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    38dc:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    38de:	add	r9, r7
          dst += to_copy;
    38e0:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    38e2:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    38e4:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    38e6:	bne.n	38bc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x119c>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    38e8:	movs	r2, #60	; 0x3c
    38ea:	mov.w	r1, #512	; 0x200
    38ee:	mov	r0, sl
    38f0:	bl	a270 <usb_mtp_send>
    38f4:	cmp	r0, #0
    38f6:	ble.n	38e8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x11c8>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    38f8:	str.w	sl, [r4]
    38fc:	b.n	38bc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x119c>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    38fe:	ldr	r3, [r0, #4]
    3900:	cmp	r3, #0
    3902:	beq.w	421a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1afa>
    3906:	ldr	r4, [pc, #768]	; (3c08 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x14e8>)
    3908:	ldr	r0, [r4, #0]
        write_length_ += len;
    390a:	adds	r3, #2
    390c:	add.w	r5, r6, #1056	; 0x420
        
        const char * src=data;
    3910:	add.w	r9, sp, #46	; 0x2e
        //
        int pos = 0; // into data
    3914:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3918:	str	r3, [r6, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    391a:	add.w	sl, r6, #544	; 0x220
    391e:	b.n	3928 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1208>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3920:	cmp.w	r8, #1
    3924:	bgt.n	3960 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1240>
    3926:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3928:	subs	r7, r5, r0
    392a:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    392e:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3930:	cmp	r7, r3
    3932:	it	ge
    3934:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3936:	mov	r2, r7
          pos += to_copy;
    3938:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    393a:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    393e:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3940:	add	r9, r7
          dst += to_copy;
    3942:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3944:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3946:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3948:	bne.n	3920 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1200>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    394a:	movs	r2, #60	; 0x3c
    394c:	mov.w	r1, #512	; 0x200
    3950:	mov	r0, sl
    3952:	bl	a270 <usb_mtp_send>
    3956:	cmp	r0, #0
    3958:	ble.n	394a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x122a>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    395a:	str.w	sl, [r4]
    395e:	b.n	3920 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1200>
    3960:	movs	r1, #8
    3962:	ldrb	r2, [r6, #0]
    3964:	ldr	r3, [r6, #4]
    3966:	strh.w	r1, [sp, #44]	; 0x2c
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    396a:	cmp	r2, #0
    396c:	bne.w	28a2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x182>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3970:	cmp	r3, #0
    3972:	beq.w	420e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1aee>
    3976:	ldr	r0, [r4, #0]
        write_length_ += len;
    3978:	adds	r3, #2
        
        const char * src=data;
    397a:	add.w	r9, sp, #44	; 0x2c
        //
        int pos = 0; // into data
    397e:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3982:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3986:	str	r3, [r6, #4]
    3988:	b.n	3992 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1272>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    398a:	cmp.w	r8, #1
    398e:	bgt.n	39ca <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x12aa>
    3990:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3992:	subs	r7, r5, r0
    3994:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    3998:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    399a:	cmp	r7, r3
    399c:	it	ge
    399e:	movge	r7, r3
          memcpy(dst,src,to_copy);
    39a0:	mov	r2, r7
          pos += to_copy;
    39a2:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    39a4:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    39a8:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    39aa:	add	r9, r7
          dst += to_copy;
    39ac:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    39ae:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    39b0:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    39b2:	bne.n	398a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x126a>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    39b4:	movs	r2, #60	; 0x3c
    39b6:	mov.w	r1, #512	; 0x200
    39ba:	mov	r0, sl
    39bc:	bl	a270 <usb_mtp_send>
    39c0:	cmp	r0, #0
    39c2:	ble.n	39b4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1294>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    39c4:	str.w	sl, [r4]
    39c8:	b.n	398a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x126a>
    39ca:	movs	r1, #0
    39cc:	ldrb	r2, [r6, #0]
    39ce:	ldr	r3, [r6, #4]
    39d0:	strb.w	r1, [sp, #11]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    39d4:	cmp	r2, #0
    39d6:	bne.w	28a4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x184>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    39da:	cmp	r3, #0
    39dc:	beq.w	4202 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1ae2>
    39e0:	ldr	r0, [r4, #0]
        write_length_ += len;
    39e2:	adds	r3, #1
        
        const char * src=data;
    39e4:	add.w	r9, sp, #11
        //
        int pos = 0; // into data
    39e8:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    39ec:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    39f0:	str	r3, [r6, #4]
    39f2:	b.n	39fc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x12dc>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    39f4:	cmp.w	r8, #0
    39f8:	bgt.n	3a34 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1314>
    39fa:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    39fc:	subs	r7, r5, r0
    39fe:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    3a02:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3a04:	cmp	r7, r3
    3a06:	it	ge
    3a08:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3a0a:	mov	r2, r7
          pos += to_copy;
    3a0c:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3a0e:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3a12:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3a14:	add	r9, r7
          dst += to_copy;
    3a16:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3a18:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3a1a:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3a1c:	bne.n	39f4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x12d4>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3a1e:	movs	r2, #60	; 0x3c
    3a20:	mov.w	r1, #512	; 0x200
    3a24:	mov	r0, sl
    3a26:	bl	a270 <usb_mtp_send>
    3a2a:	cmp	r0, #0
    3a2c:	ble.n	3a1e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x12fe>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3a2e:	str.w	sl, [r4]
    3a32:	b.n	39f4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x12d4>
    3a34:	movs	r0, #0
    3a36:	movs	r1, #0
    3a38:	ldrb	r2, [r6, #0]
    3a3a:	ldr	r3, [r6, #4]
    3a3c:	strd	r0, r1, [sp, #120]	; 0x78
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3a40:	cmp	r2, #0
    3a42:	bne.w	28a6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x186>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3a46:	cmp	r3, #0
    3a48:	beq.w	4250 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b30>
    3a4c:	ldr	r0, [r4, #0]
        write_length_ += len;
    3a4e:	adds	r3, #8
        
        const char * src=data;
    3a50:	add.w	r9, sp, #120	; 0x78
        //
        int pos = 0; // into data
    3a54:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3a58:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3a5c:	str	r3, [r6, #4]
    3a5e:	b.n	3a6a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x134a>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3a60:	cmp.w	r8, #7
    3a64:	bgt.w	3c4c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x152c>
    3a68:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3a6a:	subs	r7, r5, r0
    3a6c:	rsb	r3, r8, #8
          memcpy(dst,src,to_copy);
    3a70:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3a72:	cmp	r7, r3
    3a74:	it	ge
    3a76:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3a78:	mov	r2, r7
          pos += to_copy;
    3a7a:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3a7c:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3a80:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3a82:	add	r9, r7
          dst += to_copy;
    3a84:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3a86:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3a88:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3a8a:	bne.n	3a60 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1340>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3a8c:	movs	r2, #60	; 0x3c
    3a8e:	mov.w	r1, #512	; 0x200
    3a92:	mov	r0, sl
    3a94:	bl	a270 <usb_mtp_send>
    3a98:	cmp	r0, #0
    3a9a:	ble.n	3a8c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x136c>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3a9c:	str.w	sl, [r4]
    3aa0:	b.n	3a60 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1340>
    3aa2:	movs	r1, #0
    3aa4:	ldrb	r2, [r6, #0]
    3aa6:	ldr	r3, [r6, #4]
    3aa8:	strb.w	r1, [sp, #9]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3aac:	cmp	r2, #0
    3aae:	bne.w	2816 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf6>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3ab2:	cmp	r3, #0
    3ab4:	beq.w	4246 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b26>
    3ab8:	ldr	r0, [r4, #0]
        write_length_ += len;
    3aba:	adds	r3, #1
        
        const char * src=data;
    3abc:	add.w	r9, sp, #9
        //
        int pos = 0; // into data
    3ac0:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3ac4:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3ac8:	str	r3, [r6, #4]
    3aca:	b.n	3ad4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x13b4>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3acc:	cmp.w	r8, #0
    3ad0:	bgt.n	3b0c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x13ec>
    3ad2:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3ad4:	subs	r7, r5, r0
    3ad6:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    3ada:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3adc:	cmp	r7, r3
    3ade:	it	ge
    3ae0:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3ae2:	mov	r2, r7
          pos += to_copy;
    3ae4:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3ae6:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3aea:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3aec:	add	r9, r7
          dst += to_copy;
    3aee:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3af0:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3af2:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3af4:	bne.n	3acc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x13ac>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3af6:	movs	r2, #60	; 0x3c
    3af8:	mov.w	r1, #512	; 0x200
    3afc:	mov	r0, sl
    3afe:	bl	a270 <usb_mtp_send>
    3b02:	cmp	r0, #0
    3b04:	ble.n	3af6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x13d6>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3b06:	str.w	sl, [r4]
    3b0a:	b.n	3acc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x13ac>
    3b0c:	movs	r1, #0
    3b0e:	ldrb	r2, [r6, #0]
    3b10:	ldr	r3, [r6, #4]
    3b12:	strh.w	r1, [sp, #38]	; 0x26
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3b16:	cmp	r2, #0
    3b18:	bne.w	2818 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3b1c:	cmp	r3, #0
    3b1e:	beq.w	423c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b1c>
    3b22:	ldr	r0, [r4, #0]
        write_length_ += len;
    3b24:	adds	r3, #2
        
        const char * src=data;
    3b26:	add.w	r9, sp, #38	; 0x26
        //
        int pos = 0; // into data
    3b2a:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3b2e:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3b32:	str	r3, [r6, #4]
    3b34:	b.n	3b3e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x141e>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3b36:	cmp.w	r8, #1
    3b3a:	bgt.n	3b76 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1456>
    3b3c:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3b3e:	subs	r7, r5, r0
    3b40:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    3b44:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3b46:	cmp	r7, r3
    3b48:	it	ge
    3b4a:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3b4c:	mov	r2, r7
          pos += to_copy;
    3b4e:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3b50:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3b54:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3b56:	add	r9, r7
          dst += to_copy;
    3b58:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3b5a:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3b5c:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3b5e:	bne.n	3b36 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1416>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3b60:	movs	r2, #60	; 0x3c
    3b62:	mov.w	r1, #512	; 0x200
    3b66:	mov	r0, sl
    3b68:	bl	a270 <usb_mtp_send>
    3b6c:	cmp	r0, #0
    3b6e:	ble.n	3b60 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1440>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3b70:	str.w	sl, [r4]
    3b74:	b.n	3b36 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1416>
    3b76:	movs	r1, #0
    3b78:	ldrb	r2, [r6, #0]
    3b7a:	ldr	r3, [r6, #4]
    3b7c:	str	r1, [sp, #84]	; 0x54
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3b7e:	cmp	r2, #0
    3b80:	bne.w	27d8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3b84:	cmp	r3, #0
    3b86:	beq.w	4232 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b12>
    3b8a:	ldr	r0, [r4, #0]
        write_length_ += len;
    3b8c:	adds	r3, #4
        
        const char * src=data;
    3b8e:	add.w	r9, sp, #84	; 0x54
        //
        int pos = 0; // into data
    3b92:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3b96:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3b9a:	str	r3, [r6, #4]
    3b9c:	b.n	3ba6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1486>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3b9e:	cmp.w	r8, #3
    3ba2:	bgt.n	3bde <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x14be>
    3ba4:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3ba6:	subs	r7, r5, r0
    3ba8:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    3bac:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3bae:	cmp	r7, r3
    3bb0:	it	ge
    3bb2:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3bb4:	mov	r2, r7
          pos += to_copy;
    3bb6:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3bb8:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3bbc:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3bbe:	add	r9, r7
          dst += to_copy;
    3bc0:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3bc2:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3bc4:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3bc6:	bne.n	3b9e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x147e>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3bc8:	movs	r2, #60	; 0x3c
    3bca:	mov.w	r1, #512	; 0x200
    3bce:	mov	r0, sl
    3bd0:	bl	a270 <usb_mtp_send>
    3bd4:	cmp	r0, #0
    3bd6:	ble.n	3bc8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x14a8>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3bd8:	str.w	sl, [r4]
    3bdc:	b.n	3b9e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x147e>
    3bde:	movs	r1, #0
    3be0:	ldrb	r2, [r6, #0]
    3be2:	ldr	r3, [r6, #4]
    3be4:	strb.w	r1, [sp, #8]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3be8:	cmp	r2, #0
    3bea:	bne.w	27da <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xba>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3bee:	cmp	r3, #0
    3bf0:	beq.w	4228 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b08>
    3bf4:	ldr	r0, [r4, #0]
        write_length_ += len;
    3bf6:	adds	r3, #1
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3bf8:	add.w	r9, r6, #544	; 0x220
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    3bfc:	add.w	r8, sp, #8
        //
        int pos = 0; // into data
    3c00:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3c02:	str	r3, [r6, #4]
    3c04:	b.n	3c14 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x14f4>
    3c06:	nop
    3c08:	.word	0x20004204
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3c0c:	cmp	r7, #0
    3c0e:	bgt.w	27de <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbe>
    3c12:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3c14:	subs	r6, r5, r0
    3c16:	rsb	r3, r7, #1
          memcpy(dst,src,to_copy);
    3c1a:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3c1c:	cmp	r6, r3
    3c1e:	it	ge
    3c20:	movge	r6, r3
          memcpy(dst,src,to_copy);
    3c22:	mov	r2, r6
          pos += to_copy;
    3c24:	add	r7, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3c26:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3c2a:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3c2c:	add	r8, r6
          dst += to_copy;
    3c2e:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3c30:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3c32:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3c34:	bne.n	3c0c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x14ec>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3c36:	movs	r2, #60	; 0x3c
    3c38:	mov.w	r1, #512	; 0x200
    3c3c:	mov	r0, r9
    3c3e:	bl	a270 <usb_mtp_send>
    3c42:	cmp	r0, #0
    3c44:	ble.n	3c36 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1516>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3c46:	str.w	r9, [r4]
    3c4a:	b.n	3c0c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x14ec>
    3c4c:	movs	r1, #0
    3c4e:	ldrb	r2, [r6, #0]
    3c50:	ldr	r3, [r6, #4]
    3c52:	str	r1, [sp, #88]	; 0x58
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3c54:	cmp	r2, #0
    3c56:	bne.w	27d8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3c5a:	cmp	r3, #0
    3c5c:	beq.w	41f8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1ad8>
    3c60:	ldr	r0, [r4, #0]
        write_length_ += len;
    3c62:	adds	r3, #4
        
        const char * src=data;
    3c64:	add.w	r9, sp, #88	; 0x58
        //
        int pos = 0; // into data
    3c68:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3c6c:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3c70:	str	r3, [r6, #4]
    3c72:	b.n	3c7c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x155c>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3c74:	cmp.w	r8, #3
    3c78:	bgt.n	3cb4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1594>
    3c7a:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3c7c:	subs	r7, r5, r0
    3c7e:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    3c82:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3c84:	cmp	r7, r3
    3c86:	it	ge
    3c88:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3c8a:	mov	r2, r7
          pos += to_copy;
    3c8c:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3c8e:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3c92:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3c94:	add	r9, r7
          dst += to_copy;
    3c96:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3c98:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3c9a:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3c9c:	bne.n	3c74 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1554>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3c9e:	movs	r2, #60	; 0x3c
    3ca0:	mov.w	r1, #512	; 0x200
    3ca4:	mov	r0, sl
    3ca6:	bl	a270 <usb_mtp_send>
    3caa:	cmp	r0, #0
    3cac:	ble.n	3c9e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x157e>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3cae:	str.w	sl, [r4]
    3cb2:	b.n	3c74 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1554>
    3cb4:	movs	r1, #0
    3cb6:	ldrb	r2, [r6, #0]
    3cb8:	ldr	r3, [r6, #4]
    3cba:	strb.w	r1, [sp, #10]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3cbe:	cmp	r2, #0
    3cc0:	bne.w	27da <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xba>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3cc4:	cmp	r3, #0
    3cc6:	beq.w	4360 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c40>
    3cca:	ldr	r0, [r4, #0]
        write_length_ += len;
    3ccc:	adds	r3, #1
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3cce:	add.w	r9, r6, #544	; 0x220
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    3cd2:	add.w	r8, sp, #10
        //
        int pos = 0; // into data
    3cd6:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3cd8:	str	r3, [r6, #4]
    3cda:	b.n	3ce4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x15c4>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3cdc:	cmp	r7, #0
    3cde:	bgt.w	27de <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbe>
    3ce2:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3ce4:	subs	r6, r5, r0
    3ce6:	rsb	r3, r7, #1
          memcpy(dst,src,to_copy);
    3cea:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3cec:	cmp	r6, r3
    3cee:	it	ge
    3cf0:	movge	r6, r3
          memcpy(dst,src,to_copy);
    3cf2:	mov	r2, r6
          pos += to_copy;
    3cf4:	add	r7, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3cf6:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3cfa:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3cfc:	add	r8, r6
          dst += to_copy;
    3cfe:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3d00:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3d02:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3d04:	bne.n	3cdc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x15bc>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3d06:	movs	r2, #60	; 0x3c
    3d08:	mov.w	r1, #512	; 0x200
    3d0c:	mov	r0, r9
    3d0e:	bl	a270 <usb_mtp_send>
    3d12:	cmp	r0, #0
    3d14:	ble.n	3d06 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x15e6>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3d16:	str.w	r9, [r4]
    3d1a:	b.n	3cdc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x15bc>
    3d1c:	movw	r1, #65535	; 0xffff
    3d20:	ldrb	r2, [r6, #0]
    3d22:	ldr	r3, [r6, #4]
    3d24:	strh.w	r1, [sp, #48]	; 0x30
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3d28:	cmp	r2, #0
    3d2a:	bne.w	27d2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb2>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3d2e:	cmp	r3, #0
    3d30:	beq.w	41ee <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1ace>
    3d34:	ldr	r0, [r4, #0]
        write_length_ += len;
    3d36:	adds	r3, #2
        
        const char * src=data;
    3d38:	add.w	r9, sp, #48	; 0x30
        //
        int pos = 0; // into data
    3d3c:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3d40:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3d44:	str	r3, [r6, #4]
    3d46:	b.n	3d50 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1630>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3d48:	cmp.w	r8, #1
    3d4c:	bgt.n	3d88 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1668>
    3d4e:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3d50:	subs	r7, r5, r0
    3d52:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    3d56:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3d58:	cmp	r7, r3
    3d5a:	it	ge
    3d5c:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3d5e:	mov	r2, r7
          pos += to_copy;
    3d60:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3d62:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3d66:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3d68:	add	r9, r7
          dst += to_copy;
    3d6a:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3d6c:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3d6e:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3d70:	bne.n	3d48 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1628>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3d72:	movs	r2, #60	; 0x3c
    3d74:	mov.w	r1, #512	; 0x200
    3d78:	mov	r0, sl
    3d7a:	bl	a270 <usb_mtp_send>
    3d7e:	cmp	r0, #0
    3d80:	ble.n	3d72 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1652>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3d82:	str.w	sl, [r4]
    3d86:	b.n	3d48 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1628>
    3d88:	movs	r1, #1
    3d8a:	ldrb	r2, [r6, #0]
    3d8c:	ldr	r3, [r6, #4]
    3d8e:	strb.w	r1, [sp, #14]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3d92:	cmp	r2, #0
    3d94:	bne.w	27d4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb4>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3d98:	cmp	r3, #0
    3d9a:	beq.w	41e4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1ac4>
    3d9e:	ldr	r0, [r4, #0]
        write_length_ += len;
    3da0:	adds	r3, #1
        
        const char * src=data;
    3da2:	add.w	r9, sp, #14
        //
        int pos = 0; // into data
    3da6:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3daa:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3dae:	str	r3, [r6, #4]
    3db0:	b.n	3dba <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x169a>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3db2:	cmp.w	r8, #0
    3db6:	bgt.n	3df2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x16d2>
    3db8:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3dba:	subs	r7, r5, r0
    3dbc:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    3dc0:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3dc2:	cmp	r7, r3
    3dc4:	it	ge
    3dc6:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3dc8:	mov	r2, r7
          pos += to_copy;
    3dca:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3dcc:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3dd0:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3dd2:	add	r9, r7
          dst += to_copy;
    3dd4:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3dd6:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3dd8:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3dda:	bne.n	3db2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1692>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3ddc:	movs	r2, #60	; 0x3c
    3dde:	mov.w	r1, #512	; 0x200
    3de2:	mov	r0, sl
    3de4:	bl	a270 <usb_mtp_send>
    3de8:	cmp	r0, #0
    3dea:	ble.n	3ddc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x16bc>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3dec:	str.w	sl, [r4]
    3df0:	b.n	3db2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1692>
    3df2:	movs	r1, #0
    3df4:	ldrb	r2, [r6, #0]
    3df6:	ldr	r3, [r6, #4]
    3df8:	strb.w	r1, [sp, #13]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3dfc:	cmp	r2, #0
    3dfe:	bne.w	27d6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb6>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3e02:	cmp	r3, #0
    3e04:	beq.w	41da <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1aba>
    3e08:	ldr	r0, [r4, #0]
        write_length_ += len;
    3e0a:	adds	r3, #1
        
        const char * src=data;
    3e0c:	add.w	r9, sp, #13
        //
        int pos = 0; // into data
    3e10:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3e14:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3e18:	str	r3, [r6, #4]
    3e1a:	b.n	3e24 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1704>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3e1c:	cmp.w	r8, #0
    3e20:	bgt.n	3e5c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x173c>
    3e22:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3e24:	subs	r7, r5, r0
    3e26:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    3e2a:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3e2c:	cmp	r7, r3
    3e2e:	it	ge
    3e30:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3e32:	mov	r2, r7
          pos += to_copy;
    3e34:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3e36:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3e3a:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3e3c:	add	r9, r7
          dst += to_copy;
    3e3e:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3e40:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3e42:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3e44:	bne.n	3e1c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x16fc>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3e46:	movs	r2, #60	; 0x3c
    3e48:	mov.w	r1, #512	; 0x200
    3e4c:	mov	r0, sl
    3e4e:	bl	a270 <usb_mtp_send>
    3e52:	cmp	r0, #0
    3e54:	ble.n	3e46 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1726>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3e56:	str.w	sl, [r4]
    3e5a:	b.n	3e1c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x16fc>
    3e5c:	movs	r1, #0
    3e5e:	ldrb	r2, [r6, #0]
    3e60:	ldr	r3, [r6, #4]
    3e62:	str	r1, [sp, #92]	; 0x5c
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3e64:	cmp	r2, #0
    3e66:	bne.w	27d8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3e6a:	cmp	r3, #0
    3e6c:	beq.w	41d0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1ab0>
    3e70:	ldr	r0, [r4, #0]
        write_length_ += len;
    3e72:	adds	r3, #4
        
        const char * src=data;
    3e74:	add.w	r9, sp, #92	; 0x5c
        //
        int pos = 0; // into data
    3e78:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3e7c:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3e80:	str	r3, [r6, #4]
    3e82:	b.n	3e8c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x176c>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3e84:	cmp.w	r8, #3
    3e88:	bgt.n	3ec4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17a4>
    3e8a:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3e8c:	subs	r7, r5, r0
    3e8e:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    3e92:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3e94:	cmp	r7, r3
    3e96:	it	ge
    3e98:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3e9a:	mov	r2, r7
          pos += to_copy;
    3e9c:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3e9e:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3ea2:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3ea4:	add	r9, r7
          dst += to_copy;
    3ea6:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3ea8:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3eaa:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3eac:	bne.n	3e84 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1764>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3eae:	movs	r2, #60	; 0x3c
    3eb0:	mov.w	r1, #512	; 0x200
    3eb4:	mov	r0, sl
    3eb6:	bl	a270 <usb_mtp_send>
    3eba:	cmp	r0, #0
    3ebc:	ble.n	3eae <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x178e>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3ebe:	str.w	sl, [r4]
    3ec2:	b.n	3e84 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1764>
    3ec4:	movs	r1, #0
    3ec6:	ldrb	r2, [r6, #0]
    3ec8:	ldr	r3, [r6, #4]
    3eca:	strb.w	r1, [sp, #12]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3ece:	cmp	r2, #0
    3ed0:	bne.w	27da <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xba>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3ed4:	cmp	r3, #0
    3ed6:	beq.w	434a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c2a>
    3eda:	ldr	r0, [r4, #0]
        write_length_ += len;
    3edc:	adds	r3, #1
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3ede:	add.w	r9, r6, #544	; 0x220
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    3ee2:	add.w	r8, sp, #12
        //
        int pos = 0; // into data
    3ee6:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3ee8:	str	r3, [r6, #4]
    3eea:	b.n	3ef4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17d4>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3eec:	cmp	r7, #0
    3eee:	bgt.w	27de <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbe>
    3ef2:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3ef4:	subs	r6, r5, r0
    3ef6:	rsb	r3, r7, #1
          memcpy(dst,src,to_copy);
    3efa:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3efc:	cmp	r6, r3
    3efe:	it	ge
    3f00:	movge	r6, r3
          memcpy(dst,src,to_copy);
    3f02:	mov	r2, r6
          pos += to_copy;
    3f04:	add	r7, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3f06:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3f0a:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3f0c:	add	r8, r6
          dst += to_copy;
    3f0e:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3f10:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3f12:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3f14:	bne.n	3eec <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17cc>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3f16:	movs	r2, #60	; 0x3c
    3f18:	mov.w	r1, #512	; 0x200
    3f1c:	mov	r0, r9
    3f1e:	bl	a270 <usb_mtp_send>
    3f22:	cmp	r0, #0
    3f24:	ble.n	3f16 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17f6>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3f26:	str.w	r9, [r4]
    3f2a:	b.n	3eec <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17cc>
    3f2c:	movs	r1, #0
    3f2e:	ldrb	r2, [r6, #0]
    3f30:	ldr	r3, [r6, #4]
    3f32:	strb.w	r1, [sp, #16]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3f36:	cmp	r2, #0
    3f38:	bne.w	27d6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb6>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3f3c:	cmp	r3, #0
    3f3e:	beq.w	41c6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1aa6>
    3f42:	ldr	r0, [r4, #0]
        write_length_ += len;
    3f44:	adds	r3, #1
        
        const char * src=data;
    3f46:	add.w	r9, sp, #16
        //
        int pos = 0; // into data
    3f4a:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3f4e:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3f52:	str	r3, [r6, #4]
    3f54:	b.n	3f5e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x183e>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3f56:	cmp.w	r8, #0
    3f5a:	bgt.n	3f96 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1876>
    3f5c:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3f5e:	subs	r7, r5, r0
    3f60:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    3f64:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3f66:	cmp	r7, r3
    3f68:	it	ge
    3f6a:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3f6c:	mov	r2, r7
          pos += to_copy;
    3f6e:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3f70:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3f74:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3f76:	add	r9, r7
          dst += to_copy;
    3f78:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3f7a:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3f7c:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3f7e:	bne.n	3f56 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1836>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3f80:	movs	r2, #60	; 0x3c
    3f82:	mov.w	r1, #512	; 0x200
    3f86:	mov	r0, sl
    3f88:	bl	a270 <usb_mtp_send>
    3f8c:	cmp	r0, #0
    3f8e:	ble.n	3f80 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1860>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3f90:	str.w	sl, [r4]
    3f94:	b.n	3f56 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1836>
    3f96:	movs	r1, #0
    3f98:	ldrb	r2, [r6, #0]
    3f9a:	ldr	r3, [r6, #4]
    3f9c:	str	r1, [sp, #96]	; 0x60
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3f9e:	cmp	r2, #0
    3fa0:	bne.w	27d8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3fa4:	cmp	r3, #0
    3fa6:	beq.w	41bc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1a9c>
    3faa:	ldr	r0, [r4, #0]
        write_length_ += len;
    3fac:	adds	r3, #4
        
        const char * src=data;
    3fae:	add.w	r9, sp, #96	; 0x60
        //
        int pos = 0; // into data
    3fb2:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3fb6:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3fba:	str	r3, [r6, #4]
    3fbc:	b.n	3fc6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x18a6>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3fbe:	cmp.w	r8, #3
    3fc2:	bgt.n	3ffe <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x18de>
    3fc4:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3fc6:	subs	r7, r5, r0
    3fc8:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    3fcc:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3fce:	cmp	r7, r3
    3fd0:	it	ge
    3fd2:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3fd4:	mov	r2, r7
          pos += to_copy;
    3fd6:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3fd8:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3fdc:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3fde:	add	r9, r7
          dst += to_copy;
    3fe0:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3fe2:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3fe4:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3fe6:	bne.n	3fbe <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x189e>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3fe8:	movs	r2, #60	; 0x3c
    3fea:	mov.w	r1, #512	; 0x200
    3fee:	mov	r0, sl
    3ff0:	bl	a270 <usb_mtp_send>
    3ff4:	cmp	r0, #0
    3ff6:	ble.n	3fe8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x18c8>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3ff8:	str.w	sl, [r4]
    3ffc:	b.n	3fbe <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x189e>
    3ffe:	movs	r1, #0
    4000:	ldrb	r2, [r6, #0]
    4002:	ldr	r3, [r6, #4]
    4004:	strb.w	r1, [sp, #15]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    4008:	cmp	r2, #0
    400a:	bne.w	27da <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xba>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    400e:	cmp	r3, #0
    4010:	beq.w	43a8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c88>
    4014:	ldr	r0, [r4, #0]
        write_length_ += len;
    4016:	adds	r3, #1
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4018:	add.w	r9, r6, #544	; 0x220
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    401c:	add.w	r8, sp, #15
        //
        int pos = 0; // into data
    4020:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    4022:	str	r3, [r6, #4]
    4024:	b.n	402e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x190e>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    4026:	cmp	r7, #0
    4028:	bgt.w	27de <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbe>
    402c:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    402e:	subs	r6, r5, r0
    4030:	rsb	r3, r7, #1
          memcpy(dst,src,to_copy);
    4034:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4036:	cmp	r6, r3
    4038:	it	ge
    403a:	movge	r6, r3
          memcpy(dst,src,to_copy);
    403c:	mov	r2, r6
          pos += to_copy;
    403e:	add	r7, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    4040:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4044:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    4046:	add	r8, r6
          dst += to_copy;
    4048:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    404a:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    404c:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    404e:	bne.n	4026 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1906>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    4050:	movs	r2, #60	; 0x3c
    4052:	mov.w	r1, #512	; 0x200
    4056:	mov	r0, r9
    4058:	bl	a270 <usb_mtp_send>
    405c:	cmp	r0, #0
    405e:	ble.n	4050 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1930>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    4060:	str.w	r9, [r4]
    4064:	b.n	4026 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1906>
    4066:	movs	r1, #0
    4068:	ldrb	r2, [r6, #0]
    406a:	ldr	r3, [r6, #4]
    406c:	str	r1, [sp, #76]	; 0x4c
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    406e:	cmp	r2, #0
    4070:	bne.w	27fc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xdc>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    4074:	cmp	r3, #0
    4076:	beq.w	41b2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1a92>
    407a:	ldr	r0, [r4, #0]
        write_length_ += len;
    407c:	adds	r3, #4
        
        const char * src=data;
    407e:	add.w	r9, sp, #76	; 0x4c
        //
        int pos = 0; // into data
    4082:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4086:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    408a:	str	r3, [r6, #4]
    408c:	b.n	4096 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1976>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    408e:	cmp.w	r8, #3
    4092:	bgt.n	40ce <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x19ae>
    4094:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4096:	subs	r7, r5, r0
    4098:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    409c:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    409e:	cmp	r7, r3
    40a0:	it	ge
    40a2:	movge	r7, r3
          memcpy(dst,src,to_copy);
    40a4:	mov	r2, r7
          pos += to_copy;
    40a6:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    40a8:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    40ac:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    40ae:	add	r9, r7
          dst += to_copy;
    40b0:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    40b2:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    40b4:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    40b6:	bne.n	408e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x196e>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    40b8:	movs	r2, #60	; 0x3c
    40ba:	mov.w	r1, #512	; 0x200
    40be:	mov	r0, sl
    40c0:	bl	a270 <usb_mtp_send>
    40c4:	cmp	r0, #0
    40c6:	ble.n	40b8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1998>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    40c8:	str.w	sl, [r4]
    40cc:	b.n	408e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x196e>
    40ce:	movs	r1, #0
    40d0:	ldrb	r2, [r6, #0]
    40d2:	ldr	r3, [r6, #4]
    40d4:	str	r1, [sp, #72]	; 0x48
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    40d6:	cmp	r2, #0
    40d8:	bne.w	27d8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    40dc:	cmp	r3, #0
    40de:	beq.n	41a8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1a88>
    40e0:	ldr	r0, [r4, #0]
        write_length_ += len;
    40e2:	adds	r3, #4
        
        const char * src=data;
    40e4:	add.w	r9, sp, #72	; 0x48
        //
        int pos = 0; // into data
    40e8:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    40ec:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    40f0:	str	r3, [r6, #4]
    40f2:	b.n	40fc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x19dc>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    40f4:	cmp.w	r8, #3
    40f8:	bgt.n	4134 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1a14>
    40fa:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    40fc:	subs	r7, r5, r0
    40fe:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    4102:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4104:	cmp	r7, r3
    4106:	it	ge
    4108:	movge	r7, r3
          memcpy(dst,src,to_copy);
    410a:	mov	r2, r7
          pos += to_copy;
    410c:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    410e:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4112:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    4114:	add	r9, r7
          dst += to_copy;
    4116:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4118:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    411a:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    411c:	bne.n	40f4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x19d4>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    411e:	movs	r2, #60	; 0x3c
    4120:	mov.w	r1, #512	; 0x200
    4124:	mov	r0, sl
    4126:	bl	a270 <usb_mtp_send>
    412a:	cmp	r0, #0
    412c:	ble.n	411e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x19fe>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    412e:	str.w	sl, [r4]
    4132:	b.n	40f4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x19d4>
    4134:	movs	r1, #0
    4136:	ldrb	r2, [r6, #0]
    4138:	ldr	r3, [r6, #4]
    413a:	strb.w	r1, [sp, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    413e:	cmp	r2, #0
    4140:	bne.w	27da <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xba>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    4144:	cmp	r3, #0
    4146:	beq.w	42e8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1bc8>
    414a:	ldr	r0, [r4, #0]
        write_length_ += len;
    414c:	adds	r3, #1
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    414e:	add.w	r9, r6, #544	; 0x220
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    4152:	add.w	r8, sp, #4
        //
        int pos = 0; // into data
    4156:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    4158:	str	r3, [r6, #4]
    415a:	b.n	4164 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1a44>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    415c:	cmp	r7, #0
    415e:	bgt.w	27de <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbe>
    4162:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4164:	subs	r6, r5, r0
    4166:	rsb	r3, r7, #1
          memcpy(dst,src,to_copy);
    416a:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    416c:	cmp	r6, r3
    416e:	it	ge
    4170:	movge	r6, r3
          memcpy(dst,src,to_copy);
    4172:	mov	r2, r6
          pos += to_copy;
    4174:	add	r7, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    4176:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    417a:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    417c:	add	r8, r6
          dst += to_copy;
    417e:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4180:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4182:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4184:	bne.n	415c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1a3c>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    4186:	movs	r2, #60	; 0x3c
    4188:	mov.w	r1, #512	; 0x200
    418c:	mov	r0, r9
    418e:	bl	a270 <usb_mtp_send>
    4192:	cmp	r0, #0
    4194:	ble.n	4186 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1a66>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    4196:	str.w	r9, [r4]
    419a:	b.n	415c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1a3c>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    419c:	add.w	r2, r6, #544	; 0x220
    41a0:	mov	r0, r2
    41a2:	str	r2, [r4, #0]
    41a4:	b.w	355e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe3e>
    41a8:	add.w	r2, r6, #544	; 0x220
    41ac:	mov	r0, r2
    41ae:	str	r2, [r4, #0]
    41b0:	b.n	40e2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x19c2>
    41b2:	add.w	r2, r6, #544	; 0x220
    41b6:	mov	r0, r2
    41b8:	str	r2, [r4, #0]
    41ba:	b.n	407c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x195c>
    41bc:	add.w	r2, r6, #544	; 0x220
    41c0:	mov	r0, r2
    41c2:	str	r2, [r4, #0]
    41c4:	b.n	3fac <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x188c>
    41c6:	add.w	r2, r6, #544	; 0x220
    41ca:	mov	r0, r2
    41cc:	str	r2, [r4, #0]
    41ce:	b.n	3f44 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1824>
    41d0:	add.w	r2, r6, #544	; 0x220
    41d4:	mov	r0, r2
    41d6:	str	r2, [r4, #0]
    41d8:	b.n	3e72 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1752>
    41da:	add.w	r2, r6, #544	; 0x220
    41de:	mov	r0, r2
    41e0:	str	r2, [r4, #0]
    41e2:	b.n	3e0a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x16ea>
    41e4:	add.w	r2, r6, #544	; 0x220
    41e8:	mov	r0, r2
    41ea:	str	r2, [r4, #0]
    41ec:	b.n	3da0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1680>
    41ee:	add.w	r2, r6, #544	; 0x220
    41f2:	mov	r0, r2
    41f4:	str	r2, [r4, #0]
    41f6:	b.n	3d36 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1616>
    41f8:	add.w	r2, r6, #544	; 0x220
    41fc:	mov	r0, r2
    41fe:	str	r2, [r4, #0]
    4200:	b.n	3c62 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1542>
    4202:	add.w	r2, r6, #544	; 0x220
    4206:	mov	r0, r2
    4208:	str	r2, [r4, #0]
    420a:	b.w	39e2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x12c2>
    420e:	add.w	r2, r6, #544	; 0x220
    4212:	mov	r0, r2
    4214:	str	r2, [r4, #0]
    4216:	b.w	3978 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1258>
    421a:	add.w	r2, r0, #544	; 0x220
    421e:	ldr	r4, [pc, #588]	; (446c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1d4c>)
    4220:	mov	r0, r2
    4222:	str	r2, [r4, #0]
    4224:	b.w	390a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x11ea>
    4228:	add.w	r2, r6, #544	; 0x220
    422c:	mov	r0, r2
    422e:	str	r2, [r4, #0]
    4230:	b.n	3bf6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x14d6>
    4232:	add.w	r2, r6, #544	; 0x220
    4236:	mov	r0, r2
    4238:	str	r2, [r4, #0]
    423a:	b.n	3b8c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x146c>
    423c:	add.w	r2, r6, #544	; 0x220
    4240:	mov	r0, r2
    4242:	str	r2, [r4, #0]
    4244:	b.n	3b24 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1404>
    4246:	add.w	r2, r6, #544	; 0x220
    424a:	mov	r0, r2
    424c:	str	r2, [r4, #0]
    424e:	b.n	3aba <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x139a>
    4250:	add.w	r2, r6, #544	; 0x220
    4254:	mov	r0, r2
    4256:	str	r2, [r4, #0]
    4258:	b.w	3a4e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x132e>
    425c:	add.w	r2, r0, #544	; 0x220
    4260:	ldr	r4, [pc, #520]	; (446c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1d4c>)
    4262:	mov	r0, r2
    4264:	str	r2, [r4, #0]
    4266:	b.w	2836 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x116>
    426a:	add.w	r2, r6, #544	; 0x220
    426e:	mov	r0, r2
    4270:	str	r2, [r4, #0]
    4272:	b.w	38aa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x118a>
    4276:	add.w	r2, r0, #544	; 0x220
    427a:	ldr	r4, [pc, #496]	; (446c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1d4c>)
    427c:	mov	r0, r2
    427e:	str	r2, [r4, #0]
    4280:	b.w	2938 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x218>
    4284:	add.w	r2, r6, #544	; 0x220
    4288:	mov	r0, r2
    428a:	str	r2, [r4, #0]
    428c:	b.w	3698 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf78>
    4290:	add.w	r2, r6, #544	; 0x220
    4294:	mov	r0, r2
    4296:	str	r2, [r4, #0]
    4298:	b.w	3628 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf08>
    429c:	add.w	r2, r0, #544	; 0x220
    42a0:	ldr	r4, [pc, #456]	; (446c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1d4c>)
    42a2:	mov	r0, r2
    42a4:	str	r2, [r4, #0]
    42a6:	b.w	35ba <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe9a>
    42aa:	add.w	r2, r6, #544	; 0x220
    42ae:	mov	r0, r2
    42b0:	str	r2, [r4, #0]
    42b2:	b.w	32e8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbc8>
    42b6:	add.w	r2, r6, #544	; 0x220
    42ba:	mov	r0, r2
    42bc:	str	r2, [r4, #0]
    42be:	b.w	348c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xd6c>
    42c2:	add.w	r2, r6, #544	; 0x220
    42c6:	mov	r0, r2
    42c8:	str	r2, [r4, #0]
    42ca:	b.w	3422 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xd02>
    42ce:	add.w	r2, r6, #544	; 0x220
    42d2:	mov	r0, r2
    42d4:	str	r2, [r4, #0]
    42d6:	b.w	33b8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc98>
    42da:	add.w	r2, r0, #544	; 0x220
    42de:	ldr	r4, [pc, #396]	; (446c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1d4c>)
    42e0:	mov	r0, r2
    42e2:	str	r2, [r4, #0]
    42e4:	b.w	3348 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc28>
    42e8:	add.w	r2, r6, #544	; 0x220
    42ec:	mov	r0, r2
    42ee:	str	r2, [r4, #0]
    42f0:	b.n	414c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1a2c>
    42f2:	add.w	r2, r6, #544	; 0x220
    42f6:	mov	r0, r2
    42f8:	str	r2, [r4, #0]
    42fa:	b.w	34f4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xdd4>
    42fe:	add.w	r2, r6, #544	; 0x220
    4302:	mov	r0, r2
    4304:	str	r2, [r4, #0]
    4306:	b.w	31ae <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xa8e>
    430a:	add.w	r2, r6, #544	; 0x220
    430e:	mov	r0, r2
    4310:	str	r2, [r4, #0]
    4312:	b.w	3144 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xa24>
    4316:	add.w	r2, r6, #544	; 0x220
    431a:	mov	r0, r2
    431c:	str	r2, [r4, #0]
    431e:	b.w	2d32 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x612>
    4322:	add.w	r2, r0, #544	; 0x220
    4326:	ldr	r4, [pc, #324]	; (446c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1d4c>)
    4328:	mov	r0, r2
    432a:	str	r2, [r4, #0]
    432c:	b.w	2a20 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x300>
    4330:	add.w	r2, r6, #544	; 0x220
    4334:	mov	r0, r2
    4336:	str	r2, [r4, #0]
    4338:	b.w	2b18 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3f8>
    433c:	add.w	r2, r0, #544	; 0x220
    4340:	ldr	r4, [pc, #296]	; (446c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1d4c>)
    4342:	mov	r0, r2
    4344:	str	r2, [r4, #0]
    4346:	b.w	29ac <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x28c>
    434a:	add.w	r2, r6, #544	; 0x220
    434e:	mov	r0, r2
    4350:	str	r2, [r4, #0]
    4352:	b.n	3edc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17bc>
    4354:	add.w	r2, r6, #544	; 0x220
    4358:	mov	r0, r2
    435a:	str	r2, [r4, #0]
    435c:	b.w	2aae <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x38e>
    4360:	add.w	r2, r6, #544	; 0x220
    4364:	mov	r0, r2
    4366:	str	r2, [r4, #0]
    4368:	b.n	3ccc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x15ac>
    436a:	add.w	r2, r0, #544	; 0x220
    436e:	ldr	r4, [pc, #252]	; (446c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1d4c>)
    4370:	mov	r0, r2
    4372:	str	r2, [r4, #0]
    4374:	b.w	28c4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1a4>
    4378:	add.w	r2, r6, #544	; 0x220
    437c:	mov	r0, r2
    437e:	str	r2, [r4, #0]
    4380:	b.w	3842 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1122>
    4384:	add.w	r2, r6, #544	; 0x220
    4388:	mov	r0, r2
    438a:	str	r2, [r4, #0]
    438c:	b.w	37d8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x10b8>
    4390:	add.w	r2, r6, #544	; 0x220
    4394:	mov	r0, r2
    4396:	str	r2, [r4, #0]
    4398:	b.w	3770 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1050>
    439c:	add.w	r2, r6, #544	; 0x220
    43a0:	mov	r0, r2
    43a2:	str	r2, [r4, #0]
    43a4:	b.w	3704 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xfe4>
    43a8:	add.w	r2, r6, #544	; 0x220
    43ac:	mov	r0, r2
    43ae:	str	r2, [r4, #0]
    43b0:	b.n	4016 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x18f6>
    43b2:	add.w	r2, r6, #544	; 0x220
    43b6:	mov	r0, r2
    43b8:	str	r2, [r4, #0]
    43ba:	b.w	3278 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb58>
    43be:	add.w	r2, r0, #544	; 0x220
    43c2:	ldr	r4, [pc, #168]	; (446c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1d4c>)
    43c4:	mov	r0, r2
    43c6:	str	r2, [r4, #0]
    43c8:	b.w	320a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xaea>
    43cc:	add.w	r2, r6, #544	; 0x220
    43d0:	mov	r0, r2
    43d2:	str	r2, [r4, #0]
    43d4:	b.w	2f3e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x81e>
    43d8:	add.w	r2, r6, #544	; 0x220
    43dc:	mov	r0, r2
    43de:	str	r2, [r4, #0]
    43e0:	b.w	30dc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x9bc>
    43e4:	add.w	r2, r6, #544	; 0x220
    43e8:	mov	r0, r2
    43ea:	str	r2, [r4, #0]
    43ec:	b.w	3072 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x952>
    43f0:	add.w	r2, r6, #544	; 0x220
    43f4:	mov	r0, r2
    43f6:	str	r2, [r4, #0]
    43f8:	b.w	3008 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x8e8>
    43fc:	add.w	r2, r0, #544	; 0x220
    4400:	ldr	r4, [pc, #104]	; (446c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1d4c>)
    4402:	mov	r0, r2
    4404:	str	r2, [r4, #0]
    4406:	b.w	2f9a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x87a>
    440a:	add.w	r2, r6, #544	; 0x220
    440e:	mov	r0, r2
    4410:	str	r2, [r4, #0]
    4412:	b.w	2ed4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x7b4>
    4416:	add.w	r2, r6, #544	; 0x220
    441a:	mov	r0, r2
    441c:	str	r2, [r4, #0]
    441e:	b.w	2e6c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x74c>
    4422:	add.w	r2, r6, #544	; 0x220
    4426:	mov	r0, r2
    4428:	str	r2, [r4, #0]
    442a:	b.w	2e04 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6e4>
    442e:	add.w	r2, r6, #544	; 0x220
    4432:	mov	r0, r2
    4434:	str	r2, [r4, #0]
    4436:	b.w	2d9a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x67a>
    443a:	add.w	r2, r6, #544	; 0x220
    443e:	mov	r0, r2
    4440:	str	r2, [r4, #0]
    4442:	b.w	2cc8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x5a8>
    4446:	add.w	r2, r6, #544	; 0x220
    444a:	mov	r0, r2
    444c:	str	r2, [r4, #0]
    444e:	b.w	2c60 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x540>
    4452:	add.w	r2, r6, #544	; 0x220
    4456:	mov	r0, r2
    4458:	str	r2, [r4, #0]
    445a:	b.w	2bf6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x4d6>
    445e:	add.w	r2, r6, #544	; 0x220
    4462:	mov	r0, r2
    4464:	str	r2, [r4, #0]
    4466:	b.w	2b8c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x46c>
    446a:	nop
    446c:	.word	0x20004204

00004470 <MTPD::getObjectPropValue(unsigned long, unsigned long)>:
        default:
          break;
      }
    }

    void getObjectPropValue(uint32_t p1, uint32_t p2)
    4470:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4474:	ldr	r3, [pc, #676]	; (471c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x2ac>)
    4476:	sub	sp, #332	; 0x14c
    4478:	mov	r4, r2
    447a:	mov	r5, r0
    { return (uint64_t)512 *(uint64_t)(zFs_[0].totalSectors() - zFs_[0].eofSector()); }

    char * getName(uint32_t store) {return zFs_[0].getName();}

    uint32_t Info(uint32_t handle, char *filename, uint32_t *size, uint32_t *parent)
    { return zFs_[0].Info(handle, filename, size, parent);}
    447c:	ldr	r6, [r3, #80]	; 0x50
    447e:	add.w	r8, sp, #36	; 0x24
    4482:	add	r3, sp, #32
    4484:	add	r2, sp, #72	; 0x48
    4486:	mov	r0, r6
    4488:	str.w	r8, [sp]
        default:
          break;
      }
    }

    void getObjectPropValue(uint32_t p1, uint32_t p2)
    448c:	mov	r6, r1
    { return (uint64_t)512 *(uint64_t)(zFs_[0].totalSectors() - zFs_[0].eofSector()); }

    char * getName(uint32_t store) {return zFs_[0].getName();}

    uint32_t Info(uint32_t handle, char *filename, uint32_t *size, uint32_t *parent)
    { return zFs_[0].Info(handle, filename, size, parent);}
    448e:	bl	6f10 <zeroFS_class::Info(unsigned long, char*, unsigned long*, unsigned long*)>
      uint16_t store = 0;
      uint32_t storage = Store2Storage(store);

      uint32_t dir = (size == 0xFFFFFFFFUL);

      switch(p2)
    4492:	mvn.w	r3, #56320	; 0xdc00
      mFS.Info(p1, filename, &size, &parent);

      uint16_t store = 0;
      uint32_t storage = Store2Storage(store);

      uint32_t dir = (size == 0xFFFFFFFFUL);
    4496:	ldr	r2, [sp, #32]

      switch(p2)
    4498:	add	r3, r4
    449a:	cmp	r3, #67	; 0x43
    449c:	bhi.n	453c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xcc>
    449e:	tbh	[pc, r3, lsl #1]
    44a2:	.short	0x0044
    44a4:	.word	0x009e008c
    44a8:	.word	0x004d00a9
    44ac:	.word	0x00b1004d
    44b0:	.word	0x0141012f
    44b4:	.word	0x00ed004d
    44b8:	.word	0x004d004d
    44bc:	.word	0x004d004d
    44c0:	.word	0x004d004d
    44c4:	.word	0x004d004d
    44c8:	.word	0x004d004d
    44cc:	.word	0x004d004d
    44d0:	.word	0x004d004d
    44d4:	.word	0x004d004d
    44d8:	.word	0x004d004d
    44dc:	.word	0x004d004d
    44e0:	.word	0x004d004d
    44e4:	.word	0x004d004d
    44e8:	.word	0x004d004d
    44ec:	.word	0x004d004d
    44f0:	.word	0x004d004d
    44f4:	.word	0x004d004d
    44f8:	.word	0x004d004d
    44fc:	.word	0x004d004d
    4500:	.word	0x004d004d
    4504:	.word	0x004d004d
    4508:	.word	0x004d004d
    450c:	.word	0x004d004d
    4510:	.word	0x004d004d
    4514:	.word	0x004d004d
    4518:	.word	0x004d004d
    451c:	.word	0x004d004d
    4520:	.word	0x0125004d
    4524:	.word	0x004d004d
    4528:	.short	0x0050
    452a:	movs	r2, #1
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    452c:	ldrb	r3, [r5, #0]
    452e:	str	r2, [sp, #40]	; 0x28
    4530:	cmp	r3, #0
    4532:	beq.w	4a96 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x626>
      {
        write_length_ += len;
    4536:	ldr	r3, [r5, #4]
    4538:	adds	r3, #4
    453a:	str	r3, [r5, #4]
          writestring(filename);
          break;
        default:
          break;
      }
    }
    453c:	add	sp, #332	; 0x14c
    453e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  #define Store2Storage(x) (x+1)
  #define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    4542:	ldrb.w	r4, [sp, #72]	; 0x48
    4546:	cmp	r4, #0
    4548:	bne.w	4830 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x3c0>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    454c:	ldrb	r3, [r5, #0]
    454e:	strb.w	r4, [sp, #18]
    4552:	cmp	r3, #0
    4554:	bne.w	470e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x29e>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    4558:	ldr	r3, [r5, #4]
    455a:	cmp	r3, #0
    455c:	beq.w	4ef8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xa88>
    4560:	ldr	r4, [pc, #444]	; (4720 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x2b0>)
    4562:	ldr	r0, [r4, #0]
        write_length_ += len;
    4564:	adds	r3, #1
        
        const char * src=data;
    4566:	add.w	r6, sp, #18
    456a:	add.w	r7, r5, #1056	; 0x420
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    456e:	add.w	r8, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    4572:	str	r3, [r5, #4]
        
        const char * src=data;
        //
        int pos = 0; // into data
    4574:	mov.w	r9, #0
    4578:	b.n	4582 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x112>
        while(pos<len)
    457a:	cmp.w	r9, #0
    457e:	bgt.n	453c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xcc>
    4580:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4582:	subs	r5, r7, r0
    4584:	rsb	r3, r9, #1
          memcpy(dst,src,to_copy);
    4588:	mov	r1, r6
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    458a:	cmp	r5, r3
    458c:	it	ge
    458e:	movge	r5, r3
          memcpy(dst,src,to_copy);
    4590:	mov	r2, r5
          pos += to_copy;
    4592:	add	r9, r5
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    4594:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4598:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    459a:	add	r6, r5
          dst += to_copy;
    459c:	add	r5, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    459e:	cmp	r5, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    45a0:	str	r5, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    45a2:	bne.n	457a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x10a>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    45a4:	movs	r2, #60	; 0x3c
    45a6:	mov.w	r1, #512	; 0x200
    45aa:	mov	r0, r8
    45ac:	bl	a270 <usb_mtp_send>
    45b0:	cmp	r0, #0
    45b2:	ble.n	45a4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x134>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    45b4:	str.w	r8, [r4]
    45b8:	b.n	457a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x10a>
      {
        case MTP_PROPERTY_STORAGE_ID:         //0xDC01:
          write32(storage);
          break;
        case MTP_PROPERTY_OBJECT_FORMAT:      //0xDC02:
          write16(dir?0x3001:0x3000);
    45ba:	adds	r2, #1
    45bc:	movw	r3, #12289	; 0x3001
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    45c0:	ldrb	r2, [r5, #0]
      {
        case MTP_PROPERTY_STORAGE_ID:         //0xDC01:
          write32(storage);
          break;
        case MTP_PROPERTY_OBJECT_FORMAT:      //0xDC02:
          write16(dir?0x3001:0x3000);
    45c2:	it	ne
    45c4:	movne.w	r3, #12288	; 0x3000
    45c8:	strh.w	r3, [sp, #20]
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    45cc:	ldr	r3, [r5, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    45ce:	cmp	r2, #0
    45d0:	beq.w	4b5c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x6ec>
      {
        write_length_ += len;
    45d4:	adds	r3, #2
    45d6:	str	r3, [r5, #4]
          writestring(filename);
          break;
        default:
          break;
      }
    }
    45d8:	add	sp, #332	; 0x14c
    45da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    45de:	movs	r2, #0
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    45e0:	ldrb	r3, [r5, #0]
    45e2:	strh.w	r2, [sp, #22]
    45e6:	cmp	r3, #0
    45e8:	beq.w	4af8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x688>
      {
        write_length_ += len;
    45ec:	ldr	r3, [r5, #4]
    45ee:	adds	r3, #2
    45f0:	str	r3, [r5, #4]
    45f2:	b.n	453c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xcc>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    45f4:	ldrb	r3, [r5, #0]
    45f6:	str	r2, [sp, #48]	; 0x30
    45f8:	cmp	r3, #0
    45fa:	beq.w	49c8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x558>
      {
        write_length_ += len;
    45fe:	ldr	r3, [r5, #4]
    4600:	adds	r3, #4
    4602:	b.n	4538 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xc8>

  #define Store2Storage(x) (x+1)
  #define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    4604:	ldrb.w	r4, [sp, #72]	; 0x48
    4608:	cmp	r4, #0
    460a:	bne.w	4794 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x324>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    460e:	ldrb	r3, [r5, #0]
    4610:	strb.w	r4, [sp, #14]
    4614:	cmp	r3, #0
    4616:	bne.n	470e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x29e>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    4618:	ldr	r3, [r5, #4]
    461a:	cmp	r3, #0
    461c:	beq.w	4f12 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xaa2>
    4620:	ldr	r4, [pc, #252]	; (4720 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x2b0>)
    4622:	ldr	r0, [r4, #0]
        write_length_ += len;
    4624:	adds	r3, #1
        
        const char * src=data;
    4626:	add.w	r6, sp, #14
    462a:	add.w	r7, r5, #1056	; 0x420
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    462e:	add.w	r8, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    4632:	str	r3, [r5, #4]
        
        const char * src=data;
        //
        int pos = 0; // into data
    4634:	mov.w	r9, #0
    4638:	b.n	4644 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1d4>
        while(pos<len)
    463a:	cmp.w	r9, #0
    463e:	bgt.w	453c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xcc>
    4642:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4644:	subs	r5, r7, r0
    4646:	rsb	r3, r9, #1
          memcpy(dst,src,to_copy);
    464a:	mov	r1, r6
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    464c:	cmp	r5, r3
    464e:	it	ge
    4650:	movge	r5, r3
          memcpy(dst,src,to_copy);
    4652:	mov	r2, r5
          pos += to_copy;
    4654:	add	r9, r5
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    4656:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    465a:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    465c:	add	r6, r5
          dst += to_copy;
    465e:	add	r5, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4660:	cmp	r5, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4662:	str	r5, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4664:	bne.n	463a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1ca>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    4666:	movs	r2, #60	; 0x3c
    4668:	mov.w	r1, #512	; 0x200
    466c:	mov	r0, r8
    466e:	bl	a270 <usb_mtp_send>
    4672:	cmp	r0, #0
    4674:	ble.n	4666 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1f6>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    4676:	str.w	r8, [r4]
    467a:	b.n	463a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1ca>
    467c:	ldr.w	r2, [r8]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    4680:	ldrb	r3, [r5, #0]
    4682:	str	r2, [sp, #52]	; 0x34
    4684:	cmp	r3, #0
    4686:	bne.w	4536 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xc6>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    468a:	ldr	r3, [r5, #4]
    468c:	cmp	r3, #0
    468e:	beq.w	4ede <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xa6e>
    4692:	ldr	r4, [pc, #140]	; (4720 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x2b0>)
    4694:	ldr	r0, [r4, #0]
        write_length_ += len;
    4696:	adds	r3, #4
        
        const char * src=data;
    4698:	add	r6, sp, #52	; 0x34
    469a:	add.w	r7, r5, #1056	; 0x420
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    469e:	add.w	r8, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    46a2:	str	r3, [r5, #4]
        
        const char * src=data;
        //
        int pos = 0; // into data
    46a4:	mov.w	r9, #0
    46a8:	b.n	46b4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x244>
        while(pos<len)
    46aa:	cmp.w	r9, #3
    46ae:	bgt.w	453c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xcc>
    46b2:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    46b4:	subs	r5, r7, r0
    46b6:	rsb	r3, r9, #4
          memcpy(dst,src,to_copy);
    46ba:	mov	r1, r6
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    46bc:	cmp	r5, r3
    46be:	it	ge
    46c0:	movge	r5, r3
          memcpy(dst,src,to_copy);
    46c2:	mov	r2, r5
          pos += to_copy;
    46c4:	add	r9, r5
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    46c6:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    46ca:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    46cc:	add	r6, r5
          dst += to_copy;
    46ce:	add	r5, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    46d0:	cmp	r5, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    46d2:	str	r5, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    46d4:	bne.n	46aa <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x23a>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    46d6:	movs	r2, #60	; 0x3c
    46d8:	mov.w	r1, #512	; 0x200
    46dc:	mov	r0, r8
    46de:	bl	a270 <usb_mtp_send>
    46e2:	cmp	r0, #0
    46e4:	ble.n	46d6 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x266>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    46e6:	str.w	r8, [r4]
    46ea:	b.n	46aa <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x23a>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    46ec:	ldrb	r3, [r5, #0]
    46ee:	str	r6, [sp, #60]	; 0x3c
    46f0:	cmp	r3, #0
    46f2:	beq.w	4bbc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x74c>
      {
        write_length_ += len;
    46f6:	ldr	r3, [r5, #4]
    46f8:	adds	r3, #4
    46fa:	adds	r3, #4
    46fc:	adds	r3, #4
    46fe:	b.n	4538 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xc8>
    4700:	movs	r2, #0
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    4702:	ldrb	r3, [r5, #0]
    4704:	strb.w	r2, [sp, #16]
    4708:	cmp	r3, #0
    470a:	beq.w	4d54 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x8e4>
      {
        write_length_ += len;
    470e:	ldr	r3, [r5, #4]
    4710:	adds	r3, #1
    4712:	str	r3, [r5, #4]
          writestring(filename);
          break;
        default:
          break;
      }
    }
    4714:	add	sp, #332	; 0x14c
    4716:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    471a:	nop
    471c:	.word	0x2000c250
    4720:	.word	0x20004204
    4724:	movs	r2, #0
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    4726:	ldrb	r3, [r5, #0]
    4728:	strb.w	r2, [sp, #17]
    472c:	cmp	r3, #0
    472e:	bne.n	470e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x29e>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    4730:	ldr	r3, [r5, #4]
    4732:	cmp	r3, #0
    4734:	beq.w	4eec <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xa7c>
    4738:	ldr	r4, [pc, #752]	; (4a2c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x5bc>)
    473a:	ldr	r0, [r4, #0]
        write_length_ += len;
    473c:	adds	r3, #1
        
        const char * src=data;
    473e:	add.w	r6, sp, #17
    4742:	add.w	r7, r5, #1056	; 0x420
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4746:	add.w	r8, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    474a:	str	r3, [r5, #4]
        
        const char * src=data;
        //
        int pos = 0; // into data
    474c:	mov.w	r9, #0
    4750:	b.n	475c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x2ec>
        while(pos<len)
    4752:	cmp.w	r9, #0
    4756:	bgt.w	453c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xcc>
    475a:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    475c:	subs	r5, r7, r0
    475e:	rsb	r3, r9, #1
          memcpy(dst,src,to_copy);
    4762:	mov	r1, r6
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4764:	cmp	r5, r3
    4766:	it	ge
    4768:	movge	r5, r3
          memcpy(dst,src,to_copy);
    476a:	mov	r2, r5
          pos += to_copy;
    476c:	add	r9, r5
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    476e:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4772:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    4774:	add	r6, r5
          dst += to_copy;
    4776:	add	r5, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4778:	cmp	r5, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    477a:	str	r5, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    477c:	bne.n	4752 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x2e2>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    477e:	movs	r2, #60	; 0x3c
    4780:	mov.w	r1, #512	; 0x200
    4784:	mov	r0, r8
    4786:	bl	a270 <usb_mtp_send>
    478a:	cmp	r0, #0
    478c:	ble.n	477e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x30e>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    478e:	str.w	r8, [r4]
    4792:	b.n	4752 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x2e2>
  #define Store2Storage(x) (x+1)
  #define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
    4794:	add	r0, sp, #72	; 0x48
    4796:	bl	c280 <strlen>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    479a:	ldrb	r2, [r5, #0]
    479c:	adds	r0, #1
      {
        write_length_ += len;
    479e:	ldr	r3, [r5, #4]
    47a0:	strb.w	r0, [sp, #15]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    47a4:	cmp	r2, #0
    47a6:	beq.w	4df2 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x982>
      {
        write_length_ += len;
    47aa:	adds	r3, #1
    47ac:	str	r3, [r5, #4]
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
    47ae:	add.w	r8, sp, #72	; 0x48
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    47b2:	add.w	sl, r5, #544	; 0x220
    47b6:	b.n	47c6 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x356>
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    47b8:	adds	r3, #2
    47ba:	str	r3, [r5, #4]
  #define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    47bc:	ldrb.w	r4, [r8, #1]!
    47c0:	cmp	r4, #0
    47c2:	beq.w	495c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x4ec>
    47c6:	strh.w	r4, [sp, #26]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    47ca:	cmp	r2, #0
    47cc:	bne.n	47b8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x348>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    47ce:	ldr	r4, [pc, #604]	; (4a2c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x5bc>)
    47d0:	cmp	r3, #0
    47d2:	beq.n	48c6 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x456>
    47d4:	ldr	r0, [r4, #0]
        write_length_ += len;
    47d6:	adds	r3, #2
    47d8:	add.w	r9, r5, #1056	; 0x420
        
        const char * src=data;
    47dc:	add.w	r7, sp, #26
        //
        int pos = 0; // into data
    47e0:	movs	r6, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    47e2:	str	r3, [r5, #4]
    47e4:	b.n	47ec <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x37c>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    47e6:	cmp	r6, #1
    47e8:	bgt.n	482a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x3ba>
    47ea:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    47ec:	rsb	r2, r0, r9
    47f0:	rsb	r3, r6, #2
          memcpy(dst,src,to_copy);
    47f4:	mov	r1, r7
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    47f6:	cmp	r2, r3
    47f8:	it	ge
    47fa:	movge	r2, r3
    47fc:	mov	fp, r2
          memcpy(dst,src,to_copy);
          pos += to_copy;
    47fe:	add	r6, r2
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    4800:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4804:	ldr	r2, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    4806:	add	r7, fp
          dst += to_copy;
    4808:	add.w	r3, r2, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    480c:	cmp	r3, r9
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    480e:	str	r3, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4810:	bne.n	47e6 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x376>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    4812:	movs	r2, #60	; 0x3c
    4814:	mov.w	r1, #512	; 0x200
    4818:	mov	r0, sl
    481a:	bl	a270 <usb_mtp_send>
    481e:	cmp	r0, #0
    4820:	ble.n	4812 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x3a2>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    4822:	cmp	r6, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    4824:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    4828:	ble.n	47ea <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x37a>
    482a:	ldrb	r2, [r5, #0]
    482c:	ldr	r3, [r5, #4]
    482e:	b.n	47bc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x34c>
  #define Store2Storage(x) (x+1)
  #define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
    4830:	add	r0, sp, #72	; 0x48
    4832:	bl	c280 <strlen>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    4836:	ldrb	r2, [r5, #0]
    4838:	adds	r0, #1
      {
        write_length_ += len;
    483a:	ldr	r3, [r5, #4]
    483c:	strb.w	r0, [sp, #19]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    4840:	cmp	r2, #0
    4842:	beq.w	4e52 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x9e2>
      {
        write_length_ += len;
    4846:	adds	r3, #1
    4848:	str	r3, [r5, #4]
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
    484a:	add	r7, sp, #72	; 0x48
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    484c:	add.w	sl, r5, #544	; 0x220
    4850:	b.n	485e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x3ee>
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    4852:	adds	r3, #2
    4854:	str	r3, [r5, #4]
  #define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    4856:	ldrb.w	r4, [r7, #1]!
    485a:	cmp	r4, #0
    485c:	beq.n	48e2 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x472>
    485e:	strh.w	r4, [sp, #30]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    4862:	cmp	r2, #0
    4864:	bne.n	4852 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x3e2>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    4866:	ldr	r4, [pc, #452]	; (4a2c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x5bc>)
    4868:	cbz	r3, 48ce <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x45e>
    486a:	ldr	r0, [r4, #0]
        write_length_ += len;
    486c:	adds	r3, #2
    486e:	add.w	r9, r5, #1056	; 0x420
        
        const char * src=data;
    4872:	add.w	r8, sp, #30
        //
        int pos = 0; // into data
    4876:	movs	r6, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    4878:	str	r3, [r5, #4]
    487a:	b.n	4882 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x412>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    487c:	cmp	r6, #1
    487e:	bgt.n	48c0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x450>
    4880:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4882:	rsb	r2, r0, r9
    4886:	rsb	r3, r6, #2
          memcpy(dst,src,to_copy);
    488a:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    488c:	cmp	r2, r3
    488e:	it	ge
    4890:	movge	r2, r3
    4892:	mov	fp, r2
          memcpy(dst,src,to_copy);
          pos += to_copy;
    4894:	add	r6, r2
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    4896:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    489a:	ldr	r2, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    489c:	add	r8, fp
          dst += to_copy;
    489e:	add.w	r3, r2, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    48a2:	cmp	r3, r9
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    48a4:	str	r3, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    48a6:	bne.n	487c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x40c>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    48a8:	movs	r2, #60	; 0x3c
    48aa:	mov.w	r1, #512	; 0x200
    48ae:	mov	r0, sl
    48b0:	bl	a270 <usb_mtp_send>
    48b4:	cmp	r0, #0
    48b6:	ble.n	48a8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x438>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    48b8:	cmp	r6, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    48ba:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    48be:	ble.n	4880 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x410>
    48c0:	ldrb	r2, [r5, #0]
    48c2:	ldr	r3, [r5, #4]
    48c4:	b.n	4856 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x3e6>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    48c6:	mov	r0, sl
    48c8:	str.w	sl, [r4]
    48cc:	b.n	47d6 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x366>
    48ce:	mov	r0, sl
    48d0:	str.w	sl, [r4]
    48d4:	b.n	486c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x3fc>
  #define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    48d6:	ldrb.w	r4, [sp, #72]	; 0x48
    48da:	ldrb	r2, [r5, #0]
    48dc:	ldr	r3, [r5, #4]
    48de:	cmp	r4, #0
    48e0:	bne.n	484a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x3da>
    48e2:	movs	r1, #0
    48e4:	strh.w	r1, [sp, #28]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    48e8:	cmp	r2, #0
    48ea:	bne.w	45d4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x164>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    48ee:	cmp	r3, #0
    48f0:	beq.w	4f44 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xad4>
    48f4:	ldr	r4, [pc, #308]	; (4a2c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x5bc>)
    48f6:	ldr	r0, [r4, #0]
        write_length_ += len;
    48f8:	adds	r3, #2
        
        const char * src=data;
    48fa:	add	r6, sp, #28
    48fc:	add.w	r7, r5, #1056	; 0x420
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4900:	add.w	r8, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    4904:	str	r3, [r5, #4]
        
        const char * src=data;
        //
        int pos = 0; // into data
    4906:	mov.w	r9, #0
    490a:	b.n	4916 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x4a6>
        while(pos<len)
    490c:	cmp.w	r9, #1
    4910:	bgt.w	453c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xcc>
    4914:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4916:	subs	r5, r7, r0
    4918:	rsb	r3, r9, #2
          memcpy(dst,src,to_copy);
    491c:	mov	r1, r6
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    491e:	cmp	r5, r3
    4920:	it	ge
    4922:	movge	r5, r3
          memcpy(dst,src,to_copy);
    4924:	mov	r2, r5
          pos += to_copy;
    4926:	add	r9, r5
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    4928:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    492c:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    492e:	add	r6, r5
          dst += to_copy;
    4930:	add	r5, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4932:	cmp	r5, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4934:	str	r5, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4936:	bne.n	490c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x49c>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    4938:	movs	r2, #60	; 0x3c
    493a:	mov.w	r1, #512	; 0x200
    493e:	mov	r0, r8
    4940:	bl	a270 <usb_mtp_send>
    4944:	cmp	r0, #0
    4946:	ble.n	4938 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x4c8>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    4948:	str.w	r8, [r4]
    494c:	b.n	490c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x49c>
  #define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    494e:	ldrb.w	r4, [sp, #72]	; 0x48
    4952:	ldrb	r2, [r5, #0]
    4954:	ldr	r3, [r5, #4]
    4956:	cmp	r4, #0
    4958:	bne.w	47ae <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x33e>
    495c:	movs	r1, #0
    495e:	strh.w	r1, [sp, #24]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    4962:	cmp	r2, #0
    4964:	bne.w	45d4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x164>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    4968:	cmp	r3, #0
    496a:	beq.w	4f2c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xabc>
    496e:	ldr	r4, [pc, #188]	; (4a2c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x5bc>)
    4970:	ldr	r0, [r4, #0]
        write_length_ += len;
    4972:	adds	r3, #2
        
        const char * src=data;
    4974:	add	r6, sp, #24
    4976:	add.w	r7, r5, #1056	; 0x420
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    497a:	add.w	r8, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    497e:	str	r3, [r5, #4]
        
        const char * src=data;
        //
        int pos = 0; // into data
    4980:	mov.w	r9, #0
    4984:	b.n	4990 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x520>
        while(pos<len)
    4986:	cmp.w	r9, #1
    498a:	bgt.w	453c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xcc>
    498e:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4990:	subs	r5, r7, r0
    4992:	rsb	r3, r9, #2
          memcpy(dst,src,to_copy);
    4996:	mov	r1, r6
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4998:	cmp	r5, r3
    499a:	it	ge
    499c:	movge	r5, r3
          memcpy(dst,src,to_copy);
    499e:	mov	r2, r5
          pos += to_copy;
    49a0:	add	r9, r5
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    49a2:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    49a6:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    49a8:	add	r6, r5
          dst += to_copy;
    49aa:	add	r5, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    49ac:	cmp	r5, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    49ae:	str	r5, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    49b0:	bne.n	4986 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x516>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    49b2:	movs	r2, #60	; 0x3c
    49b4:	mov.w	r1, #512	; 0x200
    49b8:	mov	r0, r8
    49ba:	bl	a270 <usb_mtp_send>
    49be:	cmp	r0, #0
    49c0:	ble.n	49b2 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x542>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    49c2:	str.w	r8, [r4]
    49c6:	b.n	4986 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x516>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    49c8:	ldr	r3, [r5, #4]
    49ca:	cmp	r3, #0
    49cc:	beq.w	4dbc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x94c>
    49d0:	ldr	r4, [pc, #88]	; (4a2c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x5bc>)
    49d2:	ldr	r0, [r4, #0]
        write_length_ += len;
    49d4:	adds	r3, #4
        
        const char * src=data;
    49d6:	add.w	r9, sp, #48	; 0x30
    49da:	add.w	r6, r5, #1056	; 0x420
        //
        int pos = 0; // into data
    49de:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    49e2:	str	r3, [r5, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    49e4:	add.w	sl, r5, #544	; 0x220
    49e8:	b.n	49f2 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x582>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    49ea:	cmp.w	r8, #3
    49ee:	bgt.n	4a30 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x5c0>
    49f0:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    49f2:	subs	r7, r6, r0
    49f4:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    49f8:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    49fa:	cmp	r7, r3
    49fc:	it	ge
    49fe:	movge	r7, r3
          memcpy(dst,src,to_copy);
    4a00:	mov	r2, r7
          pos += to_copy;
    4a02:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    4a04:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4a08:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    4a0a:	add	r9, r7
          dst += to_copy;
    4a0c:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4a0e:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4a10:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4a12:	bne.n	49ea <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x57a>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    4a14:	movs	r2, #60	; 0x3c
    4a16:	mov.w	r1, #512	; 0x200
    4a1a:	mov	r0, sl
    4a1c:	bl	a270 <usb_mtp_send>
    4a20:	cmp	r0, #0
    4a22:	ble.n	4a14 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x5a4>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    4a24:	str.w	sl, [r4]
    4a28:	b.n	49ea <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x57a>
    4a2a:	nop
    4a2c:	.word	0x20004204
    4a30:	movs	r3, #0
    4a32:	ldrb	r2, [r5, #0]
    4a34:	str	r3, [sp, #44]	; 0x2c
    4a36:	ldr	r3, [r5, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    4a38:	cmp	r2, #0
    4a3a:	bne.w	4538 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xc8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    4a3e:	cmp	r3, #0
    4a40:	beq.w	4ed4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xa64>
    4a44:	ldr	r0, [r4, #0]
        write_length_ += len;
    4a46:	adds	r3, #4
        
        const char * src=data;
    4a48:	add.w	r8, sp, #44	; 0x2c
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4a4c:	add.w	r9, r5, #544	; 0x220
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
    4a50:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    4a52:	str	r3, [r5, #4]
    4a54:	b.n	4a5e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x5ee>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    4a56:	cmp	r7, #3
    4a58:	bgt.w	453c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xcc>
    4a5c:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4a5e:	subs	r5, r6, r0
    4a60:	rsb	r3, r7, #4
          memcpy(dst,src,to_copy);
    4a64:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4a66:	cmp	r5, r3
    4a68:	it	ge
    4a6a:	movge	r5, r3
          memcpy(dst,src,to_copy);
    4a6c:	mov	r2, r5
          pos += to_copy;
    4a6e:	add	r7, r5
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    4a70:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4a74:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    4a76:	add	r8, r5
          dst += to_copy;
    4a78:	add	r5, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4a7a:	cmp	r5, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4a7c:	str	r5, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4a7e:	bne.n	4a56 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x5e6>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    4a80:	movs	r2, #60	; 0x3c
    4a82:	mov.w	r1, #512	; 0x200
    4a86:	mov	r0, r9
    4a88:	bl	a270 <usb_mtp_send>
    4a8c:	cmp	r0, #0
    4a8e:	ble.n	4a80 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x610>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    4a90:	str.w	r9, [r4]
    4a94:	b.n	4a56 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x5e6>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    4a96:	ldr	r3, [r5, #4]
    4a98:	cmp	r3, #0
    4a9a:	beq.w	4ec8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xa58>
    4a9e:	ldr	r4, [pc, #792]	; (4db8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x948>)
    4aa0:	ldr	r0, [r4, #0]
        write_length_ += len;
    4aa2:	adds	r3, #4
        
        const char * src=data;
    4aa4:	add	r6, sp, #40	; 0x28
    4aa6:	add.w	r7, r5, #1056	; 0x420
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4aaa:	add.w	r8, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    4aae:	str	r3, [r5, #4]
        
        const char * src=data;
        //
        int pos = 0; // into data
    4ab0:	mov.w	r9, #0
    4ab4:	b.n	4ac0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x650>
        while(pos<len)
    4ab6:	cmp.w	r9, #3
    4aba:	bgt.w	453c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xcc>
    4abe:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4ac0:	subs	r5, r7, r0
    4ac2:	rsb	r3, r9, #4
          memcpy(dst,src,to_copy);
    4ac6:	mov	r1, r6
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4ac8:	cmp	r5, r3
    4aca:	it	ge
    4acc:	movge	r5, r3
          memcpy(dst,src,to_copy);
    4ace:	mov	r2, r5
          pos += to_copy;
    4ad0:	add	r9, r5
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    4ad2:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4ad6:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    4ad8:	add	r6, r5
          dst += to_copy;
    4ada:	add	r5, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4adc:	cmp	r5, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4ade:	str	r5, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4ae0:	bne.n	4ab6 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x646>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    4ae2:	movs	r2, #60	; 0x3c
    4ae4:	mov.w	r1, #512	; 0x200
    4ae8:	mov	r0, r8
    4aea:	bl	a270 <usb_mtp_send>
    4aee:	cmp	r0, #0
    4af0:	ble.n	4ae2 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x672>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    4af2:	str.w	r8, [r4]
    4af6:	b.n	4ab6 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x646>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    4af8:	ldr	r3, [r5, #4]
    4afa:	cmp	r3, #0
    4afc:	beq.w	4ebc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xa4c>
    4b00:	ldr	r4, [pc, #692]	; (4db8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x948>)
    4b02:	ldr	r0, [r4, #0]
        write_length_ += len;
    4b04:	adds	r3, #2
        
        const char * src=data;
    4b06:	add.w	r6, sp, #22
    4b0a:	add.w	r7, r5, #1056	; 0x420
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4b0e:	add.w	r8, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    4b12:	str	r3, [r5, #4]
        
        const char * src=data;
        //
        int pos = 0; // into data
    4b14:	mov.w	r9, #0
    4b18:	b.n	4b24 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x6b4>
        while(pos<len)
    4b1a:	cmp.w	r9, #1
    4b1e:	bgt.w	453c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xcc>
    4b22:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4b24:	subs	r5, r7, r0
    4b26:	rsb	r3, r9, #2
          memcpy(dst,src,to_copy);
    4b2a:	mov	r1, r6
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4b2c:	cmp	r5, r3
    4b2e:	it	ge
    4b30:	movge	r5, r3
          memcpy(dst,src,to_copy);
    4b32:	mov	r2, r5
          pos += to_copy;
    4b34:	add	r9, r5
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    4b36:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4b3a:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    4b3c:	add	r6, r5
          dst += to_copy;
    4b3e:	add	r5, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4b40:	cmp	r5, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4b42:	str	r5, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4b44:	bne.n	4b1a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x6aa>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    4b46:	movs	r2, #60	; 0x3c
    4b48:	mov.w	r1, #512	; 0x200
    4b4c:	mov	r0, r8
    4b4e:	bl	a270 <usb_mtp_send>
    4b52:	cmp	r0, #0
    4b54:	ble.n	4b46 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x6d6>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    4b56:	str.w	r8, [r4]
    4b5a:	b.n	4b1a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x6aa>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    4b5c:	cmp	r3, #0
    4b5e:	beq.w	4eb0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xa40>
    4b62:	ldr	r4, [pc, #596]	; (4db8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x948>)
    4b64:	ldr	r0, [r4, #0]
        write_length_ += len;
    4b66:	adds	r3, #2
        
        const char * src=data;
    4b68:	add	r6, sp, #20
    4b6a:	add.w	r7, r5, #1056	; 0x420
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4b6e:	add.w	r8, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    4b72:	str	r3, [r5, #4]
        
        const char * src=data;
        //
        int pos = 0; // into data
    4b74:	mov.w	r9, #0
    4b78:	b.n	4b84 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x714>
        while(pos<len)
    4b7a:	cmp.w	r9, #1
    4b7e:	bgt.w	453c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xcc>
    4b82:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4b84:	subs	r5, r7, r0
    4b86:	rsb	r3, r9, #2
          memcpy(dst,src,to_copy);
    4b8a:	mov	r1, r6
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4b8c:	cmp	r5, r3
    4b8e:	it	ge
    4b90:	movge	r5, r3
          memcpy(dst,src,to_copy);
    4b92:	mov	r2, r5
          pos += to_copy;
    4b94:	add	r9, r5
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    4b96:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4b9a:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    4b9c:	add	r6, r5
          dst += to_copy;
    4b9e:	add	r5, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4ba0:	cmp	r5, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4ba2:	str	r5, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4ba4:	bne.n	4b7a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x70a>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    4ba6:	movs	r2, #60	; 0x3c
    4ba8:	mov.w	r1, #512	; 0x200
    4bac:	mov	r0, r8
    4bae:	bl	a270 <usb_mtp_send>
    4bb2:	cmp	r0, #0
    4bb4:	ble.n	4ba6 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x736>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    4bb6:	str.w	r8, [r4]
    4bba:	b.n	4b7a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x70a>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    4bbc:	ldr	r3, [r5, #4]
    4bbe:	cmp	r3, #0
    4bc0:	beq.w	4de6 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x976>
    4bc4:	ldr	r4, [pc, #496]	; (4db8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x948>)
    4bc6:	ldr	r0, [r4, #0]
        write_length_ += len;
    4bc8:	adds	r3, #4
        
        const char * src=data;
    4bca:	add.w	sl, sp, #60	; 0x3c
    4bce:	add.w	r6, r5, #1056	; 0x420
        //
        int pos = 0; // into data
    4bd2:	mov.w	r9, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    4bd6:	str	r3, [r5, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4bd8:	add.w	fp, r5, #544	; 0x220
    4bdc:	b.n	4be6 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x776>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    4bde:	cmp.w	r9, #3
    4be2:	bgt.n	4c1e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x7ae>
    4be4:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4be6:	subs	r7, r6, r0
    4be8:	rsb	r3, r9, #4
          memcpy(dst,src,to_copy);
    4bec:	mov	r1, sl
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4bee:	cmp	r7, r3
    4bf0:	it	ge
    4bf2:	movge	r7, r3
          memcpy(dst,src,to_copy);
    4bf4:	mov	r2, r7
          pos += to_copy;
    4bf6:	add	r9, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    4bf8:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4bfc:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    4bfe:	add	sl, r7
          dst += to_copy;
    4c00:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4c02:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4c04:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4c06:	bne.n	4bde <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x76e>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    4c08:	movs	r2, #60	; 0x3c
    4c0a:	mov.w	r1, #512	; 0x200
    4c0e:	mov	r0, fp
    4c10:	bl	a270 <usb_mtp_send>
    4c14:	cmp	r0, #0
    4c16:	ble.n	4c08 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x798>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    4c18:	str.w	fp, [r4]
    4c1c:	b.n	4bde <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x76e>
    4c1e:	ldr.w	r3, [r8]
    4c22:	ldrb	r2, [r5, #0]
    4c24:	str	r3, [sp, #56]	; 0x38
    4c26:	ldr	r3, [r5, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    4c28:	cmp	r2, #0
    4c2a:	bne.w	46fa <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x28a>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    4c2e:	cmp	r3, #0
    4c30:	beq.w	4ddc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x96c>
    4c34:	ldr	r0, [r4, #0]
        write_length_ += len;
    4c36:	adds	r3, #4
        
        const char * src=data;
    4c38:	add.w	r9, sp, #56	; 0x38
        //
        int pos = 0; // into data
    4c3c:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4c40:	add.w	sl, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    4c44:	str	r3, [r5, #4]
    4c46:	b.n	4c50 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x7e0>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    4c48:	cmp.w	r8, #3
    4c4c:	bgt.n	4c88 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x818>
    4c4e:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4c50:	subs	r7, r6, r0
    4c52:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    4c56:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4c58:	cmp	r7, r3
    4c5a:	it	ge
    4c5c:	movge	r7, r3
          memcpy(dst,src,to_copy);
    4c5e:	mov	r2, r7
          pos += to_copy;
    4c60:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    4c62:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4c66:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    4c68:	add	r9, r7
          dst += to_copy;
    4c6a:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4c6c:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4c6e:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4c70:	bne.n	4c48 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x7d8>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    4c72:	movs	r2, #60	; 0x3c
    4c74:	mov.w	r1, #512	; 0x200
    4c78:	mov	r0, sl
    4c7a:	bl	a270 <usb_mtp_send>
    4c7e:	cmp	r0, #0
    4c80:	ble.n	4c72 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x802>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    4c82:	str.w	sl, [r4]
    4c86:	b.n	4c48 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x7d8>
    4c88:	movs	r3, #1
    4c8a:	ldrb	r2, [r5, #0]
    4c8c:	str	r3, [sp, #64]	; 0x40
    4c8e:	ldr	r3, [r5, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    4c90:	cmp	r2, #0
    4c92:	bne.w	46fc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x28c>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    4c96:	cmp	r3, #0
    4c98:	beq.w	4dd2 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x962>
    4c9c:	ldr	r0, [r4, #0]
        write_length_ += len;
    4c9e:	adds	r3, #4
        
        const char * src=data;
    4ca0:	add.w	r9, sp, #64	; 0x40
        //
        int pos = 0; // into data
    4ca4:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4ca8:	add.w	sl, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    4cac:	str	r3, [r5, #4]
    4cae:	b.n	4cb8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x848>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    4cb0:	cmp.w	r8, #3
    4cb4:	bgt.n	4cf0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x880>
    4cb6:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4cb8:	subs	r7, r6, r0
    4cba:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    4cbe:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4cc0:	cmp	r7, r3
    4cc2:	it	ge
    4cc4:	movge	r7, r3
          memcpy(dst,src,to_copy);
    4cc6:	mov	r2, r7
          pos += to_copy;
    4cc8:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    4cca:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4cce:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    4cd0:	add	r9, r7
          dst += to_copy;
    4cd2:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4cd4:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4cd6:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4cd8:	bne.n	4cb0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x840>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    4cda:	movs	r2, #60	; 0x3c
    4cdc:	mov.w	r1, #512	; 0x200
    4ce0:	mov	r0, sl
    4ce2:	bl	a270 <usb_mtp_send>
    4ce6:	cmp	r0, #0
    4ce8:	ble.n	4cda <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x86a>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    4cea:	str.w	sl, [r4]
    4cee:	b.n	4cb0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x840>
    4cf0:	movs	r3, #0
    4cf2:	ldrb	r2, [r5, #0]
    4cf4:	str	r3, [sp, #68]	; 0x44
    4cf6:	ldr	r3, [r5, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    4cf8:	cmp	r2, #0
    4cfa:	bne.w	4538 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xc8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    4cfe:	cmp	r3, #0
    4d00:	beq.n	4dc8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x958>
    4d02:	ldr	r0, [r4, #0]
        write_length_ += len;
    4d04:	adds	r3, #4
        
        const char * src=data;
    4d06:	add.w	r8, sp, #68	; 0x44
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4d0a:	add.w	r9, r5, #544	; 0x220
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
    4d0e:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    4d10:	str	r3, [r5, #4]
    4d12:	b.n	4d1c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x8ac>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    4d14:	cmp	r7, #3
    4d16:	bgt.w	453c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xcc>
    4d1a:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4d1c:	subs	r5, r6, r0
    4d1e:	rsb	r3, r7, #4
          memcpy(dst,src,to_copy);
    4d22:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4d24:	cmp	r5, r3
    4d26:	it	ge
    4d28:	movge	r5, r3
          memcpy(dst,src,to_copy);
    4d2a:	mov	r2, r5
          pos += to_copy;
    4d2c:	add	r7, r5
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    4d2e:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4d32:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    4d34:	add	r8, r5
          dst += to_copy;
    4d36:	add	r5, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4d38:	cmp	r5, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4d3a:	str	r5, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4d3c:	bne.n	4d14 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x8a4>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    4d3e:	movs	r2, #60	; 0x3c
    4d40:	mov.w	r1, #512	; 0x200
    4d44:	mov	r0, r9
    4d46:	bl	a270 <usb_mtp_send>
    4d4a:	cmp	r0, #0
    4d4c:	ble.n	4d3e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x8ce>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    4d4e:	str.w	r9, [r4]
    4d52:	b.n	4d14 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x8a4>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    4d54:	ldr	r3, [r5, #4]
    4d56:	cmp	r3, #0
    4d58:	beq.w	4f06 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xa96>
    4d5c:	ldr	r4, [pc, #88]	; (4db8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x948>)
    4d5e:	ldr	r0, [r4, #0]
        write_length_ += len;
    4d60:	adds	r3, #1
        
        const char * src=data;
    4d62:	add	r6, sp, #16
    4d64:	add.w	r7, r5, #1056	; 0x420
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4d68:	add.w	r8, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    4d6c:	str	r3, [r5, #4]
        
        const char * src=data;
        //
        int pos = 0; // into data
    4d6e:	mov.w	r9, #0
    4d72:	b.n	4d7e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x90e>
        while(pos<len)
    4d74:	cmp.w	r9, #0
    4d78:	bgt.w	453c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xcc>
    4d7c:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4d7e:	subs	r5, r7, r0
    4d80:	rsb	r3, r9, #1
          memcpy(dst,src,to_copy);
    4d84:	mov	r1, r6
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4d86:	cmp	r5, r3
    4d88:	it	ge
    4d8a:	movge	r5, r3
          memcpy(dst,src,to_copy);
    4d8c:	mov	r2, r5
          pos += to_copy;
    4d8e:	add	r9, r5
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    4d90:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4d94:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    4d96:	add	r6, r5
          dst += to_copy;
    4d98:	add	r5, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4d9a:	cmp	r5, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4d9c:	str	r5, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4d9e:	bne.n	4d74 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x904>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    4da0:	movs	r2, #60	; 0x3c
    4da2:	mov.w	r1, #512	; 0x200
    4da6:	mov	r0, r8
    4da8:	bl	a270 <usb_mtp_send>
    4dac:	cmp	r0, #0
    4dae:	ble.n	4da0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x930>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    4db0:	str.w	r8, [r4]
    4db4:	b.n	4d74 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x904>
    4db6:	nop
    4db8:	.word	0x20004204
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    4dbc:	add.w	r2, r5, #544	; 0x220
    4dc0:	ldr	r4, [pc, #396]	; (4f50 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xae0>)
    4dc2:	mov	r0, r2
    4dc4:	str	r2, [r4, #0]
    4dc6:	b.n	49d4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x564>
    4dc8:	add.w	r2, r5, #544	; 0x220
    4dcc:	mov	r0, r2
    4dce:	str	r2, [r4, #0]
    4dd0:	b.n	4d04 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x894>
    4dd2:	add.w	r2, r5, #544	; 0x220
    4dd6:	mov	r0, r2
    4dd8:	str	r2, [r4, #0]
    4dda:	b.n	4c9e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x82e>
    4ddc:	add.w	r2, r5, #544	; 0x220
    4de0:	mov	r0, r2
    4de2:	str	r2, [r4, #0]
    4de4:	b.n	4c36 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x7c6>
    4de6:	add.w	r2, r5, #544	; 0x220
    4dea:	ldr	r4, [pc, #356]	; (4f50 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xae0>)
    4dec:	mov	r0, r2
    4dee:	str	r2, [r4, #0]
    4df0:	b.n	4bc8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x758>
    4df2:	cmp	r3, #0
    4df4:	beq.w	4f20 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xab0>
    4df8:	ldr	r4, [pc, #340]	; (4f50 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xae0>)
    4dfa:	ldr	r0, [r4, #0]
        write_length_ += len;
    4dfc:	adds	r3, #1
        
        const char * src=data;
    4dfe:	add.w	r8, sp, #15
    4e02:	add.w	r9, r5, #1056	; 0x420
        //
        int pos = 0; // into data
    4e06:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    4e08:	str	r3, [r5, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4e0a:	add.w	sl, r5, #544	; 0x220
    4e0e:	b.n	4e18 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x9a8>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    4e10:	cmp	r7, #0
    4e12:	bgt.w	494e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x4de>
    4e16:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4e18:	rsb	r6, r0, r9
    4e1c:	rsb	r3, r7, #1
          memcpy(dst,src,to_copy);
    4e20:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4e22:	cmp	r6, r3
    4e24:	it	ge
    4e26:	movge	r6, r3
          memcpy(dst,src,to_copy);
    4e28:	mov	r2, r6
          pos += to_copy;
    4e2a:	add	r7, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    4e2c:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4e30:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    4e32:	add	r8, r6
          dst += to_copy;
    4e34:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4e36:	cmp	r6, r9
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4e38:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4e3a:	bne.n	4e10 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x9a0>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    4e3c:	movs	r2, #60	; 0x3c
    4e3e:	mov.w	r1, #512	; 0x200
    4e42:	mov	r0, sl
    4e44:	bl	a270 <usb_mtp_send>
    4e48:	cmp	r0, #0
    4e4a:	ble.n	4e3c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x9cc>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    4e4c:	str.w	sl, [r4]
    4e50:	b.n	4e10 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x9a0>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    4e52:	cmp	r3, #0
    4e54:	beq.n	4f38 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xac8>
    4e56:	ldr	r4, [pc, #248]	; (4f50 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xae0>)
    4e58:	ldr	r0, [r4, #0]
        write_length_ += len;
    4e5a:	adds	r3, #1
        
        const char * src=data;
    4e5c:	add.w	r8, sp, #19
    4e60:	add.w	r9, r5, #1056	; 0x420
        //
        int pos = 0; // into data
    4e64:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    4e66:	str	r3, [r5, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4e68:	add.w	sl, r5, #544	; 0x220
    4e6c:	b.n	4e76 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xa06>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    4e6e:	cmp	r7, #0
    4e70:	bgt.w	48d6 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x466>
    4e74:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4e76:	rsb	r6, r0, r9
    4e7a:	rsb	r3, r7, #1
          memcpy(dst,src,to_copy);
    4e7e:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4e80:	cmp	r6, r3
    4e82:	it	ge
    4e84:	movge	r6, r3
          memcpy(dst,src,to_copy);
    4e86:	mov	r2, r6
          pos += to_copy;
    4e88:	add	r7, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    4e8a:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4e8e:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    4e90:	add	r8, r6
          dst += to_copy;
    4e92:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4e94:	cmp	r6, r9
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4e96:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4e98:	bne.n	4e6e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x9fe>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    4e9a:	movs	r2, #60	; 0x3c
    4e9c:	mov.w	r1, #512	; 0x200
    4ea0:	mov	r0, sl
    4ea2:	bl	a270 <usb_mtp_send>
    4ea6:	cmp	r0, #0
    4ea8:	ble.n	4e9a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xa2a>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    4eaa:	str.w	sl, [r4]
    4eae:	b.n	4e6e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x9fe>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    4eb0:	add.w	r2, r5, #544	; 0x220
    4eb4:	ldr	r4, [pc, #152]	; (4f50 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xae0>)
    4eb6:	mov	r0, r2
    4eb8:	str	r2, [r4, #0]
    4eba:	b.n	4b66 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x6f6>
    4ebc:	add.w	r2, r5, #544	; 0x220
    4ec0:	ldr	r4, [pc, #140]	; (4f50 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xae0>)
    4ec2:	mov	r0, r2
    4ec4:	str	r2, [r4, #0]
    4ec6:	b.n	4b04 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x694>
    4ec8:	add.w	r2, r5, #544	; 0x220
    4ecc:	ldr	r4, [pc, #128]	; (4f50 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xae0>)
    4ece:	mov	r0, r2
    4ed0:	str	r2, [r4, #0]
    4ed2:	b.n	4aa2 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x632>
    4ed4:	add.w	r2, r5, #544	; 0x220
    4ed8:	mov	r0, r2
    4eda:	str	r2, [r4, #0]
    4edc:	b.n	4a46 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x5d6>
    4ede:	add.w	r2, r5, #544	; 0x220
    4ee2:	ldr	r4, [pc, #108]	; (4f50 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xae0>)
    4ee4:	mov	r0, r2
    4ee6:	str	r2, [r4, #0]
    4ee8:	b.w	4696 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x226>
    4eec:	add.w	r2, r5, #544	; 0x220
    4ef0:	ldr	r4, [pc, #92]	; (4f50 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xae0>)
    4ef2:	mov	r0, r2
    4ef4:	str	r2, [r4, #0]
    4ef6:	b.n	473c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x2cc>
    4ef8:	add.w	r2, r5, #544	; 0x220
    4efc:	ldr	r4, [pc, #80]	; (4f50 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xae0>)
    4efe:	mov	r0, r2
    4f00:	str	r2, [r4, #0]
    4f02:	b.w	4564 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xf4>
    4f06:	add.w	r2, r5, #544	; 0x220
    4f0a:	ldr	r4, [pc, #68]	; (4f50 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xae0>)
    4f0c:	mov	r0, r2
    4f0e:	str	r2, [r4, #0]
    4f10:	b.n	4d60 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x8f0>
    4f12:	add.w	r2, r5, #544	; 0x220
    4f16:	ldr	r4, [pc, #56]	; (4f50 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xae0>)
    4f18:	mov	r0, r2
    4f1a:	str	r2, [r4, #0]
    4f1c:	b.w	4624 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1b4>
    4f20:	add.w	r2, r5, #544	; 0x220
    4f24:	ldr	r4, [pc, #40]	; (4f50 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xae0>)
    4f26:	mov	r0, r2
    4f28:	str	r2, [r4, #0]
    4f2a:	b.n	4dfc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x98c>
    4f2c:	add.w	r2, r5, #544	; 0x220
    4f30:	ldr	r4, [pc, #28]	; (4f50 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xae0>)
    4f32:	mov	r0, r2
    4f34:	str	r2, [r4, #0]
    4f36:	b.n	4972 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x502>
    4f38:	add.w	r2, r5, #544	; 0x220
    4f3c:	ldr	r4, [pc, #16]	; (4f50 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xae0>)
    4f3e:	mov	r0, r2
    4f40:	str	r2, [r4, #0]
    4f42:	b.n	4e5a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x9ea>
    4f44:	add.w	r2, r5, #544	; 0x220
    4f48:	ldr	r4, [pc, #4]	; (4f50 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xae0>)
    4f4a:	mov	r0, r2
    4f4c:	str	r2, [r4, #0]
    4f4e:	b.n	48f8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x488>
    4f50:	.word	0x20004204

00004f54 <MTPD::loop()>:
        return 0x2005;
    }
*/

public:
    void loop(void)
    4f54:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4f58:	sub	sp, #116	; 0x74
    4f5a:	mov	r4, r0
    { 
      if(!usb_mtp_available()) return;
    4f5c:	bl	a240 <usb_mtp_available>
    4f60:	cbnz	r0, 4f68 <MTPD::loop()+0x14>

            memcpy(tx_data_buffer,rx_data_buffer,len);
            push_packet(tx_data_buffer,len); // for acknowledge use rx_data_buffer
        }
      }
    }
    4f62:	add	sp, #116	; 0x74
    4f64:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

public:
    void loop(void)
    { 
      if(!usb_mtp_available()) return;
      if(fetch_packet(rx_data_buffer))
    4f68:	add.w	r3, r4, #32
      return usb_mtp_recv(data_buffer,60);
    }

    int fetch_packet(uint8_t *data_buffer)
    {
      return usb_mtp_recv(data_buffer,60);
    4f6c:	movs	r1, #60	; 0x3c
    4f6e:	mov	r0, r3

public:
    void loop(void)
    { 
      if(!usb_mtp_available()) return;
      if(fetch_packet(rx_data_buffer))
    4f70:	str	r3, [sp, #12]
      return usb_mtp_recv(data_buffer,60);
    }

    int fetch_packet(uint8_t *data_buffer)
    {
      return usb_mtp_recv(data_buffer,60);
    4f72:	bl	a18c <usb_mtp_recv>

public:
    void loop(void)
    { 
      if(!usb_mtp_available()) return;
      if(fetch_packet(rx_data_buffer))
    4f76:	cmp	r0, #0
    4f78:	beq.n	4f62 <MTPD::loop()+0xe>
      { printContainer(); // to switch on set debug to 1 at beginning of file
    4f7a:	ldr	r0, [r4, #40]	; 0x28
    4f7c:	ldrh	r1, [r4, #36]	; 0x24
    4f7e:	ldr	r3, [r4, #32]
    4f80:	ldrh	r2, [r4, #38]	; 0x26
    4f82:	str	r0, [sp, #4]
    4f84:	str	r1, [sp, #0]
    4f86:	ldr	r0, [pc, #812]	; (52b4 <MTPD::loop()+0x360>)
    4f88:	ldr	r1, [pc, #812]	; (52b8 <MTPD::loop()+0x364>)
    4f8a:	bl	a610 <Print::printf(char const*, ...)>
    4f8e:	ldr	r3, [r4, #32]
    4f90:	cmp	r3, #12
    4f92:	bhi.w	51dc <MTPD::loop()+0x288>
    4f96:	ldr	r1, [pc, #804]	; (52bc <MTPD::loop()+0x368>)
    4f98:	ldr	r0, [pc, #792]	; (52b4 <MTPD::loop()+0x360>)
    4f9a:	bl	a610 <Print::printf(char const*, ...)>

        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
        int p2 = CONTAINER->params[1];
        int p3 = CONTAINER->params[2];
        int id = CONTAINER->transaction_id;
    4f9e:	ldr	r3, [r4, #40]	; 0x28
        int typ= CONTAINER->type;
        //TID=id;

        int return_code =0x2001; //OK use as default value

        if(typ!=1) return_code=0x2005; // we should only get cmds
    4fa0:	ldrh	r5, [r4, #36]	; 0x24
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
        int typ= CONTAINER->type;
        //TID=id;

        int return_code =0x2001; //OK use as default value
    4fa2:	movw	r1, #8197	; 0x2005
    4fa6:	movw	r2, #8193	; 0x2001

        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
        int p2 = CONTAINER->params[1];
        int p3 = CONTAINER->params[2];
        int id = CONTAINER->transaction_id;
    4faa:	mov	r6, r3
    4fac:	str	r3, [sp, #20]

        int return_code =0x2001; //OK use as default value

        if(typ!=1) return_code=0x2005; // we should only get cmds

        switch (op)
    4fae:	movw	r0, #4108	; 0x100c
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
        int typ= CONTAINER->type;
        //TID=id;

        int return_code =0x2001; //OK use as default value
    4fb2:	cmp	r5, #1
    4fb4:	ite	ne
    4fb6:	movne	r5, r1
    4fb8:	moveq	r5, r2
    { 
      if(!usb_mtp_available()) return;
      if(fetch_packet(rx_data_buffer))
      { printContainer(); // to switch on set debug to 1 at beginning of file

        int op = CONTAINER->op;
    4fba:	ldrh	r3, [r4, #38]	; 0x26
        int p1 = CONTAINER->params[0];
        int p2 = CONTAINER->params[1];
        int p3 = CONTAINER->params[2];
        int id = CONTAINER->transaction_id;
    4fbc:	mov	lr, r6
      if(fetch_packet(rx_data_buffer))
      { printContainer(); // to switch on set debug to 1 at beginning of file

        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
        int p2 = CONTAINER->params[1];
    4fbe:	ldr.w	sl, [r4, #48]	; 0x30
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
        int typ= CONTAINER->type;
        //TID=id;

        int return_code =0x2001; //OK use as default value
    4fc2:	str	r5, [sp, #24]

        if(typ!=1) return_code=0x2005; // we should only get cmds

        switch (op)
    4fc4:	cmp	r3, r0
      if(!usb_mtp_available()) return;
      if(fetch_packet(rx_data_buffer))
      { printContainer(); // to switch on set debug to 1 at beginning of file

        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
    4fc6:	ldr	r5, [r4, #44]	; 0x2c
        int p2 = CONTAINER->params[1];
        int p3 = CONTAINER->params[2];
    4fc8:	ldr.w	r8, [r4, #52]	; 0x34
      if(!usb_mtp_available()) return;
      if(fetch_packet(rx_data_buffer))
      { printContainer(); // to switch on set debug to 1 at beginning of file

        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
    4fcc:	str	r5, [sp, #16]
        int p2 = CONTAINER->params[1];
        int p3 = CONTAINER->params[2];
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
    4fce:	ldr	r7, [r4, #32]

        int return_code =0x2001; //OK use as default value

        if(typ!=1) return_code=0x2005; // we should only get cmds

        switch (op)
    4fd0:	beq.w	5646 <MTPD::loop()+0x6f2>
    4fd4:	bhi.n	501a <MTPD::loop()+0xc6>
    4fd6:	movw	r2, #4101	; 0x1005
    4fda:	cmp	r3, r2
    4fdc:	beq.w	548e <MTPD::loop()+0x53a>
    4fe0:	bls.w	5142 <MTPD::loop()+0x1ee>
    4fe4:	movw	r2, #4104	; 0x1008
    4fe8:	cmp	r3, r2
    4fea:	beq.w	574a <MTPD::loop()+0x7f6>
    4fee:	bhi.w	522c <MTPD::loop()+0x2d8>
    4ff2:	movw	r2, #4102	; 0x1006
    4ff6:	cmp	r3, r2
    4ff8:	beq.w	572e <MTPD::loop()+0x7da>
    4ffc:	movw	r2, #4103	; 0x1007
    5000:	cmp	r3, r2
    5002:	bne.w	5714 <MTPD::loop()+0x7c0>
                p1 = GetNumObjects(p1, p3);
            }
            break;

          case 0x1007:  // GetObjectHandles
            if (p2) 
    5006:	cmp.w	sl, #0
    500a:	beq.w	5c9a <MTPD::loop()+0xd46>
    500e:	ldr	r0, [sp, #16]
    5010:	add.w	r5, r4, #544	; 0x220
    5014:	movw	r2, #8212	; 0x2014
    5018:	b.n	5050 <MTPD::loop()+0xfc>

        int return_code =0x2001; //OK use as default value

        if(typ!=1) return_code=0x2005; // we should only get cmds

        switch (op)
    501a:	movw	r0, #4122	; 0x101a
    501e:	cmp	r3, r0
    5020:	beq.w	553e <MTPD::loop()+0x5ea>
    5024:	bhi.n	507c <MTPD::loop()+0x128>
    5026:	movw	r2, #4116	; 0x1014
    502a:	cmp	r3, r2
    502c:	beq.w	5660 <MTPD::loop()+0x70c>
    5030:	bhi.w	520c <MTPD::loop()+0x2b8>
    5034:	movw	r2, #4109	; 0x100d
    5038:	cmp	r3, r2
    503a:	beq.w	5720 <MTPD::loop()+0x7cc>
    503e:	movw	r2, #4112	; 0x1010
    5042:	cmp	r3, r2
    5044:	bne.w	5714 <MTPD::loop()+0x7c0>
              TRANSMIT(GetDevicePropValue(p1));
              break;

          case 0x1010:  // Reset
              return_code = 0x2005;
              break;
    5048:	ldr	r0, [sp, #16]
    504a:	mov	r2, r1
    504c:	add.w	r5, r4, #544	; 0x220
              return_code = 0x2005;  // operation not supported
              break;
        }
        if(return_code)
        {
            CONTAINER->type=3;
    5050:	movs	r3, #3
            CONTAINER->len=len;
            CONTAINER->op=return_code;
    5052:	strh	r2, [r4, #38]	; 0x26
            CONTAINER->transaction_id=id;
    5054:	ldr	r2, [sp, #20]
            CONTAINER->params[0]=p1;
    5056:	str	r0, [r4, #44]	; 0x2c
            #if DEBUG >1
              printContainer(); // to switch on set debug to 2 at beginning of file
            #endif

            memcpy(tx_data_buffer,rx_data_buffer,len);
    5058:	mov	r0, r5
        if(return_code)
        {
            CONTAINER->type=3;
            CONTAINER->len=len;
            CONTAINER->op=return_code;
            CONTAINER->transaction_id=id;
    505a:	str	r2, [r4, #40]	; 0x28
            CONTAINER->params[0]=p1;
            #if DEBUG >1
              printContainer(); // to switch on set debug to 2 at beginning of file
            #endif

            memcpy(tx_data_buffer,rx_data_buffer,len);
    505c:	mov	r2, r7
              break;
        }
        if(return_code)
        {
            CONTAINER->type=3;
            CONTAINER->len=len;
    505e:	str	r7, [r4, #32]
            CONTAINER->params[0]=p1;
            #if DEBUG >1
              printContainer(); // to switch on set debug to 2 at beginning of file
            #endif

            memcpy(tx_data_buffer,rx_data_buffer,len);
    5060:	ldr	r1, [sp, #12]
              return_code = 0x2005;  // operation not supported
              break;
        }
        if(return_code)
        {
            CONTAINER->type=3;
    5062:	strh	r3, [r4, #36]	; 0x24
            CONTAINER->params[0]=p1;
            #if DEBUG >1
              printContainer(); // to switch on set debug to 2 at beginning of file
            #endif

            memcpy(tx_data_buffer,rx_data_buffer,len);
    5064:	bl	83b0 <memcpy>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5068:	movs	r2, #60	; 0x3c
    506a:	mov	r1, r7
    506c:	mov	r0, r5
    506e:	bl	a270 <usb_mtp_send>
    5072:	cmp	r0, #0
    5074:	ble.n	5068 <MTPD::loop()+0x114>

            memcpy(tx_data_buffer,rx_data_buffer,len);
            push_packet(tx_data_buffer,len); // for acknowledge use rx_data_buffer
        }
      }
    }
    5076:	add	sp, #116	; 0x74
    5078:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

        int return_code =0x2001; //OK use as default value

        if(typ!=1) return_code=0x2005; // we should only get cmds

        switch (op)
    507c:	movw	r2, #38914	; 0x9802
    5080:	cmp	r3, r2
    5082:	beq.w	53a0 <MTPD::loop()+0x44c>
    5086:	bhi.w	5258 <MTPD::loop()+0x304>
    508a:	movw	r2, #4123	; 0x101b
    508e:	cmp	r3, r2
    5090:	beq.w	557a <MTPD::loop()+0x626>
    5094:	movw	r2, #38913	; 0x9801
    5098:	cmp	r3, r2
    509a:	bne.w	5714 <MTPD::loop()+0x7c0>
  }

    void getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    509e:	ldr	r1, [pc, #544]	; (52c0 <MTPD::loop()+0x36c>)
          case 0x101B:  // GetPartialObject
//              TRANSMIT1(GetPartialObject(p1,p2,p3));
              break;

          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
    50a0:	movs	r2, #1
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    50a2:	movs	r3, #4
    50a4:	add.w	r8, r4, #1056	; 0x420
  }

    void getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    50a8:	ldr	r1, [r1, #0]
    50aa:	add.w	r5, r4, #544	; 0x220
          case 0x101B:  // GetPartialObject
//              TRANSMIT1(GetPartialObject(p1,p2,p3));
              break;

          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
    50ae:	strb	r2, [r4, #0]
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    50b0:	str	r3, [r4, #4]
  }

    void getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    50b2:	cmp	r1, #0
    50b4:	beq.w	6152 <MTPD::loop()+0x11fe>
    50b8:	ldr	r1, [pc, #520]	; (52c4 <MTPD::loop()+0x370>)
    50ba:	movs	r0, #0
    50bc:	ldr	r6, [pc, #520]	; (52c8 <MTPD::loop()+0x374>)
    50be:	str	r1, [sp, #28]
    50c0:	mov	sl, r0
    50c2:	movw	r1, #56321	; 0xdc01
    50c6:	str	r7, [sp, #32]
    50c8:	b.n	50e6 <MTPD::loop()+0x192>
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    50ca:	adds	r3, #2
    50cc:	str	r3, [r4, #4]
  }

    void getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    50ce:	ldr	r2, [pc, #496]	; (52c0 <MTPD::loop()+0x36c>)
    50d0:	add.w	sl, sl, #1
    50d4:	ldr	r2, [r2, #0]
    50d6:	cmp	r2, sl
    50d8:	bls.w	598c <MTPD::loop()+0xa38>
    50dc:	ldr	r2, [sp, #28]
    50de:	ldrh.w	r1, [r2, #2]!
    50e2:	str	r2, [sp, #28]
    50e4:	ldrb	r2, [r4, #0]
    50e6:	strh.w	r1, [sp, #78]	; 0x4e
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    50ea:	cmp	r2, #0
    50ec:	bne.n	50ca <MTPD::loop()+0x176>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    50ee:	cmp	r3, #0
    50f0:	beq.w	5944 <MTPD::loop()+0x9f0>
    50f4:	ldr	r0, [r6, #0]
        write_length_ += len;
    50f6:	adds	r3, #2
        
        const char * src=data;
    50f8:	add.w	r9, sp, #78	; 0x4e
        //
        int pos = 0; // into data
    50fc:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    50fe:	str	r3, [r4, #4]
    5100:	b.n	510a <MTPD::loop()+0x1b6>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    5102:	cmp	r7, #1
    5104:	bgt.w	5254 <MTPD::loop()+0x300>
    5108:	ldr	r0, [r6, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    510a:	rsb	fp, r0, r8
    510e:	rsb	r3, r7, #2
          memcpy(dst,src,to_copy);
    5112:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5114:	cmp	fp, r3
    5116:	it	ge
    5118:	movge	fp, r3
          memcpy(dst,src,to_copy);
    511a:	mov	r2, fp
          pos += to_copy;
    511c:	add	r7, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    511e:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5122:	ldr	r3, [r6, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    5124:	add	r9, fp
          dst += to_copy;
    5126:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5128:	cmp	r3, r8
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    512a:	str	r3, [r6, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    512c:	bne.n	5102 <MTPD::loop()+0x1ae>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    512e:	movs	r2, #60	; 0x3c
    5130:	mov.w	r1, #512	; 0x200
    5134:	mov	r0, r5
    5136:	bl	a270 <usb_mtp_send>
    513a:	cmp	r0, #0
    513c:	ble.n	512e <MTPD::loop()+0x1da>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    513e:	str	r5, [r6, #0]
    5140:	b.n	5102 <MTPD::loop()+0x1ae>

        int return_code =0x2001; //OK use as default value

        if(typ!=1) return_code=0x2005; // we should only get cmds

        switch (op)
    5142:	movw	r2, #4098	; 0x1002
    5146:	cmp	r3, r2
    5148:	beq.w	547c <MTPD::loop()+0x528>
    514c:	bls.w	5312 <MTPD::loop()+0x3be>
    5150:	movw	r2, #4099	; 0x1003
    5154:	cmp	r3, r2
    5156:	beq.w	557a <MTPD::loop()+0x626>
    515a:	movw	r2, #4100	; 0x1004
    515e:	cmp	r3, r2
    5160:	bne.w	5714 <MTPD::loop()+0x7c0>

          case 0x1003:  // CloseSession
            break;

          case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
    5164:	movs	r2, #0
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5166:	add.w	r5, r4, #544	; 0x220

          case 0x1003:  // CloseSession
            break;

          case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
    516a:	mov.w	ip, #20
    516e:	mov.w	lr, #2
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5172:	ldr	r6, [pc, #340]	; (52c8 <MTPD::loop()+0x374>)
        write_length_ += len;
    5174:	movs	r1, #12

          case 0x1003:  // CloseSession
            break;

          case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
    5176:	strh.w	r3, [sp, #106]	; 0x6a
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
    517a:	mov	r8, r2

          case 0x1003:  // CloseSession
            break;

          case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
    517c:	ldr	r3, [sp, #20]
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    517e:	mov	r0, r5

          case 0x1003:  // CloseSession
            break;

          case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
    5180:	strb	r2, [r4, #0]
    5182:	add.w	r9, r4, #1056	; 0x420
    5186:	str	r3, [sp, #108]	; 0x6c
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    5188:	add.w	sl, sp, #100	; 0x64

          case 0x1003:  // CloseSession
            break;

          case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
    518c:	str.w	ip, [sp, #100]	; 0x64
    5190:	strh.w	lr, [sp, #104]	; 0x68
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5194:	str	r5, [r6, #0]
        write_length_ += len;
    5196:	str	r1, [r4, #4]
    5198:	b.n	51a4 <MTPD::loop()+0x250>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    519a:	cmp.w	r8, #11
    519e:	bgt.w	594c <MTPD::loop()+0x9f8>
    51a2:	ldr	r0, [r6, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    51a4:	rsb	fp, r0, r9
    51a8:	rsb	r3, r8, #12
          memcpy(dst,src,to_copy);
    51ac:	mov	r1, sl
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    51ae:	cmp	fp, r3
    51b0:	it	ge
    51b2:	movge	fp, r3
          memcpy(dst,src,to_copy);
    51b4:	mov	r2, fp
          pos += to_copy;
    51b6:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    51b8:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    51bc:	ldr	r3, [r6, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    51be:	add	sl, fp
          dst += to_copy;
    51c0:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    51c2:	cmp	r3, r9
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    51c4:	str	r3, [r6, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    51c6:	bne.n	519a <MTPD::loop()+0x246>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    51c8:	movs	r2, #60	; 0x3c
    51ca:	mov.w	r1, #512	; 0x200
    51ce:	mov	r0, r5
    51d0:	bl	a270 <usb_mtp_send>
    51d4:	cmp	r0, #0
    51d6:	ble.n	51c8 <MTPD::loop()+0x274>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    51d8:	str	r5, [r6, #0]
    51da:	b.n	519a <MTPD::loop()+0x246>
public:
    void loop(void)
    { 
      if(!usb_mtp_available()) return;
      if(fetch_packet(rx_data_buffer))
      { printContainer(); // to switch on set debug to 1 at beginning of file
    51dc:	ldr	r2, [r4, #44]	; 0x2c
    51de:	ldr	r1, [pc, #236]	; (52cc <MTPD::loop()+0x378>)
    51e0:	ldr	r0, [pc, #208]	; (52b4 <MTPD::loop()+0x360>)
    51e2:	bl	a610 <Print::printf(char const*, ...)>
    51e6:	ldr	r3, [r4, #32]
    51e8:	cmp	r3, #16
    51ea:	bls.w	4f96 <MTPD::loop()+0x42>
    51ee:	ldr	r2, [r4, #48]	; 0x30
    51f0:	ldr	r1, [pc, #216]	; (52cc <MTPD::loop()+0x378>)
    51f2:	ldr	r0, [pc, #192]	; (52b4 <MTPD::loop()+0x360>)
    51f4:	bl	a610 <Print::printf(char const*, ...)>
    51f8:	ldr	r3, [r4, #32]
    51fa:	cmp	r3, #20
    51fc:	bls.w	4f96 <MTPD::loop()+0x42>
    5200:	ldr	r2, [r4, #52]	; 0x34
    5202:	ldr	r1, [pc, #200]	; (52cc <MTPD::loop()+0x378>)
    5204:	ldr	r0, [pc, #172]	; (52b4 <MTPD::loop()+0x360>)
    5206:	bl	a610 <Print::printf(char const*, ...)>
    520a:	b.n	4f96 <MTPD::loop()+0x42>

        int return_code =0x2001; //OK use as default value

        if(typ!=1) return_code=0x2005; // we should only get cmds

        switch (op)
    520c:	movw	r2, #4117	; 0x1015
    5210:	cmp	r3, r2
    5212:	beq.w	57d8 <MTPD::loop()+0x884>
    5216:	movw	r2, #4121	; 0x1019
    521a:	cmp	r3, r2
    521c:	bne.w	5714 <MTPD::loop()+0x7c0>

          case 0x1019:  // MoveObject
              return_code = 0x2005;
//              return_code = moveObject(p1,p2,p3);
              len = 12;
              break;
    5220:	ldr	r0, [sp, #16]
    5222:	mov	r2, r1
    5224:	add.w	r5, r4, #544	; 0x220
    5228:	movs	r7, #12
    522a:	b.n	5050 <MTPD::loop()+0xfc>

        int return_code =0x2001; //OK use as default value

        if(typ!=1) return_code=0x2005; // we should only get cmds

        switch (op)
    522c:	movw	r2, #4105	; 0x1009
    5230:	cmp	r3, r2
    5232:	beq.w	5586 <MTPD::loop()+0x632>
    5236:	movw	r2, #4107	; 0x100b
    523a:	cmp	r3, r2
    523c:	bne.w	5714 <MTPD::loop()+0x7c0>
          case 0x1009:  // GetObject
            TRANSMIT(GetObject(p1));
            break;

          case 0x100B:  // DeleteObject
              if (p2) {
    5240:	ldr	r0, [sp, #16]
    5242:	add.w	r5, r4, #544	; 0x220
    5246:	cmp.w	sl, #0
    524a:	beq.w	5c44 <MTPD::loop()+0xcf0>
    524e:	movw	r2, #8212	; 0x2014
    5252:	b.n	5050 <MTPD::loop()+0xfc>
    5254:	ldr	r3, [r4, #4]
    5256:	b.n	50ce <MTPD::loop()+0x17a>

        int return_code =0x2001; //OK use as default value

        if(typ!=1) return_code=0x2005; // we should only get cmds

        switch (op)
    5258:	movw	r2, #38915	; 0x9803
    525c:	cmp	r3, r2
    525e:	bne.w	5570 <MTPD::loop()+0x61c>
          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
              break;

          case 0x9803:  // getObjectPropertyValue
              TRANSMIT(getObjectPropValue(p1,p2));
    5262:	movs	r3, #1
    5264:	mov.w	r8, #0
    5268:	mov	r2, sl
    526a:	ldr	r1, [sp, #16]
    526c:	mov	r0, r4
    526e:	strb	r3, [r4, #0]
    5270:	str.w	r8, [r4, #4]
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5274:	add.w	r5, r4, #544	; 0x220
          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
              break;

          case 0x9803:  // getObjectPropertyValue
              TRANSMIT(getObjectPropValue(p1,p2));
    5278:	bl	4470 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    527c:	ldr	r6, [r4, #4]
    527e:	movs	r0, #2
    5280:	ldrh	r1, [r4, #38]	; 0x26
    5282:	add.w	r3, r6, #12
    5286:	ldr	r2, [r4, #40]	; 0x28
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5288:	ldr	r6, [pc, #60]	; (52c8 <MTPD::loop()+0x374>)
        write_length_ += len;
    528a:	mov.w	lr, #12
          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
              break;

          case 0x9803:  // getObjectPropertyValue
              TRANSMIT(getObjectPropValue(p1,p2));
    528e:	strb.w	r8, [r4]
    5292:	add.w	fp, r4, #1056	; 0x420
    5296:	strh.w	r0, [sp, #104]	; 0x68
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    529a:	add.w	r9, sp, #100	; 0x64
          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
              break;

          case 0x9803:  // getObjectPropertyValue
              TRANSMIT(getObjectPropValue(p1,p2));
    529e:	str	r3, [sp, #28]
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    52a0:	mov	r0, r5
          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
              break;

          case 0x9803:  // getObjectPropertyValue
              TRANSMIT(getObjectPropValue(p1,p2));
    52a2:	str	r3, [sp, #100]	; 0x64
    52a4:	strh.w	r1, [sp, #106]	; 0x6a
    52a8:	str	r2, [sp, #108]	; 0x6c
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    52aa:	str	r5, [r6, #0]
        write_length_ += len;
    52ac:	str.w	lr, [r4, #4]
    52b0:	str	r4, [sp, #32]
    52b2:	b.n	52da <MTPD::loop()+0x386>
    52b4:	.word	0x20001228
    52b8:	.word	0x20000b04
    52bc:	.word	0x20000b18
    52c0:	.word	0x200017d4
    52c4:	.word	0x20000404
    52c8:	.word	0x20004204
    52cc:	.word	0x20000b14
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    52d0:	cmp.w	r8, #11
    52d4:	bgt.w	5548 <MTPD::loop()+0x5f4>
    52d8:	ldr	r0, [r6, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    52da:	rsb	r2, r0, fp
    52de:	rsb	r3, r8, #12
          memcpy(dst,src,to_copy);
    52e2:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    52e4:	cmp	r2, r3
    52e6:	it	ge
    52e8:	movge	r2, r3
    52ea:	mov	r4, r2
          memcpy(dst,src,to_copy);
          pos += to_copy;
    52ec:	add	r8, r2
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    52ee:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    52f2:	ldr	r2, [r6, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    52f4:	add	r9, r4
          dst += to_copy;
    52f6:	adds	r3, r2, r4
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    52f8:	cmp	r3, fp
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    52fa:	str	r3, [r6, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    52fc:	bne.n	52d0 <MTPD::loop()+0x37c>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    52fe:	movs	r2, #60	; 0x3c
    5300:	mov.w	r1, #512	; 0x200
    5304:	mov	r0, r5
    5306:	bl	a270 <usb_mtp_send>
    530a:	cmp	r0, #0
    530c:	ble.n	52fe <MTPD::loop()+0x3aa>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    530e:	str	r5, [r6, #0]
    5310:	b.n	52d0 <MTPD::loop()+0x37c>

        int return_code =0x2001; //OK use as default value

        if(typ!=1) return_code=0x2005; // we should only get cmds

        switch (op)
    5312:	movw	r2, #4097	; 0x1001
    5316:	cmp	r3, r2
    5318:	bne.w	5714 <MTPD::loop()+0x7c0>
        {
          case 0x1001:
            TRANSMIT(WriteDescriptor());
    531c:	movs	r6, #0
    531e:	movs	r3, #1
    5320:	mov	r0, r4
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5322:	add.w	r5, r4, #544	; 0x220
        if(typ!=1) return_code=0x2005; // we should only get cmds

        switch (op)
        {
          case 0x1001:
            TRANSMIT(WriteDescriptor());
    5326:	str	r6, [r4, #4]
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
    5328:	mov	r8, r6
        if(typ!=1) return_code=0x2005; // we should only get cmds

        switch (op)
        {
          case 0x1001:
            TRANSMIT(WriteDescriptor());
    532a:	strb	r3, [r4, #0]
    532c:	add.w	sl, r4, #1056	; 0x420
    5330:	bl	504 <MTPD::WriteDescriptor()>
    5334:	ldr	r3, [r4, #4]
    5336:	strb	r6, [r4, #0]
    5338:	movs	r0, #2
    533a:	adds	r3, #12
    533c:	ldrh	r1, [r4, #38]	; 0x26
    533e:	ldr	r2, [r4, #40]	; 0x28
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    5340:	add.w	r9, sp, #100	; 0x64
        if(typ!=1) return_code=0x2005; // we should only get cmds

        switch (op)
        {
          case 0x1001:
            TRANSMIT(WriteDescriptor());
    5344:	str	r3, [sp, #28]
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    5346:	movs	r3, #12
        if(typ!=1) return_code=0x2005; // we should only get cmds

        switch (op)
        {
          case 0x1001:
            TRANSMIT(WriteDescriptor());
    5348:	ldr	r6, [sp, #28]
    534a:	strh.w	r0, [sp, #104]	; 0x68
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    534e:	mov	r0, r5
        if(typ!=1) return_code=0x2005; // we should only get cmds

        switch (op)
        {
          case 0x1001:
            TRANSMIT(WriteDescriptor());
    5350:	str	r6, [sp, #100]	; 0x64
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5352:	ldr	r6, [pc, #768]	; (5654 <MTPD::loop()+0x700>)
        if(typ!=1) return_code=0x2005; // we should only get cmds

        switch (op)
        {
          case 0x1001:
            TRANSMIT(WriteDescriptor());
    5354:	strh.w	r1, [sp, #106]	; 0x6a
    5358:	str	r2, [sp, #108]	; 0x6c
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    535a:	str	r3, [r4, #4]
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    535c:	str	r5, [r6, #0]
    535e:	b.n	5368 <MTPD::loop()+0x414>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    5360:	cmp.w	r8, #11
    5364:	bgt.n	5432 <MTPD::loop()+0x4de>
    5366:	ldr	r0, [r6, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5368:	rsb	fp, r0, sl
    536c:	rsb	r3, r8, #12
          memcpy(dst,src,to_copy);
    5370:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5372:	cmp	fp, r3
    5374:	it	ge
    5376:	movge	fp, r3
          memcpy(dst,src,to_copy);
    5378:	mov	r2, fp
          pos += to_copy;
    537a:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    537c:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5380:	ldr	r3, [r6, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    5382:	add	r9, fp
          dst += to_copy;
    5384:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5386:	cmp	r3, sl
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5388:	str	r3, [r6, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    538a:	bne.n	5360 <MTPD::loop()+0x40c>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    538c:	movs	r2, #60	; 0x3c
    538e:	mov.w	r1, #512	; 0x200
    5392:	mov	r0, r5
    5394:	bl	a270 <usb_mtp_send>
    5398:	cmp	r0, #0
    539a:	ble.n	538c <MTPD::loop()+0x438>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    539c:	str	r5, [r6, #0]
    539e:	b.n	5360 <MTPD::loop()+0x40c>
          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
              break;

          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
    53a0:	movs	r3, #1
    53a2:	mov.w	r8, #0
    53a6:	mov	r2, sl
    53a8:	ldr	r1, [sp, #16]
    53aa:	mov	r0, r4
    53ac:	strb	r3, [r4, #0]
    53ae:	str.w	r8, [r4, #4]
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    53b2:	add.w	r5, r4, #544	; 0x220
          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
              break;

          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
    53b6:	bl	2720 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    53ba:	ldr	r6, [r4, #4]
    53bc:	movs	r0, #2
    53be:	ldrh	r1, [r4, #38]	; 0x26
    53c0:	add.w	r3, r6, #12
    53c4:	ldr	r2, [r4, #40]	; 0x28
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    53c6:	ldr	r6, [pc, #652]	; (5654 <MTPD::loop()+0x700>)
        write_length_ += len;
    53c8:	mov.w	lr, #12
          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
              break;

          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
    53cc:	strb.w	r8, [r4]
    53d0:	add.w	fp, r4, #1056	; 0x420
    53d4:	strh.w	r0, [sp, #104]	; 0x68
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    53d8:	add.w	r9, sp, #100	; 0x64
          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
              break;

          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
    53dc:	str	r3, [sp, #28]
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    53de:	mov	r0, r5
          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
              break;

          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
    53e0:	str	r3, [sp, #100]	; 0x64
    53e2:	strh.w	r1, [sp, #106]	; 0x6a
    53e6:	str	r2, [sp, #108]	; 0x6c
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    53e8:	str	r5, [r6, #0]
        write_length_ += len;
    53ea:	str.w	lr, [r4, #4]
    53ee:	str	r4, [sp, #32]
    53f0:	b.n	53fa <MTPD::loop()+0x4a6>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    53f2:	cmp.w	r8, #11
    53f6:	bgt.n	5456 <MTPD::loop()+0x502>
    53f8:	ldr	r0, [r6, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    53fa:	rsb	r2, r0, fp
    53fe:	rsb	r3, r8, #12
          memcpy(dst,src,to_copy);
    5402:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5404:	cmp	r2, r3
    5406:	it	ge
    5408:	movge	r2, r3
    540a:	mov	r4, r2
          memcpy(dst,src,to_copy);
          pos += to_copy;
    540c:	add	r8, r2
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    540e:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5412:	ldr	r2, [r6, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    5414:	add	r9, r4
          dst += to_copy;
    5416:	adds	r3, r2, r4
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5418:	cmp	r3, fp
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    541a:	str	r3, [r6, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    541c:	bne.n	53f2 <MTPD::loop()+0x49e>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    541e:	movs	r2, #60	; 0x3c
    5420:	mov.w	r1, #512	; 0x200
    5424:	mov	r0, r5
    5426:	bl	a270 <usb_mtp_send>
    542a:	cmp	r0, #0
    542c:	ble.n	541e <MTPD::loop()+0x4ca>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    542e:	str	r5, [r6, #0]
    5430:	b.n	53f2 <MTPD::loop()+0x49e>
        if(typ!=1) return_code=0x2005; // we should only get cmds

        switch (op)
        {
          case 0x1001:
            TRANSMIT(WriteDescriptor());
    5432:	ldr	r3, [sp, #28]
    5434:	mov	r0, r4
    5436:	ubfx	r6, r3, #0, #9
    543a:	bl	504 <MTPD::WriteDescriptor()>
    543e:	cbz	r6, 544e <MTPD::loop()+0x4fa>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5440:	movs	r2, #60	; 0x3c
    5442:	mov	r1, r6
    5444:	mov	r0, r5
    5446:	bl	a270 <usb_mtp_send>
    544a:	cmp	r0, #0
    544c:	ble.n	5440 <MTPD::loop()+0x4ec>
    544e:	ldrh.w	r2, [sp, #24]
              TRANSMIT(getObjectPropDesc(p1,p2));
              break;

          case 0x9803:  // getObjectPropertyValue
              TRANSMIT(getObjectPropValue(p1,p2));
              break;
    5452:	ldr	r0, [sp, #16]
    5454:	b.n	5050 <MTPD::loop()+0xfc>
          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
              break;

          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
    5456:	ldr	r3, [sp, #28]
    5458:	mov	r2, sl
    545a:	ldr	r4, [sp, #32]
    545c:	ubfx	r6, r3, #0, #9
    5460:	ldr	r1, [sp, #16]
    5462:	mov	r0, r4
    5464:	bl	2720 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    5468:	cmp	r6, #0
    546a:	beq.n	544e <MTPD::loop()+0x4fa>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    546c:	movs	r2, #60	; 0x3c
    546e:	mov	r1, r6
    5470:	mov	r0, r5
    5472:	bl	a270 <usb_mtp_send>
    5476:	cmp	r0, #0
    5478:	ble.n	546c <MTPD::loop()+0x518>
    547a:	b.n	544e <MTPD::loop()+0x4fa>
      return mFS_copy(handle,store1,newHandle);
    }
*/    
    void openSession(uint32_t id)
    {
      sessionID_ = id;
    547c:	ldr	r1, [sp, #16]
    547e:	add.w	r5, r4, #544	; 0x220
    5482:	ldr	r3, [pc, #468]	; (5658 <MTPD::loop()+0x704>)
    5484:	ldrh.w	r2, [sp, #24]
    5488:	mov	r0, r1
    548a:	str	r1, [r3, #0]
    548c:	b.n	5050 <MTPD::loop()+0xfc>
          case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
            break;

          case 0x1005:  // GetStorageInfo
            TRANSMIT(GetStorageInfo(p1));
    548e:	mov.w	r9, #0
    5492:	movs	r3, #1
    5494:	ldr	r1, [sp, #16]
    5496:	mov	r0, r4
    5498:	str.w	r9, [r4, #4]
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    549c:	add.w	r5, r4, #544	; 0x220
          case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
            break;

          case 0x1005:  // GetStorageInfo
            TRANSMIT(GetStorageInfo(p1));
    54a0:	strb	r3, [r4, #0]
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
    54a2:	mov	r8, r9
          case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
            break;

          case 0x1005:  // GetStorageInfo
            TRANSMIT(GetStorageInfo(p1));
    54a4:	bl	1568 <MTPD::GetStorageInfo(unsigned long)>
    54a8:	ldr	r3, [r4, #4]
    54aa:	movs	r0, #2
    54ac:	ldrh	r1, [r4, #38]	; 0x26
    54ae:	adds	r3, #12
    54b0:	ldr	r2, [r4, #40]	; 0x28
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    54b2:	ldr	r6, [pc, #416]	; (5654 <MTPD::loop()+0x700>)
        write_length_ += len;
    54b4:	mov.w	lr, #12
          case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
            break;

          case 0x1005:  // GetStorageInfo
            TRANSMIT(GetStorageInfo(p1));
    54b8:	strb.w	r9, [r4]
    54bc:	add.w	sl, r4, #1056	; 0x420
    54c0:	strh.w	r0, [sp, #104]	; 0x68
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    54c4:	add.w	r9, sp, #100	; 0x64
          case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
            break;

          case 0x1005:  // GetStorageInfo
            TRANSMIT(GetStorageInfo(p1));
    54c8:	str	r3, [sp, #28]
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    54ca:	mov	r0, r5
          case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
            break;

          case 0x1005:  // GetStorageInfo
            TRANSMIT(GetStorageInfo(p1));
    54cc:	str	r3, [sp, #100]	; 0x64
    54ce:	strh.w	r1, [sp, #106]	; 0x6a
    54d2:	str	r2, [sp, #108]	; 0x6c
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    54d4:	str	r5, [r6, #0]
        write_length_ += len;
    54d6:	str.w	lr, [r4, #4]
    54da:	b.n	54e4 <MTPD::loop()+0x590>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    54dc:	cmp.w	r8, #11
    54e0:	bgt.n	551c <MTPD::loop()+0x5c8>
    54e2:	ldr	r0, [r6, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    54e4:	rsb	fp, r0, sl
    54e8:	rsb	r3, r8, #12
          memcpy(dst,src,to_copy);
    54ec:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    54ee:	cmp	fp, r3
    54f0:	it	ge
    54f2:	movge	fp, r3
          memcpy(dst,src,to_copy);
    54f4:	mov	r2, fp
          pos += to_copy;
    54f6:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    54f8:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    54fc:	ldr	r3, [r6, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    54fe:	add	r9, fp
          dst += to_copy;
    5500:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5502:	cmp	r3, sl
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5504:	str	r3, [r6, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5506:	bne.n	54dc <MTPD::loop()+0x588>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5508:	movs	r2, #60	; 0x3c
    550a:	mov.w	r1, #512	; 0x200
    550e:	mov	r0, r5
    5510:	bl	a270 <usb_mtp_send>
    5514:	cmp	r0, #0
    5516:	ble.n	5508 <MTPD::loop()+0x5b4>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    5518:	str	r5, [r6, #0]
    551a:	b.n	54dc <MTPD::loop()+0x588>
          case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
            break;

          case 0x1005:  // GetStorageInfo
            TRANSMIT(GetStorageInfo(p1));
    551c:	ldr	r3, [sp, #28]
    551e:	mov	r0, r4
    5520:	ldr	r1, [sp, #16]
    5522:	ubfx	r6, r3, #0, #9
    5526:	bl	1568 <MTPD::GetStorageInfo(unsigned long)>
    552a:	cmp	r6, #0
    552c:	beq.n	544e <MTPD::loop()+0x4fa>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    552e:	movs	r2, #60	; 0x3c
    5530:	mov	r1, r6
    5532:	mov	r0, r5
    5534:	bl	a270 <usb_mtp_send>
    5538:	cmp	r0, #0
    553a:	ble.n	552e <MTPD::loop()+0x5da>
    553c:	b.n	544e <MTPD::loop()+0x4fa>

        int return_code =0x2001; //OK use as default value

        if(typ!=1) return_code=0x2005; // we should only get cmds

        switch (op)
    553e:	mov	r0, r1
    5540:	add.w	r5, r4, #544	; 0x220
    5544:	movs	r7, #16
    5546:	b.n	5050 <MTPD::loop()+0xfc>
          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
              break;

          case 0x9803:  // getObjectPropertyValue
              TRANSMIT(getObjectPropValue(p1,p2));
    5548:	ldr	r3, [sp, #28]
    554a:	mov	r2, sl
    554c:	ldr	r4, [sp, #32]
    554e:	ubfx	r6, r3, #0, #9
    5552:	ldr	r1, [sp, #16]
    5554:	mov	r0, r4
    5556:	bl	4470 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    555a:	cmp	r6, #0
    555c:	beq.w	544e <MTPD::loop()+0x4fa>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5560:	movs	r2, #60	; 0x3c
    5562:	mov	r1, r6
    5564:	mov	r0, r5
    5566:	bl	a270 <usb_mtp_send>
    556a:	cmp	r0, #0
    556c:	ble.n	5560 <MTPD::loop()+0x60c>
    556e:	b.n	544e <MTPD::loop()+0x4fa>

        int return_code =0x2001; //OK use as default value

        if(typ!=1) return_code=0x2005; // we should only get cmds

        switch (op)
    5570:	movw	r2, #38916	; 0x9804
    5574:	cmp	r3, r2
    5576:	bne.w	5714 <MTPD::loop()+0x7c0>
    557a:	ldrh.w	r2, [sp, #24]
    557e:	add.w	r5, r4, #544	; 0x220
    5582:	ldr	r0, [sp, #16]
    5584:	b.n	5050 <MTPD::loop()+0xfc>
    5586:	ldr	r1, [pc, #212]	; (565c <MTPD::loop()+0x708>)
          case 0x1008:  // GetObjectInfo
            TRANSMIT(GetObjectInfo(p1));
            break;

          case 0x1009:  // GetObject
            TRANSMIT(GetObject(p1));
    5588:	movs	r3, #1
    558a:	movs	r2, #0
    558c:	mov	r0, r1
    558e:	str	r1, [sp, #28]
    5590:	strb	r3, [r4, #0]
    char * getName(uint32_t store) {return zFs_[0].getName();}

    uint32_t Info(uint32_t handle, char *filename, uint32_t *size, uint32_t *parent)
    { return zFs_[0].Info(handle, filename, size, parent);}

    uint32_t GetSize(uint32_t handle) {return zFs_[0].GetSize(handle);}
    5592:	ldr	r1, [sp, #16]
          case 0x1008:  // GetObjectInfo
            TRANSMIT(GetObjectInfo(p1));
            break;

          case 0x1009:  // GetObject
            TRANSMIT(GetObject(p1));
    5594:	str	r2, [r4, #4]
    char * getName(uint32_t store) {return zFs_[0].getName();}

    uint32_t Info(uint32_t handle, char *filename, uint32_t *size, uint32_t *parent)
    { return zFs_[0].Info(handle, filename, size, parent);}

    uint32_t GetSize(uint32_t handle) {return zFs_[0].GetSize(handle);}
    5596:	ldr	r0, [r0, #80]	; 0x50
    5598:	bl	6f70 <zeroFS_class::GetSize(unsigned long)>

    void GetObject(uint32_t object_id) 
    {
      uint32_t size = mFS.GetSize(object_id);

      if (write_get_length_) {
    559c:	ldrb	r3, [r4, #0]
    559e:	cmp	r3, #0
    55a0:	bne.w	5c5c <MTPD::loop()+0xd08>
        uint32_t pos = 0; // into data
        uint32_t len = sizeof(MTPHeader);
        uint32_t sector = object_id;
        uint32_t count = size / 512;

        disk_pos=DISK_BUFFER_SIZE;
    55a4:	movw	r1, #9248	; 0x2420
    55a8:	mov.w	r2, #8192	; 0x2000
      } else 
      { 
        uint32_t pos = 0; // into data
        uint32_t len = sizeof(MTPHeader);
        uint32_t sector = object_id;
        uint32_t count = size / 512;
    55ac:	lsrs	r5, r0, #9

        disk_pos=DISK_BUFFER_SIZE;
    55ae:	str	r2, [r4, r1]
      } else 
      { 
        uint32_t pos = 0; // into data
        uint32_t len = sizeof(MTPHeader);
        uint32_t sector = object_id;
        uint32_t count = size / 512;
    55b0:	mov	lr, r5

        disk_pos=DISK_BUFFER_SIZE;
        while(pos<size)
    55b2:	cmp	r0, #0
    55b4:	beq.w	6214 <MTPD::loop()+0x12c0>
    55b8:	mov	fp, r2
    55ba:	add.w	r9, r4, #544	; 0x220
    55be:	mov	sl, r3
    55c0:	movw	r6, #9248	; 0x2420
    55c4:	add.w	r3, r4, #1056	; 0x420
      if(!usb_mtp_available()) return;
      if(fetch_packet(rx_data_buffer))
      { printContainer(); // to switch on set debug to 1 at beginning of file

        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
    55c8:	ldr	r2, [sp, #16]
    55ca:	add	r6, r4
    55cc:	str	r7, [sp, #44]	; 0x2c
    55ce:	mov	r5, fp
    55d0:	str	r4, [sp, #52]	; 0x34
    55d2:	str	r3, [sp, #40]	; 0x28
        uint32_t len = sizeof(MTPHeader);
        uint32_t sector = object_id;
        uint32_t count = size / 512;

        disk_pos=DISK_BUFFER_SIZE;
        while(pos<size)
    55d4:	mov.w	r8, #12
    55d8:	str	r3, [sp, #32]
    55da:	mov	r7, r0
      if(!usb_mtp_available()) return;
      if(fetch_packet(rx_data_buffer))
      { printContainer(); // to switch on set debug to 1 at beginning of file

        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
    55dc:	str	r2, [sp, #36]	; 0x24
    55de:	mov	r4, lr
    55e0:	str.w	r9, [sp, #48]	; 0x30
    55e4:	mov	fp, r3
    55e6:	b.n	55f0 <MTPD::loop()+0x69c>
        uint32_t len = sizeof(MTPHeader);
        uint32_t sector = object_id;
        uint32_t count = size / 512;

        disk_pos=DISK_BUFFER_SIZE;
        while(pos<size)
    55e8:	cmp	r7, sl
    55ea:	bls.w	5abc <MTPD::loop()+0xb68>
    55ee:	ldr	r5, [r6, #0]
        {
          if(disk_pos==DISK_BUFFER_SIZE)
    55f0:	cmp.w	r5, #8192	; 0x2000
    55f4:	beq.w	58b2 <MTPD::loop()+0x95e>
    55f8:	rsb	lr, r5, #8192	; 0x2000
            count-=MCOUNT;

            disk_pos=0;
          }

          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
    55fc:	rsb	r2, r8, #512	; 0x200
    5600:	rsb	r3, sl, r7
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);

          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    5604:	add.w	r1, fp, r5
    5608:	add.w	r0, r9, r8
            count-=MCOUNT;

            disk_pos=0;
          }

          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
    560c:	cmp	r2, r3
    560e:	it	cs
    5610:	movcs	r2, r3
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    5612:	cmp	r2, lr
            count-=MCOUNT;

            disk_pos=0;
          }

          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
    5614:	mov	r5, r2
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    5616:	it	cs
    5618:	movcs	r5, lr

          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    561a:	mov	r2, r5
          disk_pos += to_copy;
          pos += to_copy;
          len += to_copy;
    561c:	add	r8, r5
          }

          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);

          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    561e:	bl	83b0 <memcpy>
          disk_pos += to_copy;
    5622:	ldr	r3, [r6, #0]
          pos += to_copy;
    5624:	add	sl, r5
          len += to_copy;

          if(len==MTP_TX_SIZE)
    5626:	cmp.w	r8, #512	; 0x200

          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);

          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
          disk_pos += to_copy;
    562a:	add	r5, r3
    562c:	str	r5, [r6, #0]
          pos += to_copy;
          len += to_copy;

          if(len==MTP_TX_SIZE)
    562e:	bne.n	55e8 <MTPD::loop()+0x694>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5630:	movs	r2, #60	; 0x3c
    5632:	mov.w	r1, #512	; 0x200
    5636:	mov	r0, r9
    5638:	bl	a270 <usb_mtp_send>
    563c:	cmp	r0, #0
    563e:	ble.n	5630 <MTPD::loop()+0x6dc>
          pos += to_copy;
          len += to_copy;

          if(len==MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            len=0;
    5640:	mov.w	r8, #0
    5644:	b.n	55e8 <MTPD::loop()+0x694>
    5646:	ldrh.w	r2, [sp, #24]
    564a:	add.w	r5, r4, #544	; 0x220
//                                  p2); // parent

              CONTAINER->params[1]=p2;
              CONTAINER->params[2]=p3;
              len = 12 + 3 * 4;
              break;
    564e:	ldr	r0, [sp, #16]
    5650:	movs	r7, #24
    5652:	b.n	5050 <MTPD::loop()+0xfc>
    5654:	.word	0x20004204
    5658:	.word	0x2000c318
    565c:	.word	0x2000c250
        break;
    }
  }

  void GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    5660:	movw	r2, #54274	; 0xd402
    5664:	ldr	r1, [sp, #16]
//              if(!SendObject()) return_code = 0x2005;
              len = 12;
              break;

          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    5666:	movs	r5, #0
    5668:	movs	r6, #1
        break;
    }
  }

  void GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    566a:	cmp	r1, r2
//              if(!SendObject()) return_code = 0x2005;
              len = 12;
              break;

          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    566c:	str	r5, [r4, #4]
    566e:	strb	r6, [r4, #0]
        break;
    }
  }

  void GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    5670:	bne.w	5c4c <MTPD::loop()+0xcf8>
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    5674:	movs	r3, #5
  void GetDevicePropValue(uint32_t prop) {
    switch (prop) {
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring(MTP_NAME);
    5676:	ldr	r1, [pc, #776]	; (5980 <MTPD::loop()+0xa2c>)
    5678:	mov	r0, r4
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    567a:	str	r3, [r4, #4]
  void GetDevicePropValue(uint32_t prop) {
    switch (prop) {
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring(MTP_NAME);
    567c:	bl	2b4 <MTPD::writestring(char const*)>
    5680:	ldr	r1, [pc, #764]	; (5980 <MTPD::loop()+0xa2c>)
    5682:	mov	r0, r4
    5684:	bl	2b4 <MTPD::writestring(char const*)>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    5688:	ldrb	r3, [r4, #0]
    568a:	strb.w	r5, [sp, #60]	; 0x3c
    568e:	cmp	r3, #0
    5690:	beq.w	5eaa <MTPD::loop()+0xf56>
      {
        write_length_ += len;
    5694:	ldr	r2, [r4, #4]
    5696:	ldrh	r3, [r4, #38]	; 0x26
    5698:	adds	r2, #13
    569a:	ldr	r0, [r4, #40]	; 0x28
    569c:	str	r2, [sp, #28]
//              if(!SendObject()) return_code = 0x2005;
              len = 12;
              break;

          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    569e:	movs	r2, #0
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    56a0:	add.w	r5, r4, #544	; 0x220
//              if(!SendObject()) return_code = 0x2005;
              len = 12;
              break;

          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    56a4:	mov.w	lr, #2
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    56a8:	ldr	r6, [pc, #728]	; (5984 <MTPD::loop()+0xa30>)
        write_length_ += len;
    56aa:	mov.w	ip, #12
//              if(!SendObject()) return_code = 0x2005;
              len = 12;
              break;

          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    56ae:	ldr	r1, [sp, #28]
    56b0:	str	r0, [sp, #108]	; 0x6c
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
    56b2:	mov	r8, r2
//              if(!SendObject()) return_code = 0x2005;
              len = 12;
              break;

          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    56b4:	strb	r2, [r4, #0]
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    56b6:	mov	r0, r5
//              if(!SendObject()) return_code = 0x2005;
              len = 12;
              break;

          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    56b8:	str	r1, [sp, #100]	; 0x64
    56ba:	add.w	r9, r4, #1056	; 0x420
    56be:	strh.w	r3, [sp, #106]	; 0x6a
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    56c2:	add.w	sl, sp, #100	; 0x64
//              if(!SendObject()) return_code = 0x2005;
              len = 12;
              break;

          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    56c6:	strh.w	lr, [sp, #104]	; 0x68
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    56ca:	str	r5, [r6, #0]
        write_length_ += len;
    56cc:	str.w	ip, [r4, #4]
    56d0:	b.n	56dc <MTPD::loop()+0x788>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    56d2:	cmp.w	r8, #11
    56d6:	bgt.w	58d2 <MTPD::loop()+0x97e>
    56da:	ldr	r0, [r6, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    56dc:	rsb	fp, r0, r9
    56e0:	rsb	r3, r8, #12
          memcpy(dst,src,to_copy);
    56e4:	mov	r1, sl
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    56e6:	cmp	fp, r3
    56e8:	it	ge
    56ea:	movge	fp, r3
          memcpy(dst,src,to_copy);
    56ec:	mov	r2, fp
          pos += to_copy;
    56ee:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    56f0:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    56f4:	ldr	r3, [r6, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    56f6:	add	sl, fp
          dst += to_copy;
    56f8:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    56fa:	cmp	r3, r9
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    56fc:	str	r3, [r6, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    56fe:	bne.n	56d2 <MTPD::loop()+0x77e>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5700:	movs	r2, #60	; 0x3c
    5702:	mov.w	r1, #512	; 0x200
    5706:	mov	r0, r5
    5708:	bl	a270 <usb_mtp_send>
    570c:	cmp	r0, #0
    570e:	ble.n	5700 <MTPD::loop()+0x7ac>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    5710:	str	r5, [r6, #0]
    5712:	b.n	56d2 <MTPD::loop()+0x77e>
//              return_code = setObjectPropValue(p1,p2);
              break;

          default:
              return_code = 0x2005;  // operation not supported
              break;
    5714:	ldr	r0, [sp, #16]
    5716:	add.w	r5, r4, #544	; 0x220
    571a:	movw	r2, #8197	; 0x2005
    571e:	b.n	5050 <MTPD::loop()+0xfc>
    5720:	ldrh.w	r2, [sp, #24]
    5724:	add.w	r5, r4, #544	; 0x220
              break;

          case 0x100D:  // SendObject
//              if(!SendObject()) return_code = 0x2005;
              len = 12;
              break;
    5728:	ldr	r0, [sp, #16]
    572a:	movs	r7, #12
    572c:	b.n	5050 <MTPD::loop()+0xfc>
          case 0x1005:  // GetStorageInfo
            TRANSMIT(GetStorageInfo(p1));
            break;

          case 0x1006:  // GetNumObjects
            if (p2) 
    572e:	cmp.w	sl, #0
    5732:	bne.w	500e <MTPD::loop()+0xba>
    5736:	ldr	r3, [pc, #592]	; (5988 <MTPD::loop()+0xa34>)
{
   char name[80];
   zeroFS_class *zFs_ = zFS;

public:
    uint32_t Count(uint32_t store,uint32_t parent) {return zFs_[0].Count(parent);}
    5738:	mov	r1, r8
    573a:	add.w	r5, r4, #544	; 0x220
    573e:	ldr	r0, [r3, #80]	; 0x50
    5740:	bl	6e74 <zeroFS_class::Count(unsigned long)>
    5744:	ldrh.w	r2, [sp, #24]
    5748:	b.n	5050 <MTPD::loop()+0xfc>
              TRANSMIT(GetObjectHandles(p1, p3));
            }
            break;

          case 0x1008:  // GetObjectInfo
            TRANSMIT(GetObjectInfo(p1));
    574a:	mov.w	r9, #0
    574e:	movs	r3, #1
    5750:	ldr	r1, [sp, #16]
    5752:	mov	r0, r4
    5754:	str.w	r9, [r4, #4]
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5758:	add.w	r5, r4, #544	; 0x220
              TRANSMIT(GetObjectHandles(p1, p3));
            }
            break;

          case 0x1008:  // GetObjectInfo
            TRANSMIT(GetObjectInfo(p1));
    575c:	strb	r3, [r4, #0]
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
    575e:	mov	r8, r9
              TRANSMIT(GetObjectHandles(p1, p3));
            }
            break;

          case 0x1008:  // GetObjectInfo
            TRANSMIT(GetObjectInfo(p1));
    5760:	bl	1b9c <MTPD::GetObjectInfo(unsigned long)>
    5764:	ldr	r3, [r4, #4]
    5766:	movs	r0, #2
    5768:	ldrh	r1, [r4, #38]	; 0x26
    576a:	adds	r3, #12
    576c:	ldr	r2, [r4, #40]	; 0x28
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    576e:	ldr	r6, [pc, #532]	; (5984 <MTPD::loop()+0xa30>)
        write_length_ += len;
    5770:	mov.w	lr, #12
              TRANSMIT(GetObjectHandles(p1, p3));
            }
            break;

          case 0x1008:  // GetObjectInfo
            TRANSMIT(GetObjectInfo(p1));
    5774:	strb.w	r9, [r4]
    5778:	add.w	sl, r4, #1056	; 0x420
    577c:	strh.w	r0, [sp, #104]	; 0x68
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    5780:	add.w	r9, sp, #100	; 0x64
              TRANSMIT(GetObjectHandles(p1, p3));
            }
            break;

          case 0x1008:  // GetObjectInfo
            TRANSMIT(GetObjectInfo(p1));
    5784:	str	r3, [sp, #28]
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    5786:	mov	r0, r5
              TRANSMIT(GetObjectHandles(p1, p3));
            }
            break;

          case 0x1008:  // GetObjectInfo
            TRANSMIT(GetObjectInfo(p1));
    5788:	str	r3, [sp, #100]	; 0x64
    578a:	strh.w	r1, [sp, #106]	; 0x6a
    578e:	str	r2, [sp, #108]	; 0x6c
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5790:	str	r5, [r6, #0]
        write_length_ += len;
    5792:	str.w	lr, [r4, #4]
    5796:	b.n	57a0 <MTPD::loop()+0x84c>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    5798:	cmp.w	r8, #11
    579c:	bgt.n	5866 <MTPD::loop()+0x912>
    579e:	ldr	r0, [r6, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    57a0:	rsb	fp, r0, sl
    57a4:	rsb	r3, r8, #12
          memcpy(dst,src,to_copy);
    57a8:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    57aa:	cmp	fp, r3
    57ac:	it	ge
    57ae:	movge	fp, r3
          memcpy(dst,src,to_copy);
    57b0:	mov	r2, fp
          pos += to_copy;
    57b2:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    57b4:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    57b8:	ldr	r3, [r6, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    57ba:	add	r9, fp
          dst += to_copy;
    57bc:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    57be:	cmp	r3, sl
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    57c0:	str	r3, [r6, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    57c2:	bne.n	5798 <MTPD::loop()+0x844>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    57c4:	movs	r2, #60	; 0x3c
    57c6:	mov.w	r1, #512	; 0x200
    57ca:	mov	r0, r5
    57cc:	bl	a270 <usb_mtp_send>
    57d0:	cmp	r0, #0
    57d2:	ble.n	57c4 <MTPD::loop()+0x870>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    57d4:	str	r5, [r6, #0]
    57d6:	b.n	5798 <MTPD::loop()+0x844>
          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;

          case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    57d8:	movs	r2, #1
      }
    }
  }

  void GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    57da:	movw	r3, #54274	; 0xd402
          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;

          case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    57de:	movs	r1, #0
    57e0:	strb	r2, [r4, #0]
      }
    }
  }

  void GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    57e2:	ldr	r2, [sp, #16]
          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;

          case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    57e4:	str	r1, [r4, #4]
      }
    }
  }

  void GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    57e6:	cmp	r2, r3
    57e8:	beq.w	5c70 <MTPD::loop()+0xd1c>
    57ec:	movs	r3, #12
    57ee:	str	r3, [sp, #28]
          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;

          case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    57f0:	movs	r3, #0
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    57f2:	add.w	r5, r4, #544	; 0x220
          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;

          case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    57f6:	ldr	r0, [sp, #28]
    57f8:	mov.w	ip, #2
    57fc:	movw	r1, #4117	; 0x1015
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5800:	ldr	r6, [pc, #384]	; (5984 <MTPD::loop()+0xa30>)
        write_length_ += len;
    5802:	movs	r2, #12
          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;

          case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    5804:	str	r0, [sp, #100]	; 0x64
    5806:	strb	r3, [r4, #0]
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
    5808:	mov	r8, r3
          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;

          case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    580a:	str.w	lr, [sp, #108]	; 0x6c
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    580e:	mov	r0, r5
          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;

          case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    5810:	strh.w	ip, [sp, #104]	; 0x68
    5814:	add.w	sl, r4, #1056	; 0x420
    5818:	strh.w	r1, [sp, #106]	; 0x6a
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    581c:	add.w	r9, sp, #100	; 0x64
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5820:	str	r5, [r6, #0]
        write_length_ += len;
    5822:	str	r2, [r4, #4]
    5824:	b.n	582e <MTPD::loop()+0x8da>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    5826:	cmp.w	r8, #11
    582a:	bgt.n	588a <MTPD::loop()+0x936>
    582c:	ldr	r0, [r6, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    582e:	rsb	fp, r0, sl
    5832:	rsb	r3, r8, #12
          memcpy(dst,src,to_copy);
    5836:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5838:	cmp	fp, r3
    583a:	it	ge
    583c:	movge	fp, r3
          memcpy(dst,src,to_copy);
    583e:	mov	r2, fp
          pos += to_copy;
    5840:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    5842:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5846:	ldr	r3, [r6, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    5848:	add	r9, fp
          dst += to_copy;
    584a:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    584c:	cmp	r3, sl
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    584e:	str	r3, [r6, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5850:	bne.n	5826 <MTPD::loop()+0x8d2>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5852:	movs	r2, #60	; 0x3c
    5854:	mov.w	r1, #512	; 0x200
    5858:	mov	r0, r5
    585a:	bl	a270 <usb_mtp_send>
    585e:	cmp	r0, #0
    5860:	ble.n	5852 <MTPD::loop()+0x8fe>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    5862:	str	r5, [r6, #0]
    5864:	b.n	5826 <MTPD::loop()+0x8d2>
              TRANSMIT(GetObjectHandles(p1, p3));
            }
            break;

          case 0x1008:  // GetObjectInfo
            TRANSMIT(GetObjectInfo(p1));
    5866:	ldr	r3, [sp, #28]
    5868:	mov	r0, r4
    586a:	ldr	r1, [sp, #16]
    586c:	ubfx	r6, r3, #0, #9
    5870:	bl	1b9c <MTPD::GetObjectInfo(unsigned long)>
    5874:	cmp	r6, #0
    5876:	beq.w	544e <MTPD::loop()+0x4fa>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    587a:	movs	r2, #60	; 0x3c
    587c:	mov	r1, r6
    587e:	mov	r0, r5
    5880:	bl	a270 <usb_mtp_send>
    5884:	cmp	r0, #0
    5886:	ble.n	587a <MTPD::loop()+0x926>
    5888:	b.n	544e <MTPD::loop()+0x4fa>
      }
    }
  }

  void GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    588a:	movw	r3, #54274	; 0xd402
    588e:	ldr	r2, [sp, #16]
    5890:	cmp	r2, r3
    5892:	beq.w	5fde <MTPD::loop()+0x108a>
          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;

          case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    5896:	ldr	r3, [sp, #28]
    5898:	ubfx	r6, r3, #0, #9
    589c:	cmp	r6, #0
    589e:	beq.w	544e <MTPD::loop()+0x4fa>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    58a2:	movs	r2, #60	; 0x3c
    58a4:	mov	r1, r6
    58a6:	mov	r0, r5
    58a8:	bl	a270 <usb_mtp_send>
    58ac:	cmp	r0, #0
    58ae:	ble.n	58a2 <MTPD::loop()+0x94e>
    58b0:	b.n	544e <MTPD::loop()+0x4fa>
    { return zFs_[0].Info(handle, filename, size, parent);}

    uint32_t GetSize(uint32_t handle) {return zFs_[0].GetSize(handle);}
    
    uint32_t Read(uint32_t handle, char* out, uint32_t count) 
    { return zFs_[0].Read(handle, out, count);}
    58b2:	cmp	r4, #16
    58b4:	ldr	r0, [sp, #28]
    58b6:	mov	r3, r4
    58b8:	ldr	r1, [sp, #36]	; 0x24
    58ba:	it	cs
    58bc:	movcs	r3, #16
    58be:	mov	r2, fp
    58c0:	ldr	r0, [r0, #80]	; 0x50
          if(disk_pos==DISK_BUFFER_SIZE)
          {
//            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
//            mFS.Read(object_id,size,pos,(char *)disk_buffer,nread);
            sector = mFS.Read(sector, (char *)disk_buffer, min(count,MCOUNT));
            count-=MCOUNT;
    58c2:	subs	r4, #16
    { return zFs_[0].Info(handle, filename, size, parent);}

    uint32_t GetSize(uint32_t handle) {return zFs_[0].GetSize(handle);}
    
    uint32_t Read(uint32_t handle, char* out, uint32_t count) 
    { return zFs_[0].Read(handle, out, count);}
    58c4:	bl	6fac <zeroFS_class::Read(unsigned long, char*, unsigned long)>
//            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
//            mFS.Read(object_id,size,pos,(char *)disk_buffer,nread);
            sector = mFS.Read(sector, (char *)disk_buffer, min(count,MCOUNT));
            count-=MCOUNT;

            disk_pos=0;
    58c8:	mov	lr, r5
    58ca:	movs	r5, #0
    { return zFs_[0].Info(handle, filename, size, parent);}

    uint32_t GetSize(uint32_t handle) {return zFs_[0].GetSize(handle);}
    
    uint32_t Read(uint32_t handle, char* out, uint32_t count) 
    { return zFs_[0].Read(handle, out, count);}
    58cc:	str	r0, [sp, #36]	; 0x24
//            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
//            mFS.Read(object_id,size,pos,(char *)disk_buffer,nread);
            sector = mFS.Read(sector, (char *)disk_buffer, min(count,MCOUNT));
            count-=MCOUNT;

            disk_pos=0;
    58ce:	str	r5, [r6, #0]
    58d0:	b.n	55fc <MTPD::loop()+0x6a8>
        break;
    }
  }

  void GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    58d2:	movw	r3, #54274	; 0xd402
    58d6:	ldr	r1, [sp, #16]
    58d8:	cmp	r1, r3
    58da:	bne.n	5928 <MTPD::loop()+0x9d4>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    58dc:	ldrb	r3, [r4, #0]
    58de:	strh.w	r1, [sp, #64]	; 0x40
    58e2:	cmp	r3, #0
    58e4:	beq.w	5ec2 <MTPD::loop()+0xf6e>
      {
        write_length_ += len;
    58e8:	ldr	r3, [r4, #4]
    58ea:	movw	r2, #65535	; 0xffff
    58ee:	adds	r3, #2
    58f0:	strh.w	r2, [sp, #66]	; 0x42
    58f4:	movs	r2, #0
    58f6:	adds	r3, #2
    58f8:	strb.w	r2, [sp, #61]	; 0x3d
    58fc:	adds	r3, #1
    58fe:	str	r3, [r4, #4]
  void GetDevicePropValue(uint32_t prop) {
    switch (prop) {
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring(MTP_NAME);
    5900:	ldr	r1, [pc, #124]	; (5980 <MTPD::loop()+0xa2c>)
    5902:	mov	r0, r4
    5904:	bl	2b4 <MTPD::writestring(char const*)>
    5908:	ldr	r1, [pc, #116]	; (5980 <MTPD::loop()+0xa2c>)
    590a:	mov	r0, r4
    590c:	bl	2b4 <MTPD::writestring(char const*)>
    5910:	movs	r2, #0
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    5912:	ldrb	r3, [r4, #0]
    5914:	strb.w	r2, [sp, #62]	; 0x3e
    5918:	cmp	r3, #0
    591a:	beq.w	5df6 <MTPD::loop()+0xea2>
      {
        write_length_ += len;
    591e:	ldr	r3, [r4, #4]
    5920:	ldr	r2, [sp, #100]	; 0x64
    5922:	adds	r3, #1
    5924:	str	r2, [sp, #28]
    5926:	str	r3, [r4, #4]
//              if(!SendObject()) return_code = 0x2005;
              len = 12;
              break;

          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    5928:	ldr	r3, [sp, #28]
    592a:	ubfx	r6, r3, #0, #9
    592e:	cmp	r6, #0
    5930:	beq.w	544e <MTPD::loop()+0x4fa>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5934:	movs	r2, #60	; 0x3c
    5936:	mov	r1, r6
    5938:	mov	r0, r5
    593a:	bl	a270 <usb_mtp_send>
    593e:	cmp	r0, #0
    5940:	ble.n	5934 <MTPD::loop()+0x9e0>
    5942:	b.n	544e <MTPD::loop()+0x4fa>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5944:	mov	r0, r5
    5946:	str	r5, [r6, #0]
    5948:	b.w	50f6 <MTPD::loop()+0x1a2>
    594c:	movs	r2, #1
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    594e:	ldrb	r3, [r4, #0]
    5950:	str	r2, [sp, #80]	; 0x50
    5952:	cmp	r3, #0
    5954:	beq.w	5d3a <MTPD::loop()+0xde6>
      {
        write_length_ += len;
    5958:	ldr	r3, [r4, #4]
    595a:	str	r2, [sp, #84]	; 0x54
    595c:	adds	r3, #4
    595e:	adds	r3, #4
    5960:	str	r3, [r4, #4]

          case 0x1003:  // CloseSession
            break;

          case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
    5962:	ldr	r6, [sp, #100]	; 0x64
    5964:	ubfx	r6, r6, #0, #9
    5968:	cmp	r6, #0
    596a:	beq.w	544e <MTPD::loop()+0x4fa>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    596e:	movs	r2, #60	; 0x3c
    5970:	mov	r1, r6
    5972:	mov	r0, r5
    5974:	bl	a270 <usb_mtp_send>
    5978:	cmp	r0, #0
    597a:	ble.n	596e <MTPD::loop()+0xa1a>
    597c:	b.n	544e <MTPD::loop()+0x4fa>
    597e:	nop
    5980:	.word	0x20000af0
    5984:	.word	0x20004204
    5988:	.word	0x2000c250
    598c:	ldr	r7, [sp, #32]
    598e:	ldr.w	lr, [r4, #40]	; 0x28
          case 0x101B:  // GetPartialObject
//              TRANSMIT1(GetPartialObject(p1,p2,p3));
              break;

          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
    5992:	movs	r0, #2
    5994:	adds	r3, #12
    5996:	mov.w	r9, #0
    599a:	ldrh	r1, [r4, #38]	; 0x26
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    599c:	movs	r2, #12
          case 0x101B:  // GetPartialObject
//              TRANSMIT1(GetPartialObject(p1,p2,p3));
              break;

          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
    599e:	strh.w	r0, [sp, #104]	; 0x68
    59a2:	strb.w	r9, [r4]
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    59a6:	mov	r0, r5
          case 0x101B:  // GetPartialObject
//              TRANSMIT1(GetPartialObject(p1,p2,p3));
              break;

          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
    59a8:	str.w	lr, [sp, #108]	; 0x6c
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    59ac:	add.w	sl, sp, #100	; 0x64
          case 0x101B:  // GetPartialObject
//              TRANSMIT1(GetPartialObject(p1,p2,p3));
              break;

          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
    59b0:	str	r3, [sp, #100]	; 0x64
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    59b2:	str	r5, [r6, #0]
          case 0x101B:  // GetPartialObject
//              TRANSMIT1(GetPartialObject(p1,p2,p3));
              break;

          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
    59b4:	strh.w	r1, [sp, #106]	; 0x6a
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    59b8:	str	r2, [r4, #4]
    59ba:	b.n	59c4 <MTPD::loop()+0xa70>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    59bc:	cmp.w	r9, #11
    59c0:	bgt.n	59fc <MTPD::loop()+0xaa8>
    59c2:	ldr	r0, [r6, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    59c4:	rsb	fp, r0, r8
    59c8:	rsb	r3, r9, #12
          memcpy(dst,src,to_copy);
    59cc:	mov	r1, sl
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    59ce:	cmp	fp, r3
    59d0:	it	ge
    59d2:	movge	fp, r3
          memcpy(dst,src,to_copy);
    59d4:	mov	r2, fp
          pos += to_copy;
    59d6:	add	r9, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    59d8:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    59dc:	ldr	r3, [r6, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    59de:	add	sl, fp
          dst += to_copy;
    59e0:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    59e2:	cmp	r3, r8
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    59e4:	str	r3, [r6, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    59e6:	bne.n	59bc <MTPD::loop()+0xa68>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    59e8:	movs	r2, #60	; 0x3c
    59ea:	mov.w	r1, #512	; 0x200
    59ee:	mov	r0, r5
    59f0:	bl	a270 <usb_mtp_send>
    59f4:	cmp	r0, #0
    59f6:	ble.n	59e8 <MTPD::loop()+0xa94>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    59f8:	str	r5, [r6, #0]
    59fa:	b.n	59bc <MTPD::loop()+0xa68>
    }
  }

    void getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
    59fc:	ldr	r3, [pc, #740]	; (5ce4 <MTPD::loop()+0xd90>)
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    59fe:	ldrb	r2, [r4, #0]
    }
  }

    void getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
    5a00:	ldr	r3, [r3, #0]
    5a02:	str	r3, [sp, #96]	; 0x60
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    5a04:	cmp	r2, #0
    5a06:	beq.w	5e4a <MTPD::loop()+0xef6>
      {
        write_length_ += len;
    5a0a:	ldr	r2, [r4, #4]
    5a0c:	adds	r2, #4
    5a0e:	str	r2, [r4, #4]
  }

    void getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    5a10:	cmp	r3, #0
    5a12:	beq.n	5aa0 <MTPD::loop()+0xb4c>
    5a14:	ldr	r3, [pc, #720]	; (5ce8 <MTPD::loop()+0xd94>)
    5a16:	movw	r2, #56321	; 0xdc01
    5a1a:	str	r7, [sp, #32]
    5a1c:	str	r3, [sp, #28]
    5a1e:	movs	r3, #0
    5a20:	mov	sl, r3
    5a22:	b.n	5a3e <MTPD::loop()+0xaea>
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    5a24:	ldr	r3, [r4, #4]
    5a26:	adds	r3, #2
    5a28:	str	r3, [r4, #4]
  }

    void getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    5a2a:	ldr	r3, [pc, #696]	; (5ce4 <MTPD::loop()+0xd90>)
    5a2c:	add.w	sl, sl, #1
    5a30:	ldr	r3, [r3, #0]
    5a32:	cmp	r3, sl
    5a34:	bls.n	5a9e <MTPD::loop()+0xb4a>
    5a36:	ldr	r3, [sp, #28]
    5a38:	ldrh.w	r2, [r3, #2]!
    5a3c:	str	r3, [sp, #28]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    5a3e:	ldrb	r3, [r4, #0]
    5a40:	strh.w	r2, [sp, #76]	; 0x4c
    5a44:	cmp	r3, #0
    5a46:	bne.n	5a24 <MTPD::loop()+0xad0>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5a48:	ldr	r3, [r4, #4]
    5a4a:	cbz	r3, 5a98 <MTPD::loop()+0xb44>
    5a4c:	ldr	r0, [r6, #0]
        write_length_ += len;
    5a4e:	adds	r3, #2
        
        const char * src=data;
    5a50:	add.w	r9, sp, #76	; 0x4c
        //
        int pos = 0; // into data
    5a54:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    5a56:	str	r3, [r4, #4]
    5a58:	b.n	5a60 <MTPD::loop()+0xb0c>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    5a5a:	cmp	r7, #1
    5a5c:	bgt.n	5a2a <MTPD::loop()+0xad6>
    5a5e:	ldr	r0, [r6, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5a60:	rsb	fp, r0, r8
    5a64:	rsb	r3, r7, #2
          memcpy(dst,src,to_copy);
    5a68:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5a6a:	cmp	fp, r3
    5a6c:	it	ge
    5a6e:	movge	fp, r3
          memcpy(dst,src,to_copy);
    5a70:	mov	r2, fp
          pos += to_copy;
    5a72:	add	r7, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    5a74:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5a78:	ldr	r3, [r6, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    5a7a:	add	r9, fp
          dst += to_copy;
    5a7c:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5a7e:	cmp	r3, r8
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5a80:	str	r3, [r6, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5a82:	bne.n	5a5a <MTPD::loop()+0xb06>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5a84:	movs	r2, #60	; 0x3c
    5a86:	mov.w	r1, #512	; 0x200
    5a8a:	mov	r0, r5
    5a8c:	bl	a270 <usb_mtp_send>
    5a90:	cmp	r0, #0
    5a92:	ble.n	5a84 <MTPD::loop()+0xb30>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    5a94:	str	r5, [r6, #0]
    5a96:	b.n	5a5a <MTPD::loop()+0xb06>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5a98:	mov	r0, r5
    5a9a:	str	r5, [r6, #0]
    5a9c:	b.n	5a4e <MTPD::loop()+0xafa>
    5a9e:	ldr	r7, [sp, #32]
          case 0x101B:  // GetPartialObject
//              TRANSMIT1(GetPartialObject(p1,p2,p3));
              break;

          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
    5aa0:	ldr	r6, [sp, #100]	; 0x64
    5aa2:	ubfx	r6, r6, #0, #9
    5aa6:	cmp	r6, #0
    5aa8:	beq.w	544e <MTPD::loop()+0x4fa>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5aac:	movs	r2, #60	; 0x3c
    5aae:	mov	r1, r6
    5ab0:	mov	r0, r5
    5ab2:	bl	a270 <usb_mtp_send>
    5ab6:	cmp	r0, #0
    5ab8:	ble.n	5aac <MTPD::loop()+0xb58>
    5aba:	b.n	544e <MTPD::loop()+0x4fa>
    5abc:	ldr	r7, [sp, #44]	; 0x2c
    5abe:	ldr	r5, [sp, #48]	; 0x30
    5ac0:	ldr	r4, [sp, #52]	; 0x34
          if(len==MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            len=0;
          }
        }
        if(len>0)
    5ac2:	cmp.w	r8, #0
    5ac6:	beq.n	5ade <MTPD::loop()+0xb8a>
    5ac8:	ldr	r3, [sp, #40]	; 0x28
    5aca:	mov	r5, r9
    5acc:	str	r3, [sp, #32]

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5ace:	movs	r2, #60	; 0x3c
    5ad0:	mov.w	r1, #512	; 0x200
    5ad4:	mov	r0, r9
    5ad6:	bl	a270 <usb_mtp_send>
    5ada:	cmp	r0, #0
    5adc:	ble.n	5ace <MTPD::loop()+0xb7a>
    5ade:	ldr	r3, [r4, #4]
          case 0x1008:  // GetObjectInfo
            TRANSMIT(GetObjectInfo(p1));
            break;

          case 0x1009:  // GetObject
            TRANSMIT(GetObject(p1));
    5ae0:	adds	r3, #12
    5ae2:	movs	r0, #2
    5ae4:	mov.w	r8, #0
    5ae8:	ldrh	r1, [r4, #38]	; 0x26
    5aea:	mov	r6, r3
    5aec:	str	r3, [sp, #36]	; 0x24
    5aee:	ldr	r2, [r4, #40]	; 0x28
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    5af0:	movs	r3, #12
          case 0x1008:  // GetObjectInfo
            TRANSMIT(GetObjectInfo(p1));
            break;

          case 0x1009:  // GetObject
            TRANSMIT(GetObject(p1));
    5af2:	str	r6, [sp, #100]	; 0x64
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    5af4:	add.w	r9, sp, #100	; 0x64
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5af8:	ldr	r6, [pc, #496]	; (5cec <MTPD::loop()+0xd98>)
          case 0x1008:  // GetObjectInfo
            TRANSMIT(GetObjectInfo(p1));
            break;

          case 0x1009:  // GetObject
            TRANSMIT(GetObject(p1));
    5afa:	strb.w	r8, [r4]
    5afe:	strh.w	r0, [sp, #104]	; 0x68
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    5b02:	mov	r0, r5
          case 0x1008:  // GetObjectInfo
            TRANSMIT(GetObjectInfo(p1));
            break;

          case 0x1009:  // GetObject
            TRANSMIT(GetObject(p1));
    5b04:	strh.w	r1, [sp, #106]	; 0x6a
    5b08:	str	r2, [sp, #108]	; 0x6c
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    5b0a:	str	r3, [r4, #4]
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5b0c:	str	r5, [r6, #0]
    5b0e:	ldr.w	fp, [sp, #32]
    5b12:	b.n	5b1c <MTPD::loop()+0xbc8>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    5b14:	cmp.w	r8, #11
    5b18:	bgt.n	5b54 <MTPD::loop()+0xc00>
    5b1a:	ldr	r0, [r6, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5b1c:	rsb	sl, r0, fp
    5b20:	rsb	r3, r8, #12
          memcpy(dst,src,to_copy);
    5b24:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5b26:	cmp	sl, r3
    5b28:	it	ge
    5b2a:	movge	sl, r3
          memcpy(dst,src,to_copy);
    5b2c:	mov	r2, sl
          pos += to_copy;
    5b2e:	add	r8, sl
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    5b30:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5b34:	ldr	r3, [r6, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    5b36:	add	r9, sl
          dst += to_copy;
    5b38:	add	r3, sl
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5b3a:	cmp	r3, fp
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5b3c:	str	r3, [r6, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5b3e:	bne.n	5b14 <MTPD::loop()+0xbc0>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5b40:	movs	r2, #60	; 0x3c
    5b42:	mov.w	r1, #512	; 0x200
    5b46:	mov	r0, r5
    5b48:	bl	a270 <usb_mtp_send>
    5b4c:	cmp	r0, #0
    5b4e:	ble.n	5b40 <MTPD::loop()+0xbec>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    5b50:	str	r5, [r6, #0]
    5b52:	b.n	5b14 <MTPD::loop()+0xbc0>
    char * getName(uint32_t store) {return zFs_[0].getName();}

    uint32_t Info(uint32_t handle, char *filename, uint32_t *size, uint32_t *parent)
    { return zFs_[0].Info(handle, filename, size, parent);}

    uint32_t GetSize(uint32_t handle) {return zFs_[0].GetSize(handle);}
    5b54:	ldr	r3, [sp, #28]
    5b56:	ldr	r1, [sp, #16]
    5b58:	ldr	r0, [r3, #80]	; 0x50
    5b5a:	bl	6f70 <zeroFS_class::GetSize(unsigned long)>

    void GetObject(uint32_t object_id) 
    {
      uint32_t size = mFS.GetSize(object_id);

      if (write_get_length_) {
    5b5e:	ldrb	r3, [r4, #0]
    char * getName(uint32_t store) {return zFs_[0].getName();}

    uint32_t Info(uint32_t handle, char *filename, uint32_t *size, uint32_t *parent)
    { return zFs_[0].Info(handle, filename, size, parent);}

    uint32_t GetSize(uint32_t handle) {return zFs_[0].GetSize(handle);}
    5b60:	mov	fp, r0

    void GetObject(uint32_t object_id) 
    {
      uint32_t size = mFS.GetSize(object_id);

      if (write_get_length_) {
    5b62:	cmp	r3, #0
    5b64:	bne.n	5c54 <MTPD::loop()+0xd00>
        uint32_t pos = 0; // into data
        uint32_t len = sizeof(MTPHeader);
        uint32_t sector = object_id;
        uint32_t count = size / 512;

        disk_pos=DISK_BUFFER_SIZE;
    5b66:	movw	r1, #9248	; 0x2420
    5b6a:	mov.w	r2, #8192	; 0x2000
      } else 
      { 
        uint32_t pos = 0; // into data
        uint32_t len = sizeof(MTPHeader);
        uint32_t sector = object_id;
        uint32_t count = size / 512;
    5b6e:	lsrs	r0, r0, #9

        disk_pos=DISK_BUFFER_SIZE;
    5b70:	str	r2, [r4, r1]
        while(pos<size)
    5b72:	cmp.w	fp, #0
    5b76:	beq.n	5bf8 <MTPD::loop()+0xca4>
    5b78:	mov	r9, r3
    5b7a:	mov	r6, r1
      if(!usb_mtp_available()) return;
      if(fetch_packet(rx_data_buffer))
      { printContainer(); // to switch on set debug to 1 at beginning of file

        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
    5b7c:	ldr	r3, [sp, #16]
        uint32_t len = sizeof(MTPHeader);
        uint32_t sector = object_id;
        uint32_t count = size / 512;

        disk_pos=DISK_BUFFER_SIZE;
        while(pos<size)
    5b7e:	mov.w	r8, #12
    5b82:	add	r6, r4
    5b84:	str	r7, [sp, #44]	; 0x2c
    5b86:	ldr.w	sl, [sp, #32]
    5b8a:	mov	r7, r2
    5b8c:	str	r4, [sp, #32]
    5b8e:	mov	r4, r0
      if(!usb_mtp_available()) return;
      if(fetch_packet(rx_data_buffer))
      { printContainer(); // to switch on set debug to 1 at beginning of file

        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
    5b90:	str	r3, [sp, #40]	; 0x28
    5b92:	b.n	5b9a <MTPD::loop()+0xc46>
        uint32_t len = sizeof(MTPHeader);
        uint32_t sector = object_id;
        uint32_t count = size / 512;

        disk_pos=DISK_BUFFER_SIZE;
        while(pos<size)
    5b94:	cmp	fp, r9
    5b96:	bls.n	5bee <MTPD::loop()+0xc9a>
    5b98:	ldr	r7, [r6, #0]
        {
          if(disk_pos==DISK_BUFFER_SIZE)
    5b9a:	cmp.w	r7, #8192	; 0x2000
    5b9e:	beq.n	5c24 <MTPD::loop()+0xcd0>
    5ba0:	rsb	lr, r7, #8192	; 0x2000
            count-=MCOUNT;

            disk_pos=0;
          }

          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
    5ba4:	rsb	r2, r8, #512	; 0x200
    5ba8:	rsb	r3, r9, fp
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);

          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    5bac:	add.w	r1, sl, r7
    5bb0:	add.w	r0, r5, r8
            count-=MCOUNT;

            disk_pos=0;
          }

          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
    5bb4:	cmp	r2, r3
    5bb6:	it	cs
    5bb8:	movcs	r2, r3
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    5bba:	cmp	r2, lr
            count-=MCOUNT;

            disk_pos=0;
          }

          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
    5bbc:	mov	r7, r2
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    5bbe:	it	cs
    5bc0:	movcs	r7, lr

          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    5bc2:	mov	r2, r7
          disk_pos += to_copy;
          pos += to_copy;
          len += to_copy;
    5bc4:	add	r8, r7
          }

          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);

          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    5bc6:	bl	83b0 <memcpy>
          disk_pos += to_copy;
    5bca:	ldr	r3, [r6, #0]
          pos += to_copy;
    5bcc:	add	r9, r7
          len += to_copy;

          if(len==MTP_TX_SIZE)
    5bce:	cmp.w	r8, #512	; 0x200

          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);

          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
          disk_pos += to_copy;
    5bd2:	add	r7, r3
    5bd4:	str	r7, [r6, #0]
          pos += to_copy;
          len += to_copy;

          if(len==MTP_TX_SIZE)
    5bd6:	bne.n	5b94 <MTPD::loop()+0xc40>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5bd8:	movs	r2, #60	; 0x3c
    5bda:	mov.w	r1, #512	; 0x200
    5bde:	mov	r0, r5
    5be0:	bl	a270 <usb_mtp_send>
    5be4:	cmp	r0, #0
    5be6:	ble.n	5bd8 <MTPD::loop()+0xc84>
          pos += to_copy;
          len += to_copy;

          if(len==MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            len=0;
    5be8:	mov.w	r8, #0
    5bec:	b.n	5b94 <MTPD::loop()+0xc40>
    5bee:	ldr	r7, [sp, #44]	; 0x2c
    5bf0:	ldr	r4, [sp, #32]
          }
        }
        if(len>0)
    5bf2:	cmp.w	r8, #0
    5bf6:	beq.n	5c08 <MTPD::loop()+0xcb4>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5bf8:	movs	r2, #60	; 0x3c
    5bfa:	mov.w	r1, #512	; 0x200
    5bfe:	mov	r0, r5
    5c00:	bl	a270 <usb_mtp_send>
    5c04:	cmp	r0, #0
    5c06:	ble.n	5bf8 <MTPD::loop()+0xca4>
          case 0x1008:  // GetObjectInfo
            TRANSMIT(GetObjectInfo(p1));
            break;

          case 0x1009:  // GetObject
            TRANSMIT(GetObject(p1));
    5c08:	ldr	r3, [sp, #36]	; 0x24
    5c0a:	ubfx	r6, r3, #0, #9
    5c0e:	cmp	r6, #0
    5c10:	beq.w	544e <MTPD::loop()+0x4fa>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5c14:	movs	r2, #60	; 0x3c
    5c16:	mov	r1, r6
    5c18:	mov	r0, r5
    5c1a:	bl	a270 <usb_mtp_send>
    5c1e:	cmp	r0, #0
    5c20:	ble.n	5c14 <MTPD::loop()+0xcc0>
    5c22:	b.n	544e <MTPD::loop()+0x4fa>
    { return zFs_[0].Info(handle, filename, size, parent);}

    uint32_t GetSize(uint32_t handle) {return zFs_[0].GetSize(handle);}
    
    uint32_t Read(uint32_t handle, char* out, uint32_t count) 
    { return zFs_[0].Read(handle, out, count);}
    5c24:	cmp	r4, #16
    5c26:	ldr	r0, [sp, #28]
    5c28:	mov	r3, r4
    5c2a:	ldr	r1, [sp, #40]	; 0x28
    5c2c:	it	cs
    5c2e:	movcs	r3, #16
    5c30:	mov	r2, sl
    5c32:	ldr	r0, [r0, #80]	; 0x50
          if(disk_pos==DISK_BUFFER_SIZE)
          {
//            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
//            mFS.Read(object_id,size,pos,(char *)disk_buffer,nread);
            sector = mFS.Read(sector, (char *)disk_buffer, min(count,MCOUNT));
            count-=MCOUNT;
    5c34:	subs	r4, #16
    { return zFs_[0].Info(handle, filename, size, parent);}

    uint32_t GetSize(uint32_t handle) {return zFs_[0].GetSize(handle);}
    
    uint32_t Read(uint32_t handle, char* out, uint32_t count) 
    { return zFs_[0].Read(handle, out, count);}
    5c36:	bl	6fac <zeroFS_class::Read(unsigned long, char*, unsigned long)>
//            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
//            mFS.Read(object_id,size,pos,(char *)disk_buffer,nread);
            sector = mFS.Read(sector, (char *)disk_buffer, min(count,MCOUNT));
            count-=MCOUNT;

            disk_pos=0;
    5c3a:	mov	lr, r7
    5c3c:	movs	r7, #0
    { return zFs_[0].Info(handle, filename, size, parent);}

    uint32_t GetSize(uint32_t handle) {return zFs_[0].GetSize(handle);}
    
    uint32_t Read(uint32_t handle, char* out, uint32_t count) 
    { return zFs_[0].Read(handle, out, count);}
    5c3e:	str	r0, [sp, #40]	; 0x28
//            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
//            mFS.Read(object_id,size,pos,(char *)disk_buffer,nread);
            sector = mFS.Read(sector, (char *)disk_buffer, min(count,MCOUNT));
            count-=MCOUNT;

            disk_pos=0;
    5c40:	str	r7, [r6, #0]
    5c42:	b.n	5ba4 <MTPD::loop()+0xc50>
          case 0x1009:  // GetObject
            TRANSMIT(GetObject(p1));
            break;

          case 0x100B:  // DeleteObject
              if (p2) {
    5c44:	movw	r2, #8210	; 0x2012
    5c48:	b.w	5050 <MTPD::loop()+0xfc>
        break;
    }
  }

  void GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    5c4c:	movs	r2, #12
    5c4e:	ldr	r0, [sp, #20]
    5c50:	str	r2, [sp, #28]
    5c52:	b.n	569e <MTPD::loop()+0x74a>
    void GetObject(uint32_t object_id) 
    {
      uint32_t size = mFS.GetSize(object_id);

      if (write_get_length_) {
        write_length_ += size;
    5c54:	ldr	r3, [r4, #4]
    5c56:	add	r3, r0
    5c58:	str	r3, [r4, #4]
    5c5a:	b.n	5c08 <MTPD::loop()+0xcb4>
    5c5c:	add.w	r2, r4, #1056	; 0x420
    5c60:	ldr	r3, [r4, #4]
    5c62:	add.w	r5, r4, #544	; 0x220
    5c66:	str	r2, [sp, #32]
    5c68:	mov	r2, r0
    5c6a:	add	r2, r3
    5c6c:	mov	r3, r2
    5c6e:	b.n	5ae0 <MTPD::loop()+0xb8c>
      }
    }
  }

  void GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    5c70:	mov.w	fp, #3
    5c74:	movs	r3, #84	; 0x54
    5c76:	ldr	r2, [pc, #120]	; (5cf0 <MTPD::loop()+0xd9c>)
    5c78:	b.n	5c7c <MTPD::loop()+0xd28>
  #define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    5c7a:	mov	fp, r1
    5c7c:	uxth	r0, r3
    5c7e:	ldrb.w	r3, [r2, #1]!
    5c82:	add.w	r1, fp, #2
    5c86:	cmp	r3, #0
    5c88:	bne.n	5c7a <MTPD::loop()+0xd26>
    5c8a:	add.w	r2, fp, #14
    5c8e:	strh.w	r0, [sp, #70]	; 0x46
    5c92:	strh.w	r3, [sp, #68]	; 0x44
    5c96:	str	r2, [sp, #28]
    5c98:	b.n	57f0 <MTPD::loop()+0x89c>
    5c9a:	ldr	r2, [pc, #88]	; (5cf4 <MTPD::loop()+0xda0>)
          case 0x1007:  // GetObjectHandles
            if (p2) 
            { return_code = 0x2014; // spec by format unsupported
            } else 
            { 
              TRANSMIT(GetObjectHandles(p1, p3));
    5c9c:	movs	r3, #1
    5c9e:	str.w	sl, [r4, #4]
{
   char name[80];
   zeroFS_class *zFs_ = zFS;

public:
    uint32_t Count(uint32_t store,uint32_t parent) {return zFs_[0].Count(parent);}
    5ca2:	mov	r1, r8
          case 0x1007:  // GetObjectHandles
            if (p2) 
            { return_code = 0x2014; // spec by format unsupported
            } else 
            { 
              TRANSMIT(GetObjectHandles(p1, p3));
    5ca4:	strb	r3, [r4, #0]
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5ca6:	add.w	r5, r4, #544	; 0x220
{
   char name[80];
   zeroFS_class *zFs_ = zFS;

public:
    uint32_t Count(uint32_t store,uint32_t parent) {return zFs_[0].Count(parent);}
    5caa:	ldr	r0, [r2, #80]	; 0x50
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
    5cac:	mov	r9, sl
    5cae:	str	r2, [sp, #28]
{
   char name[80];
   zeroFS_class *zFs_ = zFS;

public:
    uint32_t Count(uint32_t store,uint32_t parent) {return zFs_[0].Count(parent);}
    5cb0:	bl	6e74 <zeroFS_class::Count(unsigned long)>
          case 0x1007:  // GetObjectHandles
            if (p2) 
            { return_code = 0x2014; // spec by format unsupported
            } else 
            { 
              TRANSMIT(GetObjectHandles(p1, p3));
    5cb4:	lsls	r3, r0, #2
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5cb6:	ldr	r6, [pc, #52]	; (5cec <MTPD::loop()+0xd98>)
          case 0x1007:  // GetObjectHandles
            if (p2) 
            { return_code = 0x2014; // spec by format unsupported
            } else 
            { 
              TRANSMIT(GetObjectHandles(p1, p3));
    5cb8:	movs	r0, #2
    5cba:	ldrh	r1, [r4, #38]	; 0x26
    5cbc:	adds	r3, #16
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    5cbe:	movs	r2, #12
          case 0x1007:  // GetObjectHandles
            if (p2) 
            { return_code = 0x2014; // spec by format unsupported
            } else 
            { 
              TRANSMIT(GetObjectHandles(p1, p3));
    5cc0:	strb.w	sl, [r4]
    5cc4:	add.w	fp, r4, #1056	; 0x420
    5cc8:	str	r3, [sp, #100]	; 0x64
    5cca:	ldr	r3, [r4, #40]	; 0x28
    5ccc:	strh.w	r0, [sp, #104]	; 0x68
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    5cd0:	mov	r0, r5
          case 0x1007:  // GetObjectHandles
            if (p2) 
            { return_code = 0x2014; // spec by format unsupported
            } else 
            { 
              TRANSMIT(GetObjectHandles(p1, p3));
    5cd2:	str	r3, [sp, #108]	; 0x6c
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    5cd4:	add	r3, sp, #100	; 0x64
          case 0x1007:  // GetObjectHandles
            if (p2) 
            { return_code = 0x2014; // spec by format unsupported
            } else 
            { 
              TRANSMIT(GetObjectHandles(p1, p3));
    5cd6:	strh.w	r1, [sp, #106]	; 0x6a
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5cda:	str	r5, [r6, #0]
    5cdc:	mov	sl, r3
        write_length_ += len;
    5cde:	str	r2, [r4, #4]
    5ce0:	str	r4, [sp, #32]
    5ce2:	b.n	5d02 <MTPD::loop()+0xdae>
    5ce4:	.word	0x200017d4
    5ce8:	.word	0x20000404
    5cec:	.word	0x20004204
    5cf0:	.word	0x20000af0
    5cf4:	.word	0x2000c250
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    5cf8:	cmp.w	r9, #11
    5cfc:	bgt.w	6080 <MTPD::loop()+0x112c>
    5d00:	ldr	r0, [r6, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5d02:	rsb	r2, r0, fp
    5d06:	rsb	r3, r9, #12
          memcpy(dst,src,to_copy);
    5d0a:	mov	r1, sl
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5d0c:	cmp	r2, r3
    5d0e:	it	ge
    5d10:	movge	r2, r3
    5d12:	mov	r4, r2
          memcpy(dst,src,to_copy);
          pos += to_copy;
    5d14:	add	r9, r2
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    5d16:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5d1a:	ldr	r2, [r6, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    5d1c:	add	sl, r4
          dst += to_copy;
    5d1e:	adds	r3, r2, r4
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5d20:	cmp	r3, fp
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5d22:	str	r3, [r6, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5d24:	bne.n	5cf8 <MTPD::loop()+0xda4>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5d26:	movs	r2, #60	; 0x3c
    5d28:	mov.w	r1, #512	; 0x200
    5d2c:	mov	r0, r5
    5d2e:	bl	a270 <usb_mtp_send>
    5d32:	cmp	r0, #0
    5d34:	ble.n	5d26 <MTPD::loop()+0xdd2>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    5d36:	str	r5, [r6, #0]
    5d38:	b.n	5cf8 <MTPD::loop()+0xda4>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5d3a:	ldr	r3, [r4, #4]
    5d3c:	cbnz	r3, 5d40 <MTPD::loop()+0xdec>
    5d3e:	str	r5, [r6, #0]
        write_length_ += len;
    5d40:	adds	r3, #4
        
        const char * src=data;
    5d42:	add.w	sl, sp, #80	; 0x50
        //
        int pos = 0; // into data
    5d46:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    5d4a:	str	r3, [r4, #4]
    5d4c:	b.n	5d54 <MTPD::loop()+0xe00>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    5d4e:	cmp.w	r8, #3
    5d52:	bgt.n	5d8e <MTPD::loop()+0xe3a>
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    5d54:	ldr	r0, [r6, #0]
          int to_copy = min(len - pos, avail);
    5d56:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    5d5a:	mov	r1, sl
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5d5c:	rsb	fp, r0, r9
    5d60:	cmp	fp, r3
    5d62:	it	ge
    5d64:	movge	fp, r3
          memcpy(dst,src,to_copy);
    5d66:	mov	r2, fp
          pos += to_copy;
    5d68:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    5d6a:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5d6e:	ldr	r3, [r6, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    5d70:	add	sl, fp
          dst += to_copy;
    5d72:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5d74:	cmp	r3, r9
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5d76:	str	r3, [r6, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5d78:	bne.n	5d4e <MTPD::loop()+0xdfa>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5d7a:	movs	r2, #60	; 0x3c
    5d7c:	mov.w	r1, #512	; 0x200
    5d80:	mov	r0, r5
    5d82:	bl	a270 <usb_mtp_send>
    5d86:	cmp	r0, #0
    5d88:	ble.n	5d7a <MTPD::loop()+0xe26>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    5d8a:	str	r5, [r6, #0]
    5d8c:	b.n	5d4e <MTPD::loop()+0xdfa>
    5d8e:	movs	r1, #1
    5d90:	ldrb	r2, [r4, #0]
    5d92:	ldr	r3, [r4, #4]
    5d94:	str	r1, [sp, #84]	; 0x54
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    5d96:	cmp	r2, #0
    5d98:	bne.w	595e <MTPD::loop()+0xa0a>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5d9c:	cbz	r3, 5df0 <MTPD::loop()+0xe9c>
    5d9e:	ldr	r0, [r6, #0]
        write_length_ += len;
    5da0:	adds	r3, #4
        
        const char * src=data;
    5da2:	add.w	sl, sp, #84	; 0x54
        //
        int pos = 0; // into data
    5da6:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    5daa:	str	r3, [r4, #4]
    5dac:	b.n	5db8 <MTPD::loop()+0xe64>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    5dae:	cmp.w	r8, #3
    5db2:	bgt.w	5962 <MTPD::loop()+0xa0e>
    5db6:	ldr	r0, [r6, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5db8:	rsb	fp, r0, r9
    5dbc:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    5dc0:	mov	r1, sl
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5dc2:	cmp	fp, r3
    5dc4:	it	ge
    5dc6:	movge	fp, r3
          memcpy(dst,src,to_copy);
    5dc8:	mov	r2, fp
          pos += to_copy;
    5dca:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    5dcc:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5dd0:	ldr	r3, [r6, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    5dd2:	add	sl, fp
          dst += to_copy;
    5dd4:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5dd6:	cmp	r3, r9
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5dd8:	str	r3, [r6, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5dda:	bne.n	5dae <MTPD::loop()+0xe5a>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5ddc:	movs	r2, #60	; 0x3c
    5dde:	mov.w	r1, #512	; 0x200
    5de2:	mov	r0, r5
    5de4:	bl	a270 <usb_mtp_send>
    5de8:	cmp	r0, #0
    5dea:	ble.n	5ddc <MTPD::loop()+0xe88>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    5dec:	str	r5, [r6, #0]
    5dee:	b.n	5dae <MTPD::loop()+0xe5a>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5df0:	mov	r0, r5
    5df2:	str	r5, [r6, #0]
    5df4:	b.n	5da0 <MTPD::loop()+0xe4c>
    5df6:	ldr	r3, [r4, #4]
    5df8:	cbnz	r3, 5dfc <MTPD::loop()+0xea8>
    5dfa:	str	r5, [r6, #0]
        write_length_ += len;
    5dfc:	adds	r3, #1
        
        const char * src=data;
    5dfe:	add.w	sl, sp, #62	; 0x3e
        //
        int pos = 0; // into data
    5e02:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    5e06:	str	r3, [r4, #4]
    5e08:	b.n	5e10 <MTPD::loop()+0xebc>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    5e0a:	cmp.w	r8, #0
    5e0e:	bgt.n	5e9e <MTPD::loop()+0xf4a>
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    5e10:	ldr	r0, [r6, #0]
          int to_copy = min(len - pos, avail);
    5e12:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    5e16:	mov	r1, sl
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5e18:	rsb	fp, r0, r9
    5e1c:	cmp	fp, r3
    5e1e:	it	ge
    5e20:	movge	fp, r3
          memcpy(dst,src,to_copy);
    5e22:	mov	r2, fp
          pos += to_copy;
    5e24:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    5e26:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5e2a:	ldr	r3, [r6, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    5e2c:	add	sl, fp
          dst += to_copy;
    5e2e:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5e30:	cmp	r3, r9
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5e32:	str	r3, [r6, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5e34:	bne.n	5e0a <MTPD::loop()+0xeb6>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5e36:	movs	r2, #60	; 0x3c
    5e38:	mov.w	r1, #512	; 0x200
    5e3c:	mov	r0, r5
    5e3e:	bl	a270 <usb_mtp_send>
    5e42:	cmp	r0, #0
    5e44:	ble.n	5e36 <MTPD::loop()+0xee2>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    5e46:	str	r5, [r6, #0]
    5e48:	b.n	5e0a <MTPD::loop()+0xeb6>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5e4a:	ldr	r3, [r4, #4]
    5e4c:	cbnz	r3, 5e50 <MTPD::loop()+0xefc>
    5e4e:	str	r5, [r6, #0]
        write_length_ += len;
    5e50:	adds	r3, #4
        
        const char * src=data;
    5e52:	add.w	sl, sp, #96	; 0x60
        //
        int pos = 0; // into data
    5e56:	mov.w	r9, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    5e5a:	str	r3, [r4, #4]
    5e5c:	b.n	5e64 <MTPD::loop()+0xf10>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    5e5e:	cmp.w	r9, #3
    5e62:	bgt.n	5ea4 <MTPD::loop()+0xf50>
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    5e64:	ldr	r0, [r6, #0]
          int to_copy = min(len - pos, avail);
    5e66:	rsb	r3, r9, #4
          memcpy(dst,src,to_copy);
    5e6a:	mov	r1, sl
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5e6c:	rsb	fp, r0, r8
    5e70:	cmp	fp, r3
    5e72:	it	ge
    5e74:	movge	fp, r3
          memcpy(dst,src,to_copy);
    5e76:	mov	r2, fp
          pos += to_copy;
    5e78:	add	r9, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    5e7a:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5e7e:	ldr	r3, [r6, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    5e80:	add	sl, fp
          dst += to_copy;
    5e82:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5e84:	cmp	r3, r8
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5e86:	str	r3, [r6, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5e88:	bne.n	5e5e <MTPD::loop()+0xf0a>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5e8a:	movs	r2, #60	; 0x3c
    5e8c:	mov.w	r1, #512	; 0x200
    5e90:	mov	r0, r5
    5e92:	bl	a270 <usb_mtp_send>
    5e96:	cmp	r0, #0
    5e98:	ble.n	5e8a <MTPD::loop()+0xf36>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    5e9a:	str	r5, [r6, #0]
    5e9c:	b.n	5e5e <MTPD::loop()+0xf0a>
    5e9e:	ldr	r3, [sp, #100]	; 0x64
    5ea0:	str	r3, [sp, #28]
    5ea2:	b.n	5928 <MTPD::loop()+0x9d4>
    5ea4:	ldr	r3, [pc, #692]	; (615c <MTPD::loop()+0x1208>)
    5ea6:	ldr	r3, [r3, #0]
    5ea8:	b.n	5a10 <MTPD::loop()+0xabc>
    5eaa:	mov	r2, r6
    5eac:	mov	r0, r4
    5eae:	add	r1, sp, #60	; 0x3c
    5eb0:	bl	7c <MTPD::write(char const*, int) [clone .part.19]>
    5eb4:	ldr	r2, [r4, #4]
    5eb6:	ldrh	r3, [r4, #38]	; 0x26
    5eb8:	adds	r2, #12
    5eba:	ldr	r0, [r4, #40]	; 0x28
    5ebc:	str	r2, [sp, #28]
    5ebe:	b.w	569e <MTPD::loop()+0x74a>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5ec2:	ldr	r3, [r4, #4]
    5ec4:	cbnz	r3, 5ec8 <MTPD::loop()+0xf74>
    5ec6:	str	r5, [r6, #0]
        write_length_ += len;
    5ec8:	adds	r3, #2
        
        const char * src=data;
    5eca:	add.w	sl, sp, #64	; 0x40
        //
        int pos = 0; // into data
    5ece:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    5ed2:	str	r3, [r4, #4]
    5ed4:	b.n	5edc <MTPD::loop()+0xf88>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    5ed6:	cmp.w	r8, #1
    5eda:	bgt.n	5f16 <MTPD::loop()+0xfc2>
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    5edc:	ldr	r0, [r6, #0]
          int to_copy = min(len - pos, avail);
    5ede:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    5ee2:	mov	r1, sl
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5ee4:	rsb	fp, r0, r9
    5ee8:	cmp	fp, r3
    5eea:	it	ge
    5eec:	movge	fp, r3
          memcpy(dst,src,to_copy);
    5eee:	mov	r2, fp
          pos += to_copy;
    5ef0:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    5ef2:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5ef6:	ldr	r3, [r6, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    5ef8:	add	sl, fp
          dst += to_copy;
    5efa:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5efc:	cmp	r3, r9
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5efe:	str	r3, [r6, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5f00:	bne.n	5ed6 <MTPD::loop()+0xf82>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5f02:	movs	r2, #60	; 0x3c
    5f04:	mov.w	r1, #512	; 0x200
    5f08:	mov	r0, r5
    5f0a:	bl	a270 <usb_mtp_send>
    5f0e:	cmp	r0, #0
    5f10:	ble.n	5f02 <MTPD::loop()+0xfae>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    5f12:	str	r5, [r6, #0]
    5f14:	b.n	5ed6 <MTPD::loop()+0xf82>
    5f16:	movw	r1, #65535	; 0xffff
    5f1a:	ldrb	r2, [r4, #0]
    5f1c:	ldr	r3, [r4, #4]
    5f1e:	strh.w	r1, [sp, #66]	; 0x42
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    5f22:	cmp	r2, #0
    5f24:	bne.w	58f4 <MTPD::loop()+0x9a0>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5f28:	cbnz	r3, 5f2c <MTPD::loop()+0xfd8>
    5f2a:	str	r5, [r6, #0]
        write_length_ += len;
    5f2c:	adds	r3, #2
        
        const char * src=data;
    5f2e:	add.w	sl, sp, #66	; 0x42
        //
        int pos = 0; // into data
    5f32:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    5f36:	str	r3, [r4, #4]
    5f38:	b.n	5f40 <MTPD::loop()+0xfec>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    5f3a:	cmp.w	r8, #1
    5f3e:	bgt.n	5f7a <MTPD::loop()+0x1026>
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    5f40:	ldr	r0, [r6, #0]
          int to_copy = min(len - pos, avail);
    5f42:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    5f46:	mov	r1, sl
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5f48:	rsb	fp, r0, r9
    5f4c:	cmp	fp, r3
    5f4e:	it	ge
    5f50:	movge	fp, r3
          memcpy(dst,src,to_copy);
    5f52:	mov	r2, fp
          pos += to_copy;
    5f54:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    5f56:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5f5a:	ldr	r3, [r6, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    5f5c:	add	sl, fp
          dst += to_copy;
    5f5e:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5f60:	cmp	r3, r9
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5f62:	str	r3, [r6, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5f64:	bne.n	5f3a <MTPD::loop()+0xfe6>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5f66:	movs	r2, #60	; 0x3c
    5f68:	mov.w	r1, #512	; 0x200
    5f6c:	mov	r0, r5
    5f6e:	bl	a270 <usb_mtp_send>
    5f72:	cmp	r0, #0
    5f74:	ble.n	5f66 <MTPD::loop()+0x1012>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    5f76:	str	r5, [r6, #0]
    5f78:	b.n	5f3a <MTPD::loop()+0xfe6>
    5f7a:	movs	r1, #0
    5f7c:	ldrb	r2, [r4, #0]
    5f7e:	ldr	r3, [r4, #4]
    5f80:	strb.w	r1, [sp, #61]	; 0x3d
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    5f84:	cmp	r2, #0
    5f86:	bne.w	58fc <MTPD::loop()+0x9a8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5f8a:	cbnz	r3, 5f8e <MTPD::loop()+0x103a>
    5f8c:	str	r5, [r6, #0]
        write_length_ += len;
    5f8e:	adds	r3, #1
        
        const char * src=data;
    5f90:	add.w	sl, sp, #61	; 0x3d
        //
        int pos = 0; // into data
    5f94:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    5f98:	str	r3, [r4, #4]
    5f9a:	b.n	5fa4 <MTPD::loop()+0x1050>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    5f9c:	cmp.w	r8, #0
    5fa0:	bgt.w	5900 <MTPD::loop()+0x9ac>
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    5fa4:	ldr	r0, [r6, #0]
          int to_copy = min(len - pos, avail);
    5fa6:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    5faa:	mov	r1, sl
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5fac:	rsb	fp, r0, r9
    5fb0:	cmp	fp, r3
    5fb2:	it	ge
    5fb4:	movge	fp, r3
          memcpy(dst,src,to_copy);
    5fb6:	mov	r2, fp
          pos += to_copy;
    5fb8:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    5fba:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5fbe:	ldr	r3, [r6, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    5fc0:	add	sl, fp
          dst += to_copy;
    5fc2:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5fc4:	cmp	r3, r9
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5fc6:	str	r3, [r6, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5fc8:	bne.n	5f9c <MTPD::loop()+0x1048>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5fca:	movs	r2, #60	; 0x3c
    5fcc:	mov.w	r1, #512	; 0x200
    5fd0:	mov	r0, r5
    5fd2:	bl	a270 <usb_mtp_send>
    5fd6:	cmp	r0, #0
    5fd8:	ble.n	5fca <MTPD::loop()+0x1076>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    5fda:	str	r5, [r6, #0]
    5fdc:	b.n	5f9c <MTPD::loop()+0x1048>
    5fde:	movs	r3, #7
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    5fe0:	ldrb	r1, [r4, #0]
    5fe2:	strb.w	r3, [sp, #63]	; 0x3f
      {
        write_length_ += len;
    5fe6:	ldr	r3, [r4, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    5fe8:	cmp	r1, #0
    5fea:	beq.w	61ba <MTPD::loop()+0x1266>
      {
        write_length_ += len;
    5fee:	adds	r3, #1
    5ff0:	str	r3, [r4, #4]
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
    5ff2:	ldr	r0, [pc, #364]	; (6160 <MTPD::loop()+0x120c>)
    5ff4:	movs	r2, #84	; 0x54
    5ff6:	str	r7, [sp, #28]
    5ff8:	mov	fp, r0
    5ffa:	b.n	6006 <MTPD::loop()+0x10b2>
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    5ffc:	adds	r3, #2
    5ffe:	str	r3, [r4, #4]
  #define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    6000:	ldrb.w	r2, [fp, #1]!
    6004:	cbz	r2, 606c <MTPD::loop()+0x1118>
    6006:	strh.w	r2, [sp, #74]	; 0x4a
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    600a:	cmp	r1, #0
    600c:	bne.n	5ffc <MTPD::loop()+0x10a8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    600e:	cbz	r3, 6066 <MTPD::loop()+0x1112>
    6010:	ldr	r0, [r6, #0]
        write_length_ += len;
    6012:	adds	r3, #2
        
        const char * src=data;
    6014:	add.w	r9, sp, #74	; 0x4a
        //
        int pos = 0; // into data
    6018:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    601c:	str	r3, [r4, #4]
    601e:	b.n	6028 <MTPD::loop()+0x10d4>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    6020:	cmp.w	r8, #1
    6024:	bgt.n	6060 <MTPD::loop()+0x110c>
    6026:	ldr	r0, [r6, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    6028:	rsb	r7, r0, sl
    602c:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    6030:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    6032:	cmp	r7, r3
    6034:	it	ge
    6036:	movge	r7, r3
          memcpy(dst,src,to_copy);
    6038:	mov	r2, r7
          pos += to_copy;
    603a:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    603c:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    6040:	ldr	r3, [r6, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    6042:	add	r9, r7
          dst += to_copy;
    6044:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    6046:	cmp	r7, sl
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    6048:	str	r7, [r6, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    604a:	bne.n	6020 <MTPD::loop()+0x10cc>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    604c:	movs	r2, #60	; 0x3c
    604e:	mov.w	r1, #512	; 0x200
    6052:	mov	r0, r5
    6054:	bl	a270 <usb_mtp_send>
    6058:	cmp	r0, #0
    605a:	ble.n	604c <MTPD::loop()+0x10f8>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    605c:	str	r5, [r6, #0]
    605e:	b.n	6020 <MTPD::loop()+0x10cc>
    6060:	ldrb	r1, [r4, #0]
    6062:	ldr	r3, [r4, #4]
    6064:	b.n	6000 <MTPD::loop()+0x10ac>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    6066:	mov	r0, r5
    6068:	str	r5, [r6, #0]
    606a:	b.n	6012 <MTPD::loop()+0x10be>
    606c:	ldr	r7, [sp, #28]
    606e:	strh.w	r2, [sp, #72]	; 0x48
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    6072:	cmp	r1, #0
    6074:	beq.n	6168 <MTPD::loop()+0x1214>
      {
        write_length_ += len;
    6076:	adds	r3, #2
    6078:	ldr	r2, [sp, #100]	; 0x64
    607a:	str	r3, [r4, #4]
    607c:	str	r2, [sp, #28]
    607e:	b.n	5896 <MTPD::loop()+0x942>
    6080:	ldr	r4, [sp, #32]
{
   char name[80];
   zeroFS_class *zFs_ = zFS;

public:
    uint32_t Count(uint32_t store,uint32_t parent) {return zFs_[0].Count(parent);}
    6082:	mov	r1, r8
  }

  void GetObjectHandles(uint32_t storage, uint32_t parent) 
  { uint32_t store = Storage2Store(storage);

    if (write_get_length_) {
    6084:	ldrb	r3, [r4, #0]
    6086:	cmp	r3, #0
    6088:	bne.n	6126 <MTPD::loop()+0x11d2>
{
   char name[80];
   zeroFS_class *zFs_ = zFS;

public:
    uint32_t Count(uint32_t store,uint32_t parent) {return zFs_[0].Count(parent);}
    608a:	ldr	r3, [sp, #28]
    608c:	ldr	r0, [r3, #80]	; 0x50
    608e:	bl	6e74 <zeroFS_class::Count(unsigned long)>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    6092:	ldrb	r3, [r4, #0]
{
   char name[80];
   zeroFS_class *zFs_ = zFS;

public:
    uint32_t Count(uint32_t store,uint32_t parent) {return zFs_[0].Count(parent);}
    6094:	str	r0, [sp, #32]
    6096:	str	r0, [sp, #88]	; 0x58
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    6098:	cmp	r3, #0
    609a:	beq.w	6226 <MTPD::loop()+0x12d2>
      {
        write_length_ += len;
    609e:	ldr	r3, [r4, #4]
    60a0:	adds	r3, #4
    60a2:	str	r3, [r4, #4]
    {
      uint32_t num=0;
      num=GetNumObjects(storage,parent);
      write32(num);
      uint32_t handle;
      for(uint32_t ii=0; ii<num; ii++)
    60a4:	ldr	r3, [sp, #32]
    60a6:	cmp	r3, #0
    60a8:	beq.n	6134 <MTPD::loop()+0x11e0>
    60aa:	movs	r3, #0
    60ac:	str	r7, [sp, #36]	; 0x24
    60ae:	mov	sl, r3
    60b0:	b.n	60c2 <MTPD::loop()+0x116e>
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    60b2:	ldr	r3, [r4, #4]
    60b4:	adds	r3, #4
    60b6:	str	r3, [r4, #4]
    {
      uint32_t num=0;
      num=GetNumObjects(storage,parent);
      write32(num);
      uint32_t handle;
      for(uint32_t ii=0; ii<num; ii++)
    60b8:	add.w	sl, sl, #1
    60bc:	ldr	r3, [sp, #32]
    60be:	cmp	r3, sl
    60c0:	beq.n	6156 <MTPD::loop()+0x1202>
   char name[80];
   zeroFS_class *zFs_ = zFS;

public:
    uint32_t Count(uint32_t store,uint32_t parent) {return zFs_[0].Count(parent);}
    uint32_t Next(uint32_t store) {return zFs_[0].Next();}
    60c2:	ldr	r3, [sp, #28]
    60c4:	ldr	r0, [r3, #80]	; 0x50
    60c6:	bl	6ed0 <zeroFS_class::Next()>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    60ca:	ldrb	r3, [r4, #0]
    60cc:	str	r0, [sp, #92]	; 0x5c
    60ce:	cmp	r3, #0
    60d0:	bne.n	60b2 <MTPD::loop()+0x115e>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    60d2:	ldr	r3, [r4, #4]
    60d4:	cbnz	r3, 60d8 <MTPD::loop()+0x1184>
    60d6:	str	r5, [r6, #0]
        write_length_ += len;
    60d8:	adds	r3, #4
        
        const char * src=data;
    60da:	add.w	r9, sp, #92	; 0x5c
        //
        int pos = 0; // into data
    60de:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    60e2:	str	r3, [r4, #4]
    60e4:	b.n	60ec <MTPD::loop()+0x1198>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    60e6:	cmp.w	r8, #3
    60ea:	bgt.n	60b8 <MTPD::loop()+0x1164>
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    60ec:	ldr	r0, [r6, #0]
          int to_copy = min(len - pos, avail);
    60ee:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    60f2:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    60f4:	rsb	r7, r0, fp
    60f8:	cmp	r7, r3
    60fa:	it	ge
    60fc:	movge	r7, r3
          memcpy(dst,src,to_copy);
    60fe:	mov	r2, r7
          pos += to_copy;
    6100:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    6102:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    6106:	ldr	r3, [r6, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    6108:	add	r9, r7
          dst += to_copy;
    610a:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    610c:	cmp	r7, fp
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    610e:	str	r7, [r6, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    6110:	bne.n	60e6 <MTPD::loop()+0x1192>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    6112:	movs	r2, #60	; 0x3c
    6114:	mov.w	r1, #512	; 0x200
    6118:	mov	r0, r5
    611a:	bl	a270 <usb_mtp_send>
    611e:	cmp	r0, #0
    6120:	ble.n	6112 <MTPD::loop()+0x11be>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    6122:	str	r5, [r6, #0]
    6124:	b.n	60e6 <MTPD::loop()+0x1192>
{
   char name[80];
   zeroFS_class *zFs_ = zFS;

public:
    uint32_t Count(uint32_t store,uint32_t parent) {return zFs_[0].Count(parent);}
    6126:	ldr	r3, [sp, #28]
    6128:	ldr	r0, [r3, #80]	; 0x50
    612a:	bl	6e74 <zeroFS_class::Count(unsigned long)>
  { uint32_t store = Storage2Store(storage);

    if (write_get_length_) {
      write_length_ = GetNumObjects(storage, parent);
      write_length_++;
      write_length_ *= 4;
    612e:	adds	r0, #1
    6130:	lsls	r3, r0, #2
    6132:	str	r3, [r4, #4]
          case 0x1007:  // GetObjectHandles
            if (p2) 
            { return_code = 0x2014; // spec by format unsupported
            } else 
            { 
              TRANSMIT(GetObjectHandles(p1, p3));
    6134:	ldr	r6, [sp, #100]	; 0x64
    6136:	ubfx	r6, r6, #0, #9
    613a:	cmp	r6, #0
    613c:	beq.w	544e <MTPD::loop()+0x4fa>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    6140:	movs	r2, #60	; 0x3c
    6142:	mov	r1, r6
    6144:	mov	r0, r5
    6146:	bl	a270 <usb_mtp_send>
    614a:	cmp	r0, #0
    614c:	ble.n	6140 <MTPD::loop()+0x11ec>
    614e:	b.w	544e <MTPD::loop()+0x4fa>
    6152:	ldr	r6, [pc, #16]	; (6164 <MTPD::loop()+0x1210>)
    6154:	b.n	5992 <MTPD::loop()+0xa3e>
    6156:	ldr	r7, [sp, #36]	; 0x24
    6158:	b.n	6134 <MTPD::loop()+0x11e0>
    615a:	nop
    615c:	.word	0x200017d4
    6160:	.word	0x20000af0
    6164:	.word	0x20004204
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    6168:	cbnz	r3, 616c <MTPD::loop()+0x1218>
    616a:	str	r5, [r6, #0]
        write_length_ += len;
    616c:	adds	r3, #2
        
        const char * src=data;
    616e:	add.w	r9, sp, #72	; 0x48
        //
        int pos = 0; // into data
    6172:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    6176:	str	r3, [r4, #4]
    6178:	b.n	6180 <MTPD::loop()+0x122c>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    617a:	cmp.w	r8, #1
    617e:	bgt.n	620c <MTPD::loop()+0x12b8>
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    6180:	ldr	r0, [r6, #0]
          int to_copy = min(len - pos, avail);
    6182:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    6186:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    6188:	rsb	fp, r0, sl
    618c:	cmp	fp, r3
    618e:	it	ge
    6190:	movge	fp, r3
          memcpy(dst,src,to_copy);
    6192:	mov	r2, fp
          pos += to_copy;
    6194:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    6196:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    619a:	ldr	r3, [r6, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    619c:	add	r9, fp
          dst += to_copy;
    619e:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    61a0:	cmp	r3, sl
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    61a2:	str	r3, [r6, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    61a4:	bne.n	617a <MTPD::loop()+0x1226>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    61a6:	movs	r2, #60	; 0x3c
    61a8:	mov.w	r1, #512	; 0x200
    61ac:	mov	r0, r5
    61ae:	bl	a270 <usb_mtp_send>
    61b2:	cmp	r0, #0
    61b4:	ble.n	61a6 <MTPD::loop()+0x1252>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    61b6:	str	r5, [r6, #0]
    61b8:	b.n	617a <MTPD::loop()+0x1226>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    61ba:	cbnz	r3, 61be <MTPD::loop()+0x126a>
    61bc:	str	r5, [r6, #0]
        write_length_ += len;
    61be:	adds	r3, #1
        
        const char * src=data;
    61c0:	add.w	r9, sp, #63	; 0x3f
        //
        int pos = 0; // into data
    61c4:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    61c8:	str	r3, [r4, #4]
    61ca:	b.n	61d2 <MTPD::loop()+0x127e>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    61cc:	cmp.w	r8, #0
    61d0:	bgt.n	6220 <MTPD::loop()+0x12cc>
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    61d2:	ldr	r0, [r6, #0]
          int to_copy = min(len - pos, avail);
    61d4:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    61d8:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    61da:	rsb	fp, r0, sl
    61de:	cmp	fp, r3
    61e0:	it	ge
    61e2:	movge	fp, r3
          memcpy(dst,src,to_copy);
    61e4:	mov	r2, fp
          pos += to_copy;
    61e6:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    61e8:	bl	83b0 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    61ec:	ldr	r3, [r6, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    61ee:	add	r9, fp
          dst += to_copy;
    61f0:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    61f2:	cmp	r3, sl
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    61f4:	str	r3, [r6, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    61f6:	bne.n	61cc <MTPD::loop()+0x1278>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    61f8:	movs	r2, #60	; 0x3c
    61fa:	mov.w	r1, #512	; 0x200
    61fe:	mov	r0, r5
    6200:	bl	a270 <usb_mtp_send>
    6204:	cmp	r0, #0
    6206:	ble.n	61f8 <MTPD::loop()+0x12a4>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    6208:	str	r5, [r6, #0]
    620a:	b.n	61cc <MTPD::loop()+0x1278>
    620c:	ldr	r3, [sp, #100]	; 0x64
    620e:	str	r3, [sp, #28]
    6210:	b.w	5896 <MTPD::loop()+0x942>
    6214:	add.w	r3, r4, #1056	; 0x420
    6218:	add.w	r9, r4, #544	; 0x220
    621c:	str	r3, [sp, #40]	; 0x28
    621e:	b.n	5ac8 <MTPD::loop()+0xb74>
    6220:	ldr	r3, [r4, #4]
    6222:	ldrb	r1, [r4, #0]
    6224:	b.n	5ff2 <MTPD::loop()+0x109e>
    6226:	movs	r2, #4
    6228:	add	r1, sp, #88	; 0x58
    622a:	mov	r0, r4
    622c:	bl	7c <MTPD::write(char const*, int) [clone .part.19]>
    6230:	b.n	60a4 <MTPD::loop()+0x1150>
    6232:	nop

00006234 <loop>:
  #define CPU_RESTART_ADDR (uint32_t *)0xE000ED0C
  #define CPU_RESTART_VAL 0x5FA0004
  #define CPU_RESTART (*CPU_RESTART_ADDR = CPU_RESTART_VAL)

extern "C" void loop() 
{ int32_t cmd;
    6234:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6238:	vpush	{d8}
    623c:	sub	sp, #68	; 0x44
    623e:	bl	8a6c <usb_serial_available>
  if(Serial.available())
    6242:	cmp	r0, #0
    6244:	bne.w	63ae <loop+0x17a>
    if(cmd==0)
    {
      CPU_RESTART;
    }
  }
  if(mode==0) // we are only addressing MTP
    6248:	ldr	r3, [pc, #520]	; (6454 <loop+0x220>)
    624a:	ldr	r3, [r3, #0]
    624c:	cmp	r3, #0
    624e:	beq.w	639e <loop+0x16a>
}
int newFile(int reset=0)
{
  static int16_t old=-1;
  if(reset) {old=-1; return 1;} 
  int16_t x = second()/20;
    6252:	bl	6778 <second()>
    6256:	ldr	r1, [pc, #512]	; (6458 <loop+0x224>)
    6258:	asrs	r3, r0, #31
  if( x == old) return 0;
    625a:	ldr	r2, [pc, #512]	; (645c <loop+0x228>)
}
int newFile(int reset=0)
{
  static int16_t old=-1;
  if(reset) {old=-1; return 1;} 
  int16_t x = second()/20;
    625c:	smull	r1, r0, r1, r0
  if( x == old) return 0;
    6260:	ldrsh.w	r1, [r2]
}
int newFile(int reset=0)
{
  static int16_t old=-1;
  if(reset) {old=-1; return 1;} 
  int16_t x = second()/20;
    6264:	rsb	r3, r3, r0, asr #3
    6268:	sxth	r3, r3
  if( x == old) return 0;
    626a:	cmp	r1, r3
    626c:	beq.w	63c2 <loop+0x18e>
  { 
    // logging
    uint32_t nbuf=NDAT;
    if(newFile())
    { 
      if(open3) 
    6270:	ldr	r4, [pc, #492]	; (6460 <loop+0x22c>)
{
  static int16_t old=-1;
  if(reset) {old=-1; return 1;} 
  int16_t x = second()/20;
  if( x == old) return 0;
  old=x;
    6272:	strh	r3, [r2, #0]
  { 
    // logging
    uint32_t nbuf=NDAT;
    if(newFile())
    { 
      if(open3) 
    6274:	ldrh	r3, [r4, #0]
      { // have file open, so close it
        zFS[0].Close(T_FILE);
        t3=micros();
        Serial.printf(" %7d %7d %7d %7d %f\n",tmn,tmx,(t3-t0),ncount,((float)ncount*nbuf)/(float)(t3-t0));
    6276:	ldr	r6, [pc, #492]	; (6464 <loop+0x230>)
  { 
    // logging
    uint32_t nbuf=NDAT;
    if(newFile())
    { 
      if(open3) 
    6278:	cmp	r3, #0
    627a:	bne.w	63cc <loop+0x198>
    627e:	ldr.w	r9, [pc, #556]	; 64ac <loop+0x278>
    6282:	ldr.w	r8, [pc, #520]	; 648c <loop+0x258>
    6286:	ldr	r7, [pc, #480]	; (6468 <loop+0x234>)

int newDay(int reset=0)
{
  static int16_t old=-1;
  if(reset) {old=-1; return 1;} 
  int16_t x = day();
    6288:	bl	6798 <day()>
  if(x == old) return 0;
    628c:	ldr	r3, [pc, #476]	; (646c <loop+0x238>)

int newDay(int reset=0)
{
  static int16_t old=-1;
  if(reset) {old=-1; return 1;} 
  int16_t x = day();
    628e:	sxth	r0, r0
  if(x == old) return 0;
    6290:	ldrsh.w	r2, [r3]
    6294:	cmp	r2, r0
    6296:	beq.w	643c <loop+0x208>
      }

      // new day directory
      if(newDay())
      { // new day
        if(open1) zFS[0].Close(T_DAY); // close directory if required
    629a:	ldr.w	sl, [pc, #532]	; 64b0 <loop+0x27c>
{
  static int16_t old=-1;
  if(reset) {old=-1; return 1;} 
  int16_t x = day();
  if(x == old) return 0;
  old=x;
    629e:	strh	r0, [r3, #0]
      }

      // new day directory
      if(newDay())
      { // new day
        if(open1) zFS[0].Close(T_DAY); // close directory if required
    62a0:	ldrh.w	r3, [sl]
    62a4:	cmp	r3, #0
    62a6:	bne.w	6440 <loop+0x20c>
        // create new directory
        char dayName[40];
        sprintf(dayName,"Day_%04d%02d%02d",year(),month(),day());
    62aa:	bl	67d8 <year()>
    62ae:	add	r5, sp, #24
    62b0:	str	r0, [sp, #20]
    62b2:	bl	67b8 <month()>
    62b6:	mov	fp, r0
    62b8:	bl	6798 <day()>
    62bc:	ldr	r2, [sp, #20]
    62be:	mov	r3, fp
    62c0:	str	r0, [sp, #0]
    62c2:	ldr	r1, [pc, #428]	; (6470 <loop+0x23c>)
    62c4:	mov	r0, r5
    62c6:	bl	c0ec <sprintf>
        zFS[0].Create(T_DAY, dayName);
    62ca:	mov	r2, r5
    62cc:	movs	r1, #1
    62ce:	ldr	r0, [pc, #420]	; (6474 <loop+0x240>)
    62d0:	bl	6a50 <zeroFS_class::Create(HDR_TYPE, char const*)>
        open1=1;
    62d4:	movs	r3, #1
    62d6:	strh.w	r3, [sl]
}
int newHour(int reset=0)
{
  static int16_t old=-1;
  if(reset) {old=-1; return 1;} 
  int16_t x = hour();
    62da:	bl	6738 <hour()>
  if(x == old) return 0;
    62de:	ldr	r3, [pc, #408]	; (6478 <loop+0x244>)
}
int newHour(int reset=0)
{
  static int16_t old=-1;
  if(reset) {old=-1; return 1;} 
  int16_t x = hour();
    62e0:	sxth	r0, r0
  if(x == old) return 0;
    62e2:	ldrsh.w	r2, [r3]
    62e6:	cmp	r2, r0
    62e8:	beq.n	6318 <loop+0xe4>
      }

      // new hour directory
      if(newHour())
      { // new day
        if(open2) zFS[0].Close(T_HOUR); // close directory if required
    62ea:	ldr.w	sl, [pc, #456]	; 64b4 <loop+0x280>
{
  static int16_t old=-1;
  if(reset) {old=-1; return 1;} 
  int16_t x = hour();
  if(x == old) return 0;
  old=x;
    62ee:	strh	r0, [r3, #0]
      }

      // new hour directory
      if(newHour())
      { // new day
        if(open2) zFS[0].Close(T_HOUR); // close directory if required
    62f0:	ldrh.w	r3, [sl]
    62f4:	cmp	r3, #0
    62f6:	bne.w	644a <loop+0x216>
        // create new directory
        char hourName[40];
        sprintf(hourName,"Hour_%02d",hour());
    62fa:	bl	6738 <hour()>
    62fe:	ldr	r1, [pc, #380]	; (647c <loop+0x248>)
    6300:	mov	r2, r0
    6302:	mov	r0, r5
    6304:	bl	c0ec <sprintf>
        zFS[0].Create(T_HOUR,hourName);
    6308:	mov	r2, r5
    630a:	movs	r1, #2
    630c:	ldr	r0, [pc, #356]	; (6474 <loop+0x240>)
    630e:	bl	6a50 <zeroFS_class::Create(HDR_TYPE, char const*)>
        open2=1;
    6312:	movs	r3, #1
    6314:	strh.w	r3, [sl]
      }

      // create new file
      char filename[40];
      sprintf(filename,"File_%02d%02d%02d.dat",hour(),minute(),second());
    6318:	bl	6738 <hour()>
    631c:	mov	fp, r0
    631e:	bl	6758 <minute()>
    6322:	mov	sl, r0
    6324:	bl	6778 <second()>
    6328:	mov	r2, fp
    632a:	mov	r3, sl
    632c:	ldr	r1, [pc, #336]	; (6480 <loop+0x24c>)
    632e:	str	r0, [sp, #0]
    6330:	mov	r0, r5
    6332:	bl	c0ec <sprintf>
      t0 = micros();
    6336:	bl	9690 <micros>
      zFS[0].Create(T_FILE,filename);
    633a:	mov	r2, r5
      }

      // create new file
      char filename[40];
      sprintf(filename,"File_%02d%02d%02d.dat",hour(),minute(),second());
      t0 = micros();
    633c:	str.w	r0, [r9]
      zFS[0].Create(T_FILE,filename);
    6340:	movs	r1, #3
    6342:	ldr	r0, [pc, #304]	; (6474 <loop+0x240>)
    6344:	bl	6a50 <zeroFS_class::Create(HDR_TYPE, char const*)>
      open3=1;
    6348:	movs	r2, #1
//      nbuf=NDAT-512; //first record is smaller (really?)
      ncount=0;
    634a:	movs	r3, #0
      // create new file
      char filename[40];
      sprintf(filename,"File_%02d%02d%02d.dat",hour(),minute(),second());
      t0 = micros();
      zFS[0].Create(T_FILE,filename);
      open3=1;
    634c:	strh	r2, [r4, #0]
//      nbuf=NDAT-512; //first record is smaller (really?)
      ncount=0;
    634e:	str	r3, [r6, #0]
    6350:	ldr	r3, [pc, #304]	; (6484 <loop+0x250>)
  #define CPU_RESTART_ADDR (uint32_t *)0xE000ED0C
  #define CPU_RESTART_VAL 0x5FA0004
  #define CPU_RESTART (*CPU_RESTART_ADDR = CPU_RESTART_VAL)

extern "C" void loop() 
{ int32_t cmd;
    6352:	movs	r4, #0
      ncount=0;

    }

    // fetch and store data
    for(uint32_t nn=0; nn<nbuf; nn++) data[nn]=(nn)%256;
    6354:	strb.w	r4, [r3, #1]!
    6358:	adds	r4, #1
    635a:	cmp.w	r4, #32768	; 0x8000
    635e:	bne.n	6354 <loop+0x120>
    //
    uint32_t tx = micros();
    6360:	bl	9690 <micros>
    6364:	mov	r5, r0
    zFS[0].Write((void *)data,nbuf);
    6366:	mov	r2, r4
    6368:	ldr	r1, [pc, #284]	; (6488 <loop+0x254>)
    636a:	ldr	r0, [pc, #264]	; (6474 <loop+0x240>)
    636c:	bl	6c74 <zeroFS_class::Write(void*, unsigned long)>
    // update statistics
    tx=micros()-tx;
    6370:	bl	9690 <micros>
    if(tx>tmx) tmx=tx;
    6374:	ldr.w	r3, [r8]
    for(uint32_t nn=0; nn<nbuf; nn++) data[nn]=(nn)%256;
    //
    uint32_t tx = micros();
    zFS[0].Write((void *)data,nbuf);
    // update statistics
    tx=micros()-tx;
    6378:	subs	r0, r0, r5
    if(tx>tmx) tmx=tx;
    637a:	ldr	r2, [pc, #272]	; (648c <loop+0x258>)
    637c:	cmp	r0, r3
    if(tx<tmn) tmn=tx;
    637e:	ldr	r3, [r7, #0]
    //
    uint32_t tx = micros();
    zFS[0].Write((void *)data,nbuf);
    // update statistics
    tx=micros()-tx;
    if(tx>tmx) tmx=tx;
    6380:	it	hi
    6382:	strhi	r0, [r2, #0]
    if(tx<tmn) tmn=tx;
    6384:	cmp	r0, r3
    ncount++;
    6386:	ldr	r3, [r6, #0]
    uint32_t tx = micros();
    zFS[0].Write((void *)data,nbuf);
    // update statistics
    tx=micros()-tx;
    if(tx>tmx) tmx=tx;
    if(tx<tmn) tmn=tx;
    6388:	ldr	r2, [pc, #220]	; (6468 <loop+0x234>)
    ncount++;
    638a:	add.w	r3, r3, #1
    uint32_t tx = micros();
    zFS[0].Write((void *)data,nbuf);
    // update statistics
    tx=micros()-tx;
    if(tx>tmx) tmx=tx;
    if(tx<tmn) tmn=tx;
    638e:	it	cc
    6390:	strcc	r0, [r2, #0]
    ncount++;
    6392:	str	r3, [r6, #0]
  }
}
    6394:	add	sp, #68	; 0x44
    6396:	vpop	{d8}
    639a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      CPU_RESTART;
    }
  }
  if(mode==0) // we are only addressing MTP
  { // access MTP
    mtpd.loop();
    639e:	ldr	r0, [pc, #240]	; (6490 <loop+0x25c>)
    63a0:	bl	4f54 <MTPD::loop()>
    tx=micros()-tx;
    if(tx>tmx) tmx=tx;
    if(tx<tmn) tmn=tx;
    ncount++;
  }
}
    63a4:	add	sp, #68	; 0x44
    63a6:	vpop	{d8}
    63aa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

extern "C" void loop() 
{ int32_t cmd;
  if(Serial.available())
  {
    cmd = Serial.parseInt();      
    63ae:	ldr	r0, [pc, #228]	; (6494 <loop+0x260>)
    63b0:	bl	a5d8 <Stream::parseInt()>
    if(cmd==0)
    63b4:	cmp	r0, #0
    63b6:	bne.w	6248 <loop+0x14>
    {
      CPU_RESTART;
    63ba:	ldr	r3, [pc, #220]	; (6498 <loop+0x264>)
    63bc:	ldr	r2, [pc, #220]	; (649c <loop+0x268>)
    63be:	str	r2, [r3, #0]
    63c0:	b.n	6248 <loop+0x14>
    63c2:	ldr	r6, [pc, #160]	; (6464 <loop+0x230>)
    63c4:	ldr.w	r8, [pc, #196]	; 648c <loop+0x258>
    63c8:	ldr	r7, [pc, #156]	; (6468 <loop+0x234>)
    63ca:	b.n	6350 <loop+0x11c>
    { 
      if(open3) 
      { // have file open, so close it
        zFS[0].Close(T_FILE);
        t3=micros();
        Serial.printf(" %7d %7d %7d %7d %f\n",tmn,tmx,(t3-t0),ncount,((float)ncount*nbuf)/(float)(t3-t0));
    63cc:	ldr.w	r9, [pc, #220]	; 64ac <loop+0x278>
    uint32_t nbuf=NDAT;
    if(newFile())
    { 
      if(open3) 
      { // have file open, so close it
        zFS[0].Close(T_FILE);
    63d0:	movs	r1, #3
    63d2:	ldr	r0, [pc, #160]	; (6474 <loop+0x240>)
    63d4:	bl	6be0 <zeroFS_class::Close(HDR_TYPE)>
        t3=micros();
        Serial.printf(" %7d %7d %7d %7d %f\n",tmn,tmx,(t3-t0),ncount,((float)ncount*nbuf)/(float)(t3-t0));
    63d8:	ldr.w	r8, [pc, #176]	; 648c <loop+0x258>
    if(newFile())
    { 
      if(open3) 
      { // have file open, so close it
        zFS[0].Close(T_FILE);
        t3=micros();
    63dc:	bl	9690 <micros>
        Serial.printf(" %7d %7d %7d %7d %f\n",tmn,tmx,(t3-t0),ncount,((float)ncount*nbuf)/(float)(t3-t0));
    63e0:	ldr.w	r5, [r9]
    63e4:	vldr	s16, [r6]
    63e8:	subs	r5, r0, r5
    63ea:	vldr	s13, [pc, #180]	; 64a0 <loop+0x26c>
    63ee:	vcvt.f32.u32	s15, s16
    63f2:	ldr	r7, [pc, #116]	; (6468 <loop+0x234>)
    63f4:	vmov	s14, r5
    if(newFile())
    { 
      if(open3) 
      { // have file open, so close it
        zFS[0].Close(T_FILE);
        t3=micros();
    63f8:	ldr	r2, [pc, #168]	; (64a4 <loop+0x270>)
        Serial.printf(" %7d %7d %7d %7d %f\n",tmn,tmx,(t3-t0),ncount,((float)ncount*nbuf)/(float)(t3-t0));
    63fa:	ldr.w	fp, [r7]
    63fe:	vcvt.f32.u32	s14, s14
    6402:	ldr.w	sl, [r8]
    6406:	vmul.f32	s15, s15, s13
    if(newFile())
    { 
      if(open3) 
      { // have file open, so close it
        zFS[0].Close(T_FILE);
        t3=micros();
    640a:	str	r0, [r2, #0]
        Serial.printf(" %7d %7d %7d %7d %f\n",tmn,tmx,(t3-t0),ncount,((float)ncount*nbuf)/(float)(t3-t0));
    640c:	vdiv.f32	s13, s15, s14
    6410:	vmov	r0, s13
    6414:	bl	ac40 <__aeabi_f2d>
    6418:	mov	r3, sl
    641a:	mov	r2, fp
    641c:	str	r5, [sp, #0]
    641e:	vstr	s16, [sp, #4]
    6422:	strd	r0, r1, [sp, #8]
    6426:	ldr	r1, [pc, #128]	; (64a8 <loop+0x274>)
    6428:	ldr	r0, [pc, #104]	; (6494 <loop+0x260>)
    642a:	bl	a610 <Print::printf(char const*, ...)>
        // reset statistics
        tmn=0xFFFFFFFF;
    642e:	mov.w	r2, #4294967295
        tmx=0;
    6432:	movs	r3, #0
      { // have file open, so close it
        zFS[0].Close(T_FILE);
        t3=micros();
        Serial.printf(" %7d %7d %7d %7d %f\n",tmn,tmx,(t3-t0),ncount,((float)ncount*nbuf)/(float)(t3-t0));
        // reset statistics
        tmn=0xFFFFFFFF;
    6434:	str	r2, [r7, #0]
        tmx=0;
    6436:	str.w	r3, [r8]
    643a:	b.n	6288 <loop+0x54>
    643c:	add	r5, sp, #24
    643e:	b.n	62da <loop+0xa6>
      }

      // new day directory
      if(newDay())
      { // new day
        if(open1) zFS[0].Close(T_DAY); // close directory if required
    6440:	movs	r1, #1
    6442:	ldr	r0, [pc, #48]	; (6474 <loop+0x240>)
    6444:	bl	6be0 <zeroFS_class::Close(HDR_TYPE)>
    6448:	b.n	62aa <loop+0x76>
      }

      // new hour directory
      if(newHour())
      { // new day
        if(open2) zFS[0].Close(T_HOUR); // close directory if required
    644a:	movs	r1, #2
    644c:	ldr	r0, [pc, #36]	; (6474 <loop+0x240>)
    644e:	bl	6be0 <zeroFS_class::Close(HDR_TYPE)>
    6452:	b.n	62fa <loop+0xc6>
    6454:	.word	0x2000c2a4
    6458:	.word	0x66666667
    645c:	.word	0x200017f4
    6460:	.word	0x2000ed8a
    6464:	.word	0x2000c2ac
    6468:	.word	0x200017d8
    646c:	.word	0x200017f2
    6470:	.word	0x20000b34
    6474:	.word	0x2000c338
    6478:	.word	0x200017f6
    647c:	.word	0x20000b48
    6480:	.word	0x20000b54
    6484:	.word	0x2000423b
    6488:	.word	0x2000423c
    648c:	.word	0x2000c32c
    6490:	.word	0x20001ac0
    6494:	.word	0x20001228
    6498:	.word	0xe000ed0c
    649c:	.word	0x05fa0004
    64a0:	.word	0x47000000
    64a4:	.word	0x2000c328
    64a8:	.word	0x20000b1c
    64ac:	.word	0x2000c324
    64b0:	.word	0x2000ed86
    64b4:	.word	0x2000ed88

000064b8 <_GLOBAL__sub_I_data>:
    tx=micros()-tx;
    if(tx>tmx) tmx=tx;
    if(tx<tmn) tmn=tx;
    ncount++;
  }
}
    64b8:	push	{r4, lr}
//#define Index2Sector(x) (x<<4)
#define Sector2Index(x) (x)
#define Index2Sector(x) (x)
#define GUARD 100000

class zeroFS_class
    64ba:	movw	r0, #8776	; 0x2248
    64be:	ldr	r4, [pc, #32]	; (64e0 <_GLOBAL__sub_I_data+0x28>)
    64c0:	mov.w	r2, #2048	; 0x800
    64c4:	movs	r1, #0
    64c6:	add	r0, r4
    64c8:	bl	bc44 <memset>
  #define MTP_SERNR "1234"
  #define MTP_NAME  "Teensy"

  #define USE_EVENTS 1

class MTPD {
    64cc:	ldr	r3, [pc, #20]	; (64e4 <_GLOBAL__sub_I_data+0x2c>)
    64ce:	movs	r2, #0

#include "zeroFS.h"

extern zeroFS_class zFS[];

class mtpFS
    64d0:	ldr	r0, [pc, #20]	; (64e8 <_GLOBAL__sub_I_data+0x30>)
  #define MTP_SERNR "1234"
  #define MTP_NAME  "Teensy"

  #define USE_EVENTS 1

class MTPD {
    64d2:	movw	r1, #9248	; 0x2420

#include "zeroFS.h"

extern zeroFS_class zFS[];

class mtpFS
    64d6:	str	r4, [r0, #80]	; 0x50
  #define MTP_SERNR "1234"
  #define MTP_NAME  "Teensy"

  #define USE_EVENTS 1

class MTPD {
    64d8:	strb	r2, [r3, #0]
    64da:	str	r2, [r3, #4]
    64dc:	str	r2, [r3, r1]
    64de:	pop	{r4, pc}
    64e0:	.word	0x2000c338
    64e4:	.word	0x20001ac0
    64e8:	.word	0x2000c250

000064ec <breakTime(long, tmElements_t&)>:
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
    64ec:	ldr	r3, [pc, #392]	; (6678 <breakTime(long, tmElements_t&)+0x18c>)
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    64ee:	ldr	r2, [pc, #396]	; (667c <breakTime(long, tmElements_t&)+0x190>)
  time /= 24; // now it is days
    64f0:	umull	r3, ip, r3, r0
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    64f4:	ldr	r3, [pc, #392]	; (6680 <breakTime(long, tmElements_t&)+0x194>)
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
    64f6:	mov.w	ip, ip, lsr #16
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0
 
void breakTime(time_t timeInput, tmElements_t &tm){
    64fa:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    64fe:	umull	r4, r8, r3, r0
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    6502:	add.w	lr, ip, #4
    6506:	ldr	r6, [pc, #380]	; (6684 <breakTime(long, tmElements_t&)+0x198>)
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    6508:	umull	r4, r2, r2, r0
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    650c:	mov.w	r8, r8, lsr #5
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    6510:	ldr.w	r9, [pc, #380]	; 6690 <breakTime(long, tmElements_t&)+0x1a4>
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    6514:	umull	r6, r7, lr, r6
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    6518:	lsrs	r2, r2, #11
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    651a:	umull	r4, r3, r3, r8
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    651e:	movs	r5, #0
    6520:	rsb	r4, r7, lr
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    6524:	umull	r9, r6, r9, r2
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    6528:	lsrs	r3, r3, #5
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    652a:	ldr.w	r9, [pc, #348]	; 6688 <breakTime(long, tmElements_t&)+0x19c>
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    652e:	add.w	r4, r7, r4, lsr #1
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    6532:	mov.w	fp, #100	; 0x64
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    6536:	lsrs	r6, r6, #4
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    6538:	mov.w	sl, #400	; 0x190
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    653c:	lsrs	r4, r4, #2
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    653e:	rsb	r3, r3, r3, lsl #4
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    6542:	rsb	r4, r4, r4, lsl #3
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    6546:	add.w	r6, r6, r6, lsl #1
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    654a:	rsb	r4, r4, lr
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    654e:	rsb	r7, r8, r8, lsl #4
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    6552:	sub.w	r6, r2, r6, lsl #3
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
    6556:	mov	r2, r5
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    6558:	sub.w	r3, r8, r3, lsl #2
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    655c:	adds	r4, #1
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    655e:	sub.w	r0, r0, r7, lsl #2
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    6562:	strb	r6, [r1, #2]
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    6564:	strb	r3, [r1, #1]
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    6566:	strb	r0, [r1, #0]
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    6568:	strb	r4, [r1, #3]
    656a:	uxtb	r7, r5
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    656c:	movw	r4, #365	; 0x16d
    6570:	addw	r3, r7, #1970	; 0x7b2
    6574:	smull	r0, lr, r9, r3
    6578:	ands.w	r8, r3, #3
    657c:	mov.w	r0, r3, asr #31
    6580:	rsb	r6, r0, lr, asr #5
    6584:	bne.n	65a2 <breakTime(long, tmElements_t&)+0xb6>
    6586:	rsb	r0, r0, lr, asr #7
    658a:	mls	r6, fp, r6, r3
    658e:	mov.w	r4, #366	; 0x16e
    6592:	mls	r0, sl, r0, r3
    6596:	cbnz	r6, 65a2 <breakTime(long, tmElements_t&)+0xb6>
    6598:	cmp	r0, #0
    659a:	movw	r0, #365	; 0x16d
    659e:	it	ne
    65a0:	movne	r4, r0
    65a2:	add	r2, r4
    65a4:	adds	r5, #1
    65a6:	cmp	ip, r2
    65a8:	bcs.n	656a <breakTime(long, tmElements_t&)+0x7e>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
    65aa:	strb	r7, [r1, #6]
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    65ac:	cmp.w	r8, #0
    65b0:	bne.n	65cc <breakTime(long, tmElements_t&)+0xe0>
    65b2:	ldr	r0, [pc, #212]	; (6688 <breakTime(long, tmElements_t&)+0x19c>)
    65b4:	asrs	r6, r3, #31
    65b6:	movs	r5, #100	; 0x64
    65b8:	smull	r4, r0, r0, r3
    65bc:	rsb	r4, r6, r0, asr #5
    65c0:	mls	r4, r5, r4, r3
    65c4:	cbz	r4, 6638 <breakTime(long, tmElements_t&)+0x14c>
    65c6:	mov.w	r4, #366	; 0x16e
    65ca:	b.n	65d2 <breakTime(long, tmElements_t&)+0xe6>
    65cc:	movw	r4, #365	; 0x16d
    65d0:	asrs	r6, r3, #31
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    65d2:	ldr	r0, [pc, #180]	; (6688 <breakTime(long, tmElements_t&)+0x19c>)
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
  time  -= days; // now it is days in this year, starting at 0
    65d4:	subs	r2, r2, r4
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    65d6:	movs	r5, #100	; 0x64
    65d8:	mov.w	r4, #400	; 0x190
    65dc:	smull	r7, r0, r0, r3
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
  time  -= days; // now it is days in this year, starting at 0
    65e0:	rsb	ip, r2, ip
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    65e4:	movs	r2, #0
    65e6:	rsb	r7, r6, r0, asr #5
    65ea:	rsb	r6, r6, r0, asr #7
    65ee:	movs	r0, #1
    65f0:	mls	r7, r5, r7, r3
        monthLength=29;
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
    65f4:	ldr	r5, [pc, #148]	; (668c <breakTime(long, tmElements_t&)+0x1a0>)
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    65f6:	mls	r6, r4, r6, r3
    65fa:	b.n	6602 <breakTime(long, tmElements_t&)+0x116>
    65fc:	adds	r0, #1
    65fe:	adds	r2, #1
    6600:	uxtb	r0, r0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
    6602:	cmp	r2, #1
    6604:	uxtb	r4, r2
    6606:	beq.n	6652 <breakTime(long, tmElements_t&)+0x166>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    6608:	ldrb	r3, [r2, r5]
    660a:	cmp	r3, ip
    660c:	bhi.n	6626 <breakTime(long, tmElements_t&)+0x13a>
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    660e:	cmp	r0, #12
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
      time -= monthLength;
    6610:	rsb	ip, r3, ip
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    6614:	bne.n	65fc <breakTime(long, tmElements_t&)+0x110>
    6616:	movs	r4, #13
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
    6618:	add.w	ip, ip, #1
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    661c:	strb	r4, [r1, #5]
  tm.Day = time + 1;     // day of month
    661e:	strb.w	ip, [r1, #4]
}
    6622:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6626:	adds	r4, #1
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
    6628:	add.w	ip, ip, #1
    662c:	uxtb	r4, r4
    662e:	strb.w	ip, [r1, #4]
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    6632:	strb	r4, [r1, #5]
  tm.Day = time + 1;     // day of month
}
    6634:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    6638:	rsb	r0, r6, r0, asr #7
    663c:	mov.w	r5, #400	; 0x190
    6640:	movw	r4, #365	; 0x16d
    6644:	mls	r0, r5, r0, r3
    6648:	cmp	r0, #0
    664a:	it	eq
    664c:	moveq.w	r4, #366	; 0x16e
    6650:	b.n	65d2 <breakTime(long, tmElements_t&)+0xe6>
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    6652:	cmp.w	r8, #0
    6656:	bne.n	666c <breakTime(long, tmElements_t&)+0x180>
    6658:	cbnz	r7, 6674 <breakTime(long, tmElements_t&)+0x188>
    665a:	cmp	r6, #0
    665c:	ite	ne
    665e:	movne	r3, #28
    6660:	moveq	r3, #29
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    6662:	cmp	ip, r3
    6664:	bcc.n	6670 <breakTime(long, tmElements_t&)+0x184>
      time -= monthLength;
    6666:	rsb	ip, r3, ip
    666a:	b.n	65fc <breakTime(long, tmElements_t&)+0x110>
    666c:	movs	r3, #28
    666e:	b.n	6662 <breakTime(long, tmElements_t&)+0x176>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    6670:	movs	r4, #2
    6672:	b.n	6618 <breakTime(long, tmElements_t&)+0x12c>
    6674:	movs	r3, #29
    6676:	b.n	6662 <breakTime(long, tmElements_t&)+0x176>
    6678:	.word	0xc22e4507
    667c:	.word	0x91a2b3c5
    6680:	.word	0x88888889
    6684:	.word	0x24924925
    6688:	.word	0x51eb851f
    668c:	.word	0x2000062c
    6690:	.word	0xaaaaaaab

00006694 <refreshCache(long) [clone .part.0]>:

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
    6694:	push	{r4, lr}
  if (t != cacheTime) {
    breakTime(t, tm); 
    6696:	ldr	r1, [pc, #12]	; (66a4 <refreshCache(long) [clone .part.0]+0x10>)

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
    6698:	mov	r4, r0
  if (t != cacheTime) {
    breakTime(t, tm); 
    669a:	bl	64ec <breakTime(long, tmElements_t&)>
    cacheTime = t; 
    669e:	ldr	r3, [pc, #8]	; (66a8 <refreshCache(long) [clone .part.0]+0x14>)
    66a0:	str	r4, [r3, #0]
    66a2:	pop	{r4, pc}
    66a4:	.word	0x200041c0
    66a8:	.word	0x200041d4

000066ac <now()>:
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
    66ac:	push	{r3, r4, r5, r6, r7, lr}
    66ae:	ldr	r4, [pc, #108]	; (671c <now()+0x70>)
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    66b0:	ldr	r5, [pc, #108]	; (6720 <now()+0x74>)
    66b2:	ldr	r3, [r4, #0]
    66b4:	ldr	r2, [r5, #0]
    66b6:	ldr	r7, [pc, #108]	; (6724 <now()+0x78>)
    66b8:	subs	r3, r3, r2
    66ba:	ldr	r0, [r7, #0]
    66bc:	cmp.w	r3, #1000	; 0x3e8
    66c0:	bcc.n	66dc <now()+0x30>
    66c2:	adds	r0, #1
    66c4:	b.n	66c8 <now()+0x1c>
    66c6:	mov	r0, r1
		// millis() and prevMillis are both unsigned ints thus the subtraction will always be the absolute value of the difference
    sysTime++;
    prevMillis += 1000;	
    66c8:	add.w	r2, r2, #1000	; 0x3e8
    66cc:	ldr	r3, [r4, #0]
    66ce:	adds	r1, r0, #1
#endif


time_t now() {
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    66d0:	subs	r3, r3, r2
    66d2:	cmp.w	r3, #1000	; 0x3e8
    66d6:	bcs.n	66c6 <now()+0x1a>
    66d8:	str	r0, [r7, #0]
    66da:	str	r2, [r5, #0]
    prevMillis += 1000;	
#ifdef TIME_DRIFT_INFO
    sysUnsyncedTime++; // this can be compared to the synced time to measure long term drift     
#endif
  }
  if (nextSyncTime <= sysTime) {
    66dc:	ldr	r6, [pc, #72]	; (6728 <now()+0x7c>)
    66de:	ldr	r3, [r6, #0]
    66e0:	cmp	r0, r3
    66e2:	bcc.n	6704 <now()+0x58>
    if (getTimePtr != 0) {
    66e4:	ldr	r3, [pc, #68]	; (672c <now()+0x80>)
    66e6:	ldr	r3, [r3, #0]
    66e8:	cbz	r3, 6704 <now()+0x58>
      time_t t = getTimePtr();
    66ea:	blx	r3
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    66ec:	ldr	r3, [pc, #64]	; (6730 <now()+0x84>)
#endif
  }
  if (nextSyncTime <= sysTime) {
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
    66ee:	cbnz	r0, 6706 <now()+0x5a>
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    66f0:	ldr	r1, [pc, #64]	; (6734 <now()+0x88>)
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    66f2:	ldr	r2, [r3, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    66f4:	ldrb	r3, [r1, #0]
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    66f6:	ldr	r0, [r7, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    66f8:	adds	r3, #0
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    66fa:	add	r2, r0
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    66fc:	it	ne
    66fe:	movne	r3, #1
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    6700:	str	r2, [r6, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    6702:	strb	r3, [r1, #0]
      }
    }
  }  
  return (time_t)sysTime;
}
    6704:	pop	{r3, r4, r5, r6, r7, pc}
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    6706:	ldr	r3, [r3, #0]
  Status = timeSet;
    6708:	movs	r1, #2
    670a:	ldr	r4, [r4, #0]
    670c:	ldr	r2, [pc, #36]	; (6734 <now()+0x88>)
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    670e:	add	r3, r0
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
    6710:	str	r0, [r7, #0]
  nextSyncTime = (uint32_t)t + syncInterval;
  Status = timeSet;
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
    6712:	str	r4, [r5, #0]
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    6714:	str	r3, [r6, #0]
  Status = timeSet;
    6716:	strb	r1, [r2, #0]
    6718:	pop	{r3, r4, r5, r6, r7, pc}
    671a:	nop
    671c:	.word	0x2000c320
    6720:	.word	0x200041a8
    6724:	.word	0x200041d0
    6728:	.word	0x200041bc
    672c:	.word	0x2000c24c
    6730:	.word	0x20001238
    6734:	.word	0x2000ed96

00006738 <hour()>:
    breakTime(t, tm); 
    cacheTime = t; 
  }
}

int hour() { // the hour now 
    6738:	push	{r3, lr}
  return hour(now()); 
    673a:	bl	66ac <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    673e:	ldr	r3, [pc, #16]	; (6750 <hour()+0x18>)
    6740:	ldr	r3, [r3, #0]
    6742:	cmp	r0, r3
    6744:	beq.n	674a <hour()+0x12>
    6746:	bl	6694 <refreshCache(long) [clone .part.0]>
  return hour(now()); 
}

int hour(time_t t) { // the hour for the given time
  refreshCache(t);
  return tm.Hour;  
    674a:	ldr	r3, [pc, #8]	; (6754 <hour()+0x1c>)
  }
}

int hour() { // the hour now 
  return hour(now()); 
}
    674c:	ldrb	r0, [r3, #2]
    674e:	pop	{r3, pc}
    6750:	.word	0x200041d4
    6754:	.word	0x200041c0

00006758 <minute()>:

uint8_t isPM(time_t t) { // returns true if PM
  return (hour(t) >= 12); 
}

int minute() {
    6758:	push	{r3, lr}
  return minute(now()); 
    675a:	bl	66ac <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    675e:	ldr	r3, [pc, #16]	; (6770 <minute()+0x18>)
    6760:	ldr	r3, [r3, #0]
    6762:	cmp	r0, r3
    6764:	beq.n	676a <minute()+0x12>
    6766:	bl	6694 <refreshCache(long) [clone .part.0]>
  return minute(now()); 
}

int minute(time_t t) { // the minute for the given time
  refreshCache(t);
  return tm.Minute;  
    676a:	ldr	r3, [pc, #8]	; (6774 <minute()+0x1c>)
  return (hour(t) >= 12); 
}

int minute() {
  return minute(now()); 
}
    676c:	ldrb	r0, [r3, #1]
    676e:	pop	{r3, pc}
    6770:	.word	0x200041d4
    6774:	.word	0x200041c0

00006778 <second()>:
int minute(time_t t) { // the minute for the given time
  refreshCache(t);
  return tm.Minute;  
}

int second() {
    6778:	push	{r3, lr}
  return second(now()); 
    677a:	bl	66ac <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    677e:	ldr	r3, [pc, #16]	; (6790 <second()+0x18>)
    6780:	ldr	r3, [r3, #0]
    6782:	cmp	r0, r3
    6784:	beq.n	678a <second()+0x12>
    6786:	bl	6694 <refreshCache(long) [clone .part.0]>
  return second(now()); 
}

int second(time_t t) {  // the second for the given time
  refreshCache(t);
  return tm.Second;
    678a:	ldr	r3, [pc, #8]	; (6794 <second()+0x1c>)
  return tm.Minute;  
}

int second() {
  return second(now()); 
}
    678c:	ldrb	r0, [r3, #0]
    678e:	pop	{r3, pc}
    6790:	.word	0x200041d4
    6794:	.word	0x200041c0

00006798 <day()>:
int second(time_t t) {  // the second for the given time
  refreshCache(t);
  return tm.Second;
}

int day(){
    6798:	push	{r3, lr}
  return(day(now())); 
    679a:	bl	66ac <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    679e:	ldr	r3, [pc, #16]	; (67b0 <day()+0x18>)
    67a0:	ldr	r3, [r3, #0]
    67a2:	cmp	r0, r3
    67a4:	beq.n	67aa <day()+0x12>
    67a6:	bl	6694 <refreshCache(long) [clone .part.0]>
  return(day(now())); 
}

int day(time_t t) { // the day for the given time (0-6)
  refreshCache(t);
  return tm.Day;
    67aa:	ldr	r3, [pc, #8]	; (67b4 <day()+0x1c>)
  return tm.Second;
}

int day(){
  return(day(now())); 
}
    67ac:	ldrb	r0, [r3, #4]
    67ae:	pop	{r3, pc}
    67b0:	.word	0x200041d4
    67b4:	.word	0x200041c0

000067b8 <month()>:
int weekday(time_t t) {
  refreshCache(t);
  return tm.Wday;
}
   
int month(){
    67b8:	push	{r3, lr}
  return month(now()); 
    67ba:	bl	66ac <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    67be:	ldr	r3, [pc, #16]	; (67d0 <month()+0x18>)
    67c0:	ldr	r3, [r3, #0]
    67c2:	cmp	r0, r3
    67c4:	beq.n	67ca <month()+0x12>
    67c6:	bl	6694 <refreshCache(long) [clone .part.0]>
  return month(now()); 
}

int month(time_t t) {  // the month for the given time
  refreshCache(t);
  return tm.Month;
    67ca:	ldr	r3, [pc, #8]	; (67d4 <month()+0x1c>)
  return tm.Wday;
}
   
int month(){
  return month(now()); 
}
    67cc:	ldrb	r0, [r3, #5]
    67ce:	pop	{r3, pc}
    67d0:	.word	0x200041d4
    67d4:	.word	0x200041c0

000067d8 <year()>:
int month(time_t t) {  // the month for the given time
  refreshCache(t);
  return tm.Month;
}

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
    67d8:	push	{r3, lr}
  return year(now()); 
    67da:	bl	66ac <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    67de:	ldr	r3, [pc, #20]	; (67f4 <year()+0x1c>)
    67e0:	ldr	r3, [r3, #0]
    67e2:	cmp	r0, r3
    67e4:	beq.n	67ea <year()+0x12>
    67e6:	bl	6694 <refreshCache(long) [clone .part.0]>
  return year(now()); 
}

int year(time_t t) { // the year for the given time
  refreshCache(t);
  return tmYearToCalendar(tm.Year);
    67ea:	ldr	r3, [pc, #12]	; (67f8 <year()+0x20>)
  refreshCache(t);
  return tm.Month;
}

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
  return year(now()); 
    67ec:	ldrb	r0, [r3, #6]
}
    67ee:	addw	r0, r0, #1970	; 0x7b2
    67f2:	pop	{r3, pc}
    67f4:	.word	0x200041d4
    67f8:	.word	0x200041c0

000067fc <setSyncProvider(long (*)())>:
  return Status;
}

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
  nextSyncTime = sysTime;
    67fc:	ldr	r3, [pc, #12]	; (680c <setSyncProvider(long (*)())+0x10>)
    67fe:	ldr	r2, [pc, #16]	; (6810 <setSyncProvider(long (*)())+0x14>)
    6800:	ldr	r1, [r3, #0]
  now(); // required to actually update the status
  return Status;
}

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
    6802:	ldr	r3, [pc, #16]	; (6814 <setSyncProvider(long (*)())+0x18>)
  nextSyncTime = sysTime;
    6804:	str	r1, [r2, #0]
  now(); // required to actually update the status
  return Status;
}

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
    6806:	str	r0, [r3, #0]
  nextSyncTime = sysTime;
  now(); // this will sync the clock
    6808:	b.w	66ac <now()>
    680c:	.word	0x200041d0
    6810:	.word	0x200041bc
    6814:	.word	0x2000c24c

00006818 <Print::write(char const*)>:
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    6818:	push	{r4, r5, r6, lr}
    681a:	mov	r4, r0
    681c:	mov	r0, r1
    681e:	mov	r5, r1
    6820:	bl	c280 <strlen>
    6824:	ldr	r3, [r4, #0]
    6826:	mov	r2, r0
    6828:	mov	r1, r5
    682a:	mov	r0, r4
    682c:	ldr	r3, [r3, #4]
    682e:	ldmia.w	sp!, {r4, r5, r6, lr}
    6832:	bx	r3

00006834 <die(char const*, unsigned char)>:
  for(int ii=0;ii<512; ii++)
  if((ii+1)%16) Serial.printf("%02x ",buff[ii]); else Serial.printf("%02x\n",buff[ii]);
}

void die(const char * txt, DSTATUS res)
{
    6834:	push	{r3, lr}
    6836:	mov	r4, r1
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    6838:	mov	r1, r0
    683a:	ldr	r0, [pc, #28]	; (6858 <die(char const*, unsigned char)+0x24>)
    683c:	bl	6818 <Print::write(char const*)>
    6840:	ldr	r1, [pc, #24]	; (685c <die(char const*, unsigned char)+0x28>)
    6842:	ldr	r0, [pc, #20]	; (6858 <die(char const*, unsigned char)+0x24>)
    6844:	bl	6818 <Print::write(char const*)>
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
	size_t print(int64_t n);
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    6848:	mov	r1, r4
    684a:	movs	r3, #0
    684c:	movs	r2, #16
    684e:	ldr	r0, [pc, #8]	; (6858 <die(char const*, unsigned char)+0x24>)
    6850:	bl	a630 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    6854:	b.n	6854 <die(char const*, unsigned char)+0x20>
    6856:	nop
    6858:	.word	0x20001228
    685c:	.word	0x20000bb8

00006860 <die(char const*, DRESULT)>:
  Serial.print(txt); Serial.print(" "); Serial.print(res,HEX); while(1);
}
void die(const char * txt, DRESULT res)
{
    6860:	push	{r3, lr}
    6862:	mov	r4, r1
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    6864:	mov	r1, r0
    6866:	ldr	r0, [pc, #28]	; (6884 <die(char const*, DRESULT)+0x24>)
    6868:	bl	6818 <Print::write(char const*)>
    686c:	ldr	r1, [pc, #24]	; (6888 <die(char const*, DRESULT)+0x28>)
    686e:	ldr	r0, [pc, #20]	; (6884 <die(char const*, DRESULT)+0x24>)
    6870:	bl	6818 <Print::write(char const*)>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
	size_t print(int64_t n);
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
    6874:	mov	r1, r4
    6876:	movs	r3, #0
    6878:	movs	r2, #16
    687a:	ldr	r0, [pc, #8]	; (6884 <die(char const*, DRESULT)+0x24>)
    687c:	bl	a630 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    6880:	b.n	6880 <die(char const*, DRESULT)+0x20>
    6882:	nop
    6884:	.word	0x20001228
    6888:	.word	0x20000bb8

0000688c <die(char const*, unsigned long, DRESULT)>:
  Serial.print(txt); Serial.print(" "); Serial.print(res,HEX); while(1);
}
void die(const char * txt, uint32_t sector, DRESULT res)
{
    688c:	push	{r3, lr}
    688e:	mov	r5, r1
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    6890:	mov	r1, r0
    6892:	ldr	r0, [pc, #48]	; (68c4 <die(char const*, unsigned long, DRESULT)+0x38>)
    6894:	mov	r4, r2
    6896:	bl	6818 <Print::write(char const*)>
    689a:	ldr	r1, [pc, #44]	; (68c8 <die(char const*, unsigned long, DRESULT)+0x3c>)
    689c:	ldr	r0, [pc, #36]	; (68c4 <die(char const*, unsigned long, DRESULT)+0x38>)
    689e:	bl	6818 <Print::write(char const*)>

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    68a2:	movs	r3, #0
    68a4:	movs	r2, #16
    68a6:	mov	r1, r5
    68a8:	ldr	r0, [pc, #24]	; (68c4 <die(char const*, unsigned long, DRESULT)+0x38>)
    68aa:	bl	a630 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    68ae:	ldr	r1, [pc, #24]	; (68c8 <die(char const*, unsigned long, DRESULT)+0x3c>)
    68b0:	ldr	r0, [pc, #16]	; (68c4 <die(char const*, unsigned long, DRESULT)+0x38>)
    68b2:	bl	6818 <Print::write(char const*)>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
	size_t print(int64_t n);
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
    68b6:	mov	r1, r4
    68b8:	movs	r3, #0
    68ba:	movs	r2, #16
    68bc:	ldr	r0, [pc, #4]	; (68c4 <die(char const*, unsigned long, DRESULT)+0x38>)
    68be:	bl	a630 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    68c2:	b.n	68c2 <die(char const*, unsigned long, DRESULT)+0x36>
    68c4:	.word	0x20001228
    68c8:	.word	0x20000bb8

000068cc <zeroFS_class::Append()>:
  hdr.next = eof_sector;
  if(DRESULT res = disk_write (pdrv, buff, sector, count)) die("fixEOF 2 ",res);
}
*/
void zeroFS_class::Append(void)
{ 
    68cc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    68d0:	movw	r6, #8776	; 0x2248
  read_sector=root_sector;
    68d4:	ldr	r5, [r0, #0]
  hdr.next = eof_sector;
  if(DRESULT res = disk_write (pdrv, buff, sector, count)) die("fixEOF 2 ",res);
}
*/
void zeroFS_class::Append(void)
{ 
    68d6:	sub	sp, #12
    68d8:	mov	r4, r0
  read_sector=root_sector;
    68da:	mov.w	fp, #0
    do
    { 
      curSector=read_sector;
      if(DRESULT res = disk_read (pdrv, buff, read_sector, count)) die("open",res);
      read_sector=hdr->next;
    } while ((read_sector != 0xFFFFFFFFUL) && (hdr->magic==MAGIC));
    68de:	ldr.w	r8, [pc, #364]	; 6a4c <zeroFS_class::Append()+0x180>
    68e2:	mov	r9, r0
    68e4:	add	r6, r0
  if(DRESULT res = disk_write (pdrv, buff, sector, count)) die("fixEOF 2 ",res);
}
*/
void zeroFS_class::Append(void)
{ 
  read_sector=root_sector;
    68e6:	str	r5, [r0, #12]
    68e8:	movw	sl, #8792	; 0x2258
    68ec:	add	sl, fp
    68ee:	add.w	r7, r4, sl
    68f2:	b.n	68fc <zeroFS_class::Append()+0x30>
    do
    { 
      curSector=read_sector;
      if(DRESULT res = disk_read (pdrv, buff, read_sector, count)) die("open",res);
      read_sector=hdr->next;
    } while ((read_sector != 0xFFFFFFFFUL) && (hdr->magic==MAGIC));
    68f4:	ldr	r2, [r6, #0]
    68f6:	cmp	r2, r8
    68f8:	bne.n	6916 <zeroFS_class::Append()+0x4a>
    68fa:	mov	r5, r3
    HDR_t *hdr = (HDR_t *) &hdr_list[ii];
    UINT count = 1;
    do
    { 
      curSector=read_sector;
      if(DRESULT res = disk_read (pdrv, buff, read_sector, count)) die("open",res);
    68fc:	movs	r3, #1
    68fe:	mov	r2, r5
    6900:	mov	r1, r6
    6902:	ldrb	r0, [r4, #28]
    6904:	bl	7004 <disk_read>
    6908:	cmp	r0, #0
    690a:	bne.w	6a1c <zeroFS_class::Append()+0x150>
      read_sector=hdr->next;
    690e:	ldr	r3, [r7, #0]
    } while ((read_sector != 0xFFFFFFFFUL) && (hdr->magic==MAGIC));
    6910:	adds	r2, r3, #1
    UINT count = 1;
    do
    { 
      curSector=read_sector;
      if(DRESULT res = disk_read (pdrv, buff, read_sector, count)) die("open",res);
      read_sector=hdr->next;
    6912:	str	r3, [r4, #12]
    } while ((read_sector != 0xFFFFFFFFUL) && (hdr->magic==MAGIC));
    6914:	bne.n	68f4 <zeroFS_class::Append()+0x28>
    read_sector=curSector+1;
    6916:	adds	r3, r5, #1

    // list last entry
    Serial.printf("%x ",curSector);
    6918:	mov	r2, r5
    691a:	ldr	r1, [pc, #264]	; (6a24 <zeroFS_class::Append()+0x158>)
    Serial.printf("%x %x %x %x ",hdr->prev,hdr->sect,hdr->next,hdr->parent);
    691c:	movw	r5, #8784	; 0x2250
    { 
      curSector=read_sector;
      if(DRESULT res = disk_read (pdrv, buff, read_sector, count)) die("open",res);
      read_sector=hdr->next;
    } while ((read_sector != 0xFFFFFFFFUL) && (hdr->magic==MAGIC));
    read_sector=curSector+1;
    6920:	str	r3, [r4, #12]
    6922:	add.w	r6, r6, #512	; 0x200

    // list last entry
    Serial.printf("%x ",curSector);
    6926:	ldr	r0, [pc, #256]	; (6a28 <zeroFS_class::Append()+0x15c>)
    6928:	bl	a610 <Print::printf(char const*, ...)>
    Serial.printf("%x %x %x %x ",hdr->prev,hdr->sect,hdr->next,hdr->parent);
    692c:	movw	r1, #8796	; 0x225c
    6930:	mov	r3, r5
    6932:	movw	r2, #8788	; 0x2254
    6936:	add	r1, r9
    6938:	ldr.w	r0, [r4, sl]
    693c:	add	r3, r9
    693e:	add	r2, r9
    6940:	ldr	r1, [r1, #0]
    6942:	ldr	r3, [r3, #0]
    6944:	ldr	r2, [r2, #0]
    6946:	stmia.w	sp, {r0, r1}
    694a:	ldr	r1, [pc, #224]	; (6a2c <zeroFS_class::Append()+0x160>)
    694c:	ldr	r0, [pc, #216]	; (6a28 <zeroFS_class::Append()+0x15c>)
    694e:	bl	a610 <Print::printf(char const*, ...)>
    Serial.printf("%d %x %s\n",hdr->type,hdr->size,hdr->name); Serial.flush();
    6952:	movw	r3, #8800	; 0x2260
    6956:	movw	r2, #8780	; 0x224c
    695a:	movw	r0, #8816	; 0x2270
    695e:	add	r3, r9
    6960:	ldr	r1, [pc, #204]	; (6a30 <zeroFS_class::Append()+0x164>)
    6962:	add	r0, r9
    6964:	add	r2, r9
    6966:	ldr	r3, [r3, #0]
    6968:	add.w	r9, r9, #512	; 0x200
    696c:	ldr	r2, [r2, #0]
    696e:	str	r0, [sp, #0]
    6970:	ldr	r0, [pc, #180]	; (6a28 <zeroFS_class::Append()+0x15c>)
    6972:	bl	a610 <Print::printf(char const*, ...)>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    6976:	bl	8ba8 <usb_serial_flush_output>
{ 
  read_sector=root_sector;

  DWORD curSector;

  for(int ii=0;ii<4;ii++)
    697a:	cmp.w	fp, #1536	; 0x600
    697e:	beq.n	6988 <zeroFS_class::Append()+0xbc>
    6980:	add.w	fp, fp, #512	; 0x200
    6984:	ldr	r5, [r4, #12]
    6986:	b.n	68e8 <zeroFS_class::Append()+0x1c>
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    6988:	movs	r1, #5
    698a:	ldr	r0, [pc, #168]	; (6a34 <zeroFS_class::Append()+0x168>)
    698c:	bl	8b40 <usb_serial_write>
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    6990:	ldr	r1, [r4, r5]
    6992:	movs	r3, #0
    6994:	movs	r2, #16
    6996:	ldr	r0, [pc, #144]	; (6a28 <zeroFS_class::Append()+0x15c>)
    6998:	bl	a630 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    699c:	ldr	r0, [pc, #136]	; (6a28 <zeroFS_class::Append()+0x15c>)
    699e:	bl	a5e0 <Print::println()>
    69a2:	movs	r1, #5
    69a4:	ldr	r0, [pc, #144]	; (6a38 <zeroFS_class::Append()+0x16c>)
    69a6:	bl	8b40 <usb_serial_write>
    Serial.printf("%d %x %s\n",hdr->type,hdr->size,hdr->name); Serial.flush();

  }

  Serial.print("Root "); Serial.println(hdr_list[0].sect,HEX);
  Serial.print("Day  "); Serial.println(hdr_list[1].sect,HEX);
    69aa:	movw	r1, #9296	; 0x2450

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    69ae:	movs	r3, #0
    69b0:	movs	r2, #16
    69b2:	ldr	r1, [r4, r1]
    69b4:	ldr	r0, [pc, #112]	; (6a28 <zeroFS_class::Append()+0x15c>)
    69b6:	bl	a630 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    69ba:	ldr	r0, [pc, #108]	; (6a28 <zeroFS_class::Append()+0x15c>)
    69bc:	bl	a5e0 <Print::println()>
    69c0:	movs	r1, #5
    69c2:	ldr	r0, [pc, #120]	; (6a3c <zeroFS_class::Append()+0x170>)
    69c4:	bl	8b40 <usb_serial_write>
  Serial.print("Hour "); Serial.println(hdr_list[2].sect,HEX);
    69c8:	movw	r1, #9808	; 0x2650

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    69cc:	movs	r3, #0
    69ce:	movs	r2, #16
    69d0:	ldr	r1, [r4, r1]
    69d2:	ldr	r0, [pc, #84]	; (6a28 <zeroFS_class::Append()+0x15c>)
    69d4:	bl	a630 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    69d8:	ldr	r0, [pc, #76]	; (6a28 <zeroFS_class::Append()+0x15c>)
    69da:	bl	a5e0 <Print::println()>
    69de:	movs	r1, #5
    69e0:	ldr	r0, [pc, #92]	; (6a40 <zeroFS_class::Append()+0x174>)
    69e2:	bl	8b40 <usb_serial_write>
  Serial.print("File "); Serial.println(hdr_list[3].sect,HEX);
    69e6:	movw	r1, #10320	; 0x2850

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    69ea:	movs	r3, #0
    69ec:	movs	r2, #16
    69ee:	ldr	r1, [r4, r1]
    69f0:	ldr	r0, [pc, #52]	; (6a28 <zeroFS_class::Append()+0x15c>)
    69f2:	bl	a630 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    69f6:	ldr	r0, [pc, #48]	; (6a28 <zeroFS_class::Append()+0x15c>)
    69f8:	bl	a5e0 <Print::println()>
    69fc:	movs	r1, #5
    69fe:	ldr	r0, [pc, #68]	; (6a44 <zeroFS_class::Append()+0x178>)
    6a00:	bl	8b40 <usb_serial_write>

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    6a04:	ldr	r1, [r4, #12]
    6a06:	movs	r3, #0
    6a08:	movs	r2, #16
    6a0a:	ldr	r0, [pc, #28]	; (6a28 <zeroFS_class::Append()+0x15c>)
    6a0c:	bl	a630 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    6a10:	ldr	r0, [pc, #20]	; (6a28 <zeroFS_class::Append()+0x15c>)
  Serial.print("Next "); Serial.println(read_sector,HEX);
}
    6a12:	add	sp, #12
    6a14:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6a18:	b.w	a5e0 <Print::println()>
    HDR_t *hdr = (HDR_t *) &hdr_list[ii];
    UINT count = 1;
    do
    { 
      curSector=read_sector;
      if(DRESULT res = disk_read (pdrv, buff, read_sector, count)) die("open",res);
    6a1c:	mov	r1, r0
    6a1e:	ldr	r0, [pc, #40]	; (6a48 <zeroFS_class::Append()+0x17c>)
    6a20:	bl	6860 <die(char const*, DRESULT)>
    6a24:	.word	0x20000b8c
    6a28:	.word	0x20001228
    6a2c:	.word	0x20000b90
    6a30:	.word	0x20000ba0
    6a34:	.word	0x20000bac
    6a38:	.word	0x20000bb4
    6a3c:	.word	0x20000bbc
    6a40:	.word	0x20000bc4
    6a44:	.word	0x20000bcc
    6a48:	.word	0x20000b84
    6a4c:	.word	0x6f72657a

00006a50 <zeroFS_class::Create(HDR_TYPE, char const*)>:
  sprintf(name,"R%04lx_%08lx",sernum, write_sector);
  Create(T_ROOT, name);
}

void zeroFS_class::Create(HDR_TYPE type, const char *name)
{
    6a50:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  memset(&hdr,0,sizeof(hdr));
    6a54:	movw	r5, #8264	; 0x2048
  sprintf(name,"R%04lx_%08lx",sernum, write_sector);
  Create(T_ROOT, name);
}

void zeroFS_class::Create(HDR_TYPE type, const char *name)
{
    6a58:	mov	r4, r0
    6a5a:	mov	r6, r1
    6a5c:	mov	r7, r2
  memset(&hdr,0,sizeof(hdr));
    6a5e:	add	r5, r0
    6a60:	mov.w	r2, #512	; 0x200
    6a64:	movs	r1, #0
    6a66:	movw	r8, #8264	; 0x2048
    6a6a:	mov	r0, r5
  hdr.magic=MAGIC;
    6a6c:	ldr.w	r9, [pc, #364]	; 6bdc <zeroFS_class::Create(HDR_TYPE, char const*)+0x18c>
  Create(T_ROOT, name);
}

void zeroFS_class::Create(HDR_TYPE type, const char *name)
{
  memset(&hdr,0,sizeof(hdr));
    6a70:	bl	bc44 <memset>
  hdr.magic=MAGIC;
  hdr.type=type;
  hdr.prev=write_sector;
    6a74:	movw	sl, #8276	; 0x2054
    6a78:	ldr	r3, [r4, #4]

void zeroFS_class::Create(HDR_TYPE type, const char *name)
{
  memset(&hdr,0,sizeof(hdr));
  hdr.magic=MAGIC;
  hdr.type=type;
    6a7a:	movw	r0, #8268	; 0x204c
  hdr.prev=write_sector;
  hdr.sect=write_sector;
    6a7e:	movw	r2, #8272	; 0x2050
}

void zeroFS_class::Create(HDR_TYPE type, const char *name)
{
  memset(&hdr,0,sizeof(hdr));
  hdr.magic=MAGIC;
    6a82:	str.w	r9, [r4, r8]
  hdr.type=type;
  hdr.prev=write_sector;
  hdr.sect=write_sector;
  hdr.size=1;
    6a86:	movw	r1, #8288	; 0x2060

void zeroFS_class::Create(HDR_TYPE type, const char *name)
{
  memset(&hdr,0,sizeof(hdr));
  hdr.magic=MAGIC;
  hdr.type=type;
    6a8a:	str	r6, [r4, r0]
  hdr.prev=write_sector;
  hdr.sect=write_sector;
    6a8c:	str	r3, [r4, r2]
  hdr.size=1;
    6a8e:	movs	r0, #1
void zeroFS_class::Create(HDR_TYPE type, const char *name)
{
  memset(&hdr,0,sizeof(hdr));
  hdr.magic=MAGIC;
  hdr.type=type;
  hdr.prev=write_sector;
    6a90:	str.w	r3, [r4, sl]
  hdr.sect=write_sector;
  hdr.size=1;
  hdr.next=0xFFFFFFFF;
    6a94:	movw	r2, #8280	; 0x2058
    6a98:	mov.w	r3, #4294967295
  memset(&hdr,0,sizeof(hdr));
  hdr.magic=MAGIC;
  hdr.type=type;
  hdr.prev=write_sector;
  hdr.sect=write_sector;
  hdr.size=1;
    6a9c:	str	r0, [r4, r1]
  hdr.millis=millis();
  hdr.micros=micros();
  strcpy(hdr.name,name);
  
  {    
    if(hdr_list[type].magic==MAGIC) { hdr.prev = hdr_list[type].sect; }
    6a9e:	mov.w	r8, r6, lsl #9
  hdr.magic=MAGIC;
  hdr.type=type;
  hdr.prev=write_sector;
  hdr.sect=write_sector;
  hdr.size=1;
  hdr.next=0xFFFFFFFF;
    6aa2:	str	r3, [r4, r2]
  hdr.ctime=rtc_get();
    6aa4:	bl	98b4 <rtc_get>
    6aa8:	ldr	r2, [pc, #288]	; (6bcc <zeroFS_class::Create(HDR_TYPE, char const*)+0x17c>)
    6aaa:	movw	r1, #8292	; 0x2064
  hdr.millis=millis();
    6aae:	movw	r3, #8296	; 0x2068
    6ab2:	ldr	r2, [r2, #0]
  hdr.type=type;
  hdr.prev=write_sector;
  hdr.sect=write_sector;
  hdr.size=1;
  hdr.next=0xFFFFFFFF;
  hdr.ctime=rtc_get();
    6ab4:	str	r0, [r4, r1]
  hdr.millis=millis();
    6ab6:	str	r2, [r4, r3]
  hdr.micros=micros();
    6ab8:	bl	9690 <micros>
    6abc:	movw	r3, #8300	; 0x206c
  strcpy(hdr.name,name);
    6ac0:	mov	r1, r7
  hdr.sect=write_sector;
  hdr.size=1;
  hdr.next=0xFFFFFFFF;
  hdr.ctime=rtc_get();
  hdr.millis=millis();
  hdr.micros=micros();
    6ac2:	str	r0, [r4, r3]
  strcpy(hdr.name,name);
    6ac4:	movw	r0, #8304	; 0x2070
    6ac8:	add	r0, r4
    6aca:	bl	c138 <strcpy>
  
  {    
    if(hdr_list[type].magic==MAGIC) { hdr.prev = hdr_list[type].sect; }
    6ace:	add.w	r3, r4, r8
    6ad2:	movw	r2, #8776	; 0x2248
    6ad6:	ldr	r2, [r3, r2]
    6ad8:	cmp	r2, r9
    6ada:	beq.n	6bb6 <zeroFS_class::Create(HDR_TYPE, char const*)+0x166>
    
    hdr.parent = (type==T_ROOT)? 0xFFFFFFFFUL : hdr_list[type-1].sect;
    6adc:	cmp	r6, #0
    6ade:	beq.n	6b56 <zeroFS_class::Create(HDR_TYPE, char const*)+0x106>
    6ae0:	subs	r1, r6, #1
    6ae2:	movw	lr, #8784	; 0x2250
    6ae6:	movw	r0, #8284	; 0x205c

    // write hdr to disk
    DWORD sector = hdr.sect;
    6aea:	movw	r2, #8272	; 0x2050
  strcpy(hdr.name,name);
  
  {    
    if(hdr_list[type].magic==MAGIC) { hdr.prev = hdr_list[type].sect; }
    
    hdr.parent = (type==T_ROOT)? 0xFFFFFFFFUL : hdr_list[type-1].sect;
    6aee:	add.w	r1, r4, r1, lsl #9

    // write hdr to disk
    DWORD sector = hdr.sect;
    BYTE* buff = (BYTE *) &hdr;
    UINT count = 1;
    if(DRESULT res = disk_write (pdrv, buff, sector, count)) die("write1",res);
    6af2:	movs	r3, #1
    6af4:	ldr	r2, [r4, r2]
  strcpy(hdr.name,name);
  
  {    
    if(hdr_list[type].magic==MAGIC) { hdr.prev = hdr_list[type].sect; }
    
    hdr.parent = (type==T_ROOT)? 0xFFFFFFFFUL : hdr_list[type-1].sect;
    6af6:	ldr.w	lr, [r1, lr]

    // write hdr to disk
    DWORD sector = hdr.sect;
    BYTE* buff = (BYTE *) &hdr;
    UINT count = 1;
    if(DRESULT res = disk_write (pdrv, buff, sector, count)) die("write1",res);
    6afa:	mov	r1, r5
  strcpy(hdr.name,name);
  
  {    
    if(hdr_list[type].magic==MAGIC) { hdr.prev = hdr_list[type].sect; }
    
    hdr.parent = (type==T_ROOT)? 0xFFFFFFFFUL : hdr_list[type-1].sect;
    6afc:	str.w	lr, [r4, r0]

    // write hdr to disk
    DWORD sector = hdr.sect;
    BYTE* buff = (BYTE *) &hdr;
    UINT count = 1;
    if(DRESULT res = disk_write (pdrv, buff, sector, count)) die("write1",res);
    6b00:	ldrb	r0, [r4, #28]
    6b02:	bl	7048 <disk_write>
    6b06:	mov	r9, r0
    6b08:	cmp	r0, #0
    6b0a:	bne.n	6bc2 <zeroFS_class::Create(HDR_TYPE, char const*)+0x172>

    memcpy(&hdr_list[type],&hdr, sizeof(HDR_t));
    6b0c:	movw	r0, #8776	; 0x2248
    6b10:	mov.w	r2, #512	; 0x200
    6b14:	mov	r1, r5
    6b16:	add	r0, r8
    6b18:	add	r0, r4
    6b1a:	bl	83b0 <memcpy>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    6b1e:	mov	r0, r7
    6b20:	bl	c280 <strlen>
    6b24:	mov	r1, r0
    6b26:	mov	r0, r7
    6b28:	bl	8b40 <usb_serial_write>
    6b2c:	movs	r1, #1
    6b2e:	ldr	r0, [pc, #160]	; (6bd0 <zeroFS_class::Create(HDR_TYPE, char const*)+0x180>)
    6b30:	bl	8b40 <usb_serial_write>

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    6b34:	mov	r3, r9
    6b36:	movs	r2, #16
    6b38:	ldr	r1, [r4, #4]
    6b3a:	ldr	r0, [pc, #152]	; (6bd4 <zeroFS_class::Create(HDR_TYPE, char const*)+0x184>)
    6b3c:	bl	a630 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

    Serial.print(name); Serial.print(" "); Serial.print(write_sector,HEX); 
    if(type ==T_FILE) Serial.print(" "); else Serial.println();
    6b40:	cmp	r6, #3
    6b42:	bne.n	6ba6 <zeroFS_class::Create(HDR_TYPE, char const*)+0x156>
    6b44:	movs	r1, #1
    6b46:	ldr	r0, [pc, #136]	; (6bd0 <zeroFS_class::Create(HDR_TYPE, char const*)+0x180>)
    6b48:	bl	8b40 <usb_serial_write>

    write_sector++;
    6b4c:	ldr	r3, [r4, #4]
    6b4e:	adds	r3, #1
    6b50:	str	r3, [r4, #4]
  }
}
    6b52:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  strcpy(hdr.name,name);
  
  {    
    if(hdr_list[type].magic==MAGIC) { hdr.prev = hdr_list[type].sect; }
    
    hdr.parent = (type==T_ROOT)? 0xFFFFFFFFUL : hdr_list[type-1].sect;
    6b56:	movw	r1, #8284	; 0x205c
    6b5a:	mov.w	r0, #4294967295

    // write hdr to disk
    DWORD sector = hdr.sect;
    6b5e:	movw	r2, #8272	; 0x2050
    BYTE* buff = (BYTE *) &hdr;
    UINT count = 1;
    if(DRESULT res = disk_write (pdrv, buff, sector, count)) die("write1",res);
    6b62:	movs	r3, #1
  strcpy(hdr.name,name);
  
  {    
    if(hdr_list[type].magic==MAGIC) { hdr.prev = hdr_list[type].sect; }
    
    hdr.parent = (type==T_ROOT)? 0xFFFFFFFFUL : hdr_list[type-1].sect;
    6b64:	str	r0, [r4, r1]

    // write hdr to disk
    DWORD sector = hdr.sect;
    BYTE* buff = (BYTE *) &hdr;
    UINT count = 1;
    if(DRESULT res = disk_write (pdrv, buff, sector, count)) die("write1",res);
    6b66:	mov	r1, r5
    6b68:	ldr	r2, [r4, r2]
    6b6a:	ldrb	r0, [r4, #28]
    6b6c:	bl	7048 <disk_write>
    6b70:	mov	r9, r0
    6b72:	cbnz	r0, 6bc2 <zeroFS_class::Create(HDR_TYPE, char const*)+0x172>

    memcpy(&hdr_list[type],&hdr, sizeof(HDR_t));
    6b74:	movw	r0, #8776	; 0x2248
    6b78:	mov.w	r2, #512	; 0x200
    6b7c:	mov	r1, r5
    6b7e:	add	r0, r4
    6b80:	bl	83b0 <memcpy>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    6b84:	mov	r0, r7
    6b86:	bl	c280 <strlen>
    6b8a:	mov	r1, r0
    6b8c:	mov	r0, r7
    6b8e:	bl	8b40 <usb_serial_write>
    6b92:	movs	r1, #1
    6b94:	ldr	r0, [pc, #56]	; (6bd0 <zeroFS_class::Create(HDR_TYPE, char const*)+0x180>)
    6b96:	bl	8b40 <usb_serial_write>

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    6b9a:	mov	r3, r6
    6b9c:	movs	r2, #16
    6b9e:	ldr	r1, [r4, #4]
    6ba0:	ldr	r0, [pc, #48]	; (6bd4 <zeroFS_class::Create(HDR_TYPE, char const*)+0x184>)
    6ba2:	bl	a630 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

    Serial.print(name); Serial.print(" "); Serial.print(write_sector,HEX); 
    if(type ==T_FILE) Serial.print(" "); else Serial.println();
    6ba6:	ldr	r0, [pc, #44]	; (6bd4 <zeroFS_class::Create(HDR_TYPE, char const*)+0x184>)
    6ba8:	bl	a5e0 <Print::println()>

    write_sector++;
    6bac:	ldr	r3, [r4, #4]
    6bae:	adds	r3, #1
    6bb0:	str	r3, [r4, #4]
  }
}
    6bb2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hdr.millis=millis();
  hdr.micros=micros();
  strcpy(hdr.name,name);
  
  {    
    if(hdr_list[type].magic==MAGIC) { hdr.prev = hdr_list[type].sect; }
    6bb6:	movw	r2, #8784	; 0x2250
    6bba:	ldr	r3, [r3, r2]
    6bbc:	str.w	r3, [r4, sl]
    6bc0:	b.n	6adc <zeroFS_class::Create(HDR_TYPE, char const*)+0x8c>

    // write hdr to disk
    DWORD sector = hdr.sect;
    BYTE* buff = (BYTE *) &hdr;
    UINT count = 1;
    if(DRESULT res = disk_write (pdrv, buff, sector, count)) die("write1",res);
    6bc2:	mov	r1, r9
    6bc4:	ldr	r0, [pc, #16]	; (6bd8 <zeroFS_class::Create(HDR_TYPE, char const*)+0x188>)
    6bc6:	bl	6860 <die(char const*, DRESULT)>
    6bca:	nop
    6bcc:	.word	0x2000c320
    6bd0:	.word	0x20000bb8
    6bd4:	.word	0x20001228
    6bd8:	.word	0x20000bd4
    6bdc:	.word	0x6f72657a

00006be0 <zeroFS_class::Close(HDR_TYPE)>:
  read_sector=hdr_sector+1;
}

void zeroFS_class::Close(HDR_TYPE type)
{
  hdr_list[type].next=write_sector;
    6be0:	lsls	r2, r1, #9
  //if(type==T_FILE) 
  hdr_list[type].size= (hdr_list[type].next-hdr_list[type].sect);
  //
  DWORD sector = hdr_list[type].sect;
  BYTE* buff = (BYTE *) &hdr_list[type];
    6be2:	movw	r1, #8776	; 0x2248
  read_sector=hdr_sector+1;
}

void zeroFS_class::Close(HDR_TYPE type)
{
  hdr_list[type].next=write_sector;
    6be6:	ldr	r3, [r0, #4]
  //if(type==T_FILE) 
  hdr_list[type].size= (hdr_list[type].next-hdr_list[type].sect);
  //
  DWORD sector = hdr_list[type].sect;
  BYTE* buff = (BYTE *) &hdr_list[type];
    6be8:	add	r1, r2
  hdr_sector=hdr.sect;
  read_sector=hdr_sector+1;
}

void zeroFS_class::Close(HDR_TYPE type)
{
    6bea:	push	{r4, r5, r6, lr}
  hdr_list[type].next=write_sector;
    6bec:	adds	r5, r0, r2
  //if(type==T_FILE) 
  hdr_list[type].size= (hdr_list[type].next-hdr_list[type].sect);
    6bee:	movw	r6, #8784	; 0x2250
  read_sector=hdr_sector+1;
}

void zeroFS_class::Close(HDR_TYPE type)
{
  hdr_list[type].next=write_sector;
    6bf2:	movw	r4, #8792	; 0x2258
  hdr_list[type].size= (hdr_list[type].next-hdr_list[type].sect);
  //
  DWORD sector = hdr_list[type].sect;
  BYTE* buff = (BYTE *) &hdr_list[type];
  UINT count = 1;      
  if(DRESULT res = disk_write (pdrv, buff, sector, count)) die("close2 ",res);
    6bf6:	add	r1, r0

void zeroFS_class::Close(HDR_TYPE type)
{
  hdr_list[type].next=write_sector;
  //if(type==T_FILE) 
  hdr_list[type].size= (hdr_list[type].next-hdr_list[type].sect);
    6bf8:	ldr	r2, [r5, r6]
    6bfa:	movw	r6, #8800	; 0x2260
  read_sector=hdr_sector+1;
}

void zeroFS_class::Close(HDR_TYPE type)
{
  hdr_list[type].next=write_sector;
    6bfe:	str	r3, [r5, r4]
  //if(type==T_FILE) 
  hdr_list[type].size= (hdr_list[type].next-hdr_list[type].sect);
    6c00:	subs	r4, r3, r2
  //
  DWORD sector = hdr_list[type].sect;
  BYTE* buff = (BYTE *) &hdr_list[type];
  UINT count = 1;      
  if(DRESULT res = disk_write (pdrv, buff, sector, count)) die("close2 ",res);
    6c02:	movs	r3, #1

void zeroFS_class::Close(HDR_TYPE type)
{
  hdr_list[type].next=write_sector;
  //if(type==T_FILE) 
  hdr_list[type].size= (hdr_list[type].next-hdr_list[type].sect);
    6c04:	str	r4, [r5, r6]
  //
  DWORD sector = hdr_list[type].sect;
  BYTE* buff = (BYTE *) &hdr_list[type];
  UINT count = 1;      
  if(DRESULT res = disk_write (pdrv, buff, sector, count)) die("close2 ",res);
    6c06:	ldrb	r0, [r0, #28]
    6c08:	bl	7048 <disk_write>
    6c0c:	cbnz	r0, 6c10 <zeroFS_class::Close(HDR_TYPE)+0x30>
    6c0e:	pop	{r4, r5, r6, pc}
    6c10:	mov	r1, r0
    6c12:	ldr	r0, [pc, #4]	; (6c18 <zeroFS_class::Close(HDR_TYPE)+0x38>)
    6c14:	bl	6860 <die(char const*, DRESULT)>
    6c18:	.word	0x20000bf0

00006c1c <zeroFS_class::Create(unsigned long, int)>:
  Serial.print("File "); Serial.println(hdr_list[3].sect,HEX);
  Serial.print("Next "); Serial.println(read_sector,HEX);
}

void zeroFS_class::Create(uint32_t sernum, int flag)
{
    6c1c:	push	{r4, r5, r6, lr}
    6c1e:	mov	r4, r0
  memset(&hdr_list,0,4*sizeof(HDR_t)); // clear all header lists (cache)
    6c20:	movw	r0, #8776	; 0x2248
  Serial.print("File "); Serial.println(hdr_list[3].sect,HEX);
  Serial.print("Next "); Serial.println(read_sector,HEX);
}

void zeroFS_class::Create(uint32_t sernum, int flag)
{
    6c24:	mov	r5, r2
    6c26:	sub	sp, #40	; 0x28
    6c28:	mov	r6, r1
  memset(&hdr_list,0,4*sizeof(HDR_t)); // clear all header lists (cache)
    6c2a:	add	r0, r4
    6c2c:	mov.w	r2, #2048	; 0x800
    6c30:	movs	r1, #0
    6c32:	bl	bc44 <memset>

  if(flag==0)
    6c36:	cbz	r5, 6c56 <zeroFS_class::Create(unsigned long, int)+0x3a>
  { 
    write_sector = root_sector;
  } 
  else if(flag==1)
    6c38:	cmp	r5, #1
    6c3a:	beq.n	6c5c <zeroFS_class::Create(unsigned long, int)+0x40>
    6c3c:	ldr	r3, [r4, #4]
    //link root to next 
    Close(T_ROOT);
  }

  char name[NameLength];
  sprintf(name,"R%04lx_%08lx",sernum, write_sector);
    6c3e:	mov	r2, r6
    6c40:	ldr	r1, [pc, #44]	; (6c70 <zeroFS_class::Create(unsigned long, int)+0x54>)
    6c42:	mov	r0, sp
    6c44:	bl	c0ec <sprintf>
  Create(T_ROOT, name);
    6c48:	mov	r2, sp
    6c4a:	mov	r0, r4
    6c4c:	movs	r1, #0
    6c4e:	bl	6a50 <zeroFS_class::Create(HDR_TYPE, char const*)>
}
    6c52:	add	sp, #40	; 0x28
    6c54:	pop	{r4, r5, r6, pc}
{
  memset(&hdr_list,0,4*sizeof(HDR_t)); // clear all header lists (cache)

  if(flag==0)
  { 
    write_sector = root_sector;
    6c56:	ldr	r3, [r4, #0]
    6c58:	str	r3, [r4, #4]
    6c5a:	b.n	6c3e <zeroFS_class::Create(unsigned long, int)+0x22>
  } 
  else if(flag==1)
  { 
    Append(); //fill existing directory tree
    6c5c:	mov	r0, r4
    6c5e:	bl	68cc <zeroFS_class::Append()>
    write_sector=read_sector; 
    6c62:	ldr	r3, [r4, #12]
    //link root to next 
    Close(T_ROOT);
    6c64:	movs	r1, #0
    6c66:	mov	r0, r4
    write_sector = root_sector;
  } 
  else if(flag==1)
  { 
    Append(); //fill existing directory tree
    write_sector=read_sector; 
    6c68:	str	r3, [r4, #4]
    //link root to next 
    Close(T_ROOT);
    6c6a:	bl	6be0 <zeroFS_class::Close(HDR_TYPE)>
    6c6e:	b.n	6c3c <zeroFS_class::Create(unsigned long, int)+0x20>
    6c70:	.word	0x20000bf8

00006c74 <zeroFS_class::Write(void*, unsigned long)>:

uint32_t zeroFS_class::Write(void * data, uint32_t ndat)
{
    BYTE* buff = (BYTE *) data;
    DWORD sector = write_sector;
    UINT count = (ndat+511)/512;
    6c74:	addw	r2, r2, #511	; 0x1ff
  UINT count = 1;      
  if(DRESULT res = disk_write (pdrv, buff, sector, count)) die("close2 ",res);
}

uint32_t zeroFS_class::Write(void * data, uint32_t ndat)
{
    6c78:	push	{r4, r5, r6, lr}
    BYTE* buff = (BYTE *) data;
    DWORD sector = write_sector;
    UINT count = (ndat+511)/512;
    6c7a:	lsrs	r4, r2, #9
  UINT count = 1;      
  if(DRESULT res = disk_write (pdrv, buff, sector, count)) die("close2 ",res);
}

uint32_t zeroFS_class::Write(void * data, uint32_t ndat)
{
    6c7c:	mov	r6, r0
    BYTE* buff = (BYTE *) data;
    DWORD sector = write_sector;
    UINT count = (ndat+511)/512;
    if(DRESULT res = disk_write (pdrv, buff, sector, count)) return warn("write",res);
    6c7e:	ldr	r2, [r0, #4]
    6c80:	mov	r3, r4
    6c82:	ldrb	r0, [r0, #28]
    6c84:	bl	7048 <disk_write>
    6c88:	cbz	r0, 6cac <zeroFS_class::Write(void*, unsigned long)+0x38>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
	size_t print(int64_t n);
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
    6c8a:	mov	r5, r0
    6c8c:	movs	r1, #5
    6c8e:	ldr	r0, [pc, #40]	; (6cb8 <zeroFS_class::Write(void*, unsigned long)+0x44>)
    6c90:	bl	8b40 <usb_serial_write>
    6c94:	movs	r1, #1
    6c96:	ldr	r0, [pc, #36]	; (6cbc <zeroFS_class::Write(void*, unsigned long)+0x48>)
    6c98:	bl	8b40 <usb_serial_write>
    6c9c:	mov	r1, r5
    6c9e:	movs	r3, #0
    6ca0:	movs	r2, #16
    6ca2:	ldr	r0, [pc, #28]	; (6cc0 <zeroFS_class::Write(void*, unsigned long)+0x4c>)
    6ca4:	bl	a630 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

    write_sector += count;
    return count;
}
    6ca8:	mov	r0, r5
    6caa:	pop	{r4, r5, r6, pc}
    BYTE* buff = (BYTE *) data;
    DWORD sector = write_sector;
    UINT count = (ndat+511)/512;
    if(DRESULT res = disk_write (pdrv, buff, sector, count)) return warn("write",res);

    write_sector += count;
    6cac:	ldr	r2, [r6, #4]
    return count;
    6cae:	mov	r5, r4
    BYTE* buff = (BYTE *) data;
    DWORD sector = write_sector;
    UINT count = (ndat+511)/512;
    if(DRESULT res = disk_write (pdrv, buff, sector, count)) return warn("write",res);

    write_sector += count;
    6cb0:	add	r4, r2
    return count;
}
    6cb2:	mov	r0, r5
    BYTE* buff = (BYTE *) data;
    DWORD sector = write_sector;
    UINT count = (ndat+511)/512;
    if(DRESULT res = disk_write (pdrv, buff, sector, count)) return warn("write",res);

    write_sector += count;
    6cb4:	str	r4, [r6, #4]
    return count;
}
    6cb6:	pop	{r4, r5, r6, pc}
    6cb8:	.word	0x20000c08
    6cbc:	.word	0x20000bb8
    6cc0:	.word	0x20001228

00006cc4 <zeroFS_class::Init(unsigned char, unsigned char, char const*)>:
#define LastSector (total_sectors -GUARD)

uint32_t sd_cardSize(void) ;

bool zeroFS_class::Init(BYTE device, BYTE cs, const char *str)
{
    6cc4:	push	{r4, r5, r6, lr}
    6cc6:	mov	r4, r0
// DEV_SPI
// DEV_SDHC
// DEV_MSC
// DEV_USB

  pdrv = device;
    6cc8:	strb	r1, [r0, #28]
#define LastSector (total_sectors -GUARD)

uint32_t sd_cardSize(void) ;

bool zeroFS_class::Init(BYTE device, BYTE cs, const char *str)
{
    6cca:	mov	r6, r2
// DEV_SDHC
// DEV_MSC
// DEV_USB

  pdrv = device;
  strlcpy(devName,str,NameLength);
    6ccc:	adds	r0, #32
    6cce:	movs	r2, #40	; 0x28
    6cd0:	mov	r1, r3
#define LastSector (total_sectors -GUARD)

uint32_t sd_cardSize(void) ;

bool zeroFS_class::Init(BYTE device, BYTE cs, const char *str)
{
    6cd2:	mov	r5, r3
// DEV_SDHC
// DEV_MSC
// DEV_USB

  pdrv = device;
  strlcpy(devName,str,NameLength);
    6cd4:	bl	c248 <strlcpy>

  csel=cs;
  if(pdrv==DEV_SPI) disk_ioctl(pdrv,1,(void *)&csel); // set cs for spi mode
    6cd8:	ldrb	r0, [r4, #28]
// DEV_USB

  pdrv = device;
  strlcpy(devName,str,NameLength);

  csel=cs;
    6cda:	strh	r6, [r4, #30]
  if(pdrv==DEV_SPI) disk_ioctl(pdrv,1,(void *)&csel); // set cs for spi mode
    6cdc:	cmp	r0, #0
    6cde:	beq.n	6d78 <zeroFS_class::Init(unsigned char, unsigned char, char const*)+0xb4>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    6ce0:	movs	r3, #0
    6ce2:	movs	r2, #10
    6ce4:	mov	r1, r6
    6ce6:	ldr	r0, [pc, #164]	; (6d8c <zeroFS_class::Init(unsigned char, unsigned char, char const*)+0xc8>)
    6ce8:	bl	a630 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    6cec:	movs	r1, #1
    6cee:	ldr	r0, [pc, #160]	; (6d90 <zeroFS_class::Init(unsigned char, unsigned char, char const*)+0xcc>)
    6cf0:	bl	8b40 <usb_serial_write>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    6cf4:	mov	r0, r5
    6cf6:	bl	c280 <strlen>
    6cfa:	mov	r1, r0
    6cfc:	mov	r0, r5
    6cfe:	bl	8b40 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    6d02:	ldr	r0, [pc, #136]	; (6d8c <zeroFS_class::Init(unsigned char, unsigned char, char const*)+0xc8>)
    6d04:	bl	a5e0 <Print::println()>
  
  Serial.print(cs); Serial.print(" "); Serial.println(str);
  
  if(DSTATUS stat = disk_initialize(pdrv)) die("Disk initialize Status: ",stat);
    6d08:	ldrb	r0, [r4, #28]
    6d0a:	bl	6fd0 <disk_initialize>
    6d0e:	mov	r5, r0
    6d10:	cmp	r0, #0
    6d12:	bne.n	6d84 <zeroFS_class::Init(unsigned char, unsigned char, char const*)+0xc0>

  memset(buff,0,512);
    6d14:	add.w	r6, r4, #72	; 0x48
    6d18:	mov	r1, r0
    6d1a:	mov.w	r2, #512	; 0x200
    6d1e:	mov	r0, r6
    6d20:	bl	bc44 <memset>
  write_sector=0;
  Write(buff,512);
    6d24:	mov	r1, r6
    6d26:	mov.w	r2, #512	; 0x200
  Serial.print(cs); Serial.print(" "); Serial.println(str);
  
  if(DSTATUS stat = disk_initialize(pdrv)) die("Disk initialize Status: ",stat);

  memset(buff,0,512);
  write_sector=0;
    6d2a:	str	r5, [r4, #4]
  Write(buff,512);
    6d2c:	mov	r0, r4
    6d2e:	bl	6c74 <zeroFS_class::Write(void*, unsigned long)>
  //
  root_sector=write_sector;
    6d32:	ldr	r3, [r4, #4]
    6d34:	str	r3, [r4, #0]
  total_sectors= sd_cardSize()-root_sector;
    6d36:	bl	7d80 <sd_cardSize()>
    6d3a:	ldr	r3, [r4, #0]
    6d3c:	movs	r1, #13
    6d3e:	subs	r3, r0, r3
    6d40:	ldr	r0, [pc, #80]	; (6d94 <zeroFS_class::Init(unsigned char, unsigned char, char const*)+0xd0>)
    6d42:	str	r3, [r4, #24]
    6d44:	bl	8b40 <usb_serial_write>

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    6d48:	mov	r3, r5
    6d4a:	movs	r2, #16
    6d4c:	ldr	r1, [r4, #0]
    6d4e:	ldr	r0, [pc, #60]	; (6d8c <zeroFS_class::Init(unsigned char, unsigned char, char const*)+0xc8>)
    6d50:	bl	a630 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    6d54:	ldr	r0, [pc, #52]	; (6d8c <zeroFS_class::Init(unsigned char, unsigned char, char const*)+0xc8>)
    6d56:	bl	a5e0 <Print::println()>
    6d5a:	movs	r1, #14
    6d5c:	ldr	r0, [pc, #56]	; (6d98 <zeroFS_class::Init(unsigned char, unsigned char, char const*)+0xd4>)
    6d5e:	bl	8b40 <usb_serial_write>

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    6d62:	mov	r3, r5
    6d64:	ldr	r1, [r4, #24]
    6d66:	movs	r2, #10
    6d68:	ldr	r0, [pc, #32]	; (6d8c <zeroFS_class::Init(unsigned char, unsigned char, char const*)+0xc8>)
    6d6a:	bl	a630 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
    6d6e:	ldr	r0, [pc, #28]	; (6d8c <zeroFS_class::Init(unsigned char, unsigned char, char const*)+0xc8>)
    6d70:	bl	a5e0 <Print::println()>

  Serial.print("Root Sector: "); Serial.println(root_sector,HEX);
  Serial.print("Sector Count: "); Serial.println(total_sectors);
  return true;
}
    6d74:	movs	r0, #1
    6d76:	pop	{r4, r5, r6, pc}

  pdrv = device;
  strlcpy(devName,str,NameLength);

  csel=cs;
  if(pdrv==DEV_SPI) disk_ioctl(pdrv,1,(void *)&csel); // set cs for spi mode
    6d78:	add.w	r2, r4, #30
    6d7c:	movs	r1, #1
    6d7e:	bl	708c <disk_ioctl>
    6d82:	b.n	6ce0 <zeroFS_class::Init(unsigned char, unsigned char, char const*)+0x1c>
  
  Serial.print(cs); Serial.print(" "); Serial.println(str);
  
  if(DSTATUS stat = disk_initialize(pdrv)) die("Disk initialize Status: ",stat);
    6d84:	mov	r1, r0
    6d86:	ldr	r0, [pc, #20]	; (6d9c <zeroFS_class::Init(unsigned char, unsigned char, char const*)+0xd8>)
    6d88:	bl	6834 <die(char const*, unsigned char)>
    6d8c:	.word	0x20001228
    6d90:	.word	0x20000bb8
    6d94:	.word	0x20000c2c
    6d98:	.word	0x20000c3c
    6d9c:	.word	0x20000c10

00006da0 <zeroFS_class::ListAll()>:
      if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read2",res);

      read_sector += count;
}
void zeroFS_class::ListAll(void)
{
    6da0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6da4:	movw	r8, #8264	; 0x2048
    if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("ListAll ",res);
    //
    if(hdr.magic != MAGIC) break;
    //
    //hdr.size= (hdr.type==T_FILE)? (hdr.next-hdr.sect): 0xfffffffful;
    for(int ii=0; ii<(int)(hdr.type); ii++) Serial.print("  ");
    6da8:	movw	r5, #8268	; 0x204c
      if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read2",res);

      read_sector += count;
}
void zeroFS_class::ListAll(void)
{
    6dac:	sub	sp, #12
    6dae:	mov	r6, r0
  {
    BYTE* buff = (BYTE *) &hdr;
    UINT count = 1;
    if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("ListAll ",res);
    //
    if(hdr.magic != MAGIC) break;
    6db0:	ldr.w	r9, [pc, #188]	; 6e70 <zeroFS_class::ListAll()+0xd0>
    6db4:	add	r8, r0

      read_sector += count;
}
void zeroFS_class::ListAll(void)
{
  uint32_t sector = root_sector;
    6db6:	ldr	r7, [r0, #0]
    if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("ListAll ",res);
    //
    if(hdr.magic != MAGIC) break;
    //
    //hdr.size= (hdr.type==T_FILE)? (hdr.next-hdr.sect): 0xfffffffful;
    for(int ii=0; ii<(int)(hdr.type); ii++) Serial.print("  ");
    6db8:	add	r5, r0
  uint32_t sector = root_sector;
  while(1)
  {
    BYTE* buff = (BYTE *) &hdr;
    UINT count = 1;
    if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("ListAll ",res);
    6dba:	movs	r3, #1
    6dbc:	mov	r2, r7
    6dbe:	mov	r1, r8
    6dc0:	ldrb	r0, [r6, #28]
    6dc2:	bl	7004 <disk_read>
    6dc6:	cmp	r0, #0
    6dc8:	bne.n	6e52 <zeroFS_class::ListAll()+0xb2>
    //
    if(hdr.magic != MAGIC) break;
    6dca:	ldr.w	r3, [r8]
    6dce:	cmp	r3, r9
    6dd0:	bne.n	6e42 <zeroFS_class::ListAll()+0xa2>
    //
    //hdr.size= (hdr.type==T_FILE)? (hdr.next-hdr.sect): 0xfffffffful;
    for(int ii=0; ii<(int)(hdr.type); ii++) Serial.print("  ");
    6dd2:	ldr	r3, [r5, #0]
    6dd4:	cmp	r3, #0
    6dd6:	ble.n	6dea <zeroFS_class::ListAll()+0x4a>
    6dd8:	mov	r4, r0
    6dda:	movs	r1, #2
    6ddc:	ldr	r0, [pc, #124]	; (6e5c <zeroFS_class::ListAll()+0xbc>)
    6dde:	bl	8b40 <usb_serial_write>
    6de2:	adds	r4, #1
    6de4:	ldr	r3, [r5, #0]
    6de6:	cmp	r3, r4
    6de8:	bgt.n	6dda <zeroFS_class::ListAll()+0x3a>
    Serial.printf("%x %x %x %x ",hdr.prev,hdr.sect,hdr.next,hdr.parent);
    6dea:	movw	r1, #8284	; 0x205c
    6dee:	movw	r3, #8272	; 0x2050
    6df2:	movw	r2, #8276	; 0x2054
    6df6:	movw	r4, #8280	; 0x2058
    6dfa:	add	r1, r6
    6dfc:	add	r3, r6
    6dfe:	add	r2, r6
    6e00:	add	r4, r6
    6e02:	ldr	r1, [r1, #0]
    6e04:	ldr	r3, [r3, #0]
    6e06:	ldr	r2, [r2, #0]
    6e08:	str	r1, [sp, #4]
    6e0a:	ldr	r0, [r4, #0]
    6e0c:	ldr	r1, [pc, #80]	; (6e60 <zeroFS_class::ListAll()+0xc0>)
    6e0e:	str	r0, [sp, #0]
    6e10:	ldr	r0, [pc, #80]	; (6e64 <zeroFS_class::ListAll()+0xc4>)
    6e12:	bl	a610 <Print::printf(char const*, ...)>
    Serial.printf("%d %x %s\n",hdr.type,hdr.size,hdr.name); Serial.flush();
    6e16:	movw	r3, #8288	; 0x2060
    6e1a:	movw	lr, #8304	; 0x2070
    6e1e:	ldr	r2, [r5, #0]
    6e20:	add	r3, r6
    6e22:	ldr	r1, [pc, #68]	; (6e68 <zeroFS_class::ListAll()+0xc8>)
    6e24:	add	lr, r6
    6e26:	ldr	r0, [pc, #60]	; (6e64 <zeroFS_class::ListAll()+0xc4>)
    6e28:	ldr	r3, [r3, #0]
    6e2a:	str.w	lr, [sp]
    6e2e:	bl	a610 <Print::printf(char const*, ...)>
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    6e32:	bl	8ba8 <usb_serial_flush_output>

    if(hdr.type==T_FILE) 
    6e36:	ldr	r3, [r5, #0]
    6e38:	cmp	r3, #3
    6e3a:	beq.n	6e48 <zeroFS_class::ListAll()+0xa8>
    { 
      if(hdr.next == 0xFFFFFFFFUL) sector++; else sector = hdr.next;
    }
    else
    { //increase hdr level up to file level
      sector++;
    6e3c:	adds	r7, #1
    }
    if(sector==0xFFFFFFFFUL) break;
    6e3e:	adds	r3, r7, #1
    6e40:	bne.n	6dba <zeroFS_class::ListAll()+0x1a>
//    if(sector==eof_sector) break; // end of data reached
  }
}
    6e42:	add	sp, #12
    6e44:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    Serial.printf("%x %x %x %x ",hdr.prev,hdr.sect,hdr.next,hdr.parent);
    Serial.printf("%d %x %s\n",hdr.type,hdr.size,hdr.name); Serial.flush();

    if(hdr.type==T_FILE) 
    { 
      if(hdr.next == 0xFFFFFFFFUL) sector++; else sector = hdr.next;
    6e48:	ldr	r3, [r4, #0]
    6e4a:	adds	r2, r3, #1
    6e4c:	beq.n	6e3c <zeroFS_class::ListAll()+0x9c>
    6e4e:	mov	r7, r3
    6e50:	b.n	6dba <zeroFS_class::ListAll()+0x1a>
  uint32_t sector = root_sector;
  while(1)
  {
    BYTE* buff = (BYTE *) &hdr;
    UINT count = 1;
    if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("ListAll ",res);
    6e52:	mov	r1, r0
    6e54:	ldr	r0, [pc, #20]	; (6e6c <zeroFS_class::ListAll()+0xcc>)
    6e56:	bl	6860 <die(char const*, DRESULT)>
    6e5a:	nop
    6e5c:	.word	0x20000c60
    6e60:	.word	0x20000b90
    6e64:	.word	0x20001228
    6e68:	.word	0x20000ba0
    6e6c:	.word	0x20000c54
    6e70:	.word	0x6f72657a

00006e74 <zeroFS_class::Count(unsigned long)>:
/*********************** for MTP **********************/

uint32_t zeroFS_class::Count(uint32_t parent)
{
  DWORD sector;
  sector = (parent == 0xfffffffful)? root_sector: Index2Sector(parent)+1;
    6e74:	adds	r2, r1, #1
}

/*********************** for MTP **********************/

uint32_t zeroFS_class::Count(uint32_t parent)
{
    6e76:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  DWORD sector;
  sector = (parent == 0xfffffffful)? root_sector: Index2Sector(parent)+1;
    6e7a:	ite	eq
    6e7c:	ldreq	r4, [r0, #0]
    6e7e:	addne	r4, r1, #1
    6e80:	movw	r5, #8264	; 0x2048
    while(1)
    { // search all entries with same parent
      BYTE* buff = (BYTE *) &hdr;
      UINT count = 1;
      if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("count",sector,res);
      sector = hdr.next;
    6e84:	movw	r8, #8280	; 0x2058
}

/*********************** for MTP **********************/

uint32_t zeroFS_class::Count(uint32_t parent)
{
    6e88:	mov	r7, r0
  DWORD sector;
  sector = (parent == 0xfffffffful)? root_sector: Index2Sector(parent)+1;
  //
  read_sector = sector;
  uint32_t cnt=0;
    6e8a:	movs	r6, #0
    { // search all entries with same parent
      BYTE* buff = (BYTE *) &hdr;
      UINT count = 1;
      if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("count",sector,res);
      sector = hdr.next;
      if(hdr.magic != MAGIC) break;
    6e8c:	ldr.w	r9, [pc, #60]	; 6ecc <zeroFS_class::Count(unsigned long)+0x58>
    6e90:	add	r5, r0
    while(1)
    { // search all entries with same parent
      BYTE* buff = (BYTE *) &hdr;
      UINT count = 1;
      if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("count",sector,res);
      sector = hdr.next;
    6e92:	add	r8, r0
uint32_t zeroFS_class::Count(uint32_t parent)
{
  DWORD sector;
  sector = (parent == 0xfffffffful)? root_sector: Index2Sector(parent)+1;
  //
  read_sector = sector;
    6e94:	str	r4, [r0, #12]
    6e96:	b.n	6ea0 <zeroFS_class::Count(unsigned long)+0x2c>
      UINT count = 1;
      if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("count",sector,res);
      sector = hdr.next;
      if(hdr.magic != MAGIC) break;
      cnt++;      
      if(sector==0xFFFFFFFFUL) break; // end of list
    6e98:	adds	r3, r4, #1
      BYTE* buff = (BYTE *) &hdr;
      UINT count = 1;
      if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("count",sector,res);
      sector = hdr.next;
      if(hdr.magic != MAGIC) break;
      cnt++;      
    6e9a:	add.w	r6, r6, #1
      if(sector==0xFFFFFFFFUL) break; // end of list
    6e9e:	beq.n	6eb8 <zeroFS_class::Count(unsigned long)+0x44>
  uint32_t cnt=0;
    while(1)
    { // search all entries with same parent
      BYTE* buff = (BYTE *) &hdr;
      UINT count = 1;
      if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("count",sector,res);
    6ea0:	movs	r3, #1
    6ea2:	mov	r2, r4
    6ea4:	mov	r1, r5
    6ea6:	ldrb	r0, [r7, #28]
    6ea8:	bl	7004 <disk_read>
    6eac:	cbnz	r0, 6ebe <zeroFS_class::Count(unsigned long)+0x4a>
      sector = hdr.next;
      if(hdr.magic != MAGIC) break;
    6eae:	ldr	r3, [r5, #0]
    while(1)
    { // search all entries with same parent
      BYTE* buff = (BYTE *) &hdr;
      UINT count = 1;
      if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("count",sector,res);
      sector = hdr.next;
    6eb0:	ldr.w	r4, [r8]
      if(hdr.magic != MAGIC) break;
    6eb4:	cmp	r3, r9
    6eb6:	beq.n	6e98 <zeroFS_class::Count(unsigned long)+0x24>
      cnt++;      
      if(sector==0xFFFFFFFFUL) break; // end of list
//      if(sector==eof_sector) break; // end of data reached
    }
    return cnt;
}
    6eb8:	mov	r0, r6
    6eba:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  uint32_t cnt=0;
    while(1)
    { // search all entries with same parent
      BYTE* buff = (BYTE *) &hdr;
      UINT count = 1;
      if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("count",sector,res);
    6ebe:	mov	r2, r0
    6ec0:	mov	r1, r4
    6ec2:	ldr	r0, [pc, #4]	; (6ec8 <zeroFS_class::Count(unsigned long)+0x54>)
    6ec4:	bl	688c <die(char const*, unsigned long, DRESULT)>
    6ec8:	.word	0x20000c78
    6ecc:	.word	0x6f72657a

00006ed0 <zeroFS_class::Next()>:
//      if(sector==eof_sector) break; // end of data reached
    }
    return cnt;
}
uint32_t zeroFS_class::Next(void)
{
    6ed0:	push	{r3, r4, r5, lr}
  //uint32_t old_type=0;
  uint32_t sector = read_sector;
    6ed2:	ldr	r5, [r0, #12]
  if(sector==0xFFFFFFFFUL) return 0;
    6ed4:	adds	r3, r5, #1
    6ed6:	beq.n	6efc <zeroFS_class::Next()+0x2c>
    6ed8:	mov	r4, r0
//  if(sector==eof_sector) return 0;

  BYTE* buff = (BYTE *) &hdr;
  UINT count = 1;
  
  if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("next",sector,res);
    6eda:	movw	r1, #8264	; 0x2048
    6ede:	movs	r3, #1
    6ee0:	mov	r2, r5
    6ee2:	ldrb	r0, [r0, #28]
    6ee4:	add	r1, r4
    6ee6:	bl	7004 <disk_read>
    6eea:	cbnz	r0, 6f00 <zeroFS_class::Next()+0x30>
  
  read_sector = hdr.next;
    6eec:	movw	r3, #8280	; 0x2058
  uint32_t index = Sector2Index(hdr.sect);
    6ef0:	movw	r2, #8272	; 0x2050
  BYTE* buff = (BYTE *) &hdr;
  UINT count = 1;
  
  if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("next",sector,res);
  
  read_sector = hdr.next;
    6ef4:	ldr	r3, [r4, r3]
  uint32_t index = Sector2Index(hdr.sect);
    6ef6:	ldr	r0, [r4, r2]
  BYTE* buff = (BYTE *) &hdr;
  UINT count = 1;
  
  if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("next",sector,res);
  
  read_sector = hdr.next;
    6ef8:	str	r3, [r4, #12]
  uint32_t index = Sector2Index(hdr.sect);
  return index;
    6efa:	pop	{r3, r4, r5, pc}
}
uint32_t zeroFS_class::Next(void)
{
  //uint32_t old_type=0;
  uint32_t sector = read_sector;
  if(sector==0xFFFFFFFFUL) return 0;
    6efc:	movs	r0, #0
  if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("next",sector,res);
  
  read_sector = hdr.next;
  uint32_t index = Sector2Index(hdr.sect);
  return index;
}
    6efe:	pop	{r3, r4, r5, pc}
//  if(sector==eof_sector) return 0;

  BYTE* buff = (BYTE *) &hdr;
  UINT count = 1;
  
  if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("next",sector,res);
    6f00:	mov	r2, r0
    6f02:	mov	r1, r5
    6f04:	ldr	r0, [pc, #4]	; (6f0c <zeroFS_class::Next()+0x3c>)
    6f06:	bl	688c <die(char const*, unsigned long, DRESULT)>
    6f0a:	nop
    6f0c:	.word	0x20000c80

00006f10 <zeroFS_class::Info(unsigned long, char*, unsigned long*, unsigned long*)>:
  uint32_t index = Sector2Index(hdr.sect);
  return index;
}

uint32_t zeroFS_class::Info(uint32_t handle, char *filename, uint32_t *size, uint32_t *parent)
{
    6f10:	push	{r4, r5, r6, lr}
    6f12:	mov	r4, r0
    6f14:	mov	r6, r2
  uint32_t sector = Index2Sector(handle);
//  if(sector==eof_sector) return 0;

    BYTE* buff = (BYTE *) &hdr;
    UINT count = 1;
    if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read5",res);
    6f16:	mov	r2, r1
    6f18:	movw	r1, #8264	; 0x2048
  uint32_t index = Sector2Index(hdr.sect);
  return index;
}

uint32_t zeroFS_class::Info(uint32_t handle, char *filename, uint32_t *size, uint32_t *parent)
{
    6f1c:	mov	r5, r3
  uint32_t sector = Index2Sector(handle);
//  if(sector==eof_sector) return 0;

    BYTE* buff = (BYTE *) &hdr;
    UINT count = 1;
    if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read5",res);
    6f1e:	ldrb	r0, [r0, #28]
    6f20:	add	r1, r4
    6f22:	movs	r3, #1
    6f24:	bl	7004 <disk_read>
    6f28:	cbnz	r0, 6f62 <zeroFS_class::Info(unsigned long, char*, unsigned long*, unsigned long*)+0x52>

    strcpy(filename,hdr.name);
    6f2a:	movw	r1, #8304	; 0x2070
    6f2e:	mov	r0, r6
    6f30:	add	r1, r4
    6f32:	bl	c138 <strcpy>
    *size = (hdr.type==T_FILE)? 512*hdr.size : 0xFFFFFFFFUL;
    6f36:	movw	r3, #8268	; 0x204c
    6f3a:	ldr	r3, [r4, r3]
    6f3c:	cmp	r3, #3
    6f3e:	beq.n	6f58 <zeroFS_class::Info(unsigned long, char*, unsigned long*, unsigned long*)+0x48>
    6f40:	mov.w	r3, #4294967295
    *parent=Sector2Index(hdr.parent);
    6f44:	movw	r2, #8284	; 0x205c
    BYTE* buff = (BYTE *) &hdr;
    UINT count = 1;
    if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read5",res);

    strcpy(filename,hdr.name);
    *size = (hdr.type==T_FILE)? 512*hdr.size : 0xFFFFFFFFUL;
    6f48:	str	r3, [r5, #0]
    *parent=Sector2Index(hdr.parent);
    6f4a:	ldr	r1, [sp, #16]
    return Sector2Index(hdr.sect);
    6f4c:	movw	r3, #8272	; 0x2050
    UINT count = 1;
    if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read5",res);

    strcpy(filename,hdr.name);
    *size = (hdr.type==T_FILE)? 512*hdr.size : 0xFFFFFFFFUL;
    *parent=Sector2Index(hdr.parent);
    6f50:	ldr	r2, [r4, r2]
    6f52:	str	r2, [r1, #0]
    return Sector2Index(hdr.sect);
}
    6f54:	ldr	r0, [r4, r3]
    6f56:	pop	{r4, r5, r6, pc}
    BYTE* buff = (BYTE *) &hdr;
    UINT count = 1;
    if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read5",res);

    strcpy(filename,hdr.name);
    *size = (hdr.type==T_FILE)? 512*hdr.size : 0xFFFFFFFFUL;
    6f58:	movw	r3, #8288	; 0x2060
    6f5c:	ldr	r3, [r4, r3]
    6f5e:	lsls	r3, r3, #9
    6f60:	b.n	6f44 <zeroFS_class::Info(unsigned long, char*, unsigned long*, unsigned long*)+0x34>
  uint32_t sector = Index2Sector(handle);
//  if(sector==eof_sector) return 0;

    BYTE* buff = (BYTE *) &hdr;
    UINT count = 1;
    if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read5",res);
    6f62:	mov	r1, r0
    6f64:	ldr	r0, [pc, #4]	; (6f6c <zeroFS_class::Info(unsigned long, char*, unsigned long*, unsigned long*)+0x5c>)
    6f66:	bl	6860 <die(char const*, DRESULT)>
    6f6a:	nop
    6f6c:	.word	0x20000c88

00006f70 <zeroFS_class::GetSize(unsigned long)>:
    *parent=Sector2Index(hdr.parent);
    return Sector2Index(hdr.sect);
}

  uint32_t zeroFS_class::GetSize(uint32_t handle) 
  {
    6f70:	push	{r4, lr}
    uint32_t sector=Index2Sector(handle);
    BYTE* buff = (BYTE *) &hdr;
    UINT count = 1;
    if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read6",res);
    6f72:	mov	r2, r1
    *parent=Sector2Index(hdr.parent);
    return Sector2Index(hdr.sect);
}

  uint32_t zeroFS_class::GetSize(uint32_t handle) 
  {
    6f74:	mov	r4, r0
    uint32_t sector=Index2Sector(handle);
    BYTE* buff = (BYTE *) &hdr;
    UINT count = 1;
    if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read6",res);
    6f76:	movw	r1, #8264	; 0x2048
    6f7a:	movs	r3, #1
    6f7c:	ldrb	r0, [r0, #28]
    6f7e:	add	r1, r4
    6f80:	bl	7004 <disk_read>
    6f84:	cbnz	r0, 6fa0 <zeroFS_class::GetSize(unsigned long)+0x30>
    return (hdr.type==T_FILE)? 512*hdr.size : 0xFFFFFFFFUL;
    6f86:	movw	r3, #8268	; 0x204c
    6f8a:	ldr	r3, [r4, r3]
    6f8c:	cmp	r3, #3
    6f8e:	beq.n	6f96 <zeroFS_class::GetSize(unsigned long)+0x26>
    6f90:	mov.w	r0, #4294967295
  }
    6f94:	pop	{r4, pc}
  {
    uint32_t sector=Index2Sector(handle);
    BYTE* buff = (BYTE *) &hdr;
    UINT count = 1;
    if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read6",res);
    return (hdr.type==T_FILE)? 512*hdr.size : 0xFFFFFFFFUL;
    6f96:	movw	r3, #8288	; 0x2060
    6f9a:	ldr	r0, [r4, r3]
    6f9c:	lsls	r0, r0, #9
    6f9e:	pop	{r4, pc}
  uint32_t zeroFS_class::GetSize(uint32_t handle) 
  {
    uint32_t sector=Index2Sector(handle);
    BYTE* buff = (BYTE *) &hdr;
    UINT count = 1;
    if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read6",res);
    6fa0:	mov	r1, r0
    6fa2:	ldr	r0, [pc, #4]	; (6fa8 <zeroFS_class::GetSize(unsigned long)+0x38>)
    6fa4:	bl	6860 <die(char const*, DRESULT)>
    6fa8:	.word	0x20000c90

00006fac <zeroFS_class::Read(unsigned long, char*, unsigned long)>:
    // keep sector number for next call
    old_sector=sector;
  }

  uint32_t zeroFS_class::Read(uint32_t sector, char* out, uint32_t count) 
  { if(DRESULT res = disk_read (pdrv, (BYTE*)out, sector, count)) die("read_",res);
    6fac:	push	{r3, r4, r5, lr}
    6fae:	mov	r4, r1
    6fb0:	ldrb	r0, [r0, #28]
    6fb2:	mov	r1, r2
    6fb4:	mov	r5, r3
    6fb6:	mov	r2, r4
    6fb8:	bl	7004 <disk_read>
    6fbc:	cbnz	r0, 6fc2 <zeroFS_class::Read(unsigned long, char*, unsigned long)+0x16>
    return sector+count;
    6fbe:	adds	r0, r4, r5
    6fc0:	pop	{r3, r4, r5, pc}
    // keep sector number for next call
    old_sector=sector;
  }

  uint32_t zeroFS_class::Read(uint32_t sector, char* out, uint32_t count) 
  { if(DRESULT res = disk_read (pdrv, (BYTE*)out, sector, count)) die("read_",res);
    6fc2:	mov	r1, r0
    6fc4:	ldr	r0, [pc, #4]	; (6fcc <zeroFS_class::Read(unsigned long, char*, unsigned long)+0x20>)
    6fc6:	bl	6860 <die(char const*, DRESULT)>
    6fca:	nop
    6fcc:	.word	0x20000ca8

00006fd0 <disk_initialize>:
)
{
	DSTATUS stat=STA_NOINIT;
	int result;

	switch (pdrv) {
    6fd0:	cmp	r0, #1
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
    6fd2:	push	{r3, lr}
	DSTATUS stat=STA_NOINIT;
	int result;

	switch (pdrv) {
    6fd4:	beq.n	6ff6 <disk_initialize+0x26>
    6fd6:	bcc.n	6fea <disk_initialize+0x1a>
    6fd8:	cmp	r0, #2
    6fda:	bne.n	6fe6 <disk_initialize+0x16>
		if(result==RES_OK) stat=0; else stat=STA_NODISK;

		return stat;

	case DEV_MSC :
		result = MSC_disk_initialize();
    6fdc:	bl	83a4 <MSC_disk_initialize>

		// translate the reslut code here
		if(result==RES_OK) stat=0; else stat=STA_NODISK;
    6fe0:	cbz	r0, 6ff2 <disk_initialize+0x22>
	switch (pdrv) {
	case DEV_SPI :

		result = SPI_disk_initialize();
		// translate the reslut code here
		if(result==RES_OK) stat=0; else stat=STA_NODISK;
    6fe2:	movs	r0, #2
    6fe4:	pop	{r3, pc}
		// translate the reslut code here
		if(result==RES_OK) stat=0; else stat=STA_NODISK;

		return stat;
	}
	return STA_NOINIT;
    6fe6:	movs	r0, #1
}
    6fe8:	pop	{r3, pc}
	int result;

	switch (pdrv) {
	case DEV_SPI :

		result = SPI_disk_initialize();
    6fea:	bl	8384 <SPI_disk_initialize()>
		// translate the reslut code here
		if(result==RES_OK) stat=0; else stat=STA_NODISK;
    6fee:	cmp	r0, #0
    6ff0:	bne.n	6fe2 <disk_initialize+0x12>
    6ff2:	movs	r0, #0
    6ff4:	pop	{r3, pc}

		return stat;

	case DEV_SDHC :
		result = SDHC_disk_initialize();
    6ff6:	bl	762c <SDHC_disk_initialize>

		// translate the reslut code here
		if(result==RES_OK) stat=0; else stat=STA_NODISK;
    6ffa:	cmp	r0, #0
    6ffc:	beq.n	6ff2 <disk_initialize+0x22>
	switch (pdrv) {
	case DEV_SPI :

		result = SPI_disk_initialize();
		// translate the reslut code here
		if(result==RES_OK) stat=0; else stat=STA_NODISK;
    6ffe:	movs	r0, #2
    7000:	pop	{r3, pc}
    7002:	nop

00007004 <disk_read>:
	UINT count		/* Number of sectors to read */
)
{
	DRESULT res=RES_OK;
	int result=0;
	switch (pdrv) {
    7004:	cmp	r0, #1
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	/* Start sector in LBA */
	UINT count		/* Number of sectors to read */
)
{
    7006:	push	{r4, lr}
    7008:	mov	r4, r1
    700a:	mov	r1, r2
	DRESULT res=RES_OK;
	int result=0;
	switch (pdrv) {
    700c:	beq.n	7036 <disk_read+0x32>
    700e:	bcc.n	7026 <disk_read+0x22>
    7010:	cmp	r0, #2
    7012:	bne.n	7022 <disk_read+0x1e>
		return res;

	case DEV_MSC :
		// translate the arguments here

		result = MSC_disk_read(buff, sector, count);
    7014:	mov	r2, r3
    7016:	mov	r0, r4
    7018:	bl	83a8 <MSC_disk_read>
		// translate the reslut code here
		if(result==0) res=RES_OK; else res=RES_READERROR;
    701c:	cbz	r0, 7032 <disk_read+0x2e>
	switch (pdrv) {
	case DEV_SPI :
  
		result = SPI_disk_read(buff, sector, count);
		// translate the reslut code here
 	    if(result==0) res=RES_OK; else res=RES_READERROR;
    701e:	movs	r0, #6
    7020:	pop	{r4, pc}

		return res;

	}

	return RES_PARERR;
    7022:	movs	r0, #4
}
    7024:	pop	{r4, pc}
	DRESULT res=RES_OK;
	int result=0;
	switch (pdrv) {
	case DEV_SPI :
  
		result = SPI_disk_read(buff, sector, count);
    7026:	mov	r2, r3
    7028:	mov	r0, r4
    702a:	bl	7f08 <SPI_disk_read(unsigned char*, unsigned long, unsigned int)>
		// translate the reslut code here
 	    if(result==0) res=RES_OK; else res=RES_READERROR;
    702e:	cmp	r0, #0
    7030:	bne.n	701e <disk_read+0x1a>
    7032:	movs	r0, #0
    7034:	pop	{r4, pc}
		return res;

	case DEV_SDHC :
		// translate the arguments here

		result = SDHC_disk_read(buff, sector, count);
    7036:	mov	r2, r3
    7038:	mov	r0, r4
    703a:	bl	7744 <SDHC_disk_read>
		// translate the reslut code here
		if(result==0) res=RES_OK; else res=RES_READERROR;
    703e:	cmp	r0, #0
    7040:	beq.n	7032 <disk_read+0x2e>
	switch (pdrv) {
	case DEV_SPI :
  
		result = SPI_disk_read(buff, sector, count);
		// translate the reslut code here
 	    if(result==0) res=RES_OK; else res=RES_READERROR;
    7042:	movs	r0, #6
    7044:	pop	{r4, pc}
    7046:	nop

00007048 <disk_write>:
)
{
	DRESULT res=RES_OK;
	int result;

	switch (pdrv) {
    7048:	cmp	r0, #1
	BYTE pdrv,			/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Start sector in LBA */
	UINT count			/* Number of sectors to write */
)
{
    704a:	push	{r4, lr}
    704c:	mov	r4, r1
    704e:	mov	r1, r2
	DRESULT res=RES_OK;
	int result;

	switch (pdrv) {
    7050:	beq.n	707a <disk_write+0x32>
    7052:	bcc.n	706a <disk_write+0x22>
    7054:	cmp	r0, #2
    7056:	bne.n	7066 <disk_write+0x1e>
		return res;

	case DEV_MSC :
		// translate the arguments here

		result = MSC_disk_write(buff, sector, count);
    7058:	mov	r2, r3
    705a:	mov	r0, r4
    705c:	bl	83ac <MSC_disk_write>
		// translate the reslut code here
		if(result==0) res=RES_OK; else res=RES_WRITEERROR;
    7060:	cbz	r0, 7076 <disk_write+0x2e>
	case DEV_SPI :
		// translate the arguments here

		result = SPI_disk_write(buff, sector, count);
		// translate the reslut code here
		if(result==0) res=RES_OK; else res=RES_WRITEERROR;
    7062:	movs	r0, #7
    7064:	pop	{r4, pc}
		if(result==0) res=RES_OK; else res=RES_WRITEERROR;

		return res;
	}

	return RES_PARERR;
    7066:	movs	r0, #4
}
    7068:	pop	{r4, pc}

	switch (pdrv) {
	case DEV_SPI :
		// translate the arguments here

		result = SPI_disk_write(buff, sector, count);
    706a:	mov	r2, r3
    706c:	mov	r0, r4
    706e:	bl	8198 <SPI_disk_write(unsigned char const*, unsigned long, unsigned int)>
		// translate the reslut code here
		if(result==0) res=RES_OK; else res=RES_WRITEERROR;
    7072:	cmp	r0, #0
    7074:	bne.n	7062 <disk_write+0x1a>
    7076:	movs	r0, #0
    7078:	pop	{r4, pc}
		return res;

	case DEV_SDHC :
		// translate the arguments here

		result = SDHC_disk_write(buff, sector, count);
    707a:	mov	r2, r3
    707c:	mov	r0, r4
    707e:	bl	78b8 <SDHC_disk_write>
		// translate the reslut code here
		if(result==0) res=RES_OK; else res=RES_WRITEERROR;
    7082:	cmp	r0, #0
    7084:	beq.n	7076 <disk_write+0x2e>
	case DEV_SPI :
		// translate the arguments here

		result = SPI_disk_write(buff, sector, count);
		// translate the reslut code here
		if(result==0) res=RES_OK; else res=RES_WRITEERROR;
    7086:	movs	r0, #7
    7088:	pop	{r4, pc}
    708a:	nop

0000708c <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
//	DRESULT res=RES_OK;

	switch (pdrv) {
    708c:	cmp	r0, #1
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    708e:	mov	r3, r1
//	DRESULT res=RES_OK;

	switch (pdrv) {
    7090:	beq.n	7098 <disk_ioctl+0xc>
    7092:	bcc.n	70a4 <disk_ioctl+0x18>
    7094:	cmp	r0, #2
    7096:	bne.n	70a0 <disk_ioctl+0x14>
		// Process of the command for the SDHC device

//		return res;

	case DEV_MSC :
		return SDHC_disk_ioctl(cmd,(BYTE*)buff);
    7098:	mov	r1, r2
    709a:	mov	r0, r3
    709c:	b.w	726c <SDHC_disk_ioctl>
//		return res;

		}

	return RES_PARERR;
}
    70a0:	movs	r0, #4
    70a2:	bx	lr
{
//	DRESULT res=RES_OK;

	switch (pdrv) {
	case DEV_SPI :
		return SPI_disk_ioctl(cmd,(BYTE*)buff);
    70a4:	mov	r1, r2
    70a6:	mov	r0, r3
    70a8:	b.w	796c <SPI_disk_ioctl(unsigned char, unsigned char*)>

000070ac <setSdclk(unsigned long)>:
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = 6; //CCM_CLKO2 (0 is USDHC1_DAT3)
  }
  
  static uint32_t sdClock()
  {
    uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    70ac:	ldr	r2, [pc, #152]	; (7148 <setSdclk(unsigned long)+0x9c>)
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000 * kHzMax;
    70ae:	mov.w	r1, #1000	; 0x3e8
  }
  
  static uint32_t sdClock()
  {
    uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    uint32_t PLL2PFD0 = (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    70b2:	ldr	r3, [pc, #152]	; (714c <setSdclk(unsigned long)+0xa0>)
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = 6; //CCM_CLKO2 (0 is USDHC1_DAT3)
  }
  
  static uint32_t sdClock()
  {
    uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    70b4:	ldr	r2, [r2, #36]	; 0x24
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000 * kHzMax;
    70b6:	mul.w	r0, r1, r0
  }
  
  static uint32_t sdClock()
  {
    uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    uint32_t PLL2PFD0 = (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    70ba:	ldr.w	r3, [r3, #256]	; 0x100
    70be:	ldr	r1, [pc, #144]	; (7150 <setSdclk(unsigned long)+0xa4>)
    70c0:	and.w	r3, r3, #63	; 0x3f
    70c4:	umull	r1, r3, r1, r3
    return PLL2PFD0;
  }

#endif

static void setSdclk(uint32_t kHzMax) {
    70c8:	push	{r4, r5, r6, r7}
  }
  
  static uint32_t sdClock()
  {
    uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    uint32_t PLL2PFD0 = (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    70ca:	lsrs	r3, r3, #2
    70cc:	ubfx	r4, r2, #11, #3
    70d0:	ldr	r2, [pc, #128]	; (7154 <setSdclk(unsigned long)+0xa8>)
    70d2:	adds	r4, #1
    70d4:	udiv	r3, r2, r3
    70d8:	udiv	r4, r3, r4
  uint32_t maxSdclk = 1000 * kHzMax;

  //  uint32_t f_pll = F_CPU;
  uint32_t f_pll = sdClock();

  while ((f_pll / (sdclkfs * DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    70dc:	cmp.w	r0, r4, lsr #4
    70e0:	bcs.n	713e <setSdclk(unsigned long)+0x92>
    70e2:	movs	r3, #1
    70e4:	b.n	70ea <setSdclk(unsigned long)+0x3e>
    70e6:	cmp	r3, #255	; 0xff
    70e8:	bhi.n	70f6 <setSdclk(unsigned long)+0x4a>
    sdclkfs <<= 1;
    70ea:	lsls	r3, r3, #1
  uint32_t maxSdclk = 1000 * kHzMax;

  //  uint32_t f_pll = F_CPU;
  uint32_t f_pll = sdClock();

  while ((f_pll / (sdclkfs * DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    70ec:	lsls	r2, r3, #4
    70ee:	udiv	r2, r4, r2
    70f2:	cmp	r0, r2
    70f4:	bcc.n	70e6 <setSdclk(unsigned long)+0x3a>
    70f6:	lsrs	r2, r3, #1
    70f8:	lsls	r7, r2, #8
    sdclkfs <<= 1;
  }
  while ((f_pll / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    70fa:	udiv	r2, r4, r3
    70fe:	cmp	r0, r2
    7100:	bcs.n	7144 <setSdclk(unsigned long)+0x98>
    7102:	lsls	r1, r3, #1
    7104:	movs	r2, #1
    dvs++;
    7106:	adds	r6, r2, #1
  uint32_t f_pll = sdClock();

  while ((f_pll / (sdclkfs * DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((f_pll / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    7108:	udiv	r5, r4, r1
    710c:	cmp	r0, r5
    710e:	add	r1, r3
    7110:	bcs.n	713a <setSdclk(unsigned long)+0x8e>
    7112:	cmp	r6, #16
    7114:	mov	r2, r6
    7116:	bne.n	7106 <setSdclk(unsigned long)+0x5a>
    7118:	movs	r3, #240	; 0xf0
    // Disable SDHC clock.
    SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
  #endif

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    711a:	ldr	r4, [pc, #60]	; (7158 <setSdclk(unsigned long)+0xac>)
                                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    711c:	ldr	r0, [pc, #60]	; (715c <setSdclk(unsigned long)+0xb0>)
    // Disable SDHC clock.
    SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
  #endif

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    711e:	ldr	r2, [r4, #44]	; 0x2c

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) { }
    7120:	mov	r1, r4
  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
                                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    7122:	ands	r0, r2
    7124:	orr.w	r0, r0, #917504	; 0xe0000
    7128:	orr.w	r2, r0, r7
    712c:	orrs	r2, r3
    712e:	str	r2, [r4, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) { }
    7130:	ldr	r3, [r1, #36]	; 0x24
    7132:	lsls	r3, r3, #28
    7134:	bpl.n	7130 <setSdclk(unsigned long)+0x84>

  #if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    // Enable the SDHC clock.
    SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
  #endif
}
    7136:	pop	{r4, r5, r6, r7}
    7138:	bx	lr
    713a:	lsls	r3, r2, #4
    713c:	b.n	711a <setSdclk(unsigned long)+0x6e>
  uint32_t maxSdclk = 1000 * kHzMax;

  //  uint32_t f_pll = F_CPU;
  uint32_t f_pll = sdClock();

  while ((f_pll / (sdclkfs * DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    713e:	movs	r7, #0

static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
    7140:	movs	r3, #1
    7142:	b.n	70fa <setSdclk(unsigned long)+0x4e>
  uint32_t f_pll = sdClock();

  while ((f_pll / (sdclkfs * DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((f_pll / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    7144:	movs	r3, #0
    7146:	b.n	711a <setSdclk(unsigned long)+0x6e>
    7148:	.word	0x400fc000
    714c:	.word	0x400d8000
    7150:	.word	0xaaaaaaab
    7154:	.word	0x5e69ec00
    7158:	.word	0x402c0000
    715c:	.word	0xfff0000f

00007160 <sd_isr()>:

static volatile uint32_t dmaDone=0;
//

void sd_isr(void)
{ SDHC_IRQSIGEN &= ~SDHC_IRQSIGEN_DMA_MASK;
    7160:	ldr	r3, [pc, #64]	; (71a4 <sd_isr()+0x44>)
    7162:	ldr	r2, [pc, #68]	; (71a8 <sd_isr()+0x48>)
    7164:	ldr	r0, [r3, #56]	; 0x38
  //
  while(!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC));//  SDHC_IRQSTAT &= ~SDHC_IRQSTAT_TC;
    7166:	mov	r1, r3

static volatile uint32_t dmaDone=0;
//

void sd_isr(void)
{ SDHC_IRQSIGEN &= ~SDHC_IRQSIGEN_DMA_MASK;
    7168:	ands	r2, r0
    716a:	str	r2, [r3, #56]	; 0x38
  //
  while(!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC));//  SDHC_IRQSTAT &= ~SDHC_IRQSTAT_TC;
    716c:	ldr	r3, [r1, #48]	; 0x30
    716e:	ldr	r2, [pc, #52]	; (71a4 <sd_isr()+0x44>)
    7170:	lsls	r0, r3, #30
    7172:	bpl.n	716c <sd_isr()+0xc>

  #if defined(__IMXRT1052__) || defined(__IMXRT1062__)
    SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN) ;  
    7174:	ldr	r3, [r2, #72]	; 0x48
    7176:	bic.w	r3, r3, #129	; 0x81
    717a:	str	r3, [r2, #72]	; 0x48
  #endif
  
  if(SDHC_SYSCTL & SDHC_SYSCTL_HCKEN) SDHC_SYSCTL &=  ~SDHC_SYSCTL_HCKEN;
    717c:	ldr	r3, [r2, #44]	; 0x2c
    717e:	lsls	r3, r3, #30
    7180:	bpl.n	718a <sd_isr()+0x2a>
    7182:	ldr	r3, [r2, #44]	; 0x2c
    7184:	bic.w	r3, r3, #2
    7188:	str	r3, [r2, #44]	; 0x2c
  SDHC_PROCTL &= ~SDHC_PROCTL_D3CD; SDHC_PROCTL |=  SDHC_PROCTL_D3CD;
    718a:	ldr	r3, [pc, #24]	; (71a4 <sd_isr()+0x44>)

  dmaDone=1;
    718c:	movs	r0, #1
    718e:	ldr	r1, [pc, #28]	; (71ac <sd_isr()+0x4c>)
  #if defined(__IMXRT1052__) || defined(__IMXRT1062__)
    SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN) ;  
  #endif
  
  if(SDHC_SYSCTL & SDHC_SYSCTL_HCKEN) SDHC_SYSCTL &=  ~SDHC_SYSCTL_HCKEN;
  SDHC_PROCTL &= ~SDHC_PROCTL_D3CD; SDHC_PROCTL |=  SDHC_PROCTL_D3CD;
    7190:	ldr	r2, [r3, #40]	; 0x28
    7192:	bic.w	r2, r2, #8
    7196:	str	r2, [r3, #40]	; 0x28
    7198:	ldr	r2, [r3, #40]	; 0x28
    719a:	orr.w	r2, r2, #8
    719e:	str	r2, [r3, #40]	; 0x28

  dmaDone=1;
    71a0:	str	r0, [r1, #0]
    71a2:	bx	lr
    71a4:	.word	0x402c0000
    71a8:	.word	0xeffffff5
    71ac:	.word	0x200041cc

000071b0 <sd_CMD(unsigned long, unsigned long)>:
/***************************** LOW Level SDHC interface ********************************/
// sends the command to SDcard
static int sd_CMD(uint32_t xfertyp, uint32_t arg)
{
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
    71b0:	ldr	r3, [pc, #80]	; (7204 <sd_CMD(unsigned long, unsigned long)+0x54>)
}

/***************************** LOW Level SDHC interface ********************************/
// sends the command to SDcard
static int sd_CMD(uint32_t xfertyp, uint32_t arg)
{
    71b2:	push	{r4, r5, r6}
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
    71b4:	ldr	r4, [r3, #48]	; 0x30

  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB));
    71b6:	mov	r2, r3
    71b8:	mov	r6, r3
/***************************** LOW Level SDHC interface ********************************/
// sends the command to SDcard
static int sd_CMD(uint32_t xfertyp, uint32_t arg)
{
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
    71ba:	orr.w	r4, r4, #128	; 0x80
    71be:	str	r4, [r3, #48]	; 0x30

  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB));
    71c0:	ldr	r3, [r2, #36]	; 0x24
    71c2:	ldr	r5, [pc, #64]	; (7204 <sd_CMD(unsigned long, unsigned long)+0x54>)
    71c4:	lsls	r4, r3, #31
    71c6:	bmi.n	71c0 <sd_CMD(unsigned long, unsigned long)+0x10>
    71c8:	ldr	r3, [r6, #36]	; 0x24
    71ca:	lsls	r3, r3, #30
    71cc:	bmi.n	71c0 <sd_CMD(unsigned long, unsigned long)+0x10>

  // send command
  SDHC_CMDARG = arg;
    71ce:	str	r1, [r5, #8]
static uint32_t sd_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
  do
  { result = SDHC_IRQSTAT & mask;
    71d0:	mov	r4, r5
  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB));

  // send command
  SDHC_CMDARG = arg;
  SDHC_XFERTYP = xfertyp;
    71d2:	str	r0, [r5, #12]
******************************************************************************/
// waits for status bits sets
static uint32_t sd_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
    71d4:	mov.w	r2, #16777216	; 0x1000000
    71d8:	b.n	71dc <sd_CMD(unsigned long, unsigned long)+0x2c>
  do
  { result = SDHC_IRQSTAT & mask;
    timeout--;
  } while (!result && (timeout));
    71da:	cbz	r2, 71ee <sd_CMD(unsigned long, unsigned long)+0x3e>
static uint32_t sd_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
  do
  { result = SDHC_IRQSTAT & mask;
    71dc:	ldr	r1, [r4, #48]	; 0x30
    timeout--;
    71de:	subs	r2, #1
static uint32_t sd_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
  do
  { result = SDHC_IRQSTAT & mask;
    71e0:	ldr	r3, [pc, #36]	; (7208 <sd_CMD(unsigned long, unsigned long)+0x58>)
    71e2:	ands	r3, r1
    timeout--;
  } while (!result && (timeout));
    71e4:	cmp	r3, #0
    71e6:	beq.n	71da <sd_CMD(unsigned long, unsigned long)+0x2a>
  if (timeout) return result;
    71e8:	cbz	r2, 71ee <sd_CMD(unsigned long, unsigned long)+0x3e>
  SDHC_CMDARG = arg;
  SDHC_XFERTYP = xfertyp;

  /* Wait for response */
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (sd_WaitStatus(mask) != SDHC_IRQSTAT_CC)
    71ea:	cmp	r3, #1
    71ec:	beq.n	71fe <sd_CMD(unsigned long, unsigned long)+0x4e>
  { SDHC_IRQSTAT |= mask;
    71ee:	ldr	r2, [pc, #20]	; (7204 <sd_CMD(unsigned long, unsigned long)+0x54>)
    return SDHC_RESULT_ERROR;
    71f0:	movs	r0, #1
  SDHC_XFERTYP = xfertyp;

  /* Wait for response */
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (sd_WaitStatus(mask) != SDHC_IRQSTAT_CC)
  { SDHC_IRQSTAT |= mask;
    71f2:	ldr	r3, [pc, #20]	; (7208 <sd_CMD(unsigned long, unsigned long)+0x58>)
    71f4:	ldr	r1, [r2, #48]	; 0x30
    71f6:	orrs	r3, r1
    return SDHC_RESULT_NO_RESPONSE;
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;

  return SDHC_RESULT_OK;
}
    71f8:	pop	{r4, r5, r6}
  SDHC_XFERTYP = xfertyp;

  /* Wait for response */
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (sd_WaitStatus(mask) != SDHC_IRQSTAT_CC)
  { SDHC_IRQSTAT |= mask;
    71fa:	str	r3, [r2, #48]	; 0x30
    return SDHC_RESULT_NO_RESPONSE;
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;

  return SDHC_RESULT_OK;
}
    71fc:	bx	lr
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (sd_WaitStatus(mask) != SDHC_IRQSTAT_CC)
  { SDHC_IRQSTAT |= mask;
    return SDHC_RESULT_ERROR;
  }
  return SDHC_RESULT_OK;
    71fe:	movs	r0, #0
    return SDHC_RESULT_NO_RESPONSE;
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;

  return SDHC_RESULT_OK;
}
    7200:	pop	{r4, r5, r6}
    7202:	bx	lr
    7204:	.word	0x402c0000
    7208:	.word	0x000e0001

0000720c <sd_ACMD(unsigned long, unsigned long, unsigned long)>:
// send CMD 55 Application specific command
#define SDHC_CMD55_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD55) | SDHC_XFERTYP_CICEN | \
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48))

static int sd_ACMD(uint32_t xfertyp, uint32_t arg1, uint32_t arg2)
{
    720c:	push	{r3, r4, r5, lr}
    720e:	mov	r4, r0
  int result =sd_CMD(SDHC_CMD55_XFERTYP,arg1);
    7210:	ldr	r0, [pc, #20]	; (7228 <sd_ACMD(unsigned long, unsigned long, unsigned long)+0x1c>)
// send CMD 55 Application specific command
#define SDHC_CMD55_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD55) | SDHC_XFERTYP_CICEN | \
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48))

static int sd_ACMD(uint32_t xfertyp, uint32_t arg1, uint32_t arg2)
{
    7212:	mov	r5, r2
  int result =sd_CMD(SDHC_CMD55_XFERTYP,arg1);
    7214:	bl	71b0 <sd_CMD(unsigned long, unsigned long)>
  if(!(result == SDHC_RESULT_OK)) return result;
    7218:	cbz	r0, 721c <sd_ACMD(unsigned long, unsigned long, unsigned long)+0x10>
  return sd_CMD(xfertyp,arg2);
}
    721a:	pop	{r3, r4, r5, pc}

static int sd_ACMD(uint32_t xfertyp, uint32_t arg1, uint32_t arg2)
{
  int result =sd_CMD(SDHC_CMD55_XFERTYP,arg1);
  if(!(result == SDHC_RESULT_OK)) return result;
  return sd_CMD(xfertyp,arg2);
    721c:	mov	r1, r5
    721e:	mov	r0, r4
}
    7220:	ldmia.w	sp!, {r3, r4, r5, lr}

static int sd_ACMD(uint32_t xfertyp, uint32_t arg1, uint32_t arg2)
{
  int result =sd_CMD(SDHC_CMD55_XFERTYP,arg1);
  if(!(result == SDHC_RESULT_OK)) return result;
  return sd_CMD(xfertyp,arg2);
    7224:	b.w	71b0 <sd_CMD(unsigned long, unsigned long)>
    7228:	.word	0x371a0000

0000722c <sd_CMD12_StopTransferWaitForBusy()>:
//
static int sd_CMD12_StopTransfer(void){  return sd_CMD(SDHC_CMD12_XFERTYP, 0);}

// ---------- sends CMD12 to stop transfer and first waits to ready SDCard
static int sd_CMD12_StopTransferWaitForBusy(void)
{
    722c:	push	{r3, r4, r5, lr}

// ---------- sends CMD12 to stop transfer
#define SDHC_CMD12_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) | \
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY))
//
static int sd_CMD12_StopTransfer(void){  return sd_CMD(SDHC_CMD12_XFERTYP, 0);}
    722e:	movs	r1, #0
    7230:	ldr	r0, [pc, #48]	; (7264 <sd_CMD12_StopTransferWaitForBusy()+0x38>)
    7232:	bl	71b0 <sd_CMD(unsigned long, unsigned long)>
{
  uint32_t timeOut = 1000;
  int result;
  do 
  { result = sd_CMD12_StopTransfer();
    timeOut--;
    7236:	movw	r4, #999	; 0x3e7

// ---------- sends CMD12 to stop transfer
#define SDHC_CMD12_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) | \
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY))
//
static int sd_CMD12_StopTransfer(void){  return sd_CMD(SDHC_CMD12_XFERTYP, 0);}
    723a:	mov	r3, r0
  uint32_t timeOut = 1000;
  int result;
  do 
  { result = sd_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    723c:	ldr	r5, [pc, #40]	; (7268 <sd_CMD12_StopTransferWaitForBusy()+0x3c>)
    723e:	b.n	724c <sd_CMD12_StopTransferWaitForBusy()+0x20>
    7240:	cbnz	r3, 7256 <sd_CMD12_StopTransferWaitForBusy()+0x2a>

// ---------- sends CMD12 to stop transfer
#define SDHC_CMD12_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) | \
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY))
//
static int sd_CMD12_StopTransfer(void){  return sd_CMD(SDHC_CMD12_XFERTYP, 0);}
    7242:	bl	71b0 <sd_CMD(unsigned long, unsigned long)>
  uint32_t timeOut = 1000;
  int result;
  do 
  { result = sd_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    7246:	subs	r4, #1

// ---------- sends CMD12 to stop transfer
#define SDHC_CMD12_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) | \
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY))
//
static int sd_CMD12_StopTransfer(void){  return sd_CMD(SDHC_CMD12_XFERTYP, 0);}
    7248:	mov	r3, r0
  uint32_t timeOut = 1000;
  int result;
  do 
  { result = sd_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    724a:	beq.n	725a <sd_CMD12_StopTransferWaitForBusy()+0x2e>
    724c:	ldr	r2, [r5, #36]	; 0x24

// ---------- sends CMD12 to stop transfer
#define SDHC_CMD12_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) | \
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY))
//
static int sd_CMD12_StopTransfer(void){  return sd_CMD(SDHC_CMD12_XFERTYP, 0);}
    724e:	movs	r1, #0
    7250:	ldr	r0, [pc, #16]	; (7264 <sd_CMD12_StopTransferWaitForBusy()+0x38>)
  uint32_t timeOut = 1000;
  int result;
  do 
  { result = sd_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    7252:	lsls	r2, r2, #29
    7254:	bmi.n	7240 <sd_CMD12_StopTransferWaitForBusy()+0x14>
  
  if (result != SDHC_RESULT_OK)  return result;
  if (!timeOut)  return SDHC_RESULT_NO_RESPONSE;

  return SDHC_RESULT_OK;
}
    7256:	mov	r0, r3
    7258:	pop	{r3, r4, r5, pc}
  { result = sd_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
  
  if (result != SDHC_RESULT_OK)  return result;
  if (!timeOut)  return SDHC_RESULT_NO_RESPONSE;
    725a:	cmp	r0, #0
    725c:	it	eq
    725e:	moveq	r3, #5

  return SDHC_RESULT_OK;
}
    7260:	mov	r0, r3
    7262:	pop	{r3, r4, r5, pc}
    7264:	.word	0x0cdb0000
    7268:	.word	0x402c0000

0000726c <SDHC_disk_ioctl>:
{	return (DRESULT) sd_CardWriteBlocks((void *) buff, (uint32_t) sector, (uint32_t) count);
}

DRESULT SDHC_disk_ioctl(BYTE cmd, BYTE *buff)
{   return RES_OK;
}
    726c:	movs	r0, #0
    726e:	bx	lr

00007270 <sd_CardInit()>:
  }
  
  static void initClock()
  {
    /* set PDF_528 PLL2PFD0 */
    CCM_ANALOG_PFD_528 |= (1 << 7);
    7270:	ldr	r2, [pc, #408]	; (740c <sd_CardInit()+0x19c>)
    CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0); // 12 - 35
    CCM_ANALOG_PFD_528 &= ~(1 << 7);
  
    /* Enable USDHC clock. */
    CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    7272:	ldr	r3, [pc, #412]	; (7410 <sd_CardInit()+0x1a0>)
  }
  
  static void initClock()
  {
    /* set PDF_528 PLL2PFD0 */
    CCM_ANALOG_PFD_528 |= (1 << 7);
    7274:	ldr.w	r0, [r2, #256]	; 0x100
    CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((7)); // &0x7
  
    // for testing
    CCM_CCOSR = CCM_CCOSR_CLKO1_EN | CCM_CCOSR_CLKO1_DIV(7) | CCM_CCOSR_CLKO1_SEL(1); //(1: SYS_PLL/2)
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 6; //CCM_CLKO1 (0 is USDHC1_DAT2)
    7278:	ldr	r1, [pc, #408]	; (7414 <sd_CardInit()+0x1a4>)
  }
  
  static void initClock()
  {
    /* set PDF_528 PLL2PFD0 */
    CCM_ANALOG_PFD_528 |= (1 << 7);
    727a:	orr.w	r0, r0, #128	; 0x80

//-----------------------------------------------------------------------------
// initialize the SDHC Controller and SD Card
// returns status of initialization(OK, nonInit, noCard, CardProtected)
uint8_t sd_CardInit(void)
{
    727e:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }
  
  static void initClock()
  {
    /* set PDF_528 PLL2PFD0 */
    CCM_ANALOG_PFD_528 |= (1 << 7);
    7282:	str.w	r0, [r2, #256]	; 0x100
    CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((7)); // &0x7
  
    // for testing
    CCM_CCOSR = CCM_CCOSR_CLKO1_EN | CCM_CCOSR_CLKO1_DIV(7) | CCM_CCOSR_CLKO1_SEL(1); //(1: SYS_PLL/2)
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 6; //CCM_CLKO1 (0 is USDHC1_DAT2)
    7286:	movs	r7, #6
  
  static void initClock()
  {
    /* set PDF_528 PLL2PFD0 */
    CCM_ANALOG_PFD_528 |= (1 << 7);
    CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    7288:	ldr.w	r5, [r2, #256]	; 0x100
    //  CCM_CSCMR1 &= ~(CCM_CSCMR1_USDHC1_CLK_SEL);     // PLL2PFD2
    CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((7)); // &0x7
  
    // for testing
    CCM_CCOSR = CCM_CCOSR_CLKO1_EN | CCM_CCOSR_CLKO1_DIV(7) | CCM_CCOSR_CLKO1_SEL(1); //(1: SYS_PLL/2)
    728c:	mov.w	lr, #241	; 0xf1
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 6; //CCM_CLKO1 (0 is USDHC1_DAT2)
    // for testing
    CCM_CCOSR |= (CCM_CCOSR_CLKO2_EN | CCM_CCOSR_CLKO2_DIV(7) | CCM_CCOSR_CLKO2_SEL(3)); //(3: usdhc1_clk_root))
    7290:	ldr	r6, [pc, #388]	; (7418 <sd_CardInit()+0x1a8>)
    }
  }
  
  static void sd_ReleaseGPIO(void)
  {
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 5; //GPIO3_IO16
    7292:	movs	r4, #5
  
  static void initClock()
  {
    /* set PDF_528 PLL2PFD0 */
    CCM_ANALOG_PFD_528 |= (1 << 7);
    CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    7294:	bic.w	r5, r5, #63	; 0x3f
  initClock();

  // De-init GPIO - to prevent unwanted clocks on bus
  sd_ReleaseGPIO();
  #if defined (__IMXRT1052__) || defined (__IMXRT1062__)
    SDHC_SYSCTL   |= 0xF;
    7298:	ldr	r0, [pc, #384]	; (741c <sd_CardInit()+0x1ac>)
  
  static void initClock()
  {
    /* set PDF_528 PLL2PFD0 */
    CCM_ANALOG_PFD_528 |= (1 << 7);
    CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    729a:	str.w	r5, [r2, #256]	; 0x100
    CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0); // 12 - 35
    729e:	ldr.w	r5, [r2, #256]	; 0x100
    72a2:	orr.w	r5, r5, #24
    72a6:	str.w	r5, [r2, #256]	; 0x100
    CCM_ANALOG_PFD_528 &= ~(1 << 7);
    72aa:	ldr.w	r5, [r2, #256]	; 0x100
    72ae:	bic.w	r5, r5, #128	; 0x80
    72b2:	str.w	r5, [r2, #256]	; 0x100
    SDHC_MIX_CTRL |= 0x80000000;
  #endif  

  /* Reset SDHC */
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) ; // wait
    72b6:	mov	r2, r0
    CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0); // 12 - 35
    CCM_ANALOG_PFD_528 &= ~(1 << 7);
  
    /* Enable USDHC clock. */
    CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    72b8:	ldr.w	r5, [r3, #128]	; 0x80
    72bc:	orr.w	r5, r5, #12
    72c0:	str.w	r5, [r3, #128]	; 0x80
    CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    72c4:	ldr	r5, [r3, #36]	; 0x24
    72c6:	bic.w	r5, r5, #14336	; 0x3800
    72ca:	str	r5, [r3, #36]	; 0x24
    //
    //  CCM_CSCMR1 &= ~(CCM_CSCMR1_USDHC1_CLK_SEL);     // PLL2PFD2
    CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    72cc:	ldr	r5, [r3, #28]
    72ce:	orr.w	r5, r5, #65536	; 0x10000
    72d2:	str	r5, [r3, #28]
    CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((7)); // &0x7
    72d4:	ldr	r5, [r3, #36]	; 0x24
    72d6:	orr.w	r5, r5, #14336	; 0x3800
    72da:	str	r5, [r3, #36]	; 0x24
  
    // for testing
    CCM_CCOSR = CCM_CCOSR_CLKO1_EN | CCM_CCOSR_CLKO1_DIV(7) | CCM_CCOSR_CLKO1_SEL(1); //(1: SYS_PLL/2)
    72dc:	str.w	lr, [r3, #96]	; 0x60
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 6; //CCM_CLKO1 (0 is USDHC1_DAT2)
    72e0:	str.w	r7, [r1, #460]	; 0x1cc
    // for testing
    CCM_CCOSR |= (CCM_CCOSR_CLKO2_EN | CCM_CCOSR_CLKO2_DIV(7) | CCM_CCOSR_CLKO2_SEL(3)); //(3: usdhc1_clk_root))
    72e4:	ldr	r5, [r3, #96]	; 0x60
    72e6:	orrs	r6, r5
    SDHC_SYSCTL   |= 0xF;
    SDHC_MIX_CTRL |= 0x80000000;
  #endif  

  /* Reset SDHC */
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    72e8:	ldr	r5, [pc, #308]	; (7420 <sd_CardInit()+0x1b0>)
  
    // for testing
    CCM_CCOSR = CCM_CCOSR_CLKO1_EN | CCM_CCOSR_CLKO1_DIV(7) | CCM_CCOSR_CLKO1_SEL(1); //(1: SYS_PLL/2)
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 6; //CCM_CLKO1 (0 is USDHC1_DAT2)
    // for testing
    CCM_CCOSR |= (CCM_CCOSR_CLKO2_EN | CCM_CCOSR_CLKO2_DIV(7) | CCM_CCOSR_CLKO2_SEL(3)); //(3: usdhc1_clk_root))
    72ea:	str	r6, [r3, #96]	; 0x60
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = 6; //CCM_CLKO2 (0 is USDHC1_DAT3)
    72ec:	str.w	r7, [r1, #464]	; 0x1d0
    }
  }
  
  static void sd_ReleaseGPIO(void)
  {
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 5; //GPIO3_IO16
    72f0:	str.w	r4, [r1, #460]	; 0x1cc
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = 5; //GPIO3_IO17
    72f4:	str.w	r4, [r1, #464]	; 0x1d0
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = 5; //GPIO3_IO12
    72f8:	str.w	r4, [r1, #444]	; 0x1bc
    //3.3V
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = 5; //GPIO3_IO13
    72fc:	str.w	r4, [r1, #448]	; 0x1c0
    //GND
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = 5; //GPIO3_IO14
    7300:	str.w	r4, [r1, #452]	; 0x1c4
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = 5; //GPIO3_IO15
    7304:	str.w	r4, [r1, #456]	; 0x1c8
  initClock();

  // De-init GPIO - to prevent unwanted clocks on bus
  sd_ReleaseGPIO();
  #if defined (__IMXRT1052__) || defined (__IMXRT1062__)
    SDHC_SYSCTL   |= 0xF;
    7308:	ldr	r3, [r0, #44]	; 0x2c
    730a:	orr.w	r3, r3, #15
    730e:	str	r3, [r0, #44]	; 0x2c
    SDHC_MIX_CTRL |= 0x80000000;
    7310:	ldr	r3, [r0, #72]	; 0x48
    7312:	orr.w	r3, r3, #2147483648	; 0x80000000
    7316:	str	r3, [r0, #72]	; 0x48
  #endif  

  /* Reset SDHC */
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    7318:	ldr	r3, [r0, #44]	; 0x2c
    731a:	orrs	r5, r3
    731c:	str	r5, [r0, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) ; // wait
    731e:	ldr	r3, [r2, #44]	; 0x2c
    7320:	lsls	r0, r3, #7
    7322:	bmi.n	731e <sd_CardInit()+0xae>

  /* Set the SDHC initial baud rate divider and start */
  setSdclk(400);
    7324:	mov.w	r0, #400	; 0x190
    7328:	bl	70ac <setSdclk(unsigned long)>

  /* Poll inhibit bits */
  while (SDHC_PRSSTAT & (SDHC_PRSSTAT_CIHB | SDHC_PRSSTAT_CDIHB)) ;
    732c:	ldr	r1, [pc, #236]	; (741c <sd_CardInit()+0x1ac>)
    732e:	ldr	r3, [r1, #36]	; 0x24
    7330:	ldr	r2, [pc, #232]	; (741c <sd_CardInit()+0x1ac>)
    7332:	ands.w	r3, r3, #3
    7336:	bne.n	732e <sd_CardInit()+0xbe>
#else

  static void sd_InitGPIO(void)
  {
    { //T4                              // Inverted pins(T4)
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 0; //DAT2  
    7338:	ldr	r1, [pc, #216]	; (7414 <sd_CardInit()+0x1a4>)
                                  IOMUXC_SW_PAD_CTL_PAD_SPEED(2);
  
      const uint32_t DATA_MASK = CLOCK_MASK |
                                 (IOMUXC_SW_PAD_CTL_PAD_PUE | IOMUXC_SW_PAD_CTL_PAD_PUS(1));
  
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;
    733a:	movw	r0, #28808	; 0x7088
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;
    733e:	movw	r4, #4232	; 0x1088
  SDHC_PROCTL |=  SDHC_PROCTL_D3CD;
  // SDHC_PROCTL = SDHC_PROCTL_EMODE(SDHC_PROCTL_EMODE_INVARIANT) | SDHC_PROCTL_D3CD;
  //  SDHC_WML |= SDHC_WML_RDWML(SDHC_FIFO_BUFFER_SIZE) | SDHC_WML_WRWML(SDHC_FIFO_BUFFER_SIZE);

  #if defined(__IMXRT1052__) || defined (__IMXRT1062__)
    SDHC_VENDOR = 0x2000F801; // (1<<29 | 0x1F<<11 | 1);
    7342:	ldr	r5, [pc, #224]	; (7424 <sd_CardInit()+0x1b4>)
#else

  static void sd_InitGPIO(void)
  {
    { //T4                              // Inverted pins(T4)
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 0; //DAT2  
    7344:	str.w	r3, [r1, #460]	; 0x1cc
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = 0; //DAT3  
    7348:	str.w	r3, [r1, #464]	; 0x1d0
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = 0; //CMD   
    734c:	str.w	r3, [r1, #444]	; 0x1bc
      //3.3V                                           
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = 0; //CLK   
    7350:	str.w	r3, [r1, #448]	; 0x1c0
      //GND                                           
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = 0; //DAT0 
    7354:	str.w	r3, [r1, #452]	; 0x1c4
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = 0; //DAT1 
    7358:	str.w	r3, [r1, #456]	; 0x1c8
                                  IOMUXC_SW_PAD_CTL_PAD_SPEED(2);
  
      const uint32_t DATA_MASK = CLOCK_MASK |
                                 (IOMUXC_SW_PAD_CTL_PAD_PUE | IOMUXC_SW_PAD_CTL_PAD_PUS(1));
  
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;
    735c:	str.w	r0, [r1, #956]	; 0x3bc
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;
    7360:	str.w	r0, [r1, #960]	; 0x3c0
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;
    7364:	str.w	r0, [r1, #940]	; 0x3ac
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;
    7368:	str.w	r4, [r1, #944]	; 0x3b0
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;
    736c:	str.w	r0, [r1, #948]	; 0x3b4
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;
    7370:	str.w	r0, [r1, #952]	; 0x3b8
  sd_InitGPIO();

  /* Initial values */ // to do - Check values
//  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(512);
  
  SDHC_PROCTL &= ~SDHC_PROCTL_DMAS(3); // clear ADMA
    7374:	ldr	r3, [r2, #40]	; 0x28
  // clear interrupt status
  SDHC_IRQSTAT = SDHC_IRQSTAT;

  /* Enable requests */
  SDHC_IRQSTATEN =  SDHC_IRQSTAT_CRM | SDHC_IRQSTATEN_CIESEN | 
                    SDHC_IRQSTATEN_TCSEN | SDHC_IRQSTATEN_CCSEN;
    7376:	ldr	r4, [pc, #176]	; (7428 <sd_CardInit()+0x1b8>)
  sd_InitGPIO();

  /* Initial values */ // to do - Check values
//  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(512);
  
  SDHC_PROCTL &= ~SDHC_PROCTL_DMAS(3); // clear ADMA
    7378:	bic.w	r3, r3, #768	; 0x300


#ifdef __cplusplus
extern "C" void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    737c:	ldr	r1, [pc, #172]	; (742c <sd_CardInit()+0x1bc>)
    737e:	ldr	r0, [pc, #176]	; (7430 <sd_CardInit()+0x1c0>)
    7380:	str	r3, [r2, #40]	; 0x28

  SDHC_PROCTL |=  SDHC_PROCTL_D3CD;
    7382:	ldr	r3, [r2, #40]	; 0x28
    7384:	orr.w	r3, r3, #8
    7388:	str	r3, [r2, #40]	; 0x28
  // SDHC_PROCTL = SDHC_PROCTL_EMODE(SDHC_PROCTL_EMODE_INVARIANT) | SDHC_PROCTL_D3CD;
  //  SDHC_WML |= SDHC_WML_RDWML(SDHC_FIFO_BUFFER_SIZE) | SDHC_WML_WRWML(SDHC_FIFO_BUFFER_SIZE);

  #if defined(__IMXRT1052__) || defined (__IMXRT1062__)
    SDHC_VENDOR = 0x2000F801; // (1<<29 | 0x1F<<11 | 1);
    738a:	str.w	r5, [r2, #192]	; 0xc0
    SDHC_VENDOR2 &= ~(1<<12); //switch off ACMD23 sharing SDMA
    738e:	ldr.w	r3, [r2, #200]	; 0xc8
    7392:	bic.w	r3, r3, #4096	; 0x1000
    7396:	str.w	r3, [r2, #200]	; 0xc8
  #endif
  
  // clear interrupt status
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    739a:	ldr	r3, [r2, #48]	; 0x30
    739c:	str	r3, [r2, #48]	; 0x30

  /* Enable requests */
  SDHC_IRQSTATEN =  SDHC_IRQSTAT_CRM | SDHC_IRQSTATEN_CIESEN | 
                    SDHC_IRQSTATEN_TCSEN | SDHC_IRQSTATEN_CCSEN;
    739e:	str	r4, [r2, #52]	; 0x34
    73a0:	str.w	r0, [r1, #504]	; 0x1f8

  attachInterruptVector(IRQ_SDHC, sd_isr);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6 * 16);
    73a4:	ldr	r0, [pc, #140]	; (7434 <sd_CardInit()+0x1c4>)
    73a6:	movs	r4, #96	; 0x60
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    73a8:	ldr	r3, [pc, #140]	; (7438 <sd_CardInit()+0x1c8>)
    73aa:	mov.w	r1, #16384	; 0x4000
    73ae:	mov.w	r5, #500	; 0x1f4
  /* Enable requests */
  SDHC_IRQSTATEN =  SDHC_IRQSTAT_CRM | SDHC_IRQSTATEN_CIESEN | 
                    SDHC_IRQSTATEN_TCSEN | SDHC_IRQSTATEN_CCSEN;

  attachInterruptVector(IRQ_SDHC, sd_isr);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6 * 16);
    73b2:	strb	r4, [r0, #0]
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    73b4:	str	r1, [r3, #0]

  // initial clocks... SD spec says only 74 clocks are needed, but if Teensy rebooted
  // while the card was in middle of an operation, thousands of clock cycles can be
  // needed to get the card to complete a prior command and return to a usable state.
  for (int ii = 0; ii < 500; ii++) {
    SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    73b6:	ldr	r3, [r2, #44]	; 0x2c
    73b8:	orr.w	r3, r3, #134217728	; 0x8000000
    73bc:	str	r3, [r2, #44]	; 0x2c
    while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) ;
    73be:	ldr	r3, [r2, #44]	; 0x2c
    73c0:	ldr	r4, [pc, #88]	; (741c <sd_CardInit()+0x1ac>)
    73c2:	lsls	r1, r3, #4
    73c4:	bmi.n	73be <sd_CardInit()+0x14e>
  NVIC_ENABLE_IRQ(IRQ_SDHC);

  // initial clocks... SD spec says only 74 clocks are needed, but if Teensy rebooted
  // while the card was in middle of an operation, thousands of clock cycles can be
  // needed to get the card to complete a prior command and return to a usable state.
  for (int ii = 0; ii < 500; ii++) {
    73c6:	subs	r5, #1
    73c8:	bne.n	73b6 <sd_CardInit()+0x146>
    SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) ;
  }

  if(!(SDHC_PRSSTAT & SDHC_PRSSTAT_CINS)) return SDHC_STATUS_NODISK;
    73ca:	ldr	r3, [r4, #36]	; 0x24
    73cc:	lsls	r2, r3, #15
    73ce:	bmi.n	73e4 <sd_CardInit()+0x174>
  uint8_t resS;
  int resR;

  resS = sd_Init();

  sdCardDesc.status = resS;
    73d0:	ldr	r3, [pc, #104]	; (743c <sd_CardInit()+0x1cc>)
    73d2:	movs	r2, #2
  sdCardDesc.address = 0;
    73d4:	str	r5, [r3, #4]
  for (int ii = 0; ii < 500; ii++) {
    SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) ;
  }

  if(!(SDHC_PRSSTAT & SDHC_PRSSTAT_CINS)) return SDHC_STATUS_NODISK;
    73d6:	mov	r0, r2

  resS = sd_Init();

  sdCardDesc.status = resS;
  sdCardDesc.address = 0;
  sdCardDesc.highCapacity = 0;
    73d8:	strb	r5, [r3, #1]
  sdCardDesc.version2 = 0;
    73da:	strb	r5, [r3, #2]
  sdCardDesc.numBlocks = 0;
    73dc:	str	r5, [r3, #8]
  uint8_t resS;
  int resR;

  resS = sd_Init();

  sdCardDesc.status = resS;
    73de:	strb	r2, [r3, #0]
    73e0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    73e4:	ldr	r6, [pc, #84]	; (743c <sd_CardInit()+0x1cc>)
    // mixCtrl |= SDHC_MIX_CTRL_BCEN; // does not hurt
    // mixCtrl |= SDHC_MIX_CTRL_DTDSEL; // write/read (will be set later
    // mixCtrl |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    // mixCtrl |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    // mixCtrl |= SDHC_MIX_CTRL_AC23EN;
    SDHC_MIX_CTRL = mixCtrl;
    73e6:	mov.w	r3, #2147483648	; 0x80000000
 * Convenience interfaces
 */
// ---------- sends CMD0 to put SDCARD to idle
#define SDHC_CMD0_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD0) | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_NO))
//
static int sd_CMD0_GoToIdle(void){ return sd_CMD(SDHC_CMD0_XFERTYP,0); }
    73ea:	mov	r1, r5
    73ec:	mov	r0, r5
  uint8_t resS;
  int resR;

  resS = sd_Init();

  sdCardDesc.status = resS;
    73ee:	strb	r5, [r6, #0]
  sdCardDesc.address = 0;
  sdCardDesc.highCapacity = 0;
    73f0:	strb	r5, [r6, #1]
  sdCardDesc.version2 = 0;
    73f2:	strb	r5, [r6, #2]
  sdCardDesc.numBlocks = 0;
  
  if (resS)  return resS;

  SDHC_IRQSIGEN = 0;
    73f4:	str	r5, [r4, #56]	; 0x38
    // mixCtrl |= SDHC_MIX_CTRL_BCEN; // does not hurt
    // mixCtrl |= SDHC_MIX_CTRL_DTDSEL; // write/read (will be set later
    // mixCtrl |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    // mixCtrl |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    // mixCtrl |= SDHC_MIX_CTRL_AC23EN;
    SDHC_MIX_CTRL = mixCtrl;
    73f6:	str	r3, [r4, #72]	; 0x48
  int resR;

  resS = sd_Init();

  sdCardDesc.status = resS;
  sdCardDesc.address = 0;
    73f8:	str	r5, [r6, #4]
  sdCardDesc.highCapacity = 0;
  sdCardDesc.version2 = 0;
  sdCardDesc.numBlocks = 0;
    73fa:	str	r5, [r6, #8]
 * Convenience interfaces
 */
// ---------- sends CMD0 to put SDCARD to idle
#define SDHC_CMD0_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD0) | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_NO))
//
static int sd_CMD0_GoToIdle(void){ return sd_CMD(SDHC_CMD0_XFERTYP,0); }
    73fc:	bl	71b0 <sd_CMD(unsigned long, unsigned long)>
    SDHC_MIX_CTRL = mixCtrl;
  #endif

  resR = sd_CMD0_GoToIdle();

  if (resR) { return sdCardDesc.status = SDHC_STATUS_NOINIT;}
    7400:	cbz	r0, 7440 <sd_CardInit()+0x1d0>
    7402:	movs	r0, #1
    7404:	strb	r0, [r6, #0]
    7406:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    740a:	nop
    740c:	.word	0x400d8000
    7410:	.word	0x400fc000
    7414:	.word	0x401f8000
    7418:	.word	0x01e30000
    741c:	.word	0x402c0000
    7420:	.word	0x01008000
    7424:	.word	0x2000f801
    7428:	.word	0x00080083
    742c:	.word	0x20001800
    7430:	.word	0x00007161
    7434:	.word	0xe000e46e
    7438:	.word	0xe000e10c
    743c:	.word	0x200041ac
             
// ---------- CMD8 to send interface condition
#define SDHC_CMD8_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD8) | SDHC_XFERTYP_CICEN | \
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48))
//
static int sd_CMD8_SetInterface(uint32_t cond){  return sd_CMD(SDHC_CMD8_XFERTYP, cond); }
    7440:	mov.w	r1, #426	; 0x1aa
    7444:	ldr	r0, [pc, #428]	; (75f4 <sd_CardInit()+0x384>)
    7446:	bl	71b0 <sd_CMD(unsigned long, unsigned long)>

  resR = sd_CMD0_GoToIdle();

  if (resR) { return sdCardDesc.status = SDHC_STATUS_NOINIT;}
  resR = sd_CMD8_SetInterface(0x000001AA); // 3.3V and AA check pattern
  if (resR == SDHC_RESULT_OK) 
    744a:	cmp	r0, #0
    744c:	bne.w	75ce <sd_CardInit()+0x35e>
  { if (!((SDHC_CMDRSP0 & 0x000001AA)== 0x000001AA)) return sdCardDesc.status = SDHC_STATUS_NOINIT;
    7450:	ldr	r3, [r4, #16]
    7452:	and.w	r3, r3, #426	; 0x1aa
    7456:	cmp.w	r3, #426	; 0x1aa
    745a:	bne.n	7402 <sd_CardInit()+0x192>
    sdCardDesc.highCapacity = 1;
    745c:	movs	r3, #1
    745e:	strb	r3, [r6, #1]
static int sd_CMD16_SetBlockSize(uint32_t block_size){  return sd_CMD(SDHC_CMD16_XFERTYP, block_size);}

// ---------- ACMD 41 to send operation condition
#define SDHC_ACMD41_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_ACMD41) | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48))
//
static int sd_ACMD41_SendOperationCond(uint32_t cond){  return sd_ACMD(SDHC_ACMD41_XFERTYP,0, cond);}
    7460:	movs	r2, #0
    7462:	ldr	r0, [pc, #404]	; (75f8 <sd_CardInit()+0x388>)
    7464:	mov	r1, r2
    7466:	bl	720c <sd_ACMD(unsigned long, unsigned long, unsigned long)>
  else if (resR == SDHC_RESULT_NO_RESPONSE) 
  { // version 1 cards do not respond to CMD8
  } 
  else return sdCardDesc.status = SDHC_STATUS_NOINIT;

  if (sd_ACMD41_SendOperationCond(0))  return sdCardDesc.status = SDHC_STATUS_NOINIT;
    746a:	cmp	r0, #0
    746c:	bne.n	7402 <sd_CardInit()+0x192>

  if (SDHC_CMDRSP0 & 0x300000) {
    746e:	ldr	r3, [pc, #396]	; (75fc <sd_CardInit()+0x38c>)
    7470:	ldr	r2, [r3, #16]
    7472:	tst.w	r2, #3145728	; 0x300000
    7476:	beq.n	74ba <sd_CardInit()+0x24a>
    uint32_t condition = 0x00300000;
    if (sdCardDesc.highCapacity) condition |= 0x40000000;
    7478:	ldrb	r2, [r6, #1]
    //
    uint32_t ii = 0;
    747a:	mov	r4, r0
  else return sdCardDesc.status = SDHC_STATUS_NOINIT;

  if (sd_ACMD41_SendOperationCond(0))  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  if (SDHC_CMDRSP0 & 0x300000) {
    uint32_t condition = 0x00300000;
    747c:	ldr	r7, [pc, #384]	; (7600 <sd_CardInit()+0x390>)
      ii++;
      if (sd_ACMD41_SendOperationCond(condition)) {
        resS = SDHC_STATUS_NOINIT;
        break;
      }
    } while ((!(SDHC_CMDRSP0 & 0x80000000)) && (ii < SDHC_INITIALIZATION_MAX_CNT));
    747e:	mov	r5, r3
  else return sdCardDesc.status = SDHC_STATUS_NOINIT;

  if (sd_ACMD41_SendOperationCond(0))  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  if (SDHC_CMDRSP0 & 0x300000) {
    uint32_t condition = 0x00300000;
    7480:	cmp	r2, #0
      ii++;
      if (sd_ACMD41_SendOperationCond(condition)) {
        resS = SDHC_STATUS_NOINIT;
        break;
      }
    } while ((!(SDHC_CMDRSP0 & 0x80000000)) && (ii < SDHC_INITIALIZATION_MAX_CNT));
    7482:	ldr.w	r8, [pc, #384]	; 7604 <sd_CardInit()+0x394>
  else return sdCardDesc.status = SDHC_STATUS_NOINIT;

  if (sd_ACMD41_SendOperationCond(0))  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  if (SDHC_CMDRSP0 & 0x300000) {
    uint32_t condition = 0x00300000;
    7486:	it	eq
    7488:	moveq.w	r7, #3145728	; 0x300000
static int sd_CMD16_SetBlockSize(uint32_t block_size){  return sd_CMD(SDHC_CMD16_XFERTYP, block_size);}

// ---------- ACMD 41 to send operation condition
#define SDHC_ACMD41_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_ACMD41) | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48))
//
static int sd_ACMD41_SendOperationCond(uint32_t cond){  return sd_ACMD(SDHC_ACMD41_XFERTYP,0, cond);}
    748c:	mov	r2, r7
    748e:	movs	r1, #0
    7490:	ldr	r0, [pc, #356]	; (75f8 <sd_CardInit()+0x388>)
    uint32_t condition = 0x00300000;
    if (sdCardDesc.highCapacity) condition |= 0x40000000;
    //
    uint32_t ii = 0;
    do {
      ii++;
    7492:	adds	r4, #1
static int sd_CMD16_SetBlockSize(uint32_t block_size){  return sd_CMD(SDHC_CMD16_XFERTYP, block_size);}

// ---------- ACMD 41 to send operation condition
#define SDHC_ACMD41_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_ACMD41) | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48))
//
static int sd_ACMD41_SendOperationCond(uint32_t cond){  return sd_ACMD(SDHC_ACMD41_XFERTYP,0, cond);}
    7494:	bl	720c <sd_ACMD(unsigned long, unsigned long, unsigned long)>
    if (sdCardDesc.highCapacity) condition |= 0x40000000;
    //
    uint32_t ii = 0;
    do {
      ii++;
      if (sd_ACMD41_SendOperationCond(condition)) {
    7498:	cmp	r0, #0
    749a:	bne.w	75dc <sd_CardInit()+0x36c>
        resS = SDHC_STATUS_NOINIT;
        break;
      }
    } while ((!(SDHC_CMDRSP0 & 0x80000000)) && (ii < SDHC_INITIALIZATION_MAX_CNT));
    749e:	cmp	r4, r8
    74a0:	ldr	r3, [r5, #16]
    74a2:	bhi.n	74a8 <sd_CardInit()+0x238>
    74a4:	cmp	r3, #0
    74a6:	bge.n	748c <sd_CardInit()+0x21c>

    if (resS) return resS;

    if ((ii >= SDHC_INITIALIZATION_MAX_CNT) || (!(SDHC_CMDRSP0 & 0x40000000)))
    74a8:	ldr	r3, [pc, #344]	; (7604 <sd_CardInit()+0x394>)
    74aa:	cmp	r4, r3
    74ac:	bhi.n	74b6 <sd_CardInit()+0x246>
    74ae:	ldr	r3, [pc, #332]	; (75fc <sd_CardInit()+0x38c>)
    74b0:	ldr	r3, [r3, #16]
    74b2:	lsls	r3, r3, #1
    74b4:	bmi.n	74ba <sd_CardInit()+0x24a>
      sdCardDesc.highCapacity = 0;
    74b6:	movs	r3, #0
    74b8:	strb	r3, [r6, #1]
  }

  // Card identify
  SDHC_CMDRSP0=SDHC_CMDRSP1=SDHC_CMDRSP2=SDHC_CMDRSP3=0;
    74ba:	movs	r3, #0
    74bc:	ldr	r7, [pc, #316]	; (75fc <sd_CardInit()+0x38c>)

// ---------- sends CMD2 to identify card
#define SDHC_CMD2_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD2) | SDHC_XFERTYP_CCCEN \
                          | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_136))
//
static int sd_CMD2_Identify(void){  return sd_CMD(SDHC_CMD2_XFERTYP,0); }
    74be:	ldr	r0, [pc, #328]	; (7608 <sd_CardInit()+0x398>)
    if ((ii >= SDHC_INITIALIZATION_MAX_CNT) || (!(SDHC_CMDRSP0 & 0x40000000)))
      sdCardDesc.highCapacity = 0;
  }

  // Card identify
  SDHC_CMDRSP0=SDHC_CMDRSP1=SDHC_CMDRSP2=SDHC_CMDRSP3=0;
    74c0:	str	r3, [r7, #28]

// ---------- sends CMD2 to identify card
#define SDHC_CMD2_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD2) | SDHC_XFERTYP_CCCEN \
                          | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_136))
//
static int sd_CMD2_Identify(void){  return sd_CMD(SDHC_CMD2_XFERTYP,0); }
    74c2:	mov	r1, r3
    if ((ii >= SDHC_INITIALIZATION_MAX_CNT) || (!(SDHC_CMDRSP0 & 0x40000000)))
      sdCardDesc.highCapacity = 0;
  }

  // Card identify
  SDHC_CMDRSP0=SDHC_CMDRSP1=SDHC_CMDRSP2=SDHC_CMDRSP3=0;
    74c4:	str	r3, [r7, #24]
    74c6:	str	r3, [r7, #20]
    74c8:	str	r3, [r7, #16]

// ---------- sends CMD2 to identify card
#define SDHC_CMD2_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD2) | SDHC_XFERTYP_CCCEN \
                          | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_136))
//
static int sd_CMD2_Identify(void){  return sd_CMD(SDHC_CMD2_XFERTYP,0); }
    74ca:	bl	71b0 <sd_CMD(unsigned long, unsigned long)>
      sdCardDesc.highCapacity = 0;
  }

  // Card identify
  SDHC_CMDRSP0=SDHC_CMDRSP1=SDHC_CMDRSP2=SDHC_CMDRSP3=0;
  if (sd_CMD2_Identify())  return sdCardDesc.status = SDHC_STATUS_NOINIT;
    74ce:	mov	r1, r0
    74d0:	cmp	r0, #0
    74d2:	bne.n	7402 <sd_CardInit()+0x192>

// ---------- sends CMD 3 to get address
#define SDHC_CMD3_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD3) | SDHC_XFERTYP_CICEN | \
                         SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48))
//
static int sd_CMD3_GetAddress(void){  return sd_CMD(SDHC_CMD3_XFERTYP,0); }
    74d4:	ldr	r0, [pc, #308]	; (760c <sd_CardInit()+0x39c>)
    74d6:	bl	71b0 <sd_CMD(unsigned long, unsigned long)>
  // Card identify
  SDHC_CMDRSP0=SDHC_CMDRSP1=SDHC_CMDRSP2=SDHC_CMDRSP3=0;
  if (sd_CMD2_Identify())  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  // Get card address
  if (sd_CMD3_GetAddress())  return sdCardDesc.status = SDHC_STATUS_NOINIT;
    74da:	cmp	r0, #0
    74dc:	bne.n	7402 <sd_CardInit()+0x192>

  sdCardDesc.address = SDHC_CMDRSP0 & 0xFFFF0000;
    74de:	ldr	r3, [r7, #16]
    74e0:	ldr	r4, [pc, #300]	; (7610 <sd_CardInit()+0x3a0>)
#define SDHC_CMD9_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD9) | SDHC_XFERTYP_CCCEN | \
             SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_136))
//
static int sd_CMD9_GetParameters(uint32_t address)
{
  int result = sd_CMD(SDHC_CMD9_XFERTYP, address);
    74e2:	ldr	r0, [pc, #304]	; (7614 <sd_CardInit()+0x3a4>)
  if (sd_CMD2_Identify())  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  // Get card address
  if (sd_CMD3_GetAddress())  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  sdCardDesc.address = SDHC_CMDRSP0 & 0xFFFF0000;
    74e4:	ands	r4, r3
    74e6:	ldr	r5, [pc, #304]	; (7618 <sd_CardInit()+0x3a8>)
#define SDHC_CMD9_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD9) | SDHC_XFERTYP_CCCEN | \
             SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_136))
//
static int sd_CMD9_GetParameters(uint32_t address)
{
  int result = sd_CMD(SDHC_CMD9_XFERTYP, address);
    74e8:	mov	r1, r4
  if (sd_CMD2_Identify())  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  // Get card address
  if (sd_CMD3_GetAddress())  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  sdCardDesc.address = SDHC_CMDRSP0 & 0xFFFF0000;
    74ea:	str	r4, [r6, #4]
#define SDHC_CMD9_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD9) | SDHC_XFERTYP_CCCEN | \
             SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_136))
//
static int sd_CMD9_GetParameters(uint32_t address)
{
  int result = sd_CMD(SDHC_CMD9_XFERTYP, address);
    74ec:	bl	71b0 <sd_CMD(unsigned long, unsigned long)>
  if (result == SDHC_RESULT_OK) { sdCardDesc.tranSpeed = SDHC_CMDRSP2 >> 24;}
    74f0:	cmp	r0, #0
    74f2:	bne.n	7402 <sd_CardInit()+0x192>
    74f4:	ldr	r3, [r7, #24]
    74f6:	lsrs	r3, r3, #24
    74f8:	strb	r3, [r5, #3]
  sdCardDesc.address = SDHC_CMDRSP0 & 0xFFFF0000;

  // Get card parameters
  if (sd_CMD9_GetParameters(sdCardDesc.address))  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  if (!(SDHC_CMDRSP3 & 0x00C00000)) {
    74fa:	ldr	r3, [r7, #28]
    74fc:	tst.w	r3, #12582912	; 0xc00000
    7500:	bne.n	75e2 <sd_CardInit()+0x372>
    uint32_t read_bl_len, c_size, c_size_mult;

    read_bl_len = (SDHC_CMDRSP2 >> 8) & 0x0F;
    7502:	ldr	r1, [r7, #24]
    c_size = SDHC_CMDRSP2 & 0x03;
    7504:	ldr	r3, [r7, #24]
    c_size = (c_size << 10) | (SDHC_CMDRSP1 >> 22);
    7506:	ldr	r0, [r7, #20]
    c_size_mult = (SDHC_CMDRSP1 >> 7) & 0x07;
    sdCardDesc.numBlocks = (c_size + 1) * (1 << (c_size_mult + 2)) * (1 << (read_bl_len - 9));
    7508:	ubfx	r1, r1, #8, #4
    750c:	lsls	r2, r3, #10
    uint32_t read_bl_len, c_size, c_size_mult;

    read_bl_len = (SDHC_CMDRSP2 >> 8) & 0x0F;
    c_size = SDHC_CMDRSP2 & 0x03;
    c_size = (c_size << 10) | (SDHC_CMDRSP1 >> 22);
    c_size_mult = (SDHC_CMDRSP1 >> 7) & 0x07;
    750e:	ldr	r3, [r7, #20]
    sdCardDesc.numBlocks = (c_size + 1) * (1 << (c_size_mult + 2)) * (1 << (read_bl_len - 9));
    7510:	subs	r1, #9
    7512:	and.w	r2, r2, #3072	; 0xc00
    7516:	ubfx	r3, r3, #7, #3
    751a:	orr.w	r2, r2, r0, lsr #22
    751e:	adds	r3, #2
    7520:	adds	r2, #1
    7522:	lsl.w	r3, r2, r3
    7526:	lsls	r3, r1
    7528:	str	r3, [r5, #8]
             
// ---------- sends CMD 7 to select card
#define SDHC_CMD7_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD7) | SDHC_XFERTYP_CICEN | \
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY))
//
static int sd_CMD7_SelectCard(uint32_t address){  return sd_CMD(SDHC_CMD7_XFERTYP, address);}
    752a:	mov	r1, r4
    752c:	ldr	r0, [pc, #236]	; (761c <sd_CardInit()+0x3ac>)
    752e:	bl	71b0 <sd_CMD(unsigned long, unsigned long)>
    c_size = (SDHC_CMDRSP1 >> 8) & 0x003FFFFF;
    sdCardDesc.numBlocks = (c_size + 1) << 10;
  }

  // Select card
  if (sd_CMD7_SelectCard(sdCardDesc.address)) return sdCardDesc.status = SDHC_STATUS_NOINIT;
    7532:	cmp	r0, #0
    7534:	bne.w	7402 <sd_CardInit()+0x192>

// ---------- sends CMD16 to set block size
#define SDHC_CMD16_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD16) | SDHC_XFERTYP_CICEN | \
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48))
//
static int sd_CMD16_SetBlockSize(uint32_t block_size){  return sd_CMD(SDHC_CMD16_XFERTYP, block_size);}
    7538:	mov.w	r1, #512	; 0x200
    753c:	ldr	r0, [pc, #224]	; (7620 <sd_CardInit()+0x3b0>)
    753e:	bl	71b0 <sd_CMD(unsigned long, unsigned long)>

  // Select card
  if (sd_CMD7_SelectCard(sdCardDesc.address)) return sdCardDesc.status = SDHC_STATUS_NOINIT;

  // Set 512 Block size in SD card
  if (sd_CMD16_SetBlockSize(SDHC_BLOCK_SIZE))  return sdCardDesc.status = SDHC_STATUS_NOINIT;
    7542:	cmp	r0, #0
    7544:	bne.w	7402 <sd_CardInit()+0x192>
// ---------- sends ACMD6 to set bus width
#define SDHC_ACMD6_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_ACMD6) | SDHC_XFERTYP_CICEN | \
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48))
//
static int sd_ACMD6_SetBusWidth(uint32_t address, uint32_t width) 
{ return sd_ACMD(SDHC_ACMD6_XFERTYP,address, width); }
    7548:	mov	r1, r4
    754a:	movs	r2, #2
    754c:	ldr	r0, [pc, #212]	; (7624 <sd_CardInit()+0x3b4>)
    754e:	bl	720c <sd_ACMD(unsigned long, unsigned long, unsigned long)>

  // Set 512 Block size in SD card
  if (sd_CMD16_SetBlockSize(SDHC_BLOCK_SIZE))  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  // Set 4 bit data bus width
  if (sd_ACMD6_SetBusWidth(sdCardDesc.address, 2))  return sdCardDesc.status = SDHC_STATUS_NOINIT;
    7552:	mov	r5, r0
    7554:	cmp	r0, #0
    7556:	bne.w	7402 <sd_CardInit()+0x192>

  // Set Data bus width also in SDHC controller
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    755a:	ldr	r2, [pc, #160]	; (75fc <sd_CardInit()+0x38c>)
    }
  }
  
  static void sd_ReleaseGPIO(void)
  {
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 5; //GPIO3_IO16
    755c:	movs	r3, #5
    755e:	ldr	r4, [pc, #200]	; (7628 <sd_CardInit()+0x3b8>)
  
  // De-Init GPIO
  sd_ReleaseGPIO();

  // Set the SDHC default baud rate
  setSdclk(60000);
    7560:	movw	r0, #60000	; 0xea60

  // Set 4 bit data bus width
  if (sd_ACMD6_SetBusWidth(sdCardDesc.address, 2))  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  // Set Data bus width also in SDHC controller
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    7564:	ldr	r1, [r2, #40]	; 0x28
    7566:	bic.w	r1, r1, #6
    756a:	str	r1, [r2, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    756c:	ldr	r1, [r2, #40]	; 0x28
    756e:	orr.w	r1, r1, #2
    7572:	str	r1, [r2, #40]	; 0x28
    }
  }
  
  static void sd_ReleaseGPIO(void)
  {
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 5; //GPIO3_IO16
    7574:	str.w	r3, [r4, #460]	; 0x1cc
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = 5; //GPIO3_IO17
    7578:	str.w	r3, [r4, #464]	; 0x1d0
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = 5; //GPIO3_IO12
    757c:	str.w	r3, [r4, #444]	; 0x1bc
    //3.3V
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = 5; //GPIO3_IO13
    7580:	str.w	r3, [r4, #448]	; 0x1c0
    //GND
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = 5; //GPIO3_IO14
    7584:	str.w	r3, [r4, #452]	; 0x1c4
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = 5; //GPIO3_IO15
    7588:	str.w	r3, [r4, #456]	; 0x1c8
  
  // De-Init GPIO
  sd_ReleaseGPIO();

  // Set the SDHC default baud rate
  setSdclk(60000);
    758c:	bl	70ac <setSdclk(unsigned long)>
                                  IOMUXC_SW_PAD_CTL_PAD_SPEED(2);
  
      const uint32_t DATA_MASK = CLOCK_MASK |
                                 (IOMUXC_SW_PAD_CTL_PAD_PUE | IOMUXC_SW_PAD_CTL_PAD_PUS(1));
  
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;
    7590:	movw	r3, #28808	; 0x7088
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;
    7594:	movw	r2, #4232	; 0x1088
#else

  static void sd_InitGPIO(void)
  {
    { //T4                              // Inverted pins(T4)
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 0; //DAT2  
    7598:	str.w	r5, [r4, #460]	; 0x1cc
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = 0; //DAT3  
    759c:	str.w	r5, [r4, #464]	; 0x1d0
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = 0; //CMD   
    75a0:	str.w	r5, [r4, #444]	; 0x1bc
      //3.3V                                           
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = 0; //CLK   
    75a4:	str.w	r5, [r4, #448]	; 0x1c0
      //GND                                           
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = 0; //DAT0 
    75a8:	str.w	r5, [r4, #452]	; 0x1c4
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = 0; //DAT1 
    75ac:	str.w	r5, [r4, #456]	; 0x1c8
                                  IOMUXC_SW_PAD_CTL_PAD_SPEED(2);
  
      const uint32_t DATA_MASK = CLOCK_MASK |
                                 (IOMUXC_SW_PAD_CTL_PAD_PUE | IOMUXC_SW_PAD_CTL_PAD_PUS(1));
  
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;
    75b0:	str.w	r3, [r4, #956]	; 0x3bc
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;
    75b4:	str.w	r3, [r4, #960]	; 0x3c0
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;
    75b8:	str.w	r3, [r4, #940]	; 0x3ac
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;
    75bc:	str.w	r2, [r4, #944]	; 0x3b0
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;
    75c0:	str.w	r3, [r4, #948]	; 0x3b4
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;
    75c4:	str.w	r3, [r4, #952]	; 0x3b8
  // and SDHC_SetClock() for 50 MHz config

  // Init GPIO
  sd_InitGPIO();

  return sdCardDesc.status;
    75c8:	ldrb	r0, [r6, #0]
    75ca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  resR = sd_CMD8_SetInterface(0x000001AA); // 3.3V and AA check pattern
  if (resR == SDHC_RESULT_OK) 
  { if (!((SDHC_CMDRSP0 & 0x000001AA)== 0x000001AA)) return sdCardDesc.status = SDHC_STATUS_NOINIT;
    sdCardDesc.highCapacity = 1;
  } 
  else if (resR == SDHC_RESULT_NO_RESPONSE) 
    75ce:	cmp	r0, #5
    75d0:	beq.w	7460 <sd_CardInit()+0x1f0>
    SDHC_MIX_CTRL = mixCtrl;
  #endif

  resR = sd_CMD0_GoToIdle();

  if (resR) { return sdCardDesc.status = SDHC_STATUS_NOINIT;}
    75d4:	movs	r0, #1
    75d6:	strb	r0, [r6, #0]
    75d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    75dc:	movs	r0, #1
    75de:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c_size = (c_size << 10) | (SDHC_CMDRSP1 >> 22);
    c_size_mult = (SDHC_CMDRSP1 >> 7) & 0x07;
    sdCardDesc.numBlocks = (c_size + 1) * (1 << (c_size_mult + 2)) * (1 << (read_bl_len - 9));
  } else {
    uint32_t c_size;
    sdCardDesc.version2 = 1;
    75e2:	movs	r3, #1
    75e4:	strb	r3, [r5, #2]
    c_size = (SDHC_CMDRSP1 >> 8) & 0x003FFFFF;
    75e6:	ldr	r3, [r7, #20]
    sdCardDesc.numBlocks = (c_size + 1) << 10;
    75e8:	ubfx	r3, r3, #8, #22
    75ec:	adds	r3, #1
    75ee:	lsls	r3, r3, #10
    75f0:	str	r3, [r5, #8]
    75f2:	b.n	752a <sd_CardInit()+0x2ba>
    75f4:	.word	0x081a0000
    75f8:	.word	0x29020000
    75fc:	.word	0x402c0000
    7600:	.word	0x40300000
    7604:	.word	0x0001869f
    7608:	.word	0x02090000
    760c:	.word	0x031a0000
    7610:	.word	0xffff0000
    7614:	.word	0x09090000
    7618:	.word	0x200041ac
    761c:	.word	0x071b0000
    7620:	.word	0x101a0000
    7624:	.word	0x061a0000
    7628:	.word	0x401f8000

0000762c <SDHC_disk_initialize>:
DSTATUS SDHC_disk_status()
{	return (DSTATUS) sdCardDesc.status;
}

DSTATUS SDHC_disk_initialize()
{	return (DSTATUS) sd_CardInit();
    762c:	b.w	7270 <sd_CardInit()>

00007630 <sd_CardReadBlocks(void*, unsigned long, unsigned long)>:
  int result=0;
  // unused // uint32_t* pData = (uint32_t*)buff;

  
  // Convert LBA to BYTE address if needed
  if (!sdCardDesc.highCapacity)  sector *= 512;
    7630:	ldr	r3, [pc, #240]	; (7724 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0xf4>)
#define SDHC_CMD18_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD18) | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) \
                            | SDHC_XFERTYP_DPSEL | SDHC_XFERTYP_DMAEN | SDHC_XFERTYP_DTDSEL \
                            | SDHC_XFERTYP_AC12EN| SDHC_XFERTYP_BCEN | SDHC_XFERTYP_MSBSEL )
//
int sd_CardReadBlocks(void * buff, uint32_t sector, uint32_t count)
{
    7632:	push	{r4, r5, r6, r7, lr}
  int result=0;
  // unused // uint32_t* pData = (uint32_t*)buff;

  
  // Convert LBA to BYTE address if needed
  if (!sdCardDesc.highCapacity)  sector *= 512;
    7634:	ldrb	r4, [r3, #1]
    7636:	cbnz	r4, 763a <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0xa>
    7638:	lsls	r1, r1, #9

  // Check if this is ready
  if (sdCardDesc.status != 0) return SDHC_RESULT_NOT_READY;
    763a:	ldrb	r3, [r3, #0]
    763c:	cbz	r3, 7642 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0x12>
    763e:	movs	r0, #3
    7640:	pop	{r4, r5, r6, r7, pc}

	while(SDHC_PRSSTAT & (SDHC_PRSSTAT_CIHB | SDHC_PRSSTAT_CDIHB | SDHC_PRSSTAT_DLA)) ;
    7642:	ldr	r5, [pc, #228]	; (7728 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0xf8>)
    7644:	ldr	r3, [r5, #36]	; 0x24
    7646:	ldr	r4, [pc, #224]	; (7728 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0xf8>)
    7648:	ands.w	r3, r3, #7
    764c:	bne.n	7644 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0x14>

  // clear status
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    764e:	ldr	r5, [r4, #48]	; 0x30
    SDHC_MIX_CTRL |= SDHC_MIX_CTRL_DTDSEL ; // read
    SDHC_MIX_CTRL |= SDHC_MIX_CTRL_DMAEN ; // DMA
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_BCEN; // Block Count
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    if(count>1)
    7650:	cmp	r2, #1
  SDHC_IRQSTAT = SDHC_IRQSTAT;
  
  // use dma: disabling polling
  uint32_t irqstat = SDHC_IRQSTATEN;
  irqstat &= ~(SDHC_IRQSTATEN_BRRSEN | SDHC_IRQSTATEN_BWRSEN | SDHC_IRQSTATEN_CCSEN) ;
  irqstat &= ~(SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_CCESEN) ;
    7652:	ldr	r7, [pc, #216]	; (772c <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0xfc>)
  if (sdCardDesc.status != 0) return SDHC_RESULT_NOT_READY;

	while(SDHC_PRSSTAT & (SDHC_PRSSTAT_CIHB | SDHC_PRSSTAT_CDIHB | SDHC_PRSSTAT_DLA)) ;

  // clear status
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    7654:	str	r5, [r4, #48]	; 0x30
  
  // use dma: disabling polling
  uint32_t irqstat = SDHC_IRQSTATEN;
    7656:	ldr	r5, [r4, #52]	; 0x34
  irqstat &= ~(SDHC_IRQSTATEN_BRRSEN | SDHC_IRQSTATEN_BWRSEN | SDHC_IRQSTATEN_CCSEN) ;
  irqstat &= ~(SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_CCESEN) ;
  // enable status
  irqstat |= /*SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_CCESEN |*/ SDHC_IRQSTATEN_DMAESEN ; 
  irqstat |= SDHC_IRQSTATEN_DINTSEN | SDHC_IRQSTATEN_TCSEN ;//| SDHC_IRQSTATEN_CCSEN ; 
    7658:	ldr	r6, [pc, #212]	; (7730 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0x100>)
  SDHC_IRQSTAT = SDHC_IRQSTAT;
  
  // use dma: disabling polling
  uint32_t irqstat = SDHC_IRQSTATEN;
  irqstat &= ~(SDHC_IRQSTATEN_BRRSEN | SDHC_IRQSTATEN_BWRSEN | SDHC_IRQSTATEN_CCSEN) ;
  irqstat &= ~(SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_CCESEN) ;
    765a:	and.w	r7, r7, r5
  irqstat |= /*SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_CCESEN |*/ SDHC_IRQSTATEN_DMAESEN ; 
  irqstat |= SDHC_IRQSTATEN_DINTSEN | SDHC_IRQSTATEN_TCSEN ;//| SDHC_IRQSTATEN_CCSEN ; 
  SDHC_IRQSTATEN = irqstat;
  
  uint32_t sigen = SDHC_IRQSIGEN;
  sigen |= SDHC_IRQSIGEN_DMA_MASK ;
    765e:	mov	r5, r6
  uint32_t irqstat = SDHC_IRQSTATEN;
  irqstat &= ~(SDHC_IRQSTATEN_BRRSEN | SDHC_IRQSTATEN_BWRSEN | SDHC_IRQSTATEN_CCSEN) ;
  irqstat &= ~(SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_CCESEN) ;
  // enable status
  irqstat |= /*SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_CCESEN |*/ SDHC_IRQSTATEN_DMAESEN ; 
  irqstat |= SDHC_IRQSTATEN_DINTSEN | SDHC_IRQSTATEN_TCSEN ;//| SDHC_IRQSTATEN_CCSEN ; 
    7660:	orr.w	r6, r6, r7
  SDHC_IRQSTATEN = irqstat;
    7664:	str	r6, [r4, #52]	; 0x34
  
  uint32_t sigen = SDHC_IRQSIGEN;
    7666:	ldr	r6, [r4, #56]	; 0x38
  sigen |= SDHC_IRQSIGEN_DMA_MASK ;
    7668:	orr.w	r5, r5, r6
  SDHC_IRQSIGEN = sigen;
    766c:	str	r5, [r4, #56]	; 0x38
  
  SDHC_SYSCTL |= SDHC_SYSCTL_HCKEN;
    766e:	ldr	r5, [r4, #44]	; 0x2c
    7670:	orr.w	r5, r5, #2
    7674:	str	r5, [r4, #44]	; 0x2c
  #if defined(__IMXRT1052__) || defined(__IMXRT1062__)
    
    SDHC_MIX_CTRL |= SDHC_MIX_CTRL_DTDSEL ; // read
    7676:	ldr	r5, [r4, #72]	; 0x48
    7678:	orr.w	r5, r5, #16
    767c:	str	r5, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= SDHC_MIX_CTRL_DMAEN ; // DMA
    767e:	ldr	r5, [r4, #72]	; 0x48
    7680:	orr.w	r5, r5, #1
    7684:	str	r5, [r4, #72]	; 0x48
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_BCEN; // Block Count
    7686:	ldr	r5, [r4, #72]	; 0x48
    7688:	bic.w	r5, r5, #2
    768c:	str	r5, [r4, #72]	; 0x48
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    768e:	ldr	r5, [r4, #72]	; 0x48
    7690:	bic.w	r5, r5, #32
    7694:	str	r5, [r4, #72]	; 0x48
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    7696:	ldr	r5, [r4, #72]	; 0x48
    7698:	bic.w	r5, r5, #4
    769c:	str	r5, [r4, #72]	; 0x48
    if(count>1)
    769e:	bls.n	76fc <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0xcc>
    {
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
    76a0:	ldr	r7, [r4, #72]	; 0x48
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    76a2:	lsls	r5, r2, #16
    76a4:	ldr	r6, [pc, #140]	; (7734 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0x104>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_BCEN; // Block Count
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    if(count>1)
    {
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
    76a6:	orr.w	r7, r7, #2
  dmaDone=0;
  SDHC_DSADDR  = (uint32_t)buff;

  // send command
    SDHC_CMDARG = sector;
    SDHC_XFERTYP = count==1 ? SDHC_CMD17_XFERTYP: SDHC_CMD18_XFERTYP; 
    76aa:	ldr.w	lr, [pc, #144]	; 773c <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0x10c>
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    76ae:	ands	r6, r5

  // enable DMA
  dmaDone=0;
    76b0:	ldr	r5, [pc, #132]	; (7738 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0x108>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_BCEN; // Block Count
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    if(count>1)
    {
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
    76b2:	str	r7, [r4, #72]	; 0x48
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    76b4:	ldr	r7, [r4, #72]	; 0x48
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    76b6:	orr.w	r6, r6, #512	; 0x200
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    if(count>1)
    {
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    76ba:	orr.w	r7, r7, #32
    76be:	str	r7, [r4, #72]	; 0x48
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    76c0:	ldr	r7, [r4, #72]	; 0x48
    76c2:	orr.w	r7, r7, #4
    76c6:	str	r7, [r4, #72]	; 0x48
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    76c8:	str	r6, [r4, #4]

  // enable DMA
  dmaDone=0;
    76ca:	str	r3, [r5, #0]
  SDHC_DSADDR  = (uint32_t)buff;
    76cc:	str	r0, [r4, #0]

  // send command
    SDHC_CMDARG = sector;
    76ce:	str	r1, [r4, #8]
    SDHC_XFERTYP = count==1 ? SDHC_CMD17_XFERTYP: SDHC_CMD18_XFERTYP; 
    76d0:	ldr	r3, [pc, #84]	; (7728 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0xf8>)
    76d2:	str.w	lr, [r3, #12]

  // wait for DMA
  while(!dmaDone);
    76d6:	ldr	r3, [r5, #0]
    76d8:	cmp	r3, #0
    76da:	beq.n	76d6 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0xa6>
  SDHC_IRQSTAT &= (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_TC);
    76dc:	ldr	r3, [pc, #72]	; (7728 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0xf8>)

	// Auto CMD12 is enabled for DMA so call it if DMA error
	if((SDHC_DSADDR < (uint32_t)((uint8_t *)buff+(count*512))) && (count>1))
    76de:	add.w	r0, r0, r2, lsl #9
    SDHC_CMDARG = sector;
    SDHC_XFERTYP = count==1 ? SDHC_CMD17_XFERTYP: SDHC_CMD18_XFERTYP; 

  // wait for DMA
  while(!dmaDone);
  SDHC_IRQSTAT &= (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_TC);
    76e2:	ldr	r1, [r3, #48]	; 0x30
    76e4:	and.w	r1, r1, #3
    76e8:	str	r1, [r3, #48]	; 0x30

	// Auto CMD12 is enabled for DMA so call it if DMA error
	if((SDHC_DSADDR < (uint32_t)((uint8_t *)buff+(count*512))) && (count>1))
    76ea:	ldr	r3, [r3, #0]
    76ec:	cmp	r3, r0
    76ee:	bcs.n	7720 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0xf0>
    76f0:	cmp	r2, #1
    76f2:	bls.n	7720 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0xf0>
		result=sd_CMD12_StopTransferWaitForBusy();

  return result;
}
    76f4:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  while(!dmaDone);
  SDHC_IRQSTAT &= (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_TC);

	// Auto CMD12 is enabled for DMA so call it if DMA error
	if((SDHC_DSADDR < (uint32_t)((uint8_t *)buff+(count*512))) && (count>1))
		result=sd_CMD12_StopTransferWaitForBusy();
    76f8:	b.w	722c <sd_CMD12_StopTransferWaitForBusy()>
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    76fc:	mov.w	r7, r2, lsl #16
    7700:	ldr	r6, [pc, #48]	; (7734 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0x104>)

  // enable DMA
  dmaDone=0;
    7702:	ldr	r5, [pc, #52]	; (7738 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0x108>)
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    7704:	and.w	r6, r6, r7
  dmaDone=0;
  SDHC_DSADDR  = (uint32_t)buff;

  // send command
    SDHC_CMDARG = sector;
    SDHC_XFERTYP = count==1 ? SDHC_CMD17_XFERTYP: SDHC_CMD18_XFERTYP; 
    7708:	ite	ne
    770a:	ldrne.w	lr, [pc, #48]	; 773c <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0x10c>
    770e:	ldreq.w	lr, [pc, #48]	; 7740 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0x110>
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    7712:	orr.w	r6, r6, #512	; 0x200
    7716:	str	r6, [r4, #4]

  // enable DMA
  dmaDone=0;
    7718:	str	r3, [r5, #0]
  SDHC_DSADDR  = (uint32_t)buff;
    771a:	str	r0, [r4, #0]

  // send command
    SDHC_CMDARG = sector;
    771c:	str	r1, [r4, #8]
    771e:	b.n	76d0 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0xa0>
                            | SDHC_XFERTYP_DPSEL | SDHC_XFERTYP_DMAEN | SDHC_XFERTYP_DTDSEL \
                            | SDHC_XFERTYP_AC12EN| SDHC_XFERTYP_BCEN | SDHC_XFERTYP_MSBSEL )
//
int sd_CardReadBlocks(void * buff, uint32_t sector, uint32_t count)
{
  int result=0;
    7720:	movs	r0, #0
    7722:	pop	{r4, r5, r6, r7, pc}
    7724:	.word	0x200041ac
    7728:	.word	0x402c0000
    772c:	.word	0xffddffce
    7730:	.word	0x1000000a
    7734:	.word	0x1fff0000
    7738:	.word	0x200041cc
    773c:	.word	0x12220037
    7740:	.word	0x11220013

00007744 <SDHC_disk_read>:
DSTATUS SDHC_disk_initialize()
{	return (DSTATUS) sd_CardInit();
}

DRESULT SDHC_disk_read(BYTE *buff, DWORD sector, UINT count)
{	return (DRESULT) sd_CardReadBlocks((void *) buff, (uint32_t) sector, (uint32_t) count);
    7744:	push	{r3, lr}
    7746:	bl	7630 <sd_CardReadBlocks(void*, unsigned long, unsigned long)>
}
    774a:	uxtb	r0, r0
    774c:	pop	{r3, pc}
    774e:	nop

00007750 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)>:
#define SDHC_CMD25_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD25) |SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) \
                            | SDHC_XFERTYP_DPSEL | SDHC_XFERTYP_DMAEN \
                            | SDHC_XFERTYP_AC12EN| SDHC_XFERTYP_BCEN | SDHC_XFERTYP_MSBSEL )
//
int sd_CardWriteBlocks(const void * buff, uint32_t sector, uint32_t count)
{
    7750:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int result=0;
  // unused // const uint32_t *pData = (const uint32_t *)buff;

  // Convert LBA to uint8_t address if needed
  if (!sdCardDesc.highCapacity) sector *= 512;
    7754:	ldr	r5, [pc, #312]	; (7890 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x140>)
#define SDHC_CMD25_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD25) |SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) \
                            | SDHC_XFERTYP_DPSEL | SDHC_XFERTYP_DMAEN \
                            | SDHC_XFERTYP_AC12EN| SDHC_XFERTYP_BCEN | SDHC_XFERTYP_MSBSEL )
//
int sd_CardWriteBlocks(const void * buff, uint32_t sector, uint32_t count)
{
    7756:	mov	r6, r2
  int result=0;
  // unused // const uint32_t *pData = (const uint32_t *)buff;

  // Convert LBA to uint8_t address if needed
  if (!sdCardDesc.highCapacity) sector *= 512;
    7758:	ldrb	r3, [r5, #1]
    775a:	cbnz	r3, 775e <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0xe>
    775c:	lsls	r1, r1, #9

  // Check if this is ready
  if (sdCardDesc.status != 0) return SDHC_RESULT_NOT_READY;
    775e:	ldrb	r3, [r5, #0]
    7760:	cbz	r3, 7768 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x18>
    7762:	movs	r0, #3
    7764:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	while(SDHC_PRSSTAT & (SDHC_PRSSTAT_CIHB | SDHC_PRSSTAT_CDIHB | SDHC_PRSSTAT_DLA)) ;
    7768:	ldr	r4, [pc, #296]	; (7894 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x144>)
    776a:	ldr	r3, [r4, #36]	; 0x24
    776c:	ldr	r2, [pc, #292]	; (7894 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x144>)
    776e:	ands.w	r3, r3, #7
    7772:	bne.n	776a <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x1a>

  // clear status
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    7774:	ldr	r4, [r2, #48]	; 0x30
    SDHC_MIX_CTRL &= ~ SDHC_MIX_CTRL_DTDSEL;  // write
    SDHC_MIX_CTRL |=  SDHC_MIX_CTRL_DMAEN ;   //DMA
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_BCEN; // Block Count
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    if(count>1)
    7776:	cmp	r6, #1
  SDHC_IRQSTAT = SDHC_IRQSTAT;

  uint32_t irqstat = SDHC_IRQSTATEN;
  // use dma: disabling polling
  irqstat &= ~(SDHC_IRQSTATEN_BRRSEN | SDHC_IRQSTATEN_BWRSEN | SDHC_IRQSTATEN_CCSEN) ;
  irqstat &= ~(SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_CCESEN) ;
    7778:	ldr.w	lr, [pc, #304]	; 78ac <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x15c>
  if (sdCardDesc.status != 0) return SDHC_RESULT_NOT_READY;

	while(SDHC_PRSSTAT & (SDHC_PRSSTAT_CIHB | SDHC_PRSSTAT_CDIHB | SDHC_PRSSTAT_DLA)) ;

  // clear status
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    777c:	str	r4, [r2, #48]	; 0x30

  uint32_t irqstat = SDHC_IRQSTATEN;
    777e:	ldr	r4, [r2, #52]	; 0x34
  // use dma: disabling polling
  irqstat &= ~(SDHC_IRQSTATEN_BRRSEN | SDHC_IRQSTATEN_BWRSEN | SDHC_IRQSTATEN_CCSEN) ;
  irqstat &= ~(SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_CCESEN) ;
  // enable status
  irqstat |= SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_CCESEN | SDHC_IRQSTATEN_DMAESEN ; 
  irqstat |= SDHC_IRQSTATEN_DINTSEN | SDHC_IRQSTATEN_TCSEN ;//| SDHC_IRQSTATEN_CCSEN ; 
    7780:	ldr	r7, [pc, #276]	; (7898 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x148>)
  SDHC_IRQSTAT = SDHC_IRQSTAT;

  uint32_t irqstat = SDHC_IRQSTATEN;
  // use dma: disabling polling
  irqstat &= ~(SDHC_IRQSTATEN_BRRSEN | SDHC_IRQSTATEN_BWRSEN | SDHC_IRQSTATEN_CCSEN) ;
  irqstat &= ~(SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_CCESEN) ;
    7782:	and.w	lr, r4, lr
  irqstat |= SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_CCESEN | SDHC_IRQSTATEN_DMAESEN ; 
  irqstat |= SDHC_IRQSTATEN_DINTSEN | SDHC_IRQSTATEN_TCSEN ;//| SDHC_IRQSTATEN_CCSEN ; 
  SDHC_IRQSTATEN = irqstat;
  
  uint32_t sigen = SDHC_IRQSIGEN;
  sigen |= SDHC_IRQSIGEN_DMA_MASK ;
    7786:	ldr	r4, [pc, #276]	; (789c <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x14c>)
  // use dma: disabling polling
  irqstat &= ~(SDHC_IRQSTATEN_BRRSEN | SDHC_IRQSTATEN_BWRSEN | SDHC_IRQSTATEN_CCSEN) ;
  irqstat &= ~(SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_CCESEN) ;
  // enable status
  irqstat |= SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_CCESEN | SDHC_IRQSTATEN_DMAESEN ; 
  irqstat |= SDHC_IRQSTATEN_DINTSEN | SDHC_IRQSTATEN_TCSEN ;//| SDHC_IRQSTATEN_CCSEN ; 
    7788:	orr.w	r7, lr, r7
  SDHC_IRQSTATEN = irqstat;
    778c:	str	r7, [r2, #52]	; 0x34
  
  uint32_t sigen = SDHC_IRQSIGEN;
    778e:	ldr	r7, [r2, #56]	; 0x38
  sigen |= SDHC_IRQSIGEN_DMA_MASK ;
    7790:	orr.w	r4, r4, r7
  SDHC_IRQSIGEN = sigen;
    7794:	str	r4, [r2, #56]	; 0x38
  
  SDHC_SYSCTL |= SDHC_SYSCTL_HCKEN;
    7796:	ldr	r4, [r2, #44]	; 0x2c
    7798:	orr.w	r4, r4, #2
    779c:	str	r4, [r2, #44]	; 0x2c
  #if defined(__IMXRT1052__) || defined(__IMXRT1062__)
    SDHC_MIX_CTRL &= ~ SDHC_MIX_CTRL_DTDSEL;  // write
    779e:	ldr	r4, [r2, #72]	; 0x48
    77a0:	bic.w	r4, r4, #16
    77a4:	str	r4, [r2, #72]	; 0x48
    SDHC_MIX_CTRL |=  SDHC_MIX_CTRL_DMAEN ;   //DMA
    77a6:	ldr	r4, [r2, #72]	; 0x48
    77a8:	orr.w	r4, r4, #1
    77ac:	str	r4, [r2, #72]	; 0x48
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_BCEN; // Block Count
    77ae:	ldr	r4, [r2, #72]	; 0x48
    77b0:	bic.w	r4, r4, #2
    77b4:	str	r4, [r2, #72]	; 0x48
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    77b6:	ldr	r4, [r2, #72]	; 0x48
    77b8:	bic.w	r4, r4, #32
    77bc:	str	r4, [r2, #72]	; 0x48
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    77be:	ldr	r4, [r2, #72]	; 0x48
    77c0:	bic.w	r4, r4, #4
    77c4:	str	r4, [r2, #72]	; 0x48
    if(count>1)
    77c6:	bls.n	786a <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x11a>
    {
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
    77c8:	ldr	r4, [r2, #72]	; 0x48
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    77ca:	mov.w	ip, r6, lsl #16
    77ce:	ldr	r7, [pc, #208]	; (78a0 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x150>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_BCEN; // Block Count
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    if(count>1)
    {
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
    77d0:	orr.w	lr, r4, #2
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    77d4:	mov	r4, ip
  dmaDone=0;
  SDHC_DSADDR  = (uint32_t)buff;
  //
  // send write command
  SDHC_CMDARG = sector;
  SDHC_XFERTYP = count==1 ? SDHC_CMD24_XFERTYP: SDHC_CMD25_XFERTYP; 
    77d6:	ldr.w	ip, [pc, #216]	; 78b0 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x160>
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_BCEN; // Block Count
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    if(count>1)
    {
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
    77da:	str.w	lr, [r2, #72]	; 0x48
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    77de:	ands	r7, r4
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    if(count>1)
    {
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    77e0:	ldr.w	lr, [r2, #72]	; 0x48
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);

  // enable DMA
  dmaDone=0;
    77e4:	ldr	r4, [pc, #188]	; (78a4 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x154>)
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    77e6:	orr.w	r7, r7, #512	; 0x200
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    if(count>1)
    {
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    77ea:	orr.w	lr, lr, #32
    77ee:	str.w	lr, [r2, #72]	; 0x48
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    77f2:	ldr.w	lr, [r2, #72]	; 0x48
    77f6:	orr.w	lr, lr, #4
    77fa:	str.w	lr, [r2, #72]	; 0x48
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    77fe:	str	r7, [r2, #4]

  // enable DMA
  dmaDone=0;
    7800:	str	r3, [r4, #0]
  SDHC_DSADDR  = (uint32_t)buff;
    7802:	str	r0, [r2, #0]
  //
  // send write command
  SDHC_CMDARG = sector;
    7804:	str	r1, [r2, #8]
  SDHC_XFERTYP = count==1 ? SDHC_CMD24_XFERTYP: SDHC_CMD25_XFERTYP; 
    7806:	ldr	r3, [pc, #140]	; (7894 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x144>)
    7808:	str.w	ip, [r3, #12]
  //
  // wait for  DMA to finish
  while(!dmaDone);
    780c:	ldr	r3, [r4, #0]
    780e:	cmp	r3, #0
    7810:	beq.n	780c <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0xbc>

  SDHC_IRQSTAT &= (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_TC);
    7812:	ldr	r3, [pc, #128]	; (7894 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x144>)
    7814:	ldr	r1, [r3, #48]	; 0x30
  while(SDHC_PRSSTAT & SDHC_PRSSTAT_DLA);
    7816:	mov	r2, r3
  SDHC_XFERTYP = count==1 ? SDHC_CMD24_XFERTYP: SDHC_CMD25_XFERTYP; 
  //
  // wait for  DMA to finish
  while(!dmaDone);

  SDHC_IRQSTAT &= (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_TC);
    7818:	and.w	r1, r1, #3
    781c:	str	r1, [r3, #48]	; 0x30
  while(SDHC_PRSSTAT & SDHC_PRSSTAT_DLA);
    781e:	ldr	r3, [r2, #36]	; 0x24
    7820:	lsls	r0, r3, #29
    7822:	bmi.n	781e <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0xce>
#define CARD_STATUS_READY_FOR_DATA	(1UL << 8)
// ---------- sends CMD13 to check uSD status and wait for ready
static int sd_CMD13_WaitForReady(uint32_t address)
{ int result;
  do
  { while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) ;
    7824:	ldr	r4, [pc, #108]	; (7894 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x144>)
    7826:	ldr	r7, [r5, #4]
    7828:	mov	r8, r4
    782a:	mov	r5, r4
    782c:	ldr	r3, [r4, #36]	; 0x24
    782e:	lsls	r1, r3, #31
    7830:	bmi.n	782c <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0xdc>
    7832:	ldr.w	r3, [r8, #36]	; 0x24
    7836:	lsls	r2, r3, #30
    7838:	bmi.n	782c <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0xdc>
    SDHC_IRQSTATEN |= SDHC_IRQSTATEN_CCSEN;
    783a:	ldr	r3, [r5, #52]	; 0x34
}

// ---------- sends CMD13 to check uSD status
#define SDHC_CMD13_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD13) | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48))
//
static int sd_CMD13_Check_Status(uint32_t address){  return sd_CMD(SDHC_CMD13_XFERTYP, address);}
    783c:	mov	r1, r7
    783e:	ldr	r0, [pc, #104]	; (78a8 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x158>)
// ---------- sends CMD13 to check uSD status and wait for ready
static int sd_CMD13_WaitForReady(uint32_t address)
{ int result;
  do
  { while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) ;
    SDHC_IRQSTATEN |= SDHC_IRQSTATEN_CCSEN;
    7840:	orr.w	r3, r3, #1
    7844:	str	r3, [r5, #52]	; 0x34
    SDHC_IRQSTAT=SDHC_IRQSTAT;
    7846:	ldr	r3, [r5, #48]	; 0x30
    7848:	str	r3, [r5, #48]	; 0x30
}

// ---------- sends CMD13 to check uSD status
#define SDHC_CMD13_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD13) | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48))
//
static int sd_CMD13_Check_Status(uint32_t address){  return sd_CMD(SDHC_CMD13_XFERTYP, address);}
    784a:	bl	71b0 <sd_CMD(unsigned long, unsigned long)>
  { while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) ;
    SDHC_IRQSTATEN |= SDHC_IRQSTATEN_CCSEN;
    SDHC_IRQSTAT=SDHC_IRQSTAT;
    // CMD13 to check uSD status
    result = sd_CMD13_Check_Status(sdCardDesc.address);
    if (result != SDHC_RESULT_OK)  return result;
    784e:	cbnz	r0, 785a <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x10a>
  } while(!((SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA)==CARD_STATUS_READY_FOR_DATA)); // while data?
    7850:	ldr	r3, [r5, #16]

#define CARD_STATUS_READY_FOR_DATA	(1UL << 8)
// ---------- sends CMD13 to check uSD status and wait for ready
static int sd_CMD13_WaitForReady(uint32_t address)
{ int result;
  do
    7852:	lsls	r3, r3, #23
    7854:	bpl.n	782c <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0xdc>
    7856:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  //check for SD status (if data are written?)
  result = sd_CMD13_WaitForReady(sdCardDesc.address);

	// Auto CMD12 is enabled for DMA so call it when transfer error
	if((result != SDHC_RESULT_OK) && (count>1))
    785a:	cmp	r6, #1
    785c:	bls.n	7866 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x116>
		result=sd_CMD12_StopTransferWaitForBusy();
  
  return result;
}
    785e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  //check for SD status (if data are written?)
  result = sd_CMD13_WaitForReady(sdCardDesc.address);

	// Auto CMD12 is enabled for DMA so call it when transfer error
	if((result != SDHC_RESULT_OK) && (count>1))
		result=sd_CMD12_StopTransferWaitForBusy();
    7862:	b.w	722c <sd_CMD12_StopTransferWaitForBusy()>
  
  return result;
}
    7866:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    786a:	mov.w	lr, r6, lsl #16
    786e:	ldr	r7, [pc, #48]	; (78a0 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x150>)

  // enable DMA
  dmaDone=0;
    7870:	ldr	r4, [pc, #48]	; (78a4 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x154>)
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    7872:	and.w	r7, lr, r7
  dmaDone=0;
  SDHC_DSADDR  = (uint32_t)buff;
  //
  // send write command
  SDHC_CMDARG = sector;
  SDHC_XFERTYP = count==1 ? SDHC_CMD24_XFERTYP: SDHC_CMD25_XFERTYP; 
    7876:	ite	eq
    7878:	ldreq.w	ip, [pc, #56]	; 78b4 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x164>
    787c:	ldrne.w	ip, [pc, #48]	; 78b0 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x160>
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    7880:	orr.w	r7, r7, #512	; 0x200
    7884:	str	r7, [r2, #4]

  // enable DMA
  dmaDone=0;
    7886:	str	r3, [r4, #0]
  SDHC_DSADDR  = (uint32_t)buff;
    7888:	str	r0, [r2, #0]
  //
  // send write command
  SDHC_CMDARG = sector;
    788a:	str	r1, [r2, #8]
    788c:	b.n	7806 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0xb6>
    788e:	nop
    7890:	.word	0x200041ac
    7894:	.word	0x402c0000
    7898:	.word	0x1022000a
    789c:	.word	0x1000000a
    78a0:	.word	0x1fff0000
    78a4:	.word	0x200041cc
    78a8:	.word	0x0d020000
    78ac:	.word	0xffddffce
    78b0:	.word	0x19220027
    78b4:	.word	0x18220003

000078b8 <SDHC_disk_write>:
DRESULT SDHC_disk_read(BYTE *buff, DWORD sector, UINT count)
{	return (DRESULT) sd_CardReadBlocks((void *) buff, (uint32_t) sector, (uint32_t) count);
}

DRESULT SDHC_disk_write(const BYTE *buff, DWORD sector, UINT count)
{	return (DRESULT) sd_CardWriteBlocks((void *) buff, (uint32_t) sector, (uint32_t) count);
    78b8:	push	{r3, lr}
    78ba:	bl	7750 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)>
}
    78be:	uxtb	r0, r0
    78c0:	pop	{r3, pc}
    78c2:	nop

000078c4 <sd_chipSelect(unsigned short) [clone .part.0]>:

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
	if(m_chipSelectPin<0) return;
//
  if(high_low==HIGH)
    78c4:	cmp	r0, #1
    78c6:	beq.n	78dc <sd_chipSelect(unsigned short) [clone .part.0]+0x18>
    // insure MISO goes high impedance
    spi_send(0XFF); 
  }
  else
  {
    digitalWriteFast(m_chipSelectPin, LOW);
    78c8:	ldr	r3, [pc, #60]	; (7908 <sd_chipSelect(unsigned short) [clone .part.0]+0x44>)
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    78ca:	ldr	r2, [pc, #64]	; (790c <sd_chipSelect(unsigned short) [clone .part.0]+0x48>)
    78cc:	ldrb	r3, [r3, #0]
    78ce:	lsls	r3, r3, #4
    78d0:	adds	r1, r2, r3
    78d2:	ldr	r3, [r2, r3]
    78d4:	ldr	r2, [r1, #12]
    78d6:	str.w	r2, [r3, #136]	; 0x88
    78da:	bx	lr
{ 	if(!m_enableChipSelect) return;
	if(m_chipSelectPin<0) return;
//
  if(high_low==HIGH)
  {
	digitalWriteFast(m_chipSelectPin, HIGH);
    78dc:	ldr	r3, [pc, #40]	; (7908 <sd_chipSelect(unsigned short) [clone .part.0]+0x44>)
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    78de:	movs	r0, #255	; 0xff
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
    78e0:	ldr	r1, [pc, #40]	; (790c <sd_chipSelect(unsigned short) [clone .part.0]+0x48>)
    78e2:	ldrb	r3, [r3, #0]
    78e4:	ldr	r2, [pc, #40]	; (7910 <sd_chipSelect(unsigned short) [clone .part.0]+0x4c>)
    78e6:	lsls	r3, r3, #4
    78e8:	ldr	r2, [r2, #0]
  return TRUE;
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
    78ea:	push	{r4}
    78ec:	adds	r4, r1, r3
    78ee:	ldr	r3, [r1, r3]
    78f0:	ldr	r1, [r4, #12]
    78f2:	str.w	r1, [r3, #132]	; 0x84
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    78f6:	str	r0, [r2, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    78f8:	ldr	r3, [r2, #92]	; 0x5c
		if (fifo > 0) return spi->RDR; 
    78fa:	tst.w	r3, #2031616	; 0x1f0000
    78fe:	beq.n	78f8 <sd_chipSelect(unsigned short) [clone .part.0]+0x34>
    7900:	ldr	r3, [r2, #116]	; 0x74
  }
  else
  {
    digitalWriteFast(m_chipSelectPin, LOW);
  }
}
    7902:	ldr.w	r4, [sp], #4
    7906:	bx	lr
    7908:	.word	0x200017f8
    790c:	.word	0x20000774
    7910:	.word	0x200041c8

00007914 <spi_transfer(void const*, void*, unsigned int) [clone .part.4]>:
		uint8_t *p_read = (uint8_t*)retbuf;
		size_t count_read = count;

	  // Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	  // Lets clear the reader queue
	  spi->CR = LPSPI_CR_RRF | LPSPI_CR_MEN;  // clear the queue and make sure still enabled. 
    7914:	ldr	r3, [pc, #80]	; (7968 <spi_transfer(void const*, void*, unsigned int) [clone .part.4]+0x54>)
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
		if (fifo > 0) return spi->RDR; 
	  } 
	} 

	void spi_transfer(const void * buf, void * retbuf, size_t count)
    7916:	push	{r4, r5}
		uint8_t *p_read = (uint8_t*)retbuf;
		size_t count_read = count;

	  // Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	  // Lets clear the reader queue
	  spi->CR = LPSPI_CR_RRF | LPSPI_CR_MEN;  // clear the queue and make sure still enabled. 
    7918:	ldr	r3, [r3, #0]
    791a:	movw	r4, #513	; 0x201
    791e:	str	r4, [r3, #16]

	  while (count > 0) {
    7920:	cbz	r2, 7964 <spi_transfer(void const*, void*, unsigned int) [clone .part.4]+0x50>
    7922:	mov	r5, r2
		// Push out the next byte; 
		spi->TDR = p_write? *p_write++ : 0xff;
    7924:	cbz	r0, 7960 <spi_transfer(void const*, void*, unsigned int) [clone .part.4]+0x4c>
    7926:	ldrb	r4, [r0, #0]
    7928:	adds	r0, #1
		count--; // how many bytes left to output.
    792a:	subs	r5, #1
	  // Lets clear the reader queue
	  spi->CR = LPSPI_CR_RRF | LPSPI_CR_MEN;  // clear the queue and make sure still enabled. 

	  while (count > 0) {
		// Push out the next byte; 
		spi->TDR = p_write? *p_write++ : 0xff;
    792c:	str	r4, [r3, #100]	; 0x64
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
		  if ((spi->RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    792e:	ldr	r4, [r3, #112]	; 0x70
    7930:	lsls	r4, r4, #30
    7932:	bmi.n	7940 <spi_transfer(void const*, void*, unsigned int) [clone .part.4]+0x2c>
			uint8_t b = spi->RDR;  // Read any pending RX bytes in
    7934:	ldr	r4, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
			count_read--;
    7936:	subs	r2, #1
		spi->TDR = p_write? *p_write++ : 0xff;
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
		  if ((spi->RSR & LPSPI_RSR_RXEMPTY) == 0)  {
			uint8_t b = spi->RDR;  // Read any pending RX bytes in
    7938:	uxtb	r4, r4
			if (p_read) *p_read++ = b; 
    793a:	cbz	r1, 7940 <spi_transfer(void const*, void*, unsigned int) [clone .part.4]+0x2c>
    793c:	strb	r4, [r1, #0]
    793e:	adds	r1, #1
			count_read--;
		  }
		} while ((spi->SR & LPSPI_SR_TDF) == 0) ;
    7940:	ldr	r4, [r3, #20]
	  while (count > 0) {
		// Push out the next byte; 
		spi->TDR = p_write? *p_write++ : 0xff;
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
    7942:	lsls	r4, r4, #31
    7944:	bpl.n	792e <spi_transfer(void const*, void*, unsigned int) [clone .part.4]+0x1a>

	  // Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	  // Lets clear the reader queue
	  spi->CR = LPSPI_CR_RRF | LPSPI_CR_MEN;  // clear the queue and make sure still enabled. 

	  while (count > 0) {
    7946:	cmp	r5, #0
    7948:	bne.n	7924 <spi_transfer(void const*, void*, unsigned int) [clone .part.4]+0x10>
		} while ((spi->SR & LPSPI_SR_TDF) == 0) ;

	  }

	  // now lets wait for all of the read bytes to be returned...
	  while (count_read) {
    794a:	cbz	r2, 7964 <spi_transfer(void const*, void*, unsigned int) [clone .part.4]+0x50>
		if ((spi->RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    794c:	ldr	r0, [r3, #112]	; 0x70
    794e:	lsls	r0, r0, #30
    7950:	bmi.n	794c <spi_transfer(void const*, void*, unsigned int) [clone .part.4]+0x38>
		  uint8_t b = spi->RDR;  // Read any pending RX bytes in
    7952:	ldr	r0, [r3, #116]	; 0x74
    7954:	uxtb	r0, r0
		  if (p_read) *p_read++ = b; 
    7956:	cbz	r1, 795c <spi_transfer(void const*, void*, unsigned int) [clone .part.4]+0x48>
    7958:	strb	r0, [r1, #0]
    795a:	adds	r1, #1
		  count_read--;
    795c:	subs	r2, #1
    795e:	b.n	794a <spi_transfer(void const*, void*, unsigned int) [clone .part.4]+0x36>
	  // Lets clear the reader queue
	  spi->CR = LPSPI_CR_RRF | LPSPI_CR_MEN;  // clear the queue and make sure still enabled. 

	  while (count > 0) {
		// Push out the next byte; 
		spi->TDR = p_write? *p_write++ : 0xff;
    7960:	movs	r4, #255	; 0xff
    7962:	b.n	792a <spi_transfer(void const*, void*, unsigned int) [clone .part.4]+0x16>
		  uint8_t b = spi->RDR;  // Read any pending RX bytes in
		  if (p_read) *p_read++ = b; 
		  count_read--;
		}
	  }
	}
    7964:	pop	{r4, r5}
    7966:	bx	lr
    7968:	.word	0x200041c8

0000796c <SPI_disk_ioctl(unsigned char, unsigned char*)>:
    return res;
}
void sd_setChipSelect(uint16_t pin);

DRESULT SPI_disk_ioctl(BYTE cmd, BYTE *buff)
{	if(cmd==1) sd_setChipSelect(*(uint16_t*) buff);
    796c:	cmp	r0, #1
    796e:	bne.n	7976 <SPI_disk_ioctl(unsigned char, unsigned char*)+0xa>
    7970:	ldrh	r2, [r1, #0]
void sd_setType(uint16_t type) {m_sd_type=type;}
uint16_t sd_getType(void) {return m_sd_type;}

void sd_enableChipSelect(void) {m_enableChipSelect=true;}
void sd_disableChipSelect(void) {m_enableChipSelect=false;}
void sd_setChipSelect(uint16_t pin) {m_chipSelectPin=pin;}
    7972:	ldr	r3, [pc, #8]	; (797c <SPI_disk_ioctl(unsigned char, unsigned char*)+0x10>)
    7974:	strh	r2, [r3, #0]
void sd_setChipSelect(uint16_t pin);

DRESULT SPI_disk_ioctl(BYTE cmd, BYTE *buff)
{	if(cmd==1) sd_setChipSelect(*(uint16_t*) buff);
    return RES_OK;
}
    7976:	movs	r0, #0
    7978:	bx	lr
    797a:	nop
    797c:	.word	0x200017f8

00007980 <sd_waitNotBusy(unsigned short)>:
}

//------------------------------------------------------------------------------
// wait for card to become ready
uint16_t sd_waitNotBusy(uint16_t timeoutMillis) 
{
    7980:	push	{r4, r5}
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
    7982:	ldr	r4, [pc, #52]	; (79b8 <sd_waitNotBusy(unsigned short)+0x38>)
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7984:	movs	r5, #255	; 0xff
    7986:	ldr	r3, [pc, #52]	; (79bc <sd_waitNotBusy(unsigned short)+0x3c>)
    7988:	ldr	r1, [r4, #0]
    798a:	ldr	r2, [r3, #0]
{
  uint16_t t0;
  uint16_t ret;
  t0  = millis();
  while ((ret=spi_receive()) != 0XFF) 
  { if (((uint16_t)millis() - t0) >= timeoutMillis) return FALSE;
    798c:	uxth	r1, r1
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    798e:	str	r5, [r2, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7990:	ldr	r3, [r2, #92]	; 0x5c
		if (fifo > 0) return spi->RDR; 
    7992:	tst.w	r3, #2031616	; 0x1f0000
    7996:	beq.n	7990 <sd_waitNotBusy(unsigned short)+0x10>
    7998:	ldr	r3, [r2, #116]	; 0x74
uint16_t sd_waitNotBusy(uint16_t timeoutMillis) 
{
  uint16_t t0;
  uint16_t ret;
  t0  = millis();
  while ((ret=spi_receive()) != 0XFF) 
    799a:	uxtb	r3, r3
    799c:	cmp	r3, #255	; 0xff
    799e:	beq.n	79b0 <sd_waitNotBusy(unsigned short)+0x30>
    79a0:	ldr	r3, [r4, #0]
  { if (((uint16_t)millis() - t0) >= timeoutMillis) return FALSE;
    79a2:	uxth	r3, r3
    79a4:	subs	r3, r3, r1
    79a6:	cmp	r3, r0
    79a8:	blt.n	798e <sd_waitNotBusy(unsigned short)+0xe>
    79aa:	movs	r0, #0
  }
  return TRUE;
}
    79ac:	pop	{r4, r5}
    79ae:	bx	lr
  uint16_t ret;
  t0  = millis();
  while ((ret=spi_receive()) != 0XFF) 
  { if (((uint16_t)millis() - t0) >= timeoutMillis) return FALSE;
  }
  return TRUE;
    79b0:	movs	r0, #1
}
    79b2:	pop	{r4, r5}
    79b4:	bx	lr
    79b6:	nop
    79b8:	.word	0x2000c320
    79bc:	.word	0x200041c8

000079c0 <sd_cardCommand(unsigned char, unsigned long)>:

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    79c0:	ldr	r3, [pc, #224]	; (7aa4 <sd_cardCommand(unsigned char, unsigned long)+0xe4>)
  }
}

// send command and return error code.  Return zero for OK
uint8_t sd_cardCommand(uint8_t cmd, uint32_t arg) 
{ uint8_t d[6], *pa, kk;
    79c2:	push	{r4, r5, r6, r7, lr}
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    79c4:	ldrh	r3, [r3, #0]
  }
}

// send command and return error code.  Return zero for OK
uint8_t sd_cardCommand(uint8_t cmd, uint32_t arg) 
{ uint8_t d[6], *pa, kk;
    79c6:	sub	sp, #20
    79c8:	mov	r4, r0
    79ca:	str	r1, [sp, #4]
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    79cc:	cmp	r3, #0
    79ce:	bne.n	7a8a <sd_cardCommand(unsigned char, unsigned long)+0xca>
  pa = (uint8_t *)(&arg);
  // select card
  sd_chipSelect(LOW);

  // wait if busy
  sd_waitNotBusy(SD_CMD_TIMEOUT);
    79d0:	mov.w	r0, #2000	; 0x7d0
  // form message
  d[0]=cmd | 0x40;
    79d4:	orr.w	r7, r4, #64	; 0x40
  pa = (uint8_t *)(&arg);
  // select card
  sd_chipSelect(LOW);

  // wait if busy
  sd_waitNotBusy(SD_CMD_TIMEOUT);
    79d8:	bl	7980 <sd_waitNotBusy(unsigned short)>
    79dc:	add	r6, sp, #8
  // form message
  d[0]=cmd | 0x40;
  for(kk=1;kk<5;kk++) d[kk]=pa[4-kk];
    79de:	ldrb.w	r3, [sp, #7]
    79e2:	mov	r1, r7
    79e4:	ldrb.w	r2, [sp, #5]
    79e8:	mov	lr, r6
    79ea:	ldrb.w	r0, [sp, #6]
    79ee:	add.w	ip, sp, #12
    79f2:	strb.w	r3, [sp, #9]
    79f6:	movs	r3, #0
    79f8:	strb.w	r2, [sp, #11]
    79fc:	ldrb.w	r2, [sp, #4]
  sd_chipSelect(LOW);

  // wait if busy
  sd_waitNotBusy(SD_CMD_TIMEOUT);
  // form message
  d[0]=cmd | 0x40;
    7a00:	strb.w	r7, [sp, #8]
  for(kk=1;kk<5;kk++) d[kk]=pa[4-kk];
    7a04:	strb.w	r0, [sp, #10]
    7a08:	strb.w	r2, [sp, #12]
    7a0c:	movs	r2, #8
    uint8_t ii,jj;
    for (ii = 0; ii < n; ii++) 
    {
    uint8_t d = data[ii];
    for (jj = 0; jj < 8; jj++) {
      crc <<= 1;
    7a0e:	lsls	r3, r3, #1
    7a10:	subs	r2, #1
      if ((d & 0x80) ^ (crc & 0x80)) crc ^= 0x09;
      d <<= 1;
    7a12:	lsls	r5, r1, #1
    uint8_t ii,jj;
    for (ii = 0; ii < n; ii++) 
    {
    uint8_t d = data[ii];
    for (jj = 0; jj < 8; jj++) {
      crc <<= 1;
    7a14:	uxtb	r3, r3
      if ((d & 0x80) ^ (crc & 0x80)) crc ^= 0x09;
    7a16:	eor.w	r0, r3, r1
      d <<= 1;
    7a1a:	uxtb	r1, r5
    for (ii = 0; ii < n; ii++) 
    {
    uint8_t d = data[ii];
    for (jj = 0; jj < 8; jj++) {
      crc <<= 1;
      if ((d & 0x80) ^ (crc & 0x80)) crc ^= 0x09;
    7a1c:	lsls	r0, r0, #24
    7a1e:	it	mi
    7a20:	eormi.w	r3, r3, #9
    uint8_t crc = 0;
    uint8_t ii,jj;
    for (ii = 0; ii < n; ii++) 
    {
    uint8_t d = data[ii];
    for (jj = 0; jj < 8; jj++) {
    7a24:	ands.w	r2, r2, #255	; 0xff
    7a28:	bne.n	7a0e <sd_cardCommand(unsigned char, unsigned long)+0x4e>
  //------------------------------------------------------------------------------
  // CRC functions
  static uint8_t CRC7(const uint8_t* data, uint8_t n) {
    uint8_t crc = 0;
    uint8_t ii,jj;
    for (ii = 0; ii < n; ii++) 
    7a2a:	cmp	lr, ip
    7a2c:	beq.n	7a34 <sd_cardCommand(unsigned char, unsigned long)+0x74>
    7a2e:	ldrb.w	r1, [lr, #1]!
    7a32:	b.n	7a0c <sd_cardCommand(unsigned char, unsigned long)+0x4c>
  // form message
  d[0]=cmd | 0x40;
  for(kk=1;kk<5;kk++) d[kk]=pa[4-kk];
  
#ifdef USE_SD_CRC  // add crc
  d[5] = CRC7(d, 5);
    7a34:	lsls	r3, r3, #1
    7a36:	ldr	r2, [pc, #112]	; (7aa8 <sd_cardCommand(unsigned char, unsigned long)+0xe8>)
    7a38:	add	r1, sp, #16
    7a3a:	orr.w	r3, r3, #1
    7a3e:	ldr	r2, [r2, #0]
    7a40:	strb.w	r3, [r1, #-3]!
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7a44:	str	r7, [r2, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7a46:	ldr	r3, [r2, #92]	; 0x5c
		if (fifo > 0) return spi->RDR; 
    7a48:	tst.w	r3, #2031616	; 0x1f0000
    7a4c:	beq.n	7a46 <sd_cardCommand(unsigned char, unsigned long)+0x86>
#else
  d[5]=((cmd == CMD0) ? 0X95 : 0X87);
#endif  // USE_SD_CRC

  // send message
  for (kk = 0; kk < 6; kk++) spi_send(d[kk]);
    7a4e:	cmp	r6, r1
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
		if (fifo > 0) return spi->RDR; 
    7a50:	ldr	r3, [r2, #116]	; 0x74
#else
  d[5]=((cmd == CMD0) ? 0X95 : 0X87);
#endif  // USE_SD_CRC

  // send message
  for (kk = 0; kk < 6; kk++) spi_send(d[kk]);
    7a52:	beq.n	7a5a <sd_cardCommand(unsigned char, unsigned long)+0x9a>
    7a54:	ldrb.w	r7, [r6, #1]!
    7a58:	b.n	7a44 <sd_cardCommand(unsigned char, unsigned long)+0x84>

  // skip stuff byte for stop read
  if (cmd == CMD12) spi_receive();
    7a5a:	cmp	r4, #12
    7a5c:	beq.n	7a92 <sd_cardCommand(unsigned char, unsigned long)+0xd2>

  // wait if busy
  sd_waitNotBusy(SD_CMD_TIMEOUT);
  // form message
  d[0]=cmd | 0x40;
  for(kk=1;kk<5;kk++) d[kk]=pa[4-kk];
    7a5e:	movs	r1, #0
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7a60:	movs	r5, #255	; 0xff
    7a62:	str	r5, [r2, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7a64:	ldr	r3, [r2, #92]	; 0x5c
		if (fifo > 0) return spi->RDR; 
    7a66:	tst.w	r3, #2031616	; 0x1f0000
    7a6a:	beq.n	7a64 <sd_cardCommand(unsigned char, unsigned long)+0xa4>

  // skip stuff byte for stop read
  if (cmd == CMD12) spi_receive();

  // wait for response
  for (kk = 0; ((m_sd_status = spi_receive()) & 0X80) && kk != 0XFF; kk++);
    7a6c:	uxtb	r3, r1
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
		if (fifo > 0) return spi->RDR; 
    7a6e:	ldr	r0, [r2, #116]	; 0x74

  // skip stuff byte for stop read
  if (cmd == CMD12) spi_receive();

  // wait for response
  for (kk = 0; ((m_sd_status = spi_receive()) & 0X80) && kk != 0XFF; kk++);
    7a70:	adds	r1, #1
    7a72:	subs	r3, #255	; 0xff
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
		if (fifo > 0) return spi->RDR; 
    7a74:	uxtb	r0, r0

  // skip stuff byte for stop read
  if (cmd == CMD12) spi_receive();

  // wait for response
  for (kk = 0; ((m_sd_status = spi_receive()) & 0X80) && kk != 0XFF; kk++);
    7a76:	it	ne
    7a78:	movne	r3, #1
    7a7a:	uxth	r4, r0
    7a7c:	ands.w	r3, r3, r0, lsr #7
    7a80:	bne.n	7a62 <sd_cardCommand(unsigned char, unsigned long)+0xa2>
    7a82:	ldr	r3, [pc, #40]	; (7aac <sd_cardCommand(unsigned char, unsigned long)+0xec>)
    7a84:	strh	r4, [r3, #0]
  return m_sd_status;
} 
    7a86:	add	sp, #20
    7a88:	pop	{r4, r5, r6, r7, pc}
    7a8a:	movs	r0, #0
    7a8c:	bl	78c4 <sd_chipSelect(unsigned short) [clone .part.0]>
    7a90:	b.n	79d0 <sd_cardCommand(unsigned char, unsigned long)+0x10>
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7a92:	movs	r3, #255	; 0xff
    7a94:	str	r3, [r2, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7a96:	ldr	r3, [r2, #92]	; 0x5c
		if (fifo > 0) return spi->RDR; 
    7a98:	tst.w	r3, #2031616	; 0x1f0000
    7a9c:	beq.n	7a96 <sd_cardCommand(unsigned char, unsigned long)+0xd6>
    7a9e:	ldr	r3, [r2, #116]	; 0x74
    7aa0:	b.n	7a5e <sd_cardCommand(unsigned char, unsigned long)+0x9e>
    7aa2:	nop
    7aa4:	.word	0x200017fa
    7aa8:	.word	0x200041c8
    7aac:	.word	0x2000ed82

00007ab0 <sd_readData(unsigned char*, unsigned int)>:
  // wait for response
  for (kk = 0; ((m_sd_status = spi_receive()) & 0X80) && kk != 0XFF; kk++);
  return m_sd_status;
} 

uint16_t sd_readData(uint8_t* dst, size_t count) {
    7ab0:	push	{r3, r4, r5, r6, r7, lr}
    7ab2:	ldr	r7, [pc, #216]	; (7b8c <sd_readData(unsigned char*, unsigned int)+0xdc>)
    7ab4:	mov	r5, r0
    7ab6:	ldr	r3, [pc, #216]	; (7b90 <sd_readData(unsigned char*, unsigned int)+0xe0>)
    7ab8:	mov	r6, r1
    7aba:	ldr	r2, [r7, #0]
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7abc:	movs	r0, #255	; 0xff
    7abe:	ldr	r4, [r3, #0]
  uint16_t crc;
#endif  // USE_SD_CRC
  // wait for start block token
  uint16_t t0 = millis();
  while ((m_sd_status = spi_receive()) == 0XFF) {
    if (((uint16_t)millis() - t0) > SD_READ_TIMEOUT) {
    7ac0:	uxth	r2, r2
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7ac2:	str	r0, [r4, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7ac4:	ldr	r3, [r4, #92]	; 0x5c
		if (fifo > 0) return spi->RDR; 
    7ac6:	tst.w	r3, #2031616	; 0x1f0000
    7aca:	beq.n	7ac4 <sd_readData(unsigned char*, unsigned int)+0x14>
    7acc:	ldr	r3, [r4, #116]	; 0x74
    7ace:	uxtb	r3, r3
#ifdef USE_SD_CRC
  uint16_t crc;
#endif  // USE_SD_CRC
  // wait for start block token
  uint16_t t0 = millis();
  while ((m_sd_status = spi_receive()) == 0XFF) {
    7ad0:	cmp	r3, #255	; 0xff
    7ad2:	uxth	r1, r3
    7ad4:	bne.n	7af4 <sd_readData(unsigned char*, unsigned int)+0x44>
    7ad6:	ldr	r3, [r7, #0]
    if (((uint16_t)millis() - t0) > SD_READ_TIMEOUT) {
    7ad8:	uxth	r3, r3
    7ada:	subs	r3, r3, r2
    7adc:	cmp.w	r3, #300	; 0x12c
    7ae0:	ble.n	7ac2 <sd_readData(unsigned char*, unsigned int)+0x12>
    7ae2:	ldr	r0, [pc, #176]	; (7b94 <sd_readData(unsigned char*, unsigned int)+0xe4>)
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    7ae4:	movs	r2, #17
    7ae6:	ldr	r3, [pc, #176]	; (7b98 <sd_readData(unsigned char*, unsigned int)+0xe8>)
    7ae8:	strh	r1, [r0, #0]
    7aea:	strh	r2, [r3, #0]
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7aec:	ldr	r3, [pc, #172]	; (7b9c <sd_readData(unsigned char*, unsigned int)+0xec>)
    7aee:	ldrh	r0, [r3, #0]
    7af0:	cbnz	r0, 7b0a <sd_readData(unsigned char*, unsigned int)+0x5a>
  return TRUE;

 fail:
  sd_chipSelect(HIGH);
  return FALSE;
}
    7af2:	pop	{r3, r4, r5, r6, r7, pc}
    7af4:	ldr	r7, [pc, #156]	; (7b94 <sd_readData(unsigned char*, unsigned int)+0xe4>)
    if (((uint16_t)millis() - t0) > SD_READ_TIMEOUT) {
      sd_setError(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  if (m_sd_status != DATA_START_BLOCK) {
    7af6:	cmp	r1, #254	; 0xfe
    7af8:	strh	r1, [r7, #0]
    7afa:	beq.n	7b14 <sd_readData(unsigned char*, unsigned int)+0x64>
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    7afc:	ldr	r3, [pc, #152]	; (7b98 <sd_readData(unsigned char*, unsigned int)+0xe8>)
    7afe:	movs	r2, #15
    7b00:	strh	r2, [r3, #0]
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7b02:	ldr	r3, [pc, #152]	; (7b9c <sd_readData(unsigned char*, unsigned int)+0xec>)
    7b04:	ldrh	r0, [r3, #0]
    7b06:	cmp	r0, #0
    7b08:	beq.n	7af2 <sd_readData(unsigned char*, unsigned int)+0x42>
    7b0a:	movs	r0, #1
    7b0c:	bl	78c4 <sd_chipSelect(unsigned short) [clone .part.0]>
  sd_chipSelect(HIGH);
  return TRUE;

 fail:
  sd_chipSelect(HIGH);
  return FALSE;
    7b10:	movs	r0, #0
    7b12:	pop	{r3, r4, r5, r6, r7, pc}
	  } 
	} 

	void spi_transfer(const void * buf, void * retbuf, size_t count)
	{
	  if (count == 0) return;
    7b14:	cbnz	r6, 7b6a <sd_readData(unsigned char*, unsigned int)+0xba>
  if (m_sd_status != DATA_START_BLOCK) {
    sd_setError(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_sd_status = spi_receiveBulk(dst, count))) {
    7b16:	movs	r2, #0
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7b18:	movs	r3, #255	; 0xff
  if (m_sd_status != DATA_START_BLOCK) {
    sd_setError(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_sd_status = spi_receiveBulk(dst, count))) {
    7b1a:	strh	r2, [r7, #0]
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7b1c:	str	r3, [r4, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7b1e:	ldr	r3, [r4, #92]	; 0x5c
		if (fifo > 0) return spi->RDR; 
    7b20:	tst.w	r3, #2031616	; 0x1f0000
    7b24:	beq.n	7b1e <sd_readData(unsigned char*, unsigned int)+0x6e>
    7b26:	ldr	r0, [r4, #116]	; 0x74
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7b28:	movs	r3, #255	; 0xff
    goto fail;
  }

#ifdef USE_SD_CRC
  // get crc
  crc = (spi_receive() << 8) | spi_receive();
    7b2a:	lsls	r0, r0, #8
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7b2c:	str	r3, [r4, #100]	; 0x64
    goto fail;
  }

#ifdef USE_SD_CRC
  // get crc
  crc = (spi_receive() << 8) | spi_receive();
    7b2e:	sxth	r0, r0
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7b30:	ldr	r3, [r4, #92]	; 0x5c
		if (fifo > 0) return spi->RDR; 
    7b32:	tst.w	r3, #2031616	; 0x1f0000
    7b36:	beq.n	7b30 <sd_readData(unsigned char*, unsigned int)+0x80>
    7b38:	ldr	r3, [r4, #116]	; 0x74
    goto fail;
  }

#ifdef USE_SD_CRC
  // get crc
  crc = (spi_receive() << 8) | spi_receive();
    7b3a:	uxtb	r3, r3
    7b3c:	orrs	r0, r3
    7b3e:	uxth	r0, r0
    };

    static uint16_t CRC_CCITT(const uint8_t* data, size_t n) {
      uint16_t crc = 0;
      size_t ii;
      for (ii = 0; ii < n; ii++) {
    7b40:	cbz	r6, 7b88 <sd_readData(unsigned char*, unsigned int)+0xd8>
    7b42:	movs	r3, #0
    7b44:	ldr	r1, [pc, #88]	; (7ba0 <sd_readData(unsigned char*, unsigned int)+0xf0>)
    7b46:	add	r6, r5
      crc = crctab[(crc >> 8 ^ data[ii]) & 0XFF] ^ (crc << 8);
    7b48:	ldrb.w	r2, [r5], #1
    7b4c:	eor.w	r2, r2, r3, asr #8
    };

    static uint16_t CRC_CCITT(const uint8_t* data, size_t n) {
      uint16_t crc = 0;
      size_t ii;
      for (ii = 0; ii < n; ii++) {
    7b50:	cmp	r6, r5
      crc = crctab[(crc >> 8 ^ data[ii]) & 0XFF] ^ (crc << 8);
    7b52:	ldrh.w	r2, [r1, r2, lsl #1]
    7b56:	eor.w	r3, r2, r3, lsl #8
    7b5a:	uxth	r3, r3
    };

    static uint16_t CRC_CCITT(const uint8_t* data, size_t n) {
      uint16_t crc = 0;
      size_t ii;
      for (ii = 0; ii < n; ii++) {
    7b5c:	bne.n	7b48 <sd_readData(unsigned char*, unsigned int)+0x98>
  }

#ifdef USE_SD_CRC
  // get crc
  crc = (spi_receive() << 8) | spi_receive();
  if (crc != CRC_CCITT(dst, count)) {
    7b5e:	cmp	r0, r3
    7b60:	beq.n	7b76 <sd_readData(unsigned char*, unsigned int)+0xc6>
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    7b62:	ldr	r3, [pc, #52]	; (7b98 <sd_readData(unsigned char*, unsigned int)+0xe8>)
    7b64:	movs	r2, #27
    7b66:	strh	r2, [r3, #0]
    7b68:	b.n	7aec <sd_readData(unsigned char*, unsigned int)+0x3c>
    7b6a:	mov	r2, r6
    7b6c:	mov	r1, r5
    7b6e:	movs	r0, #0
    7b70:	bl	7914 <spi_transfer(void const*, void*, unsigned int) [clone .part.4]>
    7b74:	b.n	7b16 <sd_readData(unsigned char*, unsigned int)+0x66>
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7b76:	ldr	r3, [pc, #36]	; (7b9c <sd_readData(unsigned char*, unsigned int)+0xec>)
  spi_receive();
  spi_receive();
#endif  // USE_SD_CRC

  sd_chipSelect(HIGH);
  return TRUE;
    7b78:	movs	r0, #1
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7b7a:	ldrh	r3, [r3, #0]
    7b7c:	cmp	r3, #0
    7b7e:	beq.n	7af2 <sd_readData(unsigned char*, unsigned int)+0x42>
    7b80:	bl	78c4 <sd_chipSelect(unsigned short) [clone .part.0]>
  spi_receive();
  spi_receive();
#endif  // USE_SD_CRC

  sd_chipSelect(HIGH);
  return TRUE;
    7b84:	movs	r0, #1
    7b86:	pop	{r3, r4, r5, r6, r7, pc}
      0xEF1F, 0xFF3E, 0xCF5D, 0xDF7C, 0xAF9B, 0xBFBA, 0x8FD9, 0x9FF8,
      0x6E17, 0x7E36, 0x4E55, 0x5E74, 0x2E93, 0x3EB2, 0x0ED1, 0x1EF0
    };

    static uint16_t CRC_CCITT(const uint8_t* data, size_t n) {
      uint16_t crc = 0;
    7b88:	mov	r3, r6
    7b8a:	b.n	7b5e <sd_readData(unsigned char*, unsigned int)+0xae>
    7b8c:	.word	0x2000c320
    7b90:	.word	0x200041c8
    7b94:	.word	0x2000ed82
    7b98:	.word	0x2000ed80
    7b9c:	.word	0x200017fa
    7ba0:	.word	0x2000042c

00007ba4 <sd_readRegister(unsigned char, void*)>:
  return FALSE;
}

// read CID or CSR register
uint16_t sd_readRegister(uint8_t cmd, void* buf) 
{
    7ba4:	push	{r4, lr}
    7ba6:	mov	r4, r1
    uint8_t* dst = (uint8_t*)(buf);
  uint16_t ret=sd_cardCommand(cmd, 0);
    7ba8:	movs	r1, #0
    7baa:	bl	79c0 <sd_cardCommand(unsigned char, unsigned long)>
    if (ret) 
    7bae:	cbz	r0, 7bc0 <sd_readRegister(unsigned char, void*)+0x1c>
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7bb0:	ldr	r3, [pc, #36]	; (7bd8 <sd_readRegister(unsigned char, void*)+0x34>)
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    7bb2:	movs	r1, #16
    7bb4:	ldr	r2, [pc, #36]	; (7bdc <sd_readRegister(unsigned char, void*)+0x38>)
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7bb6:	ldrh	r3, [r3, #0]
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    7bb8:	strh	r1, [r2, #0]
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7bba:	cbnz	r3, 7bcc <sd_readRegister(unsigned char, void*)+0x28>
    sd_chipSelect(HIGH);
    return FALSE;
    }
  ret= sd_readData(dst, 16);
  return ret;
}
    7bbc:	movs	r0, #0
    7bbe:	pop	{r4, pc}
    if (ret) 
  {   sd_setError(SD_CARD_ERROR_READ_REG);
    sd_chipSelect(HIGH);
    return FALSE;
    }
  ret= sd_readData(dst, 16);
    7bc0:	mov	r0, r4
    7bc2:	movs	r1, #16
  return ret;
}
    7bc4:	ldmia.w	sp!, {r4, lr}
    if (ret) 
  {   sd_setError(SD_CARD_ERROR_READ_REG);
    sd_chipSelect(HIGH);
    return FALSE;
    }
  ret= sd_readData(dst, 16);
    7bc8:	b.w	7ab0 <sd_readData(unsigned char*, unsigned int)>
    7bcc:	movs	r0, #1
    7bce:	bl	78c4 <sd_chipSelect(unsigned short) [clone .part.0]>
  return ret;
}
    7bd2:	movs	r0, #0
    7bd4:	pop	{r4, pc}
    7bd6:	nop
    7bd8:	.word	0x200017fa
    7bdc:	.word	0x2000ed80

00007be0 <sd_connect()>:
 * can be determined by calling errorCode() and errorData().
 */
 uint8_t sdCommandAndResponse(uint8_t cmd, uint32_t param);
 
int sd_connect()
{ int kk;
    7be0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7be4:	ldr	r5, [pc, #376]	; (7d60 <sd_connect()+0x180>)
    7be6:	ldr	r4, [pc, #380]	; (7d64 <sd_connect()+0x184>)
    7be8:	ldrh	r3, [r5, #0]
    7bea:	ldr	r6, [r4, #0]
    7bec:	cmp	r3, #0
    7bee:	bne.n	7c5e <sd_connect()+0x7e>
  t0  = (uint16_t)millis();
  uint32_t arg;
  // uint8_t ret;
  // command to go idle in SPI mode
  sd_chipSelect(LOW);
  while (sd_cardCommand(CMD0, 0) != R1_IDLE_STATE) 
    7bf0:	movs	r1, #0
  {
    t1=(uint16_t)millis();
    if ((t1- t0) > SD_INIT_TIMEOUT) {
    7bf2:	uxth	r6, r6
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7bf4:	ldr	r7, [pc, #368]	; (7d68 <sd_connect()+0x188>)
  t0  = (uint16_t)millis();
  uint32_t arg;
  // uint8_t ret;
  // command to go idle in SPI mode
  sd_chipSelect(LOW);
  while (sd_cardCommand(CMD0, 0) != R1_IDLE_STATE) 
    7bf6:	mov	r0, r1
    7bf8:	bl	79c0 <sd_cardCommand(unsigned char, unsigned long)>
    7bfc:	cmp	r0, #1
    7bfe:	beq.n	7c28 <sd_connect()+0x48>
    7c00:	ldr	r3, [r4, #0]
  {
    t1=(uint16_t)millis();
    if ((t1- t0) > SD_INIT_TIMEOUT) {
    7c02:	uxth	r3, r3
    7c04:	subs	r3, r3, r6
    7c06:	cmp.w	r3, #4000	; 0xfa0
    7c0a:	bgt.n	7c4a <sd_connect()+0x6a>
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7c0c:	ldr	r2, [r7, #0]
    7c0e:	movs	r3, #255	; 0xff
    7c10:	str	r3, [r2, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7c12:	ldr	r3, [r2, #92]	; 0x5c
		if (fifo > 0) return spi->RDR; 
    7c14:	tst.w	r3, #2031616	; 0x1f0000
    7c18:	beq.n	7c12 <sd_connect()+0x32>
  t0  = (uint16_t)millis();
  uint32_t arg;
  // uint8_t ret;
  // command to go idle in SPI mode
  sd_chipSelect(LOW);
  while (sd_cardCommand(CMD0, 0) != R1_IDLE_STATE) 
    7c1a:	movs	r1, #0
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
		if (fifo > 0) return spi->RDR; 
    7c1c:	ldr	r3, [r2, #116]	; 0x74
  t0  = (uint16_t)millis();
  uint32_t arg;
  // uint8_t ret;
  // command to go idle in SPI mode
  sd_chipSelect(LOW);
  while (sd_cardCommand(CMD0, 0) != R1_IDLE_STATE) 
    7c1e:	mov	r0, r1
    7c20:	bl	79c0 <sd_cardCommand(unsigned char, unsigned long)>
    7c24:	cmp	r0, #1
    7c26:	bne.n	7c00 <sd_connect()+0x20>
    }
   spi_send(0XFF);
  }
  
#ifdef USE_SD_CRC
  if (sd_cardCommand(CMD59, 1) != R1_IDLE_STATE) {
    7c28:	mov	r1, r0
    7c2a:	movs	r0, #59	; 0x3b
    7c2c:	bl	79c0 <sd_cardCommand(unsigned char, unsigned long)>
    7c30:	cmp	r0, #1
    7c32:	beq.n	7c66 <sd_connect()+0x86>
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    7c34:	ldr	r3, [pc, #308]	; (7d6c <sd_connect()+0x18c>)
    7c36:	movs	r2, #26
    7c38:	strh	r2, [r3, #0]
  
  sd_chipSelect(HIGH);
  return TRUE;

  fail:
  Serial.printf("E connect %d\n", m_sd_errorCode);
    7c3a:	ldr	r1, [pc, #308]	; (7d70 <sd_connect()+0x190>)
    7c3c:	ldr	r0, [pc, #308]	; (7d74 <sd_connect()+0x194>)
    7c3e:	bl	a610 <Print::printf(char const*, ...)>
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7c42:	ldrh	r0, [r5, #0]
    7c44:	cbnz	r0, 7c52 <sd_connect()+0x72>

  fail:
  Serial.printf("E connect %d\n", m_sd_errorCode);
  sd_chipSelect(HIGH);
  return FALSE;
}
    7c46:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    7c4a:	ldr	r3, [pc, #288]	; (7d6c <sd_connect()+0x18c>)
    7c4c:	movs	r2, #1
    7c4e:	strh	r2, [r3, #0]
    7c50:	b.n	7c3a <sd_connect()+0x5a>
    7c52:	movs	r0, #1
    7c54:	bl	78c4 <sd_chipSelect(unsigned short) [clone .part.0]>
  return TRUE;

  fail:
  Serial.printf("E connect %d\n", m_sd_errorCode);
  sd_chipSelect(HIGH);
  return FALSE;
    7c58:	movs	r0, #0
    7c5a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7c5e:	movs	r0, #0
    7c60:	bl	78c4 <sd_chipSelect(unsigned short) [clone .part.0]>
    7c64:	b.n	7bf0 <sd_connect()+0x10>
    7c66:	ldr	r7, [r4, #0]
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7c68:	mov.w	r8, #255	; 0xff
    7c6c:	ldr	r6, [pc, #248]	; (7d68 <sd_connect()+0x188>)

  // check SD version
  t0  = (uint16_t)millis();
  while (1) 
  {
    if (sd_cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) 
    7c6e:	mov.w	r1, #426	; 0x1aa
    7c72:	movs	r0, #8
    7c74:	bl	79c0 <sd_cardCommand(unsigned char, unsigned long)>
    7c78:	cmp	r0, #5
    7c7a:	beq.n	7cf6 <sd_connect()+0x116>
    7c7c:	ldr	r2, [r6, #0]
    7c7e:	movs	r1, #4
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7c80:	str.w	r8, [r2, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7c84:	ldr	r3, [r2, #92]	; 0x5c
		if (fifo > 0) return spi->RDR; 
    7c86:	tst.w	r3, #2031616	; 0x1f0000
    7c8a:	beq.n	7c84 <sd_connect()+0xa4>
    7c8c:	ldr	r3, [r2, #116]	; 0x74
    if (sd_cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) 
  	{
      sd_setType(SD_CARD_TYPE_SD1);
      break;
    }
    for (kk = 0; kk < 4; kk++) m_sd_status = spi_receive();
    7c8e:	subs	r1, #1
    7c90:	uxtb	r3, r3
    7c92:	bne.n	7c80 <sd_connect()+0xa0>
    7c94:	ldr	r2, [pc, #224]	; (7d78 <sd_connect()+0x198>)
    if (m_sd_status == 0XAA) 
    7c96:	cmp	r3, #170	; 0xaa
    7c98:	strh	r3, [r2, #0]
    7c9a:	beq.n	7cb2 <sd_connect()+0xd2>
    7c9c:	ldr	r2, [r4, #0]
	{
		sd_setType(SD_CARD_TYPE_SD2);
		break;
	}
	if (((uint16_t)millis() - t0) > SD_INIT_TIMEOUT) 
    7c9e:	uxth	r3, r7
    7ca0:	uxth	r2, r2
    7ca2:	subs	r3, r2, r3
    7ca4:	cmp.w	r3, #4000	; 0xfa0
    7ca8:	ble.n	7c6e <sd_connect()+0x8e>
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    7caa:	ldr	r3, [pc, #192]	; (7d6c <sd_connect()+0x18c>)
    7cac:	movs	r2, #2
    7cae:	strh	r2, [r3, #0]
    7cb0:	b.n	7c3a <sd_connect()+0x5a>
uint16_t sd_getError(void) {return m_sd_errorCode;}

void sd_setType(uint16_t type) {m_sd_type=type;}
    7cb2:	ldr.w	r8, [pc, #200]	; 7d7c <sd_connect()+0x19c>
    7cb6:	movs	r3, #2
      goto fail;
    }
  }

  // initialize card and send host supports SDHC if SD2
  arg = (sd_getType() == SD_CARD_TYPE_SD2) ? 0X40000000 : 0;
    7cb8:	mov.w	r6, #1073741824	; 0x40000000

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
uint16_t sd_getError(void) {return m_sd_errorCode;}

void sd_setType(uint16_t type) {m_sd_type=type;}
    7cbc:	strh.w	r3, [r8]
    7cc0:	ldr	r7, [r4, #0]
    7cc2:	b.n	7cd0 <sd_connect()+0xf0>
    7cc4:	ldr	r3, [r4, #0]
  t0  = (uint16_t)millis();
  while (sd_cardAcmd(ACMD41, arg) != R1_READY_STATE) 
  {
    // check for timeout
	t1  = (uint16_t)millis();
    if ((t1 - t0) > SD_INIT_TIMEOUT) 
    7cc6:	uxth	r3, r3
    7cc8:	subs	r3, r3, r2
    7cca:	cmp.w	r3, #4000	; 0xfa0
    7cce:	bgt.n	7d04 <sd_connect()+0x124>
uint16_t sd_readCID(cid_t* cid) {  return sd_readRegister(CMD10, cid); }
uint16_t sd_readCSD(csd_t* csd) {  return sd_readRegister(CMD9, csd); }

 
uint8_t sd_cardAcmd(uint8_t cmd, uint32_t arg) 
{   sd_cardCommand(CMD55, 0);
    7cd0:	movs	r1, #0
    7cd2:	movs	r0, #55	; 0x37
    7cd4:	bl	79c0 <sd_cardCommand(unsigned char, unsigned long)>
    return sd_cardCommand(cmd, arg);
    7cd8:	mov	r1, r6
    7cda:	movs	r0, #41	; 0x29
    7cdc:	bl	79c0 <sd_cardCommand(unsigned char, unsigned long)>
  t0  = (uint16_t)millis();
  while (sd_cardAcmd(ACMD41, arg) != R1_READY_STATE) 
  {
    // check for timeout
	t1  = (uint16_t)millis();
    if ((t1 - t0) > SD_INIT_TIMEOUT) 
    7ce0:	uxth	r2, r7

  // initialize card and send host supports SDHC if SD2
  arg = (sd_getType() == SD_CARD_TYPE_SD2) ? 0X40000000 : 0;

  t0  = (uint16_t)millis();
  while (sd_cardAcmd(ACMD41, arg) != R1_READY_STATE) 
    7ce2:	cmp	r0, #0
    7ce4:	bne.n	7cc4 <sd_connect()+0xe4>
      goto fail;
    }
  }

  // if SD2 read OCR register to check for SDHC card
  if (sd_getType() == SD_CARD_TYPE_SD2) 
    7ce6:	ldrh.w	r3, [r8]
    7cea:	cmp	r3, #2
    7cec:	beq.n	7d0c <sd_connect()+0x12c>
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7cee:	ldrh	r3, [r5, #0]
    7cf0:	cbnz	r3, 7d1e <sd_connect()+0x13e>
    // Discard rest of ocr - contains allowed voltage range.
    for (kk = 0; kk < 3; kk++) spi_receive();
  }
  
  sd_chipSelect(HIGH);
  return TRUE;
    7cf2:	movs	r0, #1
    7cf4:	b.n	7c46 <sd_connect()+0x66>

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
uint16_t sd_getError(void) {return m_sd_errorCode;}

void sd_setType(uint16_t type) {m_sd_type=type;}
    7cf6:	ldr.w	r8, [pc, #132]	; 7d7c <sd_connect()+0x19c>
    7cfa:	movs	r3, #1
      goto fail;
    }
  }

  // initialize card and send host supports SDHC if SD2
  arg = (sd_getType() == SD_CARD_TYPE_SD2) ? 0X40000000 : 0;
    7cfc:	movs	r6, #0

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
uint16_t sd_getError(void) {return m_sd_errorCode;}

void sd_setType(uint16_t type) {m_sd_type=type;}
    7cfe:	strh.w	r3, [r8]
    7d02:	b.n	7cc0 <sd_connect()+0xe0>
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    7d04:	ldr	r3, [pc, #100]	; (7d6c <sd_connect()+0x18c>)
    7d06:	movs	r2, #10
    7d08:	strh	r2, [r3, #0]
    7d0a:	b.n	7c3a <sd_connect()+0x5a>
  }

  // if SD2 read OCR register to check for SDHC card
  if (sd_getType() == SD_CARD_TYPE_SD2) 
  {
    if (sd_cardCommand(CMD58, 0))
    7d0c:	mov	r1, r0
    7d0e:	movs	r0, #58	; 0x3a
    7d10:	bl	79c0 <sd_cardCommand(unsigned char, unsigned long)>
    7d14:	cbz	r0, 7d2a <sd_connect()+0x14a>
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    7d16:	ldr	r3, [pc, #84]	; (7d6c <sd_connect()+0x18c>)
    7d18:	movs	r2, #8
    7d1a:	strh	r2, [r3, #0]
    7d1c:	b.n	7c3a <sd_connect()+0x5a>
    7d1e:	movs	r0, #1
    7d20:	bl	78c4 <sd_chipSelect(unsigned short) [clone .part.0]>
    // Discard rest of ocr - contains allowed voltage range.
    for (kk = 0; kk < 3; kk++) spi_receive();
  }
  
  sd_chipSelect(HIGH);
  return TRUE;
    7d24:	movs	r0, #1
    7d26:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7d2a:	ldr	r3, [pc, #60]	; (7d68 <sd_connect()+0x188>)
    7d2c:	movs	r2, #255	; 0xff
    7d2e:	ldr	r3, [r3, #0]
    7d30:	str	r2, [r3, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7d32:	ldr	r2, [r3, #92]	; 0x5c
		if (fifo > 0) return spi->RDR; 
    7d34:	tst.w	r2, #2031616	; 0x1f0000
    7d38:	beq.n	7d32 <sd_connect()+0x152>
    7d3a:	ldr	r2, [r3, #116]	; 0x74
    if (sd_cardCommand(CMD58, 0))
	{
      sd_setError(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spi_receive() & 0XC0) == 0XC0) sd_setType(SD_CARD_TYPE_SDHC);
    7d3c:	and.w	r2, r2, #192	; 0xc0
    7d40:	cmp	r2, #192	; 0xc0
    7d42:	bne.n	7d4a <sd_connect()+0x16a>

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
uint16_t sd_getError(void) {return m_sd_errorCode;}

void sd_setType(uint16_t type) {m_sd_type=type;}
    7d44:	movs	r2, #3
    7d46:	strh.w	r2, [r8]
      goto fail;
    }
  }

  // initialize card and send host supports SDHC if SD2
  arg = (sd_getType() == SD_CARD_TYPE_SD2) ? 0X40000000 : 0;
    7d4a:	movs	r2, #3
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7d4c:	movs	r1, #255	; 0xff
    7d4e:	str	r1, [r3, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7d50:	ldr	r0, [r3, #92]	; 0x5c
		if (fifo > 0) return spi->RDR; 
    7d52:	tst.w	r0, #2031616	; 0x1f0000
    7d56:	beq.n	7d50 <sd_connect()+0x170>
      sd_setError(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spi_receive() & 0XC0) == 0XC0) sd_setType(SD_CARD_TYPE_SDHC);
    // Discard rest of ocr - contains allowed voltage range.
    for (kk = 0; kk < 3; kk++) spi_receive();
    7d58:	subs	r2, #1
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
		if (fifo > 0) return spi->RDR; 
    7d5a:	ldr	r0, [r3, #116]	; 0x74
      sd_setError(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spi_receive() & 0XC0) == 0XC0) sd_setType(SD_CARD_TYPE_SDHC);
    // Discard rest of ocr - contains allowed voltage range.
    for (kk = 0; kk < 3; kk++) spi_receive();
    7d5c:	bne.n	7d4e <sd_connect()+0x16e>
    7d5e:	b.n	7cee <sd_connect()+0x10e>
    7d60:	.word	0x200017fa
    7d64:	.word	0x2000c320
    7d68:	.word	0x200041c8
    7d6c:	.word	0x2000ed80
    7d70:	.word	0x20000cb0
    7d74:	.word	0x20001228
    7d78:	.word	0x2000ed82
    7d7c:	.word	0x2000ed84

00007d80 <sd_cardSize()>:
 *
 * \return The number of 512 byte data blocks in the card
 *         or zero if an error occurs.
 */
uint32_t sd_cardSize(void) 
{
    7d80:	push	{r4, r5, lr}
    7d82:	sub	sp, #20
  ret= sd_readData(dst, 16);
  return ret;
}

uint16_t sd_readCID(cid_t* cid) {  return sd_readRegister(CMD10, cid); }
uint16_t sd_readCSD(csd_t* csd) {  return sd_readRegister(CMD9, csd); }
    7d84:	movs	r0, #9
    7d86:	mov	r1, sp
    7d88:	bl	7ba4 <sd_readRegister(unsigned char, void*)>
uint32_t sd_cardSize(void) 
{
  csd_t csd;
  uint16_t ret;
  //
  if (!(ret=sd_readCSD(&csd))) return 0;
    7d8c:	cbz	r0, 7da4 <sd_cardSize()+0x24>
  //
  if (csd.v1.csd_ver == 0) 
    7d8e:	ldrb.w	r3, [sp]
    7d92:	ands.w	r3, r3, #192	; 0xc0
    7d96:	beq.n	7da8 <sd_cardSize()+0x28>
                      | (csd.v1.c_size_mid << 2) | csd.v1.c_size_low;
    uint8_t c_size_mult = (csd.v1.c_size_mult_high << 1)
                          | csd.v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } 
  else if (csd.v2.csd_ver == 1) 
    7d98:	cmp	r3, #64	; 0x40
    7d9a:	beq.n	7dea <sd_cardSize()+0x6a>
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    7d9c:	ldr	r3, [pc, #104]	; (7e08 <sd_cardSize()+0x88>)
    7d9e:	movs	r2, #11
    return (c_size + 1) <<10;
  } 
  else 
  {
    sd_setError(SD_CARD_ERROR_BAD_CSD);
    return 0;
    7da0:	movs	r0, #0
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    7da2:	strh	r2, [r3, #0]
  else 
  {
    sd_setError(SD_CARD_ERROR_BAD_CSD);
    return 0;
  }
}
    7da4:	add	sp, #20
    7da6:	pop	{r4, r5, pc}
  if (csd.v1.csd_ver == 0) 
  {
    uint8_t read_bl_len = csd.v1.read_bl_len;
    uint16_t c_size = (csd.v1.c_size_high << 10)
                      | (csd.v1.c_size_mid << 2) | csd.v1.c_size_low;
    uint8_t c_size_mult = (csd.v1.c_size_mult_high << 1)
    7da8:	ldrb.w	r4, [sp, #9]
  if (!(ret=sd_readCSD(&csd))) return 0;
  //
  if (csd.v1.csd_ver == 0) 
  {
    uint8_t read_bl_len = csd.v1.read_bl_len;
    uint16_t c_size = (csd.v1.c_size_high << 10)
    7dac:	ldrb.w	r3, [sp, #6]
                      | (csd.v1.c_size_mid << 2) | csd.v1.c_size_low;
    uint8_t c_size_mult = (csd.v1.c_size_mult_high << 1)
                          | csd.v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7db0:	ldrb.w	r2, [sp, #7]
    7db4:	and.w	r4, r4, #3
  {
    uint8_t read_bl_len = csd.v1.read_bl_len;
    uint16_t c_size = (csd.v1.c_size_high << 10)
                      | (csd.v1.c_size_mid << 2) | csd.v1.c_size_low;
    uint8_t c_size_mult = (csd.v1.c_size_mult_high << 1)
                          | csd.v1.c_size_mult_low;
    7db8:	ldrb.w	r0, [sp, #10]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7dbc:	and.w	r3, r3, #3
    7dc0:	lsls	r4, r4, #1
  //
  if (!(ret=sd_readCSD(&csd))) return 0;
  //
  if (csd.v1.csd_ver == 0) 
  {
    uint8_t read_bl_len = csd.v1.read_bl_len;
    7dc2:	ldrb.w	r1, [sp, #5]
    uint16_t c_size = (csd.v1.c_size_high << 10)
                      | (csd.v1.c_size_mid << 2) | csd.v1.c_size_low;
    uint8_t c_size_mult = (csd.v1.c_size_mult_high << 1)
                          | csd.v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7dc6:	lsls	r2, r2, #2
  //
  if (csd.v1.csd_ver == 0) 
  {
    uint8_t read_bl_len = csd.v1.read_bl_len;
    uint16_t c_size = (csd.v1.c_size_high << 10)
                      | (csd.v1.c_size_mid << 2) | csd.v1.c_size_low;
    7dc8:	ldrb.w	r5, [sp, #8]
    uint8_t c_size_mult = (csd.v1.c_size_mult_high << 1)
                          | csd.v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7dcc:	orr.w	r0, r4, r0, lsr #7
    7dd0:	and.w	r1, r1, #15
    7dd4:	orr.w	r3, r2, r3, lsl #10
    7dd8:	add	r0, r1
    7dda:	orr.w	r3, r3, r5, lsr #6
    7dde:	subs	r0, #7
    7de0:	adds	r3, #1
    7de2:	lsl.w	r0, r3, r0
  else 
  {
    sd_setError(SD_CARD_ERROR_BAD_CSD);
    return 0;
  }
}
    7de6:	add	sp, #20
    7de8:	pop	{r4, r5, pc}
  } 
  else if (csd.v2.csd_ver == 1) 
  {
    uint32_t c_size = ((uint32_t)csd.v2.c_size_high <<16)
					+ ((uint32_t)csd.v2.c_size_mid <<8) + (uint32_t)csd.v2.c_size_low;
    return (c_size + 1) <<10;
    7dea:	ldrb.w	r3, [sp, #9]
                          | csd.v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } 
  else if (csd.v2.csd_ver == 1) 
  {
    uint32_t c_size = ((uint32_t)csd.v2.c_size_high <<16)
    7dee:	ldrb.w	r1, [sp, #7]
					+ ((uint32_t)csd.v2.c_size_mid <<8) + (uint32_t)csd.v2.c_size_low;
    return (c_size + 1) <<10;
    7df2:	adds	r2, r3, #1
    7df4:	ldrb.w	r0, [sp, #8]
    7df8:	and.w	r3, r1, #63	; 0x3f
    7dfc:	add.w	r3, r2, r3, lsl #16
    7e00:	add.w	r0, r3, r0, lsl #8
    7e04:	lsls	r0, r0, #10
    7e06:	b.n	7da4 <sd_cardSize()+0x24>
    7e08:	.word	0x2000ed80

00007e0c <sd_readBlock(unsigned long, unsigned char*)>:
// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
uint16_t sd_getError(void) {return m_sd_errorCode;}

void sd_setType(uint16_t type) {m_sd_type=type;}
uint16_t sd_getType(void) {return m_sd_type;}
    7e0c:	ldr	r3, [pc, #60]	; (7e4c <sd_readBlock(unsigned long, unsigned char*)+0x40>)
 
uint16_t sd_readBlock(uint32_t blockNumber, uint8_t* dst) 
{
//  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (sd_getType()!= SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    7e0e:	ldrh	r3, [r3, #0]
    7e10:	cmp	r3, #3
    7e12:	it	ne
    7e14:	lslne	r0, r0, #9
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
 
uint16_t sd_readBlock(uint32_t blockNumber, uint8_t* dst) 
{
    7e16:	push	{r4, lr}
    7e18:	mov	r4, r1
//  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (sd_getType()!= SD_CARD_TYPE_SDHC) blockNumber <<= 9;
  if (sd_cardCommand(CMD17, blockNumber)) {
    7e1a:	mov	r1, r0
    7e1c:	movs	r0, #17
    7e1e:	bl	79c0 <sd_cardCommand(unsigned char, unsigned long)>
    7e22:	cbz	r0, 7e34 <sd_readBlock(unsigned long, unsigned char*)+0x28>
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7e24:	ldr	r3, [pc, #40]	; (7e50 <sd_readBlock(unsigned long, unsigned char*)+0x44>)
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    7e26:	movs	r1, #4
    7e28:	ldr	r2, [pc, #40]	; (7e54 <sd_readBlock(unsigned long, unsigned char*)+0x48>)
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7e2a:	ldrh	r3, [r3, #0]
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    7e2c:	strh	r1, [r2, #0]
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7e2e:	cbnz	r3, 7e42 <sd_readBlock(unsigned long, unsigned char*)+0x36>
  return sd_readData(dst, 512);

 fail:
  sd_chipSelect(HIGH);
  return FALSE;
}
    7e30:	movs	r0, #0
    7e32:	pop	{r4, pc}
  if (sd_getType()!= SD_CARD_TYPE_SDHC) blockNumber <<= 9;
  if (sd_cardCommand(CMD17, blockNumber)) {
    sd_setError(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  return sd_readData(dst, 512);
    7e34:	mov	r0, r4
    7e36:	mov.w	r1, #512	; 0x200

 fail:
  sd_chipSelect(HIGH);
  return FALSE;
}
    7e3a:	ldmia.w	sp!, {r4, lr}
  if (sd_getType()!= SD_CARD_TYPE_SDHC) blockNumber <<= 9;
  if (sd_cardCommand(CMD17, blockNumber)) {
    sd_setError(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  return sd_readData(dst, 512);
    7e3e:	b.w	7ab0 <sd_readData(unsigned char*, unsigned int)>
    7e42:	movs	r0, #1
    7e44:	bl	78c4 <sd_chipSelect(unsigned short) [clone .part.0]>

 fail:
  sd_chipSelect(HIGH);
  return FALSE;
}
    7e48:	movs	r0, #0
    7e4a:	pop	{r4, pc}
    7e4c:	.word	0x2000ed84
    7e50:	.word	0x200017fa
    7e54:	.word	0x2000ed80

00007e58 <sd_readData2(unsigned char*)>:
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7e58:	ldr	r3, [pc, #28]	; (7e78 <sd_readData2(unsigned char*)+0x20>)
    7e5a:	ldrh	r3, [r3, #0]
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint16_t sd_readData2(uint8_t *dst) 
{
    7e5c:	push	{r4, lr}
    7e5e:	mov	r4, r0
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7e60:	cbz	r3, 7e68 <sd_readData2(unsigned char*)+0x10>
    7e62:	movs	r0, #0
    7e64:	bl	78c4 <sd_chipSelect(unsigned short) [clone .part.0]>
 * the value zero, false, is returned for failure.
 */
uint16_t sd_readData2(uint8_t *dst) 
{
  sd_chipSelect(LOW);
  return sd_readData(dst, 512);
    7e68:	mov	r0, r4
    7e6a:	mov.w	r1, #512	; 0x200
}
    7e6e:	ldmia.w	sp!, {r4, lr}
 * the value zero, false, is returned for failure.
 */
uint16_t sd_readData2(uint8_t *dst) 
{
  sd_chipSelect(LOW);
  return sd_readData(dst, 512);
    7e72:	b.w	7ab0 <sd_readData(unsigned char*, unsigned int)>
    7e76:	nop
    7e78:	.word	0x200017fa

00007e7c <sd_readStart(unsigned long)>:
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint16_t sd_readStart(uint32_t blockNumber) 
{
    7e7c:	push	{r3, lr}
// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
uint16_t sd_getError(void) {return m_sd_errorCode;}

void sd_setType(uint16_t type) {m_sd_type=type;}
uint16_t sd_getType(void) {return m_sd_type;}
    7e7e:	ldr	r3, [pc, #60]	; (7ebc <sd_readStart(unsigned long)+0x40>)
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint16_t sd_readStart(uint32_t blockNumber) 
{
    7e80:	mov	r1, r0
  //SD_TRACE("RS", blockNumber);
  if (sd_getType()!= SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    7e82:	ldrh	r3, [r3, #0]
    7e84:	cmp	r3, #3
    7e86:	it	ne
    7e88:	lslne	r1, r0, #9
  if (sd_cardCommand(CMD18, blockNumber)) {
    7e8a:	movs	r0, #18
    7e8c:	bl	79c0 <sd_cardCommand(unsigned char, unsigned long)>
    7e90:	cbz	r0, 7ea0 <sd_readStart(unsigned long)+0x24>
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7e92:	ldr	r1, [pc, #44]	; (7ec0 <sd_readStart(unsigned long)+0x44>)
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    7e94:	movs	r2, #5
    7e96:	ldr	r3, [pc, #44]	; (7ec4 <sd_readStart(unsigned long)+0x48>)
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7e98:	ldrh	r0, [r1, #0]
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    7e9a:	strh	r2, [r3, #0]
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7e9c:	cbnz	r0, 7eb2 <sd_readStart(unsigned long)+0x36>
  return TRUE;

 fail:
  sd_chipSelect(HIGH);
  return FALSE;
}
    7e9e:	pop	{r3, pc}
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7ea0:	ldr	r3, [pc, #28]	; (7ec0 <sd_readStart(unsigned long)+0x44>)
  if (sd_cardCommand(CMD18, blockNumber)) {
    sd_setError(SD_CARD_ERROR_CMD18);
    goto fail;
  }
  sd_chipSelect(HIGH);
  return TRUE;
    7ea2:	movs	r0, #1
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7ea4:	ldrh	r3, [r3, #0]
    7ea6:	cmp	r3, #0
    7ea8:	beq.n	7e9e <sd_readStart(unsigned long)+0x22>
    7eaa:	bl	78c4 <sd_chipSelect(unsigned short) [clone .part.0]>
  if (sd_cardCommand(CMD18, blockNumber)) {
    sd_setError(SD_CARD_ERROR_CMD18);
    goto fail;
  }
  sd_chipSelect(HIGH);
  return TRUE;
    7eae:	movs	r0, #1
    7eb0:	pop	{r3, pc}
    7eb2:	movs	r0, #1
    7eb4:	bl	78c4 <sd_chipSelect(unsigned short) [clone .part.0]>
    7eb8:	movs	r0, #0
    7eba:	pop	{r3, pc}
    7ebc:	.word	0x2000ed84
    7ec0:	.word	0x200017fa
    7ec4:	.word	0x2000ed80

00007ec8 <sd_readStop()>:
* \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */

uint16_t sd_readStop() 
{
    7ec8:	push	{r3, lr}
  if (sd_cardCommand(CMD12, 0)) {
    7eca:	movs	r1, #0
    7ecc:	movs	r0, #12
    7ece:	bl	79c0 <sd_cardCommand(unsigned char, unsigned long)>
    7ed2:	cbz	r0, 7ee2 <sd_readStop()+0x1a>
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7ed4:	ldr	r1, [pc, #40]	; (7f00 <sd_readStop()+0x38>)
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    7ed6:	movs	r2, #3
    7ed8:	ldr	r3, [pc, #40]	; (7f04 <sd_readStop()+0x3c>)
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7eda:	ldrh	r0, [r1, #0]
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    7edc:	strh	r2, [r3, #0]
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7ede:	cbnz	r0, 7ef4 <sd_readStop()+0x2c>
  return TRUE;

 fail:
  sd_chipSelect(HIGH);
  return FALSE;
}
    7ee0:	pop	{r3, pc}
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7ee2:	ldr	r3, [pc, #28]	; (7f00 <sd_readStop()+0x38>)
  if (sd_cardCommand(CMD12, 0)) {
    sd_setError(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  sd_chipSelect(HIGH);
  return TRUE;
    7ee4:	movs	r0, #1
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7ee6:	ldrh	r3, [r3, #0]
    7ee8:	cmp	r3, #0
    7eea:	beq.n	7ee0 <sd_readStop()+0x18>
    7eec:	bl	78c4 <sd_chipSelect(unsigned short) [clone .part.0]>
  if (sd_cardCommand(CMD12, 0)) {
    sd_setError(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  sd_chipSelect(HIGH);
  return TRUE;
    7ef0:	movs	r0, #1
    7ef2:	pop	{r3, pc}
    7ef4:	movs	r0, #1
    7ef6:	bl	78c4 <sd_chipSelect(unsigned short) [clone .part.0]>
    7efa:	movs	r0, #0
    7efc:	pop	{r3, pc}
    7efe:	nop
    7f00:	.word	0x200017fa
    7f04:	.word	0x2000ed80

00007f08 <SPI_disk_read(unsigned char*, unsigned long, unsigned int)>:
}

DRESULT SPI_disk_read(BYTE *buff, DWORD sector, UINT count)
{	
	DRESULT res = RES_OK;
	if(count==1)
    7f08:	cmp	r2, #1
    
    return 0;
}

DRESULT SPI_disk_read(BYTE *buff, DWORD sector, UINT count)
{	
    7f0a:	push	{r3, r4, r5, r6, r7, lr}
    7f0c:	mov	r4, r0
    7f0e:	mov	r0, r1
	DRESULT res = RES_OK;
	if(count==1)
    7f10:	beq.n	7f46 <SPI_disk_read(unsigned char*, unsigned long, unsigned int)+0x3e>
    7f12:	mov	r7, r2
	{
		if(!sd_readBlock(sector, buff)) res = RES_READERROR;
	}
	else
	{
		if(!sd_readStart(sector)) res = RES_READERROR;
    7f14:	bl	7e7c <sd_readStart(unsigned long)>
    7f18:	cmp	r0, #0
    7f1a:	ite	ne
    7f1c:	movne	r6, #0
    7f1e:	moveq	r6, #6
		for(UINT ii=0; ii<count;ii++)
    7f20:	cbz	r7, 7f3a <SPI_disk_read(unsigned char*, unsigned long, unsigned int)+0x32>
    7f22:	movs	r5, #0
		{
		if(!sd_readData2(buff)) res = RES_READERROR;
    7f24:	mov	r0, r4
		if(!sd_readBlock(sector, buff)) res = RES_READERROR;
	}
	else
	{
		if(!sd_readStart(sector)) res = RES_READERROR;
		for(UINT ii=0; ii<count;ii++)
    7f26:	adds	r5, #1
		{
		if(!sd_readData2(buff)) res = RES_READERROR;
    7f28:	bl	7e58 <sd_readData2(unsigned char*)>
    7f2c:	cmp	r0, #0
		sector++;
		buff += 512;    
    7f2e:	add.w	r4, r4, #512	; 0x200
	else
	{
		if(!sd_readStart(sector)) res = RES_READERROR;
		for(UINT ii=0; ii<count;ii++)
		{
		if(!sd_readData2(buff)) res = RES_READERROR;
    7f32:	it	eq
    7f34:	moveq	r6, #6
		if(!sd_readBlock(sector, buff)) res = RES_READERROR;
	}
	else
	{
		if(!sd_readStart(sector)) res = RES_READERROR;
		for(UINT ii=0; ii<count;ii++)
    7f36:	cmp	r7, r5
    7f38:	bne.n	7f24 <SPI_disk_read(unsigned char*, unsigned long, unsigned int)+0x1c>
		{
		if(!sd_readData2(buff)) res = RES_READERROR;
		sector++;
		buff += 512;    
		}
		if(!sd_readStop()) res = RES_READERROR;
    7f3a:	bl	7ec8 <sd_readStop()>
    7f3e:	cbnz	r0, 7f42 <SPI_disk_read(unsigned char*, unsigned long, unsigned int)+0x3a>
DRESULT SPI_disk_read(BYTE *buff, DWORD sector, UINT count)
{	
	DRESULT res = RES_OK;
	if(count==1)
	{
		if(!sd_readBlock(sector, buff)) res = RES_READERROR;
    7f40:	movs	r6, #6
		}
		if(!sd_readStop()) res = RES_READERROR;
	}

    return res;
}
    7f42:	mov	r0, r6
    7f44:	pop	{r3, r4, r5, r6, r7, pc}
DRESULT SPI_disk_read(BYTE *buff, DWORD sector, UINT count)
{	
	DRESULT res = RES_OK;
	if(count==1)
	{
		if(!sd_readBlock(sector, buff)) res = RES_READERROR;
    7f46:	mov	r1, r4
    7f48:	bl	7e0c <sd_readBlock(unsigned long, unsigned char*)>
    7f4c:	cmp	r0, #0
    7f4e:	beq.n	7f40 <SPI_disk_read(unsigned char*, unsigned long, unsigned int)+0x38>
    return 0;
}

DRESULT SPI_disk_read(BYTE *buff, DWORD sector, UINT count)
{	
	DRESULT res = RES_OK;
    7f50:	movs	r6, #0
    7f52:	b.n	7f42 <SPI_disk_read(unsigned char*, unsigned long, unsigned int)+0x3a>

00007f54 <sd_writeData(unsigned char, unsigned char const*)>:
}

//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
uint16_t sd_writeData(uint8_t token, const uint8_t* src) 
{
    7f54:	push	{r3, r4, r5, r6, r7, lr}
    7f56:	subs	r2, r1, #1
      0xEF1F, 0xFF3E, 0xCF5D, 0xDF7C, 0xAF9B, 0xBFBA, 0x8FD9, 0x9FF8,
      0x6E17, 0x7E36, 0x4E55, 0x5E74, 0x2E93, 0x3EB2, 0x0ED1, 0x1EF0
    };

    static uint16_t CRC_CCITT(const uint8_t* data, size_t n) {
      uint16_t crc = 0;
    7f58:	movs	r5, #0
    7f5a:	ldr	r7, [pc, #140]	; (7fe8 <sd_writeData(unsigned char, unsigned char const*)+0x94>)
    7f5c:	addw	r6, r1, #511	; 0x1ff
      size_t ii;
      for (ii = 0; ii < n; ii++) {
      crc = crctab[(crc >> 8 ^ data[ii]) & 0XFF] ^ (crc << 8);
    7f60:	ldrb.w	r3, [r2, #1]!
    7f64:	eor.w	r3, r3, r5, lsr #8
    };

    static uint16_t CRC_CCITT(const uint8_t* data, size_t n) {
      uint16_t crc = 0;
      size_t ii;
      for (ii = 0; ii < n; ii++) {
    7f68:	cmp	r6, r2
      crc = crctab[(crc >> 8 ^ data[ii]) & 0XFF] ^ (crc << 8);
    7f6a:	ldrh.w	r3, [r7, r3, lsl #1]
    7f6e:	eor.w	r4, r3, r5, lsl #8
    7f72:	sxth	r4, r4
    7f74:	uxth	r5, r4
    };

    static uint16_t CRC_CCITT(const uint8_t* data, size_t n) {
      uint16_t crc = 0;
      size_t ii;
      for (ii = 0; ii < n; ii++) {
    7f76:	bne.n	7f60 <sd_writeData(unsigned char, unsigned char const*)+0xc>
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7f78:	ldr	r3, [pc, #112]	; (7fec <sd_writeData(unsigned char, unsigned char const*)+0x98>)
    7f7a:	ldr	r6, [r3, #0]
    7f7c:	str	r0, [r6, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7f7e:	ldr	r3, [r6, #92]	; 0x5c
		if (fifo > 0) return spi->RDR; 
    7f80:	tst.w	r3, #2031616	; 0x1f0000
    7f84:	beq.n	7f7e <sd_writeData(unsigned char, unsigned char const*)+0x2a>
    7f86:	mov	r0, r1
    7f88:	mov.w	r2, #512	; 0x200
    7f8c:	movs	r1, #0
    7f8e:	ldr	r3, [r6, #116]	; 0x74
    7f90:	bl	7914 <spi_transfer(void const*, void*, unsigned int) [clone .part.4]>
    7f94:	asrs	r3, r5, #8
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7f96:	str	r3, [r6, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7f98:	ldr	r3, [r6, #92]	; 0x5c
		if (fifo > 0) return spi->RDR; 
    7f9a:	tst.w	r3, #2031616	; 0x1f0000
    7f9e:	beq.n	7f98 <sd_writeData(unsigned char, unsigned char const*)+0x44>
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7fa0:	uxtb	r4, r4
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
		if (fifo > 0) return spi->RDR; 
    7fa2:	ldr	r3, [r6, #116]	; 0x74
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7fa4:	str	r4, [r6, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7fa6:	ldr	r3, [r6, #92]	; 0x5c
		if (fifo > 0) return spi->RDR; 
    7fa8:	tst.w	r3, #2031616	; 0x1f0000
    7fac:	beq.n	7fa6 <sd_writeData(unsigned char, unsigned char const*)+0x52>
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7fae:	movs	r3, #255	; 0xff
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
		if (fifo > 0) return spi->RDR; 
    7fb0:	ldr	r2, [r6, #116]	; 0x74
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7fb2:	str	r3, [r6, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7fb4:	ldr	r3, [r6, #92]	; 0x5c
		if (fifo > 0) return spi->RDR; 
    7fb6:	tst.w	r3, #2031616	; 0x1f0000
    7fba:	beq.n	7fb4 <sd_writeData(unsigned char, unsigned char const*)+0x60>
    7fbc:	ldr	r3, [r6, #116]	; 0x74

  spi_send(token);
  spi_sendBulk(src, 512);
  spi_send(crc >> 8);
  spi_send(crc & 0XFF);
  m_sd_status=spi_receive();
    7fbe:	ldr	r1, [pc, #48]	; (7ff0 <sd_writeData(unsigned char, unsigned char const*)+0x9c>)
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
		if (fifo > 0) return spi->RDR; 
    7fc0:	uxtb	r3, r3
  spi_send(token);
  spi_sendBulk(src, 512);
  spi_send(crc >> 8);
  spi_send(crc & 0XFF);
  m_sd_status=spi_receive();
  if ((m_sd_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    7fc2:	and.w	r2, r3, #31

  spi_send(token);
  spi_sendBulk(src, 512);
  spi_send(crc >> 8);
  spi_send(crc & 0XFF);
  m_sd_status=spi_receive();
    7fc6:	strh	r3, [r1, #0]
  if ((m_sd_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    7fc8:	cmp	r2, #5
    7fca:	beq.n	7fe4 <sd_writeData(unsigned char, unsigned char const*)+0x90>
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7fcc:	ldr	r1, [pc, #36]	; (7ff4 <sd_writeData(unsigned char, unsigned char const*)+0xa0>)
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    7fce:	movs	r2, #19
    7fd0:	ldr	r3, [pc, #36]	; (7ff8 <sd_writeData(unsigned char, unsigned char const*)+0xa4>)
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7fd2:	ldrh	r0, [r1, #0]
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    7fd4:	strh	r2, [r3, #0]
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7fd6:	cbnz	r0, 7fda <sd_writeData(unsigned char, unsigned char const*)+0x86>
  return TRUE;

 fail:
  sd_chipSelect(HIGH);
  return FALSE;
}
    7fd8:	pop	{r3, r4, r5, r6, r7, pc}
    7fda:	movs	r0, #1
    7fdc:	bl	78c4 <sd_chipSelect(unsigned short) [clone .part.0]>
  }
  return TRUE;

 fail:
  sd_chipSelect(HIGH);
  return FALSE;
    7fe0:	movs	r0, #0
    7fe2:	pop	{r3, r4, r5, r6, r7, pc}
  if ((m_sd_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    sd_setError(SD_CARD_ERROR_WRITE);
//  fprintf(stderr,"write error %x\r\n",m_sd_status & DATA_RES_MASK);
    goto fail;
  }
  return TRUE;
    7fe4:	movs	r0, #1

 fail:
  sd_chipSelect(HIGH);
  return FALSE;
}
    7fe6:	pop	{r3, r4, r5, r6, r7, pc}
    7fe8:	.word	0x2000042c
    7fec:	.word	0x200041c8
    7ff0:	.word	0x2000ed82
    7ff4:	.word	0x200017fa
    7ff8:	.word	0x2000ed80

00007ffc <sd_writeData2(unsigned char const*)>:
 * \param[in] src Pointer to the location of the data to be written.
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint16_t sd_writeData2(const uint8_t* src) 
{
    7ffc:	push	{r4, r5, r6, lr}
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7ffe:	ldr	r4, [pc, #108]	; (806c <sd_writeData2(unsigned char const*)+0x70>)
 * \param[in] src Pointer to the location of the data to be written.
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint16_t sd_writeData2(const uint8_t* src) 
{
    8000:	mov	r5, r0
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    8002:	ldrh	r3, [r4, #0]
    8004:	cbnz	r3, 805a <sd_writeData2(unsigned char const*)+0x5e>
    8006:	ldr	r1, [pc, #104]	; (8070 <sd_writeData2(unsigned char const*)+0x74>)
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    8008:	movs	r6, #255	; 0xff
    800a:	ldr	r3, [pc, #104]	; (8074 <sd_writeData2(unsigned char const*)+0x78>)
    800c:	ldr	r0, [r1, #0]
    800e:	ldr	r2, [r3, #0]
{
  uint16_t t0;
  uint16_t ret;
  t0  = millis();
  while ((ret=spi_receive()) != 0XFF) 
  { if (((uint16_t)millis() - t0) >= timeoutMillis) return FALSE;
    8010:	uxth	r0, r0
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    8012:	str	r6, [r2, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    8014:	ldr	r3, [r2, #92]	; 0x5c
		if (fifo > 0) return spi->RDR; 
    8016:	tst.w	r3, #2031616	; 0x1f0000
    801a:	beq.n	8014 <sd_writeData2(unsigned char const*)+0x18>
    801c:	ldr	r3, [r2, #116]	; 0x74
uint16_t sd_waitNotBusy(uint16_t timeoutMillis) 
{
  uint16_t t0;
  uint16_t ret;
  t0  = millis();
  while ((ret=spi_receive()) != 0XFF) 
    801e:	uxtb	r3, r3
    8020:	cmp	r3, #255	; 0xff
    8022:	beq.n	803c <sd_writeData2(unsigned char const*)+0x40>
    8024:	ldr	r3, [r1, #0]
  { if (((uint16_t)millis() - t0) >= timeoutMillis) return FALSE;
    8026:	uxth	r3, r3
    8028:	subs	r3, r3, r0
    802a:	cmp.w	r3, #600	; 0x258
    802e:	blt.n	8012 <sd_writeData2(unsigned char const*)+0x16>
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    8030:	movs	r2, #21
    8032:	ldr	r3, [pc, #68]	; (8078 <sd_writeData2(unsigned char const*)+0x7c>)
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    8034:	ldrh	r0, [r4, #0]
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    8036:	strh	r2, [r3, #0]
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    8038:	cbnz	r0, 8050 <sd_writeData2(unsigned char const*)+0x54>

 fail:
  sd_setError(SD_CARD_ERROR_WRITE_MULTIPLE);
  sd_chipSelect(HIGH);
  return FALSE;
}
    803a:	pop	{r4, r5, r6, pc}
uint16_t sd_writeData2(const uint8_t* src) 
{
// unused // static long cnt=0;
  sd_chipSelect(LOW);
  if (!sd_waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
  if (!sd_writeData(WRITE_MULTIPLE_TOKEN, src)) goto fail;
    803c:	mov	r1, r5
    803e:	movs	r0, #252	; 0xfc
    8040:	bl	7f54 <sd_writeData(unsigned char, unsigned char const*)>
    8044:	cmp	r0, #0
    8046:	beq.n	8030 <sd_writeData2(unsigned char const*)+0x34>
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    8048:	ldrh	r3, [r4, #0]
    804a:	movs	r0, #1
    804c:	cbnz	r3, 8062 <sd_writeData2(unsigned char const*)+0x66>
    804e:	pop	{r4, r5, r6, pc}
    8050:	movs	r0, #1
    8052:	bl	78c4 <sd_chipSelect(unsigned short) [clone .part.0]>
  return TRUE;

 fail:
  sd_setError(SD_CARD_ERROR_WRITE_MULTIPLE);
  sd_chipSelect(HIGH);
  return FALSE;
    8056:	movs	r0, #0
    8058:	pop	{r4, r5, r6, pc}
    805a:	movs	r0, #0
    805c:	bl	78c4 <sd_chipSelect(unsigned short) [clone .part.0]>
    8060:	b.n	8006 <sd_writeData2(unsigned char const*)+0xa>
    8062:	bl	78c4 <sd_chipSelect(unsigned short) [clone .part.0]>
    8066:	movs	r0, #1
    8068:	pop	{r4, r5, r6, pc}
    806a:	nop
    806c:	.word	0x200017fa
    8070:	.word	0x2000c320
    8074:	.word	0x200041c8
    8078:	.word	0x2000ed80

0000807c <sd_writeStart(unsigned long, unsigned long)>:
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint16_t sd_writeStart(uint32_t blockNumber, uint32_t eraseCount) 
{
    807c:	push	{r3, r4, r5, lr}
    807e:	mov	r4, r0
  // send pre-erase count
  if(eraseCount)
    8080:	cbnz	r1, 80b6 <sd_writeStart(unsigned long, unsigned long)+0x3a>
// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
uint16_t sd_getError(void) {return m_sd_errorCode;}

void sd_setType(uint16_t type) {m_sd_type=type;}
uint16_t sd_getType(void) {return m_sd_type;}
    8082:	ldr	r3, [pc, #88]	; (80dc <sd_writeStart(unsigned long, unsigned long)+0x60>)
    goto fail;
    }
  }
  // use address if not SDHC card
  if (sd_getType() != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
  if (sd_cardCommand(CMD25, blockNumber)) {
    8084:	movs	r0, #25
    sd_setError(SD_CARD_ERROR_ACMD23);
    goto fail;
    }
  }
  // use address if not SDHC card
  if (sd_getType() != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    8086:	ldrh	r3, [r3, #0]
    8088:	cmp	r3, #3
    808a:	it	ne
    808c:	lslne	r4, r4, #9
  if (sd_cardCommand(CMD25, blockNumber)) {
    808e:	mov	r1, r4
    8090:	bl	79c0 <sd_cardCommand(unsigned char, unsigned long)>
    8094:	cbz	r0, 80ac <sd_writeStart(unsigned long, unsigned long)+0x30>
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    8096:	ldr	r3, [pc, #72]	; (80e0 <sd_writeStart(unsigned long, unsigned long)+0x64>)
    8098:	movs	r2, #7
    809a:	strh	r2, [r3, #0]
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    809c:	ldr	r3, [pc, #68]	; (80e4 <sd_writeStart(unsigned long, unsigned long)+0x68>)
    809e:	ldrh	r0, [r3, #0]
    80a0:	cbz	r0, 80b4 <sd_writeStart(unsigned long, unsigned long)+0x38>
    80a2:	movs	r0, #1
    80a4:	bl	78c4 <sd_chipSelect(unsigned short) [clone .part.0]>
  sd_chipSelect(HIGH);
  return TRUE;

 fail:
  sd_chipSelect(HIGH);
  return FALSE;
    80a8:	movs	r0, #0
    80aa:	pop	{r3, r4, r5, pc}
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    80ac:	ldr	r3, [pc, #52]	; (80e4 <sd_writeStart(unsigned long, unsigned long)+0x68>)
    80ae:	movs	r0, #1
    80b0:	ldrh	r3, [r3, #0]
    80b2:	cbnz	r3, 80d4 <sd_writeStart(unsigned long, unsigned long)+0x58>
  return TRUE;

 fail:
  sd_chipSelect(HIGH);
  return FALSE;
}
    80b4:	pop	{r3, r4, r5, pc}
    80b6:	mov	r5, r1
uint16_t sd_readCID(cid_t* cid) {  return sd_readRegister(CMD10, cid); }
uint16_t sd_readCSD(csd_t* csd) {  return sd_readRegister(CMD9, csd); }

 
uint8_t sd_cardAcmd(uint8_t cmd, uint32_t arg) 
{   sd_cardCommand(CMD55, 0);
    80b8:	movs	r0, #55	; 0x37
    80ba:	movs	r1, #0
    80bc:	bl	79c0 <sd_cardCommand(unsigned char, unsigned long)>
    return sd_cardCommand(cmd, arg);
    80c0:	mov	r1, r5
    80c2:	movs	r0, #23
    80c4:	bl	79c0 <sd_cardCommand(unsigned char, unsigned long)>
uint16_t sd_writeStart(uint32_t blockNumber, uint32_t eraseCount) 
{
  // send pre-erase count
  if(eraseCount)
  {
    if (sd_cardAcmd(ACMD23, eraseCount)) {
    80c8:	cmp	r0, #0
    80ca:	beq.n	8082 <sd_writeStart(unsigned long, unsigned long)+0x6>
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    80cc:	ldr	r3, [pc, #16]	; (80e0 <sd_writeStart(unsigned long, unsigned long)+0x64>)
    80ce:	movs	r2, #9
    80d0:	strh	r2, [r3, #0]
    80d2:	b.n	809c <sd_writeStart(unsigned long, unsigned long)+0x20>
    80d4:	bl	78c4 <sd_chipSelect(unsigned short) [clone .part.0]>
    80d8:	movs	r0, #1
    80da:	pop	{r3, r4, r5, pc}
    80dc:	.word	0x2000ed84
    80e0:	.word	0x2000ed80
    80e4:	.word	0x200017fa

000080e8 <sd_writeStop()>:
 *
* \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint16_t sd_writeStop(void) 
{
    80e8:	push	{r3, r4, r5, lr}
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    80ea:	ldr	r4, [pc, #156]	; (8188 <sd_writeStop()+0xa0>)
    80ec:	ldrh	r0, [r4, #0]
    80ee:	cmp	r0, #0
    80f0:	bne.n	816c <sd_writeStop()+0x84>
    80f2:	ldr	r1, [pc, #152]	; (818c <sd_writeStop()+0xa4>)
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    80f4:	movs	r5, #255	; 0xff
    80f6:	ldr	r3, [pc, #152]	; (8190 <sd_writeStop()+0xa8>)
    80f8:	ldr	r4, [r1, #0]
    80fa:	ldr	r2, [r3, #0]
{
  uint16_t t0;
  uint16_t ret;
  t0  = millis();
  while ((ret=spi_receive()) != 0XFF) 
  { if (((uint16_t)millis() - t0) >= timeoutMillis) return FALSE;
    80fc:	uxth	r4, r4
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    80fe:	str	r5, [r2, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    8100:	ldr	r3, [r2, #92]	; 0x5c
		if (fifo > 0) return spi->RDR; 
    8102:	tst.w	r3, #2031616	; 0x1f0000
    8106:	beq.n	8100 <sd_writeStop()+0x18>
    8108:	ldr	r3, [r2, #116]	; 0x74
uint16_t sd_waitNotBusy(uint16_t timeoutMillis) 
{
  uint16_t t0;
  uint16_t ret;
  t0  = millis();
  while ((ret=spi_receive()) != 0XFF) 
    810a:	uxtb	r3, r3
    810c:	cmp	r3, #255	; 0xff
    810e:	beq.n	8126 <sd_writeStop()+0x3e>
    8110:	ldr	r3, [r1, #0]
  { if (((uint16_t)millis() - t0) >= timeoutMillis) return FALSE;
    8112:	uxth	r3, r3
    8114:	subs	r3, r3, r4
    8116:	cmp.w	r3, #600	; 0x258
    811a:	blt.n	80fe <sd_writeStop()+0x16>
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    811c:	ldr	r3, [pc, #116]	; (8194 <sd_writeStop()+0xac>)
    811e:	movs	r2, #18
    8120:	strh	r2, [r3, #0]
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    8122:	cbnz	r0, 8162 <sd_writeStop()+0x7a>

 fail:
  sd_setError(SD_CARD_ERROR_STOP_TRAN);
  sd_chipSelect(HIGH);
  return FALSE;
}
    8124:	pop	{r3, r4, r5, pc}
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    8126:	movs	r3, #253	; 0xfd
    8128:	str	r3, [r2, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    812a:	ldr	r3, [r2, #92]	; 0x5c
		if (fifo > 0) return spi->RDR; 
    812c:	tst.w	r3, #2031616	; 0x1f0000
    8130:	beq.n	812a <sd_writeStop()+0x42>
    8132:	ldr	r3, [r2, #116]	; 0x74
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    8134:	movs	r5, #255	; 0xff
    8136:	ldr	r4, [r1, #0]
{
  uint16_t t0;
  uint16_t ret;
  t0  = millis();
  while ((ret=spi_receive()) != 0XFF) 
  { if (((uint16_t)millis() - t0) >= timeoutMillis) return FALSE;
    8138:	uxth	r4, r4
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    813a:	str	r5, [r2, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    813c:	ldr	r3, [r2, #92]	; 0x5c
		if (fifo > 0) return spi->RDR; 
    813e:	tst.w	r3, #2031616	; 0x1f0000
    8142:	beq.n	813c <sd_writeStop()+0x54>
    8144:	ldr	r3, [r2, #116]	; 0x74
uint16_t sd_waitNotBusy(uint16_t timeoutMillis) 
{
  uint16_t t0;
  uint16_t ret;
  t0  = millis();
  while ((ret=spi_receive()) != 0XFF) 
    8146:	uxtb	r3, r3
    8148:	cmp	r3, #255	; 0xff
    814a:	beq.n	8176 <sd_writeStop()+0x8e>
    814c:	ldr	r3, [r1, #0]
  { if (((uint16_t)millis() - t0) >= timeoutMillis) return FALSE;
    814e:	uxth	r3, r3
    8150:	subs	r3, r3, r4
    8152:	cmp.w	r3, #600	; 0x258
    8156:	blt.n	813a <sd_writeStop()+0x52>
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    8158:	ldr	r3, [pc, #56]	; (8194 <sd_writeStop()+0xac>)
    815a:	movs	r2, #18
    815c:	strh	r2, [r3, #0]
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    815e:	cmp	r0, #0
    8160:	beq.n	8124 <sd_writeStop()+0x3c>
    8162:	movs	r0, #1
    8164:	bl	78c4 <sd_chipSelect(unsigned short) [clone .part.0]>
  return TRUE;

 fail:
  sd_setError(SD_CARD_ERROR_STOP_TRAN);
  sd_chipSelect(HIGH);
  return FALSE;
    8168:	movs	r0, #0
    816a:	pop	{r3, r4, r5, pc}
    816c:	movs	r0, #0
    816e:	bl	78c4 <sd_chipSelect(unsigned short) [clone .part.0]>
    8172:	ldrh	r0, [r4, #0]
    8174:	b.n	80f2 <sd_writeStop()+0xa>
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    8176:	cbnz	r0, 817c <sd_writeStop()+0x94>
  sd_chipSelect(LOW);
  if (!sd_waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
  spi_send(STOP_TRAN_TOKEN);
  if (!sd_waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
  sd_chipSelect(HIGH);
  return TRUE;
    8178:	movs	r0, #1
    817a:	pop	{r3, r4, r5, pc}
    817c:	movs	r0, #1
    817e:	bl	78c4 <sd_chipSelect(unsigned short) [clone .part.0]>
    8182:	movs	r0, #1
    8184:	pop	{r3, r4, r5, pc}
    8186:	nop
    8188:	.word	0x200017fa
    818c:	.word	0x2000c320
    8190:	.word	0x200041c8
    8194:	.word	0x2000ed80

00008198 <SPI_disk_write(unsigned char const*, unsigned long, unsigned int)>:
	}

    return res;
}
DRESULT SPI_disk_write(const BYTE *buff, DWORD sector, UINT count)
{
    8198:	push	{r3, r4, r5, r6, r7, lr}
    819a:	mov	r3, r1
    819c:	mov	r4, r0
    DRESULT res = RES_OK;
    if(!sd_writeStart(sector,count)) res = RES_WRITEERROR;
    819e:	mov	r1, r2
	}

    return res;
}
DRESULT SPI_disk_write(const BYTE *buff, DWORD sector, UINT count)
{
    81a0:	mov	r7, r2
    DRESULT res = RES_OK;
    if(!sd_writeStart(sector,count)) res = RES_WRITEERROR;
    81a2:	mov	r0, r3
    81a4:	bl	807c <sd_writeStart(unsigned long, unsigned long)>
    81a8:	cmp	r0, #0
    81aa:	ite	ne
    81ac:	movne	r6, #0
    81ae:	moveq	r6, #7
	
    for(UINT ii=0; ii<count;ii++)
    81b0:	cbz	r7, 81ca <SPI_disk_write(unsigned char const*, unsigned long, unsigned int)+0x32>
    81b2:	movs	r5, #0
    {
      if(!sd_writeData2(buff)) res = RES_WRITEERROR;
    81b4:	mov	r0, r4
DRESULT SPI_disk_write(const BYTE *buff, DWORD sector, UINT count)
{
    DRESULT res = RES_OK;
    if(!sd_writeStart(sector,count)) res = RES_WRITEERROR;
	
    for(UINT ii=0; ii<count;ii++)
    81b6:	adds	r5, #1
    {
      if(!sd_writeData2(buff)) res = RES_WRITEERROR;
    81b8:	bl	7ffc <sd_writeData2(unsigned char const*)>
    81bc:	cmp	r0, #0
      sector++;
      buff += 512;    
    81be:	add.w	r4, r4, #512	; 0x200
    DRESULT res = RES_OK;
    if(!sd_writeStart(sector,count)) res = RES_WRITEERROR;
	
    for(UINT ii=0; ii<count;ii++)
    {
      if(!sd_writeData2(buff)) res = RES_WRITEERROR;
    81c2:	it	eq
    81c4:	moveq	r6, #7
DRESULT SPI_disk_write(const BYTE *buff, DWORD sector, UINT count)
{
    DRESULT res = RES_OK;
    if(!sd_writeStart(sector,count)) res = RES_WRITEERROR;
	
    for(UINT ii=0; ii<count;ii++)
    81c6:	cmp	r7, r5
    81c8:	bne.n	81b4 <SPI_disk_write(unsigned char const*, unsigned long, unsigned int)+0x1c>
    {
      if(!sd_writeData2(buff)) res = RES_WRITEERROR;
      sector++;
      buff += 512;    
    }
	if(!sd_writeStop()) res = RES_WRITEERROR;
    81ca:	bl	80e8 <sd_writeStop()>
    81ce:	cmp	r0, #0

    return res;
}
    81d0:	ite	ne
    81d2:	movne	r0, r6
    81d4:	moveq	r0, #7
    81d6:	pop	{r3, r4, r5, r6, r7, pc}

000081d8 <spi_init()>:
	void spi_init(void) 
	{ 
	  // CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz 
	  // CBCMR[LPSPI_PODF] - div4 = 132 MHz 

	  CCM_CCGR1 &= ~CCM_CCGR1_LPSPIx(ISPI,CCM_CCGR_ON); 
    81d8:	ldr	r2, [pc, #72]	; (8224 <spi_init()+0x4c>)

	  CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) | 
								 CCM_CBCMR_LPSPI_PODF(6) | CCM_CBCMR_LPSPI_CLK_SEL(2); // pg 714 

	  uint32_t fastio = IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(3); 
	  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_01 = fastio; 
    81da:	movs	r0, #249	; 0xf9
    81dc:	ldr	r3, [pc, #72]	; (8228 <spi_init()+0x50>)
	  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_02 = fastio; 
	  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = fastio; 

	  CCM_CCGR1 |= CCM_CCGR1_LPSPIx(ISPI, CCM_CCGR_ON); 
	  
	  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_01 = 3 | 0x10; // SDI  //Pin12
    81de:	movs	r1, #19
	#endif
*/
	#define CCM_CCGR1_LPSPIx(m,n)     ((uint32_t)(((n) & 0x03) << (2*m)))
	
	void spi_init(void) 
	{ 
    81e0:	push	{r4, r5, r6, r7}
	  // CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz 
	  // CBCMR[LPSPI_PODF] - div4 = 132 MHz 

	  CCM_CCGR1 &= ~CCM_CCGR1_LPSPIx(ISPI,CCM_CCGR_ON); 
    81e2:	ldr	r6, [r2, #108]	; 0x6c
	  
	  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_01 = 3 | 0x10; // SDI  //Pin12
	  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_02 = 3 | 0x10; // SDO  //Pin11
	  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 3 | 0x10; // SCK  //Pin13

	  spi->CR = LPSPI_CR_RST; 
    81e4:	movs	r7, #2
	  // CBCMR[LPSPI_PODF] - div4 = 132 MHz 

	  CCM_CCGR1 &= ~CCM_CCGR1_LPSPIx(ISPI,CCM_CCGR_ON); 

	  CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) | 
								 CCM_CBCMR_LPSPI_PODF(6) | CCM_CBCMR_LPSPI_CLK_SEL(2); // pg 714 
    81e6:	ldr	r5, [pc, #68]	; (822c <spi_init()+0x54>)
	void spi_init(void) 
	{ 
	  // CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz 
	  // CBCMR[LPSPI_PODF] - div4 = 132 MHz 

	  CCM_CCGR1 &= ~CCM_CCGR1_LPSPIx(ISPI,CCM_CCGR_ON); 
    81e8:	bic.w	r6, r6, #192	; 0xc0

	  CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) | 
								 CCM_CBCMR_LPSPI_PODF(6) | CCM_CBCMR_LPSPI_CLK_SEL(2); // pg 714 
    81ec:	ldr	r4, [pc, #64]	; (8230 <spi_init()+0x58>)
	void spi_init(void) 
	{ 
	  // CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz 
	  // CBCMR[LPSPI_PODF] - div4 = 132 MHz 

	  CCM_CCGR1 &= ~CCM_CCGR1_LPSPIx(ISPI,CCM_CCGR_ON); 
    81ee:	str	r6, [r2, #108]	; 0x6c

	  CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) | 
    81f0:	ldr	r6, [r2, #24]
								 CCM_CBCMR_LPSPI_PODF(6) | CCM_CBCMR_LPSPI_CLK_SEL(2); // pg 714 
    81f2:	ands	r5, r6
	  
	  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_01 = 3 | 0x10; // SDI  //Pin12
	  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_02 = 3 | 0x10; // SDO  //Pin11
	  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 3 | 0x10; // SCK  //Pin13

	  spi->CR = LPSPI_CR_RST; 
    81f4:	ldr	r6, [pc, #60]	; (8234 <spi_init()+0x5c>)
	  // CBCMR[LPSPI_PODF] - div4 = 132 MHz 

	  CCM_CCGR1 &= ~CCM_CCGR1_LPSPIx(ISPI,CCM_CCGR_ON); 

	  CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) | 
								 CCM_CBCMR_LPSPI_PODF(6) | CCM_CBCMR_LPSPI_CLK_SEL(2); // pg 714 
    81f6:	orrs	r4, r5
    81f8:	str	r4, [r2, #24]

	  uint32_t fastio = IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(3); 
	  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_01 = fastio; 
    81fa:	str.w	r0, [r3, #816]	; 0x330
	  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_02 = fastio; 
    81fe:	str.w	r0, [r3, #820]	; 0x334
	  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = fastio; 
    8202:	str.w	r0, [r3, #824]	; 0x338

	  CCM_CCGR1 |= CCM_CCGR1_LPSPIx(ISPI, CCM_CCGR_ON); 
    8206:	ldr	r0, [r2, #108]	; 0x6c
    8208:	orr.w	r0, r0, #192	; 0xc0
    820c:	str	r0, [r2, #108]	; 0x6c
	  
	  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_01 = 3 | 0x10; // SDI  //Pin12
    820e:	str.w	r1, [r3, #320]	; 0x140
	  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_02 = 3 | 0x10; // SDO  //Pin11
    8212:	str.w	r1, [r3, #324]	; 0x144
	  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 3 | 0x10; // SCK  //Pin13
    8216:	str.w	r1, [r3, #328]	; 0x148

	  spi->CR = LPSPI_CR_RST; 
    821a:	ldr	r3, [r6, #0]
    821c:	str	r7, [r3, #16]
	} 
    821e:	pop	{r4, r5, r6, r7}
    8220:	bx	lr
    8222:	nop
    8224:	.word	0x400fc000
    8228:	.word	0x401f8000
    822c:	.word	0xe3ffffcf
    8230:	.word	0x18000020
    8234:	.word	0x200041c8

00008238 <spi_begin(unsigned long, unsigned char, unsigned char)>:

	void spi_begin(uint32_t clck, uint8_t bitOrder, uint8_t dataMode)
	{
    8238:	push	{r4, r5, r6, r7, lr}
		const uint32_t clk_sel[4] = {	664615384,  // PLL3 PFD1
										720000000,  // PLL3 PFD0
										528000000,  // PLL2
										396000000}; // PLL2 PFD2       
    823a:	ldr	r3, [pc, #148]	; (82d0 <spi_begin(unsigned long, unsigned char, unsigned char)+0x98>)

	  spi->CR = LPSPI_CR_RST; 
	} 

	void spi_begin(uint32_t clck, uint8_t bitOrder, uint8_t dataMode)
	{
    823c:	sub	sp, #20
    823e:	mov	r6, r0
										396000000}; // PLL2 PFD2       
		uint32_t cbcmr = CCM_CBCMR;
		uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
		
		uint32_t d, div;    
		if (clck == 0) clck =1;
    8240:	cmp	r0, #0
	void spi_begin(uint32_t clck, uint8_t bitOrder, uint8_t dataMode)
	{
		const uint32_t clk_sel[4] = {	664615384,  // PLL3 PFD1
										720000000,  // PLL3 PFD0
										528000000,  // PLL2
										396000000}; // PLL2 PFD2       
    8242:	add.w	lr, sp, #16

	  spi->CR = LPSPI_CR_RST; 
	} 

	void spi_begin(uint32_t clck, uint8_t bitOrder, uint8_t dataMode)
	{
    8246:	mov	r5, r1
    8248:	mov	r4, r2
		const uint32_t clk_sel[4] = {	664615384,  // PLL3 PFD1
										720000000,  // PLL3 PFD0
										528000000,  // PLL2
										396000000}; // PLL2 PFD2       
		uint32_t cbcmr = CCM_CBCMR;
    824a:	ldr	r7, [pc, #136]	; (82d4 <spi_begin(unsigned long, unsigned char, unsigned char)+0x9c>)
		uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
		
		uint32_t d, div;    
		if (clck == 0) clck =1;
    824c:	it	eq
    824e:	moveq	r6, #1
	void spi_begin(uint32_t clck, uint8_t bitOrder, uint8_t dataMode)
	{
		const uint32_t clk_sel[4] = {	664615384,  // PLL3 PFD1
										720000000,  // PLL3 PFD0
										528000000,  // PLL2
										396000000}; // PLL2 PFD2       
    8250:	ldmia	r3, {r0, r1, r2, r3}
    8252:	stmdb	lr, {r0, r1, r2, r3}
		uint32_t cbcmr = CCM_CBCMR;
    8256:	ldr	r3, [r7, #24]
		uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    8258:	ubfx	r2, r3, #4, #2
    825c:	ubfx	r3, r3, #26, #3
    8260:	add.w	r2, lr, r2, lsl #2
    8264:	adds	r3, #1
    8266:	ldr.w	r2, [r2, #-16]
    826a:	udiv	r3, r2, r3
		
		uint32_t d, div;    
		if (clck == 0) clck =1;
		d= clkhz/clck;
    826e:	udiv	r2, r3, r6
		if (d && clkhz/d > clck) d++;
    8272:	cbz	r2, 8288 <spi_begin(unsigned long, unsigned char, unsigned char)+0x50>
    8274:	udiv	r3, r3, r2
    8278:	cmp	r6, r3
    827a:	it	cc
    827c:	addcc	r2, #1
		if (d > 257) d= 257;  // max div
    827e:	cmp.w	r2, #258	; 0x102
    8282:	bcc.n	82be <spi_begin(unsigned long, unsigned char, unsigned char)+0x86>
    8284:	movw	r2, #32767	; 0x7fff
		  div = d-2;
		} else {
		  div =0;
		}
		uint32_t ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);
		uint32_t tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    8288:	cmp	r5, #0
    828a:	ldr	r3, [pc, #76]	; (82d8 <spi_begin(unsigned long, unsigned char, unsigned char)+0xa0>)

		// PCS to SCK Delay Prescaler into the After SCK Delay Prescaler  
		if (dataMode & 0x04) tcr |= LPSPI_TCR_CPHA; 


	  spi->CR = 0; 
    828c:	mov.w	r5, #0
		  div = d-2;
		} else {
		  div =0;
		}
		uint32_t ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);
		uint32_t tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    8290:	it	ne
    8292:	movne	r3, #7

		// handle LSB setup 
		if (bitOrder == LSBFIRST) tcr |= LPSPI_TCR_LSBF;

		// Handle Data Mode
		if (dataMode & 0x08) tcr |= LPSPI_TCR_CPOL;
    8294:	lsls	r0, r4, #28
	  spi->CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE; 
	//  spi->CCR = LPSPI_CCR_SCKDIV(4); 
	//  spi->TCR = LPSPI_TCR_FRAMESZ(7); 
	  spi->CCR = ccr; 
	  spi->TCR = tcr; 
	  spi->CR = LPSPI_CR_MEN; 
    8296:	mov.w	r0, #1

		// handle LSB setup 
		if (bitOrder == LSBFIRST) tcr |= LPSPI_TCR_LSBF;

		// Handle Data Mode
		if (dataMode & 0x08) tcr |= LPSPI_TCR_CPOL;
    829a:	it	mi
    829c:	orrmi.w	r3, r3, #2147483648	; 0x80000000

		// PCS to SCK Delay Prescaler into the After SCK Delay Prescaler  
		if (dataMode & 0x04) tcr |= LPSPI_TCR_CPHA; 
    82a0:	lsls	r1, r4, #29


	  spi->CR = 0; 
    82a2:	ldr	r1, [pc, #56]	; (82dc <spi_begin(unsigned long, unsigned char, unsigned char)+0xa4>)
	  spi->CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE; 
    82a4:	mov.w	r4, #3

		// Handle Data Mode
		if (dataMode & 0x08) tcr |= LPSPI_TCR_CPOL;

		// PCS to SCK Delay Prescaler into the After SCK Delay Prescaler  
		if (dataMode & 0x04) tcr |= LPSPI_TCR_CPHA; 
    82a8:	it	mi
    82aa:	orrmi.w	r3, r3, #1073741824	; 0x40000000


	  spi->CR = 0; 
    82ae:	ldr	r1, [r1, #0]
    82b0:	str	r5, [r1, #16]
	  spi->CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE; 
    82b2:	str	r4, [r1, #36]	; 0x24
	//  spi->CCR = LPSPI_CCR_SCKDIV(4); 
	//  spi->TCR = LPSPI_TCR_FRAMESZ(7); 
	  spi->CCR = ccr; 
    82b4:	str	r2, [r1, #64]	; 0x40
	  spi->TCR = tcr; 
    82b6:	str	r3, [r1, #96]	; 0x60
	  spi->CR = LPSPI_CR_MEN; 
    82b8:	str	r0, [r1, #16]
	}
    82ba:	add	sp, #20
    82bc:	pop	{r4, r5, r6, r7, pc}
		uint32_t d, div;    
		if (clck == 0) clck =1;
		d= clkhz/clck;
		if (d && clkhz/d > clck) d++;
		if (d > 257) d= 257;  // max div
		if (d > 2) {
    82be:	cmp	r2, #2
    82c0:	it	ls
    82c2:	movls	r2, #0
    82c4:	bls.n	8288 <spi_begin(unsigned long, unsigned char, unsigned char)+0x50>
    82c6:	subs	r2, #2
    82c8:	lsrs	r3, r2, #1
    82ca:	orr.w	r2, r2, r3, lsl #8
    82ce:	b.n	8288 <spi_begin(unsigned long, unsigned char, unsigned char)+0x50>
    82d0:	.word	0x200003f0
    82d4:	.word	0x400fc000
    82d8:	.word	0x00800007
    82dc:	.word	0x200041c8

000082e0 <sd_init()>:
#endif  // USE_SD_SRC

//***************************************************************************/
uint16_t sd_init(void)
{  int ii;
  pinMode(m_chipSelectPin, OUTPUT);
    82e0:	ldr	r3, [pc, #124]	; (8360 <sd_init()+0x80>)
    82e2:	movs	r1, #1
    82e4:	ldrb	r0, [r3, #0]
  #endif  // USE_SD_CCITT
#endif  // USE_SD_SRC

//***************************************************************************/
uint16_t sd_init(void)
{  int ii;
    82e6:	push	{r4, lr}
  pinMode(m_chipSelectPin, OUTPUT);
    82e8:	bl	9ce8 <pinMode>
	void spi_configPorts(int iconf) 
	{ return;
	}

	uint32_t spi_setup(uint32_t clk)
	{	spi_init() ;
    82ec:	bl	81d8 <spi_init()>
		spi_begin(clk, MSBFIRST, SPI_MODE0);
    82f0:	movs	r2, #0
    82f2:	movs	r1, #1
    82f4:	movs	r0, #100	; 0x64
    82f6:	bl	8238 <spi_begin(unsigned long, unsigned char, unsigned char)>
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    82fa:	ldr	r3, [pc, #104]	; (8364 <sd_init()+0x84>)
    82fc:	ldrh	r3, [r3, #0]
    82fe:	cbz	r3, 8306 <sd_init()+0x26>
    8300:	movs	r0, #1
    8302:	bl	78c4 <sd_chipSelect(unsigned short) [clone .part.0]>
    8306:	ldr	r3, [pc, #96]	; (8368 <sd_init()+0x88>)
  #endif  // USE_SD_CCITT
#endif  // USE_SD_SRC

//***************************************************************************/
uint16_t sd_init(void)
{  int ii;
    8308:	mov.w	r4, #1000	; 0x3e8
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    830c:	movs	r1, #255	; 0xff
    830e:	ldr	r2, [r3, #0]
    8310:	str	r1, [r2, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    8312:	ldr	r3, [r2, #92]	; 0x5c
		if (fifo > 0) return spi->RDR; 
    8314:	tst.w	r3, #2031616	; 0x1f0000
    8318:	beq.n	8312 <sd_init()+0x32>
  spi_configPorts(1); // 1 is PJRC Audio

  spi_setup(100);
  sd_chipSelect(HIGH);
  // must supply min of 74 clock cycles with CS high.
  for (ii = 0; ii < 1000; ii++) spi_send(0XFF);
    831a:	subs	r4, #1
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
		if (fifo > 0) return spi->RDR; 
    831c:	ldr	r3, [r2, #116]	; 0x74
  spi_configPorts(1); // 1 is PJRC Audio

  spi_setup(100);
  sd_chipSelect(HIGH);
  // must supply min of 74 clock cycles with CS high.
  for (ii = 0; ii < 1000; ii++) spi_send(0XFF);
    831e:	bne.n	8310 <sd_init()+0x30>
  if(!sd_connect())
    8320:	bl	7be0 <sd_connect()>
    8324:	cbz	r0, 8352 <sd_init()+0x72>
// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
uint16_t sd_getError(void) {return m_sd_errorCode;}

void sd_setType(uint16_t type) {m_sd_type=type;}
uint16_t sd_getType(void) {return m_sd_type;}
    8326:	ldr	r3, [pc, #68]	; (836c <sd_init()+0x8c>)
  {  
#ifdef DO_DEBUG
     int32_t sd_size,sd_type, bb[4]; 
     bb[0]=bb[1]=bb[2]=bb[3]=0;
     sd_type=sd_getType();
     Serial.printf("Card Type: %d\n",sd_type);
    8328:	ldr	r1, [pc, #68]	; (8370 <sd_init()+0x90>)
    832a:	ldrh	r2, [r3, #0]
    832c:	ldr	r0, [pc, #68]	; (8374 <sd_init()+0x94>)
    832e:	bl	a610 <Print::printf(char const*, ...)>
     sd_size=sd_cardSize();
    8332:	bl	7d80 <sd_cardSize()>
     Serial.printf("Card Size: %d\n",sd_size);
    8336:	ldr	r1, [pc, #64]	; (8378 <sd_init()+0x98>)
    8338:	mov	r2, r0
    833a:	ldr	r0, [pc, #56]	; (8374 <sd_init()+0x94>)
    833c:	bl	a610 <Print::printf(char const*, ...)>
	void spi_configPorts(int iconf) 
	{ return;
	}

	uint32_t spi_setup(uint32_t clk)
	{	spi_init() ;
    8340:	bl	81d8 <spi_init()>
		spi_begin(clk, MSBFIRST, SPI_MODE0);
    8344:	mov	r2, r4
    8346:	movs	r1, #1
    8348:	ldr	r0, [pc, #48]	; (837c <sd_init()+0x9c>)
    834a:	bl	8238 <spi_begin(unsigned long, unsigned char, unsigned char)>
    834e:	movs	r0, #1

  #define MEG (1000*1000)
  spi_setup(33*MEG);

  return true;
}
    8350:	pop	{r4, pc}
  // must supply min of 74 clock cycles with CS high.
  for (ii = 0; ii < 1000; ii++) spi_send(0XFF);
  if(!sd_connect())
  {  // uint32_t errorcode=sd_getError();
//     printDebug("connect:", errorcode);
	Serial.printf("Connect %d\n",2);
    8352:	movs	r2, #2
    8354:	ldr	r1, [pc, #40]	; (8380 <sd_init()+0xa0>)
    8356:	ldr	r0, [pc, #28]	; (8374 <sd_init()+0x94>)
    8358:	bl	a610 <Print::printf(char const*, ...)>
    return false;
    835c:	mov	r0, r4
    835e:	pop	{r4, pc}
    8360:	.word	0x200017f8
    8364:	.word	0x200017fa
    8368:	.word	0x200041c8
    836c:	.word	0x2000ed84
    8370:	.word	0x20000ccc
    8374:	.word	0x20001228
    8378:	.word	0x20000cdc
    837c:	.word	0x01f78a40
    8380:	.word	0x20000cc0

00008384 <SPI_disk_initialize()>:
DSTATUS SPI_disk_status()
{
    return 0;
}
DSTATUS SPI_disk_initialize(void)
{
    8384:	push	{r3, lr}
    if(!sd_init()) return STA_NOINIT;
    8386:	bl	82e0 <sd_init()>
    
    return 0;
}
    838a:	clz	r0, r0
    838e:	lsrs	r0, r0, #5
    8390:	pop	{r3, pc}
    8392:	nop

00008394 <_GLOBAL__sub_I__Z15SPI_disk_statusv>:
// does not compile with C ony with C++
	static IMXRT_LPSPI_t *SPIX[]= { ( IMXRT_LPSPI_t*)0x40394000, 	//SPI2
									( IMXRT_LPSPI_t*)0x40398000, 	//
									( IMXRT_LPSPI_t*)0x4039C000, 	//SPI1
									( IMXRT_LPSPI_t*)0x403A0000};	//SPI
	static IMXRT_LPSPI_t * spi = ( IMXRT_LPSPI_t *)SPIX[ISPI];
    8394:	ldr	r3, [pc, #4]	; (839c <_GLOBAL__sub_I__Z15SPI_disk_statusv+0x8>)
    8396:	ldr	r2, [pc, #8]	; (83a0 <_GLOBAL__sub_I__Z15SPI_disk_statusv+0xc>)
    8398:	str	r2, [r3, #0]
    839a:	bx	lr
    839c:	.word	0x200041c8
    83a0:	.word	0x403a0000

000083a4 <MSC_disk_initialize>:
	}

	int MSC_ioctl(BYTE cmd, BYTE *buff) {return 0;}
#else
	int MSC_disk_status() {return STA_NOINIT;}
	int MSC_disk_initialize() {return STA_NOINIT;}
    83a4:	movs	r0, #1
    83a6:	bx	lr

000083a8 <MSC_disk_read>:
    83a8:	movs	r0, #1
    83aa:	bx	lr

000083ac <MSC_disk_write>:
	int MSC_disk_read(BYTE *buff, DWORD sector, UINT count) {return STA_NOINIT;}
	int MSC_disk_write(const BYTE *buff, DWORD sector, UINT count) {return STA_NOINIT;}
    83ac:	movs	r0, #1
    83ae:	bx	lr

000083b0 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    83b0:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    83b2:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    83b6:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    83ba:	bne.n	8498 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    83bc:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    83be:	bcc.n	8444 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    83c0:	ldr.w	r3, [r1], #4
    83c4:	str.w	r3, [r0], #4
    83c8:	ldr.w	r3, [r1], #4
    83cc:	str.w	r3, [r0], #4
    83d0:	ldr.w	r3, [r1], #4
    83d4:	str.w	r3, [r0], #4
    83d8:	ldr.w	r3, [r1], #4
    83dc:	str.w	r3, [r0], #4
    83e0:	ldr.w	r3, [r1], #4
    83e4:	str.w	r3, [r0], #4
    83e8:	ldr.w	r3, [r1], #4
    83ec:	str.w	r3, [r0], #4
    83f0:	ldr.w	r3, [r1], #4
    83f4:	str.w	r3, [r0], #4
    83f8:	ldr.w	r3, [r1], #4
    83fc:	str.w	r3, [r0], #4
    8400:	ldr.w	r3, [r1], #4
    8404:	str.w	r3, [r0], #4
    8408:	ldr.w	r3, [r1], #4
    840c:	str.w	r3, [r0], #4
    8410:	ldr.w	r3, [r1], #4
    8414:	str.w	r3, [r0], #4
    8418:	ldr.w	r3, [r1], #4
    841c:	str.w	r3, [r0], #4
    8420:	ldr.w	r3, [r1], #4
    8424:	str.w	r3, [r0], #4
    8428:	ldr.w	r3, [r1], #4
    842c:	str.w	r3, [r0], #4
    8430:	ldr.w	r3, [r1], #4
    8434:	str.w	r3, [r0], #4
    8438:	ldr.w	r3, [r1], #4
    843c:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    8440:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    8442:	bcs.n	83c0 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    8444:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    8446:	bcc.n	846c <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    8448:	ldr.w	r3, [r1], #4
    844c:	str.w	r3, [r0], #4
    8450:	ldr.w	r3, [r1], #4
    8454:	str.w	r3, [r0], #4
    8458:	ldr.w	r3, [r1], #4
    845c:	str.w	r3, [r0], #4
    8460:	ldr.w	r3, [r1], #4
    8464:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    8468:	subs	r2, #16
	bhs	.Lmid_block_loop
    846a:	bcs.n	8448 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    846c:	adds	r2, #12
	blo	.Lcopy_less_than_4
    846e:	bcc.n	847c <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    8470:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    8474:	str.w	r3, [r0], #4
	subs	r2, #4
    8478:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    847a:	bcs.n	8470 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    847c:	adds	r2, #4
	beq	.Ldone
    847e:	beq.n	8492 <memcpy+0xe2>

	lsls	r2, r2, #31
    8480:	lsls	r2, r2, #31
	itt ne
    8482:	itt	ne
	ldrbne  r3, [r1], #1
    8484:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    8488:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    848c:	bcc.n	8492 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    848e:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    8490:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    8492:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    8494:	bx	lr
    8496:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    8498:	cmp	r2, #8
	blo	.Lbyte_copy
    849a:	bcc.n	84c4 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    849c:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    849e:	beq.n	83bc <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    84a0:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    84a4:	beq.n	83bc <memcpy+0xc>

	rsb	r3, #4
    84a6:	rsb	r3, r3, #4
	subs	r2, r3
    84aa:	subs	r2, r2, r3

	lsls    r3, r3, #31
    84ac:	lsls	r3, r3, #31
	itt ne
    84ae:	itt	ne
	ldrbne  r3, [r1], #1
    84b0:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    84b4:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    84b8:	bcc.n	83bc <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    84ba:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    84be:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    84c2:	b.n	83bc <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    84c4:	subs	r2, #4
	blo	.Lcopy_less_than_4
    84c6:	bcc.n	847c <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    84c8:	subs	r2, #1
	ldrb    r3, [r1], #1
    84ca:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    84ce:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    84d2:	bcs.n	84c8 <memcpy+0x118>

	ldrb	r3, [r1]
    84d4:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    84d6:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    84d8:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    84da:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    84dc:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    84de:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    84e0:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    84e2:	bx	lr

000084e4 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    84e4:	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    84e6:	ldr	r1, [pc, #80]	; (8538 <rx_queue_transfer+0x54>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    84e8:	mov.w	r7, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    84ec:	ldr	r5, [pc, #76]	; (853c <rx_queue_transfer+0x58>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    84ee:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    84f0:	add.w	r4, r1, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    84f4:	ldr	r6, [pc, #72]	; (8540 <rx_queue_transfer+0x5c>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    84f6:	ldr	r2, [pc, #76]	; (8544 <rx_queue_transfer+0x60>)
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    84f8:	add.w	r5, r5, r0, lsl #5
    84fc:	mov	r1, r4
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    84fe:	str	r7, [r2, #0]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    8500:	mov	r0, r5
    8502:	ldrh	r2, [r6, #0]
    8504:	bl	9520 <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    8508:	ldrh	r1, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    850a:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    850e:	add	r1, r4
	asm volatile("": : :"memory");
	asm("dsb");
    8510:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    8514:	ldr	r2, [pc, #48]	; (8548 <rx_queue_transfer+0x64>)
    8516:	str	r3, [r2, #0]
		location += 32;
    8518:	adds	r3, #32
	} while (location < end_addr);
    851a:	cmp	r1, r3
    851c:	bhi.n	8516 <rx_queue_transfer+0x32>
	asm("dsb");
    851e:	dsb	sy
	asm("isb");
    8522:	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    8526:	movs	r0, #3
    8528:	mov	r1, r5
    852a:	bl	9578 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    852e:	ldr	r3, [pc, #28]	; (854c <rx_queue_transfer+0x68>)
    8530:	mov.w	r2, #131072	; 0x20000
    8534:	str	r2, [r3, #0]
    8536:	pop	{r3, r4, r5, r6, r7, pc}
    8538:	.word	0x20200000
    853c:	.word	0x20003f00
    8540:	.word	0x2000ed8c
    8544:	.word	0xe000e18c
    8548:	.word	0xe000ef5c
    854c:	.word	0xe000e10c

00008550 <rx_event>:
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    8550:	ldr	r2, [pc, #144]	; (85e4 <rx_event+0x94>)
    8552:	ldr	r3, [r0, #4]
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
    8554:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    8558:	ubfx	r3, r3, #16, #15
    855c:	ldrh	r4, [r2, #0]
	int i = t->callback_param;
    855e:	ldr	r5, [r0, #28]
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    8560:	subs	r4, r4, r3
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    8562:	cmp	r4, #0
    8564:	ble.n	85d8 <rx_event+0x88>
		// received a packet with data
		uint32_t head = rx_head;
    8566:	ldr	r1, [pc, #128]	; (85e8 <rx_event+0x98>)
		if (head != rx_tail) {
    8568:	ldr	r2, [pc, #128]	; (85ec <rx_event+0x9c>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    856a:	ldrb	r3, [r1, #0]
		if (head != rx_tail) {
    856c:	ldrb	r2, [r2, #0]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    856e:	uxtb	r3, r3
		if (head != rx_tail) {
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    8570:	ldr	r0, [pc, #124]	; (85f0 <rx_event+0xa0>)
			uint32_t count = rx_count[ii];
    8572:	ldr	r6, [pc, #128]	; (85f4 <rx_event+0xa4>)
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
		if (head != rx_tail) {
    8574:	cmp	r3, r2
    8576:	beq.n	8588 <rx_event+0x38>
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    8578:	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    857c:	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    8580:	rsb	r2, r7, #512	; 0x200
    8584:	cmp	r4, r2
    8586:	bls.n	85ae <rx_event+0x5e>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    8588:	adds	r3, #1
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
    858a:	movs	r2, #0
    858c:	ldr	r7, [pc, #104]	; (85f8 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    858e:	cmp	r3, #8
				// TODO: trigger serialEvent
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
    8590:	strh.w	r4, [r6, r5, lsl #1]
		rx_index[i] = 0;
    8594:	strh.w	r2, [r7, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
    8598:	ldr	r6, [pc, #96]	; (85fc <rx_event+0xac>)
    859a:	ite	ls
    859c:	uxtbls	r2, r3
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    859e:	movhi	r3, r2
		rx_list[head] = i;
		rx_head = head;
    85a0:	strb	r2, [r1, #0]
		rx_available += len;
    85a2:	ldr	r2, [r6, #0]
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
    85a4:	strb	r5, [r0, r3]
		rx_head = head;
		rx_available += len;
    85a6:	add	r4, r2
    85a8:	str	r4, [r6, #0]
    85aa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    85ae:	ldr	r3, [pc, #80]	; (8600 <rx_event+0xb0>)
    85b0:	add.w	r0, r7, r8, lsl #9
    85b4:	mov	r2, r4
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    85b6:	add	r7, r4
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    85b8:	add.w	r1, r3, r5, lsl #9
    85bc:	add	r0, r3
    85be:	bl	83b0 <memcpy>
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
    85c2:	ldr	r2, [pc, #56]	; (85fc <rx_event+0xac>)
				rx_queue_transfer(i);
    85c4:	mov	r0, r5
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    85c6:	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    85ca:	ldr	r3, [r2, #0]
    85cc:	add	r4, r3
    85ce:	str	r4, [r2, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    85d0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
				rx_queue_transfer(i);
    85d4:	b.w	84e4 <rx_queue_transfer>
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    85d8:	mov	r0, r5
	}
}
    85da:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    85de:	b.w	84e4 <rx_queue_transfer>
    85e2:	nop
    85e4:	.word	0x2000ed8c
    85e8:	.word	0x2000ed9b
    85ec:	.word	0x2000ed9d
    85f0:	.word	0x2000c2dc
    85f4:	.word	0x2000c2bc
    85f8:	.word	0x2000c2cc
    85fc:	.word	0x2000c2b8
    8600:	.word	0x20200000

00008604 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    8604:	ldr	r3, [pc, #120]	; (8680 <usb_serial_flush_callback+0x7c>)
    8606:	ldrb	r2, [r3, #0]
    8608:	cbnz	r2, 8622 <usb_serial_flush_callback+0x1e>
    860a:	and.w	r3, r2, #255	; 0xff
	if (!usb_configuration) return;
    860e:	ldr	r2, [pc, #116]	; (8684 <usb_serial_flush_callback+0x80>)
    8610:	ldrb	r2, [r2, #0]
    8612:	cbz	r2, 8622 <usb_serial_flush_callback+0x1e>
	asm("dsb" ::: "memory");
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
    8614:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
    8618:	ldr	r5, [pc, #108]	; (8688 <usb_serial_flush_callback+0x84>)
    861a:	ldrh	r2, [r5, #0]
    861c:	cbnz	r2, 8624 <usb_serial_flush_callback+0x20>
    861e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8622:	bx	lr
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    8624:	ldr	r6, [pc, #100]	; (868c <usb_serial_flush_callback+0x88>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    8626:	rsb	r8, r2, #2048	; 0x800
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    862a:	ldr	r7, [pc, #100]	; (8690 <usb_serial_flush_callback+0x8c>)
    862c:	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    862e:	mov	r2, r8
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    8630:	ldr	r4, [pc, #96]	; (8694 <usb_serial_flush_callback+0x90>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    8632:	add.w	r7, r7, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    8636:	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    863a:	mov	r0, r7
    863c:	mov	r1, r4
    863e:	bl	9520 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    8642:	add.w	r2, r8, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    8646:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    864a:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    864e:	ldr	r3, [pc, #72]	; (8698 <usb_serial_flush_callback+0x94>)
    8650:	str	r1, [r3, #0]
		location += 32;
    8652:	adds	r1, #32
	} while (location < end_addr);
    8654:	cmp	r2, r1
    8656:	bhi.n	8650 <usb_serial_flush_callback+0x4c>
	asm("dsb");
    8658:	dsb	sy
	asm("isb");
    865c:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    8660:	movs	r0, #3
    8662:	mov	r1, r7
    8664:	bl	9550 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    8668:	ldrb	r3, [r6, #0]
    866a:	ldr	r2, [pc, #32]	; (868c <usb_serial_flush_callback+0x88>)
    866c:	adds	r3, #1
    866e:	uxtb	r3, r3
    8670:	cmp	r3, #3
    8672:	it	hi
    8674:	movhi	r3, #0
    8676:	strb	r3, [r2, #0]
	tx_available = 0;
    8678:	movs	r3, #0
    867a:	strh	r3, [r5, #0]
    867c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8680:	.word	0x2000eda3
    8684:	.word	0x2000eda5
    8688:	.word	0x2000ed90
    868c:	.word	0x2000eda1
    8690:	.word	0x20004080
    8694:	.word	0x20201000
    8698:	.word	0xe000ef70

0000869c <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    869c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    86a0:	sub	sp, #20
    86a2:	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    86a4:	str	r1, [sp, #0]
    86a6:	cmp	r1, #0
    86a8:	beq.w	8802 <usb_serial_write.part.1+0x166>
    86ac:	movs	r3, #0
    86ae:	ldr	r5, [pc, #344]	; (8808 <usb_serial_write.part.1+0x16c>)
    86b0:	ldr.w	r8, [pc, #372]	; 8828 <usb_serial_write.part.1+0x18c>
    86b4:	ldr.w	sl, [pc, #352]	; 8818 <usb_serial_write.part.1+0x17c>
				break;
			}
			asm("dsb" ::: "memory");
			tx_noautoflush = 0;
			if (!waiting) {
				wait_begin_at = systick_millis_count;
    86b8:	ldr	r7, [pc, #336]	; (880c <usb_serial_write.part.1+0x170>)
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    86ba:	ldr.w	fp, [pc, #368]	; 882c <usb_serial_write.part.1+0x190>
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    86be:	str	r3, [sp, #4]
		tx_noautoflush = 1;
    86c0:	movs	r2, #1
		transfer_t *xfer = tx_transfer + tx_head;
    86c2:	ldr	r3, [pc, #332]	; (8810 <usb_serial_write.part.1+0x174>)
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		tx_noautoflush = 1;
    86c4:	strb	r2, [r5, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    86c6:	ldrb	r4, [r3, #0]
    86c8:	ldr	r2, [pc, #328]	; (8814 <usb_serial_write.part.1+0x178>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    86ca:	ldrh.w	r3, [r8]
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		tx_noautoflush = 1;
		transfer_t *xfer = tx_transfer + tx_head;
    86ce:	add.w	r9, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    86d2:	cbnz	r3, 871e <usb_serial_write.part.1+0x82>
    86d4:	mov	r6, r3
    86d6:	mov	r4, r3
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
    86d8:	mov	r0, r9
    86da:	bl	959c <usb_transfer_status>
			if (!(status & 0x80)) {
    86de:	ands.w	r0, r0, #128	; 0x80
    86e2:	beq.n	87e2 <usb_serial_write.part.1+0x146>
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			asm("dsb" ::: "memory");
    86e4:	dsb	sy
			tx_noautoflush = 0;
    86e8:	movs	r2, #0
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    86ea:	ldrb.w	r3, [sl]
    86ee:	ldr	r1, [pc, #296]	; (8818 <usb_serial_write.part.1+0x17c>)
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			asm("dsb" ::: "memory");
			tx_noautoflush = 0;
    86f0:	strb	r2, [r5, #0]
			if (!waiting) {
    86f2:	cbnz	r4, 86f6 <usb_serial_write.part.1+0x5a>
				wait_begin_at = systick_millis_count;
    86f4:	ldr	r6, [r7, #0]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    86f6:	cmp	r3, #0
    86f8:	bne.n	87b0 <usb_serial_write.part.1+0x114>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    86fa:	ldr	r3, [r7, #0]
    86fc:	subs	r3, r3, r6
    86fe:	cmp	r3, #120	; 0x78
    8700:	bhi.n	87f6 <usb_serial_write.part.1+0x15a>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    8702:	ldrb.w	r3, [fp]
    8706:	cmp	r3, #0
    8708:	beq.n	87b0 <usb_serial_write.part.1+0x114>
			yield();
    870a:	bl	a394 <yield>
			tx_noautoflush = 1;
    870e:	movs	r4, #1
	while (size > 0) {
		tx_noautoflush = 1;
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    8710:	ldrh.w	r3, [r8]
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
			yield();
			tx_noautoflush = 1;
    8714:	strb	r4, [r5, #0]
	while (size > 0) {
		tx_noautoflush = 1;
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    8716:	cmp	r3, #0
    8718:	beq.n	86d8 <usb_serial_write.part.1+0x3c>
    871a:	ldr	r2, [pc, #244]	; (8810 <usb_serial_write.part.1+0x174>)
    871c:	ldrb	r4, [r2, #0]
    871e:	mov	r2, r3
    8720:	rsb	r0, r3, #2048	; 0x800
			if (!usb_configuration) return sent;
			yield();
			tx_noautoflush = 1;
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    8724:	lsls	r4, r4, #11
		if (size >= tx_available) {
    8726:	ldr	r6, [sp, #0]
			if (!usb_configuration) return sent;
			yield();
			tx_noautoflush = 1;
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    8728:	ldr	r1, [pc, #240]	; (881c <usb_serial_write.part.1+0x180>)
    872a:	add	r0, r4
		if (size >= tx_available) {
    872c:	cmp	r6, r2
			if (!usb_configuration) return sent;
			yield();
			tx_noautoflush = 1;
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    872e:	add	r0, r1
		if (size >= tx_available) {
    8730:	bcc.n	87b8 <usb_serial_write.part.1+0x11c>
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    8732:	add	r4, r1
			tx_noautoflush = 1;
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
    8734:	ldr	r1, [sp, #8]
    8736:	bl	83b0 <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    873a:	movs	r3, #0
    873c:	mov	r1, r4
    873e:	mov.w	r2, #2048	; 0x800
    8742:	mov	r0, r9
    8744:	bl	9520 <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    8748:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    874c:	add.w	r4, r4, #2048	; 0x800
	asm volatile("": : :"memory");
	asm("dsb");
    8750:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    8754:	ldr	r2, [pc, #200]	; (8820 <usb_serial_write.part.1+0x184>)
    8756:	str	r3, [r2, #0]
		location += 32;
    8758:	adds	r3, #32
	} while (location < end_addr);
    875a:	cmp	r4, r3
    875c:	bhi.n	8754 <usb_serial_write.part.1+0xb8>
	asm("dsb");
    875e:	dsb	sy
	asm("isb");
    8762:	isb	sy
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    8766:	movs	r0, #3
    8768:	mov	r1, r9
    876a:	bl	9550 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    876e:	ldr	r3, [pc, #160]	; (8810 <usb_serial_write.part.1+0x174>)
    8770:	ldr	r2, [pc, #156]	; (8810 <usb_serial_write.part.1+0x174>)
    8772:	ldrb	r3, [r3, #0]
			size -= tx_available;
    8774:	ldr	r0, [sp, #0]
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    8776:	adds	r3, #1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    8778:	ldr	r1, [pc, #168]	; (8824 <usb_serial_write.part.1+0x188>)
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    877a:	uxtb	r3, r3
    877c:	cmp	r3, #3
    877e:	it	hi
    8780:	movhi	r3, #0
    8782:	strb	r3, [r2, #0]
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    8784:	movs	r2, #0
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
    8786:	ldrh.w	r3, [r8]
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    878a:	strh.w	r2, [r8]
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
    878e:	subs	r0, r0, r3
    8790:	str	r0, [sp, #0]
			sent += tx_available;
    8792:	ldr	r0, [sp, #4]
    8794:	add	r0, r3
    8796:	str	r0, [sp, #4]
			data += tx_available;
    8798:	ldr	r0, [sp, #8]
    879a:	add	r0, r3
    879c:	str	r0, [sp, #8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    879e:	str.w	r2, [r1, #132]	; 0x84
			tx_available -= size;
			sent += size;
			size = 0;
			timer_start_oneshot();
		}
		asm("dsb" ::: "memory");
    87a2:	dsb	sy
		tx_noautoflush = 0;
    87a6:	movs	r3, #0
    87a8:	strb	r3, [r5, #0]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    87aa:	ldr	r3, [sp, #0]
    87ac:	cmp	r3, #0
    87ae:	bne.n	86c0 <usb_serial_write.part.1+0x24>
    87b0:	ldr	r0, [sp, #4]
		}
		asm("dsb" ::: "memory");
		tx_noautoflush = 0;
	}
	return sent;
}
    87b2:	add	sp, #20
    87b4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    87b8:	ldr	r4, [sp, #0]
    87ba:	str	r3, [sp, #12]
			tx_available -= size;
			sent += size;
    87bc:	ldr	r3, [sp, #4]
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    87be:	mov	r2, r4
    87c0:	ldr	r1, [sp, #8]
			tx_available -= size;
			sent += size;
    87c2:	add	r3, r4
    87c4:	str	r3, [sp, #4]
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    87c6:	bl	83b0 <memcpy>
			tx_available -= size;
    87ca:	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    87cc:	mov.w	r1, #3221225472	; 0xc0000000
    87d0:	ldr	r2, [pc, #80]	; (8824 <usb_serial_write.part.1+0x188>)
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
			sent += size;
			size = 0;
    87d2:	movs	r0, #0
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    87d4:	subs	r3, r3, r4
			sent += size;
			size = 0;
    87d6:	str	r0, [sp, #0]
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    87d8:	strh.w	r3, [r8]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    87dc:	str.w	r1, [r2, #132]	; 0x84
    87e0:	b.n	87a2 <usb_serial_write.part.1+0x106>
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    87e2:	mov.w	r3, #2048	; 0x800
    87e6:	ldr	r2, [pc, #40]	; (8810 <usb_serial_write.part.1+0x174>)
				transmit_previous_timeout = 0;
    87e8:	strb.w	r0, [sl]
    87ec:	ldrb	r4, [r2, #0]
    87ee:	mov	r2, r3
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    87f0:	strh.w	r3, [r8]
    87f4:	b.n	8724 <usb_serial_write.part.1+0x88>
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    87f6:	movs	r3, #1
				return sent;
    87f8:	ldr	r0, [sp, #4]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    87fa:	strb	r3, [r1, #0]
		}
		asm("dsb" ::: "memory");
		tx_noautoflush = 0;
	}
	return sent;
}
    87fc:	add	sp, #20
    87fe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    8802:	ldr	r0, [sp, #0]
    8804:	b.n	87b2 <usb_serial_write.part.1+0x116>
    8806:	nop
    8808:	.word	0x2000eda3
    880c:	.word	0x2000c320
    8810:	.word	0x2000eda1
    8814:	.word	0x20004080
    8818:	.word	0x2000eda0
    881c:	.word	0x20201000
    8820:	.word	0xe000ef70
    8824:	.word	0x402e0000
    8828:	.word	0x2000ed90
    882c:	.word	0x2000eda5

00008830 <usb_serial_reset>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_serial_reset(void)
{
    8830:	bx	lr
    8832:	nop

00008834 <usb_serial_configure>:
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    8834:	ldr	r3, [pc, #196]	; (88fc <usb_serial_configure+0xc8>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
    8836:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    883a:	ldrb	r3, [r3, #0]
		tx_packet_size = CDC_TX_SIZE_480;
    883c:	ldr	r7, [pc, #192]	; (8900 <usb_serial_configure+0xcc>)
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    883e:	cmp	r3, #0
    8840:	beq.n	88ec <usb_serial_configure+0xb8>
		tx_packet_size = CDC_TX_SIZE_480;
    8842:	mov.w	r3, #512	; 0x200
		rx_packet_size = CDC_RX_SIZE_480;
    8846:	ldr.w	r8, [pc, #236]	; 8934 <usb_serial_configure+0x100>
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
    884a:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    884c:	strh.w	r3, [r8]
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    8850:	movs	r1, #0
    8852:	movs	r2, #128	; 0x80
    8854:	ldr	r0, [pc, #172]	; (8904 <usb_serial_configure+0xd0>)
	tx_head = 0;
    8856:	mov	r5, r1
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    8858:	ldr	r6, [pc, #172]	; (8908 <usb_serial_configure+0xd4>)
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    885a:	bl	bc44 <memset>
	tx_head = 0;
    885e:	ldr	r4, [pc, #172]	; (890c <usb_serial_configure+0xd8>)
	tx_available = 0;
    8860:	ldr	r3, [pc, #172]	; (8910 <usb_serial_configure+0xdc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    8862:	mov	r1, r5
    8864:	mov.w	r2, #256	; 0x100
    8868:	ldr	r0, [pc, #168]	; (8914 <usb_serial_configure+0xe0>)
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    886a:	strb	r5, [r4, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    886c:	mov	r4, r5
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    886e:	strh	r5, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    8870:	bl	bc44 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    8874:	str	r5, [r6, #0]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    8876:	mov	r3, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    8878:	str	r5, [r6, #4]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    887a:	mov	r2, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    887c:	str	r5, [r6, #8]
    887e:	str	r5, [r6, #12]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    8880:	ldr	r1, [pc, #148]	; (8918 <usb_serial_configure+0xe4>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    8882:	ldr	r6, [pc, #152]	; (891c <usb_serial_configure+0xe8>)
	rx_head = 0;
	rx_tail = 0;
    8884:	ldr	r0, [pc, #152]	; (8920 <usb_serial_configure+0xec>)
	rx_available = 0;
    8886:	ldr.w	lr, [pc, #176]	; 8938 <usb_serial_configure+0x104>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    888a:	strb	r5, [r1, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    888c:	movs	r1, #16
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
    888e:	strb	r5, [r0, #0]
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    8890:	movs	r0, #2
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    8892:	str	r5, [r6, #0]
    8894:	str	r5, [r6, #4]
    8896:	str	r5, [r6, #8]
    8898:	str	r5, [r6, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
    889a:	str.w	r5, [lr]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    889e:	bl	94b8 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    88a2:	ldrh.w	r1, [r8]
    88a6:	mov	r2, r5
    88a8:	ldr	r3, [pc, #120]	; (8924 <usb_serial_configure+0xf0>)
    88aa:	movs	r0, #3
    88ac:	bl	9454 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    88b0:	mov	r3, r5
    88b2:	ldrh	r1, [r7, #0]
    88b4:	movs	r2, #1
    88b6:	movs	r0, #3
    88b8:	bl	94b8 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    88bc:	mov	r0, r4
    88be:	adds	r4, #1
    88c0:	bl	84e4 <rx_queue_transfer>
    88c4:	cmp	r4, #8
    88c6:	bne.n	88bc <usb_serial_configure+0x88>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    88c8:	ldr	r3, [pc, #92]	; (8928 <usb_serial_configure+0xf4>)
	USB1_GPTIMER0LD = microseconds - 1;
    88ca:	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    88cc:	ldr	r0, [pc, #92]	; (892c <usb_serial_configure+0xf8>)
	USB1_GPTIMER0CTRL = 0;
    88ce:	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    88d0:	ldr	r4, [pc, #92]	; (8930 <usb_serial_configure+0xfc>)
    88d2:	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    88d4:	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    88d8:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    88dc:	ldr.w	r2, [r3, #328]	; 0x148
    88e0:	orr.w	r2, r2, #16777216	; 0x1000000
    88e4:	str.w	r2, [r3, #328]	; 0x148
    88e8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    88ec:	movs	r3, #64	; 0x40
		rx_packet_size = CDC_RX_SIZE_12;
    88ee:	ldr.w	r8, [pc, #68]	; 8934 <usb_serial_configure+0x100>
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    88f2:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_12;
    88f4:	strh.w	r3, [r8]
    88f8:	b.n	8850 <usb_serial_configure+0x1c>
    88fa:	nop
    88fc:	.word	0x2000eda6
    8900:	.word	0x2000ed92
    8904:	.word	0x20004080
    8908:	.word	0x2000c2bc
    890c:	.word	0x2000eda1
    8910:	.word	0x2000ed90
    8914:	.word	0x20003f00
    8918:	.word	0x2000ed9b
    891c:	.word	0x2000c2cc
    8920:	.word	0x2000ed9d
    8924:	.word	0x00008551
    8928:	.word	0x402e0000
    892c:	.word	0x2000c330
    8930:	.word	0x00008605
    8934:	.word	0x2000ed8c
    8938:	.word	0x2000c2b8

0000893c <usb_serial_read>:
int usb_serial_read(void *buffer, uint32_t size)
{
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    893c:	ldr	r3, [pc, #196]	; (8a04 <usb_serial_read+0xc8>)
    893e:	mov.w	r2, #131072	; 0x20000

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    8942:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    8946:	str	r2, [r3, #0]

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    8948:	sub	sp, #12
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    894a:	ldr	r3, [pc, #188]	; (8a08 <usb_serial_read+0xcc>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    894c:	mov	r9, r1
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    894e:	ldrb	r4, [r3, #0]
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    8950:	cmp	r1, #0
    8952:	beq.n	89fc <usb_serial_read+0xc0>
    8954:	ldr	r3, [pc, #180]	; (8a0c <usb_serial_read+0xd0>)
    8956:	uxtb	r4, r4
    8958:	ldrb	r3, [r3, #0]
    895a:	cmp	r4, r3
    895c:	beq.n	8a00 <usb_serial_read+0xc4>
    895e:	mov	sl, r0
    8960:	movs	r7, #0
    8962:	ldr.w	fp, [pc, #192]	; 8a24 <usb_serial_read+0xe8>
		if (++tail > RX_NUM) tail = 0;
    8966:	adds	r4, #1
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    8968:	ldr	r3, [pc, #164]	; (8a10 <usb_serial_read+0xd4>)
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
    896a:	rsb	r8, r7, r9
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    896e:	mov	r0, sl
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    8970:	cmp	r4, #9
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    8972:	str	r3, [sp, #4]
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
    8974:	ldr	r3, [pc, #156]	; (8a14 <usb_serial_read+0xd8>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    8976:	it	cs
    8978:	movcs	r4, #0
		uint32_t i = rx_list[tail];
    897a:	ldrb	r5, [r3, r4]
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    897c:	ldr	r3, [pc, #144]	; (8a10 <usb_serial_read+0xd4>)
    897e:	ldrh.w	lr, [r3, r5, lsl #1]
    8982:	ldr	r3, [pc, #148]	; (8a18 <usb_serial_read+0xdc>)
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    8984:	add.w	r1, lr, r5, lsl #9
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    8988:	ldrh.w	r6, [r3, r5, lsl #1]
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    898c:	ldr	r3, [pc, #140]	; (8a1c <usb_serial_read+0xe0>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    898e:	rsb	r6, lr, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    8992:	add	r1, r3
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    8994:	cmp	r8, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    8996:	mov	r2, r6
			p += avail;
			rx_available -= avail;
			count += avail;
    8998:	add	r7, r6
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    899a:	bcs.n	89d0 <usb_serial_read+0x94>
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    899c:	add.w	r1, lr, r5, lsl #9
    89a0:	mov	r2, r8
    89a2:	add	r1, r3
    89a4:	bl	83b0 <memcpy>
			rx_available -= len;
			rx_index[i] += len;
    89a8:	ldr	r3, [sp, #4]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    89aa:	ldr.w	r1, [fp]
    89ae:	mov	r0, r9
			rx_index[i] += len;
    89b0:	ldrh.w	r2, [r3, r5, lsl #1]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    89b4:	rsb	r1, r8, r1
			rx_index[i] += len;
    89b8:	add	r8, r2
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    89ba:	str.w	r1, [fp]
			rx_index[i] += len;
    89be:	strh.w	r8, [r3, r5, lsl #1]
			count += avail;
			rx_tail = tail;
			rx_queue_transfer(i);
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
    89c2:	ldr	r3, [pc, #92]	; (8a20 <usb_serial_read+0xe4>)
    89c4:	mov.w	r2, #131072	; 0x20000
    89c8:	str	r2, [r3, #0]
	return count;
}
    89ca:	add	sp, #12
    89cc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    89d0:	bl	83b0 <memcpy>
			p += avail;
			rx_available -= avail;
    89d4:	ldr.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    89d8:	uxtb	r3, r4
			rx_queue_transfer(i);
    89da:	mov	r0, r5
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
			rx_available -= avail;
    89dc:	subs	r2, r2, r6
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
    89de:	add	sl, r6
			rx_available -= avail;
    89e0:	str.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    89e4:	ldr	r2, [pc, #32]	; (8a08 <usb_serial_read+0xcc>)
    89e6:	strb	r3, [r2, #0]
			rx_queue_transfer(i);
    89e8:	bl	84e4 <rx_queue_transfer>

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    89ec:	cmp	r9, r7
    89ee:	bls.n	89f8 <usb_serial_read+0xbc>
    89f0:	ldr	r3, [pc, #24]	; (8a0c <usb_serial_read+0xd0>)
    89f2:	ldrb	r3, [r3, #0]
    89f4:	cmp	r4, r3
    89f6:	bne.n	8966 <usb_serial_read+0x2a>
    89f8:	mov	r0, r7
    89fa:	b.n	89c2 <usb_serial_read+0x86>
    89fc:	mov	r0, r1
    89fe:	b.n	89c2 <usb_serial_read+0x86>
    8a00:	movs	r0, #0
    8a02:	b.n	89c2 <usb_serial_read+0x86>
    8a04:	.word	0xe000e18c
    8a08:	.word	0x2000ed9d
    8a0c:	.word	0x2000ed9b
    8a10:	.word	0x2000c2cc
    8a14:	.word	0x2000c2dc
    8a18:	.word	0x2000c2bc
    8a1c:	.word	0x20200000
    8a20:	.word	0xe000e10c
    8a24:	.word	0x2000c2b8

00008a28 <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    8a28:	ldr	r3, [pc, #44]	; (8a58 <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
    8a2a:	ldr	r2, [pc, #48]	; (8a5c <usb_serial_peekchar+0x34>)
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    8a2c:	ldrb	r3, [r3, #0]
	if (tail == rx_head) return -1;
    8a2e:	ldrb	r2, [r2, #0]
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    8a30:	uxtb	r3, r3
	if (tail == rx_head) return -1;
    8a32:	cmp	r3, r2
    8a34:	beq.n	8a52 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    8a36:	adds	r3, #1
	uint32_t i = rx_list[tail];
    8a38:	ldr	r0, [pc, #36]	; (8a60 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    8a3a:	ldr	r2, [pc, #40]	; (8a64 <usb_serial_peekchar+0x3c>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    8a3c:	cmp	r3, #9
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    8a3e:	ldr	r1, [pc, #40]	; (8a68 <usb_serial_peekchar+0x40>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    8a40:	it	cs
    8a42:	movcs	r3, #0
	uint32_t i = rx_list[tail];
    8a44:	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    8a46:	ldrh.w	r1, [r1, r3, lsl #1]
    8a4a:	add.w	r3, r2, r3, lsl #9
    8a4e:	ldrb	r0, [r3, r1]
    8a50:	bx	lr

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
    8a52:	mov.w	r0, #4294967295
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
}
    8a56:	bx	lr
    8a58:	.word	0x2000ed9d
    8a5c:	.word	0x2000ed9b
    8a60:	.word	0x2000c2dc
    8a64:	.word	0x20200000
    8a68:	.word	0x2000c2cc

00008a6c <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	uint32_t n = rx_available;
    8a6c:	ldr	r3, [pc, #12]	; (8a7c <usb_serial_available+0x10>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
}

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
    8a6e:	push	{r4, lr}
	uint32_t n = rx_available;
    8a70:	ldr	r4, [r3, #0]
	if (n == 0) yield();
    8a72:	cbnz	r4, 8a78 <usb_serial_available+0xc>
    8a74:	bl	a394 <yield>
	return n;
}
    8a78:	mov	r0, r4
    8a7a:	pop	{r4, pc}
    8a7c:	.word	0x2000c2b8

00008a80 <usb_serial_flush_input>:

// discard any buffered input
void usb_serial_flush_input(void)
{
    8a80:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    8a84:	ldr	r6, [pc, #84]	; (8adc <usb_serial_flush_input+0x5c>)
	while (tail != rx_head) {
    8a86:	ldr	r5, [pc, #88]	; (8ae0 <usb_serial_flush_input+0x60>)
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    8a88:	ldrb	r4, [r6, #0]
	while (tail != rx_head) {
    8a8a:	ldrb	r3, [r5, #0]
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    8a8c:	uxtb	r4, r4
	while (tail != rx_head) {
    8a8e:	cmp	r4, r3
    8a90:	beq.n	8ad6 <usb_serial_flush_input+0x56>
    8a92:	ldr.w	r9, [pc, #84]	; 8ae8 <usb_serial_flush_input+0x68>
    8a96:	ldr.w	fp, [pc, #84]	; 8aec <usb_serial_flush_input+0x6c>
    8a9a:	ldr.w	r8, [pc, #84]	; 8af0 <usb_serial_flush_input+0x70>
    8a9e:	ldr	r7, [pc, #68]	; (8ae4 <usb_serial_flush_input+0x64>)
		if (++tail > RX_NUM) tail = 0;
    8aa0:	adds	r4, #1
    8aa2:	cmp	r4, #8
    8aa4:	uxtb.w	sl, r4
    8aa8:	bls.n	8aae <usb_serial_flush_input+0x2e>
    8aaa:	movs	r4, #0
    8aac:	mov	sl, r4
		uint32_t i = rx_list[tail];
    8aae:	ldrb.w	r1, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    8ab2:	ldr.w	r2, [fp]
    8ab6:	ldrh.w	r3, [r8, r1, lsl #1]
		rx_queue_transfer(i);
    8aba:	mov	r0, r1
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
    8abc:	ldrh.w	r1, [r7, r1, lsl #1]
    8ac0:	subs	r3, r3, r1
    8ac2:	subs	r3, r2, r3
    8ac4:	str.w	r3, [fp]
		rx_queue_transfer(i);
    8ac8:	bl	84e4 <rx_queue_transfer>
		rx_tail = tail;
    8acc:	strb.w	sl, [r6]

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
    8ad0:	ldrb	r3, [r5, #0]
    8ad2:	cmp	r4, r3
    8ad4:	bne.n	8aa0 <usb_serial_flush_input+0x20>
    8ad6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8ada:	nop
    8adc:	.word	0x2000ed9d
    8ae0:	.word	0x2000ed9b
    8ae4:	.word	0x2000c2cc
    8ae8:	.word	0x2000c2dc
    8aec:	.word	0x2000c2b8
    8af0:	.word	0x2000c2bc

00008af4 <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    8af4:	push	{lr}
    8af6:	sub	sp, #12
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
    8af8:	movs	r1, #1
    8afa:	add.w	r0, sp, #7
    8afe:	bl	893c <usb_serial_read>
    8b02:	cbz	r0, 8b0e <usb_serial_getchar+0x1a>
    8b04:	ldrb.w	r0, [sp, #7]
	return -1;
}
    8b08:	add	sp, #12
    8b0a:	ldr.w	pc, [sp], #4
// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
	return -1;
    8b0e:	mov.w	r0, #4294967295
    8b12:	b.n	8b08 <usb_serial_getchar+0x14>

00008b14 <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    8b14:	ldr	r3, [pc, #36]	; (8b3c <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    8b16:	push	{lr}
    8b18:	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    8b1a:	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    8b1c:	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    8b20:	cbnz	r3, 8b2c <usb_serial_putchar+0x18>
    8b22:	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
    8b26:	add	sp, #12
    8b28:	ldr.w	pc, [sp], #4
    8b2c:	movs	r1, #1
    8b2e:	add.w	r0, sp, #7
    8b32:	bl	869c <usb_serial_write.part.1>
    8b36:	add	sp, #12
    8b38:	ldr.w	pc, [sp], #4
    8b3c:	.word	0x2000eda5

00008b40 <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    8b40:	ldr	r3, [pc, #16]	; (8b54 <usb_serial_write+0x14>)
    8b42:	ldrb	r3, [r3, #0]
    8b44:	and.w	r2, r3, #255	; 0xff
    8b48:	cbz	r3, 8b4e <usb_serial_write+0xe>
    8b4a:	b.w	869c <usb_serial_write.part.1>
		}
		asm("dsb" ::: "memory");
		tx_noautoflush = 0;
	}
	return sent;
}
    8b4e:	mov	r0, r2
    8b50:	bx	lr
    8b52:	nop
    8b54:	.word	0x2000eda5

00008b58 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    8b58:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    8b5c:	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
    8b5e:	ldr.w	r8, [pc, #68]	; 8ba4 <usb_serial_write_buffer_free+0x4c>
    8b62:	movs	r3, #1
    8b64:	ldr	r5, [pc, #52]	; (8b9c <usb_serial_write_buffer_free+0x44>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
    8b66:	mov	r7, r4
    8b68:	ldr	r6, [pc, #52]	; (8ba0 <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    8b6a:	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    8b6e:	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    8b70:	mov	r0, r5
    8b72:	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    8b74:	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    8b76:	add.w	r4, r4, #1
		if (i == tx_head) continue;
    8b7a:	beq.n	8b88 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    8b7c:	bl	959c <usb_transfer_status>
    8b80:	lsls	r3, r0, #24
    8b82:	it	pl
    8b84:	addpl.w	r7, r7, #2048	; 0x800

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    8b88:	cmp	r4, #4
    8b8a:	bne.n	8b6e <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	asm("dsb" ::: "memory");
    8b8c:	dsb	sy
	tx_noautoflush = 0;
    8b90:	movs	r3, #0
	return sum;
}
    8b92:	mov	r0, r7
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	asm("dsb" ::: "memory");
	tx_noautoflush = 0;
    8b94:	strb.w	r3, [r8]
	return sum;
}
    8b98:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8b9c:	.word	0x20004080
    8ba0:	.word	0x2000eda1
    8ba4:	.word	0x2000eda3

00008ba8 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    8ba8:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	if (!usb_configuration) return;
    8bac:	ldr	r3, [pc, #128]	; (8c30 <usb_serial_flush_output+0x88>)
    8bae:	ldrb	r3, [r3, #0]
    8bb0:	cbz	r3, 8bb8 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    8bb2:	ldr	r5, [pc, #128]	; (8c34 <usb_serial_flush_output+0x8c>)
    8bb4:	ldrh	r2, [r5, #0]
    8bb6:	cbnz	r2, 8bbc <usb_serial_flush_output+0x14>
    8bb8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    8bbc:	ldr.w	r8, [pc, #136]	; 8c48 <usb_serial_flush_output+0xa0>
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    8bc0:	rsb	r9, r2, #2048	; 0x800
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    8bc4:	ldr	r6, [pc, #112]	; (8c38 <usb_serial_flush_output+0x90>)
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    8bc6:	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
    8bca:	ldrb.w	r1, [r8]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    8bce:	mov	r2, r9

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    8bd0:	ldr	r4, [pc, #104]	; (8c3c <usb_serial_flush_output+0x94>)
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    8bd2:	movs	r3, #0
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    8bd4:	add.w	r6, r6, r1, lsl #5
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    8bd8:	ldr	r7, [pc, #100]	; (8c40 <usb_serial_flush_output+0x98>)
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    8bda:	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    8bde:	mov	r0, r6
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    8be0:	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    8be4:	mov	r1, r4
    8be6:	bl	9520 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    8bea:	add.w	r2, r9, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    8bee:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    8bf2:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    8bf6:	ldr	r3, [pc, #76]	; (8c44 <usb_serial_flush_output+0x9c>)
    8bf8:	str	r1, [r3, #0]
		location += 32;
    8bfa:	adds	r1, #32
	} while (location < end_addr);
    8bfc:	cmp	r2, r1
    8bfe:	bhi.n	8bf8 <usb_serial_flush_output+0x50>
	asm("dsb");
    8c00:	dsb	sy
	asm("isb");
    8c04:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    8c08:	movs	r0, #3
    8c0a:	mov	r1, r6
    8c0c:	bl	9550 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    8c10:	ldrb.w	r3, [r8]
    8c14:	ldr	r2, [pc, #48]	; (8c48 <usb_serial_flush_output+0xa0>)
    8c16:	adds	r3, #1
    8c18:	uxtb	r3, r3
    8c1a:	cmp	r3, #3
    8c1c:	it	hi
    8c1e:	movhi	r3, #0
    8c20:	strb	r3, [r2, #0]
	tx_available = 0;
    8c22:	movs	r3, #0
    8c24:	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    8c26:	dsb	sy
	tx_noautoflush = 0;
    8c2a:	strb	r3, [r7, #0]
    8c2c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8c30:	.word	0x2000eda5
    8c34:	.word	0x2000ed90
    8c38:	.word	0x20004080
    8c3c:	.word	0x20201000
    8c40:	.word	0x2000eda3
    8c44:	.word	0xe000ef70
    8c48:	.word	0x2000eda1

00008c4c <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    8c4c:	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    8c4e:	push	{r4, r5, r6, r7}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    8c50:	cbz	r3, 8c5a <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    8c52:	ldr	r3, [r2, #4]
    8c54:	orr.w	r3, r3, #32768	; 0x8000
    8c58:	str	r3, [r2, #4]
	}
	__disable_irq();
    8c5a:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    8c5c:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    8c5e:	cbz	r4, 8cb8 <schedule_transfer+0x6c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    8c60:	ldr	r3, [pc, #112]	; (8cd4 <schedule_transfer+0x88>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    8c62:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    8c64:	ldr.w	r4, [r3, #432]	; 0x1b0
    8c68:	tst	r4, r1
    8c6a:	bne.n	8c98 <schedule_transfer+0x4c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    8c6c:	ldr	r6, [pc, #104]	; (8cd8 <schedule_transfer+0x8c>)
    8c6e:	ldr	r7, [r6, #0]
    8c70:	b.n	8c7c <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    8c72:	ldr	r4, [r6, #0]
    8c74:	subs	r4, r4, r7
    8c76:	cmp.w	r4, #2400	; 0x960
    8c7a:	bcs.n	8c94 <schedule_transfer+0x48>
		if (USB1_ENDPTPRIME & epmask) goto end;
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    8c7c:	ldr.w	r4, [r3, #320]	; 0x140
    8c80:	orr.w	r4, r4, #16384	; 0x4000
    8c84:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    8c88:	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    8c8c:	ldr.w	r4, [r3, #320]	; 0x140
    8c90:	lsls	r4, r4, #17
    8c92:	bpl.n	8c72 <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    8c94:	ands	r5, r1
    8c96:	beq.n	8ca0 <schedule_transfer+0x54>
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    8c98:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    8c9a:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    8c9c:	pop	{r4, r5, r6, r7}
    8c9e:	bx	lr
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    8ca0:	ldr	r4, [pc, #48]	; (8cd4 <schedule_transfer+0x88>)
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
    8ca2:	str	r2, [r0, #8]
		endpoint->status = 0;
    8ca4:	str	r5, [r0, #12]
		USB1_ENDPTPRIME |= epmask;
    8ca6:	ldr.w	r3, [r4, #432]	; 0x1b0
    8caa:	orrs	r1, r3
    8cac:	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    8cb0:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    8cb2:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    8cb4:	pop	{r4, r5, r6, r7}
    8cb6:	bx	lr
		goto end;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
    8cb8:	ldr	r5, [pc, #24]	; (8cd4 <schedule_transfer+0x88>)
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
		goto end;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    8cba:	str	r2, [r0, #8]
	endpoint->status = 0;
    8cbc:	str	r4, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    8cbe:	ldr.w	r3, [r5, #432]	; 0x1b0
    8cc2:	orrs	r1, r3
    8cc4:	str.w	r1, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    8cc8:	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    8cca:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    8ccc:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    8cce:	pop	{r4, r5, r6, r7}
    8cd0:	bx	lr
    8cd2:	nop
    8cd4:	.word	0x402e0000
    8cd8:	.word	0xe0001004

00008cdc <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    8cdc:	push	{r4, r5, r6, lr}
    8cde:	mov	r6, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    8ce0:	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
    8ce2:	cbz	r0, 8d0a <run_callbacks+0x2e>
    8ce4:	mov	r2, r0
    8ce6:	movs	r4, #0
    8ce8:	b.n	8cf2 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    8cea:	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    8cec:	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
    8cee:	cmp	r2, #1
    8cf0:	beq.n	8d0c <run_callbacks+0x30>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    8cf2:	ldr	r3, [r2, #4]
    8cf4:	ands.w	r3, r3, #128	; 0x80
    8cf8:	beq.n	8cea <run_callbacks+0xe>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    8cfa:	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    8cfc:	cbz	r4, 8d0a <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
    8cfe:	ldr	r3, [r6, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
    8d00:	ldr	r5, [r0, #0]
		ep->callback_function(first);
    8d02:	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    8d04:	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
    8d06:	mov	r0, r5
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    8d08:	bne.n	8cfe <run_callbacks+0x22>
    8d0a:	pop	{r4, r5, r6, pc}
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    8d0c:	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
    8d0e:	str	r3, [r6, #52]	; 0x34
			break;
    8d10:	b.n	8cfc <run_callbacks+0x20>
    8d12:	nop

00008d14 <endpoint0_receive.constprop.1>:
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
}

static void endpoint0_receive(void *data, uint32_t len, int notify)
    8d14:	push	{r4, r5, r6, r7, lr}
{
	//printf("rx %lu\n", len);
	if (len > 0) {
    8d16:	cbnz	r0, 8d56 <endpoint0_receive.constprop.1+0x42>
    8d18:	ldr	r4, [pc, #136]	; (8da4 <endpoint0_receive.constprop.1+0x90>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8d1a:	ldr	r1, [pc, #140]	; (8da8 <endpoint0_receive.constprop.1+0x94>)
    8d1c:	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8d1e:	ldr	r3, [pc, #140]	; (8dac <endpoint0_receive.constprop.1+0x98>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    8d20:	movs	r5, #0
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8d22:	mov.w	r0, #65537	; 0x10001
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8d26:	movw	r7, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    8d2a:	str	r1, [r4, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    8d2c:	mov.w	r6, #65536	; 0x10000
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8d30:	str	r2, [r1, #0]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    8d32:	mov	r2, r3
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    8d34:	str	r5, [r4, #76]	; 0x4c
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8d36:	str	r7, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8d38:	str.w	r0, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    8d3c:	ldr.w	r0, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    8d40:	ldr	r4, [pc, #108]	; (8db0 <endpoint0_receive.constprop.1+0x9c>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    8d42:	orrs	r0, r6
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    8d44:	str	r5, [r1, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    8d46:	str.w	r0, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    8d4a:	str	r6, [r4, #0]
	while (USB1_ENDPTPRIME) ;
    8d4c:	ldr.w	r3, [r2, #432]	; 0x1b0
    8d50:	cmp	r3, #0
    8d52:	bne.n	8d4c <endpoint0_receive.constprop.1+0x38>
}
    8d54:	pop	{r4, r5, r6, r7, pc}
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8d56:	lsls	r0, r0, #16
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    8d58:	ldr	r3, [pc, #88]	; (8db4 <endpoint0_receive.constprop.1+0xa0>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    8d5a:	ldr	r5, [pc, #80]	; (8dac <endpoint0_receive.constprop.1+0x98>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    8d5c:	movs	r2, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    8d5e:	ldr	r4, [pc, #68]	; (8da4 <endpoint0_receive.constprop.1+0x90>)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8d60:	orr.w	r0, r0, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    8d64:	movs	r6, #0
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
    8d66:	ldr	r1, [pc, #80]	; (8db8 <endpoint0_receive.constprop.1+0xa4>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    8d68:	str	r2, [r3, #0]
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    8d6a:	mov	r2, r5
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    8d6c:	str	r6, [r4, #12]
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    8d6e:	add.w	lr, r1, #4096	; 0x1000
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8d72:	str	r0, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    8d74:	add.w	r7, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    8d78:	str	r3, [r4, #8]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    8d7a:	add.w	r6, r1, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    8d7e:	ldr.w	r0, [r5, #432]	; 0x1b0
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    8d82:	str	r1, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    8d84:	add.w	r1, r1, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    8d88:	orr.w	r0, r0, #1
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    8d8c:	str.w	lr, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    8d90:	str	r7, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    8d92:	str	r6, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    8d94:	str	r1, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    8d96:	str.w	r0, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    8d9a:	ldr.w	r3, [r2, #432]	; 0x1b0
    8d9e:	cmp	r3, #0
    8da0:	bne.n	8d9a <endpoint0_receive.constprop.1+0x86>
    8da2:	b.n	8d1a <endpoint0_receive.constprop.1+0x6>
    8da4:	.word	0x20000000
    8da8:	.word	0x2000ede0
    8dac:	.word	0x402e0000
    8db0:	.word	0x2000c244
    8db4:	.word	0x2000edc0
    8db8:	.word	0x2000c23c

00008dbc <endpoint0_transmit.constprop.2>:
	}
	printf("endpoint 0 stall\n");
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    8dbc:	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    8dbe:	cbnz	r1, 8dfa <endpoint0_transmit.constprop.2+0x3e>
    8dc0:	ldr	r4, [pc, #132]	; (8e48 <endpoint0_transmit.constprop.2+0x8c>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8dc2:	ldr	r1, [pc, #136]	; (8e4c <endpoint0_transmit.constprop.2+0x90>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    8dc4:	movs	r0, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8dc6:	ldr	r3, [pc, #136]	; (8e50 <endpoint0_transmit.constprop.2+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8dc8:	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8dca:	mov.w	r5, #65537	; 0x10001
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8dce:	movs	r6, #128	; 0x80
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8dd0:	str	r2, [r1, #0]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    8dd2:	mov	r2, r3
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    8dd4:	str	r1, [r4, #8]
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8dd6:	str	r6, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    8dd8:	str	r0, [r4, #12]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8dda:	str.w	r5, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    8dde:	ldr.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    8de2:	ldr	r5, [pc, #112]	; (8e54 <endpoint0_transmit.constprop.2+0x98>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    8de4:	orr.w	r4, r4, #1
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    8de8:	str	r0, [r1, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    8dea:	str.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    8dee:	str	r0, [r5, #0]
	while (USB1_ENDPTPRIME) ;
    8df0:	ldr.w	r3, [r2, #432]	; 0x1b0
    8df4:	cmp	r3, #0
    8df6:	bne.n	8df0 <endpoint0_transmit.constprop.2+0x34>
}
    8df8:	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8dfa:	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    8dfc:	ldr	r3, [pc, #88]	; (8e58 <endpoint0_transmit.constprop.2+0x9c>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    8dfe:	ldr	r5, [pc, #80]	; (8e50 <endpoint0_transmit.constprop.2+0x94>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    8e00:	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    8e02:	ldr	r4, [pc, #68]	; (8e48 <endpoint0_transmit.constprop.2+0x8c>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8e04:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    8e08:	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    8e0a:	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8e0c:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    8e0e:	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    8e12:	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    8e14:	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    8e18:	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    8e1a:	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    8e1e:	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    8e22:	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    8e26:	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    8e28:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    8e2a:	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    8e2e:	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    8e32:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    8e36:	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    8e38:	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    8e3a:	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    8e3e:	ldr.w	r3, [r2, #432]	; 0x1b0
    8e42:	cmp	r3, #0
    8e44:	bne.n	8e3e <endpoint0_transmit.constprop.2+0x82>
    8e46:	b.n	8dc2 <endpoint0_transmit.constprop.2+0x6>
    8e48:	.word	0x20000000
    8e4c:	.word	0x2000ede0
    8e50:	.word	0x402e0000
    8e54:	.word	0x2000c244
    8e58:	.word	0x2000edc0

00008e5c <usb_isr>:
	__builtin_unreachable();
}


void usb_isr(void)
{
    8e5c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    8e60:	ldr	r4, [pc, #740]	; (9148 <usb_isr+0x2ec>)
	__builtin_unreachable();
}


void usb_isr(void)
{
    8e62:	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    8e64:	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    8e68:	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    8e6c:	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    8e70:	beq.n	8f0c <usb_isr+0xb0>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    8e72:	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    8e76:	cmp	r3, #0
    8e78:	beq.n	8f02 <usb_isr+0xa6>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    8e7a:	mov.w	fp, #65537	; 0x10001
    8e7e:	ldr.w	r9, [pc, #740]	; 9164 <usb_isr+0x308>
    8e82:	ldr	r6, [pc, #712]	; (914c <usb_isr+0x2f0>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    8e84:	mov	r5, r4
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    8e86:	mov	sl, fp
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    8e88:	str.w	r3, [r4, #428]	; 0x1ac
    8e8c:	ldr	r2, [r6, #40]	; 0x28
    8e8e:	ldr	r7, [r6, #44]	; 0x2c
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    8e90:	ldr.w	r3, [r4, #320]	; 0x140
    8e94:	orr.w	r3, r3, #8192	; 0x2000
    8e98:	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    8e9c:	ldr.w	r3, [r4, #320]	; 0x140
    8ea0:	lsls	r0, r3, #18
    8ea2:	bpl.n	8e90 <usb_isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    8ea4:	ldr.w	r3, [r5, #320]	; 0x140
    8ea8:	bic.w	r3, r3, #8192	; 0x2000
    8eac:	str.w	r3, [r5, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    8eb0:	str.w	sl, [r5, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    8eb4:	ldr.w	r3, [r4, #436]	; 0x1b4
    8eb8:	ands.w	r3, r3, #65537	; 0x10001
    8ebc:	bne.n	8eb4 <usb_isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    8ebe:	uxth	r1, r2
    8ec0:	movw	r0, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    8ec4:	str.w	r3, [r9]
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    8ec8:	cmp	r1, r0
    8eca:	bls.w	9004 <usb_isr+0x1a8>
    8ece:	movw	r0, #8737	; 0x2221
    8ed2:	cmp	r1, r0
    8ed4:	beq.w	9174 <usb_isr+0x318>
    8ed8:	bhi.w	9054 <usb_isr+0x1f8>
    8edc:	cmp.w	r1, #2304	; 0x900
    8ee0:	beq.w	918e <usb_isr+0x332>
    8ee4:	movw	r3, #8225	; 0x2021
    8ee8:	cmp	r1, r3
    8eea:	beq.w	91fc <usb_isr+0x3a0>
    8eee:	cmp.w	r1, #2176	; 0x880
    8ef2:	beq.w	91ea <usb_isr+0x38e>
		}
		break;
#endif
	}
	printf("endpoint 0 stall\n");
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    8ef6:	str.w	fp, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    8efa:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    8efe:	cmp	r3, #0
    8f00:	bne.n	8e88 <usb_isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    8f02:	ldr	r2, [pc, #580]	; (9148 <usb_isr+0x2ec>)
    8f04:	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    8f08:	cmp	r3, #0
    8f0a:	bne.n	8fa0 <usb_isr+0x144>
			}
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    8f0c:	tst.w	r8, #64	; 0x40
    8f10:	beq.n	8f44 <usb_isr+0xe8>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    8f12:	ldr	r3, [pc, #564]	; (9148 <usb_isr+0x2ec>)
    8f14:	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    8f18:	mov	r2, r3
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    8f1a:	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    8f1e:	ldr.w	r1, [r3, #444]	; 0x1bc
    8f22:	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    8f26:	ldr.w	r4, [r2, #432]	; 0x1b0
    8f2a:	ldr	r3, [pc, #540]	; (9148 <usb_isr+0x2ec>)
    8f2c:	cmp	r4, #0
    8f2e:	bne.n	8f26 <usb_isr+0xca>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    8f30:	mov.w	r2, #4294967295
    8f34:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    8f38:	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    8f3c:	bl	8830 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    8f40:	ldr	r3, [pc, #524]	; (9150 <usb_isr+0x2f4>)
    8f42:	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    8f44:	tst.w	r8, #16777216	; 0x1000000
    8f48:	beq.n	8f52 <usb_isr+0xf6>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    8f4a:	ldr	r3, [pc, #520]	; (9154 <usb_isr+0x2f8>)
    8f4c:	ldr	r3, [r3, #0]
    8f4e:	cbz	r3, 8f52 <usb_isr+0xf6>
    8f50:	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    8f52:	tst.w	r8, #33554432	; 0x2000000
    8f56:	beq.n	8f60 <usb_isr+0x104>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    8f58:	ldr	r3, [pc, #508]	; (9158 <usb_isr+0x2fc>)
    8f5a:	ldr	r3, [r3, #0]
    8f5c:	cbz	r3, 8f60 <usb_isr+0x104>
    8f5e:	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    8f60:	tst.w	r8, #4
    8f64:	beq.n	8f78 <usb_isr+0x11c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    8f66:	ldr	r3, [pc, #480]	; (9148 <usb_isr+0x2ec>)
    8f68:	ldr.w	r3, [r3, #388]	; 0x184
    8f6c:	ands.w	r3, r3, #512	; 0x200
    8f70:	beq.n	8ffe <usb_isr+0x1a2>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
    8f72:	ldr	r3, [pc, #488]	; (915c <usb_isr+0x300>)
    8f74:	movs	r2, #1
    8f76:	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    8f78:	ldr	r3, [pc, #460]	; (9148 <usb_isr+0x2ec>)
    8f7a:	ldr.w	r2, [r3, #328]	; 0x148
    8f7e:	lsls	r2, r2, #24
    8f80:	bpl.n	8f9a <usb_isr+0x13e>
    8f82:	tst.w	r8, #128	; 0x80
    8f86:	beq.n	8f9a <usb_isr+0x13e>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    8f88:	ldr	r1, [pc, #468]	; (9160 <usb_isr+0x304>)
    8f8a:	ldrb	r2, [r1, #0]
    8f8c:	cbz	r2, 8f9a <usb_isr+0x13e>
			if (--usb_reboot_timer == 0) {
    8f8e:	subs	r2, #1
    8f90:	uxtb	r2, r2
    8f92:	strb	r2, [r1, #0]
    8f94:	cmp	r2, #0
    8f96:	beq.w	93e4 <usb_isr+0x588>
		#endif
		#ifdef FLIGHTSIM_INTERFACE
		usb_flightsim_flush_output();
		#endif
	}
}
    8f9a:	add	sp, #12
    8f9c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    8fa0:	ldr	r1, [pc, #448]	; (9164 <usb_isr+0x308>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    8fa2:	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    8fa6:	ldr	r0, [r1, #0]
    8fa8:	tst	r3, r0
    8faa:	bne.w	9316 <usb_isr+0x4ba>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    8fae:	ldr	r2, [pc, #416]	; (9150 <usb_isr+0x2f4>)
    8fb0:	ldr	r5, [r2, #0]
#if 1
			if (completestatus) {
    8fb2:	ands	r5, r3
    8fb4:	beq.n	8f0c <usb_isr+0xb0>

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    8fb6:	lsrs	r7, r5, #16
    8fb8:	beq.n	8fda <usb_isr+0x17e>
    8fba:	ldr	r6, [pc, #400]	; (914c <usb_isr+0x2f0>)
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
    8fbc:	mov.w	r9, #1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
    8fc0:	rbit	r4, r7
    8fc4:	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    8fc8:	add.w	r0, r6, r4, lsl #7
					tx &= ~(1<<p);
    8fcc:	lsl.w	r4, r9, r4

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    8fd0:	adds	r0, #64	; 0x40
    8fd2:	bl	8cdc <run_callbacks>
#if 1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    8fd6:	bics	r7, r4
    8fd8:	bne.n	8fc0 <usb_isr+0x164>
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
    8fda:	uxth	r5, r5
				while(rx) {
    8fdc:	cmp	r5, #0
    8fde:	beq.n	8f0c <usb_isr+0xb0>
    8fe0:	ldr	r6, [pc, #360]	; (914c <usb_isr+0x2f0>)
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
					rx &= ~(1<<p);
    8fe2:	movs	r7, #1
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
    8fe4:	rbit	r4, r5
    8fe8:	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2);
    8fec:	add.w	r0, r6, r4, lsl #7
					rx &= ~(1<<p);
    8ff0:	lsl.w	r4, r7, r4

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
    8ff4:	bl	8cdc <run_callbacks>
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
    8ff8:	bics	r5, r4
    8ffa:	bne.n	8fe4 <usb_isr+0x188>
    8ffc:	b.n	8f0c <usb_isr+0xb0>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
    8ffe:	ldr	r2, [pc, #348]	; (915c <usb_isr+0x300>)
    9000:	strb	r3, [r2, #0]
    9002:	b.n	8f78 <usb_isr+0x11c>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    9004:	cmp.w	r1, #1664	; 0x680
    9008:	bcs.w	9262 <usb_isr+0x406>
    900c:	cmp.w	r1, #258	; 0x102
    9010:	beq.w	9210 <usb_isr+0x3b4>
    9014:	bhi.n	909e <usb_isr+0x242>
    9016:	cmp	r1, #128	; 0x80
    9018:	beq.w	9136 <usb_isr+0x2da>
    901c:	cmp	r1, #130	; 0x82
    901e:	bne.w	8ef6 <usb_isr+0x9a>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    9022:	uxth	r7, r7
    9024:	and.w	r2, r7, #127	; 0x7f
		if (endpoint > 7) break;
    9028:	cmp	r2, #7
    902a:	bhi.w	8ef6 <usb_isr+0x9a>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    902e:	lsls	r2, r2, #2
    9030:	ldr	r1, [pc, #308]	; (9168 <usb_isr+0x30c>)
		reply_buffer[0] = 0;
    9032:	ldr	r0, [pc, #312]	; (916c <usb_isr+0x310>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    9034:	add	r1, r2
    9036:	ldr	r2, [r1, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    9038:	lsls	r1, r7, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
    903a:	strb	r3, [r0, #0]
		reply_buffer[1] = 0;
    903c:	strb	r3, [r0, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    903e:	bpl.w	930e <usb_isr+0x4b2>
    9042:	lsls	r3, r2, #15
    9044:	bpl.n	904a <usb_isr+0x1ee>
			reply_buffer[0] = 1;
    9046:	movs	r3, #1
    9048:	strb	r3, [r0, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    904a:	movs	r1, #2
    904c:	ldr	r0, [pc, #284]	; (916c <usb_isr+0x310>)
    904e:	bl	8dbc <endpoint0_transmit.constprop.2>
    9052:	b.n	8efa <usb_isr+0x9e>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    9054:	movw	r0, #25633	; 0x6421
    9058:	cmp	r1, r0
    905a:	beq.w	9304 <usb_isr+0x4a8>
    905e:	movw	r2, #26529	; 0x67a1
    9062:	cmp	r1, r2
    9064:	beq.w	92dc <usb_isr+0x480>
    9068:	movw	r3, #8993	; 0x2321
    906c:	cmp	r1, r3
    906e:	bne.w	8ef6 <usb_isr+0x9a>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    9072:	ldr	r3, [pc, #252]	; (9170 <usb_isr+0x314>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9074:	movs	r2, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    9076:	movs	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    9078:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    907a:	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    907c:	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    907e:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    9080:	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    9082:	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    9086:	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    908a:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    908c:	orr.w	r3, r2, #65536	; 0x10000
    9090:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    9094:	ldr.w	r3, [r4, #432]	; 0x1b0
    9098:	cmp	r3, #0
    909a:	bne.n	9094 <usb_isr+0x238>
    909c:	b.n	8efa <usb_isr+0x9e>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    909e:	movw	r0, #770	; 0x302
    90a2:	cmp	r1, r0
    90a4:	beq.n	90e4 <usb_isr+0x288>
    90a6:	cmp.w	r1, #1280	; 0x500
    90aa:	bne.w	8ef6 <usb_isr+0x9a>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    90ae:	ldr	r1, [pc, #192]	; (9170 <usb_isr+0x314>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    90b0:	movs	r0, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    90b2:	movs	r7, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    90b4:	str	r3, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    90b6:	str	r1, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    90b8:	str	r7, [r1, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    90ba:	str	r0, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    90bc:	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    90c0:	ldr.w	r0, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    90c4:	str	r3, [r1, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    90c6:	orr.w	r3, r0, #65536	; 0x10000
    90ca:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    90ce:	ldr.w	r3, [r4, #432]	; 0x1b0
    90d2:	cmp	r3, #0
    90d4:	bne.n	90ce <usb_isr+0x272>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    90d6:	lsrs	r3, r2, #16
    90d8:	lsls	r3, r3, #25
    90da:	orr.w	r3, r3, #16777216	; 0x1000000
    90de:	str.w	r3, [r5, #340]	; 0x154
    90e2:	b.n	8efa <usb_isr+0x9e>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    90e4:	uxth	r7, r7
    90e6:	and.w	r3, r7, #127	; 0x7f
		if (endpoint > 7) break;
    90ea:	cmp	r3, #7
    90ec:	bhi.w	8ef6 <usb_isr+0x9a>
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    90f0:	lsls	r3, r3, #2
    90f2:	ldr	r2, [pc, #116]	; (9168 <usb_isr+0x30c>)
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
    90f4:	lsls	r1, r7, #24
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    90f6:	mov.w	r0, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    90fa:	add	r2, r3
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    90fc:	mov.w	r1, #0
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    9100:	ldr	r3, [r2, #0]
    9102:	ite	mi
    9104:	orrmi.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    9108:	orrpl.w	r3, r3, #1
    910c:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    910e:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    9110:	ldr	r3, [pc, #92]	; (9170 <usb_isr+0x314>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    9112:	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    9114:	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    9116:	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9118:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    911a:	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    911e:	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    9122:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    9124:	orr.w	r3, r2, #65536	; 0x10000
    9128:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    912c:	ldr.w	r3, [r4, #432]	; 0x1b0
    9130:	cmp	r3, #0
    9132:	bne.n	912c <usb_isr+0x2d0>
    9134:	b.n	8efa <usb_isr+0x9e>
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    9136:	ldr	r2, [pc, #52]	; (916c <usb_isr+0x310>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    9138:	movs	r1, #2
    913a:	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    913c:	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    913e:	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    9140:	bl	8dbc <endpoint0_transmit.constprop.2>
    9144:	b.n	8efa <usb_isr+0x9e>
    9146:	nop
    9148:	.word	0x402e0000
    914c:	.word	0x20000000
    9150:	.word	0x2000c248
    9154:	.word	0x2000c330
    9158:	.word	0x2000c334
    915c:	.word	0x2000eda6
    9160:	.word	0x2000eda7
    9164:	.word	0x2000c244
    9168:	.word	0x402e01c0
    916c:	.word	0x2000c2b0
    9170:	.word	0x2000ede0
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    9174:	uxth	r7, r7
    9176:	cmp	r7, #1
    9178:	bne.w	9072 <usb_isr+0x216>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    917c:	ldr	r3, [pc, #640]	; (9400 <usb_isr+0x5a4>)
			usb_cdc_line_rtsdtr = setup.wValue;
    917e:	ubfx	r2, r2, #16, #8
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    9182:	ldr	r1, [pc, #640]	; (9404 <usb_isr+0x5a8>)
    9184:	ldr	r0, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    9186:	ldr	r3, [pc, #640]	; (9408 <usb_isr+0x5ac>)
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    9188:	str	r0, [r1, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    918a:	strb	r2, [r3, #0]
    918c:	b.n	9072 <usb_isr+0x216>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    918e:	ubfx	r2, r2, #16, #8
    9192:	ldr	r7, [pc, #632]	; (940c <usb_isr+0x5b0>)
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    9194:	mov.w	r1, #13107400	; 0xc800c8
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    9198:	ldr	r0, [pc, #628]	; (9410 <usb_isr+0x5b4>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    919a:	strb	r2, [r7, #0]
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
		#endif
		#if defined(ENDPOINT5_CONFIG)
		USB1_ENDPTCTRL5 = ENDPOINT5_CONFIG;
    919c:	mov.w	r2, #13369548	; 0xcc00cc
    91a0:	str	r3, [sp, #4]
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    91a2:	str.w	r0, [r5, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    91a6:	str.w	r1, [r5, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    91aa:	str.w	r1, [r5, #464]	; 0x1d0
		#endif
		#if defined(ENDPOINT5_CONFIG)
		USB1_ENDPTCTRL5 = ENDPOINT5_CONFIG;
    91ae:	str.w	r2, [r5, #468]	; 0x1d4
		#endif
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    91b2:	bl	8834 <usb_serial_configure>
		#endif
		#if defined(AUDIO_INTERFACE)
		usb_audio_configure();
		#endif
		#if defined(MTP_INTERFACE)
		usb_mtp_configure();
    91b6:	bl	a0dc <usb_mtp_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    91ba:	ldr	r2, [pc, #600]	; (9414 <usb_isr+0x5b8>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    91bc:	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    91be:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    91c0:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    91c2:	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    91c4:	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    91c6:	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    91c8:	str	r3, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    91ca:	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    91ce:	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    91d2:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    91d4:	orr.w	r2, r1, #65536	; 0x10000
    91d8:	str.w	r2, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    91dc:	ldr	r2, [pc, #568]	; (9418 <usb_isr+0x5bc>)
    91de:	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    91e0:	ldr.w	r3, [r4, #432]	; 0x1b0
    91e4:	cmp	r3, #0
    91e6:	bne.n	91e0 <usb_isr+0x384>
    91e8:	b.n	8efa <usb_isr+0x9e>
		endpoint_queue_head[2].unused1 = (uint32_t)experimental_buffer;
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    91ea:	ldr	r2, [pc, #544]	; (940c <usb_isr+0x5b0>)
		endpoint0_transmit(reply_buffer, 1, 0);
    91ec:	movs	r1, #1
		endpoint_queue_head[2].unused1 = (uint32_t)experimental_buffer;
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    91ee:	ldr	r3, [pc, #556]	; (941c <usb_isr+0x5c0>)
    91f0:	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    91f2:	mov	r0, r3
		endpoint_queue_head[2].unused1 = (uint32_t)experimental_buffer;
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    91f4:	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    91f6:	bl	8dbc <endpoint0_transmit.constprop.2>
    91fa:	b.n	8efa <usb_isr+0x9e>
		// fall through to next case, to always send ZLP ACK
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    91fc:	lsrs	r0, r7, #16
    91fe:	cmp	r0, #7
    9200:	bne.w	8ef6 <usb_isr+0x9a>
		break;
#endif
#if defined(MTP_INTERFACE)
	  case 0x6421: // Cancel Request, Still Image Class 1.0, 5.2.1, page 8
		if (setup.wLength == 6) {
			endpoint0_setupdata.bothwords = setupdata;
    9204:	ldr	r3, [pc, #536]	; (9420 <usb_isr+0x5c4>)
    9206:	stmia.w	r3, {r2, r7}
			endpoint0_receive(endpoint0_buffer, setup.wLength, 1);
    920a:	bl	8d14 <endpoint0_receive.constprop.1>
    920e:	b.n	8efa <usb_isr+0x9e>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    9210:	uxth	r7, r7
    9212:	and.w	r3, r7, #127	; 0x7f
		if (endpoint > 7) break;
    9216:	cmp	r3, #7
    9218:	bhi.w	8ef6 <usb_isr+0x9a>
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    921c:	lsls	r3, r3, #2
    921e:	ldr	r2, [pc, #516]	; (9424 <usb_isr+0x5c8>)
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
    9220:	lsls	r7, r7, #24
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    9222:	mov.w	r1, #0
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    9226:	add	r2, r3
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    9228:	mov.w	r0, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    922c:	ldr	r3, [r2, #0]
    922e:	ite	mi
    9230:	bicmi.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    9234:	bicpl.w	r3, r3, #1
    9238:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    923a:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    923c:	ldr	r3, [pc, #468]	; (9414 <usb_isr+0x5b8>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    923e:	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    9240:	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    9242:	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9244:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    9246:	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    924a:	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    924e:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    9250:	orr.w	r3, r2, #65536	; 0x10000
    9254:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    9258:	ldr.w	r3, [r4, #432]	; 0x1b0
    925c:	cmp	r3, #0
    925e:	bne.n	9258 <usb_isr+0x3fc>
    9260:	b.n	8efa <usb_isr+0x9e>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    9262:	ldr	r3, [pc, #452]	; (9428 <usb_isr+0x5cc>)
    9264:	ldr	r1, [r3, #4]
    9266:	cmp	r1, #0
    9268:	beq.w	8ef6 <usb_isr+0x9a>
    926c:	lsrs	r2, r2, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    926e:	uxth.w	lr, r7
    9272:	b.n	927e <usb_isr+0x422>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    9274:	adds	r3, #12
    9276:	ldr	r1, [r3, #4]
    9278:	cmp	r1, #0
    927a:	beq.w	8ef6 <usb_isr+0x9a>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    927e:	ldrh	r0, [r3, #0]
    9280:	cmp	r0, r2
    9282:	bne.n	9274 <usb_isr+0x418>
    9284:	ldrh	r0, [r3, #2]
    9286:	cmp	r0, lr
    9288:	bne.n	9274 <usb_isr+0x418>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
    928a:	lsrs	r0, r2, #8
    928c:	cmp	r0, #3
    928e:	beq.w	93d8 <usb_isr+0x57c>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
    9292:	ldrh	r3, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    9294:	lsrs	r7, r7, #16
    9296:	cmp	r3, r7
    9298:	it	cs
    929a:	movcs	r3, r7

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
    929c:	cmp.w	r2, #512	; 0x200
    92a0:	beq.n	9372 <usb_isr+0x516>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
    92a2:	cmp.w	r2, #1792	; 0x700
    92a6:	beq.n	934c <usb_isr+0x4f0>
    92a8:	ldr	r7, [pc, #384]	; (942c <usb_isr+0x5d0>)
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    92aa:	mov	r2, r3
    92ac:	str	r3, [sp, #4]
    92ae:	mov	r0, r7
    92b0:	bl	83b0 <memcpy>
    92b4:	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    92b6:	bic.w	r2, r7, #31
	uint32_t end_addr = (uint32_t)addr + size;
    92ba:	add	r7, r3
	asm volatile("": : :"memory");
	asm("dsb");
    92bc:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    92c0:	ldr	r1, [pc, #364]	; (9430 <usb_isr+0x5d4>)
    92c2:	str	r2, [r1, #0]
		location += 32;
    92c4:	adds	r2, #32
	} while (location < end_addr);
    92c6:	cmp	r7, r2
    92c8:	bhi.n	92c0 <usb_isr+0x464>
	asm("dsb");
    92ca:	dsb	sy
	asm("isb");
    92ce:	isb	sy
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    92d2:	ldr	r0, [pc, #344]	; (942c <usb_isr+0x5d0>)
    92d4:	mov	r1, r3
    92d6:	bl	8dbc <endpoint0_transmit.constprop.2>
    92da:	b.n	8efa <usb_isr+0x9e>
	  case 0x65A1: // Get Extended Event Data, Still Image Class 1.0, 5.2.2, page 9
		break;
	  case 0x6621: // Device Reset, Still Image Class 1.0, 5.2.3 page 10
		break;
	  case 0x67A1: // Get Device Status, Still Image Class 1.0, 5.2.4, page 10
		if (setup.wLength >= 4) {
    92dc:	cmp.w	r7, #262144	; 0x40000
    92e0:	bcc.w	8ef6 <usb_isr+0x9a>
			endpoint0_buffer[0] = 4;
			endpoint0_buffer[1] = 0;
			endpoint0_buffer[2] = usb_mtp_status;
    92e4:	ldr	r1, [pc, #332]	; (9434 <usb_isr+0x5d8>)
		break;
	  case 0x6621: // Device Reset, Still Image Class 1.0, 5.2.3 page 10
		break;
	  case 0x67A1: // Get Device Status, Still Image Class 1.0, 5.2.4, page 10
		if (setup.wLength >= 4) {
			endpoint0_buffer[0] = 4;
    92e6:	movs	r7, #4
    92e8:	ldr	r2, [pc, #332]	; (9438 <usb_isr+0x5dc>)
			endpoint0_buffer[1] = 0;
			endpoint0_buffer[2] = usb_mtp_status;
			endpoint0_buffer[3] = 0x20;
    92ea:	mov.w	lr, #32
		break;
	  case 0x67A1: // Get Device Status, Still Image Class 1.0, 5.2.4, page 10
		if (setup.wLength >= 4) {
			endpoint0_buffer[0] = 4;
			endpoint0_buffer[1] = 0;
			endpoint0_buffer[2] = usb_mtp_status;
    92ee:	ldrb	r1, [r1, #0]
			endpoint0_buffer[3] = 0x20;
			endpoint0_transmit(endpoint0_buffer, 4, 0);
    92f0:	mov	r0, r2
	  case 0x6621: // Device Reset, Still Image Class 1.0, 5.2.3 page 10
		break;
	  case 0x67A1: // Get Device Status, Still Image Class 1.0, 5.2.4, page 10
		if (setup.wLength >= 4) {
			endpoint0_buffer[0] = 4;
			endpoint0_buffer[1] = 0;
    92f2:	strb	r3, [r2, #1]
			endpoint0_buffer[2] = usb_mtp_status;
    92f4:	strb	r1, [r2, #2]
			endpoint0_buffer[3] = 0x20;
			endpoint0_transmit(endpoint0_buffer, 4, 0);
    92f6:	mov	r1, r7
	  case 0x67A1: // Get Device Status, Still Image Class 1.0, 5.2.4, page 10
		if (setup.wLength >= 4) {
			endpoint0_buffer[0] = 4;
			endpoint0_buffer[1] = 0;
			endpoint0_buffer[2] = usb_mtp_status;
			endpoint0_buffer[3] = 0x20;
    92f8:	strb.w	lr, [r2, #3]
		break;
	  case 0x6621: // Device Reset, Still Image Class 1.0, 5.2.3 page 10
		break;
	  case 0x67A1: // Get Device Status, Still Image Class 1.0, 5.2.4, page 10
		if (setup.wLength >= 4) {
			endpoint0_buffer[0] = 4;
    92fc:	strb	r7, [r2, #0]
			endpoint0_buffer[1] = 0;
			endpoint0_buffer[2] = usb_mtp_status;
			endpoint0_buffer[3] = 0x20;
			endpoint0_transmit(endpoint0_buffer, 4, 0);
    92fe:	bl	8dbc <endpoint0_transmit.constprop.2>
    9302:	b.n	8efa <usb_isr+0x9e>
		}
		break;
#endif
#if defined(MTP_INTERFACE)
	  case 0x6421: // Cancel Request, Still Image Class 1.0, 5.2.1, page 8
		if (setup.wLength == 6) {
    9304:	lsrs	r0, r7, #16
    9306:	cmp	r0, #6
    9308:	bne.w	8ef6 <usb_isr+0x9a>
    930c:	b.n	9204 <usb_isr+0x3a8>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    930e:	lsls	r7, r2, #31
    9310:	bpl.w	904a <usb_isr+0x1ee>
    9314:	b.n	9046 <usb_isr+0x1ea>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    9316:	ldr	r0, [pc, #264]	; (9420 <usb_isr+0x5c4>)
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    9318:	movw	r4, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    931c:	movs	r6, #0

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    931e:	ldrh	r5, [r0, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    9320:	str	r6, [r1, #0]

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    9322:	cmp	r5, r4

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    9324:	ldr	r0, [r0, #4]
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    9326:	beq.n	9390 <usb_isr+0x534>
	if (setup.word1 == 0x02010121 || setup.word1 == 0x01000121 /* TODO: check setup.word2 */) {
		usb_audio_set_feature(&endpoint0_setupdata, endpoint0_buffer);
	}
#endif
#ifdef MTP_INTERFACE
	if (setup.wRequestAndType == 0x6421) {
    9328:	movw	r2, #25633	; 0x6421
    932c:	cmp	r5, r2
    932e:	bne.w	8fae <usb_isr+0x152>
		if (endpoint0_buffer[0] == 0x01 && endpoint0_buffer[1] == 0x40) {
    9332:	ldr	r2, [pc, #260]	; (9438 <usb_isr+0x5dc>)
    9334:	ldrb	r1, [r2, #0]
    9336:	cmp	r1, #1
    9338:	bne.w	8fae <usb_isr+0x152>
    933c:	ldrb	r2, [r2, #1]
    933e:	cmp	r2, #64	; 0x40
    9340:	bne.w	8fae <usb_isr+0x152>
			printf("MTP cancel, transaction ID=%08X\n",
			  endpoint0_buffer[2] | (endpoint0_buffer[3] << 8) |
			  (endpoint0_buffer[4] << 16) | (endpoint0_buffer[5] << 24));
			usb_mtp_status = 0x19; // 0x19 = host initiated cancel
    9344:	ldr	r2, [pc, #236]	; (9434 <usb_isr+0x5d8>)
    9346:	movs	r1, #25
    9348:	strb	r1, [r2, #0]
    934a:	b.n	8fae <usb_isr+0x152>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    934c:	ldr	r0, [pc, #236]	; (943c <usb_isr+0x5e0>)
					memcpy(usb_descriptor_buffer, src, datalen);
    934e:	mov	r2, r3
    9350:	ldr	r7, [pc, #216]	; (942c <usb_isr+0x5d0>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    9352:	ldrb.w	lr, [r0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
    9356:	ldr	r1, [pc, #232]	; (9440 <usb_isr+0x5e4>)
    9358:	ldr	r0, [pc, #232]	; (9444 <usb_isr+0x5e8>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
    935a:	str	r3, [sp, #4]
    935c:	cmp.w	lr, #0
    9360:	it	eq
    9362:	moveq	r1, r0
    9364:	mov	r0, r7
    9366:	bl	83b0 <memcpy>
					usb_descriptor_buffer[1] = 7;
    936a:	movs	r2, #7
    936c:	ldr	r3, [sp, #4]
    936e:	strb	r2, [r7, #1]
    9370:	b.n	92b6 <usb_isr+0x45a>

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    9372:	ldr	r0, [pc, #200]	; (943c <usb_isr+0x5e0>)
					memcpy(usb_descriptor_buffer, src, datalen);
    9374:	mov	r2, r3
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    9376:	ldr	r1, [pc, #204]	; (9444 <usb_isr+0x5e8>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    9378:	ldrb	r7, [r0, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    937a:	ldr	r0, [pc, #196]	; (9440 <usb_isr+0x5e4>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
    937c:	str	r3, [sp, #4]
    937e:	cmp	r7, #0
    9380:	it	eq
    9382:	moveq	r1, r0
    9384:	ldr	r0, [pc, #164]	; (942c <usb_isr+0x5d0>)
    9386:	bl	83b0 <memcpy>
    938a:	ldr	r7, [pc, #160]	; (942c <usb_isr+0x5d0>)
    938c:	ldr	r3, [sp, #4]
    938e:	b.n	92b6 <usb_isr+0x45a>

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    9390:	uxth	r1, r0
    9392:	cmp	r1, #1
    9394:	bne.w	8fae <usb_isr+0x152>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    9398:	ldr	r1, [pc, #156]	; (9438 <usb_isr+0x5dc>)
    939a:	ldr	r4, [pc, #172]	; (9448 <usb_isr+0x5ec>)
    939c:	ldmia	r1, {r0, r1}
    939e:	lsrs	r6, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    93a0:	cmp	r0, #134	; 0x86
	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    93a2:	str	r0, [r4, #0]
    93a4:	strh	r1, [r4, #4]
    93a6:	strb	r6, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    93a8:	bne.w	8fae <usb_isr+0x152>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
    93ac:	cpsid	i
	sof_usage |= (1 << interface);
    93ae:	ldr	r0, [pc, #156]	; (944c <usb_isr+0x5f0>)
    93b0:	ldrb	r1, [r0, #0]
    93b2:	orr.w	r1, r1, #8
    93b6:	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    93b8:	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    93bc:	lsls	r0, r1, #24
    93be:	bmi.n	93ce <usb_isr+0x572>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    93c0:	orr.w	r1, r1, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    93c4:	movs	r0, #128	; 0x80
    93c6:	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    93ca:	str.w	r1, [r2, #328]	; 0x148
	}
	__enable_irq();
    93ce:	cpsie	i
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    93d0:	ldr	r2, [pc, #124]	; (9450 <usb_isr+0x5f4>)
    93d2:	movs	r1, #80	; 0x50
    93d4:	strb	r1, [r2, #0]
    93d6:	b.n	9328 <usb_isr+0x4cc>
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    93d8:	lsrs	r7, r7, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    93da:	ldrb	r3, [r1, #0]
    93dc:	cmp	r3, r7
    93de:	it	cs
    93e0:	movcs	r3, r7
    93e2:	b.n	92a2 <usb_isr+0x446>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
    93e4:	ldr	r1, [pc, #100]	; (944c <usb_isr+0x5f0>)
    93e6:	ldrb	r2, [r1, #0]
    93e8:	and.w	r2, r2, #247	; 0xf7
    93ec:	strb	r2, [r1, #0]
	if (sof_usage == 0) {
    93ee:	cbnz	r2, 93fc <usb_isr+0x5a0>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    93f0:	ldr.w	r2, [r3, #328]	; 0x148
    93f4:	bic.w	r2, r2, #128	; 0x80
    93f8:	str.w	r2, [r3, #328]	; 0x148
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				_reboot_Teensyduino_();
    93fc:	bl	f6c0 <___reboot_Teensyduino__veneer>
    9400:	.word	0x2000c320
    9404:	.word	0x2000ee08
    9408:	.word	0x2000eda4
    940c:	.word	0x2000eda5
    9410:	.word	0x00cc0002
    9414:	.word	0x2000ede0
    9418:	.word	0x2000c244
    941c:	.word	0x2000c2b0
    9420:	.word	0x20004180
    9424:	.word	0x402e01c0
    9428:	.word	0x20000d50
    942c:	.word	0x20204000
    9430:	.word	0xe000ef70
    9434:	.word	0x200017fc
    9438:	.word	0x2000c23c
    943c:	.word	0x2000eda6
    9440:	.word	0x60001b00
    9444:	.word	0x60001b6c
    9448:	.word	0x2000ee00
    944c:	.word	0x2000ed9f
    9450:	.word	0x2000eda7

00009454 <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    9454:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    9456:	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    945a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    945e:	ite	ne
    9460:	movne	r7, #0
    9462:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    9466:	cmp	r2, #3
    9468:	bls.n	946e <usb_config_rx+0x1a>
    946a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    946e:	mov.w	r9, r0, lsl #7
    9472:	ldr.w	sl, [pc, #64]	; 94b4 <usb_config_rx+0x60>
    9476:	mov	r5, r1
    9478:	mov	r4, r0
    947a:	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    947e:	movs	r1, #0
    9480:	movs	r2, #64	; 0x40
    9482:	mov	r8, r3
    9484:	mov	r0, r6
    9486:	bl	bc44 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    948a:	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    948c:	orr.w	r1, r7, r5, lsl #16
    9490:	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    9494:	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    9498:	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    949a:	cmp.w	r8, #0
    949e:	beq.n	946a <usb_config_rx+0x16>
    94a0:	ldr	r3, [pc, #12]	; (94b0 <usb_config_rx+0x5c>)
    94a2:	lsls	r0, r4
    94a4:	ldr	r4, [r3, #0]
    94a6:	orrs	r0, r4
    94a8:	str	r0, [r3, #0]
    94aa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    94ae:	nop
    94b0:	.word	0x2000c248
    94b4:	.word	0x20000000

000094b8 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    94b8:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    94ba:	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    94be:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    94c2:	ite	ne
    94c4:	movne	r7, #0
    94c6:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    94ca:	cmp	r2, #3
    94cc:	bls.n	94d2 <usb_config_tx+0x1a>
    94ce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    94d2:	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    94d4:	lsls	r5, r0, #7
    94d6:	ldr.w	r9, [pc, #68]	; 951c <usb_config_tx+0x64>
    94da:	mov	r8, r1
    94dc:	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    94de:	movs	r1, #0
    94e0:	mov	r4, r0
    94e2:	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    94e4:	add.w	sl, r9, r5
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    94e8:	mov	r0, sl
    94ea:	bl	bc44 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    94ee:	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    94f0:	orr.w	r1, r7, r8, lsl #16
    94f4:	str.w	r1, [r9, r5]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    94f8:	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    94fc:	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    9500:	cmp	r6, #0
    9502:	beq.n	94ce <usb_config_tx+0x16>
    9504:	add.w	r0, r4, #16
    9508:	ldr	r3, [pc, #12]	; (9518 <usb_config_tx+0x60>)
    950a:	lsls	r2, r0
    950c:	ldr	r0, [r3, #0]
    950e:	orrs	r2, r0
    9510:	str	r2, [r3, #0]
    9512:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9516:	nop
    9518:	.word	0x2000c248
    951c:	.word	0x20000000

00009520 <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    9520:	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    9522:	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    9524:	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    9526:	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    952a:	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    952c:	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    952e:	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    9530:	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    9534:	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    9538:	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    953c:	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    9540:	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    9542:	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    9544:	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    9546:	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    9548:	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    954a:	pop	{r4, r5, r6, r7}
    954c:	bx	lr
    954e:	nop

00009550 <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    9550:	subs	r3, r0, #2
    9552:	cmp	r3, #3
    9554:	bls.n	9558 <usb_transmit+0x8>
    9556:	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    9558:	ldr	r3, [pc, #24]	; (9574 <usb_transmit+0x24>)
    955a:	mov	r2, r1
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    955c:	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    955e:	add.w	r4, r0, #16
    9562:	movs	r5, #1
    9564:	add.w	r0, r3, r0, lsl #7
    9568:	lsl.w	r1, r5, r4
    956c:	adds	r0, #64	; 0x40
}
    956e:	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    9570:	b.w	8c4c <schedule_transfer>
    9574:	.word	0x20000000

00009578 <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    9578:	subs	r3, r0, #2
    957a:	cmp	r3, #3
    957c:	bls.n	9580 <usb_receive+0x8>
    957e:	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    9580:	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    9582:	ldr	r3, [pc, #20]	; (9598 <usb_receive+0x20>)
    9584:	movs	r4, #1
    9586:	mov	r2, r1
    9588:	lsl.w	r1, r4, r0
    958c:	add.w	r0, r3, r0, lsl #7
}
    9590:	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    9594:	b.w	8c4c <schedule_transfer>
    9598:	.word	0x20000000

0000959c <usb_transfer_status>:
uint32_t usb_transfer_status(const transfer_t *transfer)
{
#if defined(USB_MTPDISK) || defined(USB_MTPDISK_SERIAL)
	uint32_t status, cmd;
	//int count=0;
	cmd = USB1_USBCMD;
    959c:	ldr	r2, [pc, #32]	; (95c0 <usb_transfer_status+0x24>)
    959e:	ldr.w	r3, [r2, #320]	; 0x140
	while (1) {
		__disable_irq();
    95a2:	cpsid	i
		USB1_USBCMD = cmd | USB_USBCMD_ATDTW;
    95a4:	orr.w	r3, r3, #16384	; 0x4000
    95a8:	str.w	r3, [r2, #320]	; 0x140
		status = transfer->status;
    95ac:	ldr	r1, [r0, #4]
		cmd = USB1_USBCMD;
    95ae:	ldr.w	r3, [r2, #320]	; 0x140
		__enable_irq();
    95b2:	cpsie	i
		if (cmd & USB_USBCMD_ATDTW) return status;
    95b4:	tst.w	r3, #16384	; 0x4000
    95b8:	beq.n	95a2 <usb_transfer_status+0x6>
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
#endif
}
    95ba:	mov	r0, r1
    95bc:	bx	lr
    95be:	nop
    95c0:	.word	0x402e0000

000095c4 <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    95c4:	cmp	r0, #0
    95c6:	beq.n	9678 <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    95c8:	movs	r2, #1
{

}*/

void delay(uint32_t msec)
{
    95ca:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    95ce:	sub	sp, #20
    95d0:	mov	fp, r0
    95d2:	ldr	r4, [pc, #168]	; (967c <delay+0xb8>)
    95d4:	ldr	r5, [pc, #168]	; (9680 <delay+0xbc>)
    95d6:	ldr	r6, [pc, #172]	; (9684 <delay+0xc0>)
    95d8:	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    95dc:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    95e0:	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    95e2:	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    95e4:	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    95e8:	cmp	r1, #0
    95ea:	bne.n	95dc <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    95ec:	ldr	r7, [pc, #152]	; (9688 <delay+0xc4>)
    95ee:	strd	r8, r9, [sp, #8]
    95f2:	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    95f4:	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    95f6:	ldr	r2, [pc, #148]	; (968c <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    95f8:	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    95fc:	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    95fe:	ldr	r2, [r2, #0]
    9600:	movs	r7, #1
    9602:	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
    9606:	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    960a:	mov	r8, r3
	if (frac > 1000) frac = 1000;
    960c:	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    960e:	cmp	r3, r1
    9610:	it	eq
    9612:	cmpeq	r2, r8
    9614:	ite	cs
    9616:	movcs	sl, r8
    9618:	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    961a:	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    961e:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    9622:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    9624:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    9626:	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    962a:	cmp	r3, #0
    962c:	bne.n	961e <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    962e:	ldr	r0, [sp, #4]
    9630:	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    9632:	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    9634:	ldr	r0, [pc, #84]	; (968c <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    9636:	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    963a:	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    963c:	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    9640:	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
    9644:	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    9648:	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    964c:	mov	r8, r1
	if (frac > 1000) frac = 1000;
    964e:	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    9650:	cmp	r1, r3
    9652:	it	eq
    9654:	cmpeq	r0, r8
    9656:	ite	cs
    9658:	movcs	r3, r8
    965a:	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    965c:	add	r2, r3
    965e:	cmp	r2, lr
    9660:	bcc.n	9672 <delay+0xae>
			if (--msec == 0) return;
    9662:	subs.w	fp, fp, #1
			start += 1000;
    9666:	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
    966a:	bne.n	961e <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
    966c:	add	sp, #20
    966e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
    9672:	bl	a394 <yield>
	}
    9676:	b.n	961e <delay+0x5a>
    9678:	bx	lr
    967a:	nop
    967c:	.word	0x2000ee0c
    9680:	.word	0x2000c320
    9684:	.word	0x2000c31c
    9688:	.word	0xe0001004
    968c:	.word	0x2000c314

00009690 <micros>:
	// TODO...
}

uint32_t micros(void)
{
    9690:	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
    9694:	ldr	r2, [pc, #72]	; (96e0 <micros+0x50>)
    9696:	movs	r6, #1
    9698:	ldr	r5, [pc, #72]	; (96e4 <micros+0x54>)
    969a:	ldr	r4, [pc, #76]	; (96e8 <micros+0x58>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    969c:	ldrex	r3, [r2]
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    96a0:	ldr	r1, [r5, #0]
		scc = systick_cycle_count;
    96a2:	ldr	r0, [r4, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    96a4:	strex	r3, r6, [r2]
	} while ( __STREXW(1, &systick_safe_read));
    96a8:	cmp	r3, #0
    96aa:	bne.n	969c <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    96ac:	ldr	r2, [pc, #60]	; (96ec <micros+0x5c>)
    96ae:	ldr	r6, [r2, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    96b0:	ldr	r7, [pc, #60]	; (96f0 <micros+0x60>)
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    96b2:	subs	r2, r6, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
    96b4:	mov.w	r9, #0
    96b8:	mov.w	r8, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    96bc:	ldr	r6, [r7, #0]
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
    96be:	mov.w	r0, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    96c2:	cmp	r9, r3
    96c4:	umull	r6, r7, r2, r6
    96c8:	it	eq
    96ca:	cmpeq	r8, r7
    96cc:	mov	r4, r7
    96ce:	ite	cs
    96d0:	movcs	r4, r7
    96d2:	movcc	r4, r0
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
}
    96d4:	mla	r0, r0, r1, r4
    96d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    96dc:	bx	lr
    96de:	nop
    96e0:	.word	0x2000ee0c
    96e4:	.word	0x2000c320
    96e8:	.word	0x2000c31c
    96ec:	.word	0xe0001004
    96f0:	.word	0x2000c314

000096f4 <unused_interrupt_vector>:
	const uint32_t *stack;
	struct arm_fault_info_struct *info;
	const uint32_t *p, *end;

	// disallow any nested interrupts
	__disable_irq();
    96f4:	cpsid	i
	// store crash report info
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    96f6:	mrs	r3, IPSR
	info = (struct arm_fault_info_struct *)0x2027FF80;
	info->ipsr = ipsr;
    96fa:	ldr	r5, [pc, #292]	; (9820 <unused_interrupt_vector+0x12c>)
    96fc:	str	r3, [r5, #4]
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
    96fe:	mrs	r3, MSP
	info->cfsr = SCB_CFSR;
    9702:	ldr	r4, [pc, #288]	; (9824 <unused_interrupt_vector+0x130>)
	info->bfar = SCB_BFAR;
	info->ret = stack[6];
	info->xpsr = stack[7];
	info->temp = tempmonGetTemp();
	info->time = rtc_get();
	info->len = sizeof(*info) / 4;
    9704:	mov	r6, r5
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
	info = (struct arm_fault_info_struct *)0x2027FF80;
	info->ipsr = ipsr;
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
	info->cfsr = SCB_CFSR;
	info->hfsr = SCB_HFSR;
    9706:	ldr	r0, [pc, #288]	; (9828 <unused_interrupt_vector+0x134>)
	info->mmfar = SCB_MMFAR;
    9708:	ldr	r1, [pc, #288]	; (982c <unused_interrupt_vector+0x138>)
	info->bfar = SCB_BFAR;
    970a:	ldr	r2, [pc, #292]	; (9830 <unused_interrupt_vector+0x13c>)
	// store crash report info
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
	info = (struct arm_fault_info_struct *)0x2027FF80;
	info->ipsr = ipsr;
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
	info->cfsr = SCB_CFSR;
    970c:	ldr	r4, [r4, #0]
	info->hfsr = SCB_HFSR;
    970e:	ldr	r0, [r0, #0]
	info->mmfar = SCB_MMFAR;
    9710:	ldr	r1, [r1, #0]
	info->bfar = SCB_BFAR;
    9712:	ldr	r2, [r2, #0]
	info = (struct arm_fault_info_struct *)0x2027FF80;
	info->ipsr = ipsr;
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
	info->cfsr = SCB_CFSR;
	info->hfsr = SCB_HFSR;
	info->mmfar = SCB_MMFAR;
    9714:	str	r1, [r5, #16]
	// store crash report info
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
	info = (struct arm_fault_info_struct *)0x2027FF80;
	info->ipsr = ipsr;
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
	info->cfsr = SCB_CFSR;
    9716:	str	r4, [r5, #8]
	info->hfsr = SCB_HFSR;
    9718:	str	r0, [r5, #12]
	info->mmfar = SCB_MMFAR;
	info->bfar = SCB_BFAR;
    971a:	str	r2, [r5, #20]
	info->ret = stack[6];
    971c:	ldr	r2, [r3, #24]
	crc = 0xFFFFFFFF;
	p = (uint32_t *)info;
	end = p + (sizeof(*info) / 4 - 1);
	while (p < end) {
		crc ^= *p++;
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    971e:	ldr	r4, [pc, #276]	; (9834 <unused_interrupt_vector+0x140>)
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
	info->cfsr = SCB_CFSR;
	info->hfsr = SCB_HFSR;
	info->mmfar = SCB_MMFAR;
	info->bfar = SCB_BFAR;
	info->ret = stack[6];
    9720:	str	r2, [r5, #24]
	info->xpsr = stack[7];
    9722:	ldr	r3, [r3, #28]
	info->len = sizeof(*info) / 4;
	// add CRC to crash report
	crc = 0xFFFFFFFF;
	p = (uint32_t *)info;
	end = p + (sizeof(*info) / 4 - 1);
	while (p < end) {
    9724:	ldr	r7, [pc, #272]	; (9838 <unused_interrupt_vector+0x144>)
	info->cfsr = SCB_CFSR;
	info->hfsr = SCB_HFSR;
	info->mmfar = SCB_MMFAR;
	info->bfar = SCB_BFAR;
	info->ret = stack[6];
	info->xpsr = stack[7];
    9726:	str	r3, [r5, #28]
	info->temp = tempmonGetTemp();
    9728:	bl	9c88 <tempmonGetTemp>
    972c:	vstr	s0, [r5, #32]
	info->time = rtc_get();
    9730:	bl	98b4 <rtc_get>
	info->len = sizeof(*info) / 4;
    9734:	movs	r3, #11
	// add CRC to crash report
	crc = 0xFFFFFFFF;
    9736:	mov.w	r2, #4294967295
	info->mmfar = SCB_MMFAR;
	info->bfar = SCB_BFAR;
	info->ret = stack[6];
	info->xpsr = stack[7];
	info->temp = tempmonGetTemp();
	info->time = rtc_get();
    973a:	str	r0, [r5, #36]	; 0x24
	info->len = sizeof(*info) / 4;
    973c:	mov	r1, r3
    973e:	str	r3, [r5, #0]
	// add CRC to crash report
	crc = 0xFFFFFFFF;
	p = (uint32_t *)info;
	end = p + (sizeof(*info) / 4 - 1);
	while (p < end) {
		crc ^= *p++;
    9740:	eors	r2, r1
    9742:	movs	r1, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    9744:	and.w	r3, r2, #1
    9748:	subs	r1, #1
    974a:	mul.w	r3, r4, r3
    974e:	eor.w	r2, r3, r2, lsr #1
    9752:	bne.n	9744 <unused_interrupt_vector+0x50>
	info->len = sizeof(*info) / 4;
	// add CRC to crash report
	crc = 0xFFFFFFFF;
	p = (uint32_t *)info;
	end = p + (sizeof(*info) / 4 - 1);
	while (p < end) {
    9754:	cmp	r6, r7
    9756:	beq.n	975e <unused_interrupt_vector+0x6a>
    9758:	ldr.w	r1, [r6, #4]!
    975c:	b.n	9740 <unused_interrupt_vector+0x4c>
		crc ^= *p++;
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
	}
	info->crc = crc;
    975e:	ldr	r1, [pc, #192]	; (9820 <unused_interrupt_vector+0x12c>)
    9760:	str	r2, [r1, #40]	; 0x28
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    9762:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    9766:	ldr	r3, [pc, #212]	; (983c <unused_interrupt_vector+0x148>)
    9768:	ldr	r2, [pc, #212]	; (9840 <unused_interrupt_vector+0x14c>)
    976a:	str	r1, [r3, #0]
    976c:	str	r2, [r3, #0]
		location += 32;
	} while (location < end_addr);
	asm("dsb");
    976e:	dsb	sy
	asm("isb");
    9772:	isb	sy
	//IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
	//IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
	//GPIO7_GDIR |= (1 << 3);

	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    9776:	ldr	r2, [pc, #204]	; (9844 <unused_interrupt_vector+0x150>)
	PIT_MCR = PIT_MCR_MDIS;
    9778:	movs	r5, #2
    977a:	ldr	r4, [pc, #204]	; (9848 <unused_interrupt_vector+0x154>)
	//IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
	//IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
	//GPIO7_GDIR |= (1 << 3);

	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    977c:	ldr	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    977e:	ldr	r1, [pc, #204]	; (984c <unused_interrupt_vector+0x158>)
	//IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
	//IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
	//GPIO7_GDIR |= (1 << 3);

	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    9780:	orr.w	r3, r3, #12288	; 0x3000
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    9784:	ldr	r0, [pc, #200]	; (9850 <unused_interrupt_vector+0x15c>)
	//IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
	//IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
	//GPIO7_GDIR |= (1 << 3);

	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    9786:	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    9788:	str	r5, [r4, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    978a:	ldr	r3, [r2, #28]
    978c:	bic.w	r3, r3, #127	; 0x7f
    9790:	orr.w	r3, r3, #64	; 0x40
    9794:	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    9796:	ldr	r3, [r1, #0]
    9798:	cmp	r3, r0
    979a:	bhi.n	981a <unused_interrupt_vector+0x126>
	PIT_MCR = 0;
    979c:	ldr	r2, [pc, #168]	; (9848 <unused_interrupt_vector+0x154>)
    979e:	movs	r1, #0
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    97a0:	movs	r0, #1
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    97a2:	ldr	r6, [pc, #176]	; (9854 <unused_interrupt_vector+0x160>)
	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
	PIT_MCR = 0;
    97a4:	str	r1, [r2, #0]
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
	PIT_TCTRL0 = PIT_TCTRL_TEN;
	// disable all NVIC interrupts, as usb_isr() might use __enable_irq()
	NVIC_ICER0 = 0xFFFFFFFF;
    97a6:	mov.w	r3, #4294967295
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
    97aa:	str.w	r1, [r2, #264]	; 0x108
	NVIC_ICER4 = 0xFFFFFFFF;

	// keep USB running, so any unsent Serial.print() actually arrives in
	// the Arduino Serial Monitor, and we remain responsive to Upload
	// without requiring manual press of Teensy's pushbutton
	count = 0;
    97ae:	mov	r4, r1
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    97b0:	str.w	r6, [r2, #256]	; 0x100
	// keep USB running, so any unsent Serial.print() actually arrives in
	// the Arduino Serial Monitor, and we remain responsive to Upload
	// without requiring manual press of Teensy's pushbutton
	count = 0;
	while (1) {
		if (PIT_TFLG0) {
    97b4:	mov	r5, r2
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    97b6:	str.w	r0, [r2, #264]	; 0x108
	// without requiring manual press of Teensy's pushbutton
	count = 0;
	while (1) {
		if (PIT_TFLG0) {
			//GPIO7_DR_TOGGLE = (1 << 3); // blink LED
			PIT_TFLG0 = 1;
    97ba:	mov	r7, r0
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
	PIT_TCTRL0 = PIT_TCTRL_TEN;
	// disable all NVIC interrupts, as usb_isr() might use __enable_irq()
	NVIC_ICER0 = 0xFFFFFFFF;
    97bc:	ldr.w	lr, [pc, #192]	; 9880 <unused_interrupt_vector+0x18c>
	NVIC_ICER1 = 0xFFFFFFFF;
    97c0:	ldr	r6, [pc, #148]	; (9858 <unused_interrupt_vector+0x164>)
	NVIC_ICER2 = 0xFFFFFFFF;
    97c2:	ldr	r0, [pc, #152]	; (985c <unused_interrupt_vector+0x168>)
	NVIC_ICER3 = 0xFFFFFFFF;
    97c4:	ldr	r1, [pc, #152]	; (9860 <unused_interrupt_vector+0x16c>)
	NVIC_ICER4 = 0xFFFFFFFF;
    97c6:	ldr	r2, [pc, #156]	; (9864 <unused_interrupt_vector+0x170>)
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
	PIT_TCTRL0 = PIT_TCTRL_TEN;
	// disable all NVIC interrupts, as usb_isr() might use __enable_irq()
	NVIC_ICER0 = 0xFFFFFFFF;
    97c8:	str.w	r3, [lr]
	NVIC_ICER1 = 0xFFFFFFFF;
    97cc:	str	r3, [r6, #0]
	NVIC_ICER2 = 0xFFFFFFFF;
    97ce:	str	r3, [r0, #0]
	NVIC_ICER3 = 0xFFFFFFFF;
    97d0:	str	r3, [r1, #0]
	NVIC_ICER4 = 0xFFFFFFFF;
    97d2:	str	r3, [r2, #0]
    97d4:	b.n	97da <unused_interrupt_vector+0xe6>
		if (PIT_TFLG0) {
			//GPIO7_DR_TOGGLE = (1 << 3); // blink LED
			PIT_TFLG0 = 1;
			if (++count >= 80) break;  // reboot after 8 seconds
		}
		usb_isr();
    97d6:	bl	8e5c <usb_isr>
	// keep USB running, so any unsent Serial.print() actually arrives in
	// the Arduino Serial Monitor, and we remain responsive to Upload
	// without requiring manual press of Teensy's pushbutton
	count = 0;
	while (1) {
		if (PIT_TFLG0) {
    97da:	ldr.w	r2, [r5, #268]	; 0x10c
    97de:	ldr	r3, [pc, #104]	; (9848 <unused_interrupt_vector+0x154>)
    97e0:	cmp	r2, #0
    97e2:	beq.n	97d6 <unused_interrupt_vector+0xe2>
			//GPIO7_DR_TOGGLE = (1 << 3); // blink LED
			PIT_TFLG0 = 1;
			if (++count >= 80) break;  // reboot after 8 seconds
    97e4:	adds	r4, #1
	// without requiring manual press of Teensy's pushbutton
	count = 0;
	while (1) {
		if (PIT_TFLG0) {
			//GPIO7_DR_TOGGLE = (1 << 3); // blink LED
			PIT_TFLG0 = 1;
    97e6:	str.w	r7, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    97ea:	cmp	r4, #79	; 0x4f
    97ec:	bls.n	97d6 <unused_interrupt_vector+0xe2>
		//   Complete writes to SD card
		//   Flush/sync LittleFS
	}
	// turn off USB
	USB1_USBCMD = USB_USBCMD_RST;
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    97ee:	ldr	r2, [pc, #120]	; (9868 <unused_interrupt_vector+0x174>)
		//   Transmit Serial1 - Serial8 data
		//   Complete writes to SD card
		//   Flush/sync LittleFS
	}
	// turn off USB
	USB1_USBCMD = USB_USBCMD_RST;
    97f0:	movs	r4, #2
    97f2:	ldr	r0, [pc, #120]	; (986c <unused_interrupt_vector+0x178>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    97f4:	mov.w	r1, #2147483648	; 0x80000000
		//   Transmit Serial1 - Serial8 data
		//   Complete writes to SD card
		//   Flush/sync LittleFS
	}
	// turn off USB
	USB1_USBCMD = USB_USBCMD_RST;
    97f8:	str.w	r4, [r0, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    97fc:	str	r1, [r2, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    97fe:	ldr.w	r2, [r3, #268]	; 0x10c
    9802:	cbnz	r2, 9812 <unused_interrupt_vector+0x11e>
	// reboot
	SRC_GPR5 = 0x0BAD00F1;
    9804:	ldr	r1, [pc, #104]	; (9870 <unused_interrupt_vector+0x17c>)
    9806:	ldr	r2, [pc, #108]	; (9874 <unused_interrupt_vector+0x180>)
    9808:	str	r2, [r1, #48]	; 0x30
		//   Flush/sync LittleFS
	}
	// turn off USB
	USB1_USBCMD = USB_USBCMD_RST;
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    980a:	ldr.w	r0, [r3, #268]	; 0x10c
    980e:	cmp	r0, #0
    9810:	beq.n	9808 <unused_interrupt_vector+0x114>
	// reboot
	SRC_GPR5 = 0x0BAD00F1;
	SCB_AIRCR = 0x05FA0004;
    9812:	ldr	r3, [pc, #100]	; (9878 <unused_interrupt_vector+0x184>)
    9814:	ldr	r2, [pc, #100]	; (987c <unused_interrupt_vector+0x188>)
    9816:	str	r2, [r3, #0]
    9818:	b.n	9818 <unused_interrupt_vector+0x124>

	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    981a:	bl	a6b4 <set_arm_clock>
    981e:	b.n	979c <unused_interrupt_vector+0xa8>
    9820:	.word	0x2027ff80
    9824:	.word	0xe000ed28
    9828:	.word	0xe000ed2c
    982c:	.word	0xe000ed34
    9830:	.word	0xe000ed38
    9834:	.word	0xedb88320
    9838:	.word	0x2027ffa4
    983c:	.word	0xe000ef70
    9840:	.word	0x2027ffa0
    9844:	.word	0x400fc000
    9848:	.word	0x40084000
    984c:	.word	0x20001224
    9850:	.word	0x0bcd3d80
    9854:	.word	0x00249f00
    9858:	.word	0xe000e184
    985c:	.word	0xe000e188
    9860:	.word	0xe000e18c
    9864:	.word	0xe000e190
    9868:	.word	0x400d9000
    986c:	.word	0x402e0000
    9870:	.word	0x400f8000
    9874:	.word	0x0bad00f1
    9878:	.word	0xe000ed0c
    987c:	.word	0x05fa0004
    9880:	.word	0xe000e180

00009884 <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
    9884:	ldr	r2, [pc, #36]	; (98ac <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
    9886:	push	{r3, lr}
        char *prev = __brkval;
    9888:	ldr	r3, [r2, #0]
        if (incr != 0) {
    988a:	cbz	r0, 9896 <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
    988c:	add	r0, r3
    988e:	ldr	r1, [pc, #32]	; (98b0 <_sbrk+0x2c>)
    9890:	cmp	r0, r1
    9892:	bhi.n	989a <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
    9894:	str	r0, [r2, #0]
        }
        return prev;
}
    9896:	mov	r0, r3
    9898:	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    989a:	bl	b584 <__errno>
    989e:	movs	r2, #12
                        return (void *)-1;
    98a0:	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    98a4:	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    98a6:	mov	r0, r3
    98a8:	pop	{r3, pc}
    98aa:	nop
    98ac:	.word	0x2000123c
    98b0:	.word	0x20280000

000098b4 <rtc_get>:
#include "debug/printf.h"


unsigned long rtc_get(void)
{
	uint32_t hi1 = SNVS_HPRTCMR;
    98b4:	ldr	r3, [pc, #40]	; (98e0 <rtc_get+0x2c>)
#include "imxrt.h"
#include "debug/printf.h"


unsigned long rtc_get(void)
{
    98b6:	push	{r4, r5}
	uint32_t hi1 = SNVS_HPRTCMR;
    98b8:	ldr	r0, [r3, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;
    98ba:	mov	r4, r3


unsigned long rtc_get(void)
{
	uint32_t hi1 = SNVS_HPRTCMR;
	uint32_t lo1 = SNVS_HPRTCLR;
    98bc:	ldr	r1, [r3, #40]	; 0x28
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;
    98be:	ldr	r2, [r4, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    98c0:	ldr	r3, [r4, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    98c2:	cmp	r1, r3
    98c4:	it	eq
    98c6:	cmpeq	r0, r2
unsigned long rtc_get(void)
{
	uint32_t hi1 = SNVS_HPRTCMR;
	uint32_t lo1 = SNVS_HPRTCLR;
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;
    98c8:	mov	r0, r2
		uint32_t lo2 = SNVS_HPRTCLR;
    98ca:	mov	r1, r3
		if (lo1 == lo2 && hi1 == hi2) {
    98cc:	ite	eq
    98ce:	moveq	r5, #1
    98d0:	movne	r5, #0
    98d2:	cmp	r5, #0
    98d4:	beq.n	98be <rtc_get+0xa>
			return (hi2 << 17) | (lo2 >> 15);
    98d6:	lsrs	r1, r3, #15
		}
		hi1 = hi2;
		lo1 = lo2;
	}
}
    98d8:	pop	{r4, r5}
    98da:	orr.w	r0, r1, r2, lsl #17
    98de:	bx	lr
    98e0:	.word	0x400d4000

000098e4 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    98e4:	push	{r4, r5, r6, r7}
    98e6:	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    98e8:	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    98ea:	mov	r7, r6
    98ec:	b.n	98f0 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    98ee:	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    98f0:	udiv	r3, r0, r2
    98f4:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    98f8:	add.w	r4, r0, #55	; 0x37
    98fc:	cmp	r0, #9
    98fe:	add.w	r0, r0, #48	; 0x30
    9902:	uxtb	r4, r4
    9904:	it	ls
    9906:	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    9908:	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    990a:	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    990e:	cmp	r3, #0
    9910:	bne.n	98ee <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    9912:	adds	r2, r1, r5
    9914:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    9916:	cbz	r5, 992c <ultoa+0x48>
    9918:	adds	r3, #1
		t = buf[j];
    991a:	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    991e:	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    9920:	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    9922:	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    9924:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    9926:	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    992a:	blt.n	9918 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    992c:	mov	r0, r1
    992e:	pop	{r4, r5, r6, r7}
    9930:	bx	lr
    9932:	nop

00009934 <dtostrf>:
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
    9934:	vcmp.f32	s0, s0
{
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
    9938:	eor.w	r3, r0, r0, asr #31
char * fcvtf(float, int, int *, int *);
int isnanf (float x);
int isinff (float x);

char * dtostrf(float val, int width, unsigned int precision, char *buf)
{
    993c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
    9940:	vmrs	APSR_nzcv, fpscr
char * fcvtf(float, int, int *, int *);
int isnanf (float x);
int isinff (float x);

char * dtostrf(float val, int width, unsigned int precision, char *buf)
{
    9944:	mov	r5, r0
    9946:	mov	r4, r2
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
    9948:	sub.w	r3, r3, r0, asr #31
char * fcvtf(float, int, int *, int *);
int isnanf (float x);
int isinff (float x);

char * dtostrf(float val, int width, unsigned int precision, char *buf)
{
    994c:	vpush	{d8}
    9950:	vmov.f32	s16, s0
    9954:	sub	sp, #16
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
    9956:	bvs.w	9ba0 <dtostrf+0x26c>
			awidth--;
		}
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
    995a:	vabs.f32	s15, s0
    995e:	vldr	s14, [pc, #792]	; 9c78 <dtostrf+0x344>
    9962:	vcmp.f32	s15, s14
    9966:	vmrs	APSR_nzcv, fpscr
    996a:	ble.n	99f2 <dtostrf+0xbe>
		int ndigs = (val<0) ? 4 : 3;
    996c:	vcmpe.f32	s0, #0.0
    9970:	vmrs	APSR_nzcv, fpscr
    9974:	ite	mi
    9976:	movmi	r2, #4
    9978:	movpl	r2, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    997a:	cmp	r2, r3
    997c:	blt.n	99c2 <dtostrf+0x8e>
		if (width<0) {
    997e:	cmp	r0, #0
    9980:	blt.w	9c64 <dtostrf+0x330>
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    9984:	movs	r2, #0
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
    9986:	vcmpe.f32	s16, #0.0
    998a:	vmrs	APSR_nzcv, fpscr
    998e:	bmi.w	9c26 <dtostrf+0x2f2>
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    9992:	movs	r5, #73	; 0x49
    9994:	movs	r0, #78	; 0x4e
    9996:	movs	r1, #70	; 0x46
    9998:	adds	r3, r4, #3
    999a:	strb	r5, [r4, #0]
    999c:	strb	r0, [r4, #1]
    999e:	strb	r1, [r4, #2]
		} else {
			*buf++ = 'i';  *buf++ = 'n';  *buf++ = 'f';
		}
		while (awidth) {
    99a0:	cmp	r2, #0
    99a2:	beq.w	9c74 <dtostrf+0x340>
    99a6:	add	r2, r3
			*buf++ = ' ';
    99a8:	movs	r1, #32
    99aa:	strb.w	r1, [r3], #1
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
		} else {
			*buf++ = 'i';  *buf++ = 'n';  *buf++ = 'f';
		}
		while (awidth) {
    99ae:	cmp	r2, r3
    99b0:	bne.n	99aa <dtostrf+0x76>
			*buf++ = ' ';
			awidth--;
		}
		*buf = 0;
    99b2:	movs	r3, #0
		return buf;
    99b4:	mov	r0, r2
		}
		while (awidth) {
			*buf++ = ' ';
			awidth--;
		}
		*buf = 0;
    99b6:	strb	r3, [r2, #0]

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
    99b8:	add	sp, #16
    99ba:	vpop	{d8}
    99be:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return buf;
	}
	if (isinff(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
    99c2:	cmp	r0, #0
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    99c4:	sub.w	r2, r3, r2
		if (width<0) {
    99c8:	bge.n	9986 <dtostrf+0x52>
			while (awidth) {
    99ca:	cmp	r2, #0
    99cc:	beq.w	9c64 <dtostrf+0x330>
    99d0:	adds	r3, r4, r2
				*buf++ = ' ';
    99d2:	movs	r2, #32
    99d4:	strb.w	r2, [r4], #1
	}
	if (isinff(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
			while (awidth) {
    99d8:	cmp	r4, r3
    99da:	bne.n	99d4 <dtostrf+0xa0>
				*buf++ = ' ';
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
    99dc:	vcmpe.f32	s16, #0.0
    99e0:	vmrs	APSR_nzcv, fpscr
    99e4:	bpl.w	9c16 <dtostrf+0x2e2>
    99e8:	movs	r2, #0
    99ea:	movs	r1, #45	; 0x2d
    99ec:	adds	r4, r3, #1
    99ee:	strb	r1, [r3, #0]
    99f0:	b.n	9992 <dtostrf+0x5e>
    99f2:	mov	r7, r1
		}
		*buf = 0;
		return buf;
	}

	s = fcvtf(val, precision, &decpt, &sign);
    99f4:	add	r2, sp, #8
    99f6:	add	r1, sp, #4
    99f8:	mov	r0, r7
    99fa:	mov	sl, r7
    99fc:	bl	b560 <fcvtf>

	// if only 1 digit in output
	if (precision == 0 && decpt == 0) {
    9a00:	ldr.w	r9, [sp, #4]
		}
		*buf = 0;
		return buf;
	}

	s = fcvtf(val, precision, &decpt, &sign);
    9a04:	mov	r8, r0

	// if only 1 digit in output
	if (precision == 0 && decpt == 0) {
    9a06:	cmp	r7, #0
    9a08:	beq.w	9b1a <dtostrf+0x1e6>
    9a0c:	rsb	r3, r9, #0
		s = (*s < '5') ? "0" : "1";
		decpt++;
	}

	// if all zeros, limit to precision
	if (-decpt  > (int)precision) {
    9a10:	cmp	r3, r7
    9a12:	bgt.w	9b8e <dtostrf+0x25a>
    9a16:	mov	r0, r8
    9a18:	bl	c280 <strlen>
    9a1c:	mov	r6, r0
	}

	reqd = strlen(s);

	// add 1 for decimal point
	if (reqd > decpt) reqd++;
    9a1e:	cmp	r9, r6
    9a20:	it	lt
    9a22:	addlt	r6, #1

	// add 1 for zero in front of decimal point
	if (decpt == 0) reqd++;
    9a24:	cmp.w	r9, #0
    9a28:	beq.w	9b8a <dtostrf+0x256>

	// if leading zeros after decimal point
	if (decpt < 0 && precision > 0) {
    9a2c:	cmp.w	r9, #0
    9a30:	bge.n	9a78 <dtostrf+0x144>
    9a32:	cbz	r7, 9a78 <dtostrf+0x144>
		// ensure enough trailing zeros, add 2 for '0.'
		reqd = precision + 2;

		if (strlen(s) > precision + decpt) {
    9a34:	add.w	r3, r9, r7
	if (decpt == 0) reqd++;

	// if leading zeros after decimal point
	if (decpt < 0 && precision > 0) {
		// ensure enough trailing zeros, add 2 for '0.'
		reqd = precision + 2;
    9a38:	adds	r6, r7, #2

		if (strlen(s) > precision + decpt) {
    9a3a:	cmp	r3, r0
    9a3c:	bcs.n	9a78 <dtostrf+0x144>

			int newPrecision = precision;
			int newDecimalPoint;

			// shift decimal point
			while (newPrecision > 0) {
    9a3e:	cmp	r7, #0
    9a40:	ble.n	9a50 <dtostrf+0x11c>
				val *= 10.0f;
    9a42:	vmov.f32	s15, #36	; 0x41200000  10.0

			int newPrecision = precision;
			int newDecimalPoint;

			// shift decimal point
			while (newPrecision > 0) {
    9a46:	subs.w	sl, sl, #1
				val *= 10.0f;
    9a4a:	vmul.f32	s16, s16, s15

			int newPrecision = precision;
			int newDecimalPoint;

			// shift decimal point
			while (newPrecision > 0) {
    9a4e:	bne.n	9a46 <dtostrf+0x112>
				val *= 10.0f;
				newPrecision--;
			}

			// round after accounting for leading 0's
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    9a50:	add	r2, sp, #8
    9a52:	mov	r0, sl
    9a54:	vmov.f32	s0, s16
    9a58:	add	r1, sp, #12
    9a5a:	bl	b560 <fcvtf>

			// if rounded up to new digit (e.g. 0.09 to 0.1), move decimal point
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    9a5e:	ldr.w	r9, [sp, #4]
    9a62:	ldr	r2, [sp, #12]
    9a64:	adds	r3, r7, #1
				val *= 10.0f;
				newPrecision--;
			}

			// round after accounting for leading 0's
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    9a66:	mov	r8, r0

			// if rounded up to new digit (e.g. 0.09 to 0.1), move decimal point
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    9a68:	rsb	r2, r9, r2
    9a6c:	cmp	r2, r3
    9a6e:	bne.n	9a78 <dtostrf+0x144>
    9a70:	add.w	r9, r9, #1
    9a74:	str.w	r9, [sp, #4]
		}
	}

	// add 1 for sign if negative
	if (sign) reqd++;
    9a78:	ldr.w	lr, [sp, #8]
    9a7c:	cmp.w	lr, #0
    9a80:	beq.n	9b40 <dtostrf+0x20c>
    9a82:	adds	r6, #1

	p = buf;
	e = p + reqd;
	pad = width - reqd;
    9a84:	subs	r0, r5, r6

	// add 1 for sign if negative
	if (sign) reqd++;

	p = buf;
	e = p + reqd;
    9a86:	adds	r1, r4, r6
	pad = width - reqd;
	if (pad > 0) {
    9a88:	cmp	r0, #0
    9a8a:	bgt.n	9b4a <dtostrf+0x216>
	}

	// add 1 for sign if negative
	if (sign) reqd++;

	p = buf;
    9a8c:	mov	r2, r4
	pad = width - reqd;
	if (pad > 0) {
		e += pad;
		while (pad-- > 0) *p++ = ' ';
	}
	if (sign) *p++ = '-';
    9a8e:	movs	r0, #45	; 0x2d
    9a90:	adds	r3, r2, #1
    9a92:	strb	r0, [r2, #0]
	if (decpt == 0 && precision > 0) {
    9a94:	cmp.w	r9, #0
    9a98:	beq.n	9b76 <dtostrf+0x242>
		*p++ = '0';
		*p++ = '.';
	}
	else if (decpt < 0 && precision > 0) {
    9a9a:	cbz	r7, 9abe <dtostrf+0x18a>
    9a9c:	cmp.w	r9, #0
    9aa0:	bge.n	9abe <dtostrf+0x18a>
		*p++ = '0';
    9aa2:	mov	r2, r3
    9aa4:	movs	r0, #48	; 0x30
		*p++ = '.';
    9aa6:	movs	r7, #46	; 0x2e
	if (decpt == 0 && precision > 0) {
		*p++ = '0';
		*p++ = '.';
	}
	else if (decpt < 0 && precision > 0) {
		*p++ = '0';
    9aa8:	strb.w	r0, [r2], #2
		*p++ = '.';
    9aac:	strb	r7, [r3, #1]
    9aae:	rsb	r3, r9, r2
		// print leading zeros
		while ( decpt < 0 ) {
			decpt++;
			*p++ = '0';
    9ab2:	strb.w	r0, [r2], #1
	}
	else if (decpt < 0 && precision > 0) {
		*p++ = '0';
		*p++ = '.';
		// print leading zeros
		while ( decpt < 0 ) {
    9ab6:	cmp	r2, r3
    9ab8:	bne.n	9ab2 <dtostrf+0x17e>
    9aba:	movs	r2, #0
    9abc:	str	r2, [sp, #4]
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
    9abe:	cmp	r3, r1
    9ac0:	bcs.n	9b04 <dtostrf+0x1d0>
		*p++ = *s++;
    9ac2:	adds	r7, r3, #1
    9ac4:	ldrb.w	r2, [r8]
    9ac8:	add.w	r8, r8, #1
		if (p == e) break;
    9acc:	cmp	r7, r1
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
		*p++ = *s++;
    9ace:	strb	r2, [r3, #0]
		if (p == e) break;
    9ad0:	beq.n	9b06 <dtostrf+0x1d2>
    9ad2:	ldr	r2, [sp, #4]
		if (--decpt == 0) *p++ = '.';
    9ad4:	mov.w	lr, #46	; 0x2e
    9ad8:	b.n	9af2 <dtostrf+0x1be>
    9ada:	strb.w	lr, [r3, #1]
    9ade:	adds	r3, #2
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
    9ae0:	cmp	r3, r1
		*p++ = *s++;
    9ae2:	add.w	r7, r3, #1
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
    9ae6:	bcs.n	9b04 <dtostrf+0x1d0>
		*p++ = *s++;
    9ae8:	ldrb.w	r0, [r8], #1
		if (p == e) break;
    9aec:	cmp	r7, r1
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
		*p++ = *s++;
    9aee:	strb	r0, [r3, #0]
		if (p == e) break;
    9af0:	beq.n	9b06 <dtostrf+0x1d2>
		if (--decpt == 0) *p++ = '.';
    9af2:	subs	r2, #1
    9af4:	str	r2, [sp, #4]
    9af6:	cmp	r2, #0
    9af8:	beq.n	9ada <dtostrf+0x1a6>
    9afa:	mov	r3, r7
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
    9afc:	cmp	r3, r1
		*p++ = *s++;
    9afe:	add.w	r7, r3, #1
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
    9b02:	bcc.n	9ae8 <dtostrf+0x1b4>
    9b04:	mov	r1, r3
		*p++ = *s++;
		if (p == e) break;
		if (--decpt == 0) *p++ = '.';
	}
	if (width < 0) {
    9b06:	cmp	r5, #0
    9b08:	blt.n	9bee <dtostrf+0x2ba>
		pad = (reqd + width) * -1;
		while (pad-- > 0) *p++ = ' ';
	}
	*p = 0;
    9b0a:	movs	r3, #0

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
    9b0c:	mov	r0, r4
	}
	if (width < 0) {
		pad = (reqd + width) * -1;
		while (pad-- > 0) *p++ = ' ';
	}
	*p = 0;
    9b0e:	strb	r3, [r1, #0]

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
    9b10:	add	sp, #16
    9b12:	vpop	{d8}
    9b16:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}

	s = fcvtf(val, precision, &decpt, &sign);

	// if only 1 digit in output
	if (precision == 0 && decpt == 0) {
    9b1a:	cmp.w	r9, #0
    9b1e:	bne.w	9a0c <dtostrf+0xd8>
		// round and move decimal point
		s = (*s < '5') ? "0" : "1";
		decpt++;
    9b22:	movs	r3, #1
	s = fcvtf(val, precision, &decpt, &sign);

	// if only 1 digit in output
	if (precision == 0 && decpt == 0) {
		// round and move decimal point
		s = (*s < '5') ? "0" : "1";
    9b24:	ldrb.w	r8, [r0]
    9b28:	ldr	r1, [pc, #336]	; (9c7c <dtostrf+0x348>)
    9b2a:	ldr	r2, [pc, #340]	; (9c80 <dtostrf+0x34c>)
		decpt++;
    9b2c:	mov	r9, r3
    9b2e:	str	r3, [sp, #4]
    9b30:	mov.w	r3, #4294967295
	s = fcvtf(val, precision, &decpt, &sign);

	// if only 1 digit in output
	if (precision == 0 && decpt == 0) {
		// round and move decimal point
		s = (*s < '5') ? "0" : "1";
    9b34:	cmp.w	r8, #52	; 0x34
    9b38:	ite	hi
    9b3a:	movhi	r8, r1
    9b3c:	movls	r8, r2
    9b3e:	b.n	9a10 <dtostrf+0xdc>
	// add 1 for sign if negative
	if (sign) reqd++;

	p = buf;
	e = p + reqd;
	pad = width - reqd;
    9b40:	subs	r0, r5, r6

	// add 1 for sign if negative
	if (sign) reqd++;

	p = buf;
	e = p + reqd;
    9b42:	adds	r1, r4, r6
	pad = width - reqd;
	if (pad > 0) {
    9b44:	cmp	r0, #0
    9b46:	ble.w	9c70 <dtostrf+0x33c>
		e += pad;
    9b4a:	add	r1, r0
		decpt++;
	}

	// if all zeros, limit to precision
	if (-decpt  > (int)precision) {
		s = "0";
    9b4c:	mov	r2, r4
	p = buf;
	e = p + reqd;
	pad = width - reqd;
	if (pad > 0) {
		e += pad;
		while (pad-- > 0) *p++ = ' ';
    9b4e:	subs	r0, #1
    9b50:	mov.w	ip, #32
    9b54:	strb.w	ip, [r2], #1
    9b58:	rsb	r3, r2, #1
    9b5c:	add	r3, r0
    9b5e:	add	r3, r4
    9b60:	cmp	r3, #0
    9b62:	bgt.n	9b54 <dtostrf+0x220>
    9b64:	bic.w	r3, r0, r0, asr #31
    9b68:	adds	r3, #1
    9b6a:	add	r3, r4
	}
	if (sign) *p++ = '-';
    9b6c:	cmp.w	lr, #0
    9b70:	beq.n	9a94 <dtostrf+0x160>
	p = buf;
	e = p + reqd;
	pad = width - reqd;
	if (pad > 0) {
		e += pad;
		while (pad-- > 0) *p++ = ' ';
    9b72:	mov	r2, r3
    9b74:	b.n	9a8e <dtostrf+0x15a>
	}
	if (sign) *p++ = '-';
	if (decpt == 0 && precision > 0) {
    9b76:	cmp	r7, #0
    9b78:	beq.n	9abe <dtostrf+0x18a>
		*p++ = '0';
    9b7a:	mov	r2, r3
    9b7c:	movs	r7, #48	; 0x30
		*p++ = '.';
    9b7e:	movs	r0, #46	; 0x2e
		e += pad;
		while (pad-- > 0) *p++ = ' ';
	}
	if (sign) *p++ = '-';
	if (decpt == 0 && precision > 0) {
		*p++ = '0';
    9b80:	strb.w	r7, [r2], #2
		*p++ = '.';
    9b84:	strb	r0, [r3, #1]
    9b86:	mov	r3, r2
    9b88:	b.n	9abe <dtostrf+0x18a>

	// add 1 for decimal point
	if (reqd > decpt) reqd++;

	// add 1 for zero in front of decimal point
	if (decpt == 0) reqd++;
    9b8a:	adds	r6, #1
    9b8c:	b.n	9a78 <dtostrf+0x144>
	}

	// if all zeros, limit to precision
	if (-decpt  > (int)precision) {
		s = "0";
		decpt = -precision;
    9b8e:	movs	r6, #1
    9b90:	rsb	r9, r7, #0
		decpt++;
	}

	// if all zeros, limit to precision
	if (-decpt  > (int)precision) {
		s = "0";
    9b94:	ldr.w	r8, [pc, #232]	; 9c80 <dtostrf+0x34c>
		decpt = -precision;
    9b98:	mov	r0, r6
    9b9a:	str.w	r9, [sp, #4]
    9b9e:	b.n	9a1e <dtostrf+0xea>
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
    9ba0:	vcmpe.f32	s0, #0.0
    9ba4:	vmrs	APSR_nzcv, fpscr
    9ba8:	ite	mi
    9baa:	movmi	r2, #4
    9bac:	movpl	r2, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    9bae:	cmp	r2, r3
    9bb0:	bge.n	9c2a <dtostrf+0x2f6>
		if (width<0) {
    9bb2:	cmp	r0, #0
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    9bb4:	sub.w	r3, r3, r2
		if (width<0) {
    9bb8:	blt.n	9c3c <dtostrf+0x308>
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    9bba:	vmov	r2, s16
    9bbe:	cmp	r2, #0
    9bc0:	blt.n	9c32 <dtostrf+0x2fe>
		if (DTOA_UPPER) {
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    9bc2:	movs	r1, #78	; 0x4e
    9bc4:	movs	r0, #65	; 0x41
    9bc6:	adds	r2, r4, #3
    9bc8:	strb	r1, [r4, #0]
    9bca:	strb	r1, [r4, #2]
    9bcc:	strb	r0, [r4, #1]
		} else {
			*buf++ = 'n';  *buf++ = 'a';  *buf++ = 'n';
		}
		while (awidth) {
    9bce:	cmp	r3, #0
    9bd0:	beq.n	9c6c <dtostrf+0x338>
    9bd2:	add	r3, r2
			*buf++ = ' ';
    9bd4:	movs	r1, #32
    9bd6:	strb.w	r1, [r2], #1
		if (DTOA_UPPER) {
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
		} else {
			*buf++ = 'n';  *buf++ = 'a';  *buf++ = 'n';
		}
		while (awidth) {
    9bda:	cmp	r2, r3
    9bdc:	bne.n	9bd6 <dtostrf+0x2a2>
			*buf++ = ' ';
			awidth--;
		}
		*buf = 0;
    9bde:	movs	r2, #0
		return buf;
    9be0:	mov	r0, r3
		}
		while (awidth) {
			*buf++ = ' ';
			awidth--;
		}
		*buf = 0;
    9be2:	strb	r2, [r3, #0]

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
    9be4:	add	sp, #16
    9be6:	vpop	{d8}
    9bea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		*p++ = *s++;
		if (p == e) break;
		if (--decpt == 0) *p++ = '.';
	}
	if (width < 0) {
		pad = (reqd + width) * -1;
    9bee:	adds	r0, r5, r6
		while (pad-- > 0) *p++ = ' ';
    9bf0:	negs	r3, r0
    9bf2:	mvns	r0, r0
    9bf4:	cmp	r3, #0
    9bf6:	ble.n	9b0a <dtostrf+0x1d6>
    9bf8:	mov	r2, r1
    9bfa:	movs	r5, #32
    9bfc:	strb.w	r5, [r2], #1
    9c00:	rsb	r3, r2, #1
    9c04:	add	r3, r0
    9c06:	add	r3, r1
    9c08:	cmp	r3, #0
    9c0a:	bgt.n	9bfc <dtostrf+0x2c8>
    9c0c:	bic.w	r3, r0, r0, asr #31
    9c10:	adds	r3, #1
    9c12:	add	r1, r3
    9c14:	b.n	9b0a <dtostrf+0x1d6>
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    9c16:	movs	r4, #73	; 0x49
    9c18:	movs	r0, #78	; 0x4e
    9c1a:	movs	r1, #70	; 0x46
    9c1c:	adds	r2, r3, #3
    9c1e:	strb	r4, [r3, #0]
    9c20:	strb	r0, [r3, #1]
    9c22:	strb	r1, [r3, #2]
    9c24:	b.n	99b2 <dtostrf+0x7e>
    9c26:	mov	r3, r4
    9c28:	b.n	99ea <dtostrf+0xb6>

	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
    9c2a:	cmp	r0, #0
    9c2c:	blt.n	9c60 <dtostrf+0x32c>
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    9c2e:	movs	r3, #0
    9c30:	b.n	9bba <dtostrf+0x286>
    9c32:	mov	r2, r4
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    9c34:	movs	r1, #45	; 0x2d
    9c36:	adds	r4, r2, #1
    9c38:	strb	r1, [r2, #0]
    9c3a:	b.n	9bc2 <dtostrf+0x28e>
	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
			while (awidth) {
    9c3c:	cbz	r3, 9c60 <dtostrf+0x32c>
    9c3e:	adds	r2, r4, r3
				*buf++ = ' ';
    9c40:	movs	r3, #32
    9c42:	strb.w	r3, [r4], #1
	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
			while (awidth) {
    9c46:	cmp	r4, r2
    9c48:	bne.n	9c42 <dtostrf+0x30e>
				*buf++ = ' ';
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    9c4a:	vmov	r3, s16
    9c4e:	cmp	r3, #0
    9c50:	blt.n	9c68 <dtostrf+0x334>
		if (DTOA_UPPER) {
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    9c52:	movs	r1, #78	; 0x4e
    9c54:	movs	r0, #65	; 0x41
    9c56:	adds	r3, r2, #3
    9c58:	strb	r1, [r2, #0]
    9c5a:	strb	r1, [r2, #2]
    9c5c:	strb	r0, [r2, #1]
    9c5e:	b.n	9bde <dtostrf+0x2aa>

	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
    9c60:	mov	r2, r4
    9c62:	b.n	9c4a <dtostrf+0x316>
		return buf;
	}
	if (isinff(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
    9c64:	mov	r3, r4
    9c66:	b.n	99dc <dtostrf+0xa8>
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    9c68:	movs	r3, #0
    9c6a:	b.n	9c34 <dtostrf+0x300>
		if (DTOA_UPPER) {
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    9c6c:	mov	r3, r2
    9c6e:	b.n	9bde <dtostrf+0x2aa>
	}

	// add 1 for sign if negative
	if (sign) reqd++;

	p = buf;
    9c70:	mov	r3, r4
    9c72:	b.n	9a94 <dtostrf+0x160>
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    9c74:	mov	r2, r3
    9c76:	b.n	99b2 <dtostrf+0x7e>
    9c78:	.word	0x7f7fffff
    9c7c:	.word	0x20000be0
    9c80:	.word	0x20000cec

00009c84 <Panic_Temp_isr>:
static float s_hot_ROOM, s_roomC_hotC;

extern void unused_interrupt_vector(void); // startup.c

void Panic_Temp_isr(void) {
  unused_interrupt_vector();
    9c84:	b.w	96f4 <unused_interrupt_vector>

00009c88 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    9c88:	ldr	r1, [pc, #72]	; (9cd4 <tempmonGetTemp+0x4c>)
    9c8a:	ldr	r3, [r1, #0]
    9c8c:	ldr	r2, [pc, #68]	; (9cd4 <tempmonGetTemp+0x4c>)
    9c8e:	lsls	r3, r3, #29
    9c90:	bpl.n	9c8a <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    9c92:	ldr	r3, [r2, #0]
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    9c94:	ldr	r1, [pc, #64]	; (9cd8 <tempmonGetTemp+0x50>)

    return tmeas;
    9c96:	ubfx	r3, r3, #8, #12
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    9c9a:	ldr	r2, [pc, #64]	; (9cdc <tempmonGetTemp+0x54>)

    return tmeas;
    9c9c:	vmov	s15, r3
    9ca0:	ldr	r3, [r1, #0]
    9ca2:	vldr	s12, [r2]
    9ca6:	vcvt.f32.s32	s14, s15
    9caa:	vmov	s15, r3
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    9cae:	ldr	r2, [pc, #48]	; (9ce0 <tempmonGetTemp+0x58>)

    return tmeas;
    9cb0:	vcvt.f32.u32	s15, s15
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    9cb4:	ldr	r3, [pc, #44]	; (9ce4 <tempmonGetTemp+0x5c>)

    return tmeas;
    9cb6:	vldr	s13, [r2]
    9cba:	vsub.f32	s15, s14, s15
    9cbe:	vldr	s14, [r3]
    9cc2:	vcvt.f32.u32	s14, s14
    9cc6:	vmul.f32	s15, s15, s12
    9cca:	vdiv.f32	s0, s15, s13
}
    9cce:	vsub.f32	s0, s14, s0
    9cd2:	bx	lr
    9cd4:	.word	0x400d8180
    9cd8:	.word	0x2000c304
    9cdc:	.word	0x2000c30c
    9ce0:	.word	0x2000c310
    9ce4:	.word	0x2000c308

00009ce8 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    9ce8:	cmp	r0, #39	; 0x27
    9cea:	bhi.n	9d26 <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
    9cec:	lsls	r0, r0, #4
    9cee:	ldr	r2, [pc, #104]	; (9d58 <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    9cf0:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    9cf2:	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    9cf6:	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
    9cf8:	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    9cfa:	beq.n	9d28 <pinMode+0x40>
    9cfc:	cmp	r1, #4
    9cfe:	beq.n	9d28 <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    9d00:	ldr	r4, [r3, #12]
    9d02:	ldr	r2, [r0, #4]
    9d04:	bic.w	r2, r2, r4
    9d08:	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    9d0a:	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
    9d0c:	cbz	r1, 9d4a <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
    9d0e:	cmp	r1, #2
    9d10:	beq.n	9d50 <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    9d12:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    9d14:	ldr	r3, [r3, #4]
}
    9d16:	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    9d1a:	ite	eq
    9d1c:	ldreq	r1, [pc, #60]	; (9d5c <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    9d1e:	ldrne	r1, [pc, #64]	; (9d60 <pinMode+0x78>)
    9d20:	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    9d22:	movs	r2, #21
    9d24:	str	r2, [r3, #0]
}
    9d26:	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    9d28:	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
    9d2a:	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    9d2c:	ldr	r4, [r0, #4]
    9d2e:	orr.w	r2, r2, r4
    9d32:	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    9d34:	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
    9d36:	beq.n	9d4a <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    9d38:	movw	r1, #2104	; 0x838
    9d3c:	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    9d3e:	ldr	r3, [r3, #4]
    9d40:	movs	r2, #21
}
    9d42:	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    9d46:	str	r2, [r3, #0]
}
    9d48:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    9d4a:	movs	r1, #56	; 0x38
    9d4c:	str	r1, [r2, #0]
    9d4e:	b.n	9d3e <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    9d50:	ldr	r1, [pc, #16]	; (9d64 <pinMode+0x7c>)
    9d52:	str	r1, [r2, #0]
    9d54:	b.n	9d3e <pinMode+0x56>
    9d56:	nop
    9d58:	.word	0x20000774
    9d5c:	.word	0x00013038
    9d60:	.word	0x00010038
    9d64:	.word	0x0001f038

00009d68 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    9d68:	ldr	r0, [pc, #656]	; (9ffc <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    9d6a:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    9d6e:	ldr	r3, [pc, #656]	; (a000 <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    9d70:	ldr	r2, [r0, #120]	; 0x78
    9d72:	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    9d76:	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    9d78:	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    9d7a:	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    9d7c:	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    9d80:	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    9d84:	ldr	r4, [pc, #636]	; (a004 <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    9d86:	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9d8a:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    9d8c:	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    9d90:	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    9d92:	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    9d94:	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    9d98:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    9d9c:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    9da0:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    9da4:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    9da8:	ldrh.w	r0, [r3, #392]	; 0x188
    9dac:	uxth	r0, r0
    9dae:	orr.w	r0, r0, #240	; 0xf0
    9db2:	strh.w	r0, [r3, #392]	; 0x188
    9db6:	add.w	r0, r1, r1, lsl #1
    9dba:	ldr	r3, [pc, #580]	; (a000 <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    9dbc:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    9dbe:	movs	r5, #0
    9dc0:	lsls	r0, r0, #5
    9dc2:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9dc4:	cmp	r1, #4
    9dc6:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    9dc8:	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    9dcc:	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    9dce:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    9dd0:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    9dd2:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    9dd4:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    9dd6:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    9dd8:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    9dda:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    9ddc:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    9dde:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9de0:	bne.n	9db6 <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9de2:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    9de6:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    9dea:	ldr	r3, [pc, #540]	; (a008 <pwm_init+0x2a0>)
    9dec:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9df0:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9df2:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    9df4:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    9df8:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9dfa:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    9dfe:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9e02:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    9e06:	ldrh.w	r0, [r4, #392]	; 0x188
    9e0a:	uxth	r0, r0
    9e0c:	orr.w	r0, r0, #3840	; 0xf00
    9e10:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    9e14:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    9e18:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    9e1c:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    9e20:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    9e24:	ldrh.w	r0, [r3, #392]	; 0x188
    9e28:	uxth	r0, r0
    9e2a:	orr.w	r0, r0, #240	; 0xf0
    9e2e:	strh.w	r0, [r3, #392]	; 0x188
    9e32:	add.w	r0, r1, r1, lsl #1
    9e36:	ldr	r3, [pc, #464]	; (a008 <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    9e38:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    9e3a:	movs	r5, #0
    9e3c:	lsls	r0, r0, #5
    9e3e:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9e40:	cmp	r1, #4
    9e42:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    9e44:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    9e46:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    9e4a:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    9e4c:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    9e4e:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    9e50:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    9e52:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    9e54:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    9e56:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    9e58:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    9e5a:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9e5c:	bne.n	9e32 <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9e5e:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    9e62:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    9e66:	ldr	r3, [pc, #420]	; (a00c <pwm_init+0x2a4>)
    9e68:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9e6c:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9e6e:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    9e70:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    9e74:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9e76:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    9e7a:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9e7e:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    9e82:	ldrh.w	r0, [r4, #392]	; 0x188
    9e86:	uxth	r0, r0
    9e88:	orr.w	r0, r0, #3840	; 0xf00
    9e8c:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    9e90:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    9e94:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    9e98:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    9e9c:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    9ea0:	ldrh.w	r0, [r3, #392]	; 0x188
    9ea4:	uxth	r0, r0
    9ea6:	orr.w	r0, r0, #240	; 0xf0
    9eaa:	strh.w	r0, [r3, #392]	; 0x188
    9eae:	add.w	r0, r1, r1, lsl #1
    9eb2:	ldr	r3, [pc, #344]	; (a00c <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    9eb4:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    9eb6:	movs	r5, #0
    9eb8:	lsls	r0, r0, #5
    9eba:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9ebc:	cmp	r1, #4
    9ebe:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    9ec0:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    9ec2:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    9ec6:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    9ec8:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    9eca:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    9ecc:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    9ece:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    9ed0:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    9ed2:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    9ed4:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    9ed6:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9ed8:	bne.n	9eae <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9eda:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    9ede:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    9ee2:	ldr	r3, [pc, #300]	; (a010 <pwm_init+0x2a8>)
    9ee4:	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9ee8:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9eea:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    9eec:	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    9ef0:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9ef2:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    9ef6:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9efa:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    9efe:	ldrh.w	r0, [r4, #392]	; 0x188
    9f02:	uxth	r0, r0
    9f04:	orr.w	r0, r0, #3840	; 0xf00
    9f08:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    9f0c:	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    9f10:	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    9f14:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    9f18:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    9f1c:	ldrh.w	r0, [r3, #392]	; 0x188
    9f20:	uxth	r0, r0
    9f22:	orr.w	r0, r0, #240	; 0xf0
    9f26:	strh.w	r0, [r3, #392]	; 0x188
    9f2a:	add.w	r0, r1, r1, lsl #1
    9f2e:	ldr	r3, [pc, #224]	; (a010 <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    9f30:	adds	r1, #1
    9f32:	lsls	r0, r0, #5
    9f34:	mov	r4, r3
    9f36:	cmp	r1, #4
    9f38:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    9f3a:	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    9f3c:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    9f40:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    9f42:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    9f44:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    9f46:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    9f48:	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    9f4a:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    9f4c:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    9f4e:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    9f50:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9f52:	bne.n	9f2a <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9f54:	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9f58:	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9f5a:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    9f5c:	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9f60:	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    9f62:	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    9f66:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    9f68:	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9f6c:	orrs	r3, r7
    9f6e:	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    9f72:	ldrh.w	r3, [r4, #392]	; 0x188
    9f76:	uxth	r3, r3
    9f78:	orr.w	r3, r3, #3840	; 0xf00
    9f7c:	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    9f80:	lsls	r0, r2, #5
    9f82:	ldr	r3, [pc, #144]	; (a014 <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9f84:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    9f86:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9f88:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    9f8a:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    9f8c:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9f8e:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    9f90:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    9f92:	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    9f96:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    9f98:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    9f9a:	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9f9c:	bne.n	9f80 <pwm_init+0x218>
    9f9e:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9fa0:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    9fa2:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    9fa6:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    9faa:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    9fac:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    9fb0:	lsls	r0, r2, #5
    9fb2:	ldr	r3, [pc, #100]	; (a018 <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9fb4:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    9fb6:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9fb8:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    9fba:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    9fbc:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9fbe:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    9fc0:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    9fc2:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    9fc4:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    9fc6:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    9fc8:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9fca:	bne.n	9fb0 <pwm_init+0x248>
    9fcc:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9fce:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    9fd0:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    9fd4:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    9fd8:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    9fda:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    9fde:	lsls	r0, r2, #5
    9fe0:	ldr	r3, [pc, #56]	; (a01c <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9fe2:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    9fe4:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9fe6:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    9fe8:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    9fea:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9fec:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    9fee:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    9ff0:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    9ff2:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    9ff4:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    9ff6:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9ff8:	bne.n	9fde <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    9ffa:	pop	{r4, r5, r6, r7, pc}
    9ffc:	.word	0x400fc000
    a000:	.word	0x403dc000
    a004:	.word	0xfc030000
    a008:	.word	0x403e0000
    a00c:	.word	0x403e4000
    a010:	.word	0x403e8000
    a014:	.word	0x401dc000
    a018:	.word	0x401e0000
    a01c:	.word	0x401e4000

0000a020 <txEvent_event>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);
extern volatile uint8_t usb_configuration;

uint32_t mtp_txEventCount = 0;
static void txEvent_event(transfer_t *t) { mtp_txEventCount++;}
    a020:	ldr	r2, [pc, #8]	; (a02c <txEvent_event+0xc>)
    a022:	ldr	r3, [r2, #0]
    a024:	adds	r3, #1
    a026:	str	r3, [r2, #0]
    a028:	bx	lr
    a02a:	nop
    a02c:	.word	0x2000c2a8

0000a030 <rx_event>:
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

static void rx_event(transfer_t *t)
{
    a030:	push	{r4, r5, r6, r7}
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
    a032:	ldr	r4, [pc, #48]	; (a064 <rx_event+0x34>)
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

static void rx_event(transfer_t *t)
{
	int i = t->callback_param;
    a034:	ldr	r7, [r0, #28]
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
    a036:	ldrb	r3, [r4, #0]
	if (++head > RX_NUM) head = 0;
    a038:	adds	r3, #1
    a03a:	cmp	r3, #4
    a03c:	bls.n	a05e <rx_event+0x2e>
    a03e:	movs	r5, #0
    a040:	mov	r3, r5
	rx_list[head] = i;
	// remember how many bytes were actually sent by host...
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    a042:	ldr	r2, [r0, #4]
    a044:	ldr	r6, [pc, #32]	; (a068 <rx_event+0x38>)
	rx_list_transfer_len[head] = len;
    a046:	ubfx	r1, r2, #16, #15
    a04a:	ldr	r0, [pc, #32]	; (a06c <rx_event+0x3c>)
    a04c:	ldrh	r2, [r6, #0]
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
	if (++head > RX_NUM) head = 0;
	rx_list[head] = i;
    a04e:	ldr	r6, [pc, #32]	; (a070 <rx_event+0x40>)
	// remember how many bytes were actually sent by host...
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	rx_list_transfer_len[head] = len;
    a050:	subs	r2, r2, r1
	rx_head = head;
    a052:	strb	r5, [r4, #0]
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
	if (++head > RX_NUM) head = 0;
	rx_list[head] = i;
    a054:	strb	r7, [r6, r3]
	// remember how many bytes were actually sent by host...
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	rx_list_transfer_len[head] = len;
    a056:	str.w	r2, [r0, r3, lsl #2]
	rx_head = head;
}
    a05a:	pop	{r4, r5, r6, r7}
    a05c:	bx	lr
    a05e:	uxtb	r5, r3
    a060:	b.n	a042 <rx_event+0x12>
    a062:	nop
    a064:	.word	0x2000ed9c
    a068:	.word	0x2000ed8e
    a06c:	.word	0x2000c2f0
    a070:	.word	0x2000c2e8

0000a074 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    a074:	push	{r3, r4, r5, r6, r7, lr}
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
    a076:	ldr	r1, [pc, #76]	; (a0c4 <rx_queue_transfer+0x50>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    a078:	mov	r3, r0
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
	arm_dcache_delete(buffer, rx_packet_size);
    a07a:	ldr	r6, [pc, #76]	; (a0c8 <rx_queue_transfer+0x54>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
    a07c:	add.w	r1, r1, r0, lsl #9
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    a080:	ldrh	r4, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    a082:	bic.w	r2, r1, #31
	uint32_t end_addr = (uint32_t)addr + size;
    a086:	add	r4, r1
	asm volatile("": : :"memory");
	asm("dsb");
    a088:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    a08c:	ldr	r5, [pc, #60]	; (a0cc <rx_queue_transfer+0x58>)
    a08e:	str	r2, [r5, #0]
		location += 32;
    a090:	adds	r2, #32
	} while (location < end_addr);
    a092:	cmp	r4, r2
    a094:	bhi.n	a08e <rx_queue_transfer+0x1a>
	asm("dsb");
    a096:	dsb	sy
	asm("isb");
    a09a:	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	//memset(buffer, )
	NVIC_DISABLE_IRQ(IRQ_USB1);
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    a09e:	ldr	r4, [pc, #48]	; (a0d0 <rx_queue_transfer+0x5c>)
static void rx_queue_transfer(int i)
{
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
	arm_dcache_delete(buffer, rx_packet_size);
	//memset(buffer, )
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a0a0:	mov.w	r5, #131072	; 0x20000
    a0a4:	ldr	r7, [pc, #44]	; (a0d4 <rx_queue_transfer+0x60>)
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    a0a6:	add.w	r4, r4, r3, lsl #5
    a0aa:	ldrh	r2, [r6, #0]
static void rx_queue_transfer(int i)
{
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
	arm_dcache_delete(buffer, rx_packet_size);
	//memset(buffer, )
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a0ac:	str	r5, [r7, #0]
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    a0ae:	mov	r0, r4
    a0b0:	bl	9520 <usb_prepare_transfer>
	NVIC_DISABLE_IRQ(IRQ_USB1);
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
    a0b4:	mov	r1, r4
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
	arm_dcache_delete(buffer, rx_packet_size);
	//memset(buffer, )
	NVIC_DISABLE_IRQ(IRQ_USB1);
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a0b6:	str	r5, [r7, #0]
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
    a0b8:	movs	r0, #4
    a0ba:	bl	9578 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    a0be:	ldr	r3, [pc, #24]	; (a0d8 <rx_queue_transfer+0x64>)
    a0c0:	str	r5, [r3, #0]
    a0c2:	pop	{r3, r4, r5, r6, r7, pc}
    a0c4:	.word	0x20203000
    a0c8:	.word	0x2000ed8e
    a0cc:	.word	0xe000ef5c
    a0d0:	.word	0x20004000
    a0d4:	.word	0xe000e18c
    a0d8:	.word	0xe000e10c

0000a0dc <usb_mtp_configure>:
//  usb_mtp_status.  If it is equal to 0x19, the file in use must be closed and
//  any required cleanup performed.  When ready for more transfers, set to 0x01.
volatile uint8_t usb_mtp_status = 0x01;

void usb_mtp_configure(void)
{
    a0dc:	push	{r3, r4, r5, r6, r7, lr}
	if (usb_high_speed) {
    a0de:	ldr	r3, [pc, #132]	; (a164 <usb_mtp_configure+0x88>)
    a0e0:	ldrb	r3, [r3, #0]
    a0e2:	cmp	r3, #0
    a0e4:	beq.n	a156 <usb_mtp_configure+0x7a>
		tx_packet_size = MTP_TX_SIZE_480;
    a0e6:	mov.w	r3, #512	; 0x200
    a0ea:	ldr	r2, [pc, #124]	; (a168 <usb_mtp_configure+0x8c>)
		rx_packet_size = MTP_RX_SIZE_480;
    a0ec:	ldr	r5, [pc, #124]	; (a16c <usb_mtp_configure+0x90>)
    a0ee:	mov	r6, r3
volatile uint8_t usb_mtp_status = 0x01;

void usb_mtp_configure(void)
{
	if (usb_high_speed) {
		tx_packet_size = MTP_TX_SIZE_480;
    a0f0:	strh	r3, [r2, #0]
		rx_packet_size = MTP_RX_SIZE_480;
    a0f2:	strh	r3, [r5, #0]
	} else {
		tx_packet_size = MTP_TX_SIZE_12;
		rx_packet_size = MTP_RX_SIZE_12;
	}
	printf("usb_mtp_configure: TX:%u RX:%u\n", tx_packet_size, rx_packet_size);
	memset(tx_transfer, 0, sizeof(tx_transfer));
    a0f4:	movs	r1, #0
    a0f6:	movs	r2, #128	; 0x80
    a0f8:	ldr	r0, [pc, #116]	; (a170 <usb_mtp_configure+0x94>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
	tx_head = 0;
    a0fa:	mov	r4, r1
	} else {
		tx_packet_size = MTP_TX_SIZE_12;
		rx_packet_size = MTP_RX_SIZE_12;
	}
	printf("usb_mtp_configure: TX:%u RX:%u\n", tx_packet_size, rx_packet_size);
	memset(tx_transfer, 0, sizeof(tx_transfer));
    a0fc:	bl	bc44 <memset>
	memset(rx_transfer, 0, sizeof(rx_transfer));
    a100:	movs	r2, #128	; 0x80
    a102:	ldr	r0, [pc, #112]	; (a174 <usb_mtp_configure+0x98>)
    a104:	mov	r1, r4
	tx_head = 0;
    a106:	ldr	r7, [pc, #112]	; (a178 <usb_mtp_configure+0x9c>)
		tx_packet_size = MTP_TX_SIZE_12;
		rx_packet_size = MTP_RX_SIZE_12;
	}
	printf("usb_mtp_configure: TX:%u RX:%u\n", tx_packet_size, rx_packet_size);
	memset(tx_transfer, 0, sizeof(tx_transfer));
	memset(rx_transfer, 0, sizeof(rx_transfer));
    a108:	bl	bc44 <memset>
	tx_head = 0;
	rx_head = 0;
    a10c:	ldr	r0, [pc, #108]	; (a17c <usb_mtp_configure+0xa0>)
	rx_tail = 0;
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    a10e:	mov	r1, r6
	printf("usb_mtp_configure: TX:%u RX:%u\n", tx_packet_size, rx_packet_size);
	memset(tx_transfer, 0, sizeof(tx_transfer));
	memset(rx_transfer, 0, sizeof(rx_transfer));
	tx_head = 0;
	rx_head = 0;
	rx_tail = 0;
    a110:	ldr	r6, [pc, #108]	; (a180 <usb_mtp_configure+0xa4>)
	}
	printf("usb_mtp_configure: TX:%u RX:%u\n", tx_packet_size, rx_packet_size);
	memset(tx_transfer, 0, sizeof(tx_transfer));
	memset(rx_transfer, 0, sizeof(rx_transfer));
	tx_head = 0;
	rx_head = 0;
    a112:	strb	r4, [r0, #0]
	rx_tail = 0;
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    a114:	mov	r3, r4
    a116:	mov	r2, r4
    a118:	movs	r0, #4
		rx_packet_size = MTP_RX_SIZE_12;
	}
	printf("usb_mtp_configure: TX:%u RX:%u\n", tx_packet_size, rx_packet_size);
	memset(tx_transfer, 0, sizeof(tx_transfer));
	memset(rx_transfer, 0, sizeof(rx_transfer));
	tx_head = 0;
    a11a:	strb	r4, [r7, #0]
	rx_head = 0;
	rx_tail = 0;
    a11c:	strb	r4, [r6, #0]
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    a11e:	bl	94b8 <usb_config_tx>
	usb_config_rx(MTP_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    a122:	ldrh	r1, [r5, #0]
    a124:	mov	r2, r4
    a126:	ldr	r3, [pc, #92]	; (a184 <usb_mtp_configure+0xa8>)
    a128:	movs	r0, #4
    a12a:	bl	9454 <usb_config_rx>
	usb_config_tx(MTP_EVENT_ENDPOINT, MTP_EVENT_SIZE, 0, txEvent_event);
    a12e:	mov	r2, r4
    a130:	ldr	r3, [pc, #84]	; (a188 <usb_mtp_configure+0xac>)
    a132:	movs	r1, #32
    a134:	movs	r0, #5
    a136:	bl	94b8 <usb_config_tx>
	int i;
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    a13a:	mov	r0, r4
    a13c:	bl	a074 <rx_queue_transfer>
    a140:	movs	r0, #1
    a142:	bl	a074 <rx_queue_transfer>
    a146:	movs	r0, #2
    a148:	bl	a074 <rx_queue_transfer>
    a14c:	movs	r0, #3
}
    a14e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	rx_tail = 0;
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
	usb_config_rx(MTP_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(MTP_EVENT_ENDPOINT, MTP_EVENT_SIZE, 0, txEvent_event);
	int i;
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    a152:	b.w	a074 <rx_queue_transfer>
{
	if (usb_high_speed) {
		tx_packet_size = MTP_TX_SIZE_480;
		rx_packet_size = MTP_RX_SIZE_480;
	} else {
		tx_packet_size = MTP_TX_SIZE_12;
    a156:	movs	r3, #64	; 0x40
    a158:	ldr	r2, [pc, #12]	; (a168 <usb_mtp_configure+0x8c>)
		rx_packet_size = MTP_RX_SIZE_12;
    a15a:	ldr	r5, [pc, #16]	; (a16c <usb_mtp_configure+0x90>)
    a15c:	mov	r6, r3
{
	if (usb_high_speed) {
		tx_packet_size = MTP_TX_SIZE_480;
		rx_packet_size = MTP_RX_SIZE_480;
	} else {
		tx_packet_size = MTP_TX_SIZE_12;
    a15e:	strh	r3, [r2, #0]
		rx_packet_size = MTP_RX_SIZE_12;
    a160:	strh	r3, [r5, #0]
    a162:	b.n	a0f4 <usb_mtp_configure+0x18>
    a164:	.word	0x2000eda6
    a168:	.word	0x2000ed94
    a16c:	.word	0x2000ed8e
    a170:	.word	0x20004100
    a174:	.word	0x20004000
    a178:	.word	0x2000eda2
    a17c:	.word	0x2000ed9c
    a180:	.word	0x2000ed9e
    a184:	.word	0x0000a031
    a188:	.word	0x0000a021

0000a18c <usb_mtp_recv>:
	rx_head = head;
}


int usb_mtp_recv(void *buffer, uint32_t timeout)
{
    a18c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t wait_begin_at = systick_millis_count;
    a190:	ldr	r6, [pc, #144]	; (a224 <usb_mtp_recv+0x98>)
	uint32_t tail = rx_tail;
    a192:	ldr.w	fp, [pc, #164]	; a238 <usb_mtp_recv+0xac>
	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    a196:	ldr	r7, [pc, #144]	; (a228 <usb_mtp_recv+0x9c>)
}


int usb_mtp_recv(void *buffer, uint32_t timeout)
{
	uint32_t wait_begin_at = systick_millis_count;
    a198:	ldr.w	r9, [r6]
	uint32_t tail = rx_tail;
    a19c:	ldrb.w	r4, [fp]
	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    a1a0:	ldrb	r3, [r7, #0]
    a1a2:	cbz	r3, a1de <usb_mtp_recv+0x52>
		if (tail != rx_head) break;
    a1a4:	ldr.w	r8, [pc, #148]	; a23c <usb_mtp_recv+0xb0>
    a1a8:	uxtb	r4, r4
    a1aa:	mov	r5, r1
    a1ac:	mov	sl, r0
    a1ae:	ldrb.w	r3, [r8]
    a1b2:	cmp	r4, r3
    a1b4:	bne.n	a1e6 <usb_mtp_recv+0x5a>
		if (systick_millis_count - wait_begin_at > timeout)  {
    a1b6:	ldr	r3, [r6, #0]
    a1b8:	rsb	r3, r9, r3
    a1bc:	cmp	r1, r3
    a1be:	bcs.n	a1d4 <usb_mtp_recv+0x48>
    a1c0:	b.n	a216 <usb_mtp_recv+0x8a>
{
	uint32_t wait_begin_at = systick_millis_count;
	uint32_t tail = rx_tail;
	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
		if (tail != rx_head) break;
    a1c2:	ldrb.w	r3, [r8]
    a1c6:	cmp	r4, r3
    a1c8:	bne.n	a1e6 <usb_mtp_recv+0x5a>
		if (systick_millis_count - wait_begin_at > timeout)  {
    a1ca:	ldr	r3, [r6, #0]
    a1cc:	rsb	r3, r9, r3
    a1d0:	cmp	r3, r5
    a1d2:	bhi.n	a216 <usb_mtp_recv+0x8a>
			return 0;
		}
		yield();
    a1d4:	bl	a394 <yield>
int usb_mtp_recv(void *buffer, uint32_t timeout)
{
	uint32_t wait_begin_at = systick_millis_count;
	uint32_t tail = rx_tail;
	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    a1d8:	ldrb	r3, [r7, #0]
    a1da:	cmp	r3, #0
    a1dc:	bne.n	a1c2 <usb_mtp_recv+0x36>
    a1de:	mov.w	r0, #4294967295
    a1e2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (systick_millis_count - wait_begin_at > timeout)  {
			return 0;
		}
		yield();
	}
	if (++tail > RX_NUM) tail = 0;
    a1e6:	adds	r4, #1
    a1e8:	cmp	r4, #4
    a1ea:	bhi.n	a21c <usb_mtp_recv+0x90>
    a1ec:	uxtb	r3, r4
	uint32_t i = rx_list[tail];
    a1ee:	ldr	r1, [pc, #60]	; (a22c <usb_mtp_recv+0xa0>)
	int len = rx_list_transfer_len[tail];
	rx_tail = tail;

	uint8_t *rx_item_buffer = rx_buffer + i * MTP_RX_SIZE_480;
	// BUGBUG Should we use the 
	memcpy(buffer,  rx_item_buffer, len);
    a1f0:	mov	r0, sl
		}
		yield();
	}
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	int len = rx_list_transfer_len[tail];
    a1f2:	ldr	r2, [pc, #60]	; (a230 <usb_mtp_recv+0xa4>)
			return 0;
		}
		yield();
	}
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
    a1f4:	ldrb	r5, [r1, r4]
	int len = rx_list_transfer_len[tail];
    a1f6:	ldr.w	r4, [r2, r4, lsl #2]
	rx_tail = tail;

	uint8_t *rx_item_buffer = rx_buffer + i * MTP_RX_SIZE_480;
	// BUGBUG Should we use the 
	memcpy(buffer,  rx_item_buffer, len);
    a1fa:	ldr	r1, [pc, #56]	; (a234 <usb_mtp_recv+0xa8>)
    a1fc:	mov	r2, r4
		yield();
	}
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	int len = rx_list_transfer_len[tail];
	rx_tail = tail;
    a1fe:	strb.w	r3, [fp]

	uint8_t *rx_item_buffer = rx_buffer + i * MTP_RX_SIZE_480;
	// BUGBUG Should we use the 
	memcpy(buffer,  rx_item_buffer, len);
    a202:	add.w	r1, r1, r5, lsl #9
    a206:	bl	83b0 <memcpy>
	rx_queue_transfer(i);
    a20a:	mov	r0, r5
    a20c:	bl	a074 <rx_queue_transfer>
	//memset(rx_transfer, 0, sizeof(rx_transfer));
	//usb_prepare_transfer(rx_transfer + 0, rx_buffer, rx_packet_size, 0);
	//usb_receive(MTP_RX_ENDPOINT, rx_transfer + 0);
	return len;
    a210:	mov	r0, r4
}
    a212:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t tail = rx_tail;
	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
		if (tail != rx_head) break;
		if (systick_millis_count - wait_begin_at > timeout)  {
			return 0;
    a216:	movs	r0, #0
    a218:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a21c:	movs	r3, #0
		}
		yield();
	}
	if (++tail > RX_NUM) tail = 0;
    a21e:	mov	r4, r3
    a220:	b.n	a1ee <usb_mtp_recv+0x62>
    a222:	nop
    a224:	.word	0x2000c320
    a228:	.word	0x2000eda5
    a22c:	.word	0x2000c2e8
    a230:	.word	0x2000c2f0
    a234:	.word	0x20203000
    a238:	.word	0x2000ed9e
    a23c:	.word	0x2000ed9c

0000a240 <usb_mtp_available>:
	return len;
}

int usb_mtp_available(void)
{
	if (!usb_configuration) return 0;
    a240:	ldr	r3, [pc, #28]	; (a260 <usb_mtp_available+0x20>)
    a242:	ldrb	r3, [r3, #0]
    a244:	and.w	r0, r3, #255	; 0xff
    a248:	cbz	r3, a25e <usb_mtp_available+0x1e>
	if (rx_head != rx_tail) return rx_packet_size;
    a24a:	ldr	r2, [pc, #24]	; (a264 <usb_mtp_available+0x24>)
    a24c:	ldr	r3, [pc, #24]	; (a268 <usb_mtp_available+0x28>)
    a24e:	ldrb	r2, [r2, #0]
    a250:	ldrb	r3, [r3, #0]
    a252:	cmp	r2, r3
    a254:	beq.n	a25c <usb_mtp_available+0x1c>
    a256:	ldr	r3, [pc, #20]	; (a26c <usb_mtp_available+0x2c>)
    a258:	ldrh	r0, [r3, #0]
    a25a:	bx	lr
	return len;
}

int usb_mtp_available(void)
{
	if (!usb_configuration) return 0;
    a25c:	movs	r0, #0
	if (rx_head != rx_tail) return rx_packet_size;
	//if (!(usb_transfer_status(rx_transfer) & 0x80)) return MTP_RX_SIZE;
	return 0;
}
    a25e:	bx	lr
    a260:	.word	0x2000eda5
    a264:	.word	0x2000ed9c
    a268:	.word	0x2000ed9e
    a26c:	.word	0x2000ed8e

0000a270 <usb_mtp_send>:

/*************************************************************************/
/**                             Send                                    **/
/*************************************************************************/
int usb_mtp_send(const void *buffer, uint32_t len, uint32_t timeout)
{
    a270:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	transfer_t *xfer = tx_transfer + tx_head;
    a274:	ldr.w	sl, [pc, #192]	; a338 <usb_mtp_send+0xc8>

/*************************************************************************/
/**                             Send                                    **/
/*************************************************************************/
int usb_mtp_send(const void *buffer, uint32_t len, uint32_t timeout)
{
    a278:	mov	r8, r2
	transfer_t *xfer = tx_transfer + tx_head;
	uint32_t wait_begin_at = systick_millis_count;
    a27a:	ldr	r5, [pc, #164]	; (a320 <usb_mtp_send+0xb0>)

	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    a27c:	ldr	r6, [pc, #164]	; (a324 <usb_mtp_send+0xb4>)
/*************************************************************************/
/**                             Send                                    **/
/*************************************************************************/
int usb_mtp_send(const void *buffer, uint32_t len, uint32_t timeout)
{
	transfer_t *xfer = tx_transfer + tx_head;
    a27e:	ldrb.w	r4, [sl]
    a282:	ldr	r2, [pc, #164]	; (a328 <usb_mtp_send+0xb8>)
	uint32_t wait_begin_at = systick_millis_count;
    a284:	ldr	r7, [r5, #0]

	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    a286:	ldrb	r3, [r6, #0]
/*************************************************************************/
/**                             Send                                    **/
/*************************************************************************/
int usb_mtp_send(const void *buffer, uint32_t len, uint32_t timeout)
{
	transfer_t *xfer = tx_transfer + tx_head;
    a288:	add.w	r4, r2, r4, lsl #5
	uint32_t wait_begin_at = systick_millis_count;

	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    a28c:	cmp	r3, #0
    a28e:	beq.n	a310 <usb_mtp_send+0xa0>
    a290:	mov	fp, r0
    a292:	mov	r9, r1
    a294:	b.n	a2a6 <usb_mtp_send+0x36>
		uint32_t status = usb_transfer_status(xfer);
		if (!(status & 0x80)) break; // transfer descriptor ready
		if (systick_millis_count - wait_begin_at > timeout) return 0;
    a296:	ldr	r3, [r5, #0]
    a298:	subs	r3, r3, r7
    a29a:	cmp	r3, r8
    a29c:	bhi.n	a318 <usb_mtp_send+0xa8>
		yield();
    a29e:	bl	a394 <yield>
{
	transfer_t *xfer = tx_transfer + tx_head;
	uint32_t wait_begin_at = systick_millis_count;

	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    a2a2:	ldrb	r3, [r6, #0]
    a2a4:	cbz	r3, a310 <usb_mtp_send+0xa0>
		uint32_t status = usb_transfer_status(xfer);
    a2a6:	mov	r0, r4
    a2a8:	bl	959c <usb_transfer_status>
		if (!(status & 0x80)) break; // transfer descriptor ready
    a2ac:	lsls	r3, r0, #24
    a2ae:	bmi.n	a296 <usb_mtp_send+0x26>
		if (systick_millis_count - wait_begin_at > timeout) return 0;
		yield();
	}
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    a2b0:	ldr	r3, [pc, #120]	; (a32c <usb_mtp_send+0xbc>)
	memcpy(txdata, buffer, len);
    a2b2:	mov	r2, r9
		uint32_t status = usb_transfer_status(xfer);
		if (!(status & 0x80)) break; // transfer descriptor ready
		if (systick_millis_count - wait_begin_at > timeout) return 0;
		yield();
	}
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    a2b4:	ldrb.w	r5, [sl]
	memcpy(txdata, buffer, len);
    a2b8:	mov	r1, fp
		uint32_t status = usb_transfer_status(xfer);
		if (!(status & 0x80)) break; // transfer descriptor ready
		if (systick_millis_count - wait_begin_at > timeout) return 0;
		yield();
	}
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    a2ba:	add.w	r5, r3, r5, lsl #9
	memcpy(txdata, buffer, len);
    a2be:	mov	r0, r5
    a2c0:	bl	83b0 <memcpy>
	arm_dcache_flush_delete(txdata, tx_packet_size );
    a2c4:	ldr	r2, [pc, #104]	; (a330 <usb_mtp_send+0xc0>)
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    a2c6:	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    a2ca:	ldrh	r2, [r2, #0]
    a2cc:	add	r2, r5
	asm volatile("": : :"memory");
	asm("dsb");
    a2ce:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    a2d2:	ldr	r1, [pc, #96]	; (a334 <usb_mtp_send+0xc4>)
    a2d4:	str	r3, [r1, #0]
		location += 32;
    a2d6:	adds	r3, #32
	} while (location < end_addr);
    a2d8:	cmp	r2, r3
    a2da:	bhi.n	a2d4 <usb_mtp_send+0x64>
	asm("dsb");
    a2dc:	dsb	sy
	asm("isb");
    a2e0:	isb	sy
	usb_prepare_transfer(xfer, txdata, len, 0);
    a2e4:	movs	r3, #0
    a2e6:	mov	r2, r9
    a2e8:	mov	r1, r5
    a2ea:	mov	r0, r4
    a2ec:	bl	9520 <usb_prepare_transfer>
	usb_transmit(MTP_TX_ENDPOINT, xfer);
    a2f0:	mov	r1, r4
    a2f2:	movs	r0, #4
    a2f4:	bl	9550 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    a2f8:	ldrb.w	r3, [sl]
    a2fc:	ldr	r2, [pc, #56]	; (a338 <usb_mtp_send+0xc8>)
	return len;
    a2fe:	mov	r0, r9
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
	memcpy(txdata, buffer, len);
	arm_dcache_flush_delete(txdata, tx_packet_size );
	usb_prepare_transfer(xfer, txdata, len, 0);
	usb_transmit(MTP_TX_ENDPOINT, xfer);
	if (++tx_head >= TX_NUM) tx_head = 0;
    a300:	adds	r3, #1
    a302:	uxtb	r3, r3
    a304:	cmp	r3, #3
    a306:	it	hi
    a308:	movhi	r3, #0
    a30a:	strb	r3, [r2, #0]
	return len;
    a30c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	transfer_t *xfer = tx_transfer + tx_head;
	uint32_t wait_begin_at = systick_millis_count;

	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    a310:	mov.w	r0, #4294967295
    a314:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint32_t status = usb_transfer_status(xfer);
		if (!(status & 0x80)) break; // transfer descriptor ready
		if (systick_millis_count - wait_begin_at > timeout) return 0;
    a318:	movs	r0, #0
	arm_dcache_flush_delete(txdata, tx_packet_size );
	usb_prepare_transfer(xfer, txdata, len, 0);
	usb_transmit(MTP_TX_ENDPOINT, xfer);
	if (++tx_head >= TX_NUM) tx_head = 0;
	return len;
}
    a31a:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a31e:	nop
    a320:	.word	0x2000c320
    a324:	.word	0x2000eda5
    a328:	.word	0x20004100
    a32c:	.word	0x20203800
    a330:	.word	0x2000ed94
    a334:	.word	0xe000ef70
    a338:	.word	0x2000eda2

0000a33c <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    a33c:	ldr	r2, [pc, #72]	; (a388 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    a33e:	ldr	r3, [pc, #76]	; (a38c <usb_init_serialnumber+0x50>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    a340:	ldr.w	r0, [r2, #544]	; 0x220
    a344:	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    a348:	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    a34a:	push	{r4, lr}
    a34c:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    a34e:	bhi.n	a356 <usb_init_serialnumber+0x1a>
    a350:	add.w	r0, r0, r0, lsl #2
    a354:	lsls	r0, r0, #1
    a356:	ldr	r4, [pc, #56]	; (a390 <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    a358:	add	r1, sp, #4
    a35a:	movs	r2, #10
    a35c:	bl	98e4 <ultoa>
    a360:	add	r1, sp, #4
	for (i=0; i<10; i++) {
    a362:	movs	r3, #0
    a364:	mov	r0, r4
		char c = buf[i];
    a366:	ldrb.w	r2, [r1], #1
    a36a:	adds	r3, #1
		if (!c) break;
    a36c:	cbz	r2, a37e <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    a36e:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    a370:	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    a374:	bne.n	a366 <usb_init_serialnumber+0x2a>
    a376:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    a378:	strb	r3, [r4, #0]
}
    a37a:	add	sp, #16
    a37c:	pop	{r4, pc}
    a37e:	lsls	r3, r3, #1
    a380:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    a382:	strb	r3, [r4, #0]
}
    a384:	add	sp, #16
    a386:	pop	{r4, pc}
    a388:	.word	0x401f4400
    a38c:	.word	0x0098967f
    a390:	.word	0x200017dc

0000a394 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    a394:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    a398:	ldr	r6, [pc, #200]	; (a464 <yield+0xd0>)
    a39a:	ldrb	r3, [r6, #0]
    a39c:	cbz	r3, a3c4 <yield+0x30>
	if (running) return; // TODO: does this need to be atomic?
    a39e:	ldr	r7, [pc, #200]	; (a468 <yield+0xd4>)
    a3a0:	ldrb	r2, [r7, #0]
    a3a2:	cbnz	r2, a3c4 <yield+0x30>
	running = 1;
    a3a4:	movs	r2, #1


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    a3a6:	lsls	r1, r3, #31
void yield(void)
{
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    a3a8:	strb	r2, [r7, #0]


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    a3aa:	bmi.n	a41c <yield+0x88>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    a3ac:	lsls	r2, r3, #30
    a3ae:	bmi.n	a3e4 <yield+0x50>

	running = 0;
    a3b0:	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    a3b2:	lsls	r3, r3, #29
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();

	running = 0;
    a3b4:	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    a3b6:	bpl.n	a3c4 <yield+0x30>
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    a3b8:	ldr	r3, [pc, #176]	; (a46c <yield+0xd8>)
    a3ba:	ldr	r2, [r3, #0]
    a3bc:	cbz	r2, a3c4 <yield+0x30>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    a3be:	mrs	r2, IPSR
		if (ipsr != 0) return;
    a3c2:	cbz	r2, a3c8 <yield+0x34>
    a3c4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a3c8:	mrs	r0, PRIMASK
		__disable_irq();
    a3cc:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    a3ce:	ldr	r2, [r3, #0]
		if (first == nullptr) {
    a3d0:	cbz	r2, a3da <yield+0x46>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    a3d2:	ldr	r4, [pc, #156]	; (a470 <yield+0xdc>)
    a3d4:	ldrb	r1, [r4, #0]
    a3d6:	cmp	r1, #0
    a3d8:	beq.n	a43a <yield+0xa6>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a3da:	cmp	r0, #0
    a3dc:	bne.n	a3c4 <yield+0x30>
    a3de:	cpsie	i
    a3e0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    a3e4:	ldr.w	r8, [pc, #148]	; a47c <yield+0xe8>
    a3e8:	ldrb.w	r2, [r8]
    a3ec:	cmp	r2, #0
    a3ee:	beq.n	a3b0 <yield+0x1c>
    a3f0:	movs	r4, #0
    a3f2:	ldr.w	r9, [pc, #140]	; a480 <yield+0xec>
    a3f6:	b.n	a404 <yield+0x70>
    a3f8:	adds	r4, #1
    a3fa:	ldrb.w	r3, [r8]
    a3fe:	uxtb	r4, r4
    a400:	cmp	r3, r4
    a402:	bls.n	a42c <yield+0x98>
			s_serials_with_serial_events[i]->doYieldCode();
    a404:	ldr.w	r5, [r9, r4, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    a408:	ldr	r3, [r5, #0]
    a40a:	mov	r0, r5
    a40c:	ldr	r3, [r3, #16]
    a40e:	blx	r3
    a410:	cmp	r0, #0
    a412:	beq.n	a3f8 <yield+0x64>
    a414:	ldr	r3, [r5, #20]
    a416:	ldr	r3, [r3, #8]
    a418:	blx	r3
    a41a:	b.n	a3f8 <yield+0x64>
			}
			yield();
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    a41c:	bl	8a6c <usb_serial_available>
	running = 1;


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    a420:	cbnz	r0, a458 <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    a422:	ldr	r3, [pc, #80]	; (a474 <yield+0xe0>)
    a424:	ldrb	r3, [r3, #0]
    a426:	cbnz	r3, a430 <yield+0x9c>
    a428:	ldrb	r3, [r6, #0]
    a42a:	b.n	a3ac <yield+0x18>
    a42c:	ldrb	r3, [r6, #0]
    a42e:	b.n	a3b0 <yield+0x1c>
    a430:	ldrb	r3, [r6, #0]
    a432:	and.w	r3, r3, #254	; 0xfe
    a436:	strb	r3, [r6, #0]
    a438:	b.n	a3ac <yield+0x18>
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    a43a:	movs	r6, #1
		firstYield = first->_next;
    a43c:	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    a43e:	strb	r6, [r4, #0]
		firstYield = first->_next;
    a440:	str	r5, [r3, #0]
		if (firstYield) {
    a442:	cbz	r5, a45e <yield+0xca>
			firstYield->_prev = nullptr;
    a444:	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a446:	cbnz	r0, a44a <yield+0xb6>
    a448:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    a44a:	movs	r5, #0
		(*(first->_function))(*first);
    a44c:	ldr	r3, [r2, #8]
    a44e:	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    a450:	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    a452:	blx	r3
		runningFromYield = false;
    a454:	strb	r5, [r4, #0]
    a456:	b.n	a3c4 <yield+0x30>
	running = 1;


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    a458:	bl	a6b0 <serialEvent()>
    a45c:	b.n	a422 <yield+0x8e>
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    a45e:	ldr	r3, [pc, #24]	; (a478 <yield+0xe4>)
    a460:	str	r5, [r3, #0]
    a462:	b.n	a446 <yield+0xb2>
    a464:	.word	0x200017fd
    a468:	.word	0x2000ed99
    a46c:	.word	0x200041d8
    a470:	.word	0x2000ed97
    a474:	.word	0x60001be2
    a478:	.word	0x200041e4
    a47c:	.word	0x2000ed98
    a480:	.word	0x200041e8

0000a484 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    a484:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a486:	mrs	r1, PRIMASK
		__disable_irq();
    a48a:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    a48c:	ldr	r4, [pc, #48]	; (a4c0 <EventResponder::runFromInterrupt()+0x3c>)
    a48e:	ldr	r3, [r4, #0]
		if (first) {
    a490:	cbz	r3, a4b6 <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    a492:	ldr	r6, [pc, #48]	; (a4c4 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    a494:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    a496:	ldr	r2, [r3, #20]
    a498:	str	r2, [r4, #0]
			if (firstInterrupt) {
    a49a:	cbz	r2, a4bc <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    a49c:	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a49e:	cbnz	r1, a4a2 <EventResponder::runFromInterrupt()+0x1e>
    a4a0:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    a4a2:	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    a4a4:	mov	r0, r3
    a4a6:	ldr	r3, [r3, #8]
    a4a8:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a4aa:	mrs	r1, PRIMASK
		__disable_irq();
    a4ae:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    a4b0:	ldr	r3, [r4, #0]
		if (first) {
    a4b2:	cmp	r3, #0
    a4b4:	bne.n	a496 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a4b6:	cbnz	r1, a4ba <EventResponder::runFromInterrupt()+0x36>
    a4b8:	cpsie	i
    a4ba:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    a4bc:	str	r2, [r6, #0]
    a4be:	b.n	a49e <EventResponder::runFromInterrupt()+0x1a>
    a4c0:	.word	0x200041e0
    a4c4:	.word	0x200041dc

0000a4c8 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    a4c8:	b.w	a484 <EventResponder::runFromInterrupt()>

0000a4cc <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    a4cc:	ldr	r2, [pc, #16]	; (a4e0 <systick_isr+0x14>)
    a4ce:	ldr	r3, [pc, #20]	; (a4e4 <systick_isr+0x18>)
    a4d0:	ldr	r1, [r2, #0]
	systick_millis_count++;
    a4d2:	ldr	r2, [pc, #20]	; (a4e8 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    a4d4:	str	r1, [r3, #0]
	systick_millis_count++;
    a4d6:	ldr	r3, [r2, #0]
    a4d8:	adds	r3, #1
    a4da:	str	r3, [r2, #0]
    a4dc:	bx	lr
    a4de:	nop
    a4e0:	.word	0xe0001004
    a4e4:	.word	0x2000c31c
    a4e8:	.word	0x2000c320

0000a4ec <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    a4ec:	b.w	8a80 <usb_serial_flush_input>

0000a4f0 <usb_serial_class::peek()>:
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    a4f0:	b.w	8a28 <usb_serial_peekchar>

0000a4f4 <usb_serial_class::read()>:
			yield();
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    a4f4:	b.w	8af4 <usb_serial_getchar>

0000a4f8 <usb_serial_class::available()>:
			}
			yield();
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    a4f8:	b.w	8a6c <usb_serial_available>

0000a4fc <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    a4fc:	b.w	8ba8 <usb_serial_flush_output>

0000a500 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    a500:	b.w	8b58 <usb_serial_write_buffer_free>

0000a504 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    a504:	mov	r0, r1
    a506:	mov	r1, r2
    a508:	b.w	8b40 <usb_serial_write>

0000a50c <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    a50c:	mov	r0, r1
    a50e:	b.w	8b14 <usb_serial_putchar>
    a512:	nop

0000a514 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    a514:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    a516:	bl	100 <setup>
	while (1) {
		loop();
    a51a:	bl	6234 <loop>
		yield();
    a51e:	bl	a394 <yield>
    a522:	b.n	a51a <main+0x6>

0000a524 <Stream::timedPeek()>:
  return -1;     // -1 indicates timeout
}

// private method to peek stream with timeout
int Stream::timedPeek()
{
    a524:	push	{r4, r5, r6, lr}
    a526:	ldr	r5, [pc, #40]	; (a550 <Stream::timedPeek()+0x2c>)
    a528:	mov	r4, r0
    a52a:	ldr	r6, [r5, #0]
    a52c:	b.n	a53c <Stream::timedPeek()+0x18>
  int c;
  unsigned long startMillis = millis();
  do {
    c = peek();
    if (c >= 0) return c;
    yield();
    a52e:	bl	a394 <yield>
    a532:	ldr	r3, [r5, #0]
// private method to peek stream with timeout
int Stream::timedPeek()
{
  int c;
  unsigned long startMillis = millis();
  do {
    a534:	ldr	r2, [r4, #8]
    a536:	subs	r3, r3, r6
    a538:	cmp	r3, r2
    a53a:	bcs.n	a54a <Stream::timedPeek()+0x26>
    c = peek();
    a53c:	ldr	r3, [r4, #0]
    a53e:	mov	r0, r4
    a540:	ldr	r3, [r3, #24]
    a542:	blx	r3
    if (c >= 0) return c;
    a544:	cmp	r0, #0
    a546:	blt.n	a52e <Stream::timedPeek()+0xa>
    yield();
  } while(millis() - startMillis < _timeout);
  return -1;     // -1 indicates timeout
}
    a548:	pop	{r4, r5, r6, pc}
  do {
    c = peek();
    if (c >= 0) return c;
    yield();
  } while(millis() - startMillis < _timeout);
  return -1;     // -1 indicates timeout
    a54a:	mov.w	r0, #4294967295
}
    a54e:	pop	{r4, r5, r6, pc}
    a550:	.word	0x2000c320

0000a554 <Stream::peekNextDigit()>:

// returns peek of the next digit in the stream or -1 if timeout
// discards non-numeric characters
int Stream::peekNextDigit()
{
    a554:	push	{r4, lr}
    a556:	mov	r4, r0
    a558:	b.n	a568 <Stream::peekNextDigit()+0x14>
  int c;
  while (1) {
    c = timedPeek();
    if (c < 0) return c;  // timeout
    if (c == '-') return c;
    a55a:	cmp	r3, #45	; 0x2d
    a55c:	beq.n	a578 <Stream::peekNextDigit()+0x24>
    if (c >= '0' && c <= '9') return c;
    a55e:	cmp	r2, #9
    a560:	bls.n	a578 <Stream::peekNextDigit()+0x24>
    read();  // discard non-numeric
    a562:	ldr	r3, [r4, #0]
    a564:	ldr	r3, [r3, #20]
    a566:	blx	r3
// discards non-numeric characters
int Stream::peekNextDigit()
{
  int c;
  while (1) {
    c = timedPeek();
    a568:	mov	r0, r4
    a56a:	bl	a524 <Stream::timedPeek()>
    if (c < 0) return c;  // timeout
    a56e:	subs	r3, r0, #0
    if (c == '-') return c;
    if (c >= '0' && c <= '9') return c;
    read();  // discard non-numeric
    a570:	mov	r0, r4
  int c;
  while (1) {
    c = timedPeek();
    if (c < 0) return c;  // timeout
    if (c == '-') return c;
    if (c >= '0' && c <= '9') return c;
    a572:	sub.w	r2, r3, #48	; 0x30
int Stream::peekNextDigit()
{
  int c;
  while (1) {
    c = timedPeek();
    if (c < 0) return c;  // timeout
    a576:	bge.n	a55a <Stream::peekNextDigit()+0x6>
    if (c == '-') return c;
    if (c >= '0' && c <= '9') return c;
    read();  // discard non-numeric
  }
}
    a578:	mov	r0, r3
    a57a:	pop	{r4, pc}

0000a57c <Stream::parseInt(char)>:
}

// as above but a given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
long Stream::parseInt(char skipChar)
{
    a57c:	push	{r3, r4, r5, r6, r7, lr}
    a57e:	mov	r5, r1
    a580:	mov	r4, r0
  boolean isNegative = false;
  long value = 0;
  int c;

  c = peekNextDigit();
    a582:	bl	a554 <Stream::peekNextDigit()>
  // ignore non numeric leading characters
  if(c < 0)
    a586:	cmp	r0, #0
    a588:	blt.n	a5d2 <Stream::parseInt(char)+0x56>
    a58a:	movs	r6, #0
    a58c:	mov	r7, r6
    return 0; // zero returned if timeout

  do{
    if(c == skipChar)
    a58e:	cmp	r0, r5
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
    a590:	sub.w	r2, r0, #48	; 0x30
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout

  do{
    if(c == skipChar)
    a594:	beq.n	a5aa <Stream::parseInt(char)+0x2e>
      ; // ignore this charactor
    else if(c == '-')
    a596:	cmp	r0, #45	; 0x2d
    a598:	beq.n	a5ca <Stream::parseInt(char)+0x4e>
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
      value = value * 10 + c - '0';
    a59a:	add.w	r3, r6, r6, lsl #2
  do{
    if(c == skipChar)
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
    a59e:	cmp	r2, #9
      value = value * 10 + c - '0';
    a5a0:	add.w	r0, r0, r3, lsl #1
  do{
    if(c == skipChar)
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
    a5a4:	bhi.n	a5aa <Stream::parseInt(char)+0x2e>
      value = value * 10 + c - '0';
    a5a6:	sub.w	r6, r0, #48	; 0x30
    read();  // consume the character we got with peek
    a5aa:	ldr	r3, [r4, #0]
    a5ac:	mov	r0, r4
    a5ae:	ldr	r3, [r3, #20]
    a5b0:	blx	r3
    c = timedPeek();
    a5b2:	mov	r0, r4
    a5b4:	bl	a524 <Stream::timedPeek()>
  }
  while( (c >= '0' && c <= '9') || c == skipChar );
    a5b8:	sub.w	r3, r0, #48	; 0x30
    a5bc:	cmp	r3, #9
    a5be:	bls.n	a58e <Stream::parseInt(char)+0x12>
    a5c0:	cmp	r0, r5
    a5c2:	beq.n	a58e <Stream::parseInt(char)+0x12>

  if(isNegative)
    a5c4:	cbz	r7, a5ce <Stream::parseInt(char)+0x52>
    value = -value;
    a5c6:	negs	r0, r6
    a5c8:	pop	{r3, r4, r5, r6, r7, pc}

  do{
    if(c == skipChar)
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    a5ca:	movs	r7, #1
    a5cc:	b.n	a5aa <Stream::parseInt(char)+0x2e>
    a5ce:	mov	r0, r6
  while( (c >= '0' && c <= '9') || c == skipChar );

  if(isNegative)
    value = -value;
  return value;
}
    a5d0:	pop	{r3, r4, r5, r6, r7, pc}
  int c;

  c = peekNextDigit();
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout
    a5d2:	movs	r0, #0
    a5d4:	pop	{r3, r4, r5, r6, r7, pc}
    a5d6:	nop

0000a5d8 <Stream::parseInt()>:
// returns the first valid (long) integer value from the current position.
// initial characters that are not digits (or the minus sign) are skipped
// function is terminated by the first character that is not a digit.
long Stream::parseInt()
{
  return parseInt(NO_SKIP_CHAR); // terminate on first non-digit character (or timeout)
    a5d8:	movs	r1, #1
    a5da:	b.w	a57c <Stream::parseInt(char)>
    a5de:	nop

0000a5e0 <Print::println()>:
	if (n < 0) return printNumber64(-n, 10, 1);
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
    a5e0:	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
    a5e2:	ldr	r4, [pc, #24]	; (a5fc <Print::println()+0x1c>)
	if (n < 0) return printNumber64(-n, 10, 1);
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
    a5e4:	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    a5e6:	ldr	r3, [r0, #0]
    a5e8:	movs	r2, #2
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    a5ea:	ldrh	r4, [r4, #0]
	return write(buf, 2);
    a5ec:	add	r1, sp, #4
    a5ee:	ldr	r3, [r3, #4]
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    a5f0:	strh.w	r4, [sp, #4]
	return write(buf, 2);
    a5f4:	blx	r3
}
    a5f6:	add	sp, #8
    a5f8:	pop	{r4, pc}
    a5fa:	nop
    a5fc:	.word	0x20000400

0000a600 <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
	((class Print *)file)->write((uint8_t *)ptr, len);
    a600:	ldr	r3, [r0, #0]
}

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    a602:	push	{r4, lr}
    a604:	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
    a606:	ldr	r3, [r3, #4]
    a608:	blx	r3
	return len;
}
    a60a:	mov	r0, r4
    a60c:	pop	{r4, pc}
    a60e:	nop

0000a610 <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
    a610:	push	{r1, r2, r3}
    a612:	push	{lr}
    a614:	sub	sp, #8
    a616:	add	r3, sp, #12
    a618:	ldr.w	r1, [r3], #4
	va_start(ap, format);
#ifdef __STRICT_ANSI__
	va_end(ap);
	return 0;  // TODO: make this work with -std=c++0x
#else
	int retval = vdprintf((int)this, format, ap);
    a61c:	mov	r2, r3
}

int Print::printf(const char *format, ...)
{
	va_list ap;
	va_start(ap, format);
    a61e:	str	r3, [sp, #4]
#ifdef __STRICT_ANSI__
	va_end(ap);
	return 0;  // TODO: make this work with -std=c++0x
#else
	int retval = vdprintf((int)this, format, ap);
    a620:	bl	da90 <vdprintf>
	va_end(ap);
	return retval;
#endif
}
    a624:	add	sp, #8
    a626:	ldr.w	lr, [sp], #4
    a62a:	add	sp, #12
    a62c:	bx	lr
    a62e:	nop

0000a630 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	return retval;
#endif
}

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    a630:	push	{r4, r5, r6, r7, lr}
    a632:	mov	r6, r0
    a634:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    a636:	cmp	r2, #0
    a638:	beq.n	a6a2 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    a63a:	cmp	r2, #1
    a63c:	it	eq
    a63e:	moveq	r2, #10
	}


	if (n == 0) {
    a640:	cbz	r1, a698 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    a642:	movs	r5, #33	; 0x21
    a644:	b.n	a648 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    a646:	uxtb	r5, r7
    a648:	subs	r7, r5, #1
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    a64a:	udiv	r4, r1, r2
    a64e:	mls	r1, r2, r4, r1
    a652:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    a654:	cmp	r1, #9
    a656:	add.w	r1, r0, #55	; 0x37
    a65a:	add.w	r0, r0, #48	; 0x30
    a65e:	it	hi
    a660:	uxtbhi	r0, r1
			n /= base;
			if (n == 0) break;
    a662:	mov	r1, r4
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    a664:	add	r4, sp, #40	; 0x28
    a666:	it	ls
    a668:	uxtbls	r0, r0
    a66a:	add	r4, r5
    a66c:	strb.w	r0, [r4, #-36]
			n /= base;
			if (n == 0) break;
    a670:	cmp	r1, #0
    a672:	bne.n	a646 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    a674:	cbz	r3, a684 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    a676:	subs	r5, #1
		buf[i] = '-';
    a678:	add	r3, sp, #40	; 0x28
    a67a:	movs	r2, #45	; 0x2d
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
		i--;
    a67c:	uxtb	r5, r5
		buf[i] = '-';
    a67e:	add	r3, r5
    a680:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    a684:	ldr	r3, [r6, #0]
    a686:	add	r1, sp, #4
    a688:	rsb	r2, r5, #34	; 0x22
    a68c:	mov	r0, r6
    a68e:	add	r1, r5
    a690:	ldr	r3, [r3, #4]
    a692:	blx	r3
}
    a694:	add	sp, #44	; 0x2c
    a696:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    a698:	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    a69a:	movs	r5, #33	; 0x21
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    a69c:	strb.w	r2, [sp, #37]	; 0x25
    a6a0:	b.n	a674 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    a6a2:	ldr	r3, [r0, #0]
    a6a4:	uxtb	r1, r1
    a6a6:	ldr	r3, [r3, #0]
    a6a8:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    a6aa:	add	sp, #44	; 0x2c
    a6ac:	pop	{r4, r5, r6, r7, pc}
    a6ae:	nop

0000a6b0 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
    a6b0:	bx	lr
    a6b2:	nop

0000a6b4 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    a6b4:	ldr	r2, [pc, #600]	; (a910 <set_arm_clock+0x25c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    a6b6:	ldr	r3, [pc, #604]	; (a914 <set_arm_clock+0x260>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    a6b8:	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    a6ba:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
    a6be:	ldr	r4, [pc, #600]	; (a918 <set_arm_clock+0x264>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    a6c0:	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    a6c4:	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    a6c6:	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    a6c8:	bls.n	a704 <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    a6ca:	ldr	r3, [pc, #592]	; (a91c <set_arm_clock+0x268>)
    a6cc:	cmp	r0, r3
    a6ce:	bls.w	a8fc <set_arm_clock+0x248>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    a6d2:	ldr	r3, [pc, #588]	; (a920 <set_arm_clock+0x26c>)
    a6d4:	movw	r5, #1575	; 0x627
    a6d8:	ldr	r7, [pc, #584]	; (a924 <set_arm_clock+0x270>)
    a6da:	add	r3, r0
    a6dc:	ldr	r4, [pc, #584]	; (a928 <set_arm_clock+0x274>)
    a6de:	lsrs	r2, r3, #8
    a6e0:	umull	r3, r2, r7, r2
    a6e4:	lsrs	r3, r2, #7
    a6e6:	add.w	r3, r3, r3, lsl #2
    a6ea:	add.w	r2, r3, r3, lsl #2
    a6ee:	addw	r3, r2, #1250	; 0x4e2
    a6f2:	cmp	r3, r5
    a6f4:	it	cs
    a6f6:	movcs	r3, r5
    a6f8:	sub.w	r3, r3, #800	; 0x320
    a6fc:	umull	r3, r5, r4, r3
    a700:	lsrs	r5, r5, #3
    a702:	b.n	a70e <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
    a704:	ldr	r5, [pc, #548]	; (a92c <set_arm_clock+0x278>)
    a706:	cmp	r0, r5
    a708:	ite	ls
    a70a:	movls	r5, #6
    a70c:	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a70e:	ldr	r2, [pc, #516]	; (a914 <set_arm_clock+0x260>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a710:	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a714:	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a718:	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a71a:	orr.w	r3, r3, #192	; 0xc0
    a71e:	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a722:	bcs.n	a73a <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    a724:	ldr	r3, [pc, #496]	; (a918 <set_arm_clock+0x264>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    a726:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a72a:	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    a72c:	orrs	r6, r5
		DCDC_REG3 = dcdc;
    a72e:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a730:	ldr	r3, [r2, #0]
    a732:	cmp	r3, #0
    a734:	bge.n	a730 <set_arm_clock+0x7c>
    a736:	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    a73a:	ands.w	r3, lr, #33554432	; 0x2000000
    a73e:	bne.n	a7a4 <set_arm_clock+0xf0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    a740:	ldr	r4, [pc, #492]	; (a930 <set_arm_clock+0x27c>)
    a742:	ldr	r2, [pc, #496]	; (a934 <set_arm_clock+0x280>)
    a744:	ldr.w	ip, [r4, #16]
    a748:	mov	r4, r2
    a74a:	and.w	r2, ip, r2
    a74e:	cmp	r2, r4
    a750:	itet	eq
    a752:	moveq.w	r3, #402653184	; 0x18000000
    a756:	movne.w	r2, #4096	; 0x1000
    a75a:	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    a75c:	eor.w	r4, lr, r3
    a760:	tst.w	r4, #939524096	; 0x38000000
    a764:	beq.n	a778 <set_arm_clock+0xc4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    a766:	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    a76a:	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
    a76e:	ldr	r4, [pc, #420]	; (a914 <set_arm_clock+0x260>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    a770:	orr.w	lr, r3, lr
			CCM_CBCDR = cbcdr;
    a774:	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    a778:	eor.w	r3, r1, r2
    a77c:	tst.w	r3, #12288	; 0x3000
    a780:	beq.n	a794 <set_arm_clock+0xe0>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    a782:	ldr	r3, [pc, #400]	; (a914 <set_arm_clock+0x260>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    a784:	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    a788:	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    a78a:	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    a78c:	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    a78e:	ldr	r3, [r2, #72]	; 0x48
    a790:	lsls	r4, r3, #28
    a792:	bmi.n	a78e <set_arm_clock+0xda>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    a794:	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    a798:	ldr	r2, [pc, #376]	; (a914 <set_arm_clock+0x260>)
    a79a:	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    a79e:	ldr	r3, [r2, #72]	; 0x48
    a7a0:	lsls	r1, r3, #26
    a7a2:	bmi.n	a79e <set_arm_clock+0xea>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    a7a4:	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    a7a6:	ldr	r4, [pc, #400]	; (a938 <set_arm_clock+0x284>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    a7a8:	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    a7aa:	mul.w	r3, r1, r2
    a7ae:	mul.w	r3, r0, r3
    a7b2:	cmp	r3, r4
    a7b4:	bhi.n	a7ca <set_arm_clock+0x116>
		if (div_arm < 8) {
    a7b6:	cmp	r2, #7
    a7b8:	bhi.w	a8e6 <set_arm_clock+0x232>
			div_arm = div_arm + 1;
    a7bc:	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    a7be:	mul.w	r3, r1, r2
    a7c2:	mul.w	r3, r0, r3
    a7c6:	cmp	r3, r4
    a7c8:	bls.n	a7b6 <set_arm_clock+0x102>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    a7ca:	ldr	r0, [pc, #368]	; (a93c <set_arm_clock+0x288>)
    a7cc:	ldr	r4, [pc, #368]	; (a940 <set_arm_clock+0x28c>)
    a7ce:	add	r0, r3
    a7d0:	umull	r0, r3, r4, r0
    a7d4:	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
    a7d6:	cmp	r3, #108	; 0x6c
    a7d8:	bhi.w	a8f2 <set_arm_clock+0x23e>
	if (mult < 54) mult = 54;
    a7dc:	cmp	r3, #53	; 0x35
    a7de:	bhi.w	a900 <set_arm_clock+0x24c>
    a7e2:	ldr.w	r8, [pc, #392]	; a96c <set_arm_clock+0x2b8>
    a7e6:	movs	r3, #54	; 0x36
    a7e8:	ldr	r0, [pc, #344]	; (a944 <set_arm_clock+0x290>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a7ea:	ldr.w	ip, [pc, #324]	; a930 <set_arm_clock+0x27c>
    a7ee:	ldr	r4, [pc, #344]	; (a948 <set_arm_clock+0x294>)
    a7f0:	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    a7f4:	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a7f8:	and.w	r4, r9, r4
    a7fc:	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    a7fe:	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a802:	beq.n	a81c <set_arm_clock+0x168>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    a804:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    a808:	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    a80c:	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    a80e:	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    a812:	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    a816:	ldr	r3, [r4, #0]
    a818:	cmp	r3, #0
    a81a:	bge.n	a816 <set_arm_clock+0x162>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    a81c:	ldr.w	ip, [pc, #244]	; a914 <set_arm_clock+0x260>
    a820:	subs	r2, #1
    a822:	ldr.w	r3, [ip, #16]
    a826:	and.w	r3, r3, #7
    a82a:	cmp	r3, r2
    a82c:	beq.n	a83e <set_arm_clock+0x18a>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    a82e:	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    a832:	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    a834:	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    a838:	ldr	r3, [r4, #72]	; 0x48
    a83a:	lsls	r3, r3, #15
    a83c:	bmi.n	a838 <set_arm_clock+0x184>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    a83e:	subs	r1, #1
    a840:	lsls	r1, r1, #10
    a842:	eor.w	r3, lr, r1
    a846:	tst.w	r3, #7168	; 0x1c00
    a84a:	beq.n	a866 <set_arm_clock+0x1b2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
    a84c:	ldr	r3, [pc, #196]	; (a914 <set_arm_clock+0x260>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    a84e:	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    a852:	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    a856:	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    a858:	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
    a85c:	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    a860:	ldr	r3, [r2, #72]	; 0x48
    a862:	lsls	r1, r3, #30
    a864:	bmi.n	a860 <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    a866:	ldr	r3, [pc, #228]	; (a94c <set_arm_clock+0x298>)
    a868:	ldr	r1, [pc, #228]	; (a950 <set_arm_clock+0x29c>)
    a86a:	add	r3, r0
    a86c:	lsrs	r3, r3, #7
    a86e:	umull	r3, r1, r1, r3
    a872:	lsrs	r1, r1, #12
    a874:	cmp	r1, #4
    a876:	it	cs
    a878:	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    a87a:	subs	r3, r1, #1
    a87c:	lsls	r3, r3, #8
    a87e:	eor.w	r2, lr, r3
    a882:	tst.w	r2, #768	; 0x300
    a886:	beq.n	a898 <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    a888:	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    a88c:	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    a890:	ldr	r2, [pc, #128]	; (a914 <set_arm_clock+0x260>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    a892:	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    a896:	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    a898:	ldr	r3, [pc, #120]	; (a914 <set_arm_clock+0x260>)
    a89a:	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    a89c:	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    a89e:	bic.w	r4, r4, #33554432	; 0x2000000
    a8a2:	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    a8a4:	ldr	r3, [r2, #72]	; 0x48
    a8a6:	lsls	r3, r3, #26
    a8a8:	bmi.n	a8a4 <set_arm_clock+0x1f0>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a8aa:	ldr	r3, [pc, #168]	; (a954 <set_arm_clock+0x2a0>)
    a8ac:	mov.w	r2, #4294967295
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    a8b0:	ldr	r4, [pc, #164]	; (a958 <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    a8b2:	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a8b4:	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    a8b8:	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a8ba:	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    a8be:	ldr	r4, [pc, #156]	; (a95c <set_arm_clock+0x2a8>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a8c0:	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    a8c4:	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a8c8:	ldr	r2, [pc, #148]	; (a960 <set_arm_clock+0x2ac>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    a8ca:	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a8cc:	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    a8ce:	bcs.n	a8e2 <set_arm_clock+0x22e>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    a8d0:	ldr	r3, [pc, #68]	; (a918 <set_arm_clock+0x264>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    a8d2:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a8d6:	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    a8d8:	orrs	r6, r5
		DCDC_REG3 = dcdc;
    a8da:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a8dc:	ldr	r3, [r2, #0]
    a8de:	cmp	r3, #0
    a8e0:	bge.n	a8dc <set_arm_clock+0x228>
	}

	return frequency;
}
    a8e2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    a8e6:	cmp	r1, #4
    a8e8:	bhi.w	a7ca <set_arm_clock+0x116>
				div_ahb = div_ahb + 1;
    a8ec:	adds	r1, #1
				div_arm = 1;
    a8ee:	movs	r2, #1
    a8f0:	b.n	a7aa <set_arm_clock+0xf6>
    a8f2:	ldr.w	r8, [pc, #124]	; a970 <set_arm_clock+0x2bc>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    a8f6:	movs	r3, #108	; 0x6c
    a8f8:	ldr	r0, [pc, #104]	; (a964 <set_arm_clock+0x2b0>)
    a8fa:	b.n	a7ea <set_arm_clock+0x136>
    a8fc:	movs	r5, #18
    a8fe:	b.n	a70e <set_arm_clock+0x5a>
    a900:	ldr	r0, [pc, #100]	; (a968 <set_arm_clock+0x2b4>)
    a902:	ldr.w	r8, [pc, #112]	; a974 <set_arm_clock+0x2c0>
    a906:	mul.w	r0, r0, r3
    a90a:	orr.w	r8, r3, r8
    a90e:	b.n	a7ea <set_arm_clock+0x136>
    a910:	.word	0x1f78a400
    a914:	.word	0x400fc000
    a918:	.word	0x40080000
    a91c:	.word	0x23c34600
    a920:	.word	0xdc3cba00
    a924:	.word	0x004cb223
    a928:	.word	0x51eb851f
    a92c:	.word	0x016e3600
    a930:	.word	0x400d8000
    a934:	.word	0x80003040
    a938:	.word	0x269fb1ff
    a93c:	.word	0x005b8d80
    a940:	.word	0x165e9f81
    a944:	.word	0x269fb200
    a948:	.word	0x8001307f
    a94c:	.word	0x08f0d17f
    a950:	.word	0x00e5109f
    a954:	.word	0x431bde83
    a958:	.word	0x20001224
    a95c:	.word	0x20001220
    a960:	.word	0x2000c314
    a964:	.word	0x4d3f6400
    a968:	.word	0x00b71b00
    a96c:	.word	0x80002036
    a970:	.word	0x8000206c
    a974:	.word	0x80002000

0000a978 <__aeabi_drsub>:
    a978:	eor.w	r1, r1, #2147483648	; 0x80000000
    a97c:	b.n	a984 <__adddf3>
    a97e:	nop

0000a980 <__aeabi_dsub>:
    a980:	eor.w	r3, r3, #2147483648	; 0x80000000

0000a984 <__adddf3>:
    a984:	push	{r4, r5, lr}
    a986:	mov.w	r4, r1, lsl #1
    a98a:	mov.w	r5, r3, lsl #1
    a98e:	teq	r4, r5
    a992:	it	eq
    a994:	teqeq	r0, r2
    a998:	itttt	ne
    a99a:	orrsne.w	ip, r4, r0
    a99e:	orrsne.w	ip, r5, r2
    a9a2:	mvnsne.w	ip, r4, asr #21
    a9a6:	mvnsne.w	ip, r5, asr #21
    a9aa:	beq.w	ab72 <__adddf3+0x1ee>
    a9ae:	mov.w	r4, r4, lsr #21
    a9b2:	rsbs	r5, r4, r5, lsr #21
    a9b6:	it	lt
    a9b8:	neglt	r5, r5
    a9ba:	ble.n	a9d6 <__adddf3+0x52>
    a9bc:	add	r4, r5
    a9be:	eor.w	r2, r0, r2
    a9c2:	eor.w	r3, r1, r3
    a9c6:	eor.w	r0, r2, r0
    a9ca:	eor.w	r1, r3, r1
    a9ce:	eor.w	r2, r0, r2
    a9d2:	eor.w	r3, r1, r3
    a9d6:	cmp	r5, #54	; 0x36
    a9d8:	it	hi
    a9da:	pophi	{r4, r5, pc}
    a9dc:	tst.w	r1, #2147483648	; 0x80000000
    a9e0:	mov.w	r1, r1, lsl #12
    a9e4:	mov.w	ip, #1048576	; 0x100000
    a9e8:	orr.w	r1, ip, r1, lsr #12
    a9ec:	beq.n	a9f4 <__adddf3+0x70>
    a9ee:	negs	r0, r0
    a9f0:	sbc.w	r1, r1, r1, lsl #1
    a9f4:	tst.w	r3, #2147483648	; 0x80000000
    a9f8:	mov.w	r3, r3, lsl #12
    a9fc:	orr.w	r3, ip, r3, lsr #12
    aa00:	beq.n	aa08 <__adddf3+0x84>
    aa02:	negs	r2, r2
    aa04:	sbc.w	r3, r3, r3, lsl #1
    aa08:	teq	r4, r5
    aa0c:	beq.w	ab5e <__adddf3+0x1da>
    aa10:	sub.w	r4, r4, #1
    aa14:	rsbs	lr, r5, #32
    aa18:	blt.n	aa36 <__adddf3+0xb2>
    aa1a:	lsl.w	ip, r2, lr
    aa1e:	lsr.w	r2, r2, r5
    aa22:	adds	r0, r0, r2
    aa24:	adc.w	r1, r1, #0
    aa28:	lsl.w	r2, r3, lr
    aa2c:	adds	r0, r0, r2
    aa2e:	asr.w	r3, r3, r5
    aa32:	adcs	r1, r3
    aa34:	b.n	aa54 <__adddf3+0xd0>
    aa36:	sub.w	r5, r5, #32
    aa3a:	add.w	lr, lr, #32
    aa3e:	cmp	r2, #1
    aa40:	lsl.w	ip, r3, lr
    aa44:	it	cs
    aa46:	orrcs.w	ip, ip, #2
    aa4a:	asr.w	r3, r3, r5
    aa4e:	adds	r0, r0, r3
    aa50:	adcs.w	r1, r1, r3, asr #31
    aa54:	and.w	r5, r1, #2147483648	; 0x80000000
    aa58:	bpl.n	aa6a <__adddf3+0xe6>
    aa5a:	mov.w	lr, #0
    aa5e:	rsbs	ip, ip, #0
    aa62:	sbcs.w	r0, lr, r0
    aa66:	sbc.w	r1, lr, r1
    aa6a:	cmp.w	r1, #1048576	; 0x100000
    aa6e:	bcc.n	aaa8 <__adddf3+0x124>
    aa70:	cmp.w	r1, #2097152	; 0x200000
    aa74:	bcc.n	aa90 <__adddf3+0x10c>
    aa76:	lsrs	r1, r1, #1
    aa78:	movs.w	r0, r0, rrx
    aa7c:	mov.w	ip, ip, rrx
    aa80:	add.w	r4, r4, #1
    aa84:	mov.w	r2, r4, lsl #21
    aa88:	cmn.w	r2, #4194304	; 0x400000
    aa8c:	bcs.w	abc4 <__adddf3+0x240>
    aa90:	cmp.w	ip, #2147483648	; 0x80000000
    aa94:	it	eq
    aa96:	movseq.w	ip, r0, lsr #1
    aa9a:	adcs.w	r0, r0, #0
    aa9e:	adc.w	r1, r1, r4, lsl #20
    aaa2:	orr.w	r1, r1, r5
    aaa6:	pop	{r4, r5, pc}
    aaa8:	movs.w	ip, ip, lsl #1
    aaac:	adcs	r0, r0
    aaae:	adc.w	r1, r1, r1
    aab2:	tst.w	r1, #1048576	; 0x100000
    aab6:	sub.w	r4, r4, #1
    aaba:	bne.n	aa90 <__adddf3+0x10c>
    aabc:	teq	r1, #0
    aac0:	itt	eq
    aac2:	moveq	r1, r0
    aac4:	moveq	r0, #0
    aac6:	clz	r3, r1
    aaca:	it	eq
    aacc:	addeq	r3, #32
    aace:	sub.w	r3, r3, #11
    aad2:	subs.w	r2, r3, #32
    aad6:	bge.n	aaf2 <__adddf3+0x16e>
    aad8:	adds	r2, #12
    aada:	ble.n	aaee <__adddf3+0x16a>
    aadc:	add.w	ip, r2, #20
    aae0:	rsb	r2, r2, #12
    aae4:	lsl.w	r0, r1, ip
    aae8:	lsr.w	r1, r1, r2
    aaec:	b.n	ab08 <__adddf3+0x184>
    aaee:	add.w	r2, r2, #20
    aaf2:	it	le
    aaf4:	rsble	ip, r2, #32
    aaf8:	lsl.w	r1, r1, r2
    aafc:	lsr.w	ip, r0, ip
    ab00:	itt	le
    ab02:	orrle.w	r1, r1, ip
    ab06:	lslle	r0, r2
    ab08:	subs	r4, r4, r3
    ab0a:	ittt	ge
    ab0c:	addge.w	r1, r1, r4, lsl #20
    ab10:	orrge	r1, r5
    ab12:	popge	{r4, r5, pc}
    ab14:	mvn.w	r4, r4
    ab18:	subs	r4, #31
    ab1a:	bge.n	ab56 <__adddf3+0x1d2>
    ab1c:	adds	r4, #12
    ab1e:	bgt.n	ab3e <__adddf3+0x1ba>
    ab20:	add.w	r4, r4, #20
    ab24:	rsb	r2, r4, #32
    ab28:	lsr.w	r0, r0, r4
    ab2c:	lsl.w	r3, r1, r2
    ab30:	orr.w	r0, r0, r3
    ab34:	lsr.w	r3, r1, r4
    ab38:	orr.w	r1, r5, r3
    ab3c:	pop	{r4, r5, pc}
    ab3e:	rsb	r4, r4, #12
    ab42:	rsb	r2, r4, #32
    ab46:	lsr.w	r0, r0, r2
    ab4a:	lsl.w	r3, r1, r4
    ab4e:	orr.w	r0, r0, r3
    ab52:	mov	r1, r5
    ab54:	pop	{r4, r5, pc}
    ab56:	lsr.w	r0, r1, r4
    ab5a:	mov	r1, r5
    ab5c:	pop	{r4, r5, pc}
    ab5e:	teq	r4, #0
    ab62:	eor.w	r3, r3, #1048576	; 0x100000
    ab66:	itte	eq
    ab68:	eoreq.w	r1, r1, #1048576	; 0x100000
    ab6c:	addeq	r4, #1
    ab6e:	subne	r5, #1
    ab70:	b.n	aa10 <__adddf3+0x8c>
    ab72:	mvns.w	ip, r4, asr #21
    ab76:	it	ne
    ab78:	mvnsne.w	ip, r5, asr #21
    ab7c:	beq.n	abd2 <__adddf3+0x24e>
    ab7e:	teq	r4, r5
    ab82:	it	eq
    ab84:	teqeq	r0, r2
    ab88:	beq.n	ab96 <__adddf3+0x212>
    ab8a:	orrs.w	ip, r4, r0
    ab8e:	itt	eq
    ab90:	moveq	r1, r3
    ab92:	moveq	r0, r2
    ab94:	pop	{r4, r5, pc}
    ab96:	teq	r1, r3
    ab9a:	ittt	ne
    ab9c:	movne	r1, #0
    ab9e:	movne	r0, #0
    aba0:	popne	{r4, r5, pc}
    aba2:	movs.w	ip, r4, lsr #21
    aba6:	bne.n	abb4 <__adddf3+0x230>
    aba8:	lsls	r0, r0, #1
    abaa:	adcs	r1, r1
    abac:	it	cs
    abae:	orrcs.w	r1, r1, #2147483648	; 0x80000000
    abb2:	pop	{r4, r5, pc}
    abb4:	adds.w	r4, r4, #4194304	; 0x400000
    abb8:	itt	cc
    abba:	addcc.w	r1, r1, #1048576	; 0x100000
    abbe:	popcc	{r4, r5, pc}
    abc0:	and.w	r5, r1, #2147483648	; 0x80000000
    abc4:	orr.w	r1, r5, #2130706432	; 0x7f000000
    abc8:	orr.w	r1, r1, #15728640	; 0xf00000
    abcc:	mov.w	r0, #0
    abd0:	pop	{r4, r5, pc}
    abd2:	mvns.w	ip, r4, asr #21
    abd6:	itte	ne
    abd8:	movne	r1, r3
    abda:	movne	r0, r2
    abdc:	mvnseq.w	ip, r5, asr #21
    abe0:	itt	ne
    abe2:	movne	r3, r1
    abe4:	movne	r2, r0
    abe6:	orrs.w	r4, r0, r1, lsl #12
    abea:	itte	eq
    abec:	orrseq.w	r5, r2, r3, lsl #12
    abf0:	teqeq	r1, r3
    abf4:	orrne.w	r1, r1, #524288	; 0x80000
    abf8:	pop	{r4, r5, pc}
    abfa:	nop

0000abfc <__aeabi_ui2d>:
    abfc:	teq	r0, #0
    ac00:	itt	eq
    ac02:	moveq	r1, #0
    ac04:	bxeq	lr
    ac06:	push	{r4, r5, lr}
    ac08:	mov.w	r4, #1024	; 0x400
    ac0c:	add.w	r4, r4, #50	; 0x32
    ac10:	mov.w	r5, #0
    ac14:	mov.w	r1, #0
    ac18:	b.n	aabc <__adddf3+0x138>
    ac1a:	nop

0000ac1c <__aeabi_i2d>:
    ac1c:	teq	r0, #0
    ac20:	itt	eq
    ac22:	moveq	r1, #0
    ac24:	bxeq	lr
    ac26:	push	{r4, r5, lr}
    ac28:	mov.w	r4, #1024	; 0x400
    ac2c:	add.w	r4, r4, #50	; 0x32
    ac30:	ands.w	r5, r0, #2147483648	; 0x80000000
    ac34:	it	mi
    ac36:	negmi	r0, r0
    ac38:	mov.w	r1, #0
    ac3c:	b.n	aabc <__adddf3+0x138>
    ac3e:	nop

0000ac40 <__aeabi_f2d>:
    ac40:	lsls	r2, r0, #1
    ac42:	mov.w	r1, r2, asr #3
    ac46:	mov.w	r1, r1, rrx
    ac4a:	mov.w	r0, r2, lsl #28
    ac4e:	itttt	ne
    ac50:	andsne.w	r3, r2, #4278190080	; 0xff000000
    ac54:	teqne	r3, #4278190080	; 0xff000000
    ac58:	eorne.w	r1, r1, #939524096	; 0x38000000
    ac5c:	bxne	lr
    ac5e:	teq	r2, #0
    ac62:	ite	ne
    ac64:	teqne	r3, #4278190080	; 0xff000000
    ac68:	bxeq	lr
    ac6a:	push	{r4, r5, lr}
    ac6c:	mov.w	r4, #896	; 0x380
    ac70:	and.w	r5, r1, #2147483648	; 0x80000000
    ac74:	bic.w	r1, r1, #2147483648	; 0x80000000
    ac78:	b.n	aabc <__adddf3+0x138>
    ac7a:	nop

0000ac7c <__aeabi_ul2d>:
    ac7c:	orrs.w	r2, r0, r1
    ac80:	it	eq
    ac82:	bxeq	lr
    ac84:	push	{r4, r5, lr}
    ac86:	mov.w	r5, #0
    ac8a:	b.n	aca2 <__aeabi_l2d+0x16>

0000ac8c <__aeabi_l2d>:
    ac8c:	orrs.w	r2, r0, r1
    ac90:	it	eq
    ac92:	bxeq	lr
    ac94:	push	{r4, r5, lr}
    ac96:	ands.w	r5, r1, #2147483648	; 0x80000000
    ac9a:	bpl.n	aca2 <__aeabi_l2d+0x16>
    ac9c:	negs	r0, r0
    ac9e:	sbc.w	r1, r1, r1, lsl #1
    aca2:	mov.w	r4, #1024	; 0x400
    aca6:	add.w	r4, r4, #50	; 0x32
    acaa:	movs.w	ip, r1, lsr #22
    acae:	beq.w	aa6a <__adddf3+0xe6>
    acb2:	mov.w	r2, #3
    acb6:	movs.w	ip, ip, lsr #3
    acba:	it	ne
    acbc:	addne	r2, #3
    acbe:	movs.w	ip, ip, lsr #3
    acc2:	it	ne
    acc4:	addne	r2, #3
    acc6:	add.w	r2, r2, ip, lsr #3
    acca:	rsb	r3, r2, #32
    acce:	lsl.w	ip, r0, r3
    acd2:	lsr.w	r0, r0, r2
    acd6:	lsl.w	lr, r1, r3
    acda:	orr.w	r0, r0, lr
    acde:	lsr.w	r1, r1, r2
    ace2:	add	r4, r2
    ace4:	b.n	aa6a <__adddf3+0xe6>
    ace6:	nop

0000ace8 <__aeabi_dmul>:
    ace8:	push	{r4, r5, r6, lr}
    acea:	mov.w	ip, #255	; 0xff
    acee:	orr.w	ip, ip, #1792	; 0x700
    acf2:	ands.w	r4, ip, r1, lsr #20
    acf6:	ittte	ne
    acf8:	andsne.w	r5, ip, r3, lsr #20
    acfc:	teqne	r4, ip
    ad00:	teqne	r5, ip
    ad04:	bleq	aec4 <__aeabi_dmul+0x1dc>
    ad08:	add	r4, r5
    ad0a:	eor.w	r6, r1, r3
    ad0e:	bic.w	r1, r1, ip, lsl #21
    ad12:	bic.w	r3, r3, ip, lsl #21
    ad16:	orrs.w	r5, r0, r1, lsl #12
    ad1a:	it	ne
    ad1c:	orrsne.w	r5, r2, r3, lsl #12
    ad20:	orr.w	r1, r1, #1048576	; 0x100000
    ad24:	orr.w	r3, r3, #1048576	; 0x100000
    ad28:	beq.n	ad9c <__aeabi_dmul+0xb4>
    ad2a:	umull	ip, lr, r0, r2
    ad2e:	mov.w	r5, #0
    ad32:	umlal	lr, r5, r1, r2
    ad36:	and.w	r2, r6, #2147483648	; 0x80000000
    ad3a:	umlal	lr, r5, r0, r3
    ad3e:	mov.w	r6, #0
    ad42:	umlal	r5, r6, r1, r3
    ad46:	teq	ip, #0
    ad4a:	it	ne
    ad4c:	orrne.w	lr, lr, #1
    ad50:	sub.w	r4, r4, #255	; 0xff
    ad54:	cmp.w	r6, #512	; 0x200
    ad58:	sbc.w	r4, r4, #768	; 0x300
    ad5c:	bcs.n	ad68 <__aeabi_dmul+0x80>
    ad5e:	movs.w	lr, lr, lsl #1
    ad62:	adcs	r5, r5
    ad64:	adc.w	r6, r6, r6
    ad68:	orr.w	r1, r2, r6, lsl #11
    ad6c:	orr.w	r1, r1, r5, lsr #21
    ad70:	mov.w	r0, r5, lsl #11
    ad74:	orr.w	r0, r0, lr, lsr #21
    ad78:	mov.w	lr, lr, lsl #11
    ad7c:	subs.w	ip, r4, #253	; 0xfd
    ad80:	it	hi
    ad82:	cmphi.w	ip, #1792	; 0x700
    ad86:	bhi.n	adc6 <__aeabi_dmul+0xde>
    ad88:	cmp.w	lr, #2147483648	; 0x80000000
    ad8c:	it	eq
    ad8e:	movseq.w	lr, r0, lsr #1
    ad92:	adcs.w	r0, r0, #0
    ad96:	adc.w	r1, r1, r4, lsl #20
    ad9a:	pop	{r4, r5, r6, pc}
    ad9c:	and.w	r6, r6, #2147483648	; 0x80000000
    ada0:	orr.w	r1, r6, r1
    ada4:	orr.w	r0, r0, r2
    ada8:	eor.w	r1, r1, r3
    adac:	subs.w	r4, r4, ip, lsr #1
    adb0:	ittt	gt
    adb2:	rsbsgt	r5, r4, ip
    adb6:	orrgt.w	r1, r1, r4, lsl #20
    adba:	popgt	{r4, r5, r6, pc}
    adbc:	orr.w	r1, r1, #1048576	; 0x100000
    adc0:	mov.w	lr, #0
    adc4:	subs	r4, #1
    adc6:	bgt.w	af20 <__aeabi_dmul+0x238>
    adca:	cmn.w	r4, #54	; 0x36
    adce:	ittt	le
    add0:	movle	r0, #0
    add2:	andle.w	r1, r1, #2147483648	; 0x80000000
    add6:	pople	{r4, r5, r6, pc}
    add8:	rsb	r4, r4, #0
    addc:	subs	r4, #32
    adde:	bge.n	ae4c <__aeabi_dmul+0x164>
    ade0:	adds	r4, #12
    ade2:	bgt.n	ae1c <__aeabi_dmul+0x134>
    ade4:	add.w	r4, r4, #20
    ade8:	rsb	r5, r4, #32
    adec:	lsl.w	r3, r0, r5
    adf0:	lsr.w	r0, r0, r4
    adf4:	lsl.w	r2, r1, r5
    adf8:	orr.w	r0, r0, r2
    adfc:	and.w	r2, r1, #2147483648	; 0x80000000
    ae00:	bic.w	r1, r1, #2147483648	; 0x80000000
    ae04:	adds.w	r0, r0, r3, lsr #31
    ae08:	lsr.w	r6, r1, r4
    ae0c:	adc.w	r1, r2, r6
    ae10:	orrs.w	lr, lr, r3, lsl #1
    ae14:	it	eq
    ae16:	biceq.w	r0, r0, r3, lsr #31
    ae1a:	pop	{r4, r5, r6, pc}
    ae1c:	rsb	r4, r4, #12
    ae20:	rsb	r5, r4, #32
    ae24:	lsl.w	r3, r0, r4
    ae28:	lsr.w	r0, r0, r5
    ae2c:	lsl.w	r2, r1, r4
    ae30:	orr.w	r0, r0, r2
    ae34:	and.w	r1, r1, #2147483648	; 0x80000000
    ae38:	adds.w	r0, r0, r3, lsr #31
    ae3c:	adc.w	r1, r1, #0
    ae40:	orrs.w	lr, lr, r3, lsl #1
    ae44:	it	eq
    ae46:	biceq.w	r0, r0, r3, lsr #31
    ae4a:	pop	{r4, r5, r6, pc}
    ae4c:	rsb	r5, r4, #32
    ae50:	lsl.w	r2, r0, r5
    ae54:	orr.w	lr, lr, r2
    ae58:	lsr.w	r3, r0, r4
    ae5c:	lsl.w	r2, r1, r5
    ae60:	orr.w	r3, r3, r2
    ae64:	lsr.w	r0, r1, r4
    ae68:	and.w	r1, r1, #2147483648	; 0x80000000
    ae6c:	lsr.w	r2, r1, r4
    ae70:	bic.w	r0, r0, r2
    ae74:	add.w	r0, r0, r3, lsr #31
    ae78:	orrs.w	lr, lr, r3, lsl #1
    ae7c:	it	eq
    ae7e:	biceq.w	r0, r0, r3, lsr #31
    ae82:	pop	{r4, r5, r6, pc}
    ae84:	teq	r4, #0
    ae88:	bne.n	aeaa <__aeabi_dmul+0x1c2>
    ae8a:	and.w	r6, r1, #2147483648	; 0x80000000
    ae8e:	lsls	r0, r0, #1
    ae90:	adc.w	r1, r1, r1
    ae94:	tst.w	r1, #1048576	; 0x100000
    ae98:	it	eq
    ae9a:	subeq	r4, #1
    ae9c:	beq.n	ae8e <__aeabi_dmul+0x1a6>
    ae9e:	orr.w	r1, r1, r6
    aea2:	teq	r5, #0
    aea6:	it	ne
    aea8:	bxne	lr
    aeaa:	and.w	r6, r3, #2147483648	; 0x80000000
    aeae:	lsls	r2, r2, #1
    aeb0:	adc.w	r3, r3, r3
    aeb4:	tst.w	r3, #1048576	; 0x100000
    aeb8:	it	eq
    aeba:	subeq	r5, #1
    aebc:	beq.n	aeae <__aeabi_dmul+0x1c6>
    aebe:	orr.w	r3, r3, r6
    aec2:	bx	lr
    aec4:	teq	r4, ip
    aec8:	and.w	r5, ip, r3, lsr #20
    aecc:	it	ne
    aece:	teqne	r5, ip
    aed2:	beq.n	aeee <__aeabi_dmul+0x206>
    aed4:	orrs.w	r6, r0, r1, lsl #1
    aed8:	it	ne
    aeda:	orrsne.w	r6, r2, r3, lsl #1
    aede:	bne.n	ae84 <__aeabi_dmul+0x19c>
    aee0:	eor.w	r1, r1, r3
    aee4:	and.w	r1, r1, #2147483648	; 0x80000000
    aee8:	mov.w	r0, #0
    aeec:	pop	{r4, r5, r6, pc}
    aeee:	orrs.w	r6, r0, r1, lsl #1
    aef2:	itte	eq
    aef4:	moveq	r0, r2
    aef6:	moveq	r1, r3
    aef8:	orrsne.w	r6, r2, r3, lsl #1
    aefc:	beq.n	af32 <__aeabi_dmul+0x24a>
    aefe:	teq	r4, ip
    af02:	bne.n	af0a <__aeabi_dmul+0x222>
    af04:	orrs.w	r6, r0, r1, lsl #12
    af08:	bne.n	af32 <__aeabi_dmul+0x24a>
    af0a:	teq	r5, ip
    af0e:	bne.n	af1c <__aeabi_dmul+0x234>
    af10:	orrs.w	r6, r2, r3, lsl #12
    af14:	itt	ne
    af16:	movne	r0, r2
    af18:	movne	r1, r3
    af1a:	bne.n	af32 <__aeabi_dmul+0x24a>
    af1c:	eor.w	r1, r1, r3
    af20:	and.w	r1, r1, #2147483648	; 0x80000000
    af24:	orr.w	r1, r1, #2130706432	; 0x7f000000
    af28:	orr.w	r1, r1, #15728640	; 0xf00000
    af2c:	mov.w	r0, #0
    af30:	pop	{r4, r5, r6, pc}
    af32:	orr.w	r1, r1, #2130706432	; 0x7f000000
    af36:	orr.w	r1, r1, #16252928	; 0xf80000
    af3a:	pop	{r4, r5, r6, pc}

0000af3c <__aeabi_ddiv>:
    af3c:	push	{r4, r5, r6, lr}
    af3e:	mov.w	ip, #255	; 0xff
    af42:	orr.w	ip, ip, #1792	; 0x700
    af46:	ands.w	r4, ip, r1, lsr #20
    af4a:	ittte	ne
    af4c:	andsne.w	r5, ip, r3, lsr #20
    af50:	teqne	r4, ip
    af54:	teqne	r5, ip
    af58:	bleq	b0aa <__aeabi_ddiv+0x16e>
    af5c:	sub.w	r4, r4, r5
    af60:	eor.w	lr, r1, r3
    af64:	orrs.w	r5, r2, r3, lsl #12
    af68:	mov.w	r1, r1, lsl #12
    af6c:	beq.w	b080 <__aeabi_ddiv+0x144>
    af70:	mov.w	r3, r3, lsl #12
    af74:	mov.w	r5, #268435456	; 0x10000000
    af78:	orr.w	r3, r5, r3, lsr #4
    af7c:	orr.w	r3, r3, r2, lsr #24
    af80:	mov.w	r2, r2, lsl #8
    af84:	orr.w	r5, r5, r1, lsr #4
    af88:	orr.w	r5, r5, r0, lsr #24
    af8c:	mov.w	r6, r0, lsl #8
    af90:	and.w	r1, lr, #2147483648	; 0x80000000
    af94:	cmp	r5, r3
    af96:	it	eq
    af98:	cmpeq	r6, r2
    af9a:	adc.w	r4, r4, #253	; 0xfd
    af9e:	add.w	r4, r4, #768	; 0x300
    afa2:	bcs.n	afaa <__aeabi_ddiv+0x6e>
    afa4:	lsrs	r3, r3, #1
    afa6:	mov.w	r2, r2, rrx
    afaa:	subs	r6, r6, r2
    afac:	sbc.w	r5, r5, r3
    afb0:	lsrs	r3, r3, #1
    afb2:	mov.w	r2, r2, rrx
    afb6:	mov.w	r0, #1048576	; 0x100000
    afba:	mov.w	ip, #524288	; 0x80000
    afbe:	subs.w	lr, r6, r2
    afc2:	sbcs.w	lr, r5, r3
    afc6:	ittt	cs
    afc8:	subcs	r6, r6, r2
    afca:	movcs	r5, lr
    afcc:	orrcs.w	r0, r0, ip
    afd0:	lsrs	r3, r3, #1
    afd2:	mov.w	r2, r2, rrx
    afd6:	subs.w	lr, r6, r2
    afda:	sbcs.w	lr, r5, r3
    afde:	ittt	cs
    afe0:	subcs	r6, r6, r2
    afe2:	movcs	r5, lr
    afe4:	orrcs.w	r0, r0, ip, lsr #1
    afe8:	lsrs	r3, r3, #1
    afea:	mov.w	r2, r2, rrx
    afee:	subs.w	lr, r6, r2
    aff2:	sbcs.w	lr, r5, r3
    aff6:	ittt	cs
    aff8:	subcs	r6, r6, r2
    affa:	movcs	r5, lr
    affc:	orrcs.w	r0, r0, ip, lsr #2
    b000:	lsrs	r3, r3, #1
    b002:	mov.w	r2, r2, rrx
    b006:	subs.w	lr, r6, r2
    b00a:	sbcs.w	lr, r5, r3
    b00e:	ittt	cs
    b010:	subcs	r6, r6, r2
    b012:	movcs	r5, lr
    b014:	orrcs.w	r0, r0, ip, lsr #3
    b018:	orrs.w	lr, r5, r6
    b01c:	beq.n	b050 <__aeabi_ddiv+0x114>
    b01e:	mov.w	r5, r5, lsl #4
    b022:	orr.w	r5, r5, r6, lsr #28
    b026:	mov.w	r6, r6, lsl #4
    b02a:	mov.w	r3, r3, lsl #3
    b02e:	orr.w	r3, r3, r2, lsr #29
    b032:	mov.w	r2, r2, lsl #3
    b036:	movs.w	ip, ip, lsr #4
    b03a:	bne.n	afbe <__aeabi_ddiv+0x82>
    b03c:	tst.w	r1, #1048576	; 0x100000
    b040:	bne.n	b05a <__aeabi_ddiv+0x11e>
    b042:	orr.w	r1, r1, r0
    b046:	mov.w	r0, #0
    b04a:	mov.w	ip, #2147483648	; 0x80000000
    b04e:	b.n	afbe <__aeabi_ddiv+0x82>
    b050:	tst.w	r1, #1048576	; 0x100000
    b054:	itt	eq
    b056:	orreq	r1, r0
    b058:	moveq	r0, #0
    b05a:	subs.w	ip, r4, #253	; 0xfd
    b05e:	it	hi
    b060:	cmphi.w	ip, #1792	; 0x700
    b064:	bhi.w	adc6 <__aeabi_dmul+0xde>
    b068:	subs.w	ip, r5, r3
    b06c:	itt	eq
    b06e:	subseq.w	ip, r6, r2
    b072:	movseq.w	ip, r0, lsr #1
    b076:	adcs.w	r0, r0, #0
    b07a:	adc.w	r1, r1, r4, lsl #20
    b07e:	pop	{r4, r5, r6, pc}
    b080:	and.w	lr, lr, #2147483648	; 0x80000000
    b084:	orr.w	r1, lr, r1, lsr #12
    b088:	adds.w	r4, r4, ip, lsr #1
    b08c:	ittt	gt
    b08e:	rsbsgt	r5, r4, ip
    b092:	orrgt.w	r1, r1, r4, lsl #20
    b096:	popgt	{r4, r5, r6, pc}
    b098:	orr.w	r1, r1, #1048576	; 0x100000
    b09c:	mov.w	lr, #0
    b0a0:	subs	r4, #1
    b0a2:	b.n	adc6 <__aeabi_dmul+0xde>
    b0a4:	orr.w	lr, r5, r6
    b0a8:	b.n	adc6 <__aeabi_dmul+0xde>
    b0aa:	and.w	r5, ip, r3, lsr #20
    b0ae:	teq	r4, ip
    b0b2:	it	eq
    b0b4:	teqeq	r5, ip
    b0b8:	beq.w	af32 <__aeabi_dmul+0x24a>
    b0bc:	teq	r4, ip
    b0c0:	bne.n	b0d8 <__aeabi_ddiv+0x19c>
    b0c2:	orrs.w	r4, r0, r1, lsl #12
    b0c6:	bne.w	af32 <__aeabi_dmul+0x24a>
    b0ca:	teq	r5, ip
    b0ce:	bne.w	af1c <__aeabi_dmul+0x234>
    b0d2:	mov	r0, r2
    b0d4:	mov	r1, r3
    b0d6:	b.n	af32 <__aeabi_dmul+0x24a>
    b0d8:	teq	r5, ip
    b0dc:	bne.n	b0ec <__aeabi_ddiv+0x1b0>
    b0de:	orrs.w	r5, r2, r3, lsl #12
    b0e2:	beq.w	aee0 <__aeabi_dmul+0x1f8>
    b0e6:	mov	r0, r2
    b0e8:	mov	r1, r3
    b0ea:	b.n	af32 <__aeabi_dmul+0x24a>
    b0ec:	orrs.w	r6, r0, r1, lsl #1
    b0f0:	it	ne
    b0f2:	orrsne.w	r6, r2, r3, lsl #1
    b0f6:	bne.w	ae84 <__aeabi_dmul+0x19c>
    b0fa:	orrs.w	r4, r0, r1, lsl #1
    b0fe:	bne.w	af1c <__aeabi_dmul+0x234>
    b102:	orrs.w	r5, r2, r3, lsl #1
    b106:	bne.w	aee0 <__aeabi_dmul+0x1f8>
    b10a:	b.n	af32 <__aeabi_dmul+0x24a>

0000b10c <__gedf2>:
    b10c:	mov.w	ip, #4294967295
    b110:	b.n	b120 <__cmpdf2+0x4>
    b112:	nop

0000b114 <__ledf2>:
    b114:	mov.w	ip, #1
    b118:	b.n	b120 <__cmpdf2+0x4>
    b11a:	nop

0000b11c <__cmpdf2>:
    b11c:	mov.w	ip, #1
    b120:	str.w	ip, [sp, #-4]!
    b124:	mov.w	ip, r1, lsl #1
    b128:	mvns.w	ip, ip, asr #21
    b12c:	mov.w	ip, r3, lsl #1
    b130:	it	ne
    b132:	mvnsne.w	ip, ip, asr #21
    b136:	beq.n	b170 <__cmpdf2+0x54>
    b138:	add	sp, #4
    b13a:	orrs.w	ip, r0, r1, lsl #1
    b13e:	ite	eq
    b140:	orrseq.w	ip, r2, r3, lsl #1
    b144:	teqne	r1, r3
    b148:	ittt	eq
    b14a:	teqeq	r0, r2
    b14e:	moveq	r0, #0
    b150:	bxeq	lr
    b152:	cmn.w	r0, #0
    b156:	teq	r1, r3
    b15a:	it	pl
    b15c:	cmppl	r1, r3
    b15e:	it	eq
    b160:	cmpeq	r0, r2
    b162:	ite	cs
    b164:	asrcs	r0, r3, #31
    b166:	mvncc.w	r0, r3, asr #31
    b16a:	orr.w	r0, r0, #1
    b16e:	bx	lr
    b170:	mov.w	ip, r1, lsl #1
    b174:	mvns.w	ip, ip, asr #21
    b178:	bne.n	b180 <__cmpdf2+0x64>
    b17a:	orrs.w	ip, r0, r1, lsl #12
    b17e:	bne.n	b190 <__cmpdf2+0x74>
    b180:	mov.w	ip, r3, lsl #1
    b184:	mvns.w	ip, ip, asr #21
    b188:	bne.n	b138 <__cmpdf2+0x1c>
    b18a:	orrs.w	ip, r2, r3, lsl #12
    b18e:	beq.n	b138 <__cmpdf2+0x1c>
    b190:	ldr.w	r0, [sp], #4
    b194:	bx	lr
    b196:	nop

0000b198 <__aeabi_cdrcmple>:
    b198:	mov	ip, r0
    b19a:	mov	r0, r2
    b19c:	mov	r2, ip
    b19e:	mov	ip, r1
    b1a0:	mov	r1, r3
    b1a2:	mov	r3, ip
    b1a4:	b.n	b1a8 <__aeabi_cdcmpeq>
    b1a6:	nop

0000b1a8 <__aeabi_cdcmpeq>:
    b1a8:	push	{r0, lr}
    b1aa:	bl	b11c <__cmpdf2>
    b1ae:	cmp	r0, #0
    b1b0:	it	mi
    b1b2:	cmnmi.w	r0, #0
    b1b6:	pop	{r0, pc}

0000b1b8 <__aeabi_dcmpeq>:
    b1b8:	str.w	lr, [sp, #-8]!
    b1bc:	bl	b1a8 <__aeabi_cdcmpeq>
    b1c0:	ite	eq
    b1c2:	moveq	r0, #1
    b1c4:	movne	r0, #0
    b1c6:	ldr.w	pc, [sp], #8
    b1ca:	nop

0000b1cc <__aeabi_dcmplt>:
    b1cc:	str.w	lr, [sp, #-8]!
    b1d0:	bl	b1a8 <__aeabi_cdcmpeq>
    b1d4:	ite	cc
    b1d6:	movcc	r0, #1
    b1d8:	movcs	r0, #0
    b1da:	ldr.w	pc, [sp], #8
    b1de:	nop

0000b1e0 <__aeabi_dcmple>:
    b1e0:	str.w	lr, [sp, #-8]!
    b1e4:	bl	b1a8 <__aeabi_cdcmpeq>
    b1e8:	ite	ls
    b1ea:	movls	r0, #1
    b1ec:	movhi	r0, #0
    b1ee:	ldr.w	pc, [sp], #8
    b1f2:	nop

0000b1f4 <__aeabi_dcmpge>:
    b1f4:	str.w	lr, [sp, #-8]!
    b1f8:	bl	b198 <__aeabi_cdrcmple>
    b1fc:	ite	ls
    b1fe:	movls	r0, #1
    b200:	movhi	r0, #0
    b202:	ldr.w	pc, [sp], #8
    b206:	nop

0000b208 <__aeabi_dcmpgt>:
    b208:	str.w	lr, [sp, #-8]!
    b20c:	bl	b198 <__aeabi_cdrcmple>
    b210:	ite	cc
    b212:	movcc	r0, #1
    b214:	movcs	r0, #0
    b216:	ldr.w	pc, [sp], #8
    b21a:	nop

0000b21c <__aeabi_dcmpun>:
    b21c:	mov.w	ip, r1, lsl #1
    b220:	mvns.w	ip, ip, asr #21
    b224:	bne.n	b22c <__aeabi_dcmpun+0x10>
    b226:	orrs.w	ip, r0, r1, lsl #12
    b22a:	bne.n	b242 <__aeabi_dcmpun+0x26>
    b22c:	mov.w	ip, r3, lsl #1
    b230:	mvns.w	ip, ip, asr #21
    b234:	bne.n	b23c <__aeabi_dcmpun+0x20>
    b236:	orrs.w	ip, r2, r3, lsl #12
    b23a:	bne.n	b242 <__aeabi_dcmpun+0x26>
    b23c:	mov.w	r0, #0
    b240:	bx	lr
    b242:	mov.w	r0, #1
    b246:	bx	lr

0000b248 <__aeabi_uldivmod>:
    b248:	cbnz	r3, b260 <__aeabi_uldivmod+0x18>
    b24a:	cbnz	r2, b260 <__aeabi_uldivmod+0x18>
    b24c:	cmp	r1, #0
    b24e:	it	eq
    b250:	cmpeq	r0, #0
    b252:	itt	ne
    b254:	movne.w	r1, #4294967295
    b258:	movne.w	r0, #4294967295
    b25c:	b.w	b55c <__aeabi_idiv0>
    b260:	sub.w	ip, sp, #8
    b264:	strd	ip, lr, [sp, #-16]!
    b268:	bl	b278 <__udivmoddi4>
    b26c:	ldr.w	lr, [sp, #4]
    b270:	ldrd	r2, r3, [sp, #8]
    b274:	add	sp, #16
    b276:	bx	lr

0000b278 <__udivmoddi4>:
    b278:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b27c:	mov	ip, r1
    b27e:	mov	r6, r1
    b280:	mov	r4, r0
    b282:	ldr	r5, [sp, #32]
    b284:	cmp	r3, #0
    b286:	bne.n	b32a <__udivmoddi4+0xb2>
    b288:	cmp	r2, r1
    b28a:	mov	r7, r2
    b28c:	bls.n	b368 <__udivmoddi4+0xf0>
    b28e:	clz	lr, r2
    b292:	cmp.w	lr, #0
    b296:	beq.n	b2b0 <__udivmoddi4+0x38>
    b298:	rsb	r4, lr, #32
    b29c:	lsr.w	r4, r0, r4
    b2a0:	lsl.w	r6, r1, lr
    b2a4:	orr.w	ip, r4, r6
    b2a8:	lsl.w	r7, r2, lr
    b2ac:	lsl.w	r4, r0, lr
    b2b0:	mov.w	r9, r7, lsr #16
    b2b4:	lsrs	r2, r4, #16
    b2b6:	udiv	r0, ip, r9
    b2ba:	uxth.w	r8, r7
    b2be:	mls	r6, r9, r0, ip
    b2c2:	orr.w	r6, r2, r6, lsl #16
    b2c6:	mul.w	r3, r0, r8
    b2ca:	cmp	r3, r6
    b2cc:	bls.n	b2e2 <__udivmoddi4+0x6a>
    b2ce:	adds	r6, r6, r7
    b2d0:	add.w	r2, r0, #4294967295
    b2d4:	bcs.w	b51c <__udivmoddi4+0x2a4>
    b2d8:	cmp	r3, r6
    b2da:	bls.w	b51c <__udivmoddi4+0x2a4>
    b2de:	subs	r0, #2
    b2e0:	add	r6, r7
    b2e2:	subs	r6, r6, r3
    b2e4:	uxth	r2, r4
    b2e6:	udiv	r3, r6, r9
    b2ea:	mls	r6, r9, r3, r6
    b2ee:	orr.w	r4, r2, r6, lsl #16
    b2f2:	mul.w	r8, r3, r8
    b2f6:	cmp	r8, r4
    b2f8:	bls.n	b30e <__udivmoddi4+0x96>
    b2fa:	adds	r4, r4, r7
    b2fc:	add.w	r2, r3, #4294967295
    b300:	bcs.w	b518 <__udivmoddi4+0x2a0>
    b304:	cmp	r8, r4
    b306:	bls.w	b518 <__udivmoddi4+0x2a0>
    b30a:	subs	r3, #2
    b30c:	add	r4, r7
    b30e:	rsb	r4, r8, r4
    b312:	orr.w	r0, r3, r0, lsl #16
    b316:	movs	r1, #0
    b318:	cmp	r5, #0
    b31a:	beq.n	b3e2 <__udivmoddi4+0x16a>
    b31c:	lsr.w	r4, r4, lr
    b320:	movs	r3, #0
    b322:	str	r4, [r5, #0]
    b324:	str	r3, [r5, #4]
    b326:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b32a:	cmp	r3, r1
    b32c:	bls.n	b33e <__udivmoddi4+0xc6>
    b32e:	cmp	r5, #0
    b330:	beq.n	b3de <__udivmoddi4+0x166>
    b332:	movs	r1, #0
    b334:	stmia.w	r5, {r0, r6}
    b338:	mov	r0, r1
    b33a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b33e:	clz	r1, r3
    b342:	cmp	r1, #0
    b344:	bne.w	b468 <__udivmoddi4+0x1f0>
    b348:	cmp	r3, r6
    b34a:	bcc.n	b352 <__udivmoddi4+0xda>
    b34c:	cmp	r2, r0
    b34e:	bhi.w	b542 <__udivmoddi4+0x2ca>
    b352:	subs	r4, r0, r2
    b354:	sbc.w	r6, r6, r3
    b358:	movs	r0, #1
    b35a:	mov	ip, r6
    b35c:	cmp	r5, #0
    b35e:	beq.n	b3e2 <__udivmoddi4+0x16a>
    b360:	stmia.w	r5, {r4, ip}
    b364:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b368:	cbnz	r2, b370 <__udivmoddi4+0xf8>
    b36a:	movs	r7, #1
    b36c:	udiv	r7, r7, r2
    b370:	clz	lr, r7
    b374:	cmp.w	lr, #0
    b378:	bne.n	b3e6 <__udivmoddi4+0x16e>
    b37a:	subs	r3, r6, r7
    b37c:	mov.w	r8, r7, lsr #16
    b380:	uxth.w	ip, r7
    b384:	movs	r1, #1
    b386:	udiv	r0, r3, r8
    b38a:	lsrs	r2, r4, #16
    b38c:	mls	r6, r8, r0, r3
    b390:	orr.w	r6, r2, r6, lsl #16
    b394:	mul.w	r3, ip, r0
    b398:	cmp	r3, r6
    b39a:	bls.n	b3ac <__udivmoddi4+0x134>
    b39c:	adds	r6, r6, r7
    b39e:	add.w	r2, r0, #4294967295
    b3a2:	bcs.n	b3aa <__udivmoddi4+0x132>
    b3a4:	cmp	r3, r6
    b3a6:	bhi.w	b546 <__udivmoddi4+0x2ce>
    b3aa:	mov	r0, r2
    b3ac:	subs	r6, r6, r3
    b3ae:	uxth	r2, r4
    b3b0:	udiv	r3, r6, r8
    b3b4:	mls	r6, r8, r3, r6
    b3b8:	orr.w	r4, r2, r6, lsl #16
    b3bc:	mul.w	ip, ip, r3
    b3c0:	cmp	ip, r4
    b3c2:	bls.n	b3d4 <__udivmoddi4+0x15c>
    b3c4:	adds	r4, r4, r7
    b3c6:	add.w	r2, r3, #4294967295
    b3ca:	bcs.n	b3d2 <__udivmoddi4+0x15a>
    b3cc:	cmp	ip, r4
    b3ce:	bhi.w	b53c <__udivmoddi4+0x2c4>
    b3d2:	mov	r3, r2
    b3d4:	rsb	r4, ip, r4
    b3d8:	orr.w	r0, r3, r0, lsl #16
    b3dc:	b.n	b318 <__udivmoddi4+0xa0>
    b3de:	mov	r1, r5
    b3e0:	mov	r0, r5
    b3e2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b3e6:	rsb	r1, lr, #32
    b3ea:	lsl.w	r3, r6, lr
    b3ee:	lsl.w	r7, r7, lr
    b3f2:	lsr.w	r9, r0, r1
    b3f6:	mov.w	r8, r7, lsr #16
    b3fa:	lsrs	r6, r1
    b3fc:	orr.w	r9, r9, r3
    b400:	udiv	sl, r6, r8
    b404:	mov.w	r4, r9, lsr #16
    b408:	mls	r6, r8, sl, r6
    b40c:	uxth.w	ip, r7
    b410:	orr.w	r3, r4, r6, lsl #16
    b414:	mul.w	r2, sl, ip
    b418:	cmp	r2, r3
    b41a:	lsl.w	r4, r0, lr
    b41e:	bls.n	b436 <__udivmoddi4+0x1be>
    b420:	adds	r3, r3, r7
    b422:	add.w	r1, sl, #4294967295
    b426:	bcs.w	b538 <__udivmoddi4+0x2c0>
    b42a:	cmp	r2, r3
    b42c:	bls.w	b538 <__udivmoddi4+0x2c0>
    b430:	sub.w	sl, sl, #2
    b434:	add	r3, r7
    b436:	subs	r3, r3, r2
    b438:	uxth.w	r9, r9
    b43c:	udiv	r1, r3, r8
    b440:	mls	r3, r8, r1, r3
    b444:	orr.w	r3, r9, r3, lsl #16
    b448:	mul.w	r6, r1, ip
    b44c:	cmp	r6, r3
    b44e:	bls.n	b460 <__udivmoddi4+0x1e8>
    b450:	adds	r3, r3, r7
    b452:	add.w	r2, r1, #4294967295
    b456:	bcs.n	b530 <__udivmoddi4+0x2b8>
    b458:	cmp	r6, r3
    b45a:	bls.n	b530 <__udivmoddi4+0x2b8>
    b45c:	subs	r1, #2
    b45e:	add	r3, r7
    b460:	subs	r3, r3, r6
    b462:	orr.w	r1, r1, sl, lsl #16
    b466:	b.n	b386 <__udivmoddi4+0x10e>
    b468:	rsb	lr, r1, #32
    b46c:	lsr.w	r4, r2, lr
    b470:	lsls	r3, r1
    b472:	orrs	r3, r4
    b474:	lsr.w	r7, r0, lr
    b478:	lsl.w	r4, r6, r1
    b47c:	mov.w	ip, r3, lsr #16
    b480:	lsr.w	r6, r6, lr
    b484:	orrs	r4, r7
    b486:	udiv	r9, r6, ip
    b48a:	lsrs	r7, r4, #16
    b48c:	mls	r6, ip, r9, r6
    b490:	uxth.w	r8, r3
    b494:	orr.w	r6, r7, r6, lsl #16
    b498:	mul.w	r7, r9, r8
    b49c:	cmp	r7, r6
    b49e:	lsl.w	r2, r2, r1
    b4a2:	lsl.w	sl, r0, r1
    b4a6:	bls.n	b4ba <__udivmoddi4+0x242>
    b4a8:	adds	r6, r6, r3
    b4aa:	add.w	r0, r9, #4294967295
    b4ae:	bcs.n	b534 <__udivmoddi4+0x2bc>
    b4b0:	cmp	r7, r6
    b4b2:	bls.n	b534 <__udivmoddi4+0x2bc>
    b4b4:	sub.w	r9, r9, #2
    b4b8:	add	r6, r3
    b4ba:	subs	r6, r6, r7
    b4bc:	uxth	r0, r4
    b4be:	udiv	r4, r6, ip
    b4c2:	mls	r6, ip, r4, r6
    b4c6:	orr.w	r7, r0, r6, lsl #16
    b4ca:	mul.w	r8, r4, r8
    b4ce:	cmp	r8, r7
    b4d0:	bls.n	b4e2 <__udivmoddi4+0x26a>
    b4d2:	adds	r7, r7, r3
    b4d4:	add.w	r0, r4, #4294967295
    b4d8:	bcs.n	b52c <__udivmoddi4+0x2b4>
    b4da:	cmp	r8, r7
    b4dc:	bls.n	b52c <__udivmoddi4+0x2b4>
    b4de:	subs	r4, #2
    b4e0:	add	r7, r3
    b4e2:	orr.w	r0, r4, r9, lsl #16
    b4e6:	rsb	r7, r8, r7
    b4ea:	umull	r8, r9, r0, r2
    b4ee:	cmp	r7, r9
    b4f0:	mov	r4, r8
    b4f2:	mov	r6, r9
    b4f4:	bcc.n	b520 <__udivmoddi4+0x2a8>
    b4f6:	beq.n	b54c <__udivmoddi4+0x2d4>
    b4f8:	cbz	r5, b554 <__udivmoddi4+0x2dc>
    b4fa:	subs.w	r3, sl, r4
    b4fe:	sbc.w	r7, r7, r6
    b502:	lsl.w	lr, r7, lr
    b506:	lsrs	r3, r1
    b508:	lsrs	r7, r1
    b50a:	orr.w	r3, lr, r3
    b50e:	stmia.w	r5, {r3, r7}
    b512:	movs	r1, #0
    b514:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b518:	mov	r3, r2
    b51a:	b.n	b30e <__udivmoddi4+0x96>
    b51c:	mov	r0, r2
    b51e:	b.n	b2e2 <__udivmoddi4+0x6a>
    b520:	subs.w	r4, r8, r2
    b524:	sbc.w	r6, r9, r3
    b528:	subs	r0, #1
    b52a:	b.n	b4f8 <__udivmoddi4+0x280>
    b52c:	mov	r4, r0
    b52e:	b.n	b4e2 <__udivmoddi4+0x26a>
    b530:	mov	r1, r2
    b532:	b.n	b460 <__udivmoddi4+0x1e8>
    b534:	mov	r9, r0
    b536:	b.n	b4ba <__udivmoddi4+0x242>
    b538:	mov	sl, r1
    b53a:	b.n	b436 <__udivmoddi4+0x1be>
    b53c:	subs	r3, #2
    b53e:	add	r4, r7
    b540:	b.n	b3d4 <__udivmoddi4+0x15c>
    b542:	mov	r0, r1
    b544:	b.n	b35c <__udivmoddi4+0xe4>
    b546:	subs	r0, #2
    b548:	add	r6, r7
    b54a:	b.n	b3ac <__udivmoddi4+0x134>
    b54c:	cmp	sl, r8
    b54e:	bcc.n	b520 <__udivmoddi4+0x2a8>
    b550:	mov	r6, r7
    b552:	b.n	b4f8 <__udivmoddi4+0x280>
    b554:	mov	r1, r5
    b556:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b55a:	nop

0000b55c <__aeabi_idiv0>:
    b55c:	bx	lr
    b55e:	nop

0000b560 <fcvtf>:
    b560:	push	{r4, r5, r6, lr}
    b562:	mov	r4, r0
    b564:	vmov	r0, s0
    b568:	mov	r5, r1
    b56a:	mov	r6, r2
    b56c:	bl	ac40 <__aeabi_f2d>
    b570:	mov	r2, r6
    b572:	vmov	d0, r0, r1
    b576:	movs	r3, #0
    b578:	mov	r1, r5
    b57a:	mov	r0, r4
    b57c:	ldmia.w	sp!, {r4, r5, r6, lr}
    b580:	b.w	ea4c <fcvtbuf>

0000b584 <__errno>:
    b584:	ldr	r3, [pc, #4]	; (b58c <__errno+0x8>)
    b586:	ldr	r0, [r3, #0]
    b588:	bx	lr
    b58a:	nop
    b58c:	.word	0x200017bc

0000b590 <__libc_init_array>:
    b590:	push	{r4, r5, r6, lr}
    b592:	ldr	r6, [pc, #60]	; (b5d0 <__libc_init_array+0x40>)
    b594:	ldr	r5, [pc, #60]	; (b5d4 <__libc_init_array+0x44>)
    b596:	subs	r6, r6, r5
    b598:	asrs	r6, r6, #2
    b59a:	it	ne
    b59c:	movne	r4, #0
    b59e:	beq.n	b5ac <__libc_init_array+0x1c>
    b5a0:	adds	r4, #1
    b5a2:	ldr.w	r3, [r5], #4
    b5a6:	blx	r3
    b5a8:	cmp	r6, r4
    b5aa:	bne.n	b5a0 <__libc_init_array+0x10>
    b5ac:	ldr	r6, [pc, #40]	; (b5d8 <__libc_init_array+0x48>)
    b5ae:	ldr	r5, [pc, #44]	; (b5dc <__libc_init_array+0x4c>)
    b5b0:	subs	r6, r6, r5
    b5b2:	bl	f6b8 <___init_veneer>
    b5b6:	asrs	r6, r6, #2
    b5b8:	it	ne
    b5ba:	movne	r4, #0
    b5bc:	beq.n	b5cc <__libc_init_array+0x3c>
    b5be:	adds	r4, #1
    b5c0:	ldr.w	r3, [r5], #4
    b5c4:	blx	r3
    b5c6:	cmp	r6, r4
    b5c8:	bne.n	b5be <__libc_init_array+0x2e>
    b5ca:	pop	{r4, r5, r6, pc}
    b5cc:	pop	{r4, r5, r6, pc}
    b5ce:	nop
    b5d0:	.word	0x60001aa0
    b5d4:	.word	0x60001aa0
    b5d8:	.word	0x60001aac
    b5dc:	.word	0x60001aa0

0000b5e0 <_malloc_r>:
    b5e0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b5e4:	add.w	r5, r1, #11
    b5e8:	cmp	r5, #22
    b5ea:	sub	sp, #12
    b5ec:	mov	r6, r0
    b5ee:	bls.w	b730 <_malloc_r+0x150>
    b5f2:	bics.w	r5, r5, #7
    b5f6:	bmi.w	b778 <_malloc_r+0x198>
    b5fa:	cmp	r1, r5
    b5fc:	bhi.w	b778 <_malloc_r+0x198>
    b600:	bl	bce0 <__malloc_lock>
    b604:	cmp.w	r5, #504	; 0x1f8
    b608:	bcc.w	bb44 <_malloc_r+0x564>
    b60c:	lsrs	r3, r5, #9
    b60e:	beq.w	b786 <_malloc_r+0x1a6>
    b612:	cmp	r3, #4
    b614:	bhi.w	b91e <_malloc_r+0x33e>
    b618:	lsrs	r0, r5, #6
    b61a:	add.w	lr, r0, #57	; 0x39
    b61e:	mov.w	r3, lr, lsl #1
    b622:	adds	r0, #56	; 0x38
    b624:	ldr	r7, [pc, #784]	; (b938 <_malloc_r+0x358>)
    b626:	add.w	r3, r7, r3, lsl #2
    b62a:	sub.w	r1, r3, #8
    b62e:	ldr	r4, [r3, #4]
    b630:	cmp	r1, r4
    b632:	bne.n	b644 <_malloc_r+0x64>
    b634:	b.n	b790 <_malloc_r+0x1b0>
    b636:	cmp	r2, #0
    b638:	bge.w	b794 <_malloc_r+0x1b4>
    b63c:	ldr	r4, [r4, #12]
    b63e:	cmp	r1, r4
    b640:	beq.w	b790 <_malloc_r+0x1b0>
    b644:	ldr	r3, [r4, #4]
    b646:	bic.w	r3, r3, #3
    b64a:	subs	r2, r3, r5
    b64c:	cmp	r2, #15
    b64e:	ble.n	b636 <_malloc_r+0x56>
    b650:	ldr	r1, [pc, #740]	; (b938 <_malloc_r+0x358>)
    b652:	ldr	r4, [r7, #16]
    b654:	add.w	lr, r1, #8
    b658:	cmp	r4, lr
    b65a:	beq.w	b9c4 <_malloc_r+0x3e4>
    b65e:	ldr	r3, [r4, #4]
    b660:	bic.w	r3, r3, #3
    b664:	subs	r2, r3, r5
    b666:	cmp	r2, #15
    b668:	bgt.w	b99e <_malloc_r+0x3be>
    b66c:	cmp	r2, #0
    b66e:	str.w	lr, [r1, #20]
    b672:	str.w	lr, [r1, #16]
    b676:	bge.w	b7b6 <_malloc_r+0x1d6>
    b67a:	cmp.w	r3, #512	; 0x200
    b67e:	bcs.w	b950 <_malloc_r+0x370>
    b682:	lsrs	r3, r3, #3
    b684:	add.w	ip, r3, #1
    b688:	movs	r2, #1
    b68a:	asrs	r3, r3, #2
    b68c:	lsl.w	r3, r2, r3
    b690:	ldr	r2, [r1, #4]
    b692:	ldr.w	r8, [r1, ip, lsl #3]
    b696:	str.w	r8, [r4, #8]
    b69a:	add.w	r9, r1, ip, lsl #3
    b69e:	orrs	r2, r3
    b6a0:	sub.w	r3, r9, #8
    b6a4:	str	r3, [r4, #12]
    b6a6:	str	r2, [r1, #4]
    b6a8:	str.w	r4, [r1, ip, lsl #3]
    b6ac:	str.w	r4, [r8, #12]
    b6b0:	asrs	r3, r0, #2
    b6b2:	movs	r4, #1
    b6b4:	lsls	r4, r3
    b6b6:	cmp	r4, r2
    b6b8:	bhi.w	b7d0 <_malloc_r+0x1f0>
    b6bc:	tst	r4, r2
    b6be:	bne.n	b6ce <_malloc_r+0xee>
    b6c0:	bic.w	r0, r0, #3
    b6c4:	lsls	r4, r4, #1
    b6c6:	tst	r4, r2
    b6c8:	add.w	r0, r0, #4
    b6cc:	beq.n	b6c4 <_malloc_r+0xe4>
    b6ce:	add.w	r9, r7, r0, lsl #3
    b6d2:	mov	ip, r9
    b6d4:	mov	r8, r0
    b6d6:	ldr.w	r1, [ip, #12]
    b6da:	cmp	ip, r1
    b6dc:	bne.n	b6ee <_malloc_r+0x10e>
    b6de:	b.n	b9c8 <_malloc_r+0x3e8>
    b6e0:	cmp	r2, #0
    b6e2:	bge.w	b9e8 <_malloc_r+0x408>
    b6e6:	ldr	r1, [r1, #12]
    b6e8:	cmp	ip, r1
    b6ea:	beq.w	b9c8 <_malloc_r+0x3e8>
    b6ee:	ldr	r3, [r1, #4]
    b6f0:	bic.w	r3, r3, #3
    b6f4:	subs	r2, r3, r5
    b6f6:	cmp	r2, #15
    b6f8:	ble.n	b6e0 <_malloc_r+0x100>
    b6fa:	mov	r4, r1
    b6fc:	ldr.w	ip, [r1, #12]
    b700:	ldr.w	r8, [r4, #8]!
    b704:	adds	r3, r1, r5
    b706:	orr.w	r5, r5, #1
    b70a:	str	r5, [r1, #4]
    b70c:	orr.w	r1, r2, #1
    b710:	str.w	ip, [r8, #12]
    b714:	mov	r0, r6
    b716:	str.w	r8, [ip, #8]
    b71a:	str	r3, [r7, #20]
    b71c:	str	r3, [r7, #16]
    b71e:	str.w	lr, [r3, #12]
    b722:	str.w	lr, [r3, #8]
    b726:	str	r1, [r3, #4]
    b728:	str	r2, [r3, r2]
    b72a:	bl	bce4 <__malloc_unlock>
    b72e:	b.n	b770 <_malloc_r+0x190>
    b730:	cmp	r1, #16
    b732:	bhi.n	b778 <_malloc_r+0x198>
    b734:	bl	bce0 <__malloc_lock>
    b738:	movs	r5, #16
    b73a:	movs	r3, #6
    b73c:	movs	r0, #2
    b73e:	ldr	r7, [pc, #504]	; (b938 <_malloc_r+0x358>)
    b740:	add.w	r3, r7, r3, lsl #2
    b744:	sub.w	r2, r3, #8
    b748:	ldr	r4, [r3, #4]
    b74a:	cmp	r4, r2
    b74c:	beq.w	b9da <_malloc_r+0x3fa>
    b750:	ldr	r3, [r4, #4]
    b752:	ldr	r1, [r4, #12]
    b754:	ldr	r5, [r4, #8]
    b756:	bic.w	r3, r3, #3
    b75a:	add	r3, r4
    b75c:	mov	r0, r6
    b75e:	ldr	r2, [r3, #4]
    b760:	str	r1, [r5, #12]
    b762:	orr.w	r2, r2, #1
    b766:	str	r5, [r1, #8]
    b768:	str	r2, [r3, #4]
    b76a:	bl	bce4 <__malloc_unlock>
    b76e:	adds	r4, #8
    b770:	mov	r0, r4
    b772:	add	sp, #12
    b774:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b778:	movs	r4, #0
    b77a:	movs	r3, #12
    b77c:	mov	r0, r4
    b77e:	str	r3, [r6, #0]
    b780:	add	sp, #12
    b782:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b786:	movs	r3, #128	; 0x80
    b788:	mov.w	lr, #64	; 0x40
    b78c:	movs	r0, #63	; 0x3f
    b78e:	b.n	b624 <_malloc_r+0x44>
    b790:	mov	r0, lr
    b792:	b.n	b650 <_malloc_r+0x70>
    b794:	add	r3, r4
    b796:	ldr	r1, [r4, #12]
    b798:	ldr	r2, [r3, #4]
    b79a:	ldr	r5, [r4, #8]
    b79c:	orr.w	r2, r2, #1
    b7a0:	str	r1, [r5, #12]
    b7a2:	mov	r0, r6
    b7a4:	str	r5, [r1, #8]
    b7a6:	str	r2, [r3, #4]
    b7a8:	bl	bce4 <__malloc_unlock>
    b7ac:	adds	r4, #8
    b7ae:	mov	r0, r4
    b7b0:	add	sp, #12
    b7b2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b7b6:	add	r3, r4
    b7b8:	mov	r0, r6
    b7ba:	ldr	r2, [r3, #4]
    b7bc:	orr.w	r2, r2, #1
    b7c0:	str	r2, [r3, #4]
    b7c2:	bl	bce4 <__malloc_unlock>
    b7c6:	adds	r4, #8
    b7c8:	mov	r0, r4
    b7ca:	add	sp, #12
    b7cc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b7d0:	ldr	r4, [r7, #8]
    b7d2:	ldr	r3, [r4, #4]
    b7d4:	bic.w	r8, r3, #3
    b7d8:	cmp	r8, r5
    b7da:	bcc.n	b7e6 <_malloc_r+0x206>
    b7dc:	rsb	r3, r5, r8
    b7e0:	cmp	r3, #15
    b7e2:	bgt.w	b8fe <_malloc_r+0x31e>
    b7e6:	ldr	r3, [pc, #340]	; (b93c <_malloc_r+0x35c>)
    b7e8:	ldr.w	r9, [pc, #352]	; b94c <_malloc_r+0x36c>
    b7ec:	ldr	r2, [r3, #0]
    b7ee:	ldr.w	r3, [r9]
    b7f2:	adds	r3, #1
    b7f4:	add	r2, r5
    b7f6:	add.w	sl, r4, r8
    b7fa:	beq.w	babe <_malloc_r+0x4de>
    b7fe:	add.w	r2, r2, #4096	; 0x1000
    b802:	adds	r2, #15
    b804:	bic.w	r2, r2, #4080	; 0xff0
    b808:	bic.w	r2, r2, #15
    b80c:	mov	r1, r2
    b80e:	mov	r0, r6
    b810:	str	r2, [sp, #4]
    b812:	bl	c0c8 <_sbrk_r>
    b816:	cmp.w	r0, #4294967295
    b81a:	mov	fp, r0
    b81c:	ldr	r2, [sp, #4]
    b81e:	beq.w	bad2 <_malloc_r+0x4f2>
    b822:	cmp	sl, r0
    b824:	bhi.w	ba20 <_malloc_r+0x440>
    b828:	ldr	r3, [pc, #276]	; (b940 <_malloc_r+0x360>)
    b82a:	ldr	r1, [r3, #0]
    b82c:	cmp	sl, fp
    b82e:	add	r1, r2
    b830:	str	r1, [r3, #0]
    b832:	beq.w	badc <_malloc_r+0x4fc>
    b836:	ldr.w	r0, [r9]
    b83a:	ldr.w	lr, [pc, #272]	; b94c <_malloc_r+0x36c>
    b83e:	adds	r0, #1
    b840:	ittet	ne
    b842:	rsbne	sl, sl, fp
    b846:	addne	r1, sl
    b848:	streq.w	fp, [lr]
    b84c:	strne	r1, [r3, #0]
    b84e:	ands.w	r1, fp, #7
    b852:	beq.w	ba84 <_malloc_r+0x4a4>
    b856:	rsb	r0, r1, #8
    b85a:	rsb	r1, r1, #4096	; 0x1000
    b85e:	add	fp, r0
    b860:	adds	r1, #8
    b862:	add	r2, fp
    b864:	ubfx	r2, r2, #0, #12
    b868:	rsb	r9, r2, r1
    b86c:	mov	r1, r9
    b86e:	mov	r0, r6
    b870:	str	r3, [sp, #4]
    b872:	bl	c0c8 <_sbrk_r>
    b876:	adds	r3, r0, #1
    b878:	ldr	r3, [sp, #4]
    b87a:	beq.w	bafc <_malloc_r+0x51c>
    b87e:	rsb	r2, fp, r0
    b882:	add	r2, r9
    b884:	orr.w	r2, r2, #1
    b888:	ldr	r1, [r3, #0]
    b88a:	str.w	fp, [r7, #8]
    b88e:	add	r1, r9
    b890:	cmp	r4, r7
    b892:	str.w	r2, [fp, #4]
    b896:	str	r1, [r3, #0]
    b898:	ldr.w	r9, [pc, #164]	; b940 <_malloc_r+0x360>
    b89c:	beq.n	b8cc <_malloc_r+0x2ec>
    b89e:	cmp.w	r8, #15
    b8a2:	bls.w	baa0 <_malloc_r+0x4c0>
    b8a6:	ldr	r2, [r4, #4]
    b8a8:	sub.w	r3, r8, #12
    b8ac:	bic.w	r3, r3, #7
    b8b0:	adds	r0, r4, r3
    b8b2:	and.w	r2, r2, #1
    b8b6:	mov.w	lr, #5
    b8ba:	orrs	r2, r3
    b8bc:	cmp	r3, #15
    b8be:	str	r2, [r4, #4]
    b8c0:	str.w	lr, [r0, #4]
    b8c4:	str.w	lr, [r0, #8]
    b8c8:	bhi.w	bb04 <_malloc_r+0x524>
    b8cc:	ldr	r3, [pc, #116]	; (b944 <_malloc_r+0x364>)
    b8ce:	ldr	r4, [r7, #8]
    b8d0:	ldr	r2, [r3, #0]
    b8d2:	cmp	r1, r2
    b8d4:	it	hi
    b8d6:	strhi	r1, [r3, #0]
    b8d8:	ldr	r3, [pc, #108]	; (b948 <_malloc_r+0x368>)
    b8da:	ldr	r2, [r3, #0]
    b8dc:	cmp	r1, r2
    b8de:	ldr	r2, [r4, #4]
    b8e0:	it	hi
    b8e2:	strhi	r1, [r3, #0]
    b8e4:	bic.w	r2, r2, #3
    b8e8:	cmp	r5, r2
    b8ea:	sub.w	r3, r2, r5
    b8ee:	bhi.n	b8f4 <_malloc_r+0x314>
    b8f0:	cmp	r3, #15
    b8f2:	bgt.n	b8fe <_malloc_r+0x31e>
    b8f4:	mov	r0, r6
    b8f6:	bl	bce4 <__malloc_unlock>
    b8fa:	movs	r4, #0
    b8fc:	b.n	b770 <_malloc_r+0x190>
    b8fe:	adds	r2, r4, r5
    b900:	orr.w	r3, r3, #1
    b904:	orr.w	r5, r5, #1
    b908:	str	r5, [r4, #4]
    b90a:	mov	r0, r6
    b90c:	str	r2, [r7, #8]
    b90e:	str	r3, [r2, #4]
    b910:	bl	bce4 <__malloc_unlock>
    b914:	adds	r4, #8
    b916:	mov	r0, r4
    b918:	add	sp, #12
    b91a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b91e:	cmp	r3, #20
    b920:	bls.n	ba06 <_malloc_r+0x426>
    b922:	cmp	r3, #84	; 0x54
    b924:	bhi.w	ba70 <_malloc_r+0x490>
    b928:	lsrs	r0, r5, #12
    b92a:	add.w	lr, r0, #111	; 0x6f
    b92e:	mov.w	r3, lr, lsl #1
    b932:	adds	r0, #110	; 0x6e
    b934:	b.n	b624 <_malloc_r+0x44>
    b936:	nop
    b938:	.word	0x200013ac
    b93c:	.word	0x20004238
    b940:	.word	0x20004208
    b944:	.word	0x20004230
    b948:	.word	0x20004234
    b94c:	.word	0x200017b4
    b950:	lsrs	r2, r3, #9
    b952:	cmp	r2, #4
    b954:	bls.n	ba14 <_malloc_r+0x434>
    b956:	cmp	r2, #20
    b958:	bhi.w	bac2 <_malloc_r+0x4e2>
    b95c:	add.w	r1, r2, #92	; 0x5c
    b960:	lsls	r1, r1, #1
    b962:	adds	r2, #91	; 0x5b
    b964:	add.w	ip, r7, r1, lsl #2
    b968:	ldr.w	r1, [r7, r1, lsl #2]
    b96c:	ldr.w	r8, [pc, #476]	; bb4c <_malloc_r+0x56c>
    b970:	sub.w	ip, ip, #8
    b974:	cmp	ip, r1
    b976:	beq.w	ba8a <_malloc_r+0x4aa>
    b97a:	ldr	r2, [r1, #4]
    b97c:	bic.w	r2, r2, #3
    b980:	cmp	r3, r2
    b982:	bcs.n	b98a <_malloc_r+0x3aa>
    b984:	ldr	r1, [r1, #8]
    b986:	cmp	ip, r1
    b988:	bne.n	b97a <_malloc_r+0x39a>
    b98a:	ldr.w	ip, [r1, #12]
    b98e:	ldr	r2, [r7, #4]
    b990:	str.w	ip, [r4, #12]
    b994:	str	r1, [r4, #8]
    b996:	str.w	r4, [ip, #8]
    b99a:	str	r4, [r1, #12]
    b99c:	b.n	b6b0 <_malloc_r+0xd0>
    b99e:	adds	r3, r4, r5
    b9a0:	orr.w	r7, r2, #1
    b9a4:	orr.w	r5, r5, #1
    b9a8:	str	r5, [r4, #4]
    b9aa:	mov	r0, r6
    b9ac:	str	r3, [r1, #20]
    b9ae:	str	r3, [r1, #16]
    b9b0:	str.w	lr, [r3, #12]
    b9b4:	str.w	lr, [r3, #8]
    b9b8:	str	r7, [r3, #4]
    b9ba:	str	r2, [r3, r2]
    b9bc:	adds	r4, #8
    b9be:	bl	bce4 <__malloc_unlock>
    b9c2:	b.n	b770 <_malloc_r+0x190>
    b9c4:	ldr	r2, [r1, #4]
    b9c6:	b.n	b6b0 <_malloc_r+0xd0>
    b9c8:	add.w	r8, r8, #1
    b9cc:	tst.w	r8, #3
    b9d0:	add.w	ip, ip, #8
    b9d4:	bne.w	b6d6 <_malloc_r+0xf6>
    b9d8:	b.n	ba3c <_malloc_r+0x45c>
    b9da:	ldr	r4, [r3, #12]
    b9dc:	cmp	r3, r4
    b9de:	it	eq
    b9e0:	addeq	r0, #2
    b9e2:	beq.w	b650 <_malloc_r+0x70>
    b9e6:	b.n	b750 <_malloc_r+0x170>
    b9e8:	add	r3, r1
    b9ea:	mov	r4, r1
    b9ec:	ldr	r2, [r3, #4]
    b9ee:	ldr	r1, [r1, #12]
    b9f0:	ldr.w	r5, [r4, #8]!
    b9f4:	orr.w	r2, r2, #1
    b9f8:	str	r2, [r3, #4]
    b9fa:	mov	r0, r6
    b9fc:	str	r1, [r5, #12]
    b9fe:	str	r5, [r1, #8]
    ba00:	bl	bce4 <__malloc_unlock>
    ba04:	b.n	b770 <_malloc_r+0x190>
    ba06:	add.w	lr, r3, #92	; 0x5c
    ba0a:	add.w	r0, r3, #91	; 0x5b
    ba0e:	mov.w	r3, lr, lsl #1
    ba12:	b.n	b624 <_malloc_r+0x44>
    ba14:	lsrs	r2, r3, #6
    ba16:	add.w	r1, r2, #57	; 0x39
    ba1a:	lsls	r1, r1, #1
    ba1c:	adds	r2, #56	; 0x38
    ba1e:	b.n	b964 <_malloc_r+0x384>
    ba20:	cmp	r4, r7
    ba22:	ldr	r3, [pc, #296]	; (bb4c <_malloc_r+0x56c>)
    ba24:	beq.w	b828 <_malloc_r+0x248>
    ba28:	ldr	r4, [r3, #8]
    ba2a:	ldr	r2, [r4, #4]
    ba2c:	bic.w	r2, r2, #3
    ba30:	b.n	b8e8 <_malloc_r+0x308>
    ba32:	ldr.w	r3, [r9], #-8
    ba36:	cmp	r9, r3
    ba38:	bne.w	bb40 <_malloc_r+0x560>
    ba3c:	tst.w	r0, #3
    ba40:	add.w	r0, r0, #4294967295
    ba44:	bne.n	ba32 <_malloc_r+0x452>
    ba46:	ldr	r3, [r7, #4]
    ba48:	bic.w	r3, r3, r4
    ba4c:	str	r3, [r7, #4]
    ba4e:	lsls	r4, r4, #1
    ba50:	cmp	r4, r3
    ba52:	bhi.w	b7d0 <_malloc_r+0x1f0>
    ba56:	cmp	r4, #0
    ba58:	beq.w	b7d0 <_malloc_r+0x1f0>
    ba5c:	tst	r4, r3
    ba5e:	mov	r0, r8
    ba60:	bne.w	b6ce <_malloc_r+0xee>
    ba64:	lsls	r4, r4, #1
    ba66:	tst	r4, r3
    ba68:	add.w	r0, r0, #4
    ba6c:	beq.n	ba64 <_malloc_r+0x484>
    ba6e:	b.n	b6ce <_malloc_r+0xee>
    ba70:	cmp.w	r3, #340	; 0x154
    ba74:	bhi.n	baa8 <_malloc_r+0x4c8>
    ba76:	lsrs	r0, r5, #15
    ba78:	add.w	lr, r0, #120	; 0x78
    ba7c:	mov.w	r3, lr, lsl #1
    ba80:	adds	r0, #119	; 0x77
    ba82:	b.n	b624 <_malloc_r+0x44>
    ba84:	mov.w	r1, #4096	; 0x1000
    ba88:	b.n	b862 <_malloc_r+0x282>
    ba8a:	movs	r1, #1
    ba8c:	ldr.w	r3, [r8, #4]
    ba90:	asrs	r2, r2, #2
    ba92:	lsl.w	r2, r1, r2
    ba96:	orrs	r2, r3
    ba98:	str.w	r2, [r8, #4]
    ba9c:	mov	r1, ip
    ba9e:	b.n	b990 <_malloc_r+0x3b0>
    baa0:	movs	r3, #1
    baa2:	str.w	r3, [fp, #4]
    baa6:	b.n	b8f4 <_malloc_r+0x314>
    baa8:	movw	r2, #1364	; 0x554
    baac:	cmp	r3, r2
    baae:	bhi.n	baf2 <_malloc_r+0x512>
    bab0:	lsrs	r0, r5, #18
    bab2:	add.w	lr, r0, #125	; 0x7d
    bab6:	mov.w	r3, lr, lsl #1
    baba:	adds	r0, #124	; 0x7c
    babc:	b.n	b624 <_malloc_r+0x44>
    babe:	adds	r2, #16
    bac0:	b.n	b80c <_malloc_r+0x22c>
    bac2:	cmp	r2, #84	; 0x54
    bac4:	bhi.n	bb14 <_malloc_r+0x534>
    bac6:	lsrs	r2, r3, #12
    bac8:	add.w	r1, r2, #111	; 0x6f
    bacc:	lsls	r1, r1, #1
    bace:	adds	r2, #110	; 0x6e
    bad0:	b.n	b964 <_malloc_r+0x384>
    bad2:	ldr	r4, [r7, #8]
    bad4:	ldr	r2, [r4, #4]
    bad6:	bic.w	r2, r2, #3
    bada:	b.n	b8e8 <_malloc_r+0x308>
    badc:	ubfx	r0, sl, #0, #12
    bae0:	cmp	r0, #0
    bae2:	bne.w	b836 <_malloc_r+0x256>
    bae6:	add	r2, r8
    bae8:	ldr	r3, [r7, #8]
    baea:	orr.w	r2, r2, #1
    baee:	str	r2, [r3, #4]
    baf0:	b.n	b8cc <_malloc_r+0x2ec>
    baf2:	movs	r3, #254	; 0xfe
    baf4:	mov.w	lr, #127	; 0x7f
    baf8:	movs	r0, #126	; 0x7e
    bafa:	b.n	b624 <_malloc_r+0x44>
    bafc:	movs	r2, #1
    bafe:	mov.w	r9, #0
    bb02:	b.n	b888 <_malloc_r+0x2a8>
    bb04:	add.w	r1, r4, #8
    bb08:	mov	r0, r6
    bb0a:	bl	ebe8 <_free_r>
    bb0e:	ldr.w	r1, [r9]
    bb12:	b.n	b8cc <_malloc_r+0x2ec>
    bb14:	cmp.w	r2, #340	; 0x154
    bb18:	bhi.n	bb26 <_malloc_r+0x546>
    bb1a:	lsrs	r2, r3, #15
    bb1c:	add.w	r1, r2, #120	; 0x78
    bb20:	lsls	r1, r1, #1
    bb22:	adds	r2, #119	; 0x77
    bb24:	b.n	b964 <_malloc_r+0x384>
    bb26:	movw	r1, #1364	; 0x554
    bb2a:	cmp	r2, r1
    bb2c:	bhi.n	bb3a <_malloc_r+0x55a>
    bb2e:	lsrs	r2, r3, #18
    bb30:	add.w	r1, r2, #125	; 0x7d
    bb34:	lsls	r1, r1, #1
    bb36:	adds	r2, #124	; 0x7c
    bb38:	b.n	b964 <_malloc_r+0x384>
    bb3a:	movs	r1, #254	; 0xfe
    bb3c:	movs	r2, #126	; 0x7e
    bb3e:	b.n	b964 <_malloc_r+0x384>
    bb40:	ldr	r3, [r7, #4]
    bb42:	b.n	ba4e <_malloc_r+0x46e>
    bb44:	lsrs	r0, r5, #3
    bb46:	adds	r3, r0, #1
    bb48:	lsls	r3, r3, #1
    bb4a:	b.n	b73e <_malloc_r+0x15e>
    bb4c:	.word	0x200013ac

0000bb50 <__ascii_mbtowc>:
    bb50:	sub	sp, #8
    bb52:	cbz	r1, bb68 <__ascii_mbtowc+0x18>
    bb54:	cbz	r2, bb6e <__ascii_mbtowc+0x1e>
    bb56:	cbz	r3, bb74 <__ascii_mbtowc+0x24>
    bb58:	ldrb	r3, [r2, #0]
    bb5a:	str	r3, [r1, #0]
    bb5c:	ldrb	r2, [r2, #0]
    bb5e:	adds	r0, r2, #0
    bb60:	it	ne
    bb62:	movne	r0, #1
    bb64:	add	sp, #8
    bb66:	bx	lr
    bb68:	add	r1, sp, #4
    bb6a:	cmp	r2, #0
    bb6c:	bne.n	bb56 <__ascii_mbtowc+0x6>
    bb6e:	mov	r0, r2
    bb70:	add	sp, #8
    bb72:	bx	lr
    bb74:	mvn.w	r0, #1
    bb78:	b.n	bb64 <__ascii_mbtowc+0x14>
    bb7a:	nop

0000bb7c <memmove>:
    bb7c:	cmp	r0, r1
    bb7e:	push	{r4, r5, r6, r7, lr}
    bb80:	bls.n	bb9e <memmove+0x22>
    bb82:	adds	r3, r1, r2
    bb84:	cmp	r0, r3
    bb86:	bcs.n	bb9e <memmove+0x22>
    bb88:	adds	r1, r0, r2
    bb8a:	cmp	r2, #0
    bb8c:	beq.n	bc32 <memmove+0xb6>
    bb8e:	subs	r2, r3, r2
    bb90:	ldrb.w	r4, [r3, #-1]!
    bb94:	strb.w	r4, [r1, #-1]!
    bb98:	cmp	r3, r2
    bb9a:	bne.n	bb90 <memmove+0x14>
    bb9c:	pop	{r4, r5, r6, r7, pc}
    bb9e:	cmp	r2, #15
    bba0:	bls.n	bc34 <memmove+0xb8>
    bba2:	orr.w	r3, r1, r0
    bba6:	lsls	r3, r3, #30
    bba8:	bne.n	bc38 <memmove+0xbc>
    bbaa:	add.w	r4, r0, #16
    bbae:	add.w	r3, r1, #16
    bbb2:	mov	r5, r2
    bbb4:	ldr.w	r6, [r3, #-16]
    bbb8:	str.w	r6, [r4, #-16]
    bbbc:	ldr.w	r6, [r3, #-12]
    bbc0:	str.w	r6, [r4, #-12]
    bbc4:	ldr.w	r6, [r3, #-8]
    bbc8:	str.w	r6, [r4, #-8]
    bbcc:	subs	r5, #16
    bbce:	ldr.w	r6, [r3, #-4]
    bbd2:	str.w	r6, [r4, #-4]
    bbd6:	cmp	r5, #15
    bbd8:	add.w	r3, r3, #16
    bbdc:	add.w	r4, r4, #16
    bbe0:	bhi.n	bbb4 <memmove+0x38>
    bbe2:	sub.w	r3, r2, #16
    bbe6:	bic.w	r3, r3, #15
    bbea:	and.w	lr, r2, #15
    bbee:	adds	r3, #16
    bbf0:	cmp.w	lr, #3
    bbf4:	add	r1, r3
    bbf6:	add	r3, r0
    bbf8:	bls.n	bc3e <memmove+0xc2>
    bbfa:	subs	r6, r3, #4
    bbfc:	mov	r5, r1
    bbfe:	mov	r4, lr
    bc00:	subs	r4, #4
    bc02:	ldr.w	r7, [r5], #4
    bc06:	str.w	r7, [r6, #4]!
    bc0a:	cmp	r4, #3
    bc0c:	bhi.n	bc00 <memmove+0x84>
    bc0e:	sub.w	r4, lr, #4
    bc12:	bic.w	r4, r4, #3
    bc16:	adds	r4, #4
    bc18:	add	r3, r4
    bc1a:	add	r1, r4
    bc1c:	and.w	r2, r2, #3
    bc20:	cbz	r2, bc3c <memmove+0xc0>
    bc22:	subs	r3, #1
    bc24:	add	r2, r1
    bc26:	ldrb.w	r4, [r1], #1
    bc2a:	strb.w	r4, [r3, #1]!
    bc2e:	cmp	r2, r1
    bc30:	bne.n	bc26 <memmove+0xaa>
    bc32:	pop	{r4, r5, r6, r7, pc}
    bc34:	mov	r3, r0
    bc36:	b.n	bc20 <memmove+0xa4>
    bc38:	mov	r3, r0
    bc3a:	b.n	bc22 <memmove+0xa6>
    bc3c:	pop	{r4, r5, r6, r7, pc}
    bc3e:	mov	r2, lr
    bc40:	b.n	bc20 <memmove+0xa4>
    bc42:	nop

0000bc44 <memset>:
    bc44:	push	{r4, r5, r6}
    bc46:	lsls	r4, r0, #30
    bc48:	beq.n	bcd8 <memset+0x94>
    bc4a:	subs	r4, r2, #1
    bc4c:	cmp	r2, #0
    bc4e:	beq.n	bcd4 <memset+0x90>
    bc50:	uxtb	r5, r1
    bc52:	mov	r3, r0
    bc54:	b.n	bc5c <memset+0x18>
    bc56:	subs	r2, r4, #1
    bc58:	cbz	r4, bcd4 <memset+0x90>
    bc5a:	mov	r4, r2
    bc5c:	strb.w	r5, [r3], #1
    bc60:	lsls	r2, r3, #30
    bc62:	bne.n	bc56 <memset+0x12>
    bc64:	cmp	r4, #3
    bc66:	bls.n	bcc6 <memset+0x82>
    bc68:	uxtb	r5, r1
    bc6a:	orr.w	r5, r5, r5, lsl #8
    bc6e:	cmp	r4, #15
    bc70:	orr.w	r5, r5, r5, lsl #16
    bc74:	bls.n	bcaa <memset+0x66>
    bc76:	add.w	r2, r3, #16
    bc7a:	mov	r6, r4
    bc7c:	subs	r6, #16
    bc7e:	cmp	r6, #15
    bc80:	str.w	r5, [r2, #-16]
    bc84:	str.w	r5, [r2, #-12]
    bc88:	str.w	r5, [r2, #-8]
    bc8c:	str.w	r5, [r2, #-4]
    bc90:	add.w	r2, r2, #16
    bc94:	bhi.n	bc7c <memset+0x38>
    bc96:	sub.w	r2, r4, #16
    bc9a:	bic.w	r2, r2, #15
    bc9e:	and.w	r4, r4, #15
    bca2:	adds	r2, #16
    bca4:	cmp	r4, #3
    bca6:	add	r3, r2
    bca8:	bls.n	bcc6 <memset+0x82>
    bcaa:	mov	r6, r3
    bcac:	mov	r2, r4
    bcae:	subs	r2, #4
    bcb0:	cmp	r2, #3
    bcb2:	str.w	r5, [r6], #4
    bcb6:	bhi.n	bcae <memset+0x6a>
    bcb8:	subs	r2, r4, #4
    bcba:	bic.w	r2, r2, #3
    bcbe:	adds	r2, #4
    bcc0:	add	r3, r2
    bcc2:	and.w	r4, r4, #3
    bcc6:	cbz	r4, bcd4 <memset+0x90>
    bcc8:	uxtb	r1, r1
    bcca:	add	r4, r3
    bccc:	strb.w	r1, [r3], #1
    bcd0:	cmp	r3, r4
    bcd2:	bne.n	bccc <memset+0x88>
    bcd4:	pop	{r4, r5, r6}
    bcd6:	bx	lr
    bcd8:	mov	r4, r2
    bcda:	mov	r3, r0
    bcdc:	b.n	bc64 <memset+0x20>
    bcde:	nop

0000bce0 <__malloc_lock>:
    bce0:	bx	lr
    bce2:	nop

0000bce4 <__malloc_unlock>:
    bce4:	bx	lr
    bce6:	nop

0000bce8 <_realloc_r>:
    bce8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bcec:	mov	r7, r2
    bcee:	sub	sp, #12
    bcf0:	cmp	r1, #0
    bcf2:	beq.w	be78 <_realloc_r+0x190>
    bcf6:	mov	r6, r1
    bcf8:	mov	r9, r0
    bcfa:	add.w	r5, r7, #11
    bcfe:	bl	bce0 <__malloc_lock>
    bd02:	ldr.w	lr, [r6, #-4]
    bd06:	cmp	r5, #22
    bd08:	bic.w	r4, lr, #3
    bd0c:	sub.w	r8, r6, #8
    bd10:	bhi.n	bd94 <_realloc_r+0xac>
    bd12:	movs	r2, #16
    bd14:	mov	r5, r2
    bd16:	cmp	r7, r5
    bd18:	bhi.n	bd9e <_realloc_r+0xb6>
    bd1a:	cmp	r4, r2
    bd1c:	bge.n	be0a <_realloc_r+0x122>
    bd1e:	ldr	r3, [pc, #804]	; (c044 <_realloc_r+0x35c>)
    bd20:	ldr	r1, [r3, #8]
    bd22:	add.w	r0, r8, r4
    bd26:	cmp	r0, r1
    bd28:	ldr	r1, [r0, #4]
    bd2a:	beq.w	bee0 <_realloc_r+0x1f8>
    bd2e:	bic.w	r3, r1, #1
    bd32:	add	r3, r0
    bd34:	ldr	r3, [r3, #4]
    bd36:	lsls	r3, r3, #31
    bd38:	bpl.n	be36 <_realloc_r+0x14e>
    bd3a:	tst.w	lr, #1
    bd3e:	beq.n	bdac <_realloc_r+0xc4>
    bd40:	mov	r1, r7
    bd42:	mov	r0, r9
    bd44:	bl	b5e0 <_malloc_r>
    bd48:	mov	r7, r0
    bd4a:	cbz	r0, bd86 <_realloc_r+0x9e>
    bd4c:	ldr.w	r3, [r6, #-4]
    bd50:	bic.w	r3, r3, #1
    bd54:	add	r3, r8
    bd56:	sub.w	r2, r0, #8
    bd5a:	cmp	r2, r3
    bd5c:	beq.w	bfe8 <_realloc_r+0x300>
    bd60:	subs	r2, r4, #4
    bd62:	cmp	r2, #36	; 0x24
    bd64:	bhi.w	bfca <_realloc_r+0x2e2>
    bd68:	cmp	r2, #19
    bd6a:	bhi.w	bf76 <_realloc_r+0x28e>
    bd6e:	mov	r3, r0
    bd70:	mov	r2, r6
    bd72:	ldr	r1, [r2, #0]
    bd74:	str	r1, [r3, #0]
    bd76:	ldr	r1, [r2, #4]
    bd78:	str	r1, [r3, #4]
    bd7a:	ldr	r2, [r2, #8]
    bd7c:	str	r2, [r3, #8]
    bd7e:	mov	r1, r6
    bd80:	mov	r0, r9
    bd82:	bl	ebe8 <_free_r>
    bd86:	mov	r0, r9
    bd88:	bl	bce4 <__malloc_unlock>
    bd8c:	mov	r0, r7
    bd8e:	add	sp, #12
    bd90:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bd94:	bic.w	r5, r5, #7
    bd98:	cmp	r5, #0
    bd9a:	mov	r2, r5
    bd9c:	bge.n	bd16 <_realloc_r+0x2e>
    bd9e:	movs	r3, #12
    bda0:	movs	r0, #0
    bda2:	str.w	r3, [r9]
    bda6:	add	sp, #12
    bda8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bdac:	ldr.w	r3, [r6, #-8]
    bdb0:	rsb	sl, r3, r8
    bdb4:	ldr.w	r3, [sl, #4]
    bdb8:	bic.w	ip, r3, #3
    bdbc:	add.w	r3, r4, ip
    bdc0:	cmp	r3, r2
    bdc2:	blt.n	bd40 <_realloc_r+0x58>
    bdc4:	mov	r7, sl
    bdc6:	ldr.w	r1, [sl, #12]
    bdca:	ldr.w	r0, [r7, #8]!
    bdce:	subs	r2, r4, #4
    bdd0:	cmp	r2, #36	; 0x24
    bdd2:	str	r1, [r0, #12]
    bdd4:	str	r0, [r1, #8]
    bdd6:	bhi.w	c008 <_realloc_r+0x320>
    bdda:	cmp	r2, #19
    bddc:	bls.w	c004 <_realloc_r+0x31c>
    bde0:	ldr	r1, [r6, #0]
    bde2:	str.w	r1, [sl, #8]
    bde6:	ldr	r1, [r6, #4]
    bde8:	str.w	r1, [sl, #12]
    bdec:	cmp	r2, #27
    bdee:	bhi.w	c048 <_realloc_r+0x360>
    bdf2:	adds	r6, #8
    bdf4:	add.w	r2, sl, #16
    bdf8:	ldr	r1, [r6, #0]
    bdfa:	str	r1, [r2, #0]
    bdfc:	ldr	r1, [r6, #4]
    bdfe:	str	r1, [r2, #4]
    be00:	ldr	r1, [r6, #8]
    be02:	str	r1, [r2, #8]
    be04:	mov	r6, r7
    be06:	mov	r4, r3
    be08:	mov	r8, sl
    be0a:	subs	r3, r4, r5
    be0c:	cmp	r3, #15
    be0e:	bhi.n	be4c <_realloc_r+0x164>
    be10:	ldr.w	r3, [r8, #4]
    be14:	and.w	r3, r3, #1
    be18:	orrs	r3, r4
    be1a:	add	r4, r8
    be1c:	str.w	r3, [r8, #4]
    be20:	ldr	r3, [r4, #4]
    be22:	orr.w	r3, r3, #1
    be26:	str	r3, [r4, #4]
    be28:	mov	r0, r9
    be2a:	bl	bce4 <__malloc_unlock>
    be2e:	mov	r0, r6
    be30:	add	sp, #12
    be32:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    be36:	bic.w	r1, r1, #3
    be3a:	add	r1, r4
    be3c:	cmp	r1, r2
    be3e:	blt.n	be84 <_realloc_r+0x19c>
    be40:	ldr	r3, [r0, #12]
    be42:	ldr	r2, [r0, #8]
    be44:	mov	r4, r1
    be46:	str	r3, [r2, #12]
    be48:	str	r2, [r3, #8]
    be4a:	b.n	be0a <_realloc_r+0x122>
    be4c:	ldr.w	r2, [r8, #4]
    be50:	add.w	r1, r8, r5
    be54:	and.w	r2, r2, #1
    be58:	orrs	r5, r2
    be5a:	orr.w	r2, r3, #1
    be5e:	add	r3, r1
    be60:	str.w	r5, [r8, #4]
    be64:	str	r2, [r1, #4]
    be66:	ldr	r2, [r3, #4]
    be68:	orr.w	r2, r2, #1
    be6c:	adds	r1, #8
    be6e:	str	r2, [r3, #4]
    be70:	mov	r0, r9
    be72:	bl	ebe8 <_free_r>
    be76:	b.n	be28 <_realloc_r+0x140>
    be78:	mov	r1, r2
    be7a:	add	sp, #12
    be7c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    be80:	b.w	b5e0 <_malloc_r>
    be84:	tst.w	lr, #1
    be88:	bne.w	bd40 <_realloc_r+0x58>
    be8c:	ldr.w	r3, [r6, #-8]
    be90:	rsb	sl, r3, r8
    be94:	ldr.w	r3, [sl, #4]
    be98:	bic.w	ip, r3, #3
    be9c:	add.w	lr, r1, ip
    bea0:	cmp	lr, r2
    bea2:	blt.n	bdbc <_realloc_r+0xd4>
    bea4:	ldr	r3, [r0, #12]
    bea6:	ldr	r2, [r0, #8]
    bea8:	mov	r7, sl
    beaa:	str	r3, [r2, #12]
    beac:	str	r2, [r3, #8]
    beae:	ldr.w	r1, [r7, #8]!
    beb2:	ldr.w	r3, [sl, #12]
    beb6:	str	r3, [r1, #12]
    beb8:	subs	r2, r4, #4
    beba:	cmp	r2, #36	; 0x24
    bebc:	str	r1, [r3, #8]
    bebe:	bhi.w	bff4 <_realloc_r+0x30c>
    bec2:	cmp	r2, #19
    bec4:	bls.n	bf8c <_realloc_r+0x2a4>
    bec6:	ldr	r3, [r6, #0]
    bec8:	str.w	r3, [sl, #8]
    becc:	ldr	r3, [r6, #4]
    bece:	str.w	r3, [sl, #12]
    bed2:	cmp	r2, #27
    bed4:	bhi.w	c018 <_realloc_r+0x330>
    bed8:	adds	r6, #8
    beda:	add.w	r3, sl, #16
    bede:	b.n	bf8e <_realloc_r+0x2a6>
    bee0:	bic.w	fp, r1, #3
    bee4:	add	fp, r4
    bee6:	add.w	r0, r5, #16
    beea:	cmp	fp, r0
    beec:	bge.n	bfa2 <_realloc_r+0x2ba>
    beee:	tst.w	lr, #1
    bef2:	bne.w	bd40 <_realloc_r+0x58>
    bef6:	ldr.w	r1, [r6, #-8]
    befa:	rsb	sl, r1, r8
    befe:	ldr.w	r1, [sl, #4]
    bf02:	bic.w	ip, r1, #3
    bf06:	add	fp, ip
    bf08:	cmp	r0, fp
    bf0a:	bgt.w	bdbc <_realloc_r+0xd4>
    bf0e:	mov	r7, sl
    bf10:	ldr.w	r1, [sl, #12]
    bf14:	ldr.w	r0, [r7, #8]!
    bf18:	subs	r2, r4, #4
    bf1a:	cmp	r2, #36	; 0x24
    bf1c:	str	r1, [r0, #12]
    bf1e:	str	r0, [r1, #8]
    bf20:	bhi.w	c08c <_realloc_r+0x3a4>
    bf24:	cmp	r2, #19
    bf26:	bls.w	c074 <_realloc_r+0x38c>
    bf2a:	ldr	r1, [r6, #0]
    bf2c:	str.w	r1, [sl, #8]
    bf30:	ldr	r1, [r6, #4]
    bf32:	str.w	r1, [sl, #12]
    bf36:	cmp	r2, #27
    bf38:	bhi.w	c09a <_realloc_r+0x3b2>
    bf3c:	adds	r6, #8
    bf3e:	add.w	r2, sl, #16
    bf42:	ldr	r1, [r6, #0]
    bf44:	str	r1, [r2, #0]
    bf46:	ldr	r1, [r6, #4]
    bf48:	str	r1, [r2, #4]
    bf4a:	ldr	r1, [r6, #8]
    bf4c:	str	r1, [r2, #8]
    bf4e:	add.w	r1, sl, r5
    bf52:	rsb	r2, r5, fp
    bf56:	orr.w	r2, r2, #1
    bf5a:	str	r1, [r3, #8]
    bf5c:	str	r2, [r1, #4]
    bf5e:	ldr.w	r3, [sl, #4]
    bf62:	and.w	r3, r3, #1
    bf66:	orrs	r5, r3
    bf68:	mov	r0, r9
    bf6a:	str.w	r5, [sl, #4]
    bf6e:	bl	bce4 <__malloc_unlock>
    bf72:	mov	r0, r7
    bf74:	b.n	be30 <_realloc_r+0x148>
    bf76:	ldr	r3, [r6, #0]
    bf78:	str	r3, [r0, #0]
    bf7a:	ldr	r3, [r6, #4]
    bf7c:	str	r3, [r0, #4]
    bf7e:	cmp	r2, #27
    bf80:	bhi.n	bfd2 <_realloc_r+0x2ea>
    bf82:	add.w	r3, r0, #8
    bf86:	add.w	r2, r6, #8
    bf8a:	b.n	bd72 <_realloc_r+0x8a>
    bf8c:	mov	r3, r7
    bf8e:	ldr	r2, [r6, #0]
    bf90:	str	r2, [r3, #0]
    bf92:	ldr	r2, [r6, #4]
    bf94:	str	r2, [r3, #4]
    bf96:	ldr	r2, [r6, #8]
    bf98:	str	r2, [r3, #8]
    bf9a:	mov	r6, r7
    bf9c:	mov	r4, lr
    bf9e:	mov	r8, sl
    bfa0:	b.n	be0a <_realloc_r+0x122>
    bfa2:	add.w	r1, r8, r5
    bfa6:	rsb	fp, r5, fp
    bfaa:	orr.w	r2, fp, #1
    bfae:	str	r1, [r3, #8]
    bfb0:	str	r2, [r1, #4]
    bfb2:	ldr.w	r3, [r6, #-4]
    bfb6:	and.w	r3, r3, #1
    bfba:	orrs	r5, r3
    bfbc:	mov	r0, r9
    bfbe:	str.w	r5, [r6, #-4]
    bfc2:	bl	bce4 <__malloc_unlock>
    bfc6:	mov	r0, r6
    bfc8:	b.n	be30 <_realloc_r+0x148>
    bfca:	mov	r1, r6
    bfcc:	bl	bb7c <memmove>
    bfd0:	b.n	bd7e <_realloc_r+0x96>
    bfd2:	ldr	r3, [r6, #8]
    bfd4:	str	r3, [r0, #8]
    bfd6:	ldr	r3, [r6, #12]
    bfd8:	str	r3, [r0, #12]
    bfda:	cmp	r2, #36	; 0x24
    bfdc:	beq.n	c030 <_realloc_r+0x348>
    bfde:	add.w	r3, r0, #16
    bfe2:	add.w	r2, r6, #16
    bfe6:	b.n	bd72 <_realloc_r+0x8a>
    bfe8:	ldr.w	r3, [r0, #-4]
    bfec:	bic.w	r3, r3, #3
    bff0:	add	r4, r3
    bff2:	b.n	be0a <_realloc_r+0x122>
    bff4:	mov	r1, r6
    bff6:	mov	r0, r7
    bff8:	mov	r4, lr
    bffa:	mov	r8, sl
    bffc:	bl	bb7c <memmove>
    c000:	mov	r6, r7
    c002:	b.n	be0a <_realloc_r+0x122>
    c004:	mov	r2, r7
    c006:	b.n	bdf8 <_realloc_r+0x110>
    c008:	mov	r1, r6
    c00a:	mov	r0, r7
    c00c:	mov	r4, r3
    c00e:	mov	r8, sl
    c010:	bl	bb7c <memmove>
    c014:	mov	r6, r7
    c016:	b.n	be0a <_realloc_r+0x122>
    c018:	ldr	r3, [r6, #8]
    c01a:	str.w	r3, [sl, #16]
    c01e:	ldr	r3, [r6, #12]
    c020:	str.w	r3, [sl, #20]
    c024:	cmp	r2, #36	; 0x24
    c026:	beq.n	c060 <_realloc_r+0x378>
    c028:	adds	r6, #16
    c02a:	add.w	r3, sl, #24
    c02e:	b.n	bf8e <_realloc_r+0x2a6>
    c030:	ldr	r3, [r6, #16]
    c032:	str	r3, [r0, #16]
    c034:	ldr	r3, [r6, #20]
    c036:	str	r3, [r0, #20]
    c038:	add.w	r2, r6, #24
    c03c:	add.w	r3, r0, #24
    c040:	b.n	bd72 <_realloc_r+0x8a>
    c042:	nop
    c044:	.word	0x200013ac
    c048:	ldr	r1, [r6, #8]
    c04a:	str.w	r1, [sl, #16]
    c04e:	ldr	r1, [r6, #12]
    c050:	str.w	r1, [sl, #20]
    c054:	cmp	r2, #36	; 0x24
    c056:	beq.n	c078 <_realloc_r+0x390>
    c058:	adds	r6, #16
    c05a:	add.w	r2, sl, #24
    c05e:	b.n	bdf8 <_realloc_r+0x110>
    c060:	ldr	r3, [r6, #16]
    c062:	str.w	r3, [sl, #24]
    c066:	ldr	r3, [r6, #20]
    c068:	str.w	r3, [sl, #28]
    c06c:	adds	r6, #24
    c06e:	add.w	r3, sl, #32
    c072:	b.n	bf8e <_realloc_r+0x2a6>
    c074:	mov	r2, r7
    c076:	b.n	bf42 <_realloc_r+0x25a>
    c078:	ldr	r2, [r6, #16]
    c07a:	str.w	r2, [sl, #24]
    c07e:	ldr	r2, [r6, #20]
    c080:	str.w	r2, [sl, #28]
    c084:	adds	r6, #24
    c086:	add.w	r2, sl, #32
    c08a:	b.n	bdf8 <_realloc_r+0x110>
    c08c:	mov	r1, r6
    c08e:	mov	r0, r7
    c090:	str	r3, [sp, #4]
    c092:	bl	bb7c <memmove>
    c096:	ldr	r3, [sp, #4]
    c098:	b.n	bf4e <_realloc_r+0x266>
    c09a:	ldr	r1, [r6, #8]
    c09c:	str.w	r1, [sl, #16]
    c0a0:	ldr	r1, [r6, #12]
    c0a2:	str.w	r1, [sl, #20]
    c0a6:	cmp	r2, #36	; 0x24
    c0a8:	beq.n	c0b2 <_realloc_r+0x3ca>
    c0aa:	adds	r6, #16
    c0ac:	add.w	r2, sl, #24
    c0b0:	b.n	bf42 <_realloc_r+0x25a>
    c0b2:	ldr	r2, [r6, #16]
    c0b4:	str.w	r2, [sl, #24]
    c0b8:	ldr	r2, [r6, #20]
    c0ba:	str.w	r2, [sl, #28]
    c0be:	adds	r6, #24
    c0c0:	add.w	r2, sl, #32
    c0c4:	b.n	bf42 <_realloc_r+0x25a>
    c0c6:	nop

0000c0c8 <_sbrk_r>:
    c0c8:	push	{r3, r4, r5, lr}
    c0ca:	ldr	r4, [pc, #28]	; (c0e8 <_sbrk_r+0x20>)
    c0cc:	movs	r3, #0
    c0ce:	mov	r5, r0
    c0d0:	mov	r0, r1
    c0d2:	str	r3, [r4, #0]
    c0d4:	bl	9884 <_sbrk>
    c0d8:	adds	r3, r0, #1
    c0da:	beq.n	c0de <_sbrk_r+0x16>
    c0dc:	pop	{r3, r4, r5, pc}
    c0de:	ldr	r3, [r4, #0]
    c0e0:	cmp	r3, #0
    c0e2:	beq.n	c0dc <_sbrk_r+0x14>
    c0e4:	str	r3, [r5, #0]
    c0e6:	pop	{r3, r4, r5, pc}
    c0e8:	.word	0x2000ee10

0000c0ec <sprintf>:
    c0ec:	push	{r1, r2, r3}
    c0ee:	push	{r4, r5, r6, r7, lr}
    c0f0:	sub	sp, #112	; 0x70
    c0f2:	add	r3, sp, #132	; 0x84
    c0f4:	ldr	r1, [pc, #60]	; (c134 <sprintf+0x48>)
    c0f6:	ldr.w	r2, [r3], #4
    c0fa:	str	r3, [sp, #4]
    c0fc:	mov	r5, r0
    c0fe:	mvn.w	r4, #2147483648	; 0x80000000
    c102:	ldr	r0, [r1, #0]
    c104:	str	r5, [sp, #8]
    c106:	mov.w	r7, #520	; 0x208
    c10a:	movw	r6, #65535	; 0xffff
    c10e:	add	r1, sp, #8
    c110:	str	r5, [sp, #24]
    c112:	strh.w	r7, [sp, #20]
    c116:	str	r4, [sp, #16]
    c118:	str	r4, [sp, #28]
    c11a:	strh.w	r6, [sp, #22]
    c11e:	bl	c360 <_svfprintf_r>
    c122:	ldr	r3, [sp, #8]
    c124:	movs	r2, #0
    c126:	strb	r2, [r3, #0]
    c128:	add	sp, #112	; 0x70
    c12a:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    c12e:	add	sp, #12
    c130:	bx	lr
    c132:	nop
    c134:	.word	0x200017bc

0000c138 <strcpy>:
    c138:	eor.w	r2, r0, r1
    c13c:	mov	ip, r0
    c13e:	tst.w	r2, #3
    c142:	bne.n	c1e4 <strcpy+0xac>
    c144:	tst.w	r1, #3
    c148:	bne.n	c1b0 <strcpy+0x78>
    c14a:	str.w	r4, [sp, #-4]!
    c14e:	tst.w	r1, #4
    c152:	ldr.w	r3, [r1], #4
    c156:	beq.n	c170 <strcpy+0x38>
    c158:	sub.w	r2, r3, #16843009	; 0x1010101
    c15c:	bics	r2, r3
    c15e:	tst.w	r2, #2155905152	; 0x80808080
    c162:	itt	eq
    c164:	streq.w	r3, [ip], #4
    c168:	ldreq.w	r3, [r1], #4
    c16c:	bne.n	c19c <strcpy+0x64>
    c16e:	nop
    c170:	ldr.w	r4, [r1], #4
    c174:	sub.w	r2, r3, #16843009	; 0x1010101
    c178:	bics	r2, r3
    c17a:	tst.w	r2, #2155905152	; 0x80808080
    c17e:	sub.w	r2, r4, #16843009	; 0x1010101
    c182:	bne.n	c19c <strcpy+0x64>
    c184:	str.w	r3, [ip], #4
    c188:	bics	r2, r4
    c18a:	tst.w	r2, #2155905152	; 0x80808080
    c18e:	itt	eq
    c190:	ldreq.w	r3, [r1], #4
    c194:	streq.w	r4, [ip], #4
    c198:	beq.n	c170 <strcpy+0x38>
    c19a:	mov	r3, r4
    c19c:	strb.w	r3, [ip], #1
    c1a0:	tst.w	r3, #255	; 0xff
    c1a4:	mov.w	r3, r3, ror #8
    c1a8:	bne.n	c19c <strcpy+0x64>
    c1aa:	ldr.w	r4, [sp], #4
    c1ae:	bx	lr
    c1b0:	tst.w	r1, #1
    c1b4:	beq.n	c1c4 <strcpy+0x8c>
    c1b6:	ldrb.w	r2, [r1], #1
    c1ba:	strb.w	r2, [ip], #1
    c1be:	cmp	r2, #0
    c1c0:	it	eq
    c1c2:	bxeq	lr
    c1c4:	tst.w	r1, #2
    c1c8:	beq.n	c14a <strcpy+0x12>
    c1ca:	ldrh.w	r2, [r1], #2
    c1ce:	tst.w	r2, #255	; 0xff
    c1d2:	itet	ne
    c1d4:	strhne.w	r2, [ip], #2
    c1d8:	strbeq.w	r2, [ip]
    c1dc:	tstne.w	r2, #65280	; 0xff00
    c1e0:	bne.n	c14a <strcpy+0x12>
    c1e2:	bx	lr
    c1e4:	ldrb.w	r2, [r1], #1
    c1e8:	strb.w	r2, [ip], #1
    c1ec:	cmp	r2, #0
    c1ee:	bne.n	c1e4 <strcpy+0xac>
    c1f0:	bx	lr
    c1f2:	nop

0000c1f4 <strlcat>:
    c1f4:	push	{r4, r5, r6, lr}
    c1f6:	cbz	r2, c236 <strlcat+0x42>
    c1f8:	ldrb	r6, [r0, #0]
    c1fa:	cbz	r6, c242 <strlcat+0x4e>
    c1fc:	adds	r3, r0, #1
    c1fe:	adds	r6, r0, r2
    c200:	b.n	c208 <strlcat+0x14>
    c202:	ldrb	r5, [r3, #0]
    c204:	adds	r3, #1
    c206:	cbz	r5, c20e <strlcat+0x1a>
    c208:	cmp	r6, r3
    c20a:	mov	r4, r3
    c20c:	bne.n	c202 <strlcat+0xe>
    c20e:	subs	r6, r4, r0
    c210:	subs	r2, r2, r6
    c212:	beq.n	c238 <strlcat+0x44>
    c214:	ldrb	r3, [r1, #0]
    c216:	mov	r5, r1
    c218:	cbz	r3, c22e <strlcat+0x3a>
    c21a:	cmp	r2, #1
    c21c:	beq.n	c224 <strlcat+0x30>
    c21e:	strb	r3, [r4, #0]
    c220:	subs	r2, #1
    c222:	adds	r4, #1
    c224:	ldrb.w	r3, [r5, #1]!
    c228:	cmp	r3, #0
    c22a:	bne.n	c21a <strlcat+0x26>
    c22c:	subs	r3, r5, r1
    c22e:	movs	r2, #0
    c230:	strb	r2, [r4, #0]
    c232:	adds	r0, r6, r3
    c234:	pop	{r4, r5, r6, pc}
    c236:	mov	r6, r2
    c238:	mov	r0, r1
    c23a:	bl	c280 <strlen>
    c23e:	add	r0, r6
    c240:	pop	{r4, r5, r6, pc}
    c242:	mov	r4, r0
    c244:	b.n	c214 <strlcat+0x20>
    c246:	nop

0000c248 <strlcpy>:
    c248:	push	{r4}
    c24a:	mov	r3, r1
    c24c:	cbz	r2, c262 <strlcpy+0x1a>
    c24e:	b.n	c25a <strlcpy+0x12>
    c250:	ldrb.w	r4, [r3], #1
    c254:	strb.w	r4, [r0], #1
    c258:	cbz	r4, c26a <strlcpy+0x22>
    c25a:	subs	r2, #1
    c25c:	bne.n	c250 <strlcpy+0x8>
    c25e:	movs	r2, #0
    c260:	strb	r2, [r0, #0]
    c262:	ldrb.w	r2, [r3], #1
    c266:	cmp	r2, #0
    c268:	bne.n	c262 <strlcpy+0x1a>
    c26a:	subs	r0, r3, r1
    c26c:	subs	r0, #1
    c26e:	ldr.w	r4, [sp], #4
    c272:	bx	lr
	...

0000c280 <strlen>:
    c280:	pld	[r0]
    c284:	strd	r4, r5, [sp, #-8]!
    c288:	bic.w	r1, r0, #7
    c28c:	mvn.w	ip, #0
    c290:	ands.w	r4, r0, #7
    c294:	pld	[r1, #32]
    c298:	bne.w	c32e <strlen+0xae>
    c29c:	mov.w	r4, #0
    c2a0:	mvn.w	r0, #7
    c2a4:	ldrd	r2, r3, [r1]
    c2a8:	pld	[r1, #64]	; 0x40
    c2ac:	add.w	r0, r0, #8
    c2b0:	uadd8	r2, r2, ip
    c2b4:	sel	r2, r4, ip
    c2b8:	uadd8	r3, r3, ip
    c2bc:	sel	r3, r2, ip
    c2c0:	cbnz	r3, c316 <strlen+0x96>
    c2c2:	ldrd	r2, r3, [r1, #8]
    c2c6:	uadd8	r2, r2, ip
    c2ca:	add.w	r0, r0, #8
    c2ce:	sel	r2, r4, ip
    c2d2:	uadd8	r3, r3, ip
    c2d6:	sel	r3, r2, ip
    c2da:	cbnz	r3, c316 <strlen+0x96>
    c2dc:	ldrd	r2, r3, [r1, #16]
    c2e0:	uadd8	r2, r2, ip
    c2e4:	add.w	r0, r0, #8
    c2e8:	sel	r2, r4, ip
    c2ec:	uadd8	r3, r3, ip
    c2f0:	sel	r3, r2, ip
    c2f4:	cbnz	r3, c316 <strlen+0x96>
    c2f6:	ldrd	r2, r3, [r1, #24]
    c2fa:	add.w	r1, r1, #32
    c2fe:	uadd8	r2, r2, ip
    c302:	add.w	r0, r0, #8
    c306:	sel	r2, r4, ip
    c30a:	uadd8	r3, r3, ip
    c30e:	sel	r3, r2, ip
    c312:	cmp	r3, #0
    c314:	beq.n	c2a4 <strlen+0x24>
    c316:	cmp	r2, #0
    c318:	itt	eq
    c31a:	addeq	r0, #4
    c31c:	moveq	r2, r3
    c31e:	rev	r2, r2
    c320:	clz	r2, r2
    c324:	ldrd	r4, r5, [sp], #8
    c328:	add.w	r0, r0, r2, lsr #3
    c32c:	bx	lr
    c32e:	ldrd	r2, r3, [r1]
    c332:	and.w	r5, r4, #3
    c336:	rsb	r0, r4, #0
    c33a:	mov.w	r5, r5, lsl #3
    c33e:	tst.w	r4, #4
    c342:	pld	[r1, #64]	; 0x40
    c346:	lsl.w	r5, ip, r5
    c34a:	orn	r2, r2, r5
    c34e:	itt	ne
    c350:	ornne	r3, r3, r5
    c354:	movne	r2, ip
    c356:	mov.w	r4, #0
    c35a:	b.n	c2b0 <strlen+0x30>
    c35c:	movs	r0, r0
	...

0000c360 <_svfprintf_r>:
    c360:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c364:	sub	sp, #260	; 0x104
    c366:	mov	r4, r1
    c368:	str	r1, [sp, #20]
    c36a:	mov	r5, r2
    c36c:	str	r3, [sp, #40]	; 0x28
    c36e:	str	r0, [sp, #24]
    c370:	bl	edb8 <_localeconv_r>
    c374:	ldr	r3, [r0, #0]
    c376:	str	r3, [sp, #76]	; 0x4c
    c378:	mov	r0, r3
    c37a:	bl	c280 <strlen>
    c37e:	ldrh	r3, [r4, #12]
    c380:	str	r0, [sp, #72]	; 0x48
    c382:	lsls	r6, r3, #24
    c384:	bpl.n	c38e <_svfprintf_r+0x2e>
    c386:	ldr	r3, [r4, #16]
    c388:	cmp	r3, #0
    c38a:	beq.w	d5f0 <_svfprintf_r+0x1290>
    c38e:	vldr	d7, [pc, #664]	; c628 <_svfprintf_r+0x2c8>
    c392:	movs	r3, #0
    c394:	vstr	d7, [sp, #64]	; 0x40
    c398:	str	r3, [sp, #56]	; 0x38
    c39a:	str	r3, [sp, #148]	; 0x94
    c39c:	str	r3, [sp, #144]	; 0x90
    c39e:	str	r3, [sp, #84]	; 0x54
    c3a0:	str	r3, [sp, #28]
    c3a2:	ldr.w	sl, [pc, #656]	; c634 <_svfprintf_r+0x2d4>
    c3a6:	add	r3, sp, #192	; 0xc0
    c3a8:	str	r3, [sp, #140]	; 0x8c
    c3aa:	mov	r9, r3
    c3ac:	mov	r8, r5
    c3ae:	ldrb.w	r3, [r8]
    c3b2:	mov	r4, r8
    c3b4:	cbz	r3, c3f2 <_svfprintf_r+0x92>
    c3b6:	cmp	r3, #37	; 0x25
    c3b8:	bne.n	c3c0 <_svfprintf_r+0x60>
    c3ba:	b.n	c3f2 <_svfprintf_r+0x92>
    c3bc:	cmp	r3, #37	; 0x25
    c3be:	beq.n	c3c8 <_svfprintf_r+0x68>
    c3c0:	ldrb.w	r3, [r4, #1]!
    c3c4:	cmp	r3, #0
    c3c6:	bne.n	c3bc <_svfprintf_r+0x5c>
    c3c8:	rsb	r5, r8, r4
    c3cc:	cbz	r5, c3f2 <_svfprintf_r+0x92>
    c3ce:	ldr	r3, [sp, #144]	; 0x90
    c3d0:	ldr	r2, [sp, #148]	; 0x94
    c3d2:	str.w	r8, [r9]
    c3d6:	adds	r3, #1
    c3d8:	add	r2, r5
    c3da:	cmp	r3, #7
    c3dc:	str.w	r5, [r9, #4]
    c3e0:	str	r2, [sp, #148]	; 0x94
    c3e2:	str	r3, [sp, #144]	; 0x90
    c3e4:	bgt.w	c534 <_svfprintf_r+0x1d4>
    c3e8:	add.w	r9, r9, #8
    c3ec:	ldr	r3, [sp, #28]
    c3ee:	add	r3, r5
    c3f0:	str	r3, [sp, #28]
    c3f2:	ldrb	r3, [r4, #0]
    c3f4:	cmp	r3, #0
    c3f6:	beq.w	c546 <_svfprintf_r+0x1e6>
    c3fa:	movs	r3, #0
    c3fc:	mov	r2, r3
    c3fe:	strb.w	r3, [sp, #111]	; 0x6f
    c402:	mov	r1, r3
    c404:	str	r3, [sp, #32]
    c406:	str	r3, [sp, #12]
    c408:	mov.w	fp, #4294967295
    c40c:	ldrb	r3, [r4, #1]
    c40e:	add.w	r8, r4, #1
    c412:	mov	r5, fp
    c414:	add.w	r8, r8, #1
    c418:	sub.w	r0, r3, #32
    c41c:	cmp	r0, #88	; 0x58
    c41e:	bhi.w	cc8a <_svfprintf_r+0x92a>
    c422:	tbh	[pc, r0, lsl #1]
    c426:	.short	0x03a0
    c428:	.word	0x04320432
    c42c:	.word	0x043203a8
    c430:	.word	0x04320432
    c434:	.word	0x04320432
    c438:	.word	0x03af0432
    c43c:	.word	0x043203bd
    c440:	.word	0x00e2005d
    c444:	.word	0x01090432
    c448:	.word	0x01100110
    c44c:	.word	0x01100110
    c450:	.word	0x01100110
    c454:	.word	0x01100110
    c458:	.word	0x04320110
    c45c:	.word	0x04320432
    c460:	.word	0x04320432
    c464:	.word	0x04320432
    c468:	.word	0x04320432
    c46c:	.word	0x01200432
    c470:	.word	0x04320286
    c474:	.word	0x04320286
    c478:	.word	0x04320432
    c47c:	.word	0x02d40432
    c480:	.word	0x04320432
    c484:	.word	0x043202e5
    c488:	.word	0x04320432
    c48c:	.word	0x04320432
    c490:	.word	0x0432030f
    c494:	.word	0x033d0432
    c498:	.word	0x04320432
    c49c:	.word	0x04320432
    c4a0:	.word	0x04320432
    c4a4:	.word	0x04320432
    c4a8:	.word	0x04320432
    c4ac:	.word	0x0391037e
    c4b0:	.word	0x02860286
    c4b4:	.word	0x03990286
    c4b8:	.word	0x04320391
    c4bc:	.word	0x04070432
    c4c0:	.word	0x04120432
    c4c4:	.word	0x006400a3
    c4c8:	.word	0x043203c2
    c4cc:	.word	0x043203c9
    c4d0:	.word	0x043203ea
    c4d4:	.word	0x03f20432
    c4d8:	ldr	r0, [sp, #32]
    c4da:	str	r3, [sp, #40]	; 0x28
    c4dc:	negs	r0, r0
    c4de:	str	r0, [sp, #32]
    c4e0:	ldr	r3, [sp, #12]
    c4e2:	orr.w	r3, r3, #4
    c4e6:	str	r3, [sp, #12]
    c4e8:	ldrb.w	r3, [r8]
    c4ec:	b.n	c414 <_svfprintf_r+0xb4>
    c4ee:	ldr	r0, [sp, #40]	; 0x28
    c4f0:	mov	fp, r5
    c4f2:	movs	r1, #0
    c4f4:	ldr	r4, [r0, #0]
    c4f6:	strb.w	r1, [sp, #111]	; 0x6f
    c4fa:	adds	r7, r0, #4
    c4fc:	ldr	r0, [sp, #12]
    c4fe:	movs	r3, #48	; 0x30
    c500:	movs	r2, #120	; 0x78
    c502:	cmp	fp, r1
    c504:	strb.w	r3, [sp, #112]	; 0x70
    c508:	mov.w	r5, #0
    c50c:	strb.w	r2, [sp, #113]	; 0x71
    c510:	orr.w	r3, r0, #2
    c514:	blt.w	ccc4 <_svfprintf_r+0x964>
    c518:	bic.w	r3, r0, #128	; 0x80
    c51c:	orr.w	r3, r3, #2
    c520:	str	r3, [sp, #12]
    c522:	orrs.w	r3, r4, r5
    c526:	str	r7, [sp, #40]	; 0x28
    c528:	beq.w	cc70 <_svfprintf_r+0x910>
    c52c:	mov	r7, r1
    c52e:	str	r2, [sp, #52]	; 0x34
    c530:	ldr	r0, [pc, #252]	; (c630 <_svfprintf_r+0x2d0>)
    c532:	b.n	cb02 <_svfprintf_r+0x7a2>
    c534:	add	r2, sp, #140	; 0x8c
    c536:	ldr	r1, [sp, #20]
    c538:	ldr	r0, [sp, #24]
    c53a:	bl	f4a4 <__ssprint_r>
    c53e:	cbnz	r0, c554 <_svfprintf_r+0x1f4>
    c540:	add.w	r9, sp, #192	; 0xc0
    c544:	b.n	c3ec <_svfprintf_r+0x8c>
    c546:	ldr	r3, [sp, #148]	; 0x94
    c548:	cbz	r3, c554 <_svfprintf_r+0x1f4>
    c54a:	ldr	r0, [sp, #24]
    c54c:	ldr	r1, [sp, #20]
    c54e:	add	r2, sp, #140	; 0x8c
    c550:	bl	f4a4 <__ssprint_r>
    c554:	ldr	r3, [sp, #20]
    c556:	ldrh	r3, [r3, #12]
    c558:	tst.w	r3, #64	; 0x40
    c55c:	ldr	r3, [sp, #28]
    c55e:	it	ne
    c560:	movne.w	r3, #4294967295
    c564:	mov	r0, r3
    c566:	add	sp, #260	; 0x104
    c568:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c56c:	str	r3, [sp, #52]	; 0x34
    c56e:	mov	fp, r5
    c570:	cmp	r2, #0
    c572:	bne.w	d9dc <_svfprintf_r+0x167c>
    c576:	ldr	r2, [sp, #12]
    c578:	ands.w	r3, r2, #32
    c57c:	beq.w	ca0c <_svfprintf_r+0x6ac>
    c580:	ldr	r7, [sp, #40]	; 0x28
    c582:	adds	r7, #7
    c584:	bic.w	r3, r7, #7
    c588:	movs	r7, #0
    c58a:	add.w	r1, r3, #8
    c58e:	cmp	fp, r7
    c590:	str	r1, [sp, #40]	; 0x28
    c592:	ldrd	r4, r5, [r3]
    c596:	strb.w	r7, [sp, #111]	; 0x6f
    c59a:	blt.w	d462 <_svfprintf_r+0x1102>
    c59e:	bic.w	r3, r2, #128	; 0x80
    c5a2:	str	r3, [sp, #12]
    c5a4:	orrs.w	r3, r4, r5
    c5a8:	beq.w	ccb4 <_svfprintf_r+0x954>
    c5ac:	add	r6, sp, #192	; 0xc0
    c5ae:	lsrs	r2, r4, #3
    c5b0:	orr.w	r2, r2, r5, lsl #29
    c5b4:	lsrs	r1, r5, #3
    c5b6:	and.w	r3, r4, #7
    c5ba:	mov	r5, r1
    c5bc:	mov	r4, r2
    c5be:	adds	r3, #48	; 0x30
    c5c0:	orrs.w	r2, r4, r5
    c5c4:	strb.w	r3, [r6, #-1]!
    c5c8:	bne.n	c5ae <_svfprintf_r+0x24e>
    c5ca:	ldr	r2, [sp, #12]
    c5cc:	lsls	r1, r2, #31
    c5ce:	bpl.w	c6f0 <_svfprintf_r+0x390>
    c5d2:	cmp	r3, #48	; 0x30
    c5d4:	beq.w	c6f0 <_svfprintf_r+0x390>
    c5d8:	movs	r2, #48	; 0x30
    c5da:	subs	r3, r6, #1
    c5dc:	strb.w	r2, [r6, #-1]
    c5e0:	add	r2, sp, #192	; 0xc0
    c5e2:	subs	r2, r2, r3
    c5e4:	str	r2, [sp, #36]	; 0x24
    c5e6:	mov	r6, r3
    c5e8:	b.n	c6f6 <_svfprintf_r+0x396>
    c5ea:	ldrb.w	r3, [r8]
    c5ee:	cmp	r3, #42	; 0x2a
    c5f0:	add.w	r4, r8, #1
    c5f4:	beq.w	d9c0 <_svfprintf_r+0x1660>
    c5f8:	sub.w	r0, r3, #48	; 0x30
    c5fc:	cmp	r0, #9
    c5fe:	it	ls
    c600:	movls	r5, #0
    c602:	bhi.w	d912 <_svfprintf_r+0x15b2>
    c606:	ldrb.w	r3, [r4], #1
    c60a:	add.w	r5, r5, r5, lsl #2
    c60e:	add.w	r5, r0, r5, lsl #1
    c612:	sub.w	r0, r3, #48	; 0x30
    c616:	cmp	r0, #9
    c618:	bls.n	c606 <_svfprintf_r+0x2a6>
    c61a:	orr.w	r5, r5, r5, asr #31
    c61e:	mov	r8, r4
    c620:	b.n	c418 <_svfprintf_r+0xb8>
    c622:	nop
    c624:	nop.w
	...
    c630:	.word	0x20000d24
    c634:	.word	0x20000dc8
    c638:	ldr	r3, [sp, #12]
    c63a:	orr.w	r3, r3, #128	; 0x80
    c63e:	str	r3, [sp, #12]
    c640:	ldrb.w	r3, [r8]
    c644:	b.n	c414 <_svfprintf_r+0xb4>
    c646:	sub.w	r0, r3, #48	; 0x30
    c64a:	movs	r3, #0
    c64c:	mov	r4, r3
    c64e:	ldrb.w	r3, [r8], #1
    c652:	add.w	r4, r4, r4, lsl #2
    c656:	add.w	r4, r0, r4, lsl #1
    c65a:	sub.w	r0, r3, #48	; 0x30
    c65e:	cmp	r0, #9
    c660:	bls.n	c64e <_svfprintf_r+0x2ee>
    c662:	str	r4, [sp, #32]
    c664:	b.n	c418 <_svfprintf_r+0xb8>
    c666:	str	r3, [sp, #52]	; 0x34
    c668:	mov	fp, r5
    c66a:	cmp	r2, #0
    c66c:	bne.w	d9f8 <_svfprintf_r+0x1698>
    c670:	ldr	r3, [sp, #12]
    c672:	orr.w	r3, r3, #16
    c676:	str	r3, [sp, #12]
    c678:	ldr	r3, [sp, #12]
    c67a:	lsls	r4, r3, #26
    c67c:	bpl.w	d0ee <_svfprintf_r+0xd8e>
    c680:	ldr	r7, [sp, #40]	; 0x28
    c682:	adds	r7, #7
    c684:	bic.w	r7, r7, #7
    c688:	ldrd	r2, r3, [r7]
    c68c:	add.w	r1, r7, #8
    c690:	str	r1, [sp, #40]	; 0x28
    c692:	mov	r4, r2
    c694:	mov	r5, r3
    c696:	cmp	r2, #0
    c698:	sbcs.w	r3, r3, #0
    c69c:	blt.w	d164 <_svfprintf_r+0xe04>
    c6a0:	cmp.w	fp, #0
    c6a4:	ldrb.w	r7, [sp, #111]	; 0x6f
    c6a8:	blt.w	d12a <_svfprintf_r+0xdca>
    c6ac:	ldr	r3, [sp, #12]
    c6ae:	bic.w	r3, r3, #128	; 0x80
    c6b2:	str	r3, [sp, #12]
    c6b4:	orrs.w	r3, r4, r5
    c6b8:	beq.w	ca8c <_svfprintf_r+0x72c>
    c6bc:	cmp	r5, #0
    c6be:	it	eq
    c6c0:	cmpeq	r4, #10
    c6c2:	bcc.w	ca96 <_svfprintf_r+0x736>
    c6c6:	add	r6, sp, #192	; 0xc0
    c6c8:	mov	r0, r4
    c6ca:	mov	r1, r5
    c6cc:	movs	r2, #10
    c6ce:	movs	r3, #0
    c6d0:	bl	b248 <__aeabi_uldivmod>
    c6d4:	adds	r2, #48	; 0x30
    c6d6:	strb.w	r2, [r6, #-1]!
    c6da:	mov	r0, r4
    c6dc:	mov	r1, r5
    c6de:	movs	r3, #0
    c6e0:	movs	r2, #10
    c6e2:	bl	b248 <__aeabi_uldivmod>
    c6e6:	mov	r4, r0
    c6e8:	mov	r5, r1
    c6ea:	orrs.w	r3, r4, r5
    c6ee:	bne.n	c6c8 <_svfprintf_r+0x368>
    c6f0:	add	r3, sp, #192	; 0xc0
    c6f2:	subs	r3, r3, r6
    c6f4:	str	r3, [sp, #36]	; 0x24
    c6f6:	ldr	r3, [sp, #36]	; 0x24
    c6f8:	cmp	r3, fp
    c6fa:	it	lt
    c6fc:	movlt	r3, fp
    c6fe:	str	r3, [sp, #16]
    c700:	movs	r3, #0
    c702:	str	r3, [sp, #60]	; 0x3c
    c704:	cbz	r7, c70c <_svfprintf_r+0x3ac>
    c706:	ldr	r3, [sp, #16]
    c708:	adds	r3, #1
    c70a:	str	r3, [sp, #16]
    c70c:	ldr	r3, [sp, #12]
    c70e:	ands.w	r3, r3, #2
    c712:	str	r3, [sp, #44]	; 0x2c
    c714:	beq.n	c71c <_svfprintf_r+0x3bc>
    c716:	ldr	r3, [sp, #16]
    c718:	adds	r3, #2
    c71a:	str	r3, [sp, #16]
    c71c:	ldr	r3, [sp, #12]
    c71e:	ands.w	r3, r3, #132	; 0x84
    c722:	str	r3, [sp, #48]	; 0x30
    c724:	bne.w	ccde <_svfprintf_r+0x97e>
    c728:	ldr	r3, [sp, #32]
    c72a:	ldr	r2, [sp, #16]
    c72c:	subs	r5, r3, r2
    c72e:	cmp	r5, #0
    c730:	ble.w	ccde <_svfprintf_r+0x97e>
    c734:	cmp	r5, #16
    c736:	ldr	r1, [sp, #148]	; 0x94
    c738:	ldr	r2, [sp, #144]	; 0x90
    c73a:	ldr	r7, [pc, #672]	; (c9dc <_svfprintf_r+0x67c>)
    c73c:	ble.n	c78e <_svfprintf_r+0x42e>
    c73e:	str	r6, [sp, #80]	; 0x50
    c740:	mov	r0, r9
    c742:	movs	r4, #16
    c744:	mov	r9, r7
    c746:	ldr	r6, [sp, #20]
    c748:	mov	r7, r5
    c74a:	ldr	r5, [sp, #24]
    c74c:	b.n	c758 <_svfprintf_r+0x3f8>
    c74e:	subs	r7, #16
    c750:	cmp	r7, #16
    c752:	add.w	r0, r0, #8
    c756:	ble.n	c786 <_svfprintf_r+0x426>
    c758:	adds	r2, #1
    c75a:	ldr	r3, [pc, #640]	; (c9dc <_svfprintf_r+0x67c>)
    c75c:	str	r2, [sp, #144]	; 0x90
    c75e:	adds	r1, #16
    c760:	cmp	r2, #7
    c762:	str	r1, [sp, #148]	; 0x94
    c764:	stmia.w	r0, {r3, r4}
    c768:	ble.n	c74e <_svfprintf_r+0x3ee>
    c76a:	add	r2, sp, #140	; 0x8c
    c76c:	mov	r1, r6
    c76e:	mov	r0, r5
    c770:	bl	f4a4 <__ssprint_r>
    c774:	cmp	r0, #0
    c776:	bne.w	c554 <_svfprintf_r+0x1f4>
    c77a:	subs	r7, #16
    c77c:	cmp	r7, #16
    c77e:	ldr	r1, [sp, #148]	; 0x94
    c780:	ldr	r2, [sp, #144]	; 0x90
    c782:	add	r0, sp, #192	; 0xc0
    c784:	bgt.n	c758 <_svfprintf_r+0x3f8>
    c786:	ldr	r6, [sp, #80]	; 0x50
    c788:	mov	r5, r7
    c78a:	mov	r7, r9
    c78c:	mov	r9, r0
    c78e:	adds	r2, #1
    c790:	adds	r4, r5, r1
    c792:	cmp	r2, #7
    c794:	str	r4, [sp, #148]	; 0x94
    c796:	str	r2, [sp, #144]	; 0x90
    c798:	str.w	r7, [r9]
    c79c:	str.w	r5, [r9, #4]
    c7a0:	bgt.w	cffe <_svfprintf_r+0xc9e>
    c7a4:	ldrb.w	r7, [sp, #111]	; 0x6f
    c7a8:	add.w	r9, r9, #8
    c7ac:	cbz	r7, c7cc <_svfprintf_r+0x46c>
    c7ae:	ldr	r3, [sp, #144]	; 0x90
    c7b0:	adds	r3, #1
    c7b2:	adds	r4, #1
    c7b4:	add.w	r1, sp, #111	; 0x6f
    c7b8:	movs	r2, #1
    c7ba:	cmp	r3, #7
    c7bc:	str	r4, [sp, #148]	; 0x94
    c7be:	str	r3, [sp, #144]	; 0x90
    c7c0:	stmia.w	r9, {r1, r2}
    c7c4:	bgt.w	cf12 <_svfprintf_r+0xbb2>
    c7c8:	add.w	r9, r9, #8
    c7cc:	ldr	r3, [sp, #44]	; 0x2c
    c7ce:	cbz	r3, c7ec <_svfprintf_r+0x48c>
    c7d0:	ldr	r3, [sp, #144]	; 0x90
    c7d2:	adds	r3, #1
    c7d4:	adds	r4, #2
    c7d6:	add	r1, sp, #112	; 0x70
    c7d8:	movs	r2, #2
    c7da:	cmp	r3, #7
    c7dc:	str	r4, [sp, #148]	; 0x94
    c7de:	str	r3, [sp, #144]	; 0x90
    c7e0:	stmia.w	r9, {r1, r2}
    c7e4:	bgt.w	cf2a <_svfprintf_r+0xbca>
    c7e8:	add.w	r9, r9, #8
    c7ec:	ldr	r3, [sp, #48]	; 0x30
    c7ee:	cmp	r3, #128	; 0x80
    c7f0:	beq.w	cdb6 <_svfprintf_r+0xa56>
    c7f4:	ldr	r3, [sp, #36]	; 0x24
    c7f6:	rsb	r7, r3, fp
    c7fa:	cmp	r7, #0
    c7fc:	ble.n	c866 <_svfprintf_r+0x506>
    c7fe:	ldr	r2, [pc, #480]	; (c9e0 <_svfprintf_r+0x680>)
    c800:	ldr	r3, [sp, #144]	; 0x90
    c802:	str	r2, [sp, #44]	; 0x2c
    c804:	cmp	r7, #16
    c806:	ble.n	c84e <_svfprintf_r+0x4ee>
    c808:	mov	r2, r4
    c80a:	mov.w	fp, #16
    c80e:	ldr	r5, [sp, #24]
    c810:	ldr	r4, [sp, #20]
    c812:	b.n	c81e <_svfprintf_r+0x4be>
    c814:	subs	r7, #16
    c816:	cmp	r7, #16
    c818:	add.w	r9, r9, #8
    c81c:	ble.n	c84c <_svfprintf_r+0x4ec>
    c81e:	adds	r3, #1
    c820:	adds	r2, #16
    c822:	cmp	r3, #7
    c824:	str	r2, [sp, #148]	; 0x94
    c826:	str	r3, [sp, #144]	; 0x90
    c828:	stmia.w	r9, {sl, fp}
    c82c:	ble.n	c814 <_svfprintf_r+0x4b4>
    c82e:	add	r2, sp, #140	; 0x8c
    c830:	mov	r1, r4
    c832:	mov	r0, r5
    c834:	bl	f4a4 <__ssprint_r>
    c838:	cmp	r0, #0
    c83a:	bne.w	c554 <_svfprintf_r+0x1f4>
    c83e:	subs	r7, #16
    c840:	cmp	r7, #16
    c842:	ldr	r2, [sp, #148]	; 0x94
    c844:	ldr	r3, [sp, #144]	; 0x90
    c846:	add.w	r9, sp, #192	; 0xc0
    c84a:	bgt.n	c81e <_svfprintf_r+0x4be>
    c84c:	mov	r4, r2
    c84e:	adds	r3, #1
    c850:	ldr	r2, [sp, #44]	; 0x2c
    c852:	str	r3, [sp, #144]	; 0x90
    c854:	add	r4, r7
    c856:	cmp	r3, #7
    c858:	str	r4, [sp, #148]	; 0x94
    c85a:	stmia.w	r9, {r2, r7}
    c85e:	bgt.w	cefa <_svfprintf_r+0xb9a>
    c862:	add.w	r9, r9, #8
    c866:	ldr	r3, [sp, #12]
    c868:	lsls	r2, r3, #23
    c86a:	bmi.w	cce2 <_svfprintf_r+0x982>
    c86e:	ldr	r3, [sp, #144]	; 0x90
    c870:	ldr	r1, [sp, #36]	; 0x24
    c872:	str.w	r6, [r9]
    c876:	adds	r3, #1
    c878:	add	r4, r1
    c87a:	cmp	r3, #7
    c87c:	str	r4, [sp, #148]	; 0x94
    c87e:	str.w	r1, [r9, #4]
    c882:	str	r3, [sp, #144]	; 0x90
    c884:	bgt.w	cece <_svfprintf_r+0xb6e>
    c888:	add.w	r9, r9, #8
    c88c:	ldr	r3, [sp, #12]
    c88e:	lsls	r1, r3, #29
    c890:	bpl.n	c912 <_svfprintf_r+0x5b2>
    c892:	ldr	r3, [sp, #32]
    c894:	ldr	r2, [sp, #16]
    c896:	subs	r5, r3, r2
    c898:	cmp	r5, #0
    c89a:	ble.n	c912 <_svfprintf_r+0x5b2>
    c89c:	cmp	r5, #16
    c89e:	ldr	r3, [sp, #144]	; 0x90
    c8a0:	ldr	r7, [pc, #312]	; (c9dc <_svfprintf_r+0x67c>)
    c8a2:	ble.n	c8ec <_svfprintf_r+0x58c>
    c8a4:	mov	r2, r4
    c8a6:	movs	r6, #16
    c8a8:	ldr.w	fp, [sp, #24]
    c8ac:	ldr	r4, [sp, #20]
    c8ae:	b.n	c8ba <_svfprintf_r+0x55a>
    c8b0:	subs	r5, #16
    c8b2:	cmp	r5, #16
    c8b4:	add.w	r9, r9, #8
    c8b8:	ble.n	c8ea <_svfprintf_r+0x58a>
    c8ba:	adds	r3, #1
    c8bc:	ldr	r1, [pc, #284]	; (c9dc <_svfprintf_r+0x67c>)
    c8be:	str	r3, [sp, #144]	; 0x90
    c8c0:	adds	r2, #16
    c8c2:	cmp	r3, #7
    c8c4:	str	r2, [sp, #148]	; 0x94
    c8c6:	stmia.w	r9, {r1, r6}
    c8ca:	ble.n	c8b0 <_svfprintf_r+0x550>
    c8cc:	add	r2, sp, #140	; 0x8c
    c8ce:	mov	r1, r4
    c8d0:	mov	r0, fp
    c8d2:	bl	f4a4 <__ssprint_r>
    c8d6:	cmp	r0, #0
    c8d8:	bne.w	c554 <_svfprintf_r+0x1f4>
    c8dc:	subs	r5, #16
    c8de:	cmp	r5, #16
    c8e0:	ldr	r2, [sp, #148]	; 0x94
    c8e2:	ldr	r3, [sp, #144]	; 0x90
    c8e4:	add.w	r9, sp, #192	; 0xc0
    c8e8:	bgt.n	c8ba <_svfprintf_r+0x55a>
    c8ea:	mov	r4, r2
    c8ec:	adds	r3, #1
    c8ee:	add	r4, r5
    c8f0:	cmp	r3, #7
    c8f2:	str	r4, [sp, #148]	; 0x94
    c8f4:	str	r3, [sp, #144]	; 0x90
    c8f6:	str.w	r7, [r9]
    c8fa:	str.w	r5, [r9, #4]
    c8fe:	ble.n	c912 <_svfprintf_r+0x5b2>
    c900:	add	r2, sp, #140	; 0x8c
    c902:	ldr	r1, [sp, #20]
    c904:	ldr	r0, [sp, #24]
    c906:	bl	f4a4 <__ssprint_r>
    c90a:	cmp	r0, #0
    c90c:	bne.w	c554 <_svfprintf_r+0x1f4>
    c910:	ldr	r4, [sp, #148]	; 0x94
    c912:	ldr	r3, [sp, #28]
    c914:	ldr	r2, [sp, #32]
    c916:	ldr	r1, [sp, #16]
    c918:	cmp	r2, r1
    c91a:	ite	ge
    c91c:	addge	r3, r3, r2
    c91e:	addlt	r3, r3, r1
    c920:	str	r3, [sp, #28]
    c922:	cmp	r4, #0
    c924:	bne.w	cee6 <_svfprintf_r+0xb86>
    c928:	movs	r3, #0
    c92a:	str	r3, [sp, #144]	; 0x90
    c92c:	add.w	r9, sp, #192	; 0xc0
    c930:	b.n	c3ae <_svfprintf_r+0x4e>
    c932:	str	r3, [sp, #52]	; 0x34
    c934:	mov	fp, r5
    c936:	cmp	r2, #0
    c938:	bne.w	da00 <_svfprintf_r+0x16a0>
    c93c:	ldr	r3, [sp, #12]
    c93e:	ldr	r7, [sp, #40]	; 0x28
    c940:	lsls	r2, r3, #28
    c942:	add.w	r7, r7, #7
    c946:	bpl.w	d432 <_svfprintf_r+0x10d2>
    c94a:	bic.w	r3, r7, #7
    c94e:	vldr	d7, [r3]
    c952:	vstr	d7, [sp, #64]	; 0x40
    c956:	add.w	r2, r3, #8
    c95a:	str	r2, [sp, #40]	; 0x28
    c95c:	ldrd	r1, r2, [sp, #64]	; 0x40
    c960:	bic.w	r3, r2, #2147483648	; 0x80000000
    c964:	str	r1, [sp, #88]	; 0x58
    c966:	str	r3, [sp, #92]	; 0x5c
    c968:	ldrd	r4, r5, [sp, #88]	; 0x58
    c96c:	mov.w	r2, #4294967295
    c970:	mov	r0, r4
    c972:	mov	r1, r5
    c974:	ldr	r3, [pc, #108]	; (c9e4 <_svfprintf_r+0x684>)
    c976:	bl	b21c <__aeabi_dcmpun>
    c97a:	cmp	r0, #0
    c97c:	bne.w	d334 <_svfprintf_r+0xfd4>
    c980:	mov.w	r2, #4294967295
    c984:	ldr	r3, [pc, #92]	; (c9e4 <_svfprintf_r+0x684>)
    c986:	mov	r0, r4
    c988:	mov	r1, r5
    c98a:	bl	b1e0 <__aeabi_dcmple>
    c98e:	cmp	r0, #0
    c990:	bne.w	d334 <_svfprintf_r+0xfd4>
    c994:	movs	r2, #0
    c996:	movs	r3, #0
    c998:	ldrd	r0, r1, [sp, #64]	; 0x40
    c99c:	bl	b1cc <__aeabi_dcmplt>
    c9a0:	cmp	r0, #0
    c9a2:	bne.w	d84a <_svfprintf_r+0x14ea>
    c9a6:	ldrb.w	r7, [sp, #111]	; 0x6f
    c9aa:	ldr	r6, [pc, #60]	; (c9e8 <_svfprintf_r+0x688>)
    c9ac:	ldr	r3, [pc, #60]	; (c9ec <_svfprintf_r+0x68c>)
    c9ae:	ldr	r1, [sp, #12]
    c9b0:	bic.w	r1, r1, #128	; 0x80
    c9b4:	str	r1, [sp, #12]
    c9b6:	ldr	r1, [sp, #52]	; 0x34
    c9b8:	movs	r2, #3
    c9ba:	mov.w	fp, #0
    c9be:	str	r2, [sp, #16]
    c9c0:	cmp	r1, #71	; 0x47
    c9c2:	it	le
    c9c4:	movle	r6, r3
    c9c6:	str	r2, [sp, #36]	; 0x24
    c9c8:	str.w	fp, [sp, #60]	; 0x3c
    c9cc:	b.n	c704 <_svfprintf_r+0x3a4>
    c9ce:	ldr	r3, [sp, #12]
    c9d0:	orr.w	r3, r3, #8
    c9d4:	str	r3, [sp, #12]
    c9d6:	ldrb.w	r3, [r8]
    c9da:	b.n	c414 <_svfprintf_r+0xb4>
    c9dc:	.word	0x20000764
    c9e0:	.word	0x20000dc8
    c9e4:	.word	0x7fefffff
    c9e8:	.word	0x20000d04
    c9ec:	.word	0x20000d00
    c9f0:	str	r3, [sp, #52]	; 0x34
    c9f2:	mov	fp, r5
    c9f4:	cmp	r2, #0
    c9f6:	bne.w	da18 <_svfprintf_r+0x16b8>
    c9fa:	ldr	r3, [sp, #12]
    c9fc:	orr.w	r3, r3, #16
    ca00:	str	r3, [sp, #12]
    ca02:	ldr	r2, [sp, #12]
    ca04:	ands.w	r3, r2, #32
    ca08:	bne.w	c580 <_svfprintf_r+0x220>
    ca0c:	ldr	r1, [sp, #12]
    ca0e:	ands.w	r2, r1, #16
    ca12:	beq.w	d2cc <_svfprintf_r+0xf6c>
    ca16:	ldr	r0, [sp, #40]	; 0x28
    ca18:	strb.w	r3, [sp, #111]	; 0x6f
    ca1c:	cmp.w	fp, #0
    ca20:	ldr	r4, [r0, #0]
    ca22:	add.w	r7, r0, #4
    ca26:	mov.w	r5, #0
    ca2a:	blt.w	d460 <_svfprintf_r+0x1100>
    ca2e:	mov	r2, r1
    ca30:	bic.w	r2, r2, #128	; 0x80
    ca34:	str	r2, [sp, #12]
    ca36:	orrs.w	r2, r4, r5
    ca3a:	str	r7, [sp, #40]	; 0x28
    ca3c:	beq.w	ccb4 <_svfprintf_r+0x954>
    ca40:	mov	r7, r3
    ca42:	b.n	c5ac <_svfprintf_r+0x24c>
    ca44:	str	r3, [sp, #52]	; 0x34
    ca46:	mov	fp, r5
    ca48:	cmp	r2, #0
    ca4a:	bne.w	da10 <_svfprintf_r+0x16b0>
    ca4e:	ldr	r3, [sp, #12]
    ca50:	orr.w	r3, r3, #16
    ca54:	str	r3, [sp, #12]
    ca56:	ldr	r2, [sp, #12]
    ca58:	ands.w	r3, r2, #32
    ca5c:	beq.w	d0b8 <_svfprintf_r+0xd58>
    ca60:	ldr	r7, [sp, #40]	; 0x28
    ca62:	adds	r7, #7
    ca64:	bic.w	r3, r7, #7
    ca68:	movs	r7, #0
    ca6a:	add.w	r1, r3, #8
    ca6e:	cmp	fp, r7
    ca70:	str	r1, [sp, #40]	; 0x28
    ca72:	ldrd	r4, r5, [r3]
    ca76:	strb.w	r7, [sp, #111]	; 0x6f
    ca7a:	blt.w	d12a <_svfprintf_r+0xdca>
    ca7e:	bic.w	r3, r2, #128	; 0x80
    ca82:	str	r3, [sp, #12]
    ca84:	orrs.w	r3, r4, r5
    ca88:	bne.w	c6bc <_svfprintf_r+0x35c>
    ca8c:	cmp.w	fp, #0
    ca90:	beq.w	cc7e <_svfprintf_r+0x91e>
    ca94:	movs	r4, #0
    ca96:	add	r6, sp, #256	; 0x100
    ca98:	adds	r4, #48	; 0x30
    ca9a:	strb.w	r4, [r6, #-65]!
    ca9e:	b.n	c6f0 <_svfprintf_r+0x390>
    caa0:	str	r3, [sp, #52]	; 0x34
    caa2:	mov	fp, r5
    caa4:	cmp	r2, #0
    caa6:	bne.w	da08 <_svfprintf_r+0x16a8>
    caaa:	ldr	r3, [sp, #12]
    caac:	ldr	r0, [pc, #700]	; (cd6c <_svfprintf_r+0xa0c>)
    caae:	lsls	r5, r3, #26
    cab0:	bpl.w	cc1e <_svfprintf_r+0x8be>
    cab4:	ldr	r7, [sp, #40]	; 0x28
    cab6:	adds	r7, #7
    cab8:	bic.w	r3, r7, #7
    cabc:	ldrd	r4, r5, [r3]
    cac0:	add.w	r2, r3, #8
    cac4:	str	r2, [sp, #40]	; 0x28
    cac6:	ldr	r2, [sp, #12]
    cac8:	ands.w	r7, r2, #1
    cacc:	beq.w	cf42 <_svfprintf_r+0xbe2>
    cad0:	orrs.w	r3, r4, r5
    cad4:	beq.w	d4dc <_svfprintf_r+0x117c>
    cad8:	ldrb.w	r2, [sp, #52]	; 0x34
    cadc:	strb.w	r2, [sp, #113]	; 0x71
    cae0:	movs	r7, #0
    cae2:	ldr	r2, [sp, #12]
    cae4:	strb.w	r7, [sp, #111]	; 0x6f
    cae8:	movs	r3, #48	; 0x30
    caea:	cmp	fp, r7
    caec:	strb.w	r3, [sp, #112]	; 0x70
    caf0:	orr.w	r3, r2, #2
    caf4:	blt.w	d854 <_svfprintf_r+0x14f4>
    caf8:	bic.w	r3, r2, #128	; 0x80
    cafc:	orr.w	r3, r3, #2
    cb00:	str	r3, [sp, #12]
    cb02:	add	r6, sp, #192	; 0xc0
    cb04:	lsrs	r3, r4, #4
    cb06:	and.w	r1, r4, #15
    cb0a:	orr.w	r3, r3, r5, lsl #28
    cb0e:	lsrs	r2, r5, #4
    cb10:	mov	r4, r3
    cb12:	mov	r5, r2
    cb14:	ldrb	r3, [r0, r1]
    cb16:	strb.w	r3, [r6, #-1]!
    cb1a:	orrs.w	r3, r4, r5
    cb1e:	bne.n	cb04 <_svfprintf_r+0x7a4>
    cb20:	b.n	c6f0 <_svfprintf_r+0x390>
    cb22:	ldr	r1, [sp, #40]	; 0x28
    cb24:	str	r3, [sp, #52]	; 0x34
    cb26:	ldr	r2, [r1, #0]
    cb28:	strb.w	r2, [sp, #152]	; 0x98
    cb2c:	movs	r3, #0
    cb2e:	mov	r2, r1
    cb30:	mov	r7, r3
    cb32:	strb.w	r3, [sp, #111]	; 0x6f
    cb36:	adds	r2, #4
    cb38:	movs	r3, #1
    cb3a:	str	r3, [sp, #16]
    cb3c:	mov	fp, r7
    cb3e:	str	r7, [sp, #60]	; 0x3c
    cb40:	str	r2, [sp, #40]	; 0x28
    cb42:	str	r3, [sp, #36]	; 0x24
    cb44:	add	r6, sp, #152	; 0x98
    cb46:	b.n	c70c <_svfprintf_r+0x3ac>
    cb48:	str	r3, [sp, #52]	; 0x34
    cb4a:	mov	fp, r5
    cb4c:	cmp	r2, #0
    cb4e:	beq.w	c678 <_svfprintf_r+0x318>
    cb52:	strb.w	r1, [sp, #111]	; 0x6f
    cb56:	b.n	c678 <_svfprintf_r+0x318>
    cb58:	ldr	r3, [sp, #12]
    cb5a:	orr.w	r3, r3, #64	; 0x40
    cb5e:	str	r3, [sp, #12]
    cb60:	ldrb.w	r3, [r8]
    cb64:	b.n	c414 <_svfprintf_r+0xb4>
    cb66:	ldrb.w	r3, [r8]
    cb6a:	cmp	r1, #0
    cb6c:	bne.w	c414 <_svfprintf_r+0xb4>
    cb70:	movs	r2, #1
    cb72:	movs	r1, #32
    cb74:	b.n	c414 <_svfprintf_r+0xb4>
    cb76:	ldr	r3, [sp, #12]
    cb78:	orr.w	r3, r3, #1
    cb7c:	str	r3, [sp, #12]
    cb7e:	ldrb.w	r3, [r8]
    cb82:	b.n	c414 <_svfprintf_r+0xb4>
    cb84:	ldr	r4, [sp, #40]	; 0x28
    cb86:	ldr	r3, [r4, #0]
    cb88:	str	r3, [sp, #32]
    cb8a:	mov	r0, r3
    cb8c:	cmp	r0, #0
    cb8e:	mov	r3, r4
    cb90:	add.w	r3, r3, #4
    cb94:	blt.w	c4d8 <_svfprintf_r+0x178>
    cb98:	str	r3, [sp, #40]	; 0x28
    cb9a:	ldrb.w	r3, [r8]
    cb9e:	b.n	c414 <_svfprintf_r+0xb4>
    cba0:	ldrb.w	r3, [r8]
    cba4:	movs	r2, #1
    cba6:	movs	r1, #43	; 0x2b
    cba8:	b.n	c414 <_svfprintf_r+0xb4>
    cbaa:	ldr	r3, [sp, #12]
    cbac:	orr.w	r3, r3, #32
    cbb0:	str	r3, [sp, #12]
    cbb2:	ldrb.w	r3, [r8]
    cbb6:	b.n	c414 <_svfprintf_r+0xb4>
    cbb8:	ldr	r2, [sp, #40]	; 0x28
    cbba:	str	r3, [sp, #52]	; 0x34
    cbbc:	ldr	r6, [r2, #0]
    cbbe:	movs	r4, #0
    cbc0:	strb.w	r4, [sp, #111]	; 0x6f
    cbc4:	adds	r7, r2, #4
    cbc6:	cmp	r6, #0
    cbc8:	beq.w	d804 <_svfprintf_r+0x14a4>
    cbcc:	cmp	r5, #0
    cbce:	blt.w	d694 <_svfprintf_r+0x1334>
    cbd2:	mov	r2, r5
    cbd4:	mov	r1, r4
    cbd6:	mov	r0, r6
    cbd8:	bl	ede0 <memchr>
    cbdc:	cmp	r0, #0
    cbde:	beq.w	d8a8 <_svfprintf_r+0x1548>
    cbe2:	subs	r3, r0, r6
    cbe4:	str	r3, [sp, #36]	; 0x24
    cbe6:	mov	fp, r4
    cbe8:	bic.w	r3, r3, r3, asr #31
    cbec:	str	r7, [sp, #40]	; 0x28
    cbee:	str	r3, [sp, #16]
    cbf0:	str.w	fp, [sp, #60]	; 0x3c
    cbf4:	ldrb.w	r7, [sp, #111]	; 0x6f
    cbf8:	b.n	c704 <_svfprintf_r+0x3a4>
    cbfa:	str	r3, [sp, #52]	; 0x34
    cbfc:	mov	fp, r5
    cbfe:	cmp	r2, #0
    cc00:	beq.w	ca56 <_svfprintf_r+0x6f6>
    cc04:	strb.w	r1, [sp, #111]	; 0x6f
    cc08:	b.n	ca56 <_svfprintf_r+0x6f6>
    cc0a:	str	r3, [sp, #52]	; 0x34
    cc0c:	mov	fp, r5
    cc0e:	cmp	r2, #0
    cc10:	bne.w	da30 <_svfprintf_r+0x16d0>
    cc14:	ldr	r3, [sp, #12]
    cc16:	ldr	r0, [pc, #344]	; (cd70 <_svfprintf_r+0xa10>)
    cc18:	lsls	r5, r3, #26
    cc1a:	bmi.w	cab4 <_svfprintf_r+0x754>
    cc1e:	ldr	r3, [sp, #12]
    cc20:	lsls	r4, r3, #27
    cc22:	bpl.w	d4a2 <_svfprintf_r+0x1142>
    cc26:	ldr	r2, [sp, #40]	; 0x28
    cc28:	mov	r3, r2
    cc2a:	adds	r3, #4
    cc2c:	ldr	r4, [r2, #0]
    cc2e:	str	r3, [sp, #40]	; 0x28
    cc30:	movs	r5, #0
    cc32:	b.n	cac6 <_svfprintf_r+0x766>
    cc34:	ldrb.w	r3, [r8]
    cc38:	cmp	r3, #108	; 0x6c
    cc3a:	beq.w	d5c2 <_svfprintf_r+0x1262>
    cc3e:	ldr	r0, [sp, #12]
    cc40:	orr.w	r0, r0, #16
    cc44:	str	r0, [sp, #12]
    cc46:	b.w	c414 <_svfprintf_r+0xb4>
    cc4a:	cmp	r2, #0
    cc4c:	bne.w	da28 <_svfprintf_r+0x16c8>
    cc50:	ldr	r3, [sp, #12]
    cc52:	lsls	r3, r3, #26
    cc54:	bpl.w	d306 <_svfprintf_r+0xfa6>
    cc58:	ldr	r2, [sp, #40]	; 0x28
    cc5a:	ldr	r1, [sp, #28]
    cc5c:	ldr	r3, [r2, #0]
    cc5e:	asrs	r5, r1, #31
    cc60:	mov	r0, r1
    cc62:	adds	r2, #4
    cc64:	mov	r1, r5
    cc66:	str	r2, [sp, #40]	; 0x28
    cc68:	strd	r0, r1, [r3]
    cc6c:	b.w	c3ae <_svfprintf_r+0x4e>
    cc70:	ldr	r0, [pc, #252]	; (cd70 <_svfprintf_r+0xa10>)
    cc72:	str	r2, [sp, #52]	; 0x34
    cc74:	cmp.w	fp, #0
    cc78:	bne.w	cf64 <_svfprintf_r+0xc04>
    cc7c:	mov	r7, fp
    cc7e:	mov.w	fp, #0
    cc82:	str.w	fp, [sp, #36]	; 0x24
    cc86:	add	r6, sp, #192	; 0xc0
    cc88:	b.n	c6f6 <_svfprintf_r+0x396>
    cc8a:	str	r3, [sp, #52]	; 0x34
    cc8c:	cmp	r2, #0
    cc8e:	bne.w	da20 <_svfprintf_r+0x16c0>
    cc92:	ldr	r2, [sp, #52]	; 0x34
    cc94:	cmp	r2, #0
    cc96:	beq.w	c546 <_svfprintf_r+0x1e6>
    cc9a:	movs	r3, #0
    cc9c:	movs	r1, #1
    cc9e:	mov	r7, r3
    cca0:	str	r1, [sp, #16]
    cca2:	strb.w	r2, [sp, #152]	; 0x98
    cca6:	strb.w	r3, [sp, #111]	; 0x6f
    ccaa:	mov	fp, r3
    ccac:	str	r3, [sp, #60]	; 0x3c
    ccae:	str	r1, [sp, #36]	; 0x24
    ccb0:	add	r6, sp, #152	; 0x98
    ccb2:	b.n	c70c <_svfprintf_r+0x3ac>
    ccb4:	cmp.w	fp, #0
    ccb8:	beq.w	d8d8 <_svfprintf_r+0x1578>
    ccbc:	movs	r7, #0
    ccbe:	movs	r4, #0
    ccc0:	movs	r5, #0
    ccc2:	b.n	c5ac <_svfprintf_r+0x24c>
    ccc4:	ldr	r0, [pc, #168]	; (cd70 <_svfprintf_r+0xa10>)
    ccc6:	str	r3, [sp, #12]
    ccc8:	str	r2, [sp, #52]	; 0x34
    ccca:	orrs.w	r3, r4, r5
    ccce:	str	r7, [sp, #40]	; 0x28
    ccd0:	mov.w	r7, #0
    ccd4:	bne.w	cb02 <_svfprintf_r+0x7a2>
    ccd8:	movs	r4, #0
    ccda:	movs	r5, #0
    ccdc:	b.n	cb02 <_svfprintf_r+0x7a2>
    ccde:	ldr	r4, [sp, #148]	; 0x94
    cce0:	b.n	c7ac <_svfprintf_r+0x44c>
    cce2:	ldr	r3, [sp, #52]	; 0x34
    cce4:	cmp	r3, #101	; 0x65
    cce6:	ble.w	ce3e <_svfprintf_r+0xade>
    ccea:	movs	r2, #0
    ccec:	movs	r3, #0
    ccee:	ldrd	r0, r1, [sp, #64]	; 0x40
    ccf2:	bl	b1b8 <__aeabi_dcmpeq>
    ccf6:	cmp	r0, #0
    ccf8:	beq.w	cf68 <_svfprintf_r+0xc08>
    ccfc:	ldr	r3, [sp, #144]	; 0x90
    ccfe:	ldr	r2, [pc, #116]	; (cd74 <_svfprintf_r+0xa14>)
    cd00:	str.w	r2, [r9]
    cd04:	adds	r3, #1
    cd06:	adds	r4, #1
    cd08:	movs	r2, #1
    cd0a:	cmp	r3, #7
    cd0c:	str	r4, [sp, #148]	; 0x94
    cd0e:	str	r3, [sp, #144]	; 0x90
    cd10:	str.w	r2, [r9, #4]
    cd14:	bgt.w	d4f4 <_svfprintf_r+0x1194>
    cd18:	add.w	r9, r9, #8
    cd1c:	ldr	r3, [sp, #116]	; 0x74
    cd1e:	ldr	r2, [sp, #56]	; 0x38
    cd20:	cmp	r3, r2
    cd22:	blt.n	cd2c <_svfprintf_r+0x9cc>
    cd24:	ldr	r3, [sp, #12]
    cd26:	lsls	r3, r3, #31
    cd28:	bpl.w	c88c <_svfprintf_r+0x52c>
    cd2c:	ldr	r3, [sp, #144]	; 0x90
    cd2e:	ldr	r1, [sp, #72]	; 0x48
    cd30:	ldr	r2, [sp, #76]	; 0x4c
    cd32:	str.w	r2, [r9]
    cd36:	adds	r3, #1
    cd38:	add	r4, r1
    cd3a:	cmp	r3, #7
    cd3c:	str	r4, [sp, #148]	; 0x94
    cd3e:	str.w	r1, [r9, #4]
    cd42:	str	r3, [sp, #144]	; 0x90
    cd44:	bgt.w	d5d6 <_svfprintf_r+0x1276>
    cd48:	add.w	r9, r9, #8
    cd4c:	ldr	r3, [sp, #56]	; 0x38
    cd4e:	subs	r5, r3, #1
    cd50:	cmp	r5, #0
    cd52:	ble.w	c88c <_svfprintf_r+0x52c>
    cd56:	ldr	r2, [pc, #32]	; (cd78 <_svfprintf_r+0xa18>)
    cd58:	ldr	r3, [sp, #144]	; 0x90
    cd5a:	str	r2, [sp, #44]	; 0x2c
    cd5c:	cmp	r5, #16
    cd5e:	ble.w	d134 <_svfprintf_r+0xdd4>
    cd62:	movs	r6, #16
    cd64:	ldr	r7, [sp, #24]
    cd66:	ldr.w	fp, [sp, #20]
    cd6a:	b.n	cd88 <_svfprintf_r+0xa28>
    cd6c:	.word	0x20000d10
    cd70:	.word	0x20000d24
    cd74:	.word	0x20000cec
    cd78:	.word	0x20000dc8
    cd7c:	add.w	r9, r9, #8
    cd80:	subs	r5, #16
    cd82:	cmp	r5, #16
    cd84:	ble.w	d134 <_svfprintf_r+0xdd4>
    cd88:	adds	r3, #1
    cd8a:	adds	r4, #16
    cd8c:	cmp	r3, #7
    cd8e:	str	r4, [sp, #148]	; 0x94
    cd90:	str	r3, [sp, #144]	; 0x90
    cd92:	str.w	sl, [r9]
    cd96:	str.w	r6, [r9, #4]
    cd9a:	ble.n	cd7c <_svfprintf_r+0xa1c>
    cd9c:	add	r2, sp, #140	; 0x8c
    cd9e:	mov	r1, fp
    cda0:	mov	r0, r7
    cda2:	bl	f4a4 <__ssprint_r>
    cda6:	cmp	r0, #0
    cda8:	bne.w	c554 <_svfprintf_r+0x1f4>
    cdac:	ldr	r4, [sp, #148]	; 0x94
    cdae:	ldr	r3, [sp, #144]	; 0x90
    cdb0:	add.w	r9, sp, #192	; 0xc0
    cdb4:	b.n	cd80 <_svfprintf_r+0xa20>
    cdb6:	ldr	r3, [sp, #32]
    cdb8:	ldr	r2, [sp, #16]
    cdba:	subs	r7, r3, r2
    cdbc:	cmp	r7, #0
    cdbe:	ble.w	c7f4 <_svfprintf_r+0x494>
    cdc2:	ldr	r2, [pc, #752]	; (d0b4 <_svfprintf_r+0xd54>)
    cdc4:	ldr	r3, [sp, #144]	; 0x90
    cdc6:	str	r2, [sp, #44]	; 0x2c
    cdc8:	cmp	r7, #16
    cdca:	ble.n	ce24 <_svfprintf_r+0xac4>
    cdcc:	mov	r2, r9
    cdce:	mov	r1, r4
    cdd0:	mov	r9, r7
    cdd2:	movs	r5, #16
    cdd4:	mov	r7, r6
    cdd6:	ldr	r4, [sp, #24]
    cdd8:	ldr	r6, [sp, #20]
    cdda:	b.n	cdea <_svfprintf_r+0xa8a>
    cddc:	sub.w	r9, r9, #16
    cde0:	cmp.w	r9, #16
    cde4:	add.w	r2, r2, #8
    cde8:	ble.n	ce1c <_svfprintf_r+0xabc>
    cdea:	adds	r3, #1
    cdec:	adds	r1, #16
    cdee:	cmp	r3, #7
    cdf0:	str	r1, [sp, #148]	; 0x94
    cdf2:	str	r3, [sp, #144]	; 0x90
    cdf4:	str.w	sl, [r2]
    cdf8:	str	r5, [r2, #4]
    cdfa:	ble.n	cddc <_svfprintf_r+0xa7c>
    cdfc:	add	r2, sp, #140	; 0x8c
    cdfe:	mov	r1, r6
    ce00:	mov	r0, r4
    ce02:	bl	f4a4 <__ssprint_r>
    ce06:	cmp	r0, #0
    ce08:	bne.w	c554 <_svfprintf_r+0x1f4>
    ce0c:	sub.w	r9, r9, #16
    ce10:	cmp.w	r9, #16
    ce14:	ldr	r1, [sp, #148]	; 0x94
    ce16:	ldr	r3, [sp, #144]	; 0x90
    ce18:	add	r2, sp, #192	; 0xc0
    ce1a:	bgt.n	cdea <_svfprintf_r+0xa8a>
    ce1c:	mov	r6, r7
    ce1e:	mov	r4, r1
    ce20:	mov	r7, r9
    ce22:	mov	r9, r2
    ce24:	adds	r3, #1
    ce26:	ldr	r2, [sp, #44]	; 0x2c
    ce28:	str	r3, [sp, #144]	; 0x90
    ce2a:	add	r4, r7
    ce2c:	cmp	r3, #7
    ce2e:	str	r4, [sp, #148]	; 0x94
    ce30:	stmia.w	r9, {r2, r7}
    ce34:	bgt.w	d2b2 <_svfprintf_r+0xf52>
    ce38:	add.w	r9, r9, #8
    ce3c:	b.n	c7f4 <_svfprintf_r+0x494>
    ce3e:	ldr	r3, [sp, #56]	; 0x38
    ce40:	ldr	r5, [sp, #144]	; 0x90
    ce42:	cmp	r3, #1
    ce44:	ble.w	d25c <_svfprintf_r+0xefc>
    ce48:	adds	r5, #1
    ce4a:	adds	r4, #1
    ce4c:	movs	r3, #1
    ce4e:	cmp	r5, #7
    ce50:	str	r4, [sp, #148]	; 0x94
    ce52:	str	r5, [sp, #144]	; 0x90
    ce54:	str.w	r6, [r9]
    ce58:	str.w	r3, [r9, #4]
    ce5c:	bgt.w	d27e <_svfprintf_r+0xf1e>
    ce60:	add.w	r9, r9, #8
    ce64:	ldr	r2, [sp, #72]	; 0x48
    ce66:	ldr	r3, [sp, #76]	; 0x4c
    ce68:	str.w	r3, [r9]
    ce6c:	adds	r5, #1
    ce6e:	add	r4, r2
    ce70:	cmp	r5, #7
    ce72:	str	r4, [sp, #148]	; 0x94
    ce74:	str	r5, [sp, #144]	; 0x90
    ce76:	str.w	r2, [r9, #4]
    ce7a:	bgt.w	d298 <_svfprintf_r+0xf38>
    ce7e:	add.w	r9, r9, #8
    ce82:	movs	r3, #0
    ce84:	movs	r2, #0
    ce86:	ldrd	r0, r1, [sp, #64]	; 0x40
    ce8a:	bl	b1b8 <__aeabi_dcmpeq>
    ce8e:	ldr	r3, [sp, #56]	; 0x38
    ce90:	cmp	r0, #0
    ce92:	bne.w	d01c <_svfprintf_r+0xcbc>
    ce96:	subs	r3, #1
    ce98:	adds	r5, #1
    ce9a:	adds	r6, #1
    ce9c:	add	r4, r3
    ce9e:	cmp	r5, #7
    cea0:	str	r5, [sp, #144]	; 0x90
    cea2:	str	r4, [sp, #148]	; 0x94
    cea4:	str.w	r6, [r9]
    cea8:	str.w	r3, [r9, #4]
    ceac:	bgt.w	d09a <_svfprintf_r+0xd3a>
    ceb0:	add.w	r9, r9, #8
    ceb4:	ldr	r2, [sp, #84]	; 0x54
    ceb6:	str.w	r2, [r9, #4]
    ceba:	adds	r5, #1
    cebc:	add	r4, r2
    cebe:	add	r3, sp, #124	; 0x7c
    cec0:	cmp	r5, #7
    cec2:	str	r4, [sp, #148]	; 0x94
    cec4:	str	r5, [sp, #144]	; 0x90
    cec6:	str.w	r3, [r9]
    ceca:	ble.w	c888 <_svfprintf_r+0x528>
    cece:	add	r2, sp, #140	; 0x8c
    ced0:	ldr	r1, [sp, #20]
    ced2:	ldr	r0, [sp, #24]
    ced4:	bl	f4a4 <__ssprint_r>
    ced8:	cmp	r0, #0
    ceda:	bne.w	c554 <_svfprintf_r+0x1f4>
    cede:	ldr	r4, [sp, #148]	; 0x94
    cee0:	add.w	r9, sp, #192	; 0xc0
    cee4:	b.n	c88c <_svfprintf_r+0x52c>
    cee6:	add	r2, sp, #140	; 0x8c
    cee8:	ldr	r1, [sp, #20]
    ceea:	ldr	r0, [sp, #24]
    ceec:	bl	f4a4 <__ssprint_r>
    cef0:	cmp	r0, #0
    cef2:	beq.w	c928 <_svfprintf_r+0x5c8>
    cef6:	b.w	c554 <_svfprintf_r+0x1f4>
    cefa:	add	r2, sp, #140	; 0x8c
    cefc:	ldr	r1, [sp, #20]
    cefe:	ldr	r0, [sp, #24]
    cf00:	bl	f4a4 <__ssprint_r>
    cf04:	cmp	r0, #0
    cf06:	bne.w	c554 <_svfprintf_r+0x1f4>
    cf0a:	ldr	r4, [sp, #148]	; 0x94
    cf0c:	add.w	r9, sp, #192	; 0xc0
    cf10:	b.n	c866 <_svfprintf_r+0x506>
    cf12:	add	r2, sp, #140	; 0x8c
    cf14:	ldr	r1, [sp, #20]
    cf16:	ldr	r0, [sp, #24]
    cf18:	bl	f4a4 <__ssprint_r>
    cf1c:	cmp	r0, #0
    cf1e:	bne.w	c554 <_svfprintf_r+0x1f4>
    cf22:	ldr	r4, [sp, #148]	; 0x94
    cf24:	add.w	r9, sp, #192	; 0xc0
    cf28:	b.n	c7cc <_svfprintf_r+0x46c>
    cf2a:	add	r2, sp, #140	; 0x8c
    cf2c:	ldr	r1, [sp, #20]
    cf2e:	ldr	r0, [sp, #24]
    cf30:	bl	f4a4 <__ssprint_r>
    cf34:	cmp	r0, #0
    cf36:	bne.w	c554 <_svfprintf_r+0x1f4>
    cf3a:	ldr	r4, [sp, #148]	; 0x94
    cf3c:	add.w	r9, sp, #192	; 0xc0
    cf40:	b.n	c7ec <_svfprintf_r+0x48c>
    cf42:	cmp.w	fp, #0
    cf46:	strb.w	r7, [sp, #111]	; 0x6f
    cf4a:	blt.w	d50c <_svfprintf_r+0x11ac>
    cf4e:	bic.w	r3, r2, #128	; 0x80
    cf52:	str	r3, [sp, #12]
    cf54:	orrs.w	r3, r4, r5
    cf58:	bne.w	cb02 <_svfprintf_r+0x7a2>
    cf5c:	cmp.w	fp, #0
    cf60:	beq.w	cc7c <_svfprintf_r+0x91c>
    cf64:	movs	r7, #0
    cf66:	b.n	ccd8 <_svfprintf_r+0x978>
    cf68:	ldr	r5, [sp, #116]	; 0x74
    cf6a:	cmp	r5, #0
    cf6c:	ble.w	d512 <_svfprintf_r+0x11b2>
    cf70:	ldr	r3, [sp, #60]	; 0x3c
    cf72:	ldr	r2, [sp, #56]	; 0x38
    cf74:	cmp	r3, r2
    cf76:	it	ge
    cf78:	movge	r3, r2
    cf7a:	cmp	r3, #0
    cf7c:	mov	r5, r3
    cf7e:	ble.n	cf9c <_svfprintf_r+0xc3c>
    cf80:	ldr	r3, [sp, #144]	; 0x90
    cf82:	str.w	r6, [r9]
    cf86:	adds	r3, #1
    cf88:	add	r4, r5
    cf8a:	cmp	r3, #7
    cf8c:	str	r4, [sp, #148]	; 0x94
    cf8e:	str.w	r5, [r9, #4]
    cf92:	str	r3, [sp, #144]	; 0x90
    cf94:	bgt.w	d6ea <_svfprintf_r+0x138a>
    cf98:	add.w	r9, r9, #8
    cf9c:	ldr	r3, [sp, #60]	; 0x3c
    cf9e:	cmp	r5, #0
    cfa0:	it	ge
    cfa2:	subge	r3, r3, r5
    cfa4:	cmp	r3, #0
    cfa6:	mov	r5, r3
    cfa8:	ble.w	d19c <_svfprintf_r+0xe3c>
    cfac:	ldr	r2, [pc, #260]	; (d0b4 <_svfprintf_r+0xd54>)
    cfae:	ldr	r3, [sp, #144]	; 0x90
    cfb0:	str	r2, [sp, #44]	; 0x2c
    cfb2:	cmp	r5, #16
    cfb4:	ble.w	d4be <_svfprintf_r+0x115e>
    cfb8:	mov	r2, r4
    cfba:	movs	r7, #16
    cfbc:	ldr.w	fp, [sp, #24]
    cfc0:	ldr	r4, [sp, #20]
    cfc2:	b.n	cfd0 <_svfprintf_r+0xc70>
    cfc4:	add.w	r9, r9, #8
    cfc8:	subs	r5, #16
    cfca:	cmp	r5, #16
    cfcc:	ble.w	d4bc <_svfprintf_r+0x115c>
    cfd0:	adds	r3, #1
    cfd2:	adds	r2, #16
    cfd4:	cmp	r3, #7
    cfd6:	str	r2, [sp, #148]	; 0x94
    cfd8:	str	r3, [sp, #144]	; 0x90
    cfda:	str.w	sl, [r9]
    cfde:	str.w	r7, [r9, #4]
    cfe2:	ble.n	cfc4 <_svfprintf_r+0xc64>
    cfe4:	add	r2, sp, #140	; 0x8c
    cfe6:	mov	r1, r4
    cfe8:	mov	r0, fp
    cfea:	bl	f4a4 <__ssprint_r>
    cfee:	cmp	r0, #0
    cff0:	bne.w	c554 <_svfprintf_r+0x1f4>
    cff4:	ldr	r2, [sp, #148]	; 0x94
    cff6:	ldr	r3, [sp, #144]	; 0x90
    cff8:	add.w	r9, sp, #192	; 0xc0
    cffc:	b.n	cfc8 <_svfprintf_r+0xc68>
    cffe:	add	r2, sp, #140	; 0x8c
    d000:	ldr	r1, [sp, #20]
    d002:	ldr	r0, [sp, #24]
    d004:	bl	f4a4 <__ssprint_r>
    d008:	cmp	r0, #0
    d00a:	bne.w	c554 <_svfprintf_r+0x1f4>
    d00e:	ldrb.w	r7, [sp, #111]	; 0x6f
    d012:	ldr	r4, [sp, #148]	; 0x94
    d014:	add.w	r9, sp, #192	; 0xc0
    d018:	b.w	c7ac <_svfprintf_r+0x44c>
    d01c:	subs	r6, r3, #1
    d01e:	cmp	r6, #0
    d020:	ble.w	ceb4 <_svfprintf_r+0xb54>
    d024:	ldr	r3, [pc, #140]	; (d0b4 <_svfprintf_r+0xd54>)
    d026:	str	r3, [sp, #44]	; 0x2c
    d028:	cmp	r6, #16
    d02a:	ble.n	d086 <_svfprintf_r+0xd26>
    d02c:	str.w	r8, [sp, #36]	; 0x24
    d030:	movs	r7, #16
    d032:	mov	r8, r6
    d034:	ldr.w	fp, [sp, #24]
    d038:	ldr	r6, [sp, #20]
    d03a:	b.n	d04a <_svfprintf_r+0xcea>
    d03c:	sub.w	r8, r8, #16
    d040:	cmp.w	r8, #16
    d044:	add.w	r9, r9, #8
    d048:	ble.n	d080 <_svfprintf_r+0xd20>
    d04a:	adds	r5, #1
    d04c:	adds	r4, #16
    d04e:	cmp	r5, #7
    d050:	str	r4, [sp, #148]	; 0x94
    d052:	str	r5, [sp, #144]	; 0x90
    d054:	str.w	sl, [r9]
    d058:	str.w	r7, [r9, #4]
    d05c:	ble.n	d03c <_svfprintf_r+0xcdc>
    d05e:	add	r2, sp, #140	; 0x8c
    d060:	mov	r1, r6
    d062:	mov	r0, fp
    d064:	bl	f4a4 <__ssprint_r>
    d068:	cmp	r0, #0
    d06a:	bne.w	c554 <_svfprintf_r+0x1f4>
    d06e:	sub.w	r8, r8, #16
    d072:	cmp.w	r8, #16
    d076:	ldr	r4, [sp, #148]	; 0x94
    d078:	ldr	r5, [sp, #144]	; 0x90
    d07a:	add.w	r9, sp, #192	; 0xc0
    d07e:	bgt.n	d04a <_svfprintf_r+0xcea>
    d080:	mov	r6, r8
    d082:	ldr.w	r8, [sp, #36]	; 0x24
    d086:	ldr	r3, [sp, #44]	; 0x2c
    d088:	adds	r5, #1
    d08a:	add	r4, r6
    d08c:	cmp	r5, #7
    d08e:	str	r4, [sp, #148]	; 0x94
    d090:	str	r5, [sp, #144]	; 0x90
    d092:	stmia.w	r9, {r3, r6}
    d096:	ble.w	ceb0 <_svfprintf_r+0xb50>
    d09a:	add	r2, sp, #140	; 0x8c
    d09c:	ldr	r1, [sp, #20]
    d09e:	ldr	r0, [sp, #24]
    d0a0:	bl	f4a4 <__ssprint_r>
    d0a4:	cmp	r0, #0
    d0a6:	bne.w	c554 <_svfprintf_r+0x1f4>
    d0aa:	ldr	r4, [sp, #148]	; 0x94
    d0ac:	ldr	r5, [sp, #144]	; 0x90
    d0ae:	add.w	r9, sp, #192	; 0xc0
    d0b2:	b.n	ceb4 <_svfprintf_r+0xb54>
    d0b4:	.word	0x20000dc8
    d0b8:	ldr	r1, [sp, #12]
    d0ba:	ands.w	r2, r1, #16
    d0be:	beq.w	d468 <_svfprintf_r+0x1108>
    d0c2:	ldr	r0, [sp, #40]	; 0x28
    d0c4:	strb.w	r3, [sp, #111]	; 0x6f
    d0c8:	cmp.w	fp, #0
    d0cc:	ldr	r4, [r0, #0]
    d0ce:	add.w	r7, r0, #4
    d0d2:	mov.w	r5, #0
    d0d6:	blt.n	d126 <_svfprintf_r+0xdc6>
    d0d8:	mov	r2, r1
    d0da:	bic.w	r2, r2, #128	; 0x80
    d0de:	str	r2, [sp, #12]
    d0e0:	orrs.w	r2, r4, r5
    d0e4:	str	r7, [sp, #40]	; 0x28
    d0e6:	mov	r7, r3
    d0e8:	bne.w	c6bc <_svfprintf_r+0x35c>
    d0ec:	b.n	ca8c <_svfprintf_r+0x72c>
    d0ee:	ldr	r3, [sp, #12]
    d0f0:	lsls	r0, r3, #27
    d0f2:	bmi.n	d14a <_svfprintf_r+0xdea>
    d0f4:	ldr	r3, [sp, #12]
    d0f6:	lsls	r1, r3, #25
    d0f8:	bpl.n	d14a <_svfprintf_r+0xdea>
    d0fa:	ldr	r1, [sp, #40]	; 0x28
    d0fc:	ldrsh.w	r4, [r1]
    d100:	adds	r1, #4
    d102:	asrs	r5, r4, #31
    d104:	mov	r2, r4
    d106:	mov	r3, r5
    d108:	str	r1, [sp, #40]	; 0x28
    d10a:	b.w	c696 <_svfprintf_r+0x336>
    d10e:	ldr	r1, [sp, #40]	; 0x28
    d110:	strb.w	r3, [sp, #111]	; 0x6f
    d114:	cmp.w	fp, #0
    d118:	ldr	r4, [r1, #0]
    d11a:	add.w	r7, r1, #4
    d11e:	mov.w	r5, #0
    d122:	bge.w	d5be <_svfprintf_r+0x125e>
    d126:	str	r7, [sp, #40]	; 0x28
    d128:	mov	r7, r3
    d12a:	orrs.w	r3, r4, r5
    d12e:	bne.w	c6bc <_svfprintf_r+0x35c>
    d132:	b.n	ca96 <_svfprintf_r+0x736>
    d134:	adds	r3, #1
    d136:	ldr	r2, [sp, #44]	; 0x2c
    d138:	str	r3, [sp, #144]	; 0x90
    d13a:	add	r4, r5
    d13c:	cmp	r3, #7
    d13e:	str	r4, [sp, #148]	; 0x94
    d140:	stmia.w	r9, {r2, r5}
    d144:	ble.w	c888 <_svfprintf_r+0x528>
    d148:	b.n	cece <_svfprintf_r+0xb6e>
    d14a:	ldr	r2, [sp, #40]	; 0x28
    d14c:	ldr	r4, [r2, #0]
    d14e:	mov	r3, r2
    d150:	adds	r3, #4
    d152:	asrs	r5, r4, #31
    d154:	mov	r2, r4
    d156:	str	r3, [sp, #40]	; 0x28
    d158:	cmp	r2, #0
    d15a:	mov	r3, r5
    d15c:	sbcs.w	r3, r3, #0
    d160:	bge.w	c6a0 <_svfprintf_r+0x340>
    d164:	negs	r4, r4
    d166:	mov.w	r7, #45	; 0x2d
    d16a:	sbc.w	r5, r5, r5, lsl #1
    d16e:	cmp.w	fp, #0
    d172:	strb.w	r7, [sp, #111]	; 0x6f
    d176:	blt.w	c6bc <_svfprintf_r+0x35c>
    d17a:	ldr	r3, [sp, #12]
    d17c:	bic.w	r3, r3, #128	; 0x80
    d180:	str	r3, [sp, #12]
    d182:	b.w	c6bc <_svfprintf_r+0x35c>
    d186:	add	r2, sp, #140	; 0x8c
    d188:	ldr	r1, [sp, #20]
    d18a:	ldr	r0, [sp, #24]
    d18c:	bl	f4a4 <__ssprint_r>
    d190:	cmp	r0, #0
    d192:	bne.w	c554 <_svfprintf_r+0x1f4>
    d196:	ldr	r4, [sp, #148]	; 0x94
    d198:	add.w	r9, sp, #192	; 0xc0
    d19c:	ldr	r2, [sp, #60]	; 0x3c
    d19e:	ldr	r3, [sp, #116]	; 0x74
    d1a0:	add	r2, r6
    d1a2:	mov	r7, r2
    d1a4:	ldr	r2, [sp, #56]	; 0x38
    d1a6:	cmp	r3, r2
    d1a8:	blt.n	d23a <_svfprintf_r+0xeda>
    d1aa:	ldr	r2, [sp, #12]
    d1ac:	lsls	r5, r2, #31
    d1ae:	bmi.n	d23a <_svfprintf_r+0xeda>
    d1b0:	ldr	r1, [sp, #56]	; 0x38
    d1b2:	add	r6, r1
    d1b4:	subs	r5, r6, r7
    d1b6:	subs	r3, r1, r3
    d1b8:	cmp	r5, r3
    d1ba:	it	ge
    d1bc:	movge	r5, r3
    d1be:	cmp	r5, #0
    d1c0:	mov	r6, r5
    d1c2:	ble.n	d1e0 <_svfprintf_r+0xe80>
    d1c4:	ldr	r2, [sp, #144]	; 0x90
    d1c6:	str.w	r7, [r9]
    d1ca:	adds	r2, #1
    d1cc:	add	r4, r5
    d1ce:	cmp	r2, #7
    d1d0:	str	r4, [sp, #148]	; 0x94
    d1d2:	str.w	r5, [r9, #4]
    d1d6:	str	r2, [sp, #144]	; 0x90
    d1d8:	bgt.w	d7d8 <_svfprintf_r+0x1478>
    d1dc:	add.w	r9, r9, #8
    d1e0:	cmp	r6, #0
    d1e2:	ite	ge
    d1e4:	subge	r5, r3, r6
    d1e6:	movlt	r5, r3
    d1e8:	cmp	r5, #0
    d1ea:	ble.w	c88c <_svfprintf_r+0x52c>
    d1ee:	ldr	r2, [pc, #744]	; (d4d8 <_svfprintf_r+0x1178>)
    d1f0:	ldr	r3, [sp, #144]	; 0x90
    d1f2:	str	r2, [sp, #44]	; 0x2c
    d1f4:	cmp	r5, #16
    d1f6:	ble.n	d134 <_svfprintf_r+0xdd4>
    d1f8:	movs	r6, #16
    d1fa:	ldr	r7, [sp, #24]
    d1fc:	ldr.w	fp, [sp, #20]
    d200:	b.n	d20c <_svfprintf_r+0xeac>
    d202:	add.w	r9, r9, #8
    d206:	subs	r5, #16
    d208:	cmp	r5, #16
    d20a:	ble.n	d134 <_svfprintf_r+0xdd4>
    d20c:	adds	r3, #1
    d20e:	adds	r4, #16
    d210:	cmp	r3, #7
    d212:	str	r4, [sp, #148]	; 0x94
    d214:	str	r3, [sp, #144]	; 0x90
    d216:	str.w	sl, [r9]
    d21a:	str.w	r6, [r9, #4]
    d21e:	ble.n	d202 <_svfprintf_r+0xea2>
    d220:	add	r2, sp, #140	; 0x8c
    d222:	mov	r1, fp
    d224:	mov	r0, r7
    d226:	bl	f4a4 <__ssprint_r>
    d22a:	cmp	r0, #0
    d22c:	bne.w	c554 <_svfprintf_r+0x1f4>
    d230:	ldr	r4, [sp, #148]	; 0x94
    d232:	ldr	r3, [sp, #144]	; 0x90
    d234:	add.w	r9, sp, #192	; 0xc0
    d238:	b.n	d206 <_svfprintf_r+0xea6>
    d23a:	ldr	r2, [sp, #144]	; 0x90
    d23c:	ldr	r0, [sp, #72]	; 0x48
    d23e:	ldr	r1, [sp, #76]	; 0x4c
    d240:	str.w	r1, [r9]
    d244:	adds	r2, #1
    d246:	add	r4, r0
    d248:	cmp	r2, #7
    d24a:	str	r4, [sp, #148]	; 0x94
    d24c:	str.w	r0, [r9, #4]
    d250:	str	r2, [sp, #144]	; 0x90
    d252:	bgt.w	d7be <_svfprintf_r+0x145e>
    d256:	add.w	r9, r9, #8
    d25a:	b.n	d1b0 <_svfprintf_r+0xe50>
    d25c:	ldr	r3, [sp, #12]
    d25e:	lsls	r0, r3, #31
    d260:	bmi.w	ce48 <_svfprintf_r+0xae8>
    d264:	adds	r5, #1
    d266:	adds	r4, #1
    d268:	movs	r3, #1
    d26a:	cmp	r5, #7
    d26c:	str	r4, [sp, #148]	; 0x94
    d26e:	str	r5, [sp, #144]	; 0x90
    d270:	str.w	r6, [r9]
    d274:	str.w	r3, [r9, #4]
    d278:	ble.w	ceb0 <_svfprintf_r+0xb50>
    d27c:	b.n	d09a <_svfprintf_r+0xd3a>
    d27e:	add	r2, sp, #140	; 0x8c
    d280:	ldr	r1, [sp, #20]
    d282:	ldr	r0, [sp, #24]
    d284:	bl	f4a4 <__ssprint_r>
    d288:	cmp	r0, #0
    d28a:	bne.w	c554 <_svfprintf_r+0x1f4>
    d28e:	ldr	r4, [sp, #148]	; 0x94
    d290:	ldr	r5, [sp, #144]	; 0x90
    d292:	add.w	r9, sp, #192	; 0xc0
    d296:	b.n	ce64 <_svfprintf_r+0xb04>
    d298:	add	r2, sp, #140	; 0x8c
    d29a:	ldr	r1, [sp, #20]
    d29c:	ldr	r0, [sp, #24]
    d29e:	bl	f4a4 <__ssprint_r>
    d2a2:	cmp	r0, #0
    d2a4:	bne.w	c554 <_svfprintf_r+0x1f4>
    d2a8:	ldr	r4, [sp, #148]	; 0x94
    d2aa:	ldr	r5, [sp, #144]	; 0x90
    d2ac:	add.w	r9, sp, #192	; 0xc0
    d2b0:	b.n	ce82 <_svfprintf_r+0xb22>
    d2b2:	add	r2, sp, #140	; 0x8c
    d2b4:	ldr	r1, [sp, #20]
    d2b6:	ldr	r0, [sp, #24]
    d2b8:	bl	f4a4 <__ssprint_r>
    d2bc:	cmp	r0, #0
    d2be:	bne.w	c554 <_svfprintf_r+0x1f4>
    d2c2:	ldr	r4, [sp, #148]	; 0x94
    d2c4:	add.w	r9, sp, #192	; 0xc0
    d2c8:	b.w	c7f4 <_svfprintf_r+0x494>
    d2cc:	ldr	r1, [sp, #12]
    d2ce:	ands.w	r3, r1, #64	; 0x40
    d2d2:	beq.w	d448 <_svfprintf_r+0x10e8>
    d2d6:	ldr	r0, [sp, #40]	; 0x28
    d2d8:	strb.w	r2, [sp, #111]	; 0x6f
    d2dc:	mov	r3, r0
    d2de:	cmp.w	fp, #0
    d2e2:	add.w	r3, r3, #4
    d2e6:	ldrh	r4, [r0, #0]
    d2e8:	mov.w	r5, #0
    d2ec:	blt.w	d670 <_svfprintf_r+0x1310>
    d2f0:	bic.w	r1, r1, #128	; 0x80
    d2f4:	str	r1, [sp, #12]
    d2f6:	orrs.w	r1, r4, r5
    d2fa:	str	r3, [sp, #40]	; 0x28
    d2fc:	beq.w	ccb4 <_svfprintf_r+0x954>
    d300:	mov	r7, r2
    d302:	b.w	c5ac <_svfprintf_r+0x24c>
    d306:	ldr	r3, [sp, #12]
    d308:	lsls	r7, r3, #27
    d30a:	bmi.n	d324 <_svfprintf_r+0xfc4>
    d30c:	ldr	r3, [sp, #12]
    d30e:	lsls	r6, r3, #25
    d310:	bpl.n	d324 <_svfprintf_r+0xfc4>
    d312:	ldr	r2, [sp, #40]	; 0x28
    d314:	ldr	r3, [r2, #0]
    d316:	adds	r2, #4
    d318:	str	r2, [sp, #40]	; 0x28
    d31a:	ldrh.w	r2, [sp, #28]
    d31e:	strh	r2, [r3, #0]
    d320:	b.w	c3ae <_svfprintf_r+0x4e>
    d324:	ldr	r2, [sp, #40]	; 0x28
    d326:	ldr	r3, [r2, #0]
    d328:	adds	r2, #4
    d32a:	str	r2, [sp, #40]	; 0x28
    d32c:	ldr	r2, [sp, #28]
    d32e:	str	r2, [r3, #0]
    d330:	b.w	c3ae <_svfprintf_r+0x4e>
    d334:	ldrd	r0, r1, [sp, #64]	; 0x40
    d338:	mov	r2, r0
    d33a:	mov	r3, r1
    d33c:	bl	b21c <__aeabi_dcmpun>
    d340:	cmp	r0, #0
    d342:	bne.w	d940 <_svfprintf_r+0x15e0>
    d346:	ldr	r3, [sp, #52]	; 0x34
    d348:	cmp.w	fp, #4294967295
    d34c:	bic.w	r7, r3, #32
    d350:	beq.w	d822 <_svfprintf_r+0x14c2>
    d354:	cmp	r7, #71	; 0x47
    d356:	beq.w	d65e <_svfprintf_r+0x12fe>
    d35a:	ldr	r3, [sp, #68]	; 0x44
    d35c:	ldr	r2, [sp, #12]
    d35e:	cmp	r3, #0
    d360:	orr.w	r2, r2, #256	; 0x100
    d364:	str	r2, [sp, #44]	; 0x2c
    d366:	blt.w	d85a <_svfprintf_r+0x14fa>
    d36a:	vldr	d7, [sp, #64]	; 0x40
    d36e:	vstr	d7, [sp, #96]	; 0x60
    d372:	movs	r3, #0
    d374:	str	r3, [sp, #16]
    d376:	ldr	r3, [sp, #52]	; 0x34
    d378:	cmp	r3, #102	; 0x66
    d37a:	beq.w	d828 <_svfprintf_r+0x14c8>
    d37e:	cmp	r3, #70	; 0x46
    d380:	beq.w	d60e <_svfprintf_r+0x12ae>
    d384:	cmp	r7, #69	; 0x45
    d386:	ite	eq
    d388:	addeq.w	r5, fp, #1
    d38c:	movne	r5, fp
    d38e:	add	r2, sp, #132	; 0x84
    d390:	add	r3, sp, #120	; 0x78
    d392:	str	r2, [sp, #4]
    d394:	str	r3, [sp, #0]
    d396:	mov	r2, r5
    d398:	add	r3, sp, #116	; 0x74
    d39a:	movs	r1, #2
    d39c:	vldr	d0, [sp, #96]	; 0x60
    d3a0:	ldr	r0, [sp, #24]
    d3a2:	bl	dc18 <_dtoa_r>
    d3a6:	ldr	r3, [sp, #52]	; 0x34
    d3a8:	cmp	r3, #103	; 0x67
    d3aa:	mov	r6, r0
    d3ac:	bne.w	d886 <_svfprintf_r+0x1526>
    d3b0:	ldr	r3, [sp, #12]
    d3b2:	lsls	r2, r3, #31
    d3b4:	bpl.w	d92a <_svfprintf_r+0x15ca>
    d3b8:	adds	r4, r6, r5
    d3ba:	movs	r2, #0
    d3bc:	movs	r3, #0
    d3be:	ldrd	r0, r1, [sp, #96]	; 0x60
    d3c2:	bl	b1b8 <__aeabi_dcmpeq>
    d3c6:	cmp	r0, #0
    d3c8:	bne.w	d6e6 <_svfprintf_r+0x1386>
    d3cc:	ldr	r3, [sp, #132]	; 0x84
    d3ce:	cmp	r4, r3
    d3d0:	bls.n	d3e0 <_svfprintf_r+0x1080>
    d3d2:	movs	r1, #48	; 0x30
    d3d4:	adds	r2, r3, #1
    d3d6:	str	r2, [sp, #132]	; 0x84
    d3d8:	strb	r1, [r3, #0]
    d3da:	ldr	r3, [sp, #132]	; 0x84
    d3dc:	cmp	r4, r3
    d3de:	bhi.n	d3d4 <_svfprintf_r+0x1074>
    d3e0:	subs	r3, r3, r6
    d3e2:	cmp	r7, #71	; 0x47
    d3e4:	str	r3, [sp, #56]	; 0x38
    d3e6:	beq.w	d6d8 <_svfprintf_r+0x1378>
    d3ea:	ldr	r3, [sp, #52]	; 0x34
    d3ec:	cmp	r3, #101	; 0x65
    d3ee:	ble.w	d8a4 <_svfprintf_r+0x1544>
    d3f2:	ldr	r3, [sp, #52]	; 0x34
    d3f4:	cmp	r3, #102	; 0x66
    d3f6:	ldr	r3, [sp, #116]	; 0x74
    d3f8:	str	r3, [sp, #60]	; 0x3c
    d3fa:	beq.w	d8be <_svfprintf_r+0x155e>
    d3fe:	ldr	r2, [sp, #60]	; 0x3c
    d400:	ldr	r1, [sp, #56]	; 0x38
    d402:	cmp	r2, r1
    d404:	blt.w	d86c <_svfprintf_r+0x150c>
    d408:	ldr	r3, [sp, #12]
    d40a:	lsls	r1, r3, #31
    d40c:	bmi.w	d92e <_svfprintf_r+0x15ce>
    d410:	bic.w	r3, r2, r2, asr #31
    d414:	str	r2, [sp, #36]	; 0x24
    d416:	movs	r2, #103	; 0x67
    d418:	str	r2, [sp, #52]	; 0x34
    d41a:	ldr	r2, [sp, #16]
    d41c:	cmp	r2, #0
    d41e:	bne.w	d680 <_svfprintf_r+0x1320>
    d422:	str	r3, [sp, #16]
    d424:	ldr	r3, [sp, #44]	; 0x2c
    d426:	str	r3, [sp, #12]
    d428:	mov	fp, r2
    d42a:	ldrb.w	r7, [sp, #111]	; 0x6f
    d42e:	b.w	c704 <_svfprintf_r+0x3a4>
    d432:	bic.w	r7, r7, #7
    d436:	vldr	d7, [r7]
    d43a:	add.w	r3, r7, #8
    d43e:	vstr	d7, [sp, #64]	; 0x40
    d442:	str	r3, [sp, #40]	; 0x28
    d444:	b.w	c95c <_svfprintf_r+0x5fc>
    d448:	ldr	r1, [sp, #40]	; 0x28
    d44a:	strb.w	r3, [sp, #111]	; 0x6f
    d44e:	cmp.w	fp, #0
    d452:	ldr	r4, [r1, #0]
    d454:	add.w	r7, r1, #4
    d458:	mov.w	r5, #0
    d45c:	bge.w	d5b8 <_svfprintf_r+0x1258>
    d460:	str	r7, [sp, #40]	; 0x28
    d462:	movs	r7, #0
    d464:	b.w	c5ac <_svfprintf_r+0x24c>
    d468:	ldr	r1, [sp, #12]
    d46a:	ands.w	r3, r1, #64	; 0x40
    d46e:	beq.w	d10e <_svfprintf_r+0xdae>
    d472:	ldr	r0, [sp, #40]	; 0x28
    d474:	strb.w	r2, [sp, #111]	; 0x6f
    d478:	mov	r3, r0
    d47a:	cmp.w	fp, #0
    d47e:	add.w	r3, r3, #4
    d482:	ldrh	r4, [r0, #0]
    d484:	mov.w	r5, #0
    d488:	blt.w	d66a <_svfprintf_r+0x130a>
    d48c:	bic.w	r1, r1, #128	; 0x80
    d490:	str	r1, [sp, #12]
    d492:	orrs.w	r1, r4, r5
    d496:	str	r3, [sp, #40]	; 0x28
    d498:	mov	r7, r2
    d49a:	bne.w	c6bc <_svfprintf_r+0x35c>
    d49e:	b.w	ca8c <_svfprintf_r+0x72c>
    d4a2:	ldr	r3, [sp, #12]
    d4a4:	ldr	r2, [sp, #40]	; 0x28
    d4a6:	tst.w	r3, #64	; 0x40
    d4aa:	mov	r3, r2
    d4ac:	beq.w	d674 <_svfprintf_r+0x1314>
    d4b0:	adds	r3, #4
    d4b2:	ldrh	r4, [r2, #0]
    d4b4:	str	r3, [sp, #40]	; 0x28
    d4b6:	movs	r5, #0
    d4b8:	b.w	cac6 <_svfprintf_r+0x766>
    d4bc:	mov	r4, r2
    d4be:	adds	r3, #1
    d4c0:	ldr	r2, [sp, #44]	; 0x2c
    d4c2:	str	r3, [sp, #144]	; 0x90
    d4c4:	add	r4, r5
    d4c6:	cmp	r3, #7
    d4c8:	str	r4, [sp, #148]	; 0x94
    d4ca:	stmia.w	r9, {r2, r5}
    d4ce:	bgt.w	d186 <_svfprintf_r+0xe26>
    d4d2:	add.w	r9, r9, #8
    d4d6:	b.n	d19c <_svfprintf_r+0xe3c>
    d4d8:	.word	0x20000dc8
    d4dc:	movs	r7, #0
    d4de:	cmp	fp, r7
    d4e0:	strb.w	r7, [sp, #111]	; 0x6f
    d4e4:	blt.w	ccd8 <_svfprintf_r+0x978>
    d4e8:	ldr	r3, [sp, #12]
    d4ea:	bic.w	r3, r3, #128	; 0x80
    d4ee:	str	r3, [sp, #12]
    d4f0:	b.w	cc74 <_svfprintf_r+0x914>
    d4f4:	add	r2, sp, #140	; 0x8c
    d4f6:	ldr	r1, [sp, #20]
    d4f8:	ldr	r0, [sp, #24]
    d4fa:	bl	f4a4 <__ssprint_r>
    d4fe:	cmp	r0, #0
    d500:	bne.w	c554 <_svfprintf_r+0x1f4>
    d504:	ldr	r4, [sp, #148]	; 0x94
    d506:	add.w	r9, sp, #192	; 0xc0
    d50a:	b.n	cd1c <_svfprintf_r+0x9bc>
    d50c:	ldr	r7, [sp, #40]	; 0x28
    d50e:	b.w	ccca <_svfprintf_r+0x96a>
    d512:	ldr	r3, [sp, #144]	; 0x90
    d514:	ldr	r2, [pc, #736]	; (d7f8 <_svfprintf_r+0x1498>)
    d516:	str.w	r2, [r9]
    d51a:	adds	r3, #1
    d51c:	adds	r4, #1
    d51e:	movs	r2, #1
    d520:	cmp	r3, #7
    d522:	str	r4, [sp, #148]	; 0x94
    d524:	str	r3, [sp, #144]	; 0x90
    d526:	str.w	r2, [r9, #4]
    d52a:	bgt.w	d644 <_svfprintf_r+0x12e4>
    d52e:	add.w	r9, r9, #8
    d532:	cbnz	r5, d540 <_svfprintf_r+0x11e0>
    d534:	ldr	r3, [sp, #56]	; 0x38
    d536:	cbnz	r3, d540 <_svfprintf_r+0x11e0>
    d538:	ldr	r3, [sp, #12]
    d53a:	lsls	r7, r3, #31
    d53c:	bpl.w	c88c <_svfprintf_r+0x52c>
    d540:	ldr	r3, [sp, #144]	; 0x90
    d542:	ldr	r1, [sp, #72]	; 0x48
    d544:	ldr	r2, [sp, #76]	; 0x4c
    d546:	str.w	r2, [r9]
    d54a:	adds	r3, #1
    d54c:	add	r4, r1
    d54e:	cmp	r3, #7
    d550:	str	r4, [sp, #148]	; 0x94
    d552:	str.w	r1, [r9, #4]
    d556:	str	r3, [sp, #144]	; 0x90
    d558:	bgt.w	d8f6 <_svfprintf_r+0x1596>
    d55c:	add.w	r9, r9, #8
    d560:	negs	r5, r5
    d562:	cmp	r5, #0
    d564:	ble.w	d6bc <_svfprintf_r+0x135c>
    d568:	ldr	r2, [pc, #656]	; (d7fc <_svfprintf_r+0x149c>)
    d56a:	str	r2, [sp, #44]	; 0x2c
    d56c:	cmp	r5, #16
    d56e:	ble.w	d704 <_svfprintf_r+0x13a4>
    d572:	mov	r2, r4
    d574:	movs	r7, #16
    d576:	ldr.w	fp, [sp, #24]
    d57a:	ldr	r4, [sp, #20]
    d57c:	b.n	d58a <_svfprintf_r+0x122a>
    d57e:	add.w	r9, r9, #8
    d582:	subs	r5, #16
    d584:	cmp	r5, #16
    d586:	ble.w	d702 <_svfprintf_r+0x13a2>
    d58a:	adds	r3, #1
    d58c:	adds	r2, #16
    d58e:	cmp	r3, #7
    d590:	str	r2, [sp, #148]	; 0x94
    d592:	str	r3, [sp, #144]	; 0x90
    d594:	str.w	sl, [r9]
    d598:	str.w	r7, [r9, #4]
    d59c:	ble.n	d57e <_svfprintf_r+0x121e>
    d59e:	add	r2, sp, #140	; 0x8c
    d5a0:	mov	r1, r4
    d5a2:	mov	r0, fp
    d5a4:	bl	f4a4 <__ssprint_r>
    d5a8:	cmp	r0, #0
    d5aa:	bne.w	c554 <_svfprintf_r+0x1f4>
    d5ae:	ldr	r2, [sp, #148]	; 0x94
    d5b0:	ldr	r3, [sp, #144]	; 0x90
    d5b2:	add.w	r9, sp, #192	; 0xc0
    d5b6:	b.n	d582 <_svfprintf_r+0x1222>
    d5b8:	ldr	r2, [sp, #12]
    d5ba:	b.w	ca30 <_svfprintf_r+0x6d0>
    d5be:	ldr	r2, [sp, #12]
    d5c0:	b.n	d0da <_svfprintf_r+0xd7a>
    d5c2:	ldr	r3, [sp, #12]
    d5c4:	orr.w	r3, r3, #32
    d5c8:	str	r3, [sp, #12]
    d5ca:	add.w	r8, r8, #1
    d5ce:	ldrb.w	r3, [r8]
    d5d2:	b.w	c414 <_svfprintf_r+0xb4>
    d5d6:	add	r2, sp, #140	; 0x8c
    d5d8:	ldr	r1, [sp, #20]
    d5da:	ldr	r0, [sp, #24]
    d5dc:	bl	f4a4 <__ssprint_r>
    d5e0:	cmp	r0, #0
    d5e2:	bne.w	c554 <_svfprintf_r+0x1f4>
    d5e6:	ldr	r4, [sp, #148]	; 0x94
    d5e8:	add.w	r9, sp, #192	; 0xc0
    d5ec:	b.w	cd4c <_svfprintf_r+0x9ec>
    d5f0:	movs	r1, #64	; 0x40
    d5f2:	ldr	r0, [sp, #24]
    d5f4:	bl	b5e0 <_malloc_r>
    d5f8:	ldr	r2, [sp, #20]
    d5fa:	str	r0, [r2, #0]
    d5fc:	str	r0, [r2, #16]
    d5fe:	cmp	r0, #0
    d600:	beq.w	d9ea <_svfprintf_r+0x168a>
    d604:	ldr	r2, [sp, #20]
    d606:	movs	r3, #64	; 0x40
    d608:	str	r3, [r2, #20]
    d60a:	b.w	c38e <_svfprintf_r+0x2e>
    d60e:	add	r2, sp, #132	; 0x84
    d610:	add	r3, sp, #120	; 0x78
    d612:	str	r2, [sp, #4]
    d614:	str	r3, [sp, #0]
    d616:	mov	r2, fp
    d618:	add	r3, sp, #116	; 0x74
    d61a:	movs	r1, #3
    d61c:	vldr	d0, [sp, #96]	; 0x60
    d620:	ldr	r0, [sp, #24]
    d622:	bl	dc18 <_dtoa_r>
    d626:	mov	r5, fp
    d628:	mov	r6, r0
    d62a:	ldr	r3, [sp, #52]	; 0x34
    d62c:	cmp	r3, #70	; 0x46
    d62e:	add.w	r4, r6, r5
    d632:	bne.w	d3ba <_svfprintf_r+0x105a>
    d636:	ldrb	r3, [r6, #0]
    d638:	cmp	r3, #48	; 0x30
    d63a:	beq.w	d94c <_svfprintf_r+0x15ec>
    d63e:	ldr	r5, [sp, #116]	; 0x74
    d640:	add	r4, r5
    d642:	b.n	d3ba <_svfprintf_r+0x105a>
    d644:	add	r2, sp, #140	; 0x8c
    d646:	ldr	r1, [sp, #20]
    d648:	ldr	r0, [sp, #24]
    d64a:	bl	f4a4 <__ssprint_r>
    d64e:	cmp	r0, #0
    d650:	bne.w	c554 <_svfprintf_r+0x1f4>
    d654:	ldr	r5, [sp, #116]	; 0x74
    d656:	ldr	r4, [sp, #148]	; 0x94
    d658:	add.w	r9, sp, #192	; 0xc0
    d65c:	b.n	d532 <_svfprintf_r+0x11d2>
    d65e:	cmp.w	fp, #0
    d662:	it	eq
    d664:	moveq.w	fp, #1
    d668:	b.n	d35a <_svfprintf_r+0xffa>
    d66a:	str	r3, [sp, #40]	; 0x28
    d66c:	mov	r7, r2
    d66e:	b.n	d12a <_svfprintf_r+0xdca>
    d670:	str	r3, [sp, #40]	; 0x28
    d672:	b.n	d462 <_svfprintf_r+0x1102>
    d674:	adds	r3, #4
    d676:	ldr	r4, [r2, #0]
    d678:	str	r3, [sp, #40]	; 0x28
    d67a:	movs	r5, #0
    d67c:	b.w	cac6 <_svfprintf_r+0x766>
    d680:	movs	r7, #45	; 0x2d
    d682:	str	r3, [sp, #16]
    d684:	ldr	r3, [sp, #44]	; 0x2c
    d686:	str	r3, [sp, #12]
    d688:	strb.w	r7, [sp, #111]	; 0x6f
    d68c:	mov.w	fp, #0
    d690:	b.w	c706 <_svfprintf_r+0x3a6>
    d694:	mov	r0, r6
    d696:	bl	c280 <strlen>
    d69a:	mov	fp, r4
    d69c:	mov	r3, r0
    d69e:	str	r0, [sp, #36]	; 0x24
    d6a0:	b.w	cbe8 <_svfprintf_r+0x888>
    d6a4:	add	r2, sp, #140	; 0x8c
    d6a6:	ldr	r1, [sp, #20]
    d6a8:	ldr	r0, [sp, #24]
    d6aa:	bl	f4a4 <__ssprint_r>
    d6ae:	cmp	r0, #0
    d6b0:	bne.w	c554 <_svfprintf_r+0x1f4>
    d6b4:	ldr	r4, [sp, #148]	; 0x94
    d6b6:	ldr	r3, [sp, #144]	; 0x90
    d6b8:	add.w	r9, sp, #192	; 0xc0
    d6bc:	ldr	r1, [sp, #56]	; 0x38
    d6be:	str.w	r6, [r9]
    d6c2:	adds	r3, #1
    d6c4:	add	r4, r1
    d6c6:	cmp	r3, #7
    d6c8:	str	r4, [sp, #148]	; 0x94
    d6ca:	str	r3, [sp, #144]	; 0x90
    d6cc:	str.w	r1, [r9, #4]
    d6d0:	ble.w	c888 <_svfprintf_r+0x528>
    d6d4:	b.w	cece <_svfprintf_r+0xb6e>
    d6d8:	ldr	r3, [sp, #116]	; 0x74
    d6da:	adds	r5, r3, #3
    d6dc:	blt.n	d71c <_svfprintf_r+0x13bc>
    d6de:	cmp	fp, r3
    d6e0:	blt.n	d71c <_svfprintf_r+0x13bc>
    d6e2:	str	r3, [sp, #60]	; 0x3c
    d6e4:	b.n	d3fe <_svfprintf_r+0x109e>
    d6e6:	mov	r3, r4
    d6e8:	b.n	d3e0 <_svfprintf_r+0x1080>
    d6ea:	add	r2, sp, #140	; 0x8c
    d6ec:	ldr	r1, [sp, #20]
    d6ee:	ldr	r0, [sp, #24]
    d6f0:	bl	f4a4 <__ssprint_r>
    d6f4:	cmp	r0, #0
    d6f6:	bne.w	c554 <_svfprintf_r+0x1f4>
    d6fa:	ldr	r4, [sp, #148]	; 0x94
    d6fc:	add.w	r9, sp, #192	; 0xc0
    d700:	b.n	cf9c <_svfprintf_r+0xc3c>
    d702:	mov	r4, r2
    d704:	adds	r3, #1
    d706:	ldr	r2, [sp, #44]	; 0x2c
    d708:	str	r3, [sp, #144]	; 0x90
    d70a:	add	r4, r5
    d70c:	cmp	r3, #7
    d70e:	str	r4, [sp, #148]	; 0x94
    d710:	stmia.w	r9, {r2, r5}
    d714:	bgt.n	d6a4 <_svfprintf_r+0x1344>
    d716:	add.w	r9, r9, #8
    d71a:	b.n	d6bc <_svfprintf_r+0x135c>
    d71c:	ldr	r2, [sp, #52]	; 0x34
    d71e:	subs	r2, #2
    d720:	str	r2, [sp, #52]	; 0x34
    d722:	subs	r3, #1
    d724:	cmp	r3, #0
    d726:	ldrb.w	r2, [sp, #52]	; 0x34
    d72a:	str	r3, [sp, #116]	; 0x74
    d72c:	it	lt
    d72e:	neglt	r3, r3
    d730:	strb.w	r2, [sp, #124]	; 0x7c
    d734:	ite	lt
    d736:	movlt	r2, #45	; 0x2d
    d738:	movge	r2, #43	; 0x2b
    d73a:	cmp	r3, #9
    d73c:	strb.w	r2, [sp, #125]	; 0x7d
    d740:	ble.w	d91a <_svfprintf_r+0x15ba>
    d744:	add.w	r0, sp, #139	; 0x8b
    d748:	mov	r4, r0
    d74a:	ldr	r2, [pc, #180]	; (d800 <_svfprintf_r+0x14a0>)
    d74c:	smull	r2, r1, r2, r3
    d750:	asrs	r2, r3, #31
    d752:	rsb	r2, r2, r1, asr #2
    d756:	add.w	r1, r2, r2, lsl #2
    d75a:	sub.w	r3, r3, r1, lsl #1
    d75e:	add.w	r1, r3, #48	; 0x30
    d762:	cmp	r2, #9
    d764:	mov	r3, r2
    d766:	strb.w	r1, [r4, #-1]!
    d76a:	bgt.n	d74a <_svfprintf_r+0x13ea>
    d76c:	mov	r1, r4
    d76e:	adds	r3, #48	; 0x30
    d770:	uxtb	r2, r3
    d772:	strb.w	r2, [r1, #-1]!
    d776:	cmp	r0, r1
    d778:	bls.w	d9e4 <_svfprintf_r+0x1684>
    d77c:	add.w	r1, sp, #126	; 0x7e
    d780:	mov	r3, r4
    d782:	b.n	d788 <_svfprintf_r+0x1428>
    d784:	ldrb.w	r2, [r3], #1
    d788:	strb.w	r2, [r1], #1
    d78c:	cmp	r0, r3
    d78e:	bne.n	d784 <_svfprintf_r+0x1424>
    d790:	adds	r3, r0, #1
    d792:	subs	r3, r3, r4
    d794:	add.w	r2, sp, #126	; 0x7e
    d798:	add	r3, r2
    d79a:	add	r2, sp, #124	; 0x7c
    d79c:	subs	r3, r3, r2
    d79e:	ldr	r2, [sp, #56]	; 0x38
    d7a0:	str	r3, [sp, #84]	; 0x54
    d7a2:	cmp	r2, #1
    d7a4:	add	r3, r2
    d7a6:	str	r3, [sp, #36]	; 0x24
    d7a8:	ble.w	d97a <_svfprintf_r+0x161a>
    d7ac:	ldr	r3, [sp, #36]	; 0x24
    d7ae:	ldr	r2, [sp, #72]	; 0x48
    d7b0:	add	r3, r2
    d7b2:	movs	r2, #0
    d7b4:	str	r3, [sp, #36]	; 0x24
    d7b6:	str	r2, [sp, #60]	; 0x3c
    d7b8:	bic.w	r3, r3, r3, asr #31
    d7bc:	b.n	d41a <_svfprintf_r+0x10ba>
    d7be:	add	r2, sp, #140	; 0x8c
    d7c0:	ldr	r1, [sp, #20]
    d7c2:	ldr	r0, [sp, #24]
    d7c4:	bl	f4a4 <__ssprint_r>
    d7c8:	cmp	r0, #0
    d7ca:	bne.w	c554 <_svfprintf_r+0x1f4>
    d7ce:	ldr	r3, [sp, #116]	; 0x74
    d7d0:	ldr	r4, [sp, #148]	; 0x94
    d7d2:	add.w	r9, sp, #192	; 0xc0
    d7d6:	b.n	d1b0 <_svfprintf_r+0xe50>
    d7d8:	add	r2, sp, #140	; 0x8c
    d7da:	ldr	r1, [sp, #20]
    d7dc:	ldr	r0, [sp, #24]
    d7de:	bl	f4a4 <__ssprint_r>
    d7e2:	cmp	r0, #0
    d7e4:	bne.w	c554 <_svfprintf_r+0x1f4>
    d7e8:	ldr	r3, [sp, #116]	; 0x74
    d7ea:	ldr	r2, [sp, #56]	; 0x38
    d7ec:	ldr	r4, [sp, #148]	; 0x94
    d7ee:	subs	r3, r2, r3
    d7f0:	add.w	r9, sp, #192	; 0xc0
    d7f4:	b.n	d1e0 <_svfprintf_r+0xe80>
    d7f6:	nop
    d7f8:	.word	0x20000cec
    d7fc:	.word	0x20000dc8
    d800:	.word	0x66666667
    d804:	cmp	r5, #6
    d806:	mov	r3, r5
    d808:	it	cs
    d80a:	movcs	r3, #6
    d80c:	str	r3, [sp, #36]	; 0x24
    d80e:	bic.w	r3, r3, r3, asr #31
    d812:	mov	fp, r6
    d814:	str	r7, [sp, #40]	; 0x28
    d816:	str	r6, [sp, #60]	; 0x3c
    d818:	mov	r7, r6
    d81a:	str	r3, [sp, #16]
    d81c:	ldr	r6, [pc, #536]	; (da38 <_svfprintf_r+0x16d8>)
    d81e:	b.w	c704 <_svfprintf_r+0x3a4>
    d822:	mov.w	fp, #6
    d826:	b.n	d35a <_svfprintf_r+0xffa>
    d828:	add	r2, sp, #132	; 0x84
    d82a:	add	r3, sp, #120	; 0x78
    d82c:	str	r2, [sp, #4]
    d82e:	str	r3, [sp, #0]
    d830:	mov	r2, fp
    d832:	add	r3, sp, #116	; 0x74
    d834:	movs	r1, #3
    d836:	vldr	d0, [sp, #96]	; 0x60
    d83a:	ldr	r0, [sp, #24]
    d83c:	bl	dc18 <_dtoa_r>
    d840:	mov	r5, fp
    d842:	mov	r6, r0
    d844:	add.w	r4, r0, fp
    d848:	b.n	d636 <_svfprintf_r+0x12d6>
    d84a:	movs	r7, #45	; 0x2d
    d84c:	strb.w	r7, [sp, #111]	; 0x6f
    d850:	b.w	c9aa <_svfprintf_r+0x64a>
    d854:	str	r3, [sp, #12]
    d856:	b.w	cb02 <_svfprintf_r+0x7a2>
    d85a:	ldrd	r1, r2, [sp, #64]	; 0x40
    d85e:	add.w	r3, r2, #2147483648	; 0x80000000
    d862:	str	r3, [sp, #100]	; 0x64
    d864:	movs	r3, #45	; 0x2d
    d866:	str	r1, [sp, #96]	; 0x60
    d868:	str	r3, [sp, #16]
    d86a:	b.n	d376 <_svfprintf_r+0x1016>
    d86c:	ldr	r2, [sp, #72]	; 0x48
    d86e:	ldr	r3, [sp, #56]	; 0x38
    d870:	add	r3, r2
    d872:	ldr	r2, [sp, #60]	; 0x3c
    d874:	str	r3, [sp, #36]	; 0x24
    d876:	cmp	r2, #0
    d878:	ble.w	d98e <_svfprintf_r+0x162e>
    d87c:	movs	r2, #103	; 0x67
    d87e:	bic.w	r3, r3, r3, asr #31
    d882:	str	r2, [sp, #52]	; 0x34
    d884:	b.n	d41a <_svfprintf_r+0x10ba>
    d886:	ldr	r3, [sp, #52]	; 0x34
    d888:	cmp	r3, #71	; 0x47
    d88a:	bne.w	d3b8 <_svfprintf_r+0x1058>
    d88e:	ldr	r3, [sp, #12]
    d890:	lsls	r3, r3, #31
    d892:	bmi.w	d62a <_svfprintf_r+0x12ca>
    d896:	ldr	r3, [sp, #132]	; 0x84
    d898:	cmp	r7, #71	; 0x47
    d89a:	sub.w	r3, r3, r6
    d89e:	str	r3, [sp, #56]	; 0x38
    d8a0:	beq.w	d6d8 <_svfprintf_r+0x1378>
    d8a4:	ldr	r3, [sp, #116]	; 0x74
    d8a6:	b.n	d722 <_svfprintf_r+0x13c2>
    d8a8:	bic.w	r3, r5, r5, asr #31
    d8ac:	str	r7, [sp, #40]	; 0x28
    d8ae:	str	r3, [sp, #16]
    d8b0:	str	r5, [sp, #36]	; 0x24
    d8b2:	mov	fp, r0
    d8b4:	str	r0, [sp, #60]	; 0x3c
    d8b6:	ldrb.w	r7, [sp, #111]	; 0x6f
    d8ba:	b.w	c704 <_svfprintf_r+0x3a4>
    d8be:	cmp	r3, #0
    d8c0:	ble.n	d99e <_svfprintf_r+0x163e>
    d8c2:	cmp.w	fp, #0
    d8c6:	bne.n	d968 <_svfprintf_r+0x1608>
    d8c8:	ldr	r2, [sp, #12]
    d8ca:	lsls	r4, r2, #31
    d8cc:	bmi.n	d968 <_svfprintf_r+0x1608>
    d8ce:	mov	r2, r3
    d8d0:	str	r2, [sp, #36]	; 0x24
    d8d2:	bic.w	r3, r3, r3, asr #31
    d8d6:	b.n	d41a <_svfprintf_r+0x10ba>
    d8d8:	ldr	r3, [sp, #12]
    d8da:	lsls	r3, r3, #31
    d8dc:	mov	r7, fp
    d8de:	bpl.n	d8ec <_svfprintf_r+0x158c>
    d8e0:	add	r6, sp, #256	; 0x100
    d8e2:	movs	r3, #48	; 0x30
    d8e4:	strb.w	r3, [r6, #-65]!
    d8e8:	b.w	c6f0 <_svfprintf_r+0x390>
    d8ec:	str.w	fp, [sp, #36]	; 0x24
    d8f0:	add	r6, sp, #192	; 0xc0
    d8f2:	b.w	c6f6 <_svfprintf_r+0x396>
    d8f6:	add	r2, sp, #140	; 0x8c
    d8f8:	ldr	r1, [sp, #20]
    d8fa:	ldr	r0, [sp, #24]
    d8fc:	bl	f4a4 <__ssprint_r>
    d900:	cmp	r0, #0
    d902:	bne.w	c554 <_svfprintf_r+0x1f4>
    d906:	ldr	r5, [sp, #116]	; 0x74
    d908:	ldr	r4, [sp, #148]	; 0x94
    d90a:	ldr	r3, [sp, #144]	; 0x90
    d90c:	add.w	r9, sp, #192	; 0xc0
    d910:	b.n	d560 <_svfprintf_r+0x1200>
    d912:	mov	r8, r4
    d914:	movs	r5, #0
    d916:	b.w	c418 <_svfprintf_r+0xb8>
    d91a:	adds	r3, #48	; 0x30
    d91c:	movs	r2, #48	; 0x30
    d91e:	strb.w	r3, [sp, #127]	; 0x7f
    d922:	strb.w	r2, [sp, #126]	; 0x7e
    d926:	add	r3, sp, #128	; 0x80
    d928:	b.n	d79a <_svfprintf_r+0x143a>
    d92a:	ldr	r3, [sp, #132]	; 0x84
    d92c:	b.n	d3e0 <_svfprintf_r+0x1080>
    d92e:	ldr	r2, [sp, #72]	; 0x48
    d930:	ldr	r3, [sp, #60]	; 0x3c
    d932:	add	r3, r2
    d934:	movs	r2, #103	; 0x67
    d936:	str	r3, [sp, #36]	; 0x24
    d938:	str	r2, [sp, #52]	; 0x34
    d93a:	bic.w	r3, r3, r3, asr #31
    d93e:	b.n	d41a <_svfprintf_r+0x10ba>
    d940:	ldr	r6, [pc, #248]	; (da3c <_svfprintf_r+0x16dc>)
    d942:	ldr	r3, [pc, #252]	; (da40 <_svfprintf_r+0x16e0>)
    d944:	ldrb.w	r7, [sp, #111]	; 0x6f
    d948:	b.w	c9ae <_svfprintf_r+0x64e>
    d94c:	movs	r2, #0
    d94e:	movs	r3, #0
    d950:	ldrd	r0, r1, [sp, #96]	; 0x60
    d954:	bl	b1b8 <__aeabi_dcmpeq>
    d958:	cmp	r0, #0
    d95a:	bne.w	d63e <_svfprintf_r+0x12de>
    d95e:	rsb	r5, r5, #1
    d962:	str	r5, [sp, #116]	; 0x74
    d964:	add	r4, r5
    d966:	b.n	d3ba <_svfprintf_r+0x105a>
    d968:	ldr	r3, [sp, #60]	; 0x3c
    d96a:	ldr	r2, [sp, #72]	; 0x48
    d96c:	adds	r5, r3, r2
    d96e:	add.w	r3, r5, fp
    d972:	str	r3, [sp, #36]	; 0x24
    d974:	bic.w	r3, r3, r3, asr #31
    d978:	b.n	d41a <_svfprintf_r+0x10ba>
    d97a:	ldr	r3, [sp, #12]
    d97c:	ands.w	r3, r3, #1
    d980:	bne.w	d7ac <_svfprintf_r+0x144c>
    d984:	str	r3, [sp, #60]	; 0x3c
    d986:	ldr	r3, [sp, #36]	; 0x24
    d988:	bic.w	r3, r3, r3, asr #31
    d98c:	b.n	d41a <_svfprintf_r+0x10ba>
    d98e:	ldr	r3, [sp, #60]	; 0x3c
    d990:	ldr	r2, [sp, #36]	; 0x24
    d992:	rsb	r3, r3, #1
    d996:	add	r2, r3
    d998:	mov	r3, r2
    d99a:	str	r2, [sp, #36]	; 0x24
    d99c:	b.n	d87c <_svfprintf_r+0x151c>
    d99e:	cmp.w	fp, #0
    d9a2:	bne.n	d9aa <_svfprintf_r+0x164a>
    d9a4:	ldr	r3, [sp, #12]
    d9a6:	lsls	r0, r3, #31
    d9a8:	bpl.n	d9ba <_svfprintf_r+0x165a>
    d9aa:	ldr	r3, [sp, #72]	; 0x48
    d9ac:	adds	r5, r3, #1
    d9ae:	add.w	r3, r5, fp
    d9b2:	str	r3, [sp, #36]	; 0x24
    d9b4:	bic.w	r3, r3, r3, asr #31
    d9b8:	b.n	d41a <_svfprintf_r+0x10ba>
    d9ba:	movs	r3, #1
    d9bc:	str	r3, [sp, #36]	; 0x24
    d9be:	b.n	d41a <_svfprintf_r+0x10ba>
    d9c0:	ldr	r0, [sp, #40]	; 0x28
    d9c2:	ldrb.w	r3, [r8, #1]
    d9c6:	ldr	r5, [r0, #0]
    d9c8:	adds	r0, #4
    d9ca:	cmp	r5, #0
    d9cc:	str	r0, [sp, #40]	; 0x28
    d9ce:	mov	r8, r4
    d9d0:	bge.w	c414 <_svfprintf_r+0xb4>
    d9d4:	mov.w	r5, #4294967295
    d9d8:	b.w	c414 <_svfprintf_r+0xb4>
    d9dc:	strb.w	r1, [sp, #111]	; 0x6f
    d9e0:	b.w	c576 <_svfprintf_r+0x216>
    d9e4:	add.w	r3, sp, #126	; 0x7e
    d9e8:	b.n	d79a <_svfprintf_r+0x143a>
    d9ea:	ldr	r2, [sp, #24]
    d9ec:	movs	r3, #12
    d9ee:	str	r3, [r2, #0]
    d9f0:	mov.w	r0, #4294967295
    d9f4:	b.w	c566 <_svfprintf_r+0x206>
    d9f8:	strb.w	r1, [sp, #111]	; 0x6f
    d9fc:	b.w	c670 <_svfprintf_r+0x310>
    da00:	strb.w	r1, [sp, #111]	; 0x6f
    da04:	b.w	c93c <_svfprintf_r+0x5dc>
    da08:	strb.w	r1, [sp, #111]	; 0x6f
    da0c:	b.w	caaa <_svfprintf_r+0x74a>
    da10:	strb.w	r1, [sp, #111]	; 0x6f
    da14:	b.w	ca4e <_svfprintf_r+0x6ee>
    da18:	strb.w	r1, [sp, #111]	; 0x6f
    da1c:	b.w	c9fa <_svfprintf_r+0x69a>
    da20:	strb.w	r1, [sp, #111]	; 0x6f
    da24:	b.w	cc92 <_svfprintf_r+0x932>
    da28:	strb.w	r1, [sp, #111]	; 0x6f
    da2c:	b.w	cc50 <_svfprintf_r+0x8f0>
    da30:	strb.w	r1, [sp, #111]	; 0x6f
    da34:	b.w	cc14 <_svfprintf_r+0x8b4>
    da38:	.word	0x20000d38
    da3c:	.word	0x20000d0c
    da40:	.word	0x20000d08

0000da44 <_vdprintf_r>:
    da44:	push	{r4, r5, r6, r7, lr}
    da46:	sub.w	sp, sp, #532	; 0x214
    da4a:	add	r5, sp, #16
    da4c:	str	r3, [sp, #0]
    da4e:	mov	r7, r1
    da50:	mov	r3, r2
    da52:	mov.w	r4, #512	; 0x200
    da56:	add	r2, sp, #12
    da58:	mov	r1, r5
    da5a:	str	r4, [sp, #12]
    da5c:	mov	r6, r0
    da5e:	bl	f5a4 <_vasnprintf_r>
    da62:	cbz	r0, da88 <_vdprintf_r+0x44>
    da64:	mov	r4, r0
    da66:	mov	r2, r0
    da68:	mov	r1, r7
    da6a:	ldr	r3, [sp, #12]
    da6c:	mov	r0, r6
    da6e:	bl	dac4 <_write_r>
    da72:	cmp	r4, r5
    da74:	str	r0, [sp, #12]
    da76:	beq.n	da82 <_vdprintf_r+0x3e>
    da78:	mov	r0, r6
    da7a:	mov	r1, r4
    da7c:	bl	ebe8 <_free_r>
    da80:	ldr	r0, [sp, #12]
    da82:	add.w	sp, sp, #532	; 0x214
    da86:	pop	{r4, r5, r6, r7, pc}
    da88:	mov.w	r0, #4294967295
    da8c:	b.n	da82 <_vdprintf_r+0x3e>
    da8e:	nop

0000da90 <vdprintf>:
    da90:	push	{r4}
    da92:	ldr	r4, [pc, #16]	; (daa4 <vdprintf+0x14>)
    da94:	mov	r3, r2
    da96:	mov	r2, r1
    da98:	mov	r1, r0
    da9a:	ldr	r0, [r4, #0]
    da9c:	ldr.w	r4, [sp], #4
    daa0:	b.w	da44 <_vdprintf_r>
    daa4:	.word	0x200017bc

0000daa8 <__ascii_wctomb>:
    daa8:	cbz	r1, dab4 <__ascii_wctomb+0xc>
    daaa:	cmp	r2, #255	; 0xff
    daac:	bhi.n	dab8 <__ascii_wctomb+0x10>
    daae:	strb	r2, [r1, #0]
    dab0:	movs	r0, #1
    dab2:	bx	lr
    dab4:	mov	r0, r1
    dab6:	bx	lr
    dab8:	movs	r3, #138	; 0x8a
    daba:	str	r3, [r0, #0]
    dabc:	mov.w	r0, #4294967295
    dac0:	bx	lr
    dac2:	nop

0000dac4 <_write_r>:
    dac4:	push	{r4, r5, r6, lr}
    dac6:	mov	r5, r1
    dac8:	ldr	r4, [pc, #32]	; (daec <_write_r+0x28>)
    daca:	mov	r1, r2
    dacc:	mov	r6, r0
    dace:	mov	r2, r3
    dad0:	mov	r0, r5
    dad2:	movs	r3, #0
    dad4:	str	r3, [r4, #0]
    dad6:	bl	a600 <_write>
    dada:	adds	r3, r0, #1
    dadc:	beq.n	dae0 <_write_r+0x1c>
    dade:	pop	{r4, r5, r6, pc}
    dae0:	ldr	r3, [r4, #0]
    dae2:	cmp	r3, #0
    dae4:	beq.n	dade <_write_r+0x1a>
    dae6:	str	r3, [r6, #0]
    dae8:	pop	{r4, r5, r6, pc}
    daea:	nop
    daec:	.word	0x2000ee10

0000daf0 <quorem>:
    daf0:	ldr	r2, [r0, #16]
    daf2:	ldr	r3, [r1, #16]
    daf4:	cmp	r3, r2
    daf6:	bgt.w	dc14 <quorem+0x124>
    dafa:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dafe:	add.w	r8, r3, #4294967295
    db02:	add.w	r7, r1, #20
    db06:	add.w	fp, r0, #20
    db0a:	ldr.w	r2, [r7, r8, lsl #2]
    db0e:	ldr.w	r3, [fp, r8, lsl #2]
    db12:	mov.w	r4, r8, lsl #2
    db16:	sub	sp, #12
    db18:	adds	r2, #1
    db1a:	udiv	r9, r3, r2
    db1e:	add.w	r3, fp, r4
    db22:	str	r4, [sp, #0]
    db24:	add.w	sl, r7, r4
    db28:	str	r3, [sp, #4]
    db2a:	cmp.w	r9, #0
    db2e:	beq.n	dba4 <quorem+0xb4>
    db30:	movs	r5, #0
    db32:	mov	ip, r7
    db34:	mov	lr, fp
    db36:	mov	r3, r5
    db38:	ldr.w	r6, [ip], #4
    db3c:	ldr.w	r2, [lr]
    db40:	uxth	r4, r6
    db42:	mla	r5, r9, r4, r5
    db46:	lsrs	r6, r6, #16
    db48:	lsrs	r4, r5, #16
    db4a:	mla	r4, r9, r6, r4
    db4e:	uxth	r5, r5
    db50:	subs	r3, r3, r5
    db52:	uxth	r6, r4
    db54:	uxtah	r3, r3, r2
    db58:	rsb	r6, r6, r2, lsr #16
    db5c:	add.w	r6, r6, r3, asr #16
    db60:	uxth	r3, r3
    db62:	orr.w	r3, r3, r6, lsl #16
    db66:	cmp	sl, ip
    db68:	str.w	r3, [lr], #4
    db6c:	mov.w	r5, r4, lsr #16
    db70:	mov.w	r3, r6, asr #16
    db74:	bcs.n	db38 <quorem+0x48>
    db76:	ldr	r3, [sp, #0]
    db78:	ldr.w	r3, [fp, r3]
    db7c:	cbnz	r3, dba4 <quorem+0xb4>
    db7e:	ldr	r4, [sp, #4]
    db80:	subs	r3, r4, #4
    db82:	cmp	fp, r3
    db84:	bcs.n	dba0 <quorem+0xb0>
    db86:	ldr.w	r3, [r4, #-4]
    db8a:	cbnz	r3, dba0 <quorem+0xb0>
    db8c:	sub.w	r3, r4, #8
    db90:	b.n	db98 <quorem+0xa8>
    db92:	ldr	r2, [r3, #0]
    db94:	subs	r3, #4
    db96:	cbnz	r2, dba0 <quorem+0xb0>
    db98:	cmp	fp, r3
    db9a:	add.w	r8, r8, #4294967295
    db9e:	bcc.n	db92 <quorem+0xa2>
    dba0:	str.w	r8, [r0, #16]
    dba4:	mov	r4, r0
    dba6:	bl	f290 <__mcmp>
    dbaa:	cmp	r0, #0
    dbac:	blt.n	dc0c <quorem+0x11c>
    dbae:	add.w	r9, r9, #1
    dbb2:	mov	r5, fp
    dbb4:	movs	r3, #0
    dbb6:	ldr.w	r1, [r7], #4
    dbba:	ldr	r0, [r5, #0]
    dbbc:	uxth	r2, r1
    dbbe:	subs	r2, r3, r2
    dbc0:	lsrs	r1, r1, #16
    dbc2:	uxtah	r2, r2, r0
    dbc6:	rsb	r3, r1, r0, lsr #16
    dbca:	add.w	r3, r3, r2, asr #16
    dbce:	uxth	r1, r2
    dbd0:	orr.w	r1, r1, r3, lsl #16
    dbd4:	cmp	sl, r7
    dbd6:	str.w	r1, [r5], #4
    dbda:	mov.w	r3, r3, asr #16
    dbde:	bcs.n	dbb6 <quorem+0xc6>
    dbe0:	ldr.w	r2, [fp, r8, lsl #2]
    dbe4:	add.w	r3, fp, r8, lsl #2
    dbe8:	cbnz	r2, dc0c <quorem+0x11c>
    dbea:	subs	r2, r3, #4
    dbec:	cmp	fp, r2
    dbee:	bcs.n	dc08 <quorem+0x118>
    dbf0:	ldr.w	r2, [r3, #-4]
    dbf4:	cbnz	r2, dc08 <quorem+0x118>
    dbf6:	subs	r3, #8
    dbf8:	b.n	dc00 <quorem+0x110>
    dbfa:	ldr	r2, [r3, #0]
    dbfc:	subs	r3, #4
    dbfe:	cbnz	r2, dc08 <quorem+0x118>
    dc00:	cmp	fp, r3
    dc02:	add.w	r8, r8, #4294967295
    dc06:	bcc.n	dbfa <quorem+0x10a>
    dc08:	str.w	r8, [r4, #16]
    dc0c:	mov	r0, r9
    dc0e:	add	sp, #12
    dc10:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dc14:	movs	r0, #0
    dc16:	bx	lr

0000dc18 <_dtoa_r>:
    dc18:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dc1c:	vmov	r6, r7, d0
    dc20:	sub	sp, #108	; 0x6c
    dc22:	ldr	r4, [r0, #64]	; 0x40
    dc24:	ldr	r5, [sp, #144]	; 0x90
    dc26:	str	r1, [sp, #0]
    dc28:	mov	r9, r0
    dc2a:	str	r2, [sp, #20]
    dc2c:	str	r3, [sp, #12]
    dc2e:	vmov	sl, s0
    dc32:	mov	fp, r7
    dc34:	cbz	r4, dc4c <_dtoa_r+0x34>
    dc36:	ldr	r2, [r0, #68]	; 0x44
    dc38:	str	r2, [r4, #4]
    dc3a:	movs	r3, #1
    dc3c:	lsls	r3, r2
    dc3e:	str	r3, [r4, #8]
    dc40:	mov	r1, r4
    dc42:	bl	eecc <_Bfree>
    dc46:	movs	r3, #0
    dc48:	str.w	r3, [r9, #64]	; 0x40
    dc4c:	cmp.w	fp, #0
    dc50:	mov	r4, fp
    dc52:	blt.n	dcbe <_dtoa_r+0xa6>
    dc54:	movs	r3, #0
    dc56:	str	r3, [r5, #0]
    dc58:	ldr	r3, [pc, #644]	; (dee0 <_dtoa_r+0x2c8>)
    dc5a:	mov	r2, r3
    dc5c:	ands	r3, r4
    dc5e:	cmp	r3, r2
    dc60:	beq.n	dc90 <_dtoa_r+0x78>
    dc62:	movs	r2, #0
    dc64:	movs	r3, #0
    dc66:	mov	r0, sl
    dc68:	mov	r1, fp
    dc6a:	bl	b1b8 <__aeabi_dcmpeq>
    dc6e:	mov	r6, sl
    dc70:	mov	r7, fp
    dc72:	mov	r8, r0
    dc74:	cbz	r0, dcca <_dtoa_r+0xb2>
    dc76:	ldr	r2, [sp, #12]
    dc78:	movs	r3, #1
    dc7a:	str	r3, [r2, #0]
    dc7c:	ldr	r3, [sp, #148]	; 0x94
    dc7e:	cmp	r3, #0
    dc80:	beq.w	de00 <_dtoa_r+0x1e8>
    dc84:	ldr	r0, [pc, #604]	; (dee4 <_dtoa_r+0x2cc>)
    dc86:	str	r0, [r3, #0]
    dc88:	subs	r0, #1
    dc8a:	add	sp, #108	; 0x6c
    dc8c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dc90:	ldr	r2, [sp, #12]
    dc92:	movw	r3, #9999	; 0x270f
    dc96:	str	r3, [r2, #0]
    dc98:	cmp.w	sl, #0
    dc9c:	beq.w	ddd4 <_dtoa_r+0x1bc>
    dca0:	ldr	r0, [pc, #580]	; (dee8 <_dtoa_r+0x2d0>)
    dca2:	ldr	r3, [sp, #148]	; 0x94
    dca4:	cmp	r3, #0
    dca6:	beq.n	dc8a <_dtoa_r+0x72>
    dca8:	ldrb	r3, [r0, #3]
    dcaa:	cmp	r3, #0
    dcac:	beq.w	de04 <_dtoa_r+0x1ec>
    dcb0:	add.w	r3, r0, #8
    dcb4:	ldr	r2, [sp, #148]	; 0x94
    dcb6:	str	r3, [r2, #0]
    dcb8:	add	sp, #108	; 0x6c
    dcba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dcbe:	movs	r3, #1
    dcc0:	bic.w	r4, fp, #2147483648	; 0x80000000
    dcc4:	str	r3, [r5, #0]
    dcc6:	mov	fp, r4
    dcc8:	b.n	dc58 <_dtoa_r+0x40>
    dcca:	add	r2, sp, #96	; 0x60
    dccc:	add	r1, sp, #100	; 0x64
    dcce:	vmov	d0, r6, r7
    dcd2:	mov	r0, r9
    dcd4:	bl	f3e8 <__d2b>
    dcd8:	lsrs	r5, r4, #20
    dcda:	str	r0, [sp, #40]	; 0x28
    dcdc:	bne.w	dde6 <_dtoa_r+0x1ce>
    dce0:	ldr	r5, [sp, #96]	; 0x60
    dce2:	ldr	r6, [sp, #100]	; 0x64
    dce4:	add	r6, r5
    dce6:	addw	r3, r6, #1074	; 0x432
    dcea:	cmp	r3, #32
    dcec:	ble.w	e200 <_dtoa_r+0x5e8>
    dcf0:	rsb	r3, r3, #64	; 0x40
    dcf4:	addw	r0, r6, #1042	; 0x412
    dcf8:	lsls	r4, r3
    dcfa:	lsr.w	r0, sl, r0
    dcfe:	orrs	r0, r4
    dd00:	bl	abfc <__aeabi_ui2d>
    dd04:	movs	r3, #1
    dd06:	subs	r4, r6, #1
    dd08:	sub.w	r1, r1, #32505856	; 0x1f00000
    dd0c:	str	r3, [sp, #60]	; 0x3c
    dd0e:	movs	r2, #0
    dd10:	ldr	r3, [pc, #472]	; (deec <_dtoa_r+0x2d4>)
    dd12:	bl	a980 <__aeabi_dsub>
    dd16:	add	r3, pc, #432	; (adr r3, dec8 <_dtoa_r+0x2b0>)
    dd18:	ldrd	r2, r3, [r3]
    dd1c:	bl	ace8 <__aeabi_dmul>
    dd20:	add	r3, pc, #428	; (adr r3, ded0 <_dtoa_r+0x2b8>)
    dd22:	ldrd	r2, r3, [r3]
    dd26:	bl	a984 <__adddf3>
    dd2a:	mov	r6, r0
    dd2c:	mov	r0, r4
    dd2e:	mov	r7, r1
    dd30:	bl	ac1c <__aeabi_i2d>
    dd34:	add	r3, pc, #416	; (adr r3, ded8 <_dtoa_r+0x2c0>)
    dd36:	ldrd	r2, r3, [r3]
    dd3a:	bl	ace8 <__aeabi_dmul>
    dd3e:	mov	r2, r0
    dd40:	mov	r3, r1
    dd42:	mov	r0, r6
    dd44:	mov	r1, r7
    dd46:	bl	a984 <__adddf3>
    dd4a:	mov	r6, r0
    dd4c:	mov	r7, r1
    dd4e:	bl	f664 <__aeabi_d2iz>
    dd52:	movs	r2, #0
    dd54:	str	r0, [sp, #16]
    dd56:	movs	r3, #0
    dd58:	mov	r0, r6
    dd5a:	mov	r1, r7
    dd5c:	bl	b1cc <__aeabi_dcmplt>
    dd60:	cmp	r0, #0
    dd62:	bne.w	e1b6 <_dtoa_r+0x59e>
    dd66:	ldr	r6, [sp, #16]
    dd68:	cmp	r6, #22
    dd6a:	bhi.w	e1b0 <_dtoa_r+0x598>
    dd6e:	ldr	r3, [pc, #384]	; (def0 <_dtoa_r+0x2d8>)
    dd70:	add.w	r3, r3, r6, lsl #3
    dd74:	ldrd	r0, r1, [r3]
    dd78:	mov	r2, sl
    dd7a:	mov	r3, fp
    dd7c:	bl	b208 <__aeabi_dcmpgt>
    dd80:	cmp	r0, #0
    dd82:	beq.w	e20a <_dtoa_r+0x5f2>
    dd86:	subs	r3, r6, #1
    dd88:	str	r3, [sp, #16]
    dd8a:	movs	r3, #0
    dd8c:	str	r3, [sp, #52]	; 0x34
    dd8e:	subs	r5, r5, r4
    dd90:	subs.w	r8, r5, #1
    dd94:	bmi.w	e1ec <_dtoa_r+0x5d4>
    dd98:	movs	r3, #0
    dd9a:	str	r3, [sp, #28]
    dd9c:	ldr	r3, [sp, #16]
    dd9e:	cmp	r3, #0
    dda0:	blt.w	e1da <_dtoa_r+0x5c2>
    dda4:	add	r8, r3
    dda6:	str	r3, [sp, #48]	; 0x30
    dda8:	movs	r3, #0
    ddaa:	str	r3, [sp, #24]
    ddac:	ldr	r3, [sp, #0]
    ddae:	cmp	r3, #9
    ddb0:	bhi.n	de08 <_dtoa_r+0x1f0>
    ddb2:	cmp	r3, #5
    ddb4:	ble.w	ea40 <_dtoa_r+0xe28>
    ddb8:	subs	r3, #4
    ddba:	str	r3, [sp, #0]
    ddbc:	movs	r6, #0
    ddbe:	ldr	r3, [sp, #0]
    ddc0:	subs	r3, #2
    ddc2:	cmp	r3, #3
    ddc4:	bhi.w	ea0e <_dtoa_r+0xdf6>
    ddc8:	tbh	[pc, r3, lsl #1]
    ddcc:	.word	0x0224032b
    ddd0:	.word	0x04500336
    ddd4:	ldr	r3, [pc, #272]	; (dee8 <_dtoa_r+0x2d0>)
    ddd6:	ldr	r2, [pc, #284]	; (def4 <_dtoa_r+0x2dc>)
    ddd8:	ubfx	r0, r4, #0, #20
    dddc:	cmp	r0, #0
    ddde:	ite	ne
    dde0:	movne	r0, r3
    dde2:	moveq	r0, r2
    dde4:	b.n	dca2 <_dtoa_r+0x8a>
    dde6:	ubfx	r3, fp, #0, #20
    ddea:	orr.w	r1, r3, #1069547520	; 0x3fc00000
    ddee:	subw	r4, r5, #1023	; 0x3ff
    ddf2:	mov	r0, sl
    ddf4:	str.w	r8, [sp, #60]	; 0x3c
    ddf8:	orr.w	r1, r1, #3145728	; 0x300000
    ddfc:	ldr	r5, [sp, #96]	; 0x60
    ddfe:	b.n	dd0e <_dtoa_r+0xf6>
    de00:	ldr	r0, [pc, #244]	; (def8 <_dtoa_r+0x2e0>)
    de02:	b.n	dc8a <_dtoa_r+0x72>
    de04:	adds	r3, r0, #3
    de06:	b.n	dcb4 <_dtoa_r+0x9c>
    de08:	movs	r1, #0
    de0a:	str.w	r1, [r9, #68]	; 0x44
    de0e:	mov	r0, r9
    de10:	mov	r4, r1
    de12:	str	r1, [sp, #0]
    de14:	bl	ee80 <_Balloc>
    de18:	mov.w	r3, #4294967295
    de1c:	str	r3, [sp, #32]
    de1e:	str	r3, [sp, #56]	; 0x38
    de20:	movs	r3, #1
    de22:	str	r0, [sp, #36]	; 0x24
    de24:	str.w	r0, [r9, #64]	; 0x40
    de28:	str	r4, [sp, #20]
    de2a:	str	r3, [sp, #44]	; 0x2c
    de2c:	ldr	r3, [sp, #100]	; 0x64
    de2e:	cmp	r3, #0
    de30:	blt.w	dfd4 <_dtoa_r+0x3bc>
    de34:	ldr	r2, [sp, #16]
    de36:	cmp	r2, #14
    de38:	bgt.w	dfd4 <_dtoa_r+0x3bc>
    de3c:	ldr	r3, [pc, #176]	; (def0 <_dtoa_r+0x2d8>)
    de3e:	add.w	r3, r3, r2, lsl #3
    de42:	vldr	d7, [r3]
    de46:	ldr	r3, [sp, #20]
    de48:	cmp	r3, #0
    de4a:	vstr	d7, [sp]
    de4e:	blt.w	e44e <_dtoa_r+0x836>
    de52:	mov	r6, sl
    de54:	mov	r7, fp
    de56:	ldrd	sl, fp, [sp]
    de5a:	mov	r0, r6
    de5c:	mov	r2, sl
    de5e:	mov	r3, fp
    de60:	mov	r1, r7
    de62:	bl	af3c <__aeabi_ddiv>
    de66:	bl	f664 <__aeabi_d2iz>
    de6a:	mov	r4, r0
    de6c:	bl	ac1c <__aeabi_i2d>
    de70:	mov	r2, sl
    de72:	mov	r3, fp
    de74:	bl	ace8 <__aeabi_dmul>
    de78:	mov	r3, r1
    de7a:	mov	r2, r0
    de7c:	mov	r1, r7
    de7e:	mov	r0, r6
    de80:	bl	a980 <__aeabi_dsub>
    de84:	ldr	r5, [sp, #36]	; 0x24
    de86:	add.w	r3, r4, #48	; 0x30
    de8a:	strb	r3, [r5, #0]
    de8c:	ldr	r3, [sp, #32]
    de8e:	cmp	r3, #1
    de90:	mov	r6, r0
    de92:	mov	r7, r1
    de94:	add.w	r5, r5, #1
    de98:	beq.n	df5e <_dtoa_r+0x346>
    de9a:	movs	r2, #0
    de9c:	ldr	r3, [pc, #92]	; (defc <_dtoa_r+0x2e4>)
    de9e:	bl	ace8 <__aeabi_dmul>
    dea2:	movs	r2, #0
    dea4:	movs	r3, #0
    dea6:	mov	r6, r0
    dea8:	mov	r7, r1
    deaa:	bl	b1b8 <__aeabi_dcmpeq>
    deae:	cmp	r0, #0
    deb0:	bne.n	dfae <_dtoa_r+0x396>
    deb2:	str.w	r9, [sp, #20]
    deb6:	ldr.w	sl, [sp, #32]
    deba:	ldr.w	fp, [sp, #36]	; 0x24
    debe:	ldrd	r8, r9, [sp]
    dec2:	b.n	df16 <_dtoa_r+0x2fe>
    dec4:	nop.w
    dec8:	.word	0x636f4361
    decc:	.word	0x3fd287a7
    ded0:	.word	0x8b60c8b3
    ded4:	.word	0x3fc68a28
    ded8:	.word	0x509f79fb
    dedc:	.word	0x3fd34413
    dee0:	.word	0x7ff00000
    dee4:	.word	0x20000ced
    dee8:	.word	0x20000d4c
    deec:	.word	0x3ff80000
    def0:	.word	0x20000328
    def4:	.word	0x20000d40
    def8:	.word	0x20000cec
    defc:	.word	0x40240000
    df00:	bl	ace8 <__aeabi_dmul>
    df04:	movs	r2, #0
    df06:	movs	r3, #0
    df08:	mov	r6, r0
    df0a:	mov	r7, r1
    df0c:	bl	b1b8 <__aeabi_dcmpeq>
    df10:	cmp	r0, #0
    df12:	bne.w	e672 <_dtoa_r+0xa5a>
    df16:	mov	r2, r8
    df18:	mov	r3, r9
    df1a:	mov	r0, r6
    df1c:	mov	r1, r7
    df1e:	bl	af3c <__aeabi_ddiv>
    df22:	bl	f664 <__aeabi_d2iz>
    df26:	mov	r4, r0
    df28:	bl	ac1c <__aeabi_i2d>
    df2c:	mov	r2, r8
    df2e:	mov	r3, r9
    df30:	bl	ace8 <__aeabi_dmul>
    df34:	mov	r2, r0
    df36:	mov	r3, r1
    df38:	mov	r0, r6
    df3a:	mov	r1, r7
    df3c:	bl	a980 <__aeabi_dsub>
    df40:	add.w	lr, r4, #48	; 0x30
    df44:	strb.w	lr, [r5], #1
    df48:	rsb	lr, fp, r5
    df4c:	cmp	lr, sl
    df4e:	mov	r6, r0
    df50:	mov	r7, r1
    df52:	mov.w	r2, #0
    df56:	ldr	r3, [pc, #696]	; (e210 <_dtoa_r+0x5f8>)
    df58:	bne.n	df00 <_dtoa_r+0x2e8>
    df5a:	ldr.w	r9, [sp, #20]
    df5e:	mov	r2, r6
    df60:	mov	r3, r7
    df62:	mov	r0, r6
    df64:	mov	r1, r7
    df66:	bl	a984 <__adddf3>
    df6a:	mov	r6, r0
    df6c:	mov	r7, r1
    df6e:	mov	r2, r0
    df70:	mov	r3, r1
    df72:	ldrd	r0, r1, [sp]
    df76:	bl	b1cc <__aeabi_dcmplt>
    df7a:	cbnz	r0, df8e <_dtoa_r+0x376>
    df7c:	mov	r2, r6
    df7e:	mov	r3, r7
    df80:	ldrd	r0, r1, [sp]
    df84:	bl	b1b8 <__aeabi_dcmpeq>
    df88:	cbz	r0, dfae <_dtoa_r+0x396>
    df8a:	lsls	r3, r4, #31
    df8c:	bpl.n	dfae <_dtoa_r+0x396>
    df8e:	ldrb.w	r4, [r5, #-1]
    df92:	ldr	r2, [sp, #36]	; 0x24
    df94:	subs	r3, r5, #1
    df96:	b.n	dfa2 <_dtoa_r+0x38a>
    df98:	cmp	r2, r3
    df9a:	beq.w	e796 <_dtoa_r+0xb7e>
    df9e:	ldrb.w	r4, [r3, #-1]!
    dfa2:	cmp	r4, #57	; 0x39
    dfa4:	add.w	r5, r3, #1
    dfa8:	beq.n	df98 <_dtoa_r+0x380>
    dfaa:	adds	r4, #1
    dfac:	strb	r4, [r3, #0]
    dfae:	ldr	r1, [sp, #40]	; 0x28
    dfb0:	mov	r0, r9
    dfb2:	bl	eecc <_Bfree>
    dfb6:	movs	r2, #0
    dfb8:	ldr	r3, [sp, #16]
    dfba:	strb	r2, [r5, #0]
    dfbc:	ldr	r2, [sp, #12]
    dfbe:	adds	r3, #1
    dfc0:	str	r3, [r2, #0]
    dfc2:	ldr	r3, [sp, #148]	; 0x94
    dfc4:	cmp	r3, #0
    dfc6:	beq.w	e700 <_dtoa_r+0xae8>
    dfca:	ldr	r0, [sp, #36]	; 0x24
    dfcc:	str	r5, [r3, #0]
    dfce:	add	sp, #108	; 0x6c
    dfd0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dfd4:	ldr	r2, [sp, #44]	; 0x2c
    dfd6:	cmp	r2, #0
    dfd8:	beq.w	e1f8 <_dtoa_r+0x5e0>
    dfdc:	ldr	r2, [sp, #0]
    dfde:	cmp	r2, #1
    dfe0:	ble.w	e492 <_dtoa_r+0x87a>
    dfe4:	ldr	r3, [sp, #32]
    dfe6:	ldr	r2, [sp, #24]
    dfe8:	subs	r7, r3, #1
    dfea:	cmp	r2, r7
    dfec:	blt.w	e706 <_dtoa_r+0xaee>
    dff0:	subs	r7, r2, r7
    dff2:	ldr	r3, [sp, #32]
    dff4:	cmp	r3, #0
    dff6:	blt.w	e8fa <_dtoa_r+0xce2>
    dffa:	ldr	r5, [sp, #28]
    dffc:	ldr	r3, [sp, #32]
    dffe:	ldr	r2, [sp, #28]
    e000:	movs	r1, #1
    e002:	add	r2, r3
    e004:	mov	r0, r9
    e006:	str	r2, [sp, #28]
    e008:	add	r8, r3
    e00a:	bl	effc <__i2b>
    e00e:	mov	r6, r0
    e010:	cbz	r5, e02c <_dtoa_r+0x414>
    e012:	cmp.w	r8, #0
    e016:	ble.n	e02c <_dtoa_r+0x414>
    e018:	cmp	r5, r8
    e01a:	ldr	r2, [sp, #28]
    e01c:	mov	r3, r5
    e01e:	it	ge
    e020:	movge	r3, r8
    e022:	subs	r2, r2, r3
    e024:	str	r2, [sp, #28]
    e026:	subs	r5, r5, r3
    e028:	rsb	r8, r3, r8
    e02c:	ldr	r3, [sp, #24]
    e02e:	cmp	r3, #0
    e030:	ble.w	e61e <_dtoa_r+0xa06>
    e034:	ldr	r2, [sp, #44]	; 0x2c
    e036:	cmp	r2, #0
    e038:	beq.w	e440 <_dtoa_r+0x828>
    e03c:	cmp	r7, #0
    e03e:	beq.w	e440 <_dtoa_r+0x828>
    e042:	mov	r1, r6
    e044:	mov	r2, r7
    e046:	mov	r0, r9
    e048:	bl	f140 <__pow5mult>
    e04c:	ldr	r2, [sp, #40]	; 0x28
    e04e:	mov	r1, r0
    e050:	mov	r6, r0
    e052:	mov	r0, r9
    e054:	bl	f010 <__multiply>
    e058:	ldr	r1, [sp, #40]	; 0x28
    e05a:	mov	r4, r0
    e05c:	mov	r0, r9
    e05e:	bl	eecc <_Bfree>
    e062:	ldr	r3, [sp, #24]
    e064:	subs	r3, r3, r7
    e066:	str	r3, [sp, #24]
    e068:	bne.w	e43e <_dtoa_r+0x826>
    e06c:	movs	r1, #1
    e06e:	mov	r0, r9
    e070:	bl	effc <__i2b>
    e074:	ldr	r3, [sp, #48]	; 0x30
    e076:	str	r0, [sp, #24]
    e078:	cmp	r3, #0
    e07a:	beq.w	e4a8 <_dtoa_r+0x890>
    e07e:	mov	r1, r0
    e080:	mov	r2, r3
    e082:	mov	r0, r9
    e084:	bl	f140 <__pow5mult>
    e088:	ldr	r3, [sp, #0]
    e08a:	str	r0, [sp, #24]
    e08c:	cmp	r3, #1
    e08e:	ble.w	e678 <_dtoa_r+0xa60>
    e092:	movs	r7, #0
    e094:	ldr	r2, [sp, #24]
    e096:	ldr	r3, [r2, #16]
    e098:	add.w	r3, r2, r3, lsl #2
    e09c:	ldr	r0, [r3, #16]
    e09e:	bl	ef60 <__hi0bits>
    e0a2:	rsb	r0, r0, #32
    e0a6:	add	r0, r8
    e0a8:	ands.w	r0, r0, #31
    e0ac:	beq.w	e4a4 <_dtoa_r+0x88c>
    e0b0:	rsb	r3, r0, #32
    e0b4:	cmp	r3, #4
    e0b6:	ble.w	ea34 <_dtoa_r+0xe1c>
    e0ba:	rsb	r0, r0, #28
    e0be:	ldr	r3, [sp, #28]
    e0c0:	add	r3, r0
    e0c2:	str	r3, [sp, #28]
    e0c4:	add	r5, r0
    e0c6:	add	r8, r0
    e0c8:	ldr	r3, [sp, #28]
    e0ca:	cmp	r3, #0
    e0cc:	ble.n	e0da <_dtoa_r+0x4c2>
    e0ce:	mov	r1, r4
    e0d0:	mov	r2, r3
    e0d2:	mov	r0, r9
    e0d4:	bl	f1e0 <__lshift>
    e0d8:	mov	r4, r0
    e0da:	cmp.w	r8, #0
    e0de:	ble.n	e0ec <_dtoa_r+0x4d4>
    e0e0:	mov	r2, r8
    e0e2:	ldr	r1, [sp, #24]
    e0e4:	mov	r0, r9
    e0e6:	bl	f1e0 <__lshift>
    e0ea:	str	r0, [sp, #24]
    e0ec:	ldr	r3, [sp, #52]	; 0x34
    e0ee:	cmp	r3, #0
    e0f0:	bne.w	e5e8 <_dtoa_r+0x9d0>
    e0f4:	ldr	r3, [sp, #32]
    e0f6:	cmp	r3, #0
    e0f8:	ble.w	e622 <_dtoa_r+0xa0a>
    e0fc:	ldr	r3, [sp, #44]	; 0x2c
    e0fe:	cmp	r3, #0
    e100:	bne.w	e4ec <_dtoa_r+0x8d4>
    e104:	ldr.w	fp, [sp, #36]	; 0x24
    e108:	ldr	r7, [sp, #32]
    e10a:	ldr.w	r8, [sp, #24]
    e10e:	mov	r5, fp
    e110:	b.n	e118 <_dtoa_r+0x500>
    e112:	bl	eee0 <__multadd>
    e116:	mov	r4, r0
    e118:	mov	r1, r8
    e11a:	mov	r0, r4
    e11c:	bl	daf0 <quorem>
    e120:	add.w	sl, r0, #48	; 0x30
    e124:	strb.w	sl, [r5], #1
    e128:	rsb	r3, fp, r5
    e12c:	cmp	r3, r7
    e12e:	mov.w	r2, #10
    e132:	mov.w	r3, #0
    e136:	mov	r1, r4
    e138:	mov	r0, r9
    e13a:	blt.n	e112 <_dtoa_r+0x4fa>
    e13c:	ldr	r3, [sp, #36]	; 0x24
    e13e:	ldr	r2, [sp, #32]
    e140:	cmp	r2, #1
    e142:	ite	ge
    e144:	addge	r3, r3, r2
    e146:	addlt	r3, #1
    e148:	mov	r5, r3
    e14a:	mov.w	fp, #0
    e14e:	mov	r1, r4
    e150:	movs	r2, #1
    e152:	mov	r0, r9
    e154:	bl	f1e0 <__lshift>
    e158:	ldr	r1, [sp, #24]
    e15a:	str	r0, [sp, #40]	; 0x28
    e15c:	bl	f290 <__mcmp>
    e160:	cmp	r0, #0
    e162:	ble.w	e770 <_dtoa_r+0xb58>
    e166:	ldrb.w	r2, [r5, #-1]
    e16a:	ldr	r1, [sp, #36]	; 0x24
    e16c:	subs	r3, r5, #1
    e16e:	b.n	e17a <_dtoa_r+0x562>
    e170:	cmp	r3, r1
    e172:	beq.w	e65e <_dtoa_r+0xa46>
    e176:	ldrb.w	r2, [r3, #-1]!
    e17a:	cmp	r2, #57	; 0x39
    e17c:	add.w	r5, r3, #1
    e180:	beq.n	e170 <_dtoa_r+0x558>
    e182:	adds	r2, #1
    e184:	strb	r2, [r3, #0]
    e186:	ldr	r1, [sp, #24]
    e188:	mov	r0, r9
    e18a:	bl	eecc <_Bfree>
    e18e:	cmp	r6, #0
    e190:	beq.w	dfae <_dtoa_r+0x396>
    e194:	cmp.w	fp, #0
    e198:	beq.n	e1a6 <_dtoa_r+0x58e>
    e19a:	cmp	fp, r6
    e19c:	beq.n	e1a6 <_dtoa_r+0x58e>
    e19e:	mov	r1, fp
    e1a0:	mov	r0, r9
    e1a2:	bl	eecc <_Bfree>
    e1a6:	mov	r1, r6
    e1a8:	mov	r0, r9
    e1aa:	bl	eecc <_Bfree>
    e1ae:	b.n	dfae <_dtoa_r+0x396>
    e1b0:	movs	r3, #1
    e1b2:	str	r3, [sp, #52]	; 0x34
    e1b4:	b.n	dd8e <_dtoa_r+0x176>
    e1b6:	ldr.w	r8, [sp, #16]
    e1ba:	mov	r0, r8
    e1bc:	bl	ac1c <__aeabi_i2d>
    e1c0:	mov	r2, r0
    e1c2:	mov	r3, r1
    e1c4:	mov	r0, r6
    e1c6:	mov	r1, r7
    e1c8:	bl	b1b8 <__aeabi_dcmpeq>
    e1cc:	cmp	r0, #0
    e1ce:	bne.w	dd66 <_dtoa_r+0x14e>
    e1d2:	add.w	r3, r8, #4294967295
    e1d6:	str	r3, [sp, #16]
    e1d8:	b.n	dd66 <_dtoa_r+0x14e>
    e1da:	ldr	r2, [sp, #28]
    e1dc:	ldr	r3, [sp, #16]
    e1de:	subs	r2, r2, r3
    e1e0:	negs	r3, r3
    e1e2:	str	r3, [sp, #24]
    e1e4:	movs	r3, #0
    e1e6:	str	r2, [sp, #28]
    e1e8:	str	r3, [sp, #48]	; 0x30
    e1ea:	b.n	ddac <_dtoa_r+0x194>
    e1ec:	rsb	r3, r8, #0
    e1f0:	str	r3, [sp, #28]
    e1f2:	mov.w	r8, #0
    e1f6:	b.n	dd9c <_dtoa_r+0x184>
    e1f8:	ldr	r7, [sp, #24]
    e1fa:	ldr	r5, [sp, #28]
    e1fc:	ldr	r6, [sp, #44]	; 0x2c
    e1fe:	b.n	e010 <_dtoa_r+0x3f8>
    e200:	rsb	r4, r3, #32
    e204:	lsl.w	r0, sl, r4
    e208:	b.n	dd00 <_dtoa_r+0xe8>
    e20a:	str	r0, [sp, #52]	; 0x34
    e20c:	b.n	dd8e <_dtoa_r+0x176>
    e20e:	nop
    e210:	.word	0x40240000
    e214:	movs	r3, #0
    e216:	str	r3, [sp, #44]	; 0x2c
    e218:	ldr	r3, [sp, #16]
    e21a:	ldr	r2, [sp, #20]
    e21c:	add	r3, r2
    e21e:	str	r3, [sp, #56]	; 0x38
    e220:	adds	r3, #1
    e222:	cmp	r3, #0
    e224:	str	r3, [sp, #32]
    e226:	ble.w	e724 <_dtoa_r+0xb0c>
    e22a:	ldr	r4, [sp, #32]
    e22c:	mov	r5, r4
    e22e:	movs	r1, #0
    e230:	cmp	r5, #23
    e232:	str.w	r1, [r9, #68]	; 0x44
    e236:	bls.n	e250 <_dtoa_r+0x638>
    e238:	movs	r2, #1
    e23a:	movs	r3, #4
    e23c:	lsls	r3, r3, #1
    e23e:	add.w	r0, r3, #20
    e242:	cmp	r0, r5
    e244:	mov	r1, r2
    e246:	add.w	r2, r2, #1
    e24a:	bls.n	e23c <_dtoa_r+0x624>
    e24c:	str.w	r1, [r9, #68]	; 0x44
    e250:	mov	r0, r9
    e252:	bl	ee80 <_Balloc>
    e256:	cmp	r4, #14
    e258:	str	r0, [sp, #36]	; 0x24
    e25a:	str.w	r0, [r9, #64]	; 0x40
    e25e:	bhi.w	de2c <_dtoa_r+0x214>
    e262:	cmp	r6, #0
    e264:	beq.w	de2c <_dtoa_r+0x214>
    e268:	ldr	r1, [sp, #16]
    e26a:	cmp	r1, #0
    e26c:	strd	sl, fp, [sp, #64]	; 0x40
    e270:	ble.w	e7a8 <_dtoa_r+0xb90>
    e274:	ldr	r3, [pc, #576]	; (e4b8 <_dtoa_r+0x8a0>)
    e276:	and.w	r2, r1, #15
    e27a:	asrs	r6, r1, #4
    e27c:	add.w	r3, r3, r2, lsl #3
    e280:	lsls	r0, r6, #27
    e282:	ldrd	r4, r5, [r3]
    e286:	bpl.w	e716 <_dtoa_r+0xafe>
    e28a:	ldr	r3, [pc, #560]	; (e4bc <_dtoa_r+0x8a4>)
    e28c:	mov	r0, sl
    e28e:	mov	r1, fp
    e290:	ldrd	r2, r3, [r3, #32]
    e294:	bl	af3c <__aeabi_ddiv>
    e298:	strd	r0, r1, [sp, #72]	; 0x48
    e29c:	and.w	r6, r6, #15
    e2a0:	mov.w	sl, #3
    e2a4:	cbz	r6, e2c8 <_dtoa_r+0x6b0>
    e2a6:	ldr	r7, [pc, #532]	; (e4bc <_dtoa_r+0x8a4>)
    e2a8:	lsls	r1, r6, #31
    e2aa:	bpl.n	e2c0 <_dtoa_r+0x6a8>
    e2ac:	mov	r0, r4
    e2ae:	mov	r1, r5
    e2b0:	ldrd	r2, r3, [r7]
    e2b4:	bl	ace8 <__aeabi_dmul>
    e2b8:	add.w	sl, sl, #1
    e2bc:	mov	r4, r0
    e2be:	mov	r5, r1
    e2c0:	asrs	r6, r6, #1
    e2c2:	add.w	r7, r7, #8
    e2c6:	bne.n	e2a8 <_dtoa_r+0x690>
    e2c8:	mov	r2, r4
    e2ca:	mov	r3, r5
    e2cc:	ldrd	r0, r1, [sp, #72]	; 0x48
    e2d0:	bl	af3c <__aeabi_ddiv>
    e2d4:	mov	r6, r0
    e2d6:	mov	r7, r1
    e2d8:	ldr	r3, [sp, #52]	; 0x34
    e2da:	cbz	r3, e2ee <_dtoa_r+0x6d6>
    e2dc:	movs	r2, #0
    e2de:	ldr	r3, [pc, #480]	; (e4c0 <_dtoa_r+0x8a8>)
    e2e0:	mov	r0, r6
    e2e2:	mov	r1, r7
    e2e4:	bl	b1cc <__aeabi_dcmplt>
    e2e8:	cmp	r0, #0
    e2ea:	bne.w	e922 <_dtoa_r+0xd0a>
    e2ee:	mov	r0, sl
    e2f0:	bl	ac1c <__aeabi_i2d>
    e2f4:	mov	r2, r6
    e2f6:	mov	r3, r7
    e2f8:	bl	ace8 <__aeabi_dmul>
    e2fc:	ldr	r3, [pc, #452]	; (e4c4 <_dtoa_r+0x8ac>)
    e2fe:	movs	r2, #0
    e300:	bl	a984 <__adddf3>
    e304:	ldr	r3, [sp, #32]
    e306:	mov	r4, r0
    e308:	sub.w	r5, r1, #54525952	; 0x3400000
    e30c:	cmp	r3, #0
    e30e:	beq.w	e6c8 <_dtoa_r+0xab0>
    e312:	ldr	r3, [sp, #16]
    e314:	str	r3, [sp, #88]	; 0x58
    e316:	ldr	r3, [sp, #32]
    e318:	str	r3, [sp, #72]	; 0x48
    e31a:	ldr	r3, [sp, #44]	; 0x2c
    e31c:	cmp	r3, #0
    e31e:	beq.w	e84a <_dtoa_r+0xc32>
    e322:	ldr	r2, [sp, #72]	; 0x48
    e324:	ldr	r3, [pc, #400]	; (e4b8 <_dtoa_r+0x8a0>)
    e326:	ldr	r1, [pc, #416]	; (e4c8 <_dtoa_r+0x8b0>)
    e328:	add.w	r3, r3, r2, lsl #3
    e32c:	ldrd	r2, r3, [r3, #-8]
    e330:	movs	r0, #0
    e332:	bl	af3c <__aeabi_ddiv>
    e336:	mov	r2, r4
    e338:	mov	r3, r5
    e33a:	bl	a980 <__aeabi_dsub>
    e33e:	mov	sl, r0
    e340:	mov	fp, r1
    e342:	mov	r0, r6
    e344:	mov	r1, r7
    e346:	bl	f664 <__aeabi_d2iz>
    e34a:	mov	r4, r0
    e34c:	bl	ac1c <__aeabi_i2d>
    e350:	mov	r2, r0
    e352:	mov	r3, r1
    e354:	mov	r0, r6
    e356:	mov	r1, r7
    e358:	bl	a980 <__aeabi_dsub>
    e35c:	adds	r4, #48	; 0x30
    e35e:	ldr	r5, [sp, #36]	; 0x24
    e360:	uxtb	r4, r4
    e362:	mov	r6, r0
    e364:	mov	r7, r1
    e366:	strb	r4, [r5, #0]
    e368:	mov	r2, r0
    e36a:	mov	r3, r1
    e36c:	mov	r0, sl
    e36e:	mov	r1, fp
    e370:	adds	r5, #1
    e372:	bl	b208 <__aeabi_dcmpgt>
    e376:	cmp	r0, #0
    e378:	bne.n	e41c <_dtoa_r+0x804>
    e37a:	mov	r2, r6
    e37c:	mov	r3, r7
    e37e:	movs	r0, #0
    e380:	ldr	r1, [pc, #316]	; (e4c0 <_dtoa_r+0x8a8>)
    e382:	bl	a980 <__aeabi_dsub>
    e386:	mov	r2, r0
    e388:	mov	r3, r1
    e38a:	mov	r0, sl
    e38c:	mov	r1, fp
    e38e:	bl	b208 <__aeabi_dcmpgt>
    e392:	cmp	r0, #0
    e394:	bne.w	e9a8 <_dtoa_r+0xd90>
    e398:	ldr	r2, [sp, #72]	; 0x48
    e39a:	cmp	r2, #1
    e39c:	ble.w	e78e <_dtoa_r+0xb76>
    e3a0:	ldr	r3, [sp, #72]	; 0x48
    e3a2:	ldr	r2, [sp, #36]	; 0x24
    e3a4:	str.w	r8, [sp, #72]	; 0x48
    e3a8:	add	r3, r2
    e3aa:	mov	r8, r3
    e3ac:	b.n	e3ca <_dtoa_r+0x7b2>
    e3ae:	movs	r0, #0
    e3b0:	ldr	r1, [pc, #268]	; (e4c0 <_dtoa_r+0x8a8>)
    e3b2:	bl	a980 <__aeabi_dsub>
    e3b6:	mov	r2, sl
    e3b8:	mov	r3, fp
    e3ba:	bl	b1cc <__aeabi_dcmplt>
    e3be:	cmp	r0, #0
    e3c0:	bne.w	e9a8 <_dtoa_r+0xd90>
    e3c4:	cmp	r5, r8
    e3c6:	beq.w	e78a <_dtoa_r+0xb72>
    e3ca:	mov	r0, sl
    e3cc:	mov	r1, fp
    e3ce:	movs	r2, #0
    e3d0:	ldr	r3, [pc, #248]	; (e4cc <_dtoa_r+0x8b4>)
    e3d2:	bl	ace8 <__aeabi_dmul>
    e3d6:	movs	r2, #0
    e3d8:	ldr	r3, [pc, #240]	; (e4cc <_dtoa_r+0x8b4>)
    e3da:	mov	sl, r0
    e3dc:	mov	fp, r1
    e3de:	mov	r0, r6
    e3e0:	mov	r1, r7
    e3e2:	bl	ace8 <__aeabi_dmul>
    e3e6:	mov	r7, r1
    e3e8:	mov	r6, r0
    e3ea:	bl	f664 <__aeabi_d2iz>
    e3ee:	mov	r4, r0
    e3f0:	bl	ac1c <__aeabi_i2d>
    e3f4:	mov	r2, r0
    e3f6:	mov	r3, r1
    e3f8:	mov	r0, r6
    e3fa:	mov	r1, r7
    e3fc:	bl	a980 <__aeabi_dsub>
    e400:	adds	r4, #48	; 0x30
    e402:	uxtb	r4, r4
    e404:	mov	r2, sl
    e406:	mov	r3, fp
    e408:	strb.w	r4, [r5], #1
    e40c:	mov	r6, r0
    e40e:	mov	r7, r1
    e410:	bl	b1cc <__aeabi_dcmplt>
    e414:	mov	r2, r6
    e416:	mov	r3, r7
    e418:	cmp	r0, #0
    e41a:	beq.n	e3ae <_dtoa_r+0x796>
    e41c:	ldr	r3, [sp, #88]	; 0x58
    e41e:	str	r3, [sp, #16]
    e420:	b.n	dfae <_dtoa_r+0x396>
    e422:	movs	r3, #0
    e424:	str	r3, [sp, #44]	; 0x2c
    e426:	ldr	r3, [sp, #20]
    e428:	cmp	r3, #0
    e42a:	ble.w	e72e <_dtoa_r+0xb16>
    e42e:	mov	r5, r3
    e430:	mov	r4, r3
    e432:	str	r3, [sp, #56]	; 0x38
    e434:	str	r3, [sp, #32]
    e436:	b.n	e22e <_dtoa_r+0x616>
    e438:	movs	r3, #1
    e43a:	str	r3, [sp, #44]	; 0x2c
    e43c:	b.n	e426 <_dtoa_r+0x80e>
    e43e:	str	r4, [sp, #40]	; 0x28
    e440:	ldr	r2, [sp, #24]
    e442:	ldr	r1, [sp, #40]	; 0x28
    e444:	mov	r0, r9
    e446:	bl	f140 <__pow5mult>
    e44a:	mov	r4, r0
    e44c:	b.n	e06c <_dtoa_r+0x454>
    e44e:	ldr	r3, [sp, #32]
    e450:	cmp	r3, #0
    e452:	bgt.w	de52 <_dtoa_r+0x23a>
    e456:	bne.w	e6f8 <_dtoa_r+0xae0>
    e45a:	movs	r2, #0
    e45c:	ldr	r3, [pc, #112]	; (e4d0 <_dtoa_r+0x8b8>)
    e45e:	ldrd	r0, r1, [sp]
    e462:	bl	ace8 <__aeabi_dmul>
    e466:	mov	r3, fp
    e468:	mov	r2, sl
    e46a:	bl	b1f4 <__aeabi_dcmpge>
    e46e:	ldr	r3, [sp, #32]
    e470:	str	r3, [sp, #24]
    e472:	mov	r6, r3
    e474:	cmp	r0, #0
    e476:	beq.w	e64e <_dtoa_r+0xa36>
    e47a:	ldr	r3, [sp, #20]
    e47c:	ldr	r5, [sp, #36]	; 0x24
    e47e:	mvns	r3, r3
    e480:	str	r3, [sp, #16]
    e482:	ldr	r1, [sp, #24]
    e484:	mov	r0, r9
    e486:	bl	eecc <_Bfree>
    e48a:	cmp	r6, #0
    e48c:	beq.w	dfae <_dtoa_r+0x396>
    e490:	b.n	e1a6 <_dtoa_r+0x58e>
    e492:	ldr	r2, [sp, #60]	; 0x3c
    e494:	cmp	r2, #0
    e496:	beq.w	e90a <_dtoa_r+0xcf2>
    e49a:	addw	r3, r3, #1075	; 0x433
    e49e:	ldr	r7, [sp, #24]
    e4a0:	ldr	r5, [sp, #28]
    e4a2:	b.n	dffe <_dtoa_r+0x3e6>
    e4a4:	movs	r0, #28
    e4a6:	b.n	e0be <_dtoa_r+0x4a6>
    e4a8:	ldr	r3, [sp, #0]
    e4aa:	cmp	r3, #1
    e4ac:	ble.w	e9b0 <_dtoa_r+0xd98>
    e4b0:	ldr	r7, [sp, #48]	; 0x30
    e4b2:	movs	r0, #1
    e4b4:	b.n	e0a6 <_dtoa_r+0x48e>
    e4b6:	nop
    e4b8:	.word	0x20000328
    e4bc:	.word	0x20000300
    e4c0:	.word	0x3ff00000
    e4c4:	.word	0x401c0000
    e4c8:	.word	0x3fe00000
    e4cc:	.word	0x40240000
    e4d0:	.word	0x40140000
    e4d4:	mov	r1, r6
    e4d6:	movs	r3, #0
    e4d8:	movs	r2, #10
    e4da:	mov	r0, r9
    e4dc:	bl	eee0 <__multadd>
    e4e0:	ldr	r3, [sp, #56]	; 0x38
    e4e2:	cmp	r3, #0
    e4e4:	mov	r6, r0
    e4e6:	ble.w	ea04 <_dtoa_r+0xdec>
    e4ea:	str	r3, [sp, #32]
    e4ec:	cmp	r5, #0
    e4ee:	ble.n	e4fc <_dtoa_r+0x8e4>
    e4f0:	mov	r1, r6
    e4f2:	mov	r2, r5
    e4f4:	mov	r0, r9
    e4f6:	bl	f1e0 <__lshift>
    e4fa:	mov	r6, r0
    e4fc:	cmp	r7, #0
    e4fe:	bne.w	e7fa <_dtoa_r+0xbe2>
    e502:	mov	r8, r6
    e504:	ldr	r3, [sp, #32]
    e506:	ldr	r2, [sp, #36]	; 0x24
    e508:	subs	r3, #1
    e50a:	adds	r3, r2, r3
    e50c:	str	r3, [sp, #32]
    e50e:	and.w	r3, sl, #1
    e512:	str	r3, [sp, #40]	; 0x28
    e514:	mov	r7, r2
    e516:	ldr.w	fp, [sp, #24]
    e51a:	mov	r0, r4
    e51c:	mov	r1, fp
    e51e:	bl	daf0 <quorem>
    e522:	mov	r1, r6
    e524:	mov	r5, r0
    e526:	mov	r0, r4
    e528:	bl	f290 <__mcmp>
    e52c:	mov	r2, r8
    e52e:	mov	r1, fp
    e530:	mov	sl, r0
    e532:	mov	r0, r9
    e534:	bl	f2d4 <__mdiff>
    e538:	ldr	r2, [r0, #12]
    e53a:	mov	fp, r0
    e53c:	add.w	r3, r5, #48	; 0x30
    e540:	cmp	r2, #0
    e542:	bne.n	e5d8 <_dtoa_r+0x9c0>
    e544:	mov	r1, r0
    e546:	mov	r0, r4
    e548:	str	r3, [sp, #28]
    e54a:	bl	f290 <__mcmp>
    e54e:	mov	r1, fp
    e550:	str	r0, [sp, #20]
    e552:	mov	r0, r9
    e554:	bl	eecc <_Bfree>
    e558:	ldr	r2, [sp, #20]
    e55a:	ldr	r3, [sp, #28]
    e55c:	cbnz	r2, e56a <_dtoa_r+0x952>
    e55e:	ldr	r1, [sp, #0]
    e560:	cbnz	r1, e56a <_dtoa_r+0x952>
    e562:	ldr	r1, [sp, #40]	; 0x28
    e564:	cmp	r1, #0
    e566:	beq.w	e9d4 <_dtoa_r+0xdbc>
    e56a:	cmp.w	sl, #0
    e56e:	blt.w	e738 <_dtoa_r+0xb20>
    e572:	bne.n	e580 <_dtoa_r+0x968>
    e574:	ldr	r1, [sp, #0]
    e576:	cbnz	r1, e580 <_dtoa_r+0x968>
    e578:	ldr	r1, [sp, #40]	; 0x28
    e57a:	cmp	r1, #0
    e57c:	beq.w	e738 <_dtoa_r+0xb20>
    e580:	cmp	r2, #0
    e582:	bgt.w	e822 <_dtoa_r+0xc0a>
    e586:	ldr	r2, [sp, #32]
    e588:	strb	r3, [r7, #0]
    e58a:	add.w	sl, r7, #1
    e58e:	cmp	r7, r2
    e590:	mov	r5, sl
    e592:	beq.w	e83a <_dtoa_r+0xc22>
    e596:	mov	r1, r4
    e598:	movs	r3, #0
    e59a:	movs	r2, #10
    e59c:	mov	r0, r9
    e59e:	bl	eee0 <__multadd>
    e5a2:	cmp	r6, r8
    e5a4:	mov	r4, r0
    e5a6:	mov	r1, r6
    e5a8:	mov.w	r3, #0
    e5ac:	mov.w	r2, #10
    e5b0:	mov	r0, r9
    e5b2:	beq.n	e5cc <_dtoa_r+0x9b4>
    e5b4:	bl	eee0 <__multadd>
    e5b8:	mov	r1, r8
    e5ba:	mov	r6, r0
    e5bc:	movs	r3, #0
    e5be:	movs	r2, #10
    e5c0:	mov	r0, r9
    e5c2:	bl	eee0 <__multadd>
    e5c6:	mov	r7, sl
    e5c8:	mov	r8, r0
    e5ca:	b.n	e516 <_dtoa_r+0x8fe>
    e5cc:	bl	eee0 <__multadd>
    e5d0:	mov	r7, sl
    e5d2:	mov	r6, r0
    e5d4:	mov	r8, r0
    e5d6:	b.n	e516 <_dtoa_r+0x8fe>
    e5d8:	mov	r1, r0
    e5da:	mov	r0, r9
    e5dc:	str	r3, [sp, #20]
    e5de:	bl	eecc <_Bfree>
    e5e2:	movs	r2, #1
    e5e4:	ldr	r3, [sp, #20]
    e5e6:	b.n	e56a <_dtoa_r+0x952>
    e5e8:	ldr	r1, [sp, #24]
    e5ea:	mov	r0, r4
    e5ec:	bl	f290 <__mcmp>
    e5f0:	cmp	r0, #0
    e5f2:	bge.w	e0f4 <_dtoa_r+0x4dc>
    e5f6:	mov	r1, r4
    e5f8:	ldr	r4, [sp, #16]
    e5fa:	movs	r3, #0
    e5fc:	subs	r4, #1
    e5fe:	movs	r2, #10
    e600:	mov	r0, r9
    e602:	str	r4, [sp, #16]
    e604:	bl	eee0 <__multadd>
    e608:	ldr	r3, [sp, #44]	; 0x2c
    e60a:	mov	r4, r0
    e60c:	cmp	r3, #0
    e60e:	bne.w	e4d4 <_dtoa_r+0x8bc>
    e612:	ldr	r3, [sp, #56]	; 0x38
    e614:	cmp	r3, #0
    e616:	ble.w	e9f4 <_dtoa_r+0xddc>
    e61a:	str	r3, [sp, #32]
    e61c:	b.n	e104 <_dtoa_r+0x4ec>
    e61e:	ldr	r4, [sp, #40]	; 0x28
    e620:	b.n	e06c <_dtoa_r+0x454>
    e622:	ldr	r3, [sp, #0]
    e624:	cmp	r3, #2
    e626:	ble.w	e0fc <_dtoa_r+0x4e4>
    e62a:	ldr	r3, [sp, #32]
    e62c:	cmp	r3, #0
    e62e:	bne.w	e96c <_dtoa_r+0xd54>
    e632:	ldr	r1, [sp, #24]
    e634:	movs	r2, #5
    e636:	mov	r0, r9
    e638:	bl	eee0 <__multadd>
    e63c:	mov	r1, r0
    e63e:	str	r0, [sp, #24]
    e640:	mov	r0, r4
    e642:	bl	f290 <__mcmp>
    e646:	cmp	r0, #0
    e648:	str	r4, [sp, #40]	; 0x28
    e64a:	ble.w	e47a <_dtoa_r+0x862>
    e64e:	ldr	r2, [sp, #16]
    e650:	ldr	r1, [sp, #36]	; 0x24
    e652:	movs	r3, #49	; 0x31
    e654:	adds	r2, #1
    e656:	str	r2, [sp, #16]
    e658:	strb	r3, [r1, #0]
    e65a:	adds	r5, r1, #1
    e65c:	b.n	e482 <_dtoa_r+0x86a>
    e65e:	ldr	r2, [sp, #16]
    e660:	adds	r2, #1
    e662:	str	r2, [sp, #16]
    e664:	ldr	r2, [sp, #36]	; 0x24
    e666:	movs	r3, #49	; 0x31
    e668:	strb	r3, [r2, #0]
    e66a:	b.n	e186 <_dtoa_r+0x56e>
    e66c:	movs	r3, #1
    e66e:	str	r3, [sp, #44]	; 0x2c
    e670:	b.n	e218 <_dtoa_r+0x600>
    e672:	ldr.w	r9, [sp, #20]
    e676:	b.n	dfae <_dtoa_r+0x396>
    e678:	cmp.w	sl, #0
    e67c:	bne.w	e092 <_dtoa_r+0x47a>
    e680:	ubfx	r3, fp, #0, #20
    e684:	cmp	r3, #0
    e686:	bne.w	e906 <_dtoa_r+0xcee>
    e68a:	bic.w	r7, fp, #2147483648	; 0x80000000
    e68e:	lsrs	r7, r7, #20
    e690:	lsls	r7, r7, #20
    e692:	cbz	r7, e6a0 <_dtoa_r+0xa88>
    e694:	ldr	r3, [sp, #28]
    e696:	adds	r3, #1
    e698:	str	r3, [sp, #28]
    e69a:	add.w	r8, r8, #1
    e69e:	movs	r7, #1
    e6a0:	ldr	r3, [sp, #48]	; 0x30
    e6a2:	movs	r0, #1
    e6a4:	cmp	r3, #0
    e6a6:	beq.w	e0a6 <_dtoa_r+0x48e>
    e6aa:	b.n	e094 <_dtoa_r+0x47c>
    e6ac:	mov	r0, sl
    e6ae:	bl	ac1c <__aeabi_i2d>
    e6b2:	mov	r2, r6
    e6b4:	mov	r3, r7
    e6b6:	bl	ace8 <__aeabi_dmul>
    e6ba:	movs	r2, #0
    e6bc:	ldr	r3, [pc, #764]	; (e9bc <_dtoa_r+0xda4>)
    e6be:	bl	a984 <__adddf3>
    e6c2:	mov	r4, r0
    e6c4:	sub.w	r5, r1, #54525952	; 0x3400000
    e6c8:	mov	r0, r6
    e6ca:	mov	r1, r7
    e6cc:	movs	r2, #0
    e6ce:	ldr	r3, [pc, #752]	; (e9c0 <_dtoa_r+0xda8>)
    e6d0:	bl	a980 <__aeabi_dsub>
    e6d4:	mov	r2, r4
    e6d6:	mov	r3, r5
    e6d8:	mov	r6, r0
    e6da:	mov	r7, r1
    e6dc:	bl	b208 <__aeabi_dcmpgt>
    e6e0:	cmp	r0, #0
    e6e2:	bne.w	e842 <_dtoa_r+0xc2a>
    e6e6:	mov	r2, r4
    e6e8:	add.w	r3, r5, #2147483648	; 0x80000000
    e6ec:	mov	r0, r6
    e6ee:	mov	r1, r7
    e6f0:	bl	b1cc <__aeabi_dcmplt>
    e6f4:	cmp	r0, #0
    e6f6:	beq.n	e78e <_dtoa_r+0xb76>
    e6f8:	movs	r3, #0
    e6fa:	str	r3, [sp, #24]
    e6fc:	mov	r6, r3
    e6fe:	b.n	e47a <_dtoa_r+0x862>
    e700:	ldr	r0, [sp, #36]	; 0x24
    e702:	b.w	dc8a <_dtoa_r+0x72>
    e706:	ldr	r3, [sp, #24]
    e708:	ldr	r2, [sp, #48]	; 0x30
    e70a:	str	r7, [sp, #24]
    e70c:	subs	r3, r7, r3
    e70e:	add	r2, r3
    e710:	str	r2, [sp, #48]	; 0x30
    e712:	movs	r7, #0
    e714:	b.n	dff2 <_dtoa_r+0x3da>
    e716:	vldr	d7, [sp, #64]	; 0x40
    e71a:	mov.w	sl, #2
    e71e:	vstr	d7, [sp, #72]	; 0x48
    e722:	b.n	e2a4 <_dtoa_r+0x68c>
    e724:	mov	r4, r3
    e726:	movs	r1, #0
    e728:	str.w	r1, [r9, #68]	; 0x44
    e72c:	b.n	e250 <_dtoa_r+0x638>
    e72e:	movs	r4, #1
    e730:	str	r4, [sp, #56]	; 0x38
    e732:	str	r4, [sp, #32]
    e734:	str	r4, [sp, #20]
    e736:	b.n	e726 <_dtoa_r+0xb0e>
    e738:	cmp	r2, #0
    e73a:	mov	sl, r3
    e73c:	ble.n	e762 <_dtoa_r+0xb4a>
    e73e:	mov	r1, r4
    e740:	movs	r2, #1
    e742:	mov	r0, r9
    e744:	bl	f1e0 <__lshift>
    e748:	ldr	r1, [sp, #24]
    e74a:	mov	r4, r0
    e74c:	bl	f290 <__mcmp>
    e750:	cmp	r0, #0
    e752:	ble.w	e9e6 <_dtoa_r+0xdce>
    e756:	cmp.w	sl, #57	; 0x39
    e75a:	beq.w	e970 <_dtoa_r+0xd58>
    e75e:	add.w	sl, r5, #49	; 0x31
    e762:	mov	fp, r6
    e764:	strb.w	sl, [r7]
    e768:	adds	r5, r7, #1
    e76a:	mov	r6, r8
    e76c:	str	r4, [sp, #40]	; 0x28
    e76e:	b.n	e186 <_dtoa_r+0x56e>
    e770:	bne.n	e77c <_dtoa_r+0xb64>
    e772:	tst.w	sl, #1
    e776:	beq.n	e77c <_dtoa_r+0xb64>
    e778:	b.n	e166 <_dtoa_r+0x54e>
    e77a:	mov	r5, r2
    e77c:	ldrb.w	r3, [r5, #-1]
    e780:	cmp	r3, #48	; 0x30
    e782:	add.w	r2, r5, #4294967295
    e786:	beq.n	e77a <_dtoa_r+0xb62>
    e788:	b.n	e186 <_dtoa_r+0x56e>
    e78a:	ldr.w	r8, [sp, #72]	; 0x48
    e78e:	ldrd	sl, fp, [sp, #64]	; 0x40
    e792:	b.w	de2c <_dtoa_r+0x214>
    e796:	ldr	r1, [sp, #36]	; 0x24
    e798:	movs	r2, #48	; 0x30
    e79a:	strb	r2, [r1, #0]
    e79c:	ldr	r2, [sp, #16]
    e79e:	ldrb.w	r4, [r5, #-1]
    e7a2:	adds	r2, #1
    e7a4:	str	r2, [sp, #16]
    e7a6:	b.n	dfaa <_dtoa_r+0x392>
    e7a8:	ldr	r3, [sp, #16]
    e7aa:	negs	r4, r3
    e7ac:	cmp	r4, #0
    e7ae:	beq.w	e918 <_dtoa_r+0xd00>
    e7b2:	ldr	r3, [pc, #528]	; (e9c4 <_dtoa_r+0xdac>)
    e7b4:	and.w	r2, r4, #15
    e7b8:	add.w	r3, r3, r2, lsl #3
    e7bc:	ldrd	r2, r3, [r3]
    e7c0:	ldrd	r0, r1, [sp, #64]	; 0x40
    e7c4:	bl	ace8 <__aeabi_dmul>
    e7c8:	asrs	r4, r4, #4
    e7ca:	mov	r6, r0
    e7cc:	mov	r7, r1
    e7ce:	beq.w	e9fe <_dtoa_r+0xde6>
    e7d2:	ldr	r5, [pc, #500]	; (e9c8 <_dtoa_r+0xdb0>)
    e7d4:	mov.w	sl, #2
    e7d8:	lsls	r2, r4, #31
    e7da:	bpl.n	e7f0 <_dtoa_r+0xbd8>
    e7dc:	mov	r0, r6
    e7de:	mov	r1, r7
    e7e0:	ldrd	r2, r3, [r5]
    e7e4:	bl	ace8 <__aeabi_dmul>
    e7e8:	add.w	sl, sl, #1
    e7ec:	mov	r6, r0
    e7ee:	mov	r7, r1
    e7f0:	asrs	r4, r4, #1
    e7f2:	add.w	r5, r5, #8
    e7f6:	bne.n	e7d8 <_dtoa_r+0xbc0>
    e7f8:	b.n	e2d8 <_dtoa_r+0x6c0>
    e7fa:	ldr	r1, [r6, #4]
    e7fc:	mov	r0, r9
    e7fe:	bl	ee80 <_Balloc>
    e802:	ldr	r3, [r6, #16]
    e804:	adds	r2, r3, #2
    e806:	mov	r5, r0
    e808:	lsls	r2, r2, #2
    e80a:	add.w	r1, r6, #12
    e80e:	adds	r0, #12
    e810:	bl	83b0 <memcpy>
    e814:	mov	r1, r5
    e816:	movs	r2, #1
    e818:	mov	r0, r9
    e81a:	bl	f1e0 <__lshift>
    e81e:	mov	r8, r0
    e820:	b.n	e504 <_dtoa_r+0x8ec>
    e822:	cmp	r3, #57	; 0x39
    e824:	beq.w	e970 <_dtoa_r+0xd58>
    e828:	add.w	sl, r3, #1
    e82c:	mov	fp, r6
    e82e:	strb.w	sl, [r7]
    e832:	adds	r5, r7, #1
    e834:	mov	r6, r8
    e836:	str	r4, [sp, #40]	; 0x28
    e838:	b.n	e186 <_dtoa_r+0x56e>
    e83a:	mov	fp, r6
    e83c:	mov	sl, r3
    e83e:	mov	r6, r8
    e840:	b.n	e14e <_dtoa_r+0x536>
    e842:	movs	r3, #0
    e844:	str	r3, [sp, #24]
    e846:	mov	r6, r3
    e848:	b.n	e64e <_dtoa_r+0xa36>
    e84a:	ldr	r3, [sp, #72]	; 0x48
    e84c:	ldr	r1, [pc, #372]	; (e9c4 <_dtoa_r+0xdac>)
    e84e:	subs	r2, r3, #1
    e850:	add.w	r1, r1, r2, lsl #3
    e854:	mov	r3, r5
    e856:	str	r2, [sp, #92]	; 0x5c
    e858:	ldrd	r0, r1, [r1]
    e85c:	mov	r2, r4
    e85e:	bl	ace8 <__aeabi_dmul>
    e862:	strd	r0, r1, [sp, #80]	; 0x50
    e866:	mov	r1, r7
    e868:	mov	r0, r6
    e86a:	bl	f664 <__aeabi_d2iz>
    e86e:	mov	r4, r0
    e870:	bl	ac1c <__aeabi_i2d>
    e874:	mov	r3, r1
    e876:	mov	r2, r0
    e878:	mov	r1, r7
    e87a:	mov	r0, r6
    e87c:	bl	a980 <__aeabi_dsub>
    e880:	ldr	r3, [sp, #72]	; 0x48
    e882:	mov	r7, r1
    e884:	ldr	r1, [sp, #36]	; 0x24
    e886:	adds	r4, #48	; 0x30
    e888:	cmp	r3, #1
    e88a:	mov	r6, r0
    e88c:	strb	r4, [r1, #0]
    e88e:	add.w	r5, r1, #1
    e892:	beq.n	e8d6 <_dtoa_r+0xcbe>
    e894:	ldr	r3, [sp, #72]	; 0x48
    e896:	ldr	r2, [sp, #36]	; 0x24
    e898:	add	r3, r2
    e89a:	mov	sl, r3
    e89c:	mov	fp, r5
    e89e:	movs	r2, #0
    e8a0:	ldr	r3, [pc, #296]	; (e9cc <_dtoa_r+0xdb4>)
    e8a2:	mov	r0, r6
    e8a4:	mov	r1, r7
    e8a6:	bl	ace8 <__aeabi_dmul>
    e8aa:	mov	r7, r1
    e8ac:	mov	r6, r0
    e8ae:	bl	f664 <__aeabi_d2iz>
    e8b2:	mov	r4, r0
    e8b4:	bl	ac1c <__aeabi_i2d>
    e8b8:	adds	r4, #48	; 0x30
    e8ba:	mov	r2, r0
    e8bc:	mov	r3, r1
    e8be:	mov	r0, r6
    e8c0:	mov	r1, r7
    e8c2:	bl	a980 <__aeabi_dsub>
    e8c6:	strb.w	r4, [fp], #1
    e8ca:	cmp	sl, fp
    e8cc:	mov	r6, r0
    e8ce:	mov	r7, r1
    e8d0:	bne.n	e89e <_dtoa_r+0xc86>
    e8d2:	ldr	r3, [sp, #92]	; 0x5c
    e8d4:	add	r5, r3
    e8d6:	movs	r2, #0
    e8d8:	ldr	r3, [pc, #244]	; (e9d0 <_dtoa_r+0xdb8>)
    e8da:	ldrd	r0, r1, [sp, #80]	; 0x50
    e8de:	bl	a984 <__adddf3>
    e8e2:	mov	r2, r6
    e8e4:	mov	r3, r7
    e8e6:	bl	b1cc <__aeabi_dcmplt>
    e8ea:	cmp	r0, #0
    e8ec:	beq.n	e980 <_dtoa_r+0xd68>
    e8ee:	ldr	r3, [sp, #88]	; 0x58
    e8f0:	str	r3, [sp, #16]
    e8f2:	ldrb.w	r4, [r5, #-1]
    e8f6:	b.w	df92 <_dtoa_r+0x37a>
    e8fa:	ldr	r3, [sp, #28]
    e8fc:	ldr	r2, [sp, #32]
    e8fe:	subs	r5, r3, r2
    e900:	movs	r3, #0
    e902:	b.w	dffe <_dtoa_r+0x3e6>
    e906:	movs	r7, #0
    e908:	b.n	e6a0 <_dtoa_r+0xa88>
    e90a:	ldr	r3, [sp, #96]	; 0x60
    e90c:	ldr	r7, [sp, #24]
    e90e:	ldr	r5, [sp, #28]
    e910:	rsb	r3, r3, #54	; 0x36
    e914:	b.w	dffe <_dtoa_r+0x3e6>
    e918:	ldrd	r6, r7, [sp, #64]	; 0x40
    e91c:	mov.w	sl, #2
    e920:	b.n	e2d8 <_dtoa_r+0x6c0>
    e922:	ldr	r3, [sp, #32]
    e924:	cmp	r3, #0
    e926:	beq.w	e6ac <_dtoa_r+0xa94>
    e92a:	ldr	r3, [sp, #56]	; 0x38
    e92c:	cmp	r3, #0
    e92e:	ble.w	e78e <_dtoa_r+0xb76>
    e932:	movs	r2, #0
    e934:	ldr	r3, [pc, #148]	; (e9cc <_dtoa_r+0xdb4>)
    e936:	mov	r0, r6
    e938:	mov	r1, r7
    e93a:	bl	ace8 <__aeabi_dmul>
    e93e:	mov	r6, r0
    e940:	mov	r7, r1
    e942:	add.w	r0, sl, #1
    e946:	bl	ac1c <__aeabi_i2d>
    e94a:	mov	r2, r6
    e94c:	mov	r3, r7
    e94e:	bl	ace8 <__aeabi_dmul>
    e952:	movs	r2, #0
    e954:	ldr	r3, [pc, #100]	; (e9bc <_dtoa_r+0xda4>)
    e956:	bl	a984 <__adddf3>
    e95a:	ldr	r2, [sp, #16]
    e95c:	ldr	r3, [sp, #56]	; 0x38
    e95e:	str	r3, [sp, #72]	; 0x48
    e960:	subs	r2, #1
    e962:	mov	r4, r0
    e964:	sub.w	r5, r1, #54525952	; 0x3400000
    e968:	str	r2, [sp, #88]	; 0x58
    e96a:	b.n	e31a <_dtoa_r+0x702>
    e96c:	str	r4, [sp, #40]	; 0x28
    e96e:	b.n	e47a <_dtoa_r+0x862>
    e970:	movs	r2, #57	; 0x39
    e972:	mov	fp, r6
    e974:	str	r4, [sp, #40]	; 0x28
    e976:	mov	r6, r8
    e978:	strb	r2, [r7, #0]
    e97a:	adds	r5, r7, #1
    e97c:	b.w	e16a <_dtoa_r+0x552>
    e980:	ldrd	r2, r3, [sp, #80]	; 0x50
    e984:	movs	r0, #0
    e986:	ldr	r1, [pc, #72]	; (e9d0 <_dtoa_r+0xdb8>)
    e988:	bl	a980 <__aeabi_dsub>
    e98c:	mov	r2, r6
    e98e:	mov	r3, r7
    e990:	bl	b208 <__aeabi_dcmpgt>
    e994:	cbnz	r0, e99a <_dtoa_r+0xd82>
    e996:	b.n	e78e <_dtoa_r+0xb76>
    e998:	mov	r5, r2
    e99a:	ldrb.w	r3, [r5, #-1]
    e99e:	cmp	r3, #48	; 0x30
    e9a0:	add.w	r2, r5, #4294967295
    e9a4:	beq.n	e998 <_dtoa_r+0xd80>
    e9a6:	b.n	e41c <_dtoa_r+0x804>
    e9a8:	ldr	r3, [sp, #88]	; 0x58
    e9aa:	str	r3, [sp, #16]
    e9ac:	b.w	df92 <_dtoa_r+0x37a>
    e9b0:	cmp.w	sl, #0
    e9b4:	bne.w	e4b0 <_dtoa_r+0x898>
    e9b8:	b.n	e680 <_dtoa_r+0xa68>
    e9ba:	nop
    e9bc:	.word	0x401c0000
    e9c0:	.word	0x40140000
    e9c4:	.word	0x20000328
    e9c8:	.word	0x20000300
    e9cc:	.word	0x40240000
    e9d0:	.word	0x3fe00000
    e9d4:	cmp	r3, #57	; 0x39
    e9d6:	mov	fp, sl
    e9d8:	mov	sl, r3
    e9da:	beq.n	e970 <_dtoa_r+0xd58>
    e9dc:	cmp.w	fp, #0
    e9e0:	bgt.w	e75e <_dtoa_r+0xb46>
    e9e4:	b.n	e762 <_dtoa_r+0xb4a>
    e9e6:	bne.w	e762 <_dtoa_r+0xb4a>
    e9ea:	tst.w	sl, #1
    e9ee:	beq.w	e762 <_dtoa_r+0xb4a>
    e9f2:	b.n	e756 <_dtoa_r+0xb3e>
    e9f4:	ldr	r3, [sp, #0]
    e9f6:	cmp	r3, #2
    e9f8:	bgt.n	ea46 <_dtoa_r+0xe2e>
    e9fa:	ldr	r3, [sp, #56]	; 0x38
    e9fc:	b.n	e61a <_dtoa_r+0xa02>
    e9fe:	mov.w	sl, #2
    ea02:	b.n	e2d8 <_dtoa_r+0x6c0>
    ea04:	ldr	r3, [sp, #0]
    ea06:	cmp	r3, #2
    ea08:	bgt.n	ea46 <_dtoa_r+0xe2e>
    ea0a:	ldr	r3, [sp, #56]	; 0x38
    ea0c:	b.n	e4ea <_dtoa_r+0x8d2>
    ea0e:	movs	r4, #0
    ea10:	str.w	r4, [r9, #68]	; 0x44
    ea14:	mov	r1, r4
    ea16:	mov	r0, r9
    ea18:	bl	ee80 <_Balloc>
    ea1c:	mov.w	r3, #4294967295
    ea20:	str	r3, [sp, #32]
    ea22:	str	r3, [sp, #56]	; 0x38
    ea24:	movs	r3, #1
    ea26:	str	r0, [sp, #36]	; 0x24
    ea28:	str	r4, [sp, #20]
    ea2a:	str.w	r0, [r9, #64]	; 0x40
    ea2e:	str	r3, [sp, #44]	; 0x2c
    ea30:	b.w	de2c <_dtoa_r+0x214>
    ea34:	beq.w	e0c8 <_dtoa_r+0x4b0>
    ea38:	rsb	r0, r0, #60	; 0x3c
    ea3c:	b.w	e0be <_dtoa_r+0x4a6>
    ea40:	movs	r6, #1
    ea42:	b.w	ddbe <_dtoa_r+0x1a6>
    ea46:	ldr	r3, [sp, #56]	; 0x38
    ea48:	str	r3, [sp, #32]
    ea4a:	b.n	e62a <_dtoa_r+0xa12>

0000ea4c <fcvtbuf>:
    ea4c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ea50:	vpush	{d8}
    ea54:	vmov.f32	s16, s0
    ea58:	vmov.f32	s17, s1
    ea5c:	ldr	r5, [pc, #224]	; (eb40 <fcvtbuf+0xf4>)
    ea5e:	sub	sp, #20
    ea60:	ldr	r7, [r5, #0]
    ea62:	mov	r4, r0
    ea64:	mov	r6, r1
    ea66:	mov	r8, r2
    ea68:	mov	r5, r3
    ea6a:	cmp	r3, #0
    ea6c:	beq.n	eb0a <fcvtbuf+0xbe>
    ea6e:	movs	r2, #0
    ea70:	ldr	r3, [pc, #208]	; (eb44 <fcvtbuf+0xf8>)
    ea72:	vmov	r0, r1, d8
    ea76:	bl	b1cc <__aeabi_dcmplt>
    ea7a:	cbnz	r0, eadc <fcvtbuf+0x90>
    ea7c:	vmov.f32	s0, s16
    ea80:	vmov.f32	s1, s17
    ea84:	add	r3, sp, #12
    ea86:	str	r3, [sp, #4]
    ea88:	str.w	r8, [sp]
    ea8c:	mov	r0, r7
    ea8e:	mov	r3, r6
    ea90:	mov	r2, r4
    ea92:	movs	r1, #3
    ea94:	bl	dc18 <_dtoa_r>
    ea98:	ldr	r3, [sp, #12]
    ea9a:	ldr	r1, [r6, #0]
    ea9c:	cmp	r0, r3
    ea9e:	rsb	r1, r1, #0
    eaa2:	bcs.n	eb18 <fcvtbuf+0xcc>
    eaa4:	subs	r1, r1, r5
    eaa6:	mov	r3, r5
    eaa8:	ldrb.w	r2, [r0], #1
    eaac:	strb.w	r2, [r3], #1
    eab0:	ldr	r2, [sp, #12]
    eab2:	cmp	r2, r0
    eab4:	add.w	r6, r3, r1
    eab8:	bhi.n	eaa8 <fcvtbuf+0x5c>
    eaba:	cmp	r4, r6
    eabc:	ble.n	eb1e <fcvtbuf+0xd2>
    eabe:	subs	r2, r4, r6
    eac0:	add	r2, r3
    eac2:	movs	r1, #48	; 0x30
    eac4:	strb.w	r1, [r3], #1
    eac8:	cmp	r2, r3
    eaca:	bne.n	eac4 <fcvtbuf+0x78>
    eacc:	movs	r3, #0
    eace:	strb	r3, [r2, #0]
    ead0:	mov	r0, r5
    ead2:	add	sp, #20
    ead4:	vpop	{d8}
    ead8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    eadc:	movs	r2, #0
    eade:	ldr	r3, [pc, #104]	; (eb48 <fcvtbuf+0xfc>)
    eae0:	vmov	r0, r1, d8
    eae4:	bl	b208 <__aeabi_dcmpgt>
    eae8:	cmp	r0, #0
    eaea:	beq.n	ea7c <fcvtbuf+0x30>
    eaec:	vmov.f32	s0, s16
    eaf0:	vmov.f32	s1, s17
    eaf4:	add	r3, sp, #12
    eaf6:	str	r3, [sp, #4]
    eaf8:	str.w	r8, [sp]
    eafc:	mov	r0, r7
    eafe:	mov	r3, r6
    eb00:	mov	r2, r4
    eb02:	movs	r1, #2
    eb04:	bl	dc18 <_dtoa_r>
    eb08:	b.n	ea98 <fcvtbuf+0x4c>
    eb0a:	ldr	r2, [r7, #80]	; 0x50
    eb0c:	add.w	r3, r0, #35	; 0x23
    eb10:	cmp	r2, r3
    eb12:	ble.n	eb22 <fcvtbuf+0xd6>
    eb14:	ldr	r5, [r7, #84]	; 0x54
    eb16:	b.n	ea6e <fcvtbuf+0x22>
    eb18:	mov	r6, r1
    eb1a:	mov	r3, r5
    eb1c:	b.n	eaba <fcvtbuf+0x6e>
    eb1e:	mov	r2, r3
    eb20:	b.n	eacc <fcvtbuf+0x80>
    eb22:	add.w	r9, r0, #36	; 0x24
    eb26:	mov	r2, r9
    eb28:	ldr	r1, [r7, #84]	; 0x54
    eb2a:	mov	r0, r7
    eb2c:	bl	bce8 <_realloc_r>
    eb30:	mov	r5, r0
    eb32:	cmp	r0, #0
    eb34:	beq.n	ead0 <fcvtbuf+0x84>
    eb36:	str.w	r9, [r7, #80]	; 0x50
    eb3a:	str	r0, [r7, #84]	; 0x54
    eb3c:	b.n	ea6e <fcvtbuf+0x22>
    eb3e:	nop
    eb40:	.word	0x200017bc
    eb44:	.word	0x3ff00000
    eb48:	.word	0xbff00000

0000eb4c <_malloc_trim_r>:
    eb4c:	push	{r3, r4, r5, r6, r7, lr}
    eb4e:	ldr	r7, [pc, #140]	; (ebdc <_malloc_trim_r+0x90>)
    eb50:	mov	r4, r1
    eb52:	mov	r6, r0
    eb54:	bl	bce0 <__malloc_lock>
    eb58:	ldr	r3, [r7, #8]
    eb5a:	ldr	r5, [r3, #4]
    eb5c:	bic.w	r5, r5, #3
    eb60:	subs	r1, r5, r4
    eb62:	addw	r1, r1, #4079	; 0xfef
    eb66:	bic.w	r1, r1, #4080	; 0xff0
    eb6a:	bic.w	r1, r1, #15
    eb6e:	sub.w	r4, r1, #4096	; 0x1000
    eb72:	cmp.w	r4, #4096	; 0x1000
    eb76:	blt.n	eb88 <_malloc_trim_r+0x3c>
    eb78:	movs	r1, #0
    eb7a:	mov	r0, r6
    eb7c:	bl	c0c8 <_sbrk_r>
    eb80:	ldr	r3, [r7, #8]
    eb82:	add	r3, r5
    eb84:	cmp	r0, r3
    eb86:	beq.n	eb92 <_malloc_trim_r+0x46>
    eb88:	mov	r0, r6
    eb8a:	bl	bce4 <__malloc_unlock>
    eb8e:	movs	r0, #0
    eb90:	pop	{r3, r4, r5, r6, r7, pc}
    eb92:	negs	r1, r4
    eb94:	mov	r0, r6
    eb96:	bl	c0c8 <_sbrk_r>
    eb9a:	adds	r0, #1
    eb9c:	beq.n	ebba <_malloc_trim_r+0x6e>
    eb9e:	ldr	r3, [pc, #64]	; (ebe0 <_malloc_trim_r+0x94>)
    eba0:	ldr	r2, [r7, #8]
    eba2:	ldr	r1, [r3, #0]
    eba4:	subs	r5, r5, r4
    eba6:	orr.w	r5, r5, #1
    ebaa:	mov	r0, r6
    ebac:	subs	r1, r1, r4
    ebae:	str	r5, [r2, #4]
    ebb0:	str	r1, [r3, #0]
    ebb2:	bl	bce4 <__malloc_unlock>
    ebb6:	movs	r0, #1
    ebb8:	pop	{r3, r4, r5, r6, r7, pc}
    ebba:	movs	r1, #0
    ebbc:	mov	r0, r6
    ebbe:	bl	c0c8 <_sbrk_r>
    ebc2:	ldr	r2, [r7, #8]
    ebc4:	subs	r3, r0, r2
    ebc6:	cmp	r3, #15
    ebc8:	ble.n	eb88 <_malloc_trim_r+0x3c>
    ebca:	ldr	r4, [pc, #24]	; (ebe4 <_malloc_trim_r+0x98>)
    ebcc:	ldr	r1, [pc, #16]	; (ebe0 <_malloc_trim_r+0x94>)
    ebce:	ldr	r4, [r4, #0]
    ebd0:	orr.w	r3, r3, #1
    ebd4:	subs	r0, r0, r4
    ebd6:	str	r3, [r2, #4]
    ebd8:	str	r0, [r1, #0]
    ebda:	b.n	eb88 <_malloc_trim_r+0x3c>
    ebdc:	.word	0x200013ac
    ebe0:	.word	0x20004208
    ebe4:	.word	0x200017b4

0000ebe8 <_free_r>:
    ebe8:	cmp	r1, #0
    ebea:	beq.n	ec78 <_free_r+0x90>
    ebec:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ebf0:	mov	r5, r1
    ebf2:	mov	r8, r0
    ebf4:	bl	bce0 <__malloc_lock>
    ebf8:	ldr.w	r7, [r5, #-4]
    ebfc:	ldr	r1, [pc, #424]	; (eda8 <_free_r+0x1c0>)
    ebfe:	bic.w	r3, r7, #1
    ec02:	sub.w	r4, r5, #8
    ec06:	adds	r2, r4, r3
    ec08:	ldr	r6, [r1, #8]
    ec0a:	ldr	r0, [r2, #4]
    ec0c:	cmp	r2, r6
    ec0e:	bic.w	r0, r0, #3
    ec12:	beq.n	ecda <_free_r+0xf2>
    ec14:	lsls	r6, r7, #31
    ec16:	str	r0, [r2, #4]
    ec18:	bmi.n	ec32 <_free_r+0x4a>
    ec1a:	ldr.w	r7, [r5, #-8]
    ec1e:	subs	r4, r4, r7
    ec20:	add.w	lr, r1, #8
    ec24:	ldr	r5, [r4, #8]
    ec26:	cmp	r5, lr
    ec28:	add	r3, r7
    ec2a:	beq.n	ed0c <_free_r+0x124>
    ec2c:	ldr	r7, [r4, #12]
    ec2e:	str	r7, [r5, #12]
    ec30:	str	r5, [r7, #8]
    ec32:	adds	r5, r2, r0
    ec34:	ldr	r5, [r5, #4]
    ec36:	lsls	r5, r5, #31
    ec38:	bpl.n	ecc0 <_free_r+0xd8>
    ec3a:	orr.w	r2, r3, #1
    ec3e:	str	r2, [r4, #4]
    ec40:	str	r3, [r4, r3]
    ec42:	cmp.w	r3, #512	; 0x200
    ec46:	bcs.n	ec7a <_free_r+0x92>
    ec48:	lsrs	r3, r3, #3
    ec4a:	adds	r2, r3, #1
    ec4c:	ldr	r5, [r1, #4]
    ec4e:	ldr.w	r7, [r1, r2, lsl #3]
    ec52:	str	r7, [r4, #8]
    ec54:	movs	r0, #1
    ec56:	asrs	r3, r3, #2
    ec58:	lsl.w	r3, r0, r3
    ec5c:	add.w	r0, r1, r2, lsl #3
    ec60:	orrs	r5, r3
    ec62:	subs	r0, #8
    ec64:	str	r0, [r4, #12]
    ec66:	str	r5, [r1, #4]
    ec68:	str.w	r4, [r1, r2, lsl #3]
    ec6c:	str	r4, [r7, #12]
    ec6e:	mov	r0, r8
    ec70:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ec74:	b.w	bce4 <__malloc_unlock>
    ec78:	bx	lr
    ec7a:	lsrs	r2, r3, #9
    ec7c:	cmp	r2, #4
    ec7e:	bhi.n	ed28 <_free_r+0x140>
    ec80:	lsrs	r2, r3, #6
    ec82:	add.w	r7, r2, #57	; 0x39
    ec86:	lsls	r7, r7, #1
    ec88:	add.w	r5, r2, #56	; 0x38
    ec8c:	add.w	r0, r1, r7, lsl #2
    ec90:	ldr.w	r2, [r1, r7, lsl #2]
    ec94:	ldr	r1, [pc, #272]	; (eda8 <_free_r+0x1c0>)
    ec96:	subs	r0, #8
    ec98:	cmp	r0, r2
    ec9a:	beq.n	ed38 <_free_r+0x150>
    ec9c:	ldr	r1, [r2, #4]
    ec9e:	bic.w	r1, r1, #3
    eca2:	cmp	r3, r1
    eca4:	bcs.n	ecac <_free_r+0xc4>
    eca6:	ldr	r2, [r2, #8]
    eca8:	cmp	r0, r2
    ecaa:	bne.n	ec9c <_free_r+0xb4>
    ecac:	ldr	r0, [r2, #12]
    ecae:	str	r0, [r4, #12]
    ecb0:	str	r2, [r4, #8]
    ecb2:	str	r4, [r0, #8]
    ecb4:	str	r4, [r2, #12]
    ecb6:	mov	r0, r8
    ecb8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ecbc:	b.w	bce4 <__malloc_unlock>
    ecc0:	ldr	r5, [r2, #8]
    ecc2:	ldr	r7, [pc, #232]	; (edac <_free_r+0x1c4>)
    ecc4:	cmp	r5, r7
    ecc6:	add	r3, r0
    ecc8:	beq.n	ed4a <_free_r+0x162>
    ecca:	ldr	r0, [r2, #12]
    eccc:	str	r0, [r5, #12]
    ecce:	orr.w	r2, r3, #1
    ecd2:	str	r5, [r0, #8]
    ecd4:	str	r2, [r4, #4]
    ecd6:	str	r3, [r4, r3]
    ecd8:	b.n	ec42 <_free_r+0x5a>
    ecda:	lsls	r7, r7, #31
    ecdc:	add	r3, r0
    ecde:	bmi.n	ecf0 <_free_r+0x108>
    ece0:	ldr.w	r2, [r5, #-8]
    ece4:	subs	r4, r4, r2
    ece6:	add	r3, r2
    ece8:	ldr	r0, [r4, #8]
    ecea:	ldr	r2, [r4, #12]
    ecec:	str	r2, [r0, #12]
    ecee:	str	r0, [r2, #8]
    ecf0:	ldr	r2, [pc, #188]	; (edb0 <_free_r+0x1c8>)
    ecf2:	ldr	r2, [r2, #0]
    ecf4:	orr.w	r0, r3, #1
    ecf8:	cmp	r3, r2
    ecfa:	str	r0, [r4, #4]
    ecfc:	str	r4, [r1, #8]
    ecfe:	bcc.n	ec6e <_free_r+0x86>
    ed00:	ldr	r3, [pc, #176]	; (edb4 <_free_r+0x1cc>)
    ed02:	mov	r0, r8
    ed04:	ldr	r1, [r3, #0]
    ed06:	bl	eb4c <_malloc_trim_r>
    ed0a:	b.n	ec6e <_free_r+0x86>
    ed0c:	adds	r1, r2, r0
    ed0e:	ldr	r1, [r1, #4]
    ed10:	lsls	r1, r1, #31
    ed12:	bmi.n	ed9e <_free_r+0x1b6>
    ed14:	ldr	r1, [r2, #8]
    ed16:	ldr	r2, [r2, #12]
    ed18:	str	r2, [r1, #12]
    ed1a:	add	r3, r0
    ed1c:	orr.w	r0, r3, #1
    ed20:	str	r1, [r2, #8]
    ed22:	str	r0, [r4, #4]
    ed24:	str	r3, [r4, r3]
    ed26:	b.n	ec6e <_free_r+0x86>
    ed28:	cmp	r2, #20
    ed2a:	bhi.n	ed5c <_free_r+0x174>
    ed2c:	add.w	r7, r2, #92	; 0x5c
    ed30:	lsls	r7, r7, #1
    ed32:	add.w	r5, r2, #91	; 0x5b
    ed36:	b.n	ec8c <_free_r+0xa4>
    ed38:	asrs	r2, r5, #2
    ed3a:	ldr	r3, [r1, #4]
    ed3c:	movs	r5, #1
    ed3e:	lsl.w	r2, r5, r2
    ed42:	orrs	r3, r2
    ed44:	str	r3, [r1, #4]
    ed46:	mov	r2, r0
    ed48:	b.n	ecae <_free_r+0xc6>
    ed4a:	orr.w	r2, r3, #1
    ed4e:	str	r4, [r1, #20]
    ed50:	str	r4, [r1, #16]
    ed52:	str	r5, [r4, #12]
    ed54:	str	r5, [r4, #8]
    ed56:	str	r2, [r4, #4]
    ed58:	str	r3, [r4, r3]
    ed5a:	b.n	ec6e <_free_r+0x86>
    ed5c:	cmp	r2, #84	; 0x54
    ed5e:	bhi.n	ed6e <_free_r+0x186>
    ed60:	lsrs	r2, r3, #12
    ed62:	add.w	r7, r2, #111	; 0x6f
    ed66:	lsls	r7, r7, #1
    ed68:	add.w	r5, r2, #110	; 0x6e
    ed6c:	b.n	ec8c <_free_r+0xa4>
    ed6e:	cmp.w	r2, #340	; 0x154
    ed72:	bhi.n	ed82 <_free_r+0x19a>
    ed74:	lsrs	r2, r3, #15
    ed76:	add.w	r7, r2, #120	; 0x78
    ed7a:	lsls	r7, r7, #1
    ed7c:	add.w	r5, r2, #119	; 0x77
    ed80:	b.n	ec8c <_free_r+0xa4>
    ed82:	movw	r0, #1364	; 0x554
    ed86:	cmp	r2, r0
    ed88:	bhi.n	ed98 <_free_r+0x1b0>
    ed8a:	lsrs	r2, r3, #18
    ed8c:	add.w	r7, r2, #125	; 0x7d
    ed90:	lsls	r7, r7, #1
    ed92:	add.w	r5, r2, #124	; 0x7c
    ed96:	b.n	ec8c <_free_r+0xa4>
    ed98:	movs	r7, #254	; 0xfe
    ed9a:	movs	r5, #126	; 0x7e
    ed9c:	b.n	ec8c <_free_r+0xa4>
    ed9e:	orr.w	r2, r3, #1
    eda2:	str	r2, [r4, #4]
    eda4:	str	r3, [r4, r3]
    eda6:	b.n	ec6e <_free_r+0x86>
    eda8:	.word	0x200013ac
    edac:	.word	0x200013b4
    edb0:	.word	0x200017b8
    edb4:	.word	0x20004238

0000edb8 <_localeconv_r>:
    edb8:	ldr	r2, [pc, #16]	; (edcc <_localeconv_r+0x14>)
    edba:	ldr	r3, [pc, #20]	; (edd0 <_localeconv_r+0x18>)
    edbc:	ldr	r2, [r2, #0]
    edbe:	ldr	r0, [r2, #52]	; 0x34
    edc0:	cmp	r0, #0
    edc2:	it	eq
    edc4:	moveq	r0, r3
    edc6:	adds	r0, #240	; 0xf0
    edc8:	bx	lr
    edca:	nop
    edcc:	.word	0x200017bc
    edd0:	.word	0x20001240
	...

0000ede0 <memchr>:
    ede0:	and.w	r1, r1, #255	; 0xff
    ede4:	cmp	r2, #16
    ede6:	blt.n	ee40 <memchr+0x60>
    ede8:	tst.w	r0, #7
    edec:	beq.n	ee00 <memchr+0x20>
    edee:	ldrb.w	r3, [r0], #1
    edf2:	subs	r2, #1
    edf4:	cmp	r3, r1
    edf6:	beq.n	ee54 <memchr+0x74>
    edf8:	tst.w	r0, #7
    edfc:	cbz	r2, ee50 <memchr+0x70>
    edfe:	bne.n	edee <memchr+0xe>
    ee00:	push	{r4, r5, r6, r7}
    ee02:	orr.w	r1, r1, r1, lsl #8
    ee06:	orr.w	r1, r1, r1, lsl #16
    ee0a:	bic.w	r4, r2, #7
    ee0e:	mvns.w	r7, #0
    ee12:	movs	r3, #0
    ee14:	ldrd	r5, r6, [r0], #8
    ee18:	subs	r4, #8
    ee1a:	eor.w	r5, r5, r1
    ee1e:	eor.w	r6, r6, r1
    ee22:	uadd8	r5, r5, r7
    ee26:	sel	r5, r3, r7
    ee2a:	uadd8	r6, r6, r7
    ee2e:	sel	r6, r5, r7
    ee32:	cbnz	r6, ee58 <memchr+0x78>
    ee34:	bne.n	ee14 <memchr+0x34>
    ee36:	pop	{r4, r5, r6, r7}
    ee38:	and.w	r1, r1, #255	; 0xff
    ee3c:	and.w	r2, r2, #7
    ee40:	cbz	r2, ee50 <memchr+0x70>
    ee42:	ldrb.w	r3, [r0], #1
    ee46:	subs	r2, #1
    ee48:	eor.w	r3, r3, r1
    ee4c:	cbz	r3, ee54 <memchr+0x74>
    ee4e:	bne.n	ee42 <memchr+0x62>
    ee50:	movs	r0, #0
    ee52:	bx	lr
    ee54:	subs	r0, #1
    ee56:	bx	lr
    ee58:	cmp	r5, #0
    ee5a:	itte	eq
    ee5c:	moveq	r5, r6
    ee5e:	subeq	r0, #3
    ee60:	subne	r0, #7
    ee62:	tst.w	r5, #1
    ee66:	bne.n	ee78 <memchr+0x98>
    ee68:	adds	r0, #1
    ee6a:	tst.w	r5, #256	; 0x100
    ee6e:	ittt	eq
    ee70:	addeq	r0, #1
    ee72:	tsteq.w	r5, #98304	; 0x18000
    ee76:	addeq	r0, #1
    ee78:	pop	{r4, r5, r6, r7}
    ee7a:	subs	r0, #1
    ee7c:	bx	lr
    ee7e:	nop

0000ee80 <_Balloc>:
    ee80:	ldr	r3, [r0, #76]	; 0x4c
    ee82:	push	{r4, r5, r6, lr}
    ee84:	mov	r5, r0
    ee86:	mov	r4, r1
    ee88:	cbz	r3, ee9e <_Balloc+0x1e>
    ee8a:	ldr.w	r0, [r3, r4, lsl #2]
    ee8e:	cbz	r0, eeb2 <_Balloc+0x32>
    ee90:	ldr	r2, [r0, #0]
    ee92:	str.w	r2, [r3, r4, lsl #2]
    ee96:	movs	r3, #0
    ee98:	str	r3, [r0, #16]
    ee9a:	str	r3, [r0, #12]
    ee9c:	pop	{r4, r5, r6, pc}
    ee9e:	movs	r2, #33	; 0x21
    eea0:	movs	r1, #4
    eea2:	bl	f604 <_calloc_r>
    eea6:	str	r0, [r5, #76]	; 0x4c
    eea8:	mov	r3, r0
    eeaa:	cmp	r0, #0
    eeac:	bne.n	ee8a <_Balloc+0xa>
    eeae:	movs	r0, #0
    eeb0:	pop	{r4, r5, r6, pc}
    eeb2:	movs	r1, #1
    eeb4:	lsl.w	r6, r1, r4
    eeb8:	adds	r2, r6, #5
    eeba:	mov	r0, r5
    eebc:	lsls	r2, r2, #2
    eebe:	bl	f604 <_calloc_r>
    eec2:	cmp	r0, #0
    eec4:	beq.n	eeae <_Balloc+0x2e>
    eec6:	str	r4, [r0, #4]
    eec8:	str	r6, [r0, #8]
    eeca:	b.n	ee96 <_Balloc+0x16>

0000eecc <_Bfree>:
    eecc:	cbz	r1, eedc <_Bfree+0x10>
    eece:	ldr	r3, [r0, #76]	; 0x4c
    eed0:	ldr	r2, [r1, #4]
    eed2:	ldr.w	r0, [r3, r2, lsl #2]
    eed6:	str	r0, [r1, #0]
    eed8:	str.w	r1, [r3, r2, lsl #2]
    eedc:	bx	lr
    eede:	nop

0000eee0 <__multadd>:
    eee0:	push	{r4, r5, r6, r7, lr}
    eee2:	ldr	r4, [r1, #16]
    eee4:	sub	sp, #12
    eee6:	mov	r5, r1
    eee8:	mov	r6, r0
    eeea:	add.w	lr, r1, #20
    eeee:	movs	r7, #0
    eef0:	ldr.w	r0, [lr]
    eef4:	uxth	r1, r0
    eef6:	mla	r1, r2, r1, r3
    eefa:	lsrs	r3, r1, #16
    eefc:	lsrs	r0, r0, #16
    eefe:	mla	r3, r2, r0, r3
    ef02:	uxth	r1, r1
    ef04:	adds	r7, #1
    ef06:	add.w	r1, r1, r3, lsl #16
    ef0a:	cmp	r4, r7
    ef0c:	str.w	r1, [lr], #4
    ef10:	mov.w	r3, r3, lsr #16
    ef14:	bgt.n	eef0 <__multadd+0x10>
    ef16:	cbz	r3, ef28 <__multadd+0x48>
    ef18:	ldr	r2, [r5, #8]
    ef1a:	cmp	r4, r2
    ef1c:	bge.n	ef2e <__multadd+0x4e>
    ef1e:	add.w	r2, r5, r4, lsl #2
    ef22:	adds	r4, #1
    ef24:	str	r3, [r2, #20]
    ef26:	str	r4, [r5, #16]
    ef28:	mov	r0, r5
    ef2a:	add	sp, #12
    ef2c:	pop	{r4, r5, r6, r7, pc}
    ef2e:	ldr	r1, [r5, #4]
    ef30:	str	r3, [sp, #4]
    ef32:	adds	r1, #1
    ef34:	mov	r0, r6
    ef36:	bl	ee80 <_Balloc>
    ef3a:	ldr	r2, [r5, #16]
    ef3c:	adds	r2, #2
    ef3e:	add.w	r1, r5, #12
    ef42:	mov	r7, r0
    ef44:	lsls	r2, r2, #2
    ef46:	adds	r0, #12
    ef48:	bl	83b0 <memcpy>
    ef4c:	ldr	r2, [r6, #76]	; 0x4c
    ef4e:	ldr	r1, [r5, #4]
    ef50:	ldr	r3, [sp, #4]
    ef52:	ldr.w	r0, [r2, r1, lsl #2]
    ef56:	str	r0, [r5, #0]
    ef58:	str.w	r5, [r2, r1, lsl #2]
    ef5c:	mov	r5, r7
    ef5e:	b.n	ef1e <__multadd+0x3e>

0000ef60 <__hi0bits>:
    ef60:	lsrs	r3, r0, #16
    ef62:	lsls	r3, r3, #16
    ef64:	cbnz	r3, ef94 <__hi0bits+0x34>
    ef66:	lsls	r0, r0, #16
    ef68:	movs	r3, #16
    ef6a:	tst.w	r0, #4278190080	; 0xff000000
    ef6e:	itt	eq
    ef70:	lsleq	r0, r0, #8
    ef72:	addeq	r3, #8
    ef74:	tst.w	r0, #4026531840	; 0xf0000000
    ef78:	itt	eq
    ef7a:	lsleq	r0, r0, #4
    ef7c:	addeq	r3, #4
    ef7e:	tst.w	r0, #3221225472	; 0xc0000000
    ef82:	itt	eq
    ef84:	lsleq	r0, r0, #2
    ef86:	addeq	r3, #2
    ef88:	cmp	r0, #0
    ef8a:	blt.n	ef9c <__hi0bits+0x3c>
    ef8c:	lsls	r2, r0, #1
    ef8e:	bmi.n	ef98 <__hi0bits+0x38>
    ef90:	movs	r0, #32
    ef92:	bx	lr
    ef94:	movs	r3, #0
    ef96:	b.n	ef6a <__hi0bits+0xa>
    ef98:	adds	r0, r3, #1
    ef9a:	bx	lr
    ef9c:	mov	r0, r3
    ef9e:	bx	lr

0000efa0 <__lo0bits>:
    efa0:	ldr	r3, [r0, #0]
    efa2:	ands.w	r2, r3, #7
    efa6:	beq.n	efb8 <__lo0bits+0x18>
    efa8:	lsls	r1, r3, #31
    efaa:	bmi.n	efee <__lo0bits+0x4e>
    efac:	lsls	r2, r3, #30
    efae:	bmi.n	eff2 <__lo0bits+0x52>
    efb0:	lsrs	r3, r3, #2
    efb2:	str	r3, [r0, #0]
    efb4:	movs	r0, #2
    efb6:	bx	lr
    efb8:	uxth	r1, r3
    efba:	cbnz	r1, efc0 <__lo0bits+0x20>
    efbc:	lsrs	r3, r3, #16
    efbe:	movs	r2, #16
    efc0:	tst.w	r3, #255	; 0xff
    efc4:	itt	eq
    efc6:	lsreq	r3, r3, #8
    efc8:	addeq	r2, #8
    efca:	lsls	r1, r3, #28
    efcc:	itt	eq
    efce:	lsreq	r3, r3, #4
    efd0:	addeq	r2, #4
    efd2:	lsls	r1, r3, #30
    efd4:	itt	eq
    efd6:	lsreq	r3, r3, #2
    efd8:	addeq	r2, #2
    efda:	lsls	r1, r3, #31
    efdc:	bmi.n	efe8 <__lo0bits+0x48>
    efde:	lsrs	r3, r3, #1
    efe0:	bne.n	efe6 <__lo0bits+0x46>
    efe2:	movs	r0, #32
    efe4:	bx	lr
    efe6:	adds	r2, #1
    efe8:	str	r3, [r0, #0]
    efea:	mov	r0, r2
    efec:	bx	lr
    efee:	movs	r0, #0
    eff0:	bx	lr
    eff2:	lsrs	r3, r3, #1
    eff4:	str	r3, [r0, #0]
    eff6:	movs	r0, #1
    eff8:	bx	lr
    effa:	nop

0000effc <__i2b>:
    effc:	push	{r4, lr}
    effe:	mov	r4, r1
    f000:	movs	r1, #1
    f002:	bl	ee80 <_Balloc>
    f006:	movs	r2, #1
    f008:	str	r4, [r0, #20]
    f00a:	str	r2, [r0, #16]
    f00c:	pop	{r4, pc}
    f00e:	nop

0000f010 <__multiply>:
    f010:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f014:	ldr	r5, [r1, #16]
    f016:	ldr	r7, [r2, #16]
    f018:	cmp	r5, r7
    f01a:	sub	sp, #12
    f01c:	mov	r4, r1
    f01e:	mov	r6, r2
    f020:	bge.n	f02c <__multiply+0x1c>
    f022:	mov	r2, r5
    f024:	mov	r4, r6
    f026:	mov	r5, r7
    f028:	mov	r6, r1
    f02a:	mov	r7, r2
    f02c:	ldr	r3, [r4, #8]
    f02e:	ldr	r1, [r4, #4]
    f030:	add.w	r8, r5, r7
    f034:	cmp	r8, r3
    f036:	it	gt
    f038:	addgt	r1, #1
    f03a:	bl	ee80 <_Balloc>
    f03e:	add.w	ip, r0, #20
    f042:	add.w	r9, ip, r8, lsl #2
    f046:	cmp	ip, r9
    f048:	str	r0, [sp, #0]
    f04a:	bcs.n	f058 <__multiply+0x48>
    f04c:	mov	r3, ip
    f04e:	movs	r1, #0
    f050:	str.w	r1, [r3], #4
    f054:	cmp	r9, r3
    f056:	bhi.n	f050 <__multiply+0x40>
    f058:	add.w	r2, r6, #20
    f05c:	add.w	sl, r2, r7, lsl #2
    f060:	add.w	r3, r4, #20
    f064:	cmp	r2, sl
    f066:	add.w	lr, r3, r5, lsl #2
    f06a:	bcs.n	f116 <__multiply+0x106>
    f06c:	str.w	r9, [sp, #4]
    f070:	mov	r9, r3
    f072:	ldr.w	r3, [r2], #4
    f076:	uxth.w	fp, r3
    f07a:	cmp.w	fp, #0
    f07e:	beq.n	f0c2 <__multiply+0xb2>
    f080:	movs	r0, #0
    f082:	mov	r7, r9
    f084:	mov	r6, ip
    f086:	mov	r5, r0
    f088:	b.n	f08c <__multiply+0x7c>
    f08a:	mov	r6, r3
    f08c:	ldr.w	r4, [r7], #4
    f090:	ldr	r0, [r6, #0]
    f092:	uxth	r1, r4
    f094:	uxth	r3, r0
    f096:	mla	r1, fp, r1, r3
    f09a:	lsrs	r4, r4, #16
    f09c:	lsrs	r0, r0, #16
    f09e:	adds	r3, r1, r5
    f0a0:	mla	r0, fp, r4, r0
    f0a4:	add.w	r0, r0, r3, lsr #16
    f0a8:	uxth	r1, r3
    f0aa:	mov	r3, r6
    f0ac:	orr.w	r1, r1, r0, lsl #16
    f0b0:	cmp	lr, r7
    f0b2:	mov.w	r5, r0, lsr #16
    f0b6:	str.w	r1, [r3], #4
    f0ba:	bhi.n	f08a <__multiply+0x7a>
    f0bc:	str	r5, [r6, #4]
    f0be:	ldr.w	r3, [r2, #-4]
    f0c2:	movs.w	fp, r3, lsr #16
    f0c6:	beq.n	f10a <__multiply+0xfa>
    f0c8:	ldr.w	r3, [ip]
    f0cc:	mov	r7, ip
    f0ce:	mov	r0, r3
    f0d0:	mov	r5, r9
    f0d2:	movs	r1, #0
    f0d4:	b.n	f0d8 <__multiply+0xc8>
    f0d6:	mov	r7, r6
    f0d8:	ldrh	r4, [r5, #0]
    f0da:	lsrs	r0, r0, #16
    f0dc:	mla	r0, fp, r4, r0
    f0e0:	add	r1, r0
    f0e2:	uxth	r4, r3
    f0e4:	mov	r6, r7
    f0e6:	orr.w	r3, r4, r1, lsl #16
    f0ea:	str.w	r3, [r6], #4
    f0ee:	ldr	r0, [r7, #4]
    f0f0:	ldr.w	r4, [r5], #4
    f0f4:	uxth	r3, r0
    f0f6:	lsrs	r4, r4, #16
    f0f8:	mla	r4, fp, r4, r3
    f0fc:	add.w	r3, r4, r1, lsr #16
    f100:	cmp	lr, r5
    f102:	mov.w	r1, r3, lsr #16
    f106:	bhi.n	f0d6 <__multiply+0xc6>
    f108:	str	r3, [r7, #4]
    f10a:	cmp	sl, r2
    f10c:	add.w	ip, ip, #4
    f110:	bhi.n	f072 <__multiply+0x62>
    f112:	ldr.w	r9, [sp, #4]
    f116:	cmp.w	r8, #0
    f11a:	ble.n	f134 <__multiply+0x124>
    f11c:	ldr.w	r3, [r9, #-4]
    f120:	sub.w	r9, r9, #4
    f124:	cbz	r3, f12e <__multiply+0x11e>
    f126:	b.n	f134 <__multiply+0x124>
    f128:	ldr.w	r3, [r9, #-4]!
    f12c:	cbnz	r3, f134 <__multiply+0x124>
    f12e:	subs.w	r8, r8, #1
    f132:	bne.n	f128 <__multiply+0x118>
    f134:	ldr	r0, [sp, #0]
    f136:	str.w	r8, [r0, #16]
    f13a:	add	sp, #12
    f13c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000f140 <__pow5mult>:
    f140:	ands.w	r3, r2, #3
    f144:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f148:	mov	r4, r2
    f14a:	mov	r7, r0
    f14c:	bne.n	f1ac <__pow5mult+0x6c>
    f14e:	mov	r6, r1
    f150:	asrs	r4, r4, #2
    f152:	beq.n	f18e <__pow5mult+0x4e>
    f154:	ldr	r5, [r7, #72]	; 0x48
    f156:	cbz	r5, f1be <__pow5mult+0x7e>
    f158:	lsls	r3, r4, #31
    f15a:	mov.w	r8, #0
    f15e:	bmi.n	f16e <__pow5mult+0x2e>
    f160:	asrs	r4, r4, #1
    f162:	beq.n	f18e <__pow5mult+0x4e>
    f164:	ldr	r0, [r5, #0]
    f166:	cbz	r0, f194 <__pow5mult+0x54>
    f168:	mov	r5, r0
    f16a:	lsls	r3, r4, #31
    f16c:	bpl.n	f160 <__pow5mult+0x20>
    f16e:	mov	r2, r5
    f170:	mov	r1, r6
    f172:	mov	r0, r7
    f174:	bl	f010 <__multiply>
    f178:	cbz	r6, f1a8 <__pow5mult+0x68>
    f17a:	ldr	r2, [r6, #4]
    f17c:	ldr	r3, [r7, #76]	; 0x4c
    f17e:	asrs	r4, r4, #1
    f180:	ldr.w	r1, [r3, r2, lsl #2]
    f184:	str	r1, [r6, #0]
    f186:	str.w	r6, [r3, r2, lsl #2]
    f18a:	mov	r6, r0
    f18c:	bne.n	f164 <__pow5mult+0x24>
    f18e:	mov	r0, r6
    f190:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f194:	mov	r2, r5
    f196:	mov	r1, r5
    f198:	mov	r0, r7
    f19a:	bl	f010 <__multiply>
    f19e:	str	r0, [r5, #0]
    f1a0:	str.w	r8, [r0]
    f1a4:	mov	r5, r0
    f1a6:	b.n	f16a <__pow5mult+0x2a>
    f1a8:	mov	r6, r0
    f1aa:	b.n	f160 <__pow5mult+0x20>
    f1ac:	subs	r2, r3, #1
    f1ae:	ldr	r5, [pc, #44]	; (f1dc <__pow5mult+0x9c>)
    f1b0:	movs	r3, #0
    f1b2:	ldr.w	r2, [r5, r2, lsl #2]
    f1b6:	bl	eee0 <__multadd>
    f1ba:	mov	r6, r0
    f1bc:	b.n	f150 <__pow5mult+0x10>
    f1be:	movs	r1, #1
    f1c0:	mov	r0, r7
    f1c2:	bl	ee80 <_Balloc>
    f1c6:	movw	r1, #625	; 0x271
    f1ca:	movs	r2, #1
    f1cc:	movs	r3, #0
    f1ce:	str	r1, [r0, #20]
    f1d0:	str	r2, [r0, #16]
    f1d2:	mov	r5, r0
    f1d4:	str	r0, [r7, #72]	; 0x48
    f1d6:	str	r3, [r0, #0]
    f1d8:	b.n	f158 <__pow5mult+0x18>
    f1da:	nop
    f1dc:	.word	0x200009f4

0000f1e0 <__lshift>:
    f1e0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f1e4:	mov	r9, r2
    f1e6:	ldr	r2, [r1, #16]
    f1e8:	ldr	r3, [r1, #8]
    f1ea:	mov.w	r4, r9, asr #5
    f1ee:	add.w	r8, r4, r2
    f1f2:	add.w	r5, r8, #1
    f1f6:	cmp	r5, r3
    f1f8:	mov	r6, r1
    f1fa:	mov	sl, r0
    f1fc:	ldr	r1, [r1, #4]
    f1fe:	ble.n	f20a <__lshift+0x2a>
    f200:	lsls	r3, r3, #1
    f202:	cmp	r5, r3
    f204:	add.w	r1, r1, #1
    f208:	bgt.n	f200 <__lshift+0x20>
    f20a:	mov	r0, sl
    f20c:	bl	ee80 <_Balloc>
    f210:	cmp	r4, #0
    f212:	add.w	r2, r0, #20
    f216:	ble.n	f28a <__lshift+0xaa>
    f218:	add.w	r3, r2, r4, lsl #2
    f21c:	movs	r1, #0
    f21e:	str.w	r1, [r2], #4
    f222:	cmp	r3, r2
    f224:	bne.n	f21e <__lshift+0x3e>
    f226:	ldr	r4, [r6, #16]
    f228:	add.w	r1, r6, #20
    f22c:	ands.w	r9, r9, #31
    f230:	add.w	lr, r1, r4, lsl #2
    f234:	beq.n	f27a <__lshift+0x9a>
    f236:	rsb	r2, r9, #32
    f23a:	movs	r4, #0
    f23c:	ldr	r7, [r1, #0]
    f23e:	lsl.w	ip, r7, r9
    f242:	orr.w	r4, ip, r4
    f246:	mov	ip, r3
    f248:	str.w	r4, [r3], #4
    f24c:	ldr.w	r4, [r1], #4
    f250:	cmp	lr, r1
    f252:	lsr.w	r4, r4, r2
    f256:	bhi.n	f23c <__lshift+0x5c>
    f258:	str.w	r4, [ip, #4]
    f25c:	cbz	r4, f262 <__lshift+0x82>
    f25e:	add.w	r5, r8, #2
    f262:	ldr.w	r3, [sl, #76]	; 0x4c
    f266:	ldr	r2, [r6, #4]
    f268:	subs	r5, #1
    f26a:	ldr.w	r1, [r3, r2, lsl #2]
    f26e:	str	r5, [r0, #16]
    f270:	str	r1, [r6, #0]
    f272:	str.w	r6, [r3, r2, lsl #2]
    f276:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f27a:	subs	r3, #4
    f27c:	ldr.w	r2, [r1], #4
    f280:	str.w	r2, [r3, #4]!
    f284:	cmp	lr, r1
    f286:	bhi.n	f27c <__lshift+0x9c>
    f288:	b.n	f262 <__lshift+0x82>
    f28a:	mov	r3, r2
    f28c:	b.n	f226 <__lshift+0x46>
    f28e:	nop

0000f290 <__mcmp>:
    f290:	ldr	r2, [r0, #16]
    f292:	ldr	r3, [r1, #16]
    f294:	subs	r2, r2, r3
    f296:	bne.n	f2c0 <__mcmp+0x30>
    f298:	lsls	r3, r3, #2
    f29a:	adds	r0, #20
    f29c:	adds	r1, #20
    f29e:	add	r1, r3
    f2a0:	push	{r4}
    f2a2:	add	r3, r0
    f2a4:	b.n	f2aa <__mcmp+0x1a>
    f2a6:	cmp	r0, r3
    f2a8:	bcs.n	f2c4 <__mcmp+0x34>
    f2aa:	ldr.w	r4, [r3, #-4]!
    f2ae:	ldr.w	r2, [r1, #-4]!
    f2b2:	cmp	r4, r2
    f2b4:	beq.n	f2a6 <__mcmp+0x16>
    f2b6:	bcc.n	f2cc <__mcmp+0x3c>
    f2b8:	movs	r0, #1
    f2ba:	ldr.w	r4, [sp], #4
    f2be:	bx	lr
    f2c0:	mov	r0, r2
    f2c2:	bx	lr
    f2c4:	movs	r0, #0
    f2c6:	ldr.w	r4, [sp], #4
    f2ca:	bx	lr
    f2cc:	mov.w	r0, #4294967295
    f2d0:	b.n	f2ba <__mcmp+0x2a>
    f2d2:	nop

0000f2d4 <__mdiff>:
    f2d4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f2d8:	ldr	r3, [r1, #16]
    f2da:	mov	r7, r1
    f2dc:	ldr	r1, [r2, #16]
    f2de:	subs	r3, r3, r1
    f2e0:	cmp	r3, #0
    f2e2:	mov	r8, r2
    f2e4:	bne.n	f316 <__mdiff+0x42>
    f2e6:	lsls	r1, r1, #2
    f2e8:	add.w	r2, r7, #20
    f2ec:	add.w	r5, r8, #20
    f2f0:	adds	r3, r2, r1
    f2f2:	add	r1, r5
    f2f4:	b.n	f2fa <__mdiff+0x26>
    f2f6:	cmp	r2, r3
    f2f8:	bcs.n	f3b8 <__mdiff+0xe4>
    f2fa:	ldr.w	r6, [r3, #-4]!
    f2fe:	ldr.w	r4, [r1, #-4]!
    f302:	cmp	r6, r4
    f304:	beq.n	f2f6 <__mdiff+0x22>
    f306:	bcs.n	f3ca <__mdiff+0xf6>
    f308:	mov	r3, r7
    f30a:	mov	r4, r2
    f30c:	mov	r7, r8
    f30e:	mov.w	r9, #1
    f312:	mov	r8, r3
    f314:	b.n	f324 <__mdiff+0x50>
    f316:	blt.n	f3d4 <__mdiff+0x100>
    f318:	add.w	r5, r7, #20
    f31c:	add.w	r4, r2, #20
    f320:	mov.w	r9, #0
    f324:	ldr	r1, [r7, #4]
    f326:	bl	ee80 <_Balloc>
    f32a:	ldr.w	r3, [r8, #16]
    f32e:	ldr	r6, [r7, #16]
    f330:	str.w	r9, [r0, #12]
    f334:	add.w	ip, r4, r3, lsl #2
    f338:	mov	lr, r4
    f33a:	add.w	r7, r5, r6, lsl #2
    f33e:	add.w	r4, r0, #20
    f342:	movs	r3, #0
    f344:	ldr.w	r1, [lr], #4
    f348:	ldr.w	r8, [r5], #4
    f34c:	uxth	r2, r1
    f34e:	uxtah	r3, r3, r8
    f352:	lsrs	r1, r1, #16
    f354:	subs	r2, r3, r2
    f356:	rsb	r3, r1, r8, lsr #16
    f35a:	add.w	r3, r3, r2, asr #16
    f35e:	uxth	r2, r2
    f360:	orr.w	r2, r2, r3, lsl #16
    f364:	cmp	ip, lr
    f366:	str.w	r2, [r4], #4
    f36a:	mov.w	r3, r3, asr #16
    f36e:	bhi.n	f344 <__mdiff+0x70>
    f370:	cmp	r7, r5
    f372:	bls.n	f3a4 <__mdiff+0xd0>
    f374:	mov	ip, r4
    f376:	mov	r1, r5
    f378:	ldr.w	lr, [r1], #4
    f37c:	uxtah	r2, r3, lr
    f380:	asrs	r3, r2, #16
    f382:	add.w	r3, r3, lr, lsr #16
    f386:	uxth	r2, r2
    f388:	orr.w	r2, r2, r3, lsl #16
    f38c:	cmp	r7, r1
    f38e:	str.w	r2, [ip], #4
    f392:	mov.w	r3, r3, asr #16
    f396:	bhi.n	f378 <__mdiff+0xa4>
    f398:	mvns	r5, r5
    f39a:	add	r5, r7
    f39c:	bic.w	r5, r5, #3
    f3a0:	adds	r5, #4
    f3a2:	add	r4, r5
    f3a4:	subs	r4, #4
    f3a6:	cbnz	r2, f3b2 <__mdiff+0xde>
    f3a8:	ldr.w	r3, [r4, #-4]!
    f3ac:	subs	r6, #1
    f3ae:	cmp	r3, #0
    f3b0:	beq.n	f3a8 <__mdiff+0xd4>
    f3b2:	str	r6, [r0, #16]
    f3b4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f3b8:	movs	r1, #0
    f3ba:	bl	ee80 <_Balloc>
    f3be:	movs	r2, #1
    f3c0:	movs	r3, #0
    f3c2:	str	r2, [r0, #16]
    f3c4:	str	r3, [r0, #20]
    f3c6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f3ca:	mov	r4, r5
    f3cc:	mov.w	r9, #0
    f3d0:	mov	r5, r2
    f3d2:	b.n	f324 <__mdiff+0x50>
    f3d4:	mov	r3, r7
    f3d6:	add.w	r4, r7, #20
    f3da:	add.w	r5, r8, #20
    f3de:	mov	r7, r8
    f3e0:	mov.w	r9, #1
    f3e4:	mov	r8, r3
    f3e6:	b.n	f324 <__mdiff+0x50>

0000f3e8 <__d2b>:
    f3e8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f3ec:	vmov	r6, r7, d0
    f3f0:	sub	sp, #12
    f3f2:	mov	r8, r1
    f3f4:	movs	r1, #1
    f3f6:	mov	r4, r7
    f3f8:	ubfx	r5, r7, #20, #11
    f3fc:	mov	r7, r2
    f3fe:	bl	ee80 <_Balloc>
    f402:	ubfx	r4, r4, #0, #20
    f406:	mov	r9, r0
    f408:	cbz	r5, f40e <__d2b+0x26>
    f40a:	orr.w	r4, r4, #1048576	; 0x100000
    f40e:	str	r4, [sp, #4]
    f410:	cbz	r6, f45a <__d2b+0x72>
    f412:	add	r0, sp, #8
    f414:	str.w	r6, [r0, #-8]!
    f418:	bl	efa0 <__lo0bits>
    f41c:	cmp	r0, #0
    f41e:	bne.n	f48a <__d2b+0xa2>
    f420:	ldmia.w	sp, {r2, r3}
    f424:	str.w	r2, [r9, #20]
    f428:	cmp	r3, #0
    f42a:	ite	eq
    f42c:	moveq	r1, #1
    f42e:	movne	r1, #2
    f430:	str.w	r3, [r9, #24]
    f434:	str.w	r1, [r9, #16]
    f438:	cbnz	r5, f472 <__d2b+0x8a>
    f43a:	add.w	r3, r9, r1, lsl #2
    f43e:	subw	r0, r0, #1074	; 0x432
    f442:	str.w	r0, [r8]
    f446:	ldr	r0, [r3, #16]
    f448:	bl	ef60 <__hi0bits>
    f44c:	rsb	r0, r0, r1, lsl #5
    f450:	str	r0, [r7, #0]
    f452:	mov	r0, r9
    f454:	add	sp, #12
    f456:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f45a:	add	r0, sp, #4
    f45c:	bl	efa0 <__lo0bits>
    f460:	ldr	r3, [sp, #4]
    f462:	str.w	r3, [r9, #20]
    f466:	movs	r1, #1
    f468:	adds	r0, #32
    f46a:	str.w	r1, [r9, #16]
    f46e:	cmp	r5, #0
    f470:	beq.n	f43a <__d2b+0x52>
    f472:	subw	r5, r5, #1075	; 0x433
    f476:	add	r5, r0
    f478:	rsb	r0, r0, #53	; 0x35
    f47c:	str.w	r5, [r8]
    f480:	str	r0, [r7, #0]
    f482:	mov	r0, r9
    f484:	add	sp, #12
    f486:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f48a:	ldmia.w	sp, {r2, r3}
    f48e:	rsb	r1, r0, #32
    f492:	lsl.w	r1, r3, r1
    f496:	orrs	r2, r1
    f498:	lsrs	r3, r0
    f49a:	str	r3, [sp, #4]
    f49c:	str.w	r2, [r9, #20]
    f4a0:	b.n	f428 <__d2b+0x40>
    f4a2:	nop

0000f4a4 <__ssprint_r>:
    f4a4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f4a8:	ldr	r3, [r2, #8]
    f4aa:	sub	sp, #12
    f4ac:	mov	r8, r2
    f4ae:	cmp	r3, #0
    f4b0:	beq.n	f598 <__ssprint_r+0xf4>
    f4b2:	mov	fp, r0
    f4b4:	mov.w	r9, #0
    f4b8:	ldr	r6, [r2, #0]
    f4ba:	ldr	r0, [r1, #0]
    f4bc:	ldr	r3, [r1, #8]
    f4be:	mov	r5, r1
    f4c0:	mov	r4, r9
    f4c2:	cmp	r4, #0
    f4c4:	beq.n	f552 <__ssprint_r+0xae>
    f4c6:	cmp	r4, r3
    f4c8:	mov	r7, r3
    f4ca:	mov	sl, r3
    f4cc:	bcc.n	f55c <__ssprint_r+0xb8>
    f4ce:	ldrh	r3, [r5, #12]
    f4d0:	tst.w	r3, #1152	; 0x480
    f4d4:	beq.n	f532 <__ssprint_r+0x8e>
    f4d6:	ldr	r7, [r5, #20]
    f4d8:	ldr	r1, [r5, #16]
    f4da:	add.w	r7, r7, r7, lsl #1
    f4de:	rsb	sl, r1, r0
    f4e2:	add.w	r7, r7, r7, lsr #31
    f4e6:	adds	r0, r4, #1
    f4e8:	asrs	r7, r7, #1
    f4ea:	add	r0, sl
    f4ec:	cmp	r0, r7
    f4ee:	mov	r2, r7
    f4f0:	itt	hi
    f4f2:	movhi	r7, r0
    f4f4:	movhi	r2, r7
    f4f6:	lsls	r3, r3, #21
    f4f8:	bpl.n	f562 <__ssprint_r+0xbe>
    f4fa:	mov	r1, r2
    f4fc:	mov	r0, fp
    f4fe:	bl	b5e0 <_malloc_r>
    f502:	cmp	r0, #0
    f504:	beq.n	f576 <__ssprint_r+0xd2>
    f506:	mov	r2, sl
    f508:	ldr	r1, [r5, #16]
    f50a:	str	r0, [sp, #4]
    f50c:	bl	83b0 <memcpy>
    f510:	ldrh	r2, [r5, #12]
    f512:	ldr	r3, [sp, #4]
    f514:	bic.w	r2, r2, #1152	; 0x480
    f518:	orr.w	r2, r2, #128	; 0x80
    f51c:	strh	r2, [r5, #12]
    f51e:	rsb	r2, sl, r7
    f522:	add.w	r0, r3, sl
    f526:	str	r7, [r5, #20]
    f528:	str	r3, [r5, #16]
    f52a:	str	r0, [r5, #0]
    f52c:	str	r2, [r5, #8]
    f52e:	mov	r7, r4
    f530:	mov	sl, r4
    f532:	mov	r2, sl
    f534:	mov	r1, r9
    f536:	bl	bb7c <memmove>
    f53a:	ldr.w	r2, [r8, #8]
    f53e:	ldr	r3, [r5, #8]
    f540:	ldr	r0, [r5, #0]
    f542:	subs	r3, r3, r7
    f544:	add	r0, sl
    f546:	subs	r4, r2, r4
    f548:	str	r3, [r5, #8]
    f54a:	str	r0, [r5, #0]
    f54c:	str.w	r4, [r8, #8]
    f550:	cbz	r4, f598 <__ssprint_r+0xf4>
    f552:	ldr.w	r9, [r6]
    f556:	ldr	r4, [r6, #4]
    f558:	adds	r6, #8
    f55a:	b.n	f4c2 <__ssprint_r+0x1e>
    f55c:	mov	r7, r4
    f55e:	mov	sl, r4
    f560:	b.n	f532 <__ssprint_r+0x8e>
    f562:	mov	r0, fp
    f564:	bl	bce8 <_realloc_r>
    f568:	mov	r3, r0
    f56a:	cmp	r0, #0
    f56c:	bne.n	f51e <__ssprint_r+0x7a>
    f56e:	ldr	r1, [r5, #16]
    f570:	mov	r0, fp
    f572:	bl	ebe8 <_free_r>
    f576:	movs	r3, #12
    f578:	str.w	r3, [fp]
    f57c:	ldrh	r3, [r5, #12]
    f57e:	movs	r2, #0
    f580:	orr.w	r3, r3, #64	; 0x40
    f584:	mov.w	r0, #4294967295
    f588:	strh	r3, [r5, #12]
    f58a:	str.w	r2, [r8, #8]
    f58e:	str.w	r2, [r8, #4]
    f592:	add	sp, #12
    f594:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f598:	movs	r0, #0
    f59a:	str.w	r0, [r8, #4]
    f59e:	add	sp, #12
    f5a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000f5a4 <_vasnprintf_r>:
    f5a4:	push	{r4, r5, r6, lr}
    f5a6:	mov	r5, r2
    f5a8:	sub	sp, #104	; 0x68
    f5aa:	ldr	r4, [r2, #0]
    f5ac:	cbz	r1, f5b2 <_vasnprintf_r+0xe>
    f5ae:	cmp	r4, #0
    f5b0:	bne.n	f5e8 <_vasnprintf_r+0x44>
    f5b2:	movs	r4, #0
    f5b4:	mov.w	r2, #648	; 0x288
    f5b8:	strh.w	r2, [sp, #12]
    f5bc:	str	r4, [sp, #0]
    f5be:	str	r4, [sp, #16]
    f5c0:	mov	r2, r3
    f5c2:	movw	r6, #65535	; 0xffff
    f5c6:	ldr	r3, [sp, #120]	; 0x78
    f5c8:	str	r4, [sp, #8]
    f5ca:	mov	r1, sp
    f5cc:	str	r4, [sp, #20]
    f5ce:	strh.w	r6, [sp, #14]
    f5d2:	bl	c360 <_svfprintf_r>
    f5d6:	cmp	r0, #0
    f5d8:	blt.n	f5fe <_vasnprintf_r+0x5a>
    f5da:	ldr	r3, [sp, #0]
    f5dc:	str	r0, [r5, #0]
    f5de:	movs	r2, #0
    f5e0:	strb	r2, [r3, #0]
    f5e2:	ldr	r0, [sp, #16]
    f5e4:	add	sp, #104	; 0x68
    f5e6:	pop	{r4, r5, r6, pc}
    f5e8:	mov.w	r2, #1544	; 0x608
    f5ec:	str	r1, [sp, #0]
    f5ee:	str	r1, [sp, #16]
    f5f0:	strh.w	r2, [sp, #12]
    f5f4:	bge.n	f5c0 <_vasnprintf_r+0x1c>
    f5f6:	movs	r3, #139	; 0x8b
    f5f8:	str	r3, [r0, #0]
    f5fa:	movs	r0, #0
    f5fc:	b.n	f5e4 <_vasnprintf_r+0x40>
    f5fe:	movs	r0, #0
    f600:	b.n	f5e4 <_vasnprintf_r+0x40>
    f602:	nop

0000f604 <_calloc_r>:
    f604:	push	{r4, lr}
    f606:	mul.w	r1, r2, r1
    f60a:	bl	b5e0 <_malloc_r>
    f60e:	mov	r4, r0
    f610:	cbz	r0, f64a <_calloc_r+0x46>
    f612:	ldr.w	r2, [r0, #-4]
    f616:	bic.w	r2, r2, #3
    f61a:	subs	r2, #4
    f61c:	cmp	r2, #36	; 0x24
    f61e:	bhi.n	f652 <_calloc_r+0x4e>
    f620:	cmp	r2, #19
    f622:	bls.n	f64e <_calloc_r+0x4a>
    f624:	movs	r3, #0
    f626:	cmp	r2, #27
    f628:	str	r3, [r0, #0]
    f62a:	str	r3, [r0, #4]
    f62c:	bls.n	f65c <_calloc_r+0x58>
    f62e:	cmp	r2, #36	; 0x24
    f630:	str	r3, [r0, #8]
    f632:	str	r3, [r0, #12]
    f634:	iteee	ne
    f636:	addne.w	r2, r0, #16
    f63a:	streq	r3, [r0, #16]
    f63c:	streq	r3, [r0, #20]
    f63e:	addeq.w	r2, r0, #24
    f642:	movs	r3, #0
    f644:	str	r3, [r2, #0]
    f646:	str	r3, [r2, #4]
    f648:	str	r3, [r2, #8]
    f64a:	mov	r0, r4
    f64c:	pop	{r4, pc}
    f64e:	mov	r2, r0
    f650:	b.n	f642 <_calloc_r+0x3e>
    f652:	movs	r1, #0
    f654:	bl	bc44 <memset>
    f658:	mov	r0, r4
    f65a:	pop	{r4, pc}
    f65c:	add.w	r2, r0, #8
    f660:	b.n	f642 <_calloc_r+0x3e>
    f662:	nop

0000f664 <__aeabi_d2iz>:
    f664:	mov.w	r2, r1, lsl #1
    f668:	adds.w	r2, r2, #2097152	; 0x200000
    f66c:	bcs.n	f69a <__aeabi_d2iz+0x36>
    f66e:	bpl.n	f694 <__aeabi_d2iz+0x30>
    f670:	mvn.w	r3, #992	; 0x3e0
    f674:	subs.w	r2, r3, r2, asr #21
    f678:	bls.n	f6a0 <__aeabi_d2iz+0x3c>
    f67a:	mov.w	r3, r1, lsl #11
    f67e:	orr.w	r3, r3, #2147483648	; 0x80000000
    f682:	orr.w	r3, r3, r0, lsr #21
    f686:	tst.w	r1, #2147483648	; 0x80000000
    f68a:	lsr.w	r0, r3, r2
    f68e:	it	ne
    f690:	negne	r0, r0
    f692:	bx	lr
    f694:	mov.w	r0, #0
    f698:	bx	lr
    f69a:	orrs.w	r0, r0, r1, lsl #12
    f69e:	bne.n	f6ac <__aeabi_d2iz+0x48>
    f6a0:	ands.w	r0, r1, #2147483648	; 0x80000000
    f6a4:	it	eq
    f6a6:	mvneq.w	r0, #2147483648	; 0x80000000
    f6aa:	bx	lr
    f6ac:	mov.w	r0, #0
    f6b0:	bx	lr
    f6b2:	nop
    f6b4:	movs	r0, r0
	...

0000f6b8 <___init_veneer>:
    f6b8:	ldr.w	pc, [pc]	; f6bc <___init_veneer+0x4>
    f6bc:	.word	0x60001a59

0000f6c0 <___reboot_Teensyduino__veneer>:
    f6c0:	ldr.w	pc, [pc]	; f6c4 <___reboot_Teensyduino__veneer+0x4>
    f6c4:	.word	0x6000173d
	...

Disassembly of section .fini:

0000f6d0 <_fini>:
    f6d0:	push	{r3, r4, r5, r6, r7, lr}
    f6d2:	nop

Disassembly of section .text.csf:

60012d80 <_heap_end+0x3fd92d80>:
60012d80:	.word	0xffffffff
60012d84:	.word	0xffffffff
60012d88:	.word	0xffffffff
60012d8c:	.word	0xffffffff
60012d90:	.word	0xffffffff
60012d94:	.word	0xffffffff
60012d98:	.word	0xffffffff
60012d9c:	.word	0xffffffff
60012da0:	.word	0xffffffff
60012da4:	.word	0xffffffff
60012da8:	.word	0xffffffff
60012dac:	.word	0xffffffff
60012db0:	.word	0xffffffff
60012db4:	.word	0xffffffff
60012db8:	.word	0xffffffff
60012dbc:	.word	0xffffffff
60012dc0:	.word	0xffffffff
60012dc4:	.word	0xffffffff
60012dc8:	.word	0xffffffff
60012dcc:	.word	0xffffffff
60012dd0:	.word	0xffffffff
60012dd4:	.word	0xffffffff
60012dd8:	.word	0xffffffff
60012ddc:	.word	0xffffffff
60012de0:	.word	0xffffffff
60012de4:	.word	0xffffffff
60012de8:	.word	0xffffffff
60012dec:	.word	0xffffffff
60012df0:	.word	0xffffffff
60012df4:	.word	0xffffffff
60012df8:	.word	0xffffffff
60012dfc:	.word	0xffffffff
60012e00:	.word	0xffffffff
60012e04:	.word	0xffffffff
60012e08:	.word	0xffffffff
60012e0c:	.word	0xffffffff
60012e10:	.word	0xffffffff
60012e14:	.word	0xffffffff
60012e18:	.word	0xffffffff
60012e1c:	.word	0xffffffff
60012e20:	.word	0xffffffff
60012e24:	.word	0xffffffff
60012e28:	.word	0xffffffff
60012e2c:	.word	0xffffffff
60012e30:	.word	0xffffffff
60012e34:	.word	0xffffffff
60012e38:	.word	0xffffffff
60012e3c:	.word	0xffffffff
60012e40:	.word	0xffffffff
60012e44:	.word	0xffffffff
60012e48:	.word	0xffffffff
60012e4c:	.word	0xffffffff
60012e50:	.word	0xffffffff
60012e54:	.word	0xffffffff
60012e58:	.word	0xffffffff
60012e5c:	.word	0xffffffff
60012e60:	.word	0xffffffff
60012e64:	.word	0xffffffff
60012e68:	.word	0xffffffff
60012e6c:	.word	0xffffffff
60012e70:	.word	0xffffffff
60012e74:	.word	0xffffffff
60012e78:	.word	0xffffffff
60012e7c:	.word	0xffffffff
60012e80:	.word	0xffffffff
60012e84:	.word	0xffffffff
60012e88:	.word	0xffffffff
60012e8c:	.word	0xffffffff
60012e90:	.word	0xffffffff
60012e94:	.word	0xffffffff
60012e98:	.word	0xffffffff
60012e9c:	.word	0xffffffff
60012ea0:	.word	0xffffffff
60012ea4:	.word	0xffffffff
60012ea8:	.word	0xffffffff
60012eac:	.word	0xffffffff
60012eb0:	.word	0xffffffff
60012eb4:	.word	0xffffffff
60012eb8:	.word	0xffffffff
60012ebc:	.word	0xffffffff
60012ec0:	.word	0xffffffff
60012ec4:	.word	0xffffffff
60012ec8:	.word	0xffffffff
60012ecc:	.word	0xffffffff
60012ed0:	.word	0xffffffff
60012ed4:	.word	0xffffffff
60012ed8:	.word	0xffffffff
60012edc:	.word	0xffffffff
60012ee0:	.word	0xffffffff
60012ee4:	.word	0xffffffff
60012ee8:	.word	0xffffffff
60012eec:	.word	0xffffffff
60012ef0:	.word	0xffffffff
60012ef4:	.word	0xffffffff
60012ef8:	.word	0xffffffff
60012efc:	.word	0xffffffff
60012f00:	.word	0xffffffff
60012f04:	.word	0xffffffff
60012f08:	.word	0xffffffff
60012f0c:	.word	0xffffffff
60012f10:	.word	0xffffffff
60012f14:	.word	0xffffffff
60012f18:	.word	0xffffffff
60012f1c:	.word	0xffffffff
60012f20:	.word	0xffffffff
60012f24:	.word	0xffffffff
60012f28:	.word	0xffffffff
60012f2c:	.word	0xffffffff
60012f30:	.word	0xffffffff
60012f34:	.word	0xffffffff
60012f38:	.word	0xffffffff
60012f3c:	.word	0xffffffff
60012f40:	.word	0xffffffff
60012f44:	.word	0xffffffff
60012f48:	.word	0xffffffff
60012f4c:	.word	0xffffffff
60012f50:	.word	0xffffffff
60012f54:	.word	0xffffffff
60012f58:	.word	0xffffffff
60012f5c:	.word	0xffffffff
60012f60:	.word	0xffffffff
60012f64:	.word	0xffffffff
60012f68:	.word	0xffffffff
60012f6c:	.word	0xffffffff
60012f70:	.word	0xffffffff
60012f74:	.word	0xffffffff
60012f78:	.word	0xffffffff
60012f7c:	.word	0xffffffff
60012f80:	.word	0xffffffff
60012f84:	.word	0xffffffff
60012f88:	.word	0xffffffff
60012f8c:	.word	0xffffffff
60012f90:	.word	0xffffffff
60012f94:	.word	0xffffffff
60012f98:	.word	0xffffffff
60012f9c:	.word	0xffffffff
60012fa0:	.word	0xffffffff
60012fa4:	.word	0xffffffff
60012fa8:	.word	0xffffffff
60012fac:	.word	0xffffffff
60012fb0:	.word	0xffffffff
60012fb4:	.word	0xffffffff
60012fb8:	.word	0xffffffff
60012fbc:	.word	0xffffffff
60012fc0:	.word	0xffffffff
60012fc4:	.word	0xffffffff
60012fc8:	.word	0xffffffff
60012fcc:	.word	0xffffffff
60012fd0:	.word	0xffffffff
60012fd4:	.word	0xffffffff
60012fd8:	.word	0xffffffff
60012fdc:	.word	0xffffffff
60012fe0:	.word	0xffffffff
60012fe4:	.word	0xffffffff
60012fe8:	.word	0xffffffff
60012fec:	.word	0xffffffff
60012ff0:	.word	0xffffffff
60012ff4:	.word	0xffffffff
60012ff8:	.word	0xffffffff
60012ffc:	.word	0xffffffff

60013000 <hab_csf>:
	...
