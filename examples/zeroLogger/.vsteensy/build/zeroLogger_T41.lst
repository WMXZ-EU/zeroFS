
.vsteensy/build/zeroLogger_T41.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.headers	00000000 .text.headers
60001400 l    d  .text.code	00000000 .text.code
60001e70 l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
0000f490 l    d  .fini	00000000 .fini
0000f494 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .data	00000000 .data
20001ec0 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
70000000 l    d  .bss.extram	00000000 .bss.extram
60013304 l    d  .text.csf	00000000 .text.csf
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
60001400 l     F .text.code	00000016 memory_copy
60001418 l     F .text.code	00000010 memory_clear
00000000 l    df *ABS*	00000000 usb.c
00008948 l     F .text.itcm	00000090 schedule_transfer
000089d8 l     F .text.itcm	00000036 run_callbacks
00008a10 l     F .text.itcm	000000a0 endpoint0_transmit.constprop.1
2000c648 l     O .bss	00000004 endpointN_notify_mask
2000f1c8 l     O .bss	00000001 sof_usage
2000c644 l     O .bss	00000004 endpoint0_notify_mask
2000f1d0 l     O .bss	00000001 usb_reboot_timer
20004580 l     O .bss	00000008 endpoint0_setupdata
2000c6b0 l     O .bss	00000008 reply_buffer
2000c63c l     O .bss	00000008 endpoint0_buffer
00000000 l    df *ABS*	00000000 tempmon.c
2000c708 l     O .bss	00000004 s_hotTemp
2000c70c l     O .bss	00000004 s_hot_ROOM
2000c710 l     O .bss	00000004 s_roomC_hotC
2000c704 l     O .bss	00000004 s_hotCount
00000000 l    df *ABS*	00000000 analog.c
2000f1c2 l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.19/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.19/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 __do_global_dtors_aux
20004588 l       .bss	00000000 completed.8605
00000044 l     F .text.itcm	00000000 frame_dummy
2000458c l       .bss	00000000 object.8610
60001e68 l     O .text.code	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 zeroLogger.cpp
0000007c l     F .text.itcm	00000084 MTPD::write(char const*, int) [clone .part.19]
00006404 l     F .text.itcm	00000034 _GLOBAL__sub_I_zFS
20000414 l     O .data	00000016 supported_op
20000404 l     O .data	00000010 propertyList
20001954 l     O .data	00000002 newFile()::old
20001956 l     O .data	00000002 newHour(int)::old
20001952 l     O .data	00000002 newDay(int)::old
00000000 l    df *ABS*	00000000 usb_desc.c
60001f9c l     O .text.progmem	0000000a qualifier_descriptor
20001920 l     O .data	00000012 device_descriptor
00000000 l    df *ABS*	00000000 serialEvent.cpp
00000000 l    df *ABS*	00000000 Time.cpp
000065e0 l     F .text.itcm	00000018 refreshCache(long) [clone .part.0]
200045d0 l     O .bss	00000004 cacheTime
200045c0 l     O .bss	00000007 tm
200045cc l     O .bss	00000004 sysTime
2000f1be l     O .bss	00000001 Status
200045a8 l     O .bss	00000004 prevMillis
20001398 l     O .data	00000004 syncInterval
2000062c l     O .data	0000000c monthDays
200045bc l     O .bss	00000004 nextSyncTime
00000000 l    df *ABS*	00000000 zeroFS.cpp
00000000 l    df *ABS*	00000000 diskio.cpp
00000000 l    df *ABS*	00000000 sd_sdhc.cpp
00006da0 l     F .text.itcm	000000b4 setSdclk(unsigned long)
00006ea4 l     F .text.itcm	0000005c sd_CMD(unsigned long, unsigned long)
00006f00 l     F .text.itcm	00000020 sd_ACMD(unsigned long, unsigned long, unsigned long)
00006f20 l     F .text.itcm	00000040 sd_CMD12_StopTransferWaitForBusy()
200045c8 l     O .bss	00000004 dmaDone
200045ac l     O .bss	00000010 sdCardDesc
00000000 l    df *ABS*	00000000 sd_spi.cpp
000075b8 l     F .text.itcm	00000050 sd_chipSelect(unsigned short) [clone .part.0]
00007608 l     F .text.itcm	00000058 spi_transfer(void const*, void*, unsigned int) [clone .part.4]
2000042c l     O .data	00000200 crctab
00000000 l    df *ABS*	00000000 sd_msc.cpp
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
000081e8 l     F .text.itcm	0000006c rx_queue_transfer
00008254 l     F .text.itcm	000000b4 rx_event
00008308 l     F .text.itcm	00000098 usb_serial_flush_callback
000083a0 l     F .text.itcm	00000194 usb_serial_write.part.1
2000c6cc l     O .bss	00000010 rx_index
2000f1ba l     O .bss	00000002 tx_packet_size
2000f1cc l     O .bss	00000001 tx_noautoflush
2000f1ca l     O .bss	00000001 tx_head
20004300 l     O .bss	00000100 rx_transfer
2000f1c6 l     O .bss	00000001 rx_tail
2000c6dc l     O .bss	00000009 rx_list
2000f1b4 l     O .bss	00000002 rx_packet_size
20200000 l     O .bss.dma	00001000 rx_buffer
20201000 l     O .bss.dma	00002000 txbuffer
2000c6bc l     O .bss	00000010 rx_count
2000c6b8 l     O .bss	00000004 rx_available
2000f1c4 l     O .bss	00000001 rx_head
2000f1c9 l     O .bss	00000001 transmit_previous_timeout
2000f1b8 l     O .bss	00000002 tx_available
20004480 l     O .bss	00000080 tx_transfer
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 sm_pool.c
00000000 l    df *ABS*	00000000 digital.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 usb_mtp.c
00009db0 l     F .text.itcm	00000010 txEvent_event
00009dc0 l     F .text.itcm	00000044 rx_event
00009e04 l     F .text.itcm	00000068 rx_queue_transfer
2000f1bc l     O .bss	00000002 tx_packet_size
2000f1cb l     O .bss	00000001 tx_head
20004400 l     O .bss	00000080 rx_transfer
2000c6f0 l     O .bss	00000014 rx_list_transfer_len
2000f1c7 l     O .bss	00000001 rx_tail
2000c6e8 l     O .bss	00000005 rx_list
2000f1b6 l     O .bss	00000002 rx_packet_size
20203000 l     O .bss.dma	00000800 rx_buffer
20203800 l     O .bss.dma	00000800 txbuffer
2000f1c5 l     O .bss	00000001 rx_head
20004500 l     O .bss	00000080 tx_transfer
00000000 l    df *ABS*	00000000 yield.cpp
2000f1c1 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 Stream.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 efgcvt.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlcat.c
00000000 l    df *ABS*	00000000 strlcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 vfprintf.c
20000e88 l     O .data	00000010 zeroes.7258
20000764 l     O .data	00000010 blanks.7257
00000000 l    df *ABS*	00000000 vdprintf.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 dtoa.c
0000d8b0 l     F .text.itcm	00000128 quorem
00000000 l    df *ABS*	00000000 ecvtbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 mprec.c
20000ae4 l     O .data	0000000c p05.6087
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 vasnprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 impure.c
20000e98 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 __fini_array_end
00000000 l       *UND*	00000000 __bss_start__
60014000 l       .text.csf	00000000 __text_csf_end
00000000 l       *UND*	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 __fini_array_start
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __libc_fini
00000000 l       *UND*	00000000 __stack
00000000 l       *UND*	00000000 makeTime(tmElements_t const&)
60001e28 l     F .text.code	00000008 ____libc_init_array_veneer
60001e30 l     F .text.code	00000008 __main_veneer
60001e38 l     F .text.code	00000008 __sm_set_pool_veneer
60001e40 l     F .text.code	00000008 __usb_init_serialnumber_veneer
60001e48 l     F .text.code	00000008 __memset_veneer
60001e50 l     F .text.code	00000008 __delay_veneer
60001e58 l     F .text.code	00000008 __set_arm_clock_veneer
60001e60 l     F .text.code	00000008 __pwm_init_veneer
0000f478 l     F .text.itcm	00000008 ___reboot_Teensyduino__veneer
0000f480 l     F .text.itcm	00000008 ___init_veneer
0000afc4 g     F .text.itcm	0000002c .hidden __aeabi_dcmpun
00008770 g     F .text.itcm	0000000c usb_serial_available
00006780 g     F .text.itcm	0000002c die(char const*, DRESULT)
0000af88 g     F .text.itcm	00000012 .hidden __aeabi_dcmple
0000bee0 g     F .text.itcm	000000ba strcpy
0000aec4 g     F .text.itcm	0000007a .hidden __cmpdf2
6000179c g     F .text.code	00000002 startup_default_late_hook
0000a124  w    F .text.itcm	000000f0 yield
2000c728 g     O .bss	00000004 t3
00007bc8 g     F .text.itcm	00000040 sd_readStop()
2000c734 g     O .bss	00000004 usb_timer1_callback
0000aec4 g     F .text.itcm	0000007a .hidden __eqdf2
60001ea8 g     O .text.progmem	00000018 usb_string_manufacturer_name_default
60001884 g     F .text.code	000003bc configure_external_ram
0000aa34 g     F .text.itcm	0000005a .hidden __floatdidf
0000a370 g     F .text.itcm	00000020 Print::println()
0000e80c g     F .text.itcm	00000100 fcvtbuf
00006c54 g     F .text.itcm	0000004c zeroFS_class::GetSize(unsigned long)
0000ba8c g     F .text.itcm	00000002 __malloc_unlock
00007674 g     F .text.itcm	00000120 sd_cardCommand(unsigned char, unsigned long)
200045a4 g     O .bss	00000004 SerNum
60001dc0 g     F .text.code	00000058 analog_init
0000d804 g     F .text.itcm	0000004a _vdprintf_r
20001384 g     O .data	00000004 F_CPU_ACTUAL
000080b0 g     F .text.itcm	00000004 MSC_disk_write
0000b924 g     F .text.itcm	000000c6 memmove
0000ec40 g     F .text.itcm	0000004c _Balloc
0000f49c g       .ARM.exidx	00000000 __exidx_end
00007b0c g     F .text.itcm	0000004c sd_readBlock(unsigned long, unsigned char*)
00007d8c g     F .text.itcm	0000006c sd_writeStart(unsigned long, unsigned long)
2000f1bf g     O .bss	00000001 EventResponder::runningFromYield
2000c72c g     O .bss	00000004 tmx
00009a18 g     F .text.itcm	00000060 tempmonGetTemp
0000aeb4 g     F .text.itcm	0000008a .hidden __gtdf2
0000b32c g     F .text.itcm	0000000c __errno
60001000 g     O .text.headers	00000020 ImageVectorTable
00007c54 g     F .text.itcm	000000b8 sd_writeData(unsigned char, unsigned char const*)
200045dc g     O .bss	00000004 EventResponder::firstInterrupt
0000924c g     F .text.itcm	00000028 usb_transfer_status
00009984 g     F .text.itcm	00000090 sm_set_pool
0000a294  w    F .text.itcm	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
20000774 g     O .data	00000370 digital_pin_to_info_PGM
2000f240 g     O .bss	00000004 errno
0000f498 g       .text.itcm	00000000 _etext
20001ec0 g       .bss	00000000 _sbss
0000af50 g     F .text.itcm	00000010 .hidden __aeabi_cdcmple
60001fa8 g       *ABS*	00000000 _stextload
000061dc g     F .text.itcm	00000228 loop
00009104 g     F .text.itcm	00000064 usb_config_rx
00001524  w    F .text.itcm	0000060c MTPD::GetStorageInfo(unsigned long)
000067ac g     F .text.itcm	000000d4 zeroFS_class::Init(unsigned char, unsigned char, char const*)
0000a2e4 g     F .text.itcm	00000028 Stream::peekNextDigit()
200045d8 g     O .bss	00000004 EventResponder::lastInterrupt
000080b4 g     F .text.itcm	00000134 memcpy
0000af40 g     F .text.itcm	00000020 .hidden __aeabi_cdrcmple
0000c120 g     F .text.itcm	000016e4 _svfprintf_r
0000a9c4 g     F .text.itcm	00000022 .hidden __floatsidf
2000c720 g     O .bss	00000004 systick_millis_count
0000aebc g     F .text.itcm	00000082 .hidden __ltdf2
00009fd0 g     F .text.itcm	00000030 usb_mtp_available
00006cc4 g     F .text.itcm	00000032 disk_initialize
00004ee8  w    F .text.itcm	000012f4 MTPD::loop()
0000aff0 g     F .text.itcm	00000000 .hidden __aeabi_uldivmod
00007320 g     F .text.itcm	00000004 SDHC_disk_initialize
2000f1ce g     O .bss	00000001 usb_configuration
60000000 g     O .text.headers	00000200 FlexSPI_NOR_Config
00009934 g     F .text.itcm	00000050 sm_align_pool
00006ca0 g     F .text.itcm	00000024 zeroFS_class::Read(unsigned long, char*, unsigned long)
60001ea8  w    O .text.progmem	00000018 usb_string_manufacturer_name
00007df8 g     F .text.itcm	000000b8 sd_writeStop()
60001e70 g     O .text.progmem	00000008 usb_string_mtp
20004604  w    O .bss	00000004 MTPD::write(char const*, int)::dst
20000328 g     O .data	000000c8 __mprec_tens
60001654 g     F .text.code	000000ec usb_init
2000c718 g     O .bss	00000004 sessionID_
20004638 g     O .bss	00000004 __malloc_top_pad
2000f22c g     O .bss	00000004 systick_safe_read
aaaaaaaf g       *ABS*	00000000 _flexram_bank_config
0000a9a4 g     F .text.itcm	0000001e .hidden __aeabi_ui2d
0000eb78 g     F .text.itcm	0000001c _localeconv_r
0000edbc g     F .text.itcm	00000012 __i2b
20000000 g       .data	00000000 _sdata
00009e6c g     F .text.itcm	000000b0 usb_mtp_configure
60001f30 g     O .text.progmem	00000069 usb_config_descriptor_480
0000b020 g     F .text.itcm	000002e2 .hidden __udivmoddi4
00004404  w    F .text.itcm	00000ae4 MTPD::getObjectPropValue(unsigned long, unsigned long)
0000a720 g     F .text.itcm	00000000 .hidden __aeabi_drsub
0000be70 g     F .text.itcm	00000024 _sbrk_r
60001794 g     F .text.code	00000002 startup_default_early_hook
60001428 g     F .text.code	0000022c ResetHandler
000087f0 g     F .text.itcm	00000020 usb_serial_getchar
2000f220 g     O .bss	00000008 usb_cdc_line_coding
200012c0 g     O .data	000000c0 Dev
00006880 g     F .text.itcm	000001d0 zeroFS_class::Create(HDR_TYPE, char const*)
200045e0 g     O .bss	00000004 EventResponder::lastYield
00006764  w    F .text.itcm	0000001c Print::write(char const*)
00006d80 g     F .text.itcm	00000020 disk_ioctl
0000af74 g     F .text.itcm	00000012 .hidden __aeabi_dcmplt
2000f230 g     O .bss	00000010 extmem_smalloc_pool
2000f1aa g     O .bss	00000002 m_sd_status
20004630 g     O .bss	00000004 __malloc_max_sbrked_mem
00009a78 g     F .text.itcm	00000080 pinMode
0000a9e8 g     F .text.itcm	0000003a .hidden __extendsfdf2
0000ace4 g     F .text.itcm	000001d0 .hidden __aeabi_ddiv
0000a72c g     F .text.itcm	00000276 .hidden __adddf3
60013400 g     O .text.csf	00000c00 hab_csf
00000270  w    F .text.itcm	00000250 MTPD::writestring(char const*)
20280000 g       .text.csf	00000000 _heap_end
2000f1a8 g     O .bss	00000002 m_sd_errorCode
0000f494 g       .ARM.exidx	00000000 __exidx_start
70000000 g       .bss.extram	00000000 _extram_end
0000aa90 g     F .text.itcm	00000254 .hidden __aeabi_dmul
200045d4 g     O .bss	00000004 EventResponder::firstYield
0000789c g     F .text.itcm	0000003c sd_readRegister(unsigned char, void*)
0000ba90 g     F .text.itcm	000003de _realloc_r
0000b338 g     F .text.itcm	00000050 __libc_init_array
000095e4 g     F .text.itcm	00000350 dtostrf
00007ef0 g     F .text.itcm	000000a8 spi_begin(unsigned long, unsigned char, unsigned char)
00008098 g     F .text.itcm	0000000e SPI_disk_initialize()
2000c650 g     O .bss	00000054 mFS
20000300 g     O .data	00000028 __mprec_bigtens
0000a27c  w    F .text.itcm	00000004 usb_serial_class::clear()
0000a9a4 g     F .text.itcm	0000001e .hidden __floatunsidf
2000f1ae g     O .bss	00000002 open1
00009534 g     F .text.itcm	00000030 _sbrk
60011444 g       *ABS*	00000000 _sdataload
0000f050 g     F .text.itcm	00000042 __mcmp
2000139c g     O .data	00000004 __brkval
2000f1cd g     O .bss	00000001 usb_cdc_line_rtsdtr
60001e18 g     F .text.code	00000000 _init
00006a50 g     F .text.itcm	00000088 zeroFS_class::Close(HDR_TYPE)
00008534 g     F .text.itcm	00000002 usb_serial_reset
2000c738 g     O .bss	00002a70 zFS
00006e54 g     F .text.itcm	00000050 sd_isr()
000066e4 g     F .text.itcm	00000020 day()
60001ec4 g     O .text.progmem	00000069 usb_config_descriptor_12
00006f64 g     F .text.itcm	000003bc sd_CardInit()
2000f280 g       .bss	00000000 _ebss
000004c0  w    F .text.itcm	00001064 MTPD::WriteDescriptor()
20001934 g     O .data	00000004 propertyListNum
00006b88 g     F .text.itcm	0000004c zeroFS_class::Next()
00006bd4 g     F .text.itcm	00000080 zeroFS_class::Info(unsigned long, char*, unsigned long*, unsigned long*)
0000ed20 g     F .text.itcm	00000040 __hi0bits
0000f424 g     F .text.itcm	0000004e .hidden __fixdfsi
20204080 g       .bss.dma	00000000 _heap_start
20001958 g     O .data	00000002 m_chipSelectPin
00000002 g       *ABS*	00000000 _itcm_block_count
2000f1e0 g     O .bss	00000020 endpoint0_transfer_data
00006724 g     F .text.itcm	00000024 year()
00009af8 g     F .text.itcm	000002b8 pwm_init
0000a72c g     F .text.itcm	00000276 .hidden __aeabi_dadd
0000aebc g     F .text.itcm	00000082 .hidden __ledf2
60001c40 g     F .text.code	00000064 usb_pll_start
0000ef00 g     F .text.itcm	000000a0 __pow5mult
0000aa24 g     F .text.itcm	0000006a .hidden __aeabi_ul2d
00007444 g     F .text.itcm	00000168 sd_CardWriteBlocks(void const*, unsigned long, unsigned long)
00000000  w      *UND*	00000000 __deregister_frame_info
2000f200 g     O .bss	00000020 endpoint0_transfer_ack
2000f228 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
00009200 g     F .text.itcm	00000028 usb_transmit
00000100  w    F .text.itcm	00000024 Print::println(char const*)
0000a25c g     F .text.itcm	00000020 systick_isr
2000f1b0 g     O .bss	00000002 open2
2000c6a4 g     O .bss	00000004 mode
20001388 g     O .data	00000010 Serial
00007324 g     F .text.itcm	00000114 sd_CardReadBlocks(void*, unsigned long, unsigned long)
0000a29c  w    F .text.itcm	00000006 usb_serial_class::write(unsigned char)
60001794  w    F .text.code	00000002 startup_early_hook
0000afb0 g     F .text.itcm	00000012 .hidden __aeabi_dcmpgt
0000872c g     F .text.itcm	00000044 usb_serial_peekchar
00007ff4 g     F .text.itcm	000000a4 sd_init()
0000eba0 g     F .text.itcm	00000000 memchr
0000a45c g     F .text.itcm	000002c4 set_arm_clock
2000c71c g     O .bss	00000004 systick_cycle_count
2000193c g     O .data	00000016 usb_string_serial_number_default
0000e9a8 g     F .text.itcm	000001d0 _free_r
0000af9c g     F .text.itcm	00000012 .hidden __aeabi_dcmpge
0000a28c  w    F .text.itcm	00000004 usb_serial_class::flush()
0000a728 g     F .text.itcm	0000027a .hidden __aeabi_dsub
20001914 g     O .data	00000004 __malloc_sbrk_base
0000a284  w    F .text.itcm	00000004 usb_serial_class::read()
00007b58 g     F .text.itcm	00000024 sd_readData2(unsigned char*)
0000aa24 g     F .text.itcm	0000006a .hidden __floatundidf
0000efa0 g     F .text.itcm	000000ae __lshift
000091d0 g     F .text.itcm	0000002e usb_prepare_transfer
000093a4 g     F .text.itcm	00000190 unused_interrupt_vector
0000f264 g     F .text.itcm	00000100 __ssprint_r
60001ca4 g     F .text.code	0000011c tempmon_init
2000c730 g     O .bss	00000004 usb_timer0_callback
0000f364 g     F .text.itcm	0000005e _vasnprintf_r
0000a458  w    F .text.itcm	00000002 serialEvent()
0000bff0 g     F .text.itcm	0000002c strlcpy
00006748 g     F .text.itcm	0000001c setSyncProvider(long (*)())
0000877c g     F .text.itcm	00000074 usb_serial_flush_input
2000f1ac g     O .bss	00000002 m_sd_type
0000edd0 g     F .text.itcm	00000130 __multiply
00008810 g     F .text.itcm	0000002c usb_serial_putchar
00000025 g       *ABS*	00000000 _teensy_model_identifier
20004608 g     O .bss	00000028 __malloc_current_mallinfo
0000f1a8 g     F .text.itcm	000000ba __d2b
200045e4 g     O .bss	00000020 HardwareSerial::s_serials_with_serial_events
60001740 g     F .text.code	00000054 _reboot_Teensyduino_
60001798 g     F .text.code	00000002 startup_default_middle_hook
0000a000 g     F .text.itcm	000000cc usb_mtp_send
00008ab0 g     F .text.itcm	00000654 usb_isr
00007438 g     F .text.itcm	0000000a SDHC_disk_read
0000a9c4 g     F .text.itcm	00000022 .hidden __aeabi_i2d
0000a368 g     F .text.itcm	00000006 Stream::parseInt()
20000638  w    O .data	00000028 vtable for usb_serial_class
0000a2b4 g     F .text.itcm	00000030 Stream::timedPeek()
2000c714 g     O .bss	00000004 scale_cpu_cycles_to_microseconds
0000b304  w    F .text.itcm	00000002 .hidden __aeabi_ldiv0
000026b4  w    F .text.itcm	00001d50 MTPD::getObjectPropDesc(unsigned long, unsigned long)
0000ace4 g     F .text.itcm	000001d0 .hidden __divdf3
2000150c g     O .data	00000408 __malloc_av_
0000aa90 g     F .text.itcm	00000254 .hidden __muldf3
000088a4 g     F .text.itcm	000000a4 usb_serial_flush_output
0000ba88 g     F .text.itcm	00000002 __malloc_lock
20001c00 g     O .data	000002c0 _VectorsRam
0000f3c4 g     F .text.itcm	0000005e _calloc_r
2000c64c g     O .bss	00000004 getTimePtr
2000195e g     O .data	00000001 yield_active_check_flags
2000f1cf g     O .bss	00000001 usb_high_speed
2000463c g     O .bss	00008000 data
0000b9ec g     F .text.itcm	0000009a memset
0000a2a4 g     F .text.itcm	00000010 main
20004634 g     O .bss	00000004 __malloc_max_total_mem
20204000 g     O .bss.dma	00000069 usb_descriptor_buffer
000080ac g     F .text.itcm	00000004 MSC_disk_read
000065f8 g     F .text.itcm	0000008c now()
0000bf9c g     F .text.itcm	00000052 strlcat
0000a0cc g     F .text.itcm	00000058 usb_init_serialnumber
60001e70 g       .text.code	00000000 __init_array_end
0000d9d8 g     F .text.itcm	00000e34 _dtoa_r
0000b388 g     F .text.itcm	00000570 _malloc_r
2000f1c0 g     O .bss	00000001 HardwareSerial::s_count_serials_with_serial_events
0000d868 g     F .text.itcm	0000001a __ascii_wctomb
00007d0c g     F .text.itcm	00000080 sd_writeData2(unsigned char const*)
0000aa34 g     F .text.itcm	0000005a .hidden __aeabi_l2d
00000031 g       *ABS*	00000000 __rtc_localtime
00009340 g     F .text.itcm	00000064 micros
0000e90c g     F .text.itcm	0000009c _malloc_trim_r
60001ec0 g     O .text.progmem	00000004 string0
0000883c g     F .text.itcm	00000018 usb_serial_write
20001938 g     O .data	00000004 tmn
6000179c  w    F .text.code	00000002 startup_late_hook
0000a288  w    F .text.itcm	00000004 usb_serial_class::available()
60001fa6 g     O .text.progmem	00000001 _serialEvent_default
20000000 g     O .data	00000300 endpoint_queue_head
60001e78  w    O .text.progmem	0000002e usb_string_product_name
2000195a g     O .data	00000002 m_enableChipSelect
00009274 g     F .text.itcm	000000cc delay
0000aec4 g     F .text.itcm	0000007a .hidden __nedf2
00007794 g     F .text.itcm	00000108 sd_readData(unsigned char*, unsigned int)
0000f490 g     F .fini	00000000 _fini
60001020 g     O .text.headers	0000000c BootData
00006704 g     F .text.itcm	00000020 month()
0000be94 g     F .text.itcm	0000004c sprintf
0000a3a0 g     F .text.itcm	0000001e Print::printf(char const*, ...)
0000a440 g     F .text.itcm	00000016 Print::print(long)
00009a14 g     F .text.itcm	00000004 Panic_Temp_isr
0000d884 g     F .text.itcm	0000002c _write_r
00007c08 g     F .text.itcm	0000004c SPI_disk_read(unsigned char*, unsigned long, unsigned int)
00009f1c g     F .text.itcm	000000b4 usb_mtp_recv
2000191c g     O .data	00000004 _impure_ptr
2000c724 g     O .bss	00000004 t0
60001e68 g       .text.code	00000000 __preinit_array_end
000066a4 g     F .text.itcm	00000020 minute()
0000b8f8 g     F .text.itcm	0000002a __ascii_mbtowc
00000124 g     F .text.itcm	0000014c setup
20000e10 g     O .data	00000078 usb_descriptor_list
2000195c g     O .data	00000002 ndev
00006b14 g     F .text.itcm	00000074 zeroFS_class::Count(unsigned long)
000078d8 g     F .text.itcm	000001a8 sd_connect()
20070000 g       .text.csf	00000000 _estack
00008854 g     F .text.itcm	00000050 usb_serial_write_buffer_free
2000c6ac g     O .bss	00000004 ncount
0000af60 g     F .text.itcm	00000012 .hidden __aeabi_dcmpeq
00008538 g     F .text.itcm	00000108 usb_serial_configure
0000a390  w    F .text.itcm	0000000e _write
20001ec0 g       .data	00000000 _edata
2000f1c3 g     O .bss	00000001 external_psram_size
00001b30  w    F .text.itcm	00000b84 MTPD::GetObjectInfo(unsigned long)
0000a290  w    F .text.itcm	00000004 usb_serial_class::availableForWrite()
000075ac g     F .text.itcm	0000000a SDHC_disk_write
00009594 g     F .text.itcm	0000004e ultoa
000066c4 g     F .text.itcm	00000020 second()
0000a214 g     F .text.itcm	00000044 EventResponder::runFromInterrupt()
20001918 g     O .data	00000004 __malloc_trim_threshold
0000a280  w    F .text.itcm	00000004 usb_serial_class::peek()
0000b308 g     F .text.itcm	00000024 fcvtf
00006d3c g     F .text.itcm	00000042 disk_write
00007eb0 g     F .text.itcm	00000040 SPI_disk_write(unsigned char const*, unsigned long, unsigned int)
20001ec0 g     O .bss	00002440 mtpd
0000f094 g     F .text.itcm	00000114 __mdiff
00006ad8 g     F .text.itcm	0000003c zeroFS_class::Write(void*, unsigned long)
0000f424 g     F .text.itcm	0000004e .hidden __aeabi_d2iz
00007660 g     F .text.itcm	00000014 SPI_disk_ioctl(unsigned char, unsigned char*)
00006f60 g     F .text.itcm	00000004 SDHC_disk_ioctl
00006684 g     F .text.itcm	00000020 hour()
2000c6a8 g     O .bss	00000004 mtp_txEventCount
20000660 g     O .data	00000101 _ctype_
60001e68 g       .text.code	00000000 __init_array_start
0000b304  w    F .text.itcm	00000002 .hidden __aeabi_idiv0
0000afc4 g     F .text.itcm	0000002c .hidden __unorddf2
20001380 g     O .data	00000004 F_BUS_ACTUAL
0000a30c g     F .text.itcm	0000005a Stream::parseInt(char)
000080a8 g     F .text.itcm	00000004 MSC_disk_initialize
00000000 g       .text.itcm	00000000 _stext
00007f98 g     F .text.itcm	0000005c spi_setup(unsigned long)
0000c040 g     F .text.itcm	000000dc strlen
00006cf8 g     F .text.itcm	00000042 disk_read
00007b7c g     F .text.itcm	0000004c sd_readStart(unsigned long)
0000af50 g     F .text.itcm	00000010 .hidden __aeabi_cdcmpeq
0000aeb4 g     F .text.itcm	0000008a .hidden __gedf2
60001e78 g     O .text.progmem	0000002e usb_string_product_name_default
0000d850 g     F .text.itcm	00000018 vdprintf
60001798  w    F .text.code	00000002 startup_middle_hook
0000a9e8 g     F .text.itcm	0000003a .hidden __aeabi_f2d
2000f1b2 g     O .bss	00000002 open3
600017a0 g     F .text.code	000000e4 configure_cache
00000000  w      *UND*	00000000 _Jv_RegisterClasses
0000a728 g     F .text.itcm	0000027a .hidden __subdf3
60001e68 g       .text.code	00000000 __preinit_array_start
00009228 g     F .text.itcm	00000024 usb_receive
0000ed60 g     F .text.itcm	0000005a __lo0bits
00014000 g       *ABS*	00000000 _flashimagelen
00000000  w      *UND*	00000000 __register_frame_info
00009564 g     F .text.itcm	00000030 rtc_get
70000000 g       .bss.extram	00000000 _extram_start
0000a258 g     F .text.itcm	00000004 pendablesrvreq_isr
200013a0 g     O .data	0000016c __global_locale
00007a80 g     F .text.itcm	0000008c sd_cardSize()
00008640 g     F .text.itcm	000000ec usb_serial_read
00006438 g     F .text.itcm	000001a8 breakTime(long, tmElements_t&)
0000a3c0 g     F .text.itcm	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
00009168 g     F .text.itcm	00000068 usb_config_tx
0000eca0 g     F .text.itcm	00000080 __multadd
0000ec8c g     F .text.itcm	00000012 _Bfree
2000193c  w    O .data	00000016 usb_string_serial_number



Disassembly of section .text.code:

60001400 <memory_copy>:
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001400:	cmp	r0, r1
60001402:	beq.n	60001414 <memory_copy+0x14>
	while (dest < dest_end) {
60001404:	cmp	r0, r2
60001406:	bcs.n	60001414 <memory_copy+0x14>
		*dest++ = *src++;
60001408:	ldr.w	r3, [r1], #4
6000140c:	str.w	r3, [r0], #4

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001410:	cmp	r2, r0
60001412:	bhi.n	60001408 <memory_copy+0x8>
60001414:	bx	lr
60001416:	nop

60001418 <memory_clear>:
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001418:	cmp	r0, r1
6000141a:	bcs.n	60001426 <memory_clear+0xe>
		*dest++ = 0;
6000141c:	movs	r3, #0
6000141e:	str.w	r3, [r0], #4
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001422:	cmp	r1, r0
60001424:	bhi.n	6000141e <memory_clear+0x6>
60001426:	bx	lr

60001428 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001428:	ldr	r3, [pc, #408]	; (600015c4 <ResetHandler+0x19c>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000142a:	mov.w	r1, #11141120	; 0xaa0000
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000142e:	ldr	r2, [pc, #408]	; (600015c8 <ResetHandler+0x1a0>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001430:	ldr	r0, [pc, #408]	; (600015cc <ResetHandler+0x1a4>)
void startup_middle_hook(void)	__attribute__ ((weak, alias("startup_default_middle_hook")));
FLASHMEM void startup_default_late_hook(void) {}
void startup_late_hook(void)	__attribute__ ((weak, alias("startup_default_late_hook")));
__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
void ResetHandler(void)
{
60001432:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001436:	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001438:	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
6000143a:	ldr	r2, [pc, #404]	; (600015d0 <ResetHandler+0x1a8>)
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000143c:	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
6000143e:	mov	sp, r2
	__asm__ volatile("dsb":::"memory");
60001440:	dsb	sy
	__asm__ volatile("isb":::"memory");
60001444:	isb	sy
#endif
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001448:	bl	60001794 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000144c:	ldr	r3, [pc, #388]	; (600015d4 <ResetHandler+0x1ac>)
6000144e:	movs	r0, #8
	//IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
	//GPIO7_GDIR |= (1<<3);
	//GPIO7_DR_SET = (1<<3); // digitalWrite(13, HIGH);

	// Initialize memory
	memory_copy(&_stext, &_stextload, &_etext);
60001450:	ldr	r2, [pc, #388]	; (600015d8 <ResetHandler+0x1b0>)
60001452:	ldr	r1, [pc, #392]	; (600015dc <ResetHandler+0x1b4>)
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
	__asm__ volatile("dsb":::"memory");
	__asm__ volatile("isb":::"memory");
#endif
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001454:	str.w	r0, [r3, #340]	; 0x154
	//IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
	//GPIO7_GDIR |= (1<<3);
	//GPIO7_DR_SET = (1<<3); // digitalWrite(13, HIGH);

	// Initialize memory
	memory_copy(&_stext, &_stextload, &_etext);
60001458:	ldr	r0, [pc, #388]	; (600015e0 <ResetHandler+0x1b8>)
6000145a:	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
6000145e:	ldr	r2, [pc, #388]	; (600015e4 <ResetHandler+0x1bc>)
60001460:	ldr	r1, [pc, #388]	; (600015e8 <ResetHandler+0x1c0>)
60001462:	ldr	r0, [pc, #392]	; (600015ec <ResetHandler+0x1c4>)
60001464:	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001468:	ldr	r1, [pc, #388]	; (600015f0 <ResetHandler+0x1c8>)
6000146a:	ldr	r0, [pc, #392]	; (600015f4 <ResetHandler+0x1cc>)
6000146c:	bl	60001418 <memory_clear>
60001470:	ldr	r4, [pc, #388]	; (600015f8 <ResetHandler+0x1d0>)

	// enable FPU
	SCB_CPACR = 0x00F00000;
60001472:	ldr	r1, [pc, #392]	; (600015fc <ResetHandler+0x1d4>)
60001474:	mov.w	r0, #15728640	; 0xf00000

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001478:	movs	r3, #0
6000147a:	ldr	r2, [pc, #388]	; (60001600 <ResetHandler+0x1d8>)
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
6000147c:	str	r0, [r1, #0]

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000147e:	str.w	r2, [r4, r3, lsl #2]
60001482:	adds	r3, #1
60001484:	cmp	r3, #176	; 0xb0
60001486:	bne.n	6000147e <ResetHandler+0x56>
60001488:	ldr	r3, [pc, #376]	; (60001604 <ResetHandler+0x1dc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
6000148a:	movs	r1, #128	; 0x80
6000148c:	ldr	r2, [pc, #376]	; (60001608 <ResetHandler+0x1e0>)
6000148e:	strb.w	r1, [r3], #1
60001492:	cmp	r3, r2
60001494:	bne.n	6000148e <ResetHandler+0x66>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001496:	ldr	r5, [pc, #316]	; (600015d4 <ResetHandler+0x1ac>)
60001498:	mov.w	r8, #2155905152	; 0x80808080
	SCB_VTOR = (uint32_t)_VectorsRam;

	reset_PFD();

	// enable exception handling
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
6000149c:	ldr	r1, [pc, #364]	; (6000160c <ResetHandler+0x1e4>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000149e:	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600014a2:	ldr	r3, [pc, #364]	; (60001610 <ResetHandler+0x1e8>)
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600014a4:	movs	r6, #0

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014a6:	ldr.w	sl, [pc, #420]	; 6000164c <ResetHandler+0x224>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014aa:	ldr.w	r9, [pc, #420]	; 60001650 <ResetHandler+0x228>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600014ae:	str	r4, [r3, #0]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b0:	str.w	r8, [r5, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b4:	str.w	sl, [r5, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014b8:	str.w	r8, [r5, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014bc:	str.w	r9, [r5, #240]	; 0xf0
	SCB_VTOR = (uint32_t)_VectorsRam;

	reset_PFD();

	// enable exception handling
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014c0:	ldr	r3, [r1, #0]

	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014c2:	ldr	r7, [pc, #336]	; (60001614 <ResetHandler+0x1ec>)
	SCB_VTOR = (uint32_t)_VectorsRam;

	reset_PFD();

	// enable exception handling
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014c4:	orr.w	r3, r3, #458752	; 0x70000
600014c8:	str	r3, [r1, #0]

	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ca:	ldr	r3, [r7, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014cc:	ldr	r1, [pc, #244]	; (600015c4 <ResetHandler+0x19c>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;

	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ce:	bic.w	r3, r3, #127	; 0x7f
600014d2:	orr.w	r3, r3, #64	; 0x40
600014d6:	str	r3, [r7, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014d8:	ldr	r3, [r7, #36]	; 0x24
600014da:	bic.w	r3, r3, #127	; 0x7f
600014de:	orr.w	r3, r3, #64	; 0x40
600014e2:	str	r3, [r7, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014e4:	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
600014e6:	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
600014e8:	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
600014ea:	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
600014ec:	bl	600017a0 <configure_cache>
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
600014f0:	ldr	r2, [pc, #292]	; (60001618 <ResetHandler+0x1f0>)
	_VectorsRam[15] = systick_isr;
600014f2:	ldr	r3, [pc, #296]	; (6000161c <ResetHandler+0x1f4>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
600014f4:	movs	r0, #99	; 0x63
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
600014f6:	str	r2, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014f8:	movs	r1, #3

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
600014fa:	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
600014fc:	ldr	r2, [pc, #288]	; (60001620 <ResetHandler+0x1f8>)
	SYST_CVR = 0;
600014fe:	ldr	r3, [pc, #292]	; (60001624 <ResetHandler+0x1fc>)
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001500:	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001502:	add.w	r0, r0, #3758096384	; 0xe0000000
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
60001506:	str	r6, [r3, #0]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001508:	str.w	r1, [r2, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000150c:	addw	r0, r0, #4001	; 0xfa1
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001510:	ldr	r1, [pc, #276]	; (60001628 <ResetHandler+0x200>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001512:	ldr	r2, [pc, #280]	; (6000162c <ResetHandler+0x204>)
60001514:	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001518:	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000151a:	ldr	r2, [pc, #276]	; (60001630 <ResetHandler+0x208>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000151c:	orr.w	r3, r3, #16777216	; 0x1000000
60001520:	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001522:	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001524:	ldr	r1, [pc, #268]	; (60001634 <ResetHandler+0x20c>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001526:	orr.w	r3, r3, #1
6000152a:	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000152c:	ldr	r3, [r0, #0]
6000152e:	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
60001530:	bl	60001c40 <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001534:	str.w	r8, [r5, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001538:	ldr	r0, [pc, #252]	; (60001638 <ResetHandler+0x210>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000153a:	str.w	sl, [r5, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000153e:	str.w	r8, [r5, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001542:	str.w	r9, [r5, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001546:	bl	60001e58 <__set_arm_clock_veneer>
#endif

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000154a:	ldr	r1, [r7, #108]	; 0x6c
	PIT_MCR = 0;
6000154c:	ldr	r2, [pc, #236]	; (6000163c <ResetHandler+0x214>)
#ifdef F_CPU
	set_arm_clock(F_CPU);
#endif

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000154e:	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001552:	ldr	r3, [pc, #236]	; (60001640 <ResetHandler+0x218>)
#ifdef F_CPU
	set_arm_clock(F_CPU);
#endif

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001554:	str	r1, [r7, #108]	; 0x6c
	PIT_MCR = 0;
60001556:	str	r6, [r2, #0]
	PIT_TCTRL0 = 0;
60001558:	str.w	r6, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000155c:	str.w	r6, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001560:	str.w	r6, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001564:	str.w	r6, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001568:	ldr	r2, [r3, #56]	; 0x38
6000156a:	lsls	r2, r2, #31
6000156c:	bmi.n	60001580 <ResetHandler+0x158>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000156e:	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
60001572:	ldr	r1, [pc, #208]	; (60001644 <ResetHandler+0x21c>)
60001574:	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001576:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001578:	ldr	r2, [r3, #56]	; 0x38
6000157a:	orr.w	r2, r2, #1
6000157e:	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
60001580:	ldr	r2, [pc, #188]	; (60001640 <ResetHandler+0x218>)
60001582:	ldr	r4, [pc, #196]	; (60001648 <ResetHandler+0x220>)
60001584:	ldr	r3, [r2, #8]
60001586:	orr.w	r3, r3, #65537	; 0x10001
6000158a:	str	r3, [r2, #8]

#ifdef ARDUINO_TEENSY41
	configure_external_ram();
6000158c:	bl	60001884 <configure_external_ram>
#endif
	analog_init();
60001590:	bl	60001dc0 <analog_init>
	pwm_init();
60001594:	bl	60001e60 <__pwm_init_veneer>
	tempmon_init();
60001598:	bl	60001ca4 <tempmon_init>
	startup_middle_hook();
6000159c:	bl	60001798 <startup_default_middle_hook>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015a0:	ldr	r3, [r4, #0]
	while (millis() < 20) ; // wait at least 20ms before starting USB
600015a2:	cmp	r3, #19
600015a4:	bls.n	600015a0 <ResetHandler+0x178>
	usb_init();
600015a6:	bl	60001654 <usb_init>
600015aa:	ldr	r3, [r4, #0]

	while (millis() < 300) ; // wait at least 300ms before calling user code
600015ac:	cmp.w	r3, #300	; 0x12c
600015b0:	bcc.n	600015aa <ResetHandler+0x182>
	//printf("before C++ constructors\n");
	startup_late_hook();
600015b2:	bl	6000179c <startup_default_late_hook>
	__libc_init_array();
600015b6:	bl	60001e28 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
600015ba:	bl	60001e30 <__main_veneer>
	
	while (1) asm("WFI");
600015be:	wfi
600015c0:	b.n	600015be <ResetHandler+0x196>
600015c2:	nop
600015c4:	.word	0x400ac000
600015c8:	.word	0xaaaaaaaf
600015cc:	.word	0x00200007
600015d0:	.word	0x20070000
600015d4:	.word	0x400d8000
600015d8:	.word	0x0000f498
600015dc:	.word	0x60001fa8
600015e0:	.word	0x00000000
600015e4:	.word	0x20001ec0
600015e8:	.word	0x60011444
600015ec:	.word	0x20000000
600015f0:	.word	0x2000f280
600015f4:	.word	0x20001ec0
600015f8:	.word	0x20001c00
600015fc:	.word	0xe000ed88
60001600:	.word	0x000093a5
60001604:	.word	0xe000e400
60001608:	.word	0xe000e4a0
6000160c:	.word	0xe000ed24
60001610:	.word	0xe000ed08
60001614:	.word	0x400fc000
60001618:	.word	0x0000a259
6000161c:	.word	0x0000a25d
60001620:	.word	0xe000e014
60001624:	.word	0xe000e018
60001628:	.word	0xe000edfc
6000162c:	.word	0x20200000
60001630:	.word	0xe0001000
60001634:	.word	0x2000c71c
60001638:	.word	0x179a7b00
6000163c:	.word	0x40084000
60001640:	.word	0x400d4000
60001644:	.word	0x56c00000
60001648:	.word	0x2000c720
6000164c:	.word	0x2018101b
60001650:	.word	0x13110d0c

60001654 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001654:	ldr	r3, [pc, #192]	; (60001718 <usb_init+0xc4>)
60001656:	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
6000165a:	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
6000165c:	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001660:	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
60001664:	bl	60001e40 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001668:	ldr	r1, [pc, #176]	; (6000171c <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
6000166a:	ldr	r0, [pc, #180]	; (60001720 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000166c:	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001670:	ldr	r4, [pc, #176]	; (60001724 <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001672:	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001676:	ldr	r3, [pc, #176]	; (60001728 <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001678:	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
6000167c:	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001680:	ldr	r2, [r4, #0]
60001682:	ands	r3, r2
60001684:	cbnz	r3, 6000168e <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60001686:	ldr.w	r3, [r0, #424]	; 0x1a8
6000168a:	lsls	r2, r3, #30
6000168c:	beq.n	600016c4 <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
6000168e:	ldr	r3, [pc, #144]	; (60001720 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001690:	mov.w	r1, #2147483648	; 0x80000000
60001694:	ldr	r2, [pc, #140]	; (60001724 <usb_init+0xd0>)
60001696:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001698:	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
6000169a:	ldr.w	r1, [r3, #320]	; 0x140
6000169e:	orr.w	r1, r1, #2
600016a2:	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600016a6:	ldr.w	r3, [r2, #320]	; 0x140
600016aa:	lsls	r3, r3, #30
600016ac:	bmi.n	600016a6 <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600016ae:	mov.w	r0, #131072	; 0x20000
600016b2:	ldr	r1, [pc, #120]	; (6000172c <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600016b4:	ldr	r3, [pc, #108]	; (60001724 <usb_init+0xd0>)
600016b6:	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
600016ba:	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600016bc:	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600016be:	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600016c0:	bl	60001e50 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600016c4:	ldr	r5, [pc, #104]	; (60001730 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
600016c6:	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600016c8:	ldr	r3, [pc, #88]	; (60001724 <usb_init+0xd0>)
600016ca:	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600016ce:	ldr	r4, [pc, #80]	; (60001720 <usb_init+0xcc>)
600016d0:	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600016d2:	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600016d4:	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
600016d6:	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600016d8:	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600016da:	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600016de:	mov.w	r2, #768	; 0x300
600016e2:	bl	60001e48 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600016e6:	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600016ea:	movw	r1, #323	; 0x143
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
600016ee:	mov.w	r0, #4194304	; 0x400000
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
600016f2:	ldr	r3, [pc, #64]	; (60001734 <usb_init+0xe0>)
600016f4:	ldr	r2, [pc, #64]	; (60001738 <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600016f6:	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
600016f8:	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
600016fa:	str.w	r5, [r4, #344]	; 0x158
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600016fe:	str.w	r1, [r4, #328]	; 0x148
60001702:	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001706:	ldr	r2, [pc, #52]	; (6000173c <usb_init+0xe8>)
60001708:	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
6000170c:	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000170e:	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001710:	str.w	r3, [r4, #320]	; 0x140
60001714:	pop	{r4, r5, r6, pc}
60001716:	nop
60001718:	.word	0x400d8000
6000171c:	.word	0x400fc000
60001720:	.word	0x402e0000
60001724:	.word	0x400d9000
60001728:	.word	0x001e1c00
6000172c:	.word	0xe000e28c
60001730:	.word	0x20000000
60001734:	.word	0x20001c00
60001738:	.word	0x00008ab1
6000173c:	.word	0xe000e10c

60001740 <_reboot_Teensyduino_>:
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


FLASHMEM void _reboot_Teensyduino_(void)
{
60001740:	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001742:	ldr	r3, [pc, #56]	; (6000177c <_reboot_Teensyduino_+0x3c>)
60001744:	ldr	r3, [r3, #96]	; 0x60
60001746:	lsls	r3, r3, #30
60001748:	bmi.n	6000174c <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
6000174a:	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
6000174c:	cpsid	i
		USB1_USBCMD = 0;
6000174e:	ldr	r3, [pc, #48]	; (60001780 <_reboot_Teensyduino_+0x40>)
60001750:	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001752:	ldr	r2, [pc, #48]	; (60001784 <_reboot_Teensyduino_+0x44>)
{
	if (!(HW_OCOTP_CFG5 & 0x02)) {
		asm("bkpt #251"); // run bootloader
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
		USB1_USBCMD = 0;
60001754:	str.w	r0, [r3, #320]	; 0x140
		IOMUXC_GPR_GPR16 = 0x00200003;
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001758:	add.w	r3, r3, #3758096384	; 0xe0000000
	if (!(HW_OCOTP_CFG5 & 0x02)) {
		asm("bkpt #251"); // run bootloader
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
		USB1_USBCMD = 0;
		IOMUXC_GPR_GPR16 = 0x00200003;
6000175c:	ldr	r1, [pc, #40]	; (60001788 <_reboot_Teensyduino_+0x48>)
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
6000175e:	sub.w	r3, r3, #913408	; 0xdf000
	if (!(HW_OCOTP_CFG5 & 0x02)) {
		asm("bkpt #251"); // run bootloader
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
		USB1_USBCMD = 0;
		IOMUXC_GPR_GPR16 = 0x00200003;
60001762:	str	r1, [r2, #64]	; 0x40
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001764:	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001766:	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
6000176a:	ldr	r2, [pc, #32]	; (6000178c <_reboot_Teensyduino_+0x4c>)
		IOMUXC_GPR_GPR16 = 0x00200003;
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
		__asm__ volatile("dsb":::"memory");
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
6000176c:	add.w	r3, r3, #28672	; 0x7000
60001770:	ldr	r1, [pc, #28]	; (60001790 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001772:	ldr	r2, [r2, #0]
60001774:	mov	r0, r3
		IOMUXC_GPR_GPR16 = 0x00200003;
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
		__asm__ volatile("dsb":::"memory");
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
60001776:	str	r1, [r3, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001778:	ldr	r3, [r2, #8]
6000177a:	blx	r3
6000177c:	.word	0x401f4400
60001780:	.word	0x402e0000
60001784:	.word	0x400ac000
60001788:	.word	0x00200003
6000178c:	.word	0x0020001c
60001790:	.word	0xeb120000

60001794 <startup_default_early_hook>:
60001794:	bx	lr
60001796:	nop

60001798 <startup_default_middle_hook>:
60001798:	bx	lr
6000179a:	nop

6000179c <startup_default_late_hook>:
extern int main (void);
FLASHMEM void startup_default_early_hook(void) {}
void startup_early_hook(void)	__attribute__ ((weak, alias("startup_default_early_hook")));
FLASHMEM void startup_default_middle_hook(void) {}
void startup_middle_hook(void)	__attribute__ ((weak, alias("startup_default_middle_hook")));
FLASHMEM void startup_default_late_hook(void) {}
6000179c:	bx	lr
6000179e:	nop

600017a0 <configure_cache>:
#define SIZE_2G		(SCB_MPU_RASR_SIZE(30) | SCB_MPU_RASR_ENABLE)
#define SIZE_4G		(SCB_MPU_RASR_SIZE(31) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
600017a0:	push	{r4, r5, r6, r7, lr}
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600017a2:	ldr	r2, [pc, #144]	; (60001834 <configure_cache+0x94>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600017a4:	movs	r0, #0

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600017a6:	ldr	r3, [pc, #144]	; (60001838 <configure_cache+0x98>)
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600017a8:	mov.w	ip, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600017ac:	ldr	r4, [pc, #140]	; (6000183c <configure_cache+0x9c>)

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600017ae:	movs	r6, #17

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600017b0:	ldr.w	lr, [pc, #200]	; 6000187c <configure_cache+0xdc>
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600017b4:	movs	r7, #18
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600017b6:	str	r0, [r4, #0]
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600017b8:	movs	r5, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600017ba:	str.w	ip, [r2]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600017be:	str.w	lr, [r3]
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600017c2:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600017c4:	ldr.w	lr, [pc, #184]	; 60001880 <configure_cache+0xe0>

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600017c8:	ldr	r6, [pc, #116]	; (60001840 <configure_cache+0xa0>)
	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600017ca:	str.w	lr, [r3]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600017ce:	ldr	r1, [pc, #116]	; (60001844 <configure_cache+0xa4>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600017d0:	str	r7, [r2, #0]
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600017d2:	str	r6, [r3, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600017d4:	orr.w	r1, r1, #21
	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600017d8:	ldr	r7, [pc, #108]	; (60001848 <configure_cache+0xa8>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600017da:	ldr	r6, [pc, #112]	; (6000184c <configure_cache+0xac>)
	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600017dc:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600017de:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600017e0:	ldr	r7, [pc, #108]	; (60001850 <configure_cache+0xb0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600017e2:	ldr	r6, [pc, #112]	; (60001854 <configure_cache+0xb4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600017e4:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600017e6:	str	r6, [r3, #0]
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600017e8:	ldr	r7, [pc, #108]	; (60001858 <configure_cache+0xb8>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600017ea:	str	r1, [r2, #0]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600017ec:	ldr	r6, [pc, #108]	; (6000185c <configure_cache+0xbc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600017ee:	ldr	r1, [pc, #112]	; (60001860 <configure_cache+0xc0>)

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600017f0:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600017f2:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600017f4:	ldr	r7, [pc, #108]	; (60001864 <configure_cache+0xc4>)
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600017f6:	str	r1, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600017f8:	ldr	r6, [pc, #108]	; (60001868 <configure_cache+0xc8>)

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600017fa:	ldr	r1, [pc, #112]	; (6000186c <configure_cache+0xcc>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600017fc:	str	r7, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600017fe:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001800:	ldr	r7, [pc, #108]	; (60001870 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001802:	str	r1, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001804:	ldr	r6, [pc, #108]	; (60001874 <configure_cache+0xd4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001806:	ldr	r1, [pc, #112]	; (60001878 <configure_cache+0xd8>)

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001808:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000180a:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000180c:	str	r1, [r3, #0]

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
6000180e:	str	r5, [r4, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
60001810:	dsb	sy
	asm("isb");
60001814:	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001818:	str.w	r0, [r3, #432]	; 0x1b0

	asm("dsb");
6000181c:	dsb	sy
	asm("isb");
60001820:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001824:	ldr.w	r3, [r2, #-136]
60001828:	orr.w	r3, r3, #196608	; 0x30000
6000182c:	str.w	r3, [r2, #-136]
60001830:	pop	{r4, r5, r6, r7, pc}
60001832:	nop
60001834:	.word	0xe000ed9c
60001838:	.word	0xe000eda0
6000183c:	.word	0xe000ed94
60001840:	.word	0x00100009
60001844:	.word	0x2000f280
60001848:	.word	0x00200013
6000184c:	.word	0x07020021
60001850:	.word	0x20000014
60001854:	.word	0x13080025
60001858:	.word	0x10000009
6000185c:	.word	0x20200016
60001860:	.word	0x130b0027
60001864:	.word	0x40000017
60001868:	.word	0x13100033
6000186c:	.word	0x60000018
60001870:	.word	0x070b002f
60001874:	.word	0x70000019
60001878:	.word	0x130b002f
6000187c:	.word	0x1000003f
60001880:	.word	0x03080025

60001884 <configure_external_ram>:
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
	return id & 0xFFFF;
}

FLASHMEM void configure_external_ram()
{
60001884:	push	{r4, r5, r6, r7, lr}
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001886:	ldr	r3, [pc, #564]	; (60001abc <configure_external_ram+0x238>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst

	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001888:	movs	r2, #24
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
6000188a:	ldr	r6, [pc, #564]	; (60001ac0 <configure_external_ram+0x23c>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
6000188c:	movs	r0, #1
}

FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000188e:	ldr	r1, [pc, #564]	; (60001ac4 <configure_external_ram+0x240>)
		 | FLEXSPI_MCR0_IPGRANTWAIT_MASK | FLEXSPI_MCR0_SCKFREERUNEN
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001890:	movw	lr, #34572	; 0x870c

FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001894:	ldr	r5, [pc, #560]	; (60001ac8 <configure_external_ram+0x244>)
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001896:	mov.w	r7, #4294967295
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
6000189a:	ldr	r4, [pc, #560]	; (60001acc <configure_external_ram+0x248>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
	return id & 0xFFFF;
}

FLASHMEM void configure_external_ram()
{
6000189c:	sub	sp, #12
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000189e:	str.w	r1, [r3, #604]	; 0x25c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600018a2:	str.w	r5, [r3, #608]	; 0x260
	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
600018a6:	movs	r5, #0
FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600018a8:	str.w	r1, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600018ac:	str.w	r4, [r3, #616]	; 0x268
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600018b0:	mov.w	r4, #8192	; 0x2000
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600018b4:	str.w	r6, [r3, #620]	; 0x26c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600018b8:	ldr	r1, [pc, #532]	; (60001ad0 <configure_external_ram+0x24c>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600018ba:	str.w	r6, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600018be:	str.w	r6, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600018c2:	str.w	r6, [r3, #632]	; 0x278
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600018c6:	ldr	r6, [pc, #524]	; (60001ad4 <configure_external_ram+0x250>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst

	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600018c8:	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
600018ca:	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
600018cc:	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
600018ce:	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
600018d0:	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
600018d2:	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
600018d6:	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
600018da:	str.w	r2, [r3, #136]	; 0x88

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600018de:	movw	r2, #1541	; 0x605
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600018e2:	str.w	r0, [r1, #812]	; 0x32c
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
600018e6:	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
600018ea:	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
600018ee:	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
600018f2:	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
600018f6:	str.w	r0, [r1, #848]	; 0x350
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
600018fa:	mov	r1, r5
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600018fc:	ldr	r3, [r6, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
600018fe:	ldr	r0, [pc, #472]	; (60001ad8 <configure_external_ram+0x254>)
60001900:	ands	r0, r3
60001902:	ldr	r3, [pc, #472]	; (60001adc <configure_external_ram+0x258>)
60001904:	orrs	r3, r0
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001906:	ldr	r0, [pc, #472]	; (60001ae0 <configure_external_ram+0x25c>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001908:	str	r3, [r6, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
6000190a:	ldr.w	r3, [r6, #132]	; 0x84
6000190e:	orr.w	r3, r3, #12
60001912:	str.w	r3, [r6, #132]	; 0x84
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001916:	movs	r6, #2
	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001918:	ldr	r3, [r0, #0]
6000191a:	orrs	r3, r6
6000191c:	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
6000191e:	ldr	r3, [r0, #0]
		 | FLEXSPI_MCR0_IPGRANTWAIT_MASK | FLEXSPI_MCR0_SCKFREERUNEN
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001920:	and.w	lr, r3, lr
60001924:	ldr	r3, [pc, #444]	; (60001ae4 <configure_external_ram+0x260>)
60001926:	orr.w	r3, lr, r3
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000192a:	ldr.w	lr, [pc, #496]	; 60001b1c <configure_external_ram+0x298>
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
6000192e:	str	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001930:	ldr	r3, [pc, #436]	; (60001ae8 <configure_external_ram+0x264>)
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001932:	str	r7, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001934:	ldr.w	r7, [lr, #8]
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001938:	ands	r3, r7
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000193a:	ldr	r7, [pc, #432]	; (60001aec <configure_external_ram+0x268>)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
6000193c:	orr.w	r3, r3, #536870912	; 0x20000000
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001940:	str	r3, [r0, #8]
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;

	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
60001942:	ldr	r3, [r0, #12]
60001944:	bic.w	r3, r3, #120	; 0x78
60001948:	str	r3, [r0, #12]
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000194a:	ldr	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000194c:	ands	r7, r3
6000194e:	ldr	r3, [pc, #416]	; (60001af0 <configure_external_ram+0x26c>)
60001950:	orrs	r3, r7
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001952:	ldr	r7, [pc, #408]	; (60001aec <configure_external_ram+0x268>)

	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001954:	str	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001956:	ldr	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001958:	ands	r7, r3
6000195a:	ldr	r3, [pc, #404]	; (60001af0 <configure_external_ram+0x26c>)
6000195c:	orrs	r3, r7
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000195e:	ldr	r7, [pc, #404]	; (60001af4 <configure_external_ram+0x270>)
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001960:	str	r3, [r0, #36]	; 0x24
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001962:	str	r7, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
60001964:	str	r7, [r0, #44]	; 0x2c

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001966:	ldr.w	r3, [lr, #184]	; 0xb8
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000196a:	ldr	r7, [pc, #396]	; (60001af8 <configure_external_ram+0x274>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF2CR0 = mask;
	FLEXSPI2_AHBRXBUF3CR0 = mask;

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
6000196c:	bic.w	r3, r3, #63	; 0x3f
60001970:	orr.w	r3, r3, #1
60001974:	str.w	r3, [r0, #184]	; 0xb8
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001978:	ldr.w	r3, [lr, #188]	; 0xbc
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
6000197c:	ldr.w	lr, [pc, #388]	; 60001b04 <configure_external_ram+0x280>
	FLEXSPI2_AHBRXBUF3CR0 = mask;

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001980:	bic.w	r3, r3, #63	; 0x3f
60001984:	orr.w	r3, r3, #1
60001988:	str.w	r3, [r0, #188]	; 0xbc

	FLEXSPI2_INTEN = 0;
6000198c:	str	r5, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
6000198e:	str	r4, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001990:	str	r7, [r0, #112]	; 0x70
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001992:	str.w	r2, [r0, #128]	; 0x80
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60001996:	str	r4, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001998:	str	r7, [r0, #116]	; 0x74
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
6000199a:	str.w	r2, [r0, #132]	; 0x84
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
6000199e:	ldr	r4, [r0, #0]

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019a0:	ldr	r3, [pc, #344]	; (60001afc <configure_external_ram+0x278>)
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600019a2:	bic.w	r4, r4, #2

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
600019a6:	ldr	r2, [pc, #344]	; (60001b00 <configure_external_ram+0x27c>)
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600019a8:	str	r4, [r0, #0]

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600019aa:	str.w	lr, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019ae:	str	r6, [r0, #28]
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
600019b0:	str.w	r1, [r3], #4
600019b4:	cmp	r3, r2
600019b6:	bne.n	600019b0 <configure_external_ram+0x12c>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600019b8:	ldr	r3, [pc, #292]	; (60001ae0 <configure_external_ram+0x25c>)
600019ba:	ldr	r2, [r3, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600019bc:	mov	r1, r3

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600019be:	orr.w	r2, r2, #1
600019c2:	str	r2, [r3, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600019c4:	ldr	r3, [r1, #0]
600019c6:	ldr	r2, [pc, #280]	; (60001ae0 <configure_external_ram+0x25c>)
600019c8:	ands.w	r3, r3, #1
600019cc:	bne.n	600019c4 <configure_external_ram+0x140>

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600019ce:	ldr	r6, [pc, #308]	; (60001b04 <configure_external_ram+0x280>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019d0:	movs	r5, #2

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600019d2:	movw	r4, #1781	; 0x6f5
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600019d6:	movw	r0, #1126	; 0x466
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600019da:	movw	r1, #1177	; 0x499
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600019de:	ldr	r7, [pc, #296]	; (60001b08 <configure_external_ram+0x284>)
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600019e0:	str	r6, [r2, #24]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600019e2:	movw	r6, #9217	; 0x2401
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019e6:	str	r5, [r2, #28]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600019e8:	movw	r5, #1077	; 0x435

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600019ec:	str.w	r4, [r2, #512]	; 0x200
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
600019f0:	movw	r4, #8705	; 0x2201
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600019f4:	str.w	r0, [r2, #528]	; 0x210

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019f8:	movs	r0, #1
	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600019fa:	str.w	r1, [r2, #544]	; 0x220
FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019fe:	mov	r1, r2
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001a00:	str.w	r7, [r2, #560]	; 0x230
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001a04:	add.w	r7, r7, #3657433088	; 0xda000000
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001a08:	str.w	r6, [r2, #564]	; 0x234
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001a0c:	add.w	r7, r7, #588	; 0x24c
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001a10:	str.w	r5, [r2, #576]	; 0x240
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001a14:	ldr	r6, [pc, #244]	; (60001b0c <configure_external_ram+0x288>)
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001a16:	ldr	r5, [pc, #248]	; (60001b10 <configure_external_ram+0x28c>)
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001a18:	str.w	r7, [r2, #592]	; 0x250
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001a1c:	str.w	r6, [r2, #596]	; 0x254
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001a20:	str.w	r5, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001a24:	str.w	r4, [r2, #612]	; 0x264
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001a28:	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a2c:	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a30:	str.w	r0, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a34:	ldr	r3, [r1, #20]
60001a36:	ldr	r2, [pc, #168]	; (60001ae0 <configure_external_ram+0x25c>)
60001a38:	lsls	r5, r3, #31
60001a3a:	bpl.n	60001a34 <configure_external_ram+0x1b0>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a3c:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001a3e:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a40:	mov.w	r0, #65536	; 0x10000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a44:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a46:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001a48:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a4c:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a50:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a54:	ldr	r3, [r1, #20]
60001a56:	ldr	r2, [pc, #136]	; (60001ae0 <configure_external_ram+0x25c>)
60001a58:	lsls	r4, r3, #31
60001a5a:	bpl.n	60001a54 <configure_external_ram+0x1d0>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a5c:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001a5e:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a60:	mov.w	r0, #131072	; 0x20000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a64:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a66:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001a68:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a6c:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a70:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a74:	ldr	r3, [r1, #20]
60001a76:	ldr	r2, [pc, #104]	; (60001ae0 <configure_external_ram+0x25c>)
60001a78:	lsls	r0, r3, #31
60001a7a:	bpl.n	60001a74 <configure_external_ram+0x1f0>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a7c:	movs	r3, #1
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001a7e:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001a80:	ldr	r0, [pc, #144]	; (60001b14 <configure_external_ram+0x290>)
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a82:	mov	r1, r2
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a84:	str	r3, [r2, #20]
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001a86:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001a8a:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a8e:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a92:	ldr	r3, [r1, #20]
60001a94:	ldr	r2, [pc, #72]	; (60001ae0 <configure_external_ram+0x25c>)
60001a96:	lsls	r3, r3, #31
60001a98:	bpl.n	60001a92 <configure_external_ram+0x20e>
	uint32_t id = FLEXSPI2_RFDR0;
60001a9a:	ldr.w	r3, [r2, #256]	; 0x100

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001a9e:	movw	r1, #23821	; 0x5d0d
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001aa2:	movs	r0, #33	; 0x21

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001aa4:	uxth	r3, r3
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001aa6:	str	r0, [r2, #20]

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001aa8:	cmp	r3, r1
60001aaa:	beq.n	60001b20 <configure_external_ram+0x29c>
			external_psram_size * 0x100000 -
			((uint32_t)&_extram_end - (uint32_t)&_extram_start),
			1, NULL);
	} else {
		// No PSRAM
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001aac:	ldr	r3, [pc, #104]	; (60001b18 <configure_external_ram+0x294>)
60001aae:	movs	r2, #0
60001ab0:	str	r2, [r3, #0]
60001ab2:	str	r2, [r3, #4]
60001ab4:	str	r2, [r3, #8]
60001ab6:	str	r2, [r3, #12]
	}
}
60001ab8:	add	sp, #12
60001aba:	pop	{r4, r5, r6, r7, pc}
60001abc:	.word	0x401f8000
60001ac0:	.word	0x000170f9
60001ac4:	.word	0x0001b0f9
60001ac8:	.word	0x000110f9
60001acc:	.word	0x000100f9
60001ad0:	.word	0x401f8400
60001ad4:	.word	0x400fc000
60001ad8:	.word	0x1ffffcff
60001adc:	.word	0xa0000300
60001ae0:	.word	0x402a4000
60001ae4:	.word	0xffff0012
60001ae8:	.word	0x00f737ff
60001aec:	.word	0x7cf0ff00
60001af0:	.word	0x80000040
60001af4:	.word	0x830f00ff
60001af8:	.word	0x00020063
60001afc:	.word	0x402a4200
60001b00:	.word	0x402a4300
60001b04:	.word	0x5af05af0
60001b08:	.word	0x3018049f
60001b0c:	.word	0x26013206
60001b10:	.word	0x0a180638
60001b14:	.word	0x00030004
60001b18:	.word	0x2000f230
60001b1c:	.word	0x402a8000
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001b20:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b22:	mov.w	r0, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b26:	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b28:	mov	r1, r2
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001b2a:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b2e:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b32:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b36:	ldr	r3, [r1, #20]
60001b38:	ldr	r2, [pc, #236]	; (60001c28 <configure_external_ram+0x3a4>)
60001b3a:	lsls	r7, r3, #31
60001b3c:	bpl.n	60001b36 <configure_external_ram+0x2b2>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b3e:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001b40:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b44:	movs	r0, #0
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b46:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b48:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001b4a:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b4e:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b52:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b56:	ldr	r3, [r1, #20]
60001b58:	ldr	r2, [pc, #204]	; (60001c28 <configure_external_ram+0x3a4>)
60001b5a:	lsls	r6, r3, #31
60001b5c:	bpl.n	60001b56 <configure_external_ram+0x2d2>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b5e:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001b60:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b64:	mov.w	r0, #65536	; 0x10000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b68:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b6a:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001b6c:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b70:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b74:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b78:	ldr	r3, [r1, #20]
60001b7a:	ldr	r2, [pc, #172]	; (60001c28 <configure_external_ram+0x3a4>)
60001b7c:	lsls	r5, r3, #31
60001b7e:	bpl.n	60001b78 <configure_external_ram+0x2f4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b80:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001b82:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b86:	mov.w	r0, #131072	; 0x20000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b8a:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b8c:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001b8e:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b92:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b96:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b9a:	ldr	r3, [r1, #20]
60001b9c:	ldr	r2, [pc, #136]	; (60001c28 <configure_external_ram+0x3a4>)
60001b9e:	lsls	r4, r3, #31
60001ba0:	bpl.n	60001b9a <configure_external_ram+0x316>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001ba2:	movs	r3, #1
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001ba4:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001ba8:	ldr	r0, [pc, #128]	; (60001c2c <configure_external_ram+0x3a8>)
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001baa:	mov	r1, r2
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001bac:	str	r3, [r2, #20]
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001bae:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001bb2:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001bb6:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001bba:	ldr	r3, [r1, #20]
60001bbc:	ldr	r2, [pc, #104]	; (60001c28 <configure_external_ram+0x3a4>)
60001bbe:	lsls	r0, r3, #31
60001bc0:	bpl.n	60001bba <configure_external_ram+0x336>
	uint32_t id = FLEXSPI2_RFDR0;
60001bc2:	ldr.w	r3, [r2, #256]	; 0x100
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001bc6:	movw	r1, #23821	; 0x5d0d
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001bca:	movs	r0, #33	; 0x21
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001bcc:	uxth	r3, r3
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001bce:	str	r0, [r2, #20]
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001bd0:	cmp	r3, r1
60001bd2:	beq.n	60001bf6 <configure_external_ram+0x372>
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
		} else {
			// One PSRAM chip is present, 8 MByte
			external_psram_size = 8;
60001bd4:	ldr	r3, [pc, #88]	; (60001c30 <configure_external_ram+0x3ac>)
60001bd6:	movs	r2, #8
60001bd8:	mov.w	r4, #8388608	; 0x800000
60001bdc:	strb	r2, [r3, #0]
		}
		// TODO: zero uninitialized EXTMEM variables
		// TODO: copy from flash to initialize EXTMEM variables
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001bde:	ldr	r1, [pc, #84]	; (60001c34 <configure_external_ram+0x3b0>)
60001be0:	movs	r0, #0
60001be2:	ldr	r2, [pc, #84]	; (60001c38 <configure_external_ram+0x3b4>)
60001be4:	movs	r3, #1
60001be6:	str	r0, [sp, #0]
60001be8:	subs	r2, r2, r1
60001bea:	ldr	r0, [pc, #80]	; (60001c3c <configure_external_ram+0x3b8>)
60001bec:	add	r2, r4
60001bee:	bl	60001e38 <__sm_set_pool_veneer>
			1, NULL);
	} else {
		// No PSRAM
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
	}
}
60001bf2:	add	sp, #12
60001bf4:	pop	{r4, r5, r6, r7, pc}
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001bf6:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001bfa:	mov.w	r1, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001bfe:	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001c00:	mov	r0, r2
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001c02:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001c06:	str.w	r1, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001c0a:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001c0e:	ldr	r3, [r0, #20]
60001c10:	ldr	r1, [pc, #20]	; (60001c28 <configure_external_ram+0x3a4>)
60001c12:	lsls	r3, r3, #31
60001c14:	bpl.n	60001c0e <configure_external_ram+0x38a>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001c16:	movs	r0, #1
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
60001c18:	ldr	r3, [pc, #20]	; (60001c30 <configure_external_ram+0x3ac>)
60001c1a:	movs	r2, #16
60001c1c:	mov.w	r4, #16777216	; 0x1000000
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001c20:	str	r0, [r1, #20]
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
60001c22:	strb	r2, [r3, #0]
60001c24:	b.n	60001bde <configure_external_ram+0x35a>
60001c26:	nop
60001c28:	.word	0x402a4000
60001c2c:	.word	0x00030004
60001c30:	.word	0x2000f1c3
60001c34:	.word	0x70000000
60001c38:	.word	0x70000000
60001c3c:	.word	0x2000f230

60001c40 <usb_pll_start>:

#endif // ARDUINO_TEENSY41


FLASHMEM void usb_pll_start()
{
60001c40:	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001c42:	ldr	r2, [pc, #92]	; (60001ca0 <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001c44:	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001c46:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001c4a:	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001c4e:	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001c52:	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001c56:	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001c5a:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001c5c:	tst.w	r3, #2
60001c60:	beq.n	60001c70 <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001c62:	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001c64:	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001c66:	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001c68:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001c6a:	tst.w	r3, #2
60001c6e:	bne.n	60001c62 <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001c70:	tst.w	r3, #8192	; 0x2000
60001c74:	bne.n	60001c7a <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001c76:	str	r5, [r2, #20]
			continue;
60001c78:	b.n	60001c5a <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001c7a:	tst.w	r3, #4096	; 0x1000
60001c7e:	bne.n	60001c84 <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001c80:	str	r6, [r2, #20]
			continue;
60001c82:	b.n	60001c5a <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001c84:	cmp	r3, #0
60001c86:	bge.n	60001c5a <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001c88:	tst.w	r3, #65536	; 0x10000
60001c8c:	beq.n	60001c92 <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001c8e:	str	r1, [r2, #24]
			continue;
60001c90:	b.n	60001c5a <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001c92:	lsls	r3, r3, #25
60001c94:	bmi.n	60001c9a <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001c96:	str	r7, [r2, #20]
			continue;
60001c98:	b.n	60001c5a <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
60001c9a:	pop	{r4, r5, r6, r7}
60001c9c:	bx	lr
60001c9e:	nop
60001ca0:	.word	0x400d8000

60001ca4 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001ca4:	ldr	r2, [pc, #228]	; (60001d8c <tempmon_init+0xe8>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001ca6:	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001ca8:	ldr	r1, [pc, #228]	; (60001d90 <tempmon_init+0xec>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001caa:	vmov.f32	s11, #57	; 0x41c80000  25.0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001cae:	ldr	r3, [r2, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001cb0:	vldr	s12, [pc, #224]	; 60001d94 <tempmon_init+0xf0>
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001cb4:	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001cb8:	vldr	s13, [pc, #220]	; 60001d98 <tempmon_init+0xf4>
  //asm volatile ("dsb":::"memory");
  //while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
60001cbc:	push	{r4, r5, r6, r7}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001cbe:	str	r3, [r2, #0]
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001cc0:	movs	r4, #0
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001cc2:	str	r0, [r2, #16]
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001cc4:	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001cc8:	ldr	r7, [pc, #208]	; (60001d9c <tempmon_init+0xf8>)
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001cca:	uxtb	r0, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001ccc:	ubfx	r1, r3, #8, #12
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001cd0:	lsrs	r3, r3, #20
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001cd2:	ldr	r6, [pc, #204]	; (60001da0 <tempmon_init+0xfc>)
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001cd4:	vmov	s14, r0
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001cd8:	vmov	s10, r1
60001cdc:	vmov	s15, r3
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001ce0:	ldr	r3, [pc, #192]	; (60001da4 <tempmon_init+0x100>)
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001ce2:	vcvt.f32.s32	s10, s10
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001ce6:	ldr	r5, [pc, #192]	; (60001da8 <tempmon_init+0x104>)
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001ce8:	vcvt.f32.s32	s14, s14
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001cec:	str	r0, [r6, #0]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001cee:	vcvt.f32.s32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001cf2:	str	r1, [r5, #0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001cf4:	ldr	r1, [pc, #180]	; (60001dac <tempmon_init+0x108>)
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001cf6:	vsub.f32	s12, s14, s12
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001cfa:	ldr	r6, [pc, #180]	; (60001db0 <tempmon_init+0x10c>)
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001cfc:	vsub.f32	s15, s15, s10
60001d00:	ldr	r0, [pc, #176]	; (60001db4 <tempmon_init+0x110>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d02:	vsub.f32	s13, s14, s13
60001d06:	ldr	r5, [pc, #176]	; (60001db8 <tempmon_init+0x114>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d08:	vsub.f32	s14, s14, s11
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d0c:	vmul.f32	s12, s12, s15
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d10:	vstr	s15, [r7]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d14:	vmul.f32	s13, s13, s15
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d18:	ldr	r7, [r2, #0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001d1a:	vmul.f32	s15, s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d1e:	vstr	s14, [r3]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d22:	vdiv.f32	s11, s12, s14
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d26:	vdiv.f32	s12, s13, s14
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001d2a:	vdiv.f32	s13, s15, s14
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d2e:	vadd.f32	s14, s11, s10
60001d32:	vcvt.u32.f32	s15, s14
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d36:	vadd.f32	s14, s12, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d3a:	vmov	r3, s15
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d3e:	vcvt.u32.f32	s14, s14
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d42:	orr.w	r3, r7, r3, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001d46:	vadd.f32	s15, s13, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d4a:	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d4c:	vmov	r3, s14
60001d50:	ldr.w	r7, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001d54:	vcvt.u32.f32	s15, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d58:	and.w	r1, r1, r3, lsl #16
60001d5c:	orrs	r1, r7
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001d5e:	vmov	r3, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d62:	str.w	r1, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001d66:	ubfx	r3, r3, #0, #12
60001d6a:	ldr.w	r1, [r2, #272]	; 0x110
60001d6e:	orrs	r3, r1
60001d70:	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001d74:	ldr	r3, [r2, #0]
60001d76:	orr.w	r3, r3, #2
60001d7a:	str	r3, [r2, #0]

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001d7c:	strb	r4, [r6, #0]
60001d7e:	str.w	r5, [r0, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001d82:	ldr	r3, [pc, #56]	; (60001dbc <tempmon_init+0x118>)
60001d84:	movs	r2, #1
}
60001d86:	pop	{r4, r5, r6, r7}
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001d88:	str	r2, [r3, #0]
}
60001d8a:	bx	lr
60001d8c:	.word	0x400d8180
60001d90:	.word	0x401f4400
60001d94:	.word	0x42aa0000
60001d98:	.word	0x42b40000
60001d9c:	.word	0x2000c710
60001da0:	.word	0x2000c708
60001da4:	.word	0x2000c70c
60001da8:	.word	0x2000c704
60001dac:	.word	0x0fff0000
60001db0:	.word	0xe000e440
60001db4:	.word	0x20001c00
60001db8:	.word	0x00009a15
60001dbc:	.word	0xe000e108

60001dc0 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001dc0:	ldr	r3, [pc, #68]	; (60001e08 <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001dc2:	ldr	r1, [pc, #72]	; (60001e0c <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001dc4:	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
60001dc6:	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001dc8:	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
60001dcc:	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001dce:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001dd0:	movw	r5, #1591	; 0x637
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001dd4:	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001dd6:	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001dd8:	orr.w	r0, r0, #768	; 0x300
60001ddc:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001dde:	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001de0:	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
60001de2:	ldr	r3, [r2, #72]	; 0x48
60001de4:	lsls	r3, r3, #24
60001de6:	bmi.n	60001de2 <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001de8:	ldr	r3, [pc, #36]	; (60001e10 <analog_init+0x50>)
60001dea:	movw	r0, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001dee:	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
60001df0:	mov	r2, r3
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001df2:	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001df4:	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
60001df6:	ldr	r3, [r2, #72]	; 0x48
60001df8:	ands.w	r3, r3, #128	; 0x80
60001dfc:	bne.n	60001df6 <analog_init+0x36>
	calibrating = 0;
60001dfe:	ldr	r2, [pc, #20]	; (60001e14 <analog_init+0x54>)
60001e00:	strb	r3, [r2, #0]
}
60001e02:	pop	{r4, r5}
60001e04:	bx	lr
60001e06:	nop
60001e08:	.word	0x400fc000
60001e0c:	.word	0x400c4000
60001e10:	.word	0x400c8000
60001e14:	.word	0x2000f1c2

60001e18 <_init>:
60001e18:	push	{r3, r4, r5, r6, r7, lr}
60001e1a:	nop
60001e1c:	pop	{r3, r4, r5, r6, r7}
60001e1e:	pop	{r3}
60001e20:	mov	lr, r3
60001e22:	bx	lr
60001e24:	movs	r0, r0
	...

60001e28 <____libc_init_array_veneer>:
60001e28:	ldr.w	pc, [pc]	; 60001e2c <____libc_init_array_veneer+0x4>
60001e2c:	.word	0x0000b339

60001e30 <__main_veneer>:
60001e30:	ldr.w	pc, [pc]	; 60001e34 <__main_veneer+0x4>
60001e34:	.word	0x0000a2a5

60001e38 <__sm_set_pool_veneer>:
60001e38:	ldr.w	pc, [pc]	; 60001e3c <__sm_set_pool_veneer+0x4>
60001e3c:	.word	0x00009985

60001e40 <__usb_init_serialnumber_veneer>:
60001e40:	ldr.w	pc, [pc]	; 60001e44 <__usb_init_serialnumber_veneer+0x4>
60001e44:	.word	0x0000a0cd

60001e48 <__memset_veneer>:
60001e48:	ldr.w	pc, [pc]	; 60001e4c <__memset_veneer+0x4>
60001e4c:	.word	0x0000b9ed

60001e50 <__delay_veneer>:
60001e50:	ldr.w	pc, [pc]	; 60001e54 <__delay_veneer+0x4>
60001e54:	.word	0x00009275

60001e58 <__set_arm_clock_veneer>:
60001e58:	ldr.w	pc, [pc]	; 60001e5c <__set_arm_clock_veneer+0x4>
60001e5c:	.word	0x0000a45d

60001e60 <__pwm_init_veneer>:
60001e60:	ldr.w	pc, [pc]	; 60001e64 <__pwm_init_veneer+0x4>
60001e64:	.word	0x00009af9

60001e68 <__init_array_start>:
60001e68:	.word	0x00000045
60001e6c:	.word	0x00006405

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
void usb_config_tx_iso(uint32_t ep, uint32_t packet_size, int mult, void (*cb)(transfer_t *))
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
      20:	.word	0x4c05b510
      24:	ldrb	r3, [r4, #0]
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
      26:	.short	0xb933
      28:	ldr	r3, [pc, #16]	; (3c <__rtc_localtime+0xb>)
void usb_config_tx_iso(uint32_t ep, uint32_t packet_size, int mult, void (*cb)(transfer_t *))
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
      2a:	cbz	r3, 32 <__rtc_localtime+0x1>
      2c:	ldr	r0, [pc, #16]	; (40 <__rtc_localtime+0xf>)
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
      2e:	nop.w
      32:	movs	r3, #1
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
      34:	strb	r3, [r4, #0]
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
      36:	pop	{r4, pc}
      38:	cmp	r8, r1
      3a:	movs	r0, #0
      3c:	.word	0x00000000
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
      40:	eors.w	r0, r4, #8388608	; 0x800000

00000044 <frame_dummy>:

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
      44:	ldr	r3, [pc, #32]	; (68 <frame_dummy+0x24>)
      46:	push	{r4, lr}
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	ldr	r1, [pc, #32]	; (6c <frame_dummy+0x28>)
      4c:	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	nop.w
      52:	ldr	r0, [pc, #32]	; (74 <frame_dummy+0x30>)
      54:	ldr	r3, [r0, #0]
      56:	.short	0xb903
      58:	pop	{r4, pc}
      5a:	.short	0x4b07
      5c:	cmp	r3, #0
      5e:	.short	0xd0fb
      60:	ldmia.w	sp!, {r4, lr}
      64:	.word	0xbf004718
      mode |= ADC_CFG_AVGS(2);
      mode1 |= ADC_CFG_AVGS(2);

    } else if (num >= 8) {
      mode |= ADC_CFG_AVGS(1);
      mode1 |= ADC_CFG_AVGS(1);
      68:	movs	r0, r0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      6a:	movs	r0, r0
  ADC2_CFG = mode1;
  
  if(num >= 4){
      6c:	.word	0x2000458c
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      70:	eors.w	r0, r4, #8388608	; 0x800000
  ADC2_CFG = mode1;
  
  if(num >= 4){
      74:	.word	0x20001ec0
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
      78:	movs	r0, r0
	...

0000007c <MTPD::write(char const*, int) [clone .part.19]>:
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
      7c:	.word	0xe92d6843
    int fetch_packet(uint8_t *data_buffer)
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
      80:	blx	lr
      82:	.short	0x460e
      84:	mov	r8, r2
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
      86:	.short	0xb92b
      88:	ldr.w	sl, [pc, #112]	; fc <MTPD::write(char const*, int) [clone .part.19]+0x80>
      8c:	add.w	r2, r0, #544	; 0x220
      90:	.word	0x2000f8ca
        write_length_ += len;
      94:	add	r3, r8
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
      96:	cmp.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
      9a:	.short	0x6043
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
      9c:	ble.n	f6 <MTPD::write(char const*, int) [clone .part.19]+0x7a>
      9e:	add.w	r9, r0, #1056	; 0x420
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
      a2:	.short	0xf500
      a4:	strb	r0, [r1, #28]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
      a6:	.short	0x2500
      a8:	ldr.w	sl, [pc, #80]	; fc <MTPD::write(char const*, int) [clone .part.19]+0x80>
      ac:	.word	0x45a8e001
      b0:	ble.n	f6 <MTPD::write(char const*, int) [clone .part.19]+0x7a>
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
      b2:	.short	0xf8da
      b4:	movs	r0, r0
          int to_copy = min(len - pos, avail);
      b6:	.short	0xebc5
      b8:	lsls	r0, r1, #12
          memcpy(dst,src,to_copy);
      ba:	.short	0x4631
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
      bc:	rsb	r4, r0, r9
      c0:	.word	0xbfa8429c
      c4:	movge	r4, r3
          memcpy(dst,src,to_copy);
      c6:	.short	0x4622
          pos += to_copy;
      c8:	add	r5, r4
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
      ca:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
      ce:	ldr.w	r3, [sl]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
      d2:	add	r6, r4
          dst += to_copy;
      d4:	add	r4, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
      d6:	.short	0x454c
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
      d8:	str.w	r4, [sl]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
      dc:	.word	0x223cd1e7

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
      e0:	mov.w	r1, #512	; 0x200
      e4:	mov	r0, r7
      e6:	.short	0xf009
      e8:	vmlal.u8	q1, d11, d0
      ec:	ble.n	de <MTPD::write(char const*, int) [clone .part.19]+0x62>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
      ee:	cmp	r8, r5
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
      f0:	str.w	r7, [sl]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
      f4:	bgt.n	b2 <MTPD::write(char const*, int) [clone .part.19]+0x36>
      f6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      fa:	.short	0xbf00
      fc:	mov	r4, r0
      fe:	.short	0x2000

00000100 <Print::println(char const*)>:
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     100:	push	{r3, r4, r5, lr}
     102:	.short	0x4604
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     104:	mov	r0, r1
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     106:	.short	0x460d
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     108:	bl	c040 <strlen>
     10c:	ldr	r3, [r4, #0]
     10e:	mov	r2, r0
     110:	mov	r1, r5
     112:	mov	r0, r4
     114:	ldr	r3, [r3, #4]
     116:	blx	r3
     118:	mov	r5, r0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     11a:	mov	r0, r4
     11c:	.word	0xf928f00a
     120:	add	r0, r5
     122:	pop	{r3, r4, r5, pc}

00000124 <setup>:
//  BYTE pdrv = DEV_SPI;
//  const char *devName="zero";


extern "C" void setup() 
{
     124:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     128:	ldr	r0, [pc, #252]	; (228 <setup+0x104>)
     12a:	sub	sp, #16
     12c:	ldr	r4, [pc, #252]	; (22c <setup+0x108>)
     12e:	.short	0x4940
     130:	ldr	r2, [pc, #256]	; (234 <setup+0x110>)
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     132:	ldrb	r3, [r4, #0]
     134:	cmp	r3, #0
     136:	beq.n	132 <setup+0xe>
     138:	.word	0x07db7803
     13c:	bpl.n	132 <setup+0xe>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
     13e:	ldr	r3, [r1, #0]
     140:	ldr	r5, [r2, #0]
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
     142:	subs	r3, r3, r5
     144:	cmp	r3, #14
     146:	bls.n	132 <setup+0xe>
  // put your setup code here, to run once:
  while(!Serial);

  Serial.println("Test zeroLogger");
     148:	ldr	r1, [pc, #236]	; (238 <setup+0x114>)
     14a:	ldr	r0, [pc, #240]	; (23c <setup+0x118>)
     14c:	bl	100 <Print::println(char const*)>

#if defined(__IMXRT1062__)
  SerNum = HW_OCOTP_MAC0 & 0xFFFFFF;
     150:	ldr	r3, [pc, #236]	; (240 <setup+0x11c>)
     152:	.short	0x4c3c
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     154:	movs	r2, #14
     156:	ldr.w	r3, [r3, #544]	; 0x220
     15a:	.short	0x493b
     15c:	bic.w	r3, r3, #4278190080	; 0xff000000
     160:	.word	0x60234836
     164:	bl	a294 <usb_serial_class::write(unsigned char const*, unsigned int)>
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
     168:	.word	0x23006821
     16c:	movs	r2, #16
     16e:	.short	0x4833
     170:	bl	a3c0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(uint64_t n)			{ return print(n) + println(); }

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
     174:	.word	0xf00a4831
     178:	ldr??.w	r4, [fp, #2100]	; 0x834
  Serial.print("Serial Number "); Serial.println((int32_t)SerNum,HEX);
#else
  SerNum = 0xFFFFFF;
#endif  
  setSyncProvider((getExternalTime) rtc_get);
     17c:	.word	0xfae4f006
  Serial.printf("Now: %04d-%02d-%02d_%02d:%02d:%02d\r\n", 
     180:	bl	6724 <year()>
     184:	.word	0xf0064605
     188:			; <UNDEFINED> instruction: 0xfabd4607
     18c:	.word	0xfaaaf006
     190:	mov	r8, r0
     192:	.short	0xf006
     194:			; <UNDEFINED> instruction: 0xfa774604
     198:	.word	0xfa84f006
     19c:	mov	r6, r0
     19e:	.short	0xf006
     1a0:			; <UNDEFINED> instruction: 0xfa91492b
                      year(),month(),day(),hour(),minute(),second());
     1a4:	.word	0x463b9003
     1a8:	str.w	r8, [sp]
     1ac:	.word	0x9602462a
     1b0:	str	r4, [sp, #4]
     1b2:	ldr	r0, [pc, #136]	; (23c <setup+0x118>)
     1b4:	.word	0xf8f4f00a

  Serial.println("Enter 0 to skip write mode or 1 to logging");
     1b8:	ldr	r1, [pc, #152]	; (254 <setup+0x130>)
     1ba:	.short	0x4820
     1bc:	bl	100 <Print::println(char const*)>
				if (elapsed > 750) break;
			}
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
     1c0:	.word	0xfad6f008
  while(!Serial.available());
     1c4:	cmp	r0, #0
     1c6:	beq.n	1c0 <setup+0x9c>
  mode = Serial.parseInt();  
     1c8:	.word	0xf00a481c
     1cc:	str.w	r4, [sp, #2850]	; 0xb22
     1d0:	.word	0xb9e86018
    flag = Serial.parseInt();      
  }

  Serial.flush();

  for(int ii=0;ii<ndev;ii++) 
     1d4:	ldr	r7, [pc, #132]	; (25c <setup+0x138>)
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
     1d6:	.short	0xf008
     1d8:			; <UNDEFINED> instruction: 0xfb65883b
     1dc:	.word	0x4d20b19b
     1e0:	movs	r6, #0
     1e2:	.short	0x4c20
  { zFS[ii].Init(Dev[ii].dev, Dev[ii].cs, Dev[ii].name);
     1e4:	mov	r3, r4
     1e6:	.short	0xf814
     1e8:	cmp	r4, #2
     1ea:	.short	0xf814
     1ec:	adds	r1, r0, #0
     1ee:	.short	0x4628
     1f0:	bl	67ac <zeroFS_class::Init(unsigned char, unsigned char, char const*)>
    flag = Serial.parseInt();      
  }

  Serial.flush();

  for(int ii=0;ii<ndev;ii++) 
     1f4:	adds	r6, #1
     1f6:	.short	0x883b
     1f8:	add.w	r5, r5, #10816	; 0x2a40
     1fc:	.word	0x42b33420
     200:	add.w	r5, r5, #48	; 0x30
     204:	.word	0x4918dcee
  { zFS[ii].Init(Dev[ii].dev, Dev[ii].cs, Dev[ii].name);
  }

  Serial.println("Initialized"); while(1);
     208:	ldr	r0, [pc, #48]	; (23c <setup+0x118>)
     20a:	.short	0xf7ff
     20c:	vaba.u<illegal width 64>	q15, <illegal reg q12.5>, q15
  mode = Serial.parseInt();  

  uint32_t flag=1;
  if(mode>0)
  {
    Serial.println("Enter 0 to reset to beginning, 1 to continue logging, or 2 to append new 'root'");
     210:	.word	0x480a4916
     214:	bl	100 <Print::println(char const*)>
				if (elapsed > 750) break;
			}
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
     218:	bl	8770 <usb_serial_available>
    while(!Serial.available());
     21c:	.word	0xd0fb2800
    flag = Serial.parseInt();      
     220:	ldr	r0, [pc, #24]	; (23c <setup+0x118>)
     222:	.short	0xf00a
     224:	strh.w	lr, [r1, #2005]	; 0x7d5
     228:	.word	0x2000f1cd
     22c:	rsb	r0, lr, #0
     230:	.word	0x2000c720
     234:			; <UNDEFINED> instruction: 0xf2282000
     238:	.word	0x20000b4c
     23c:	asrs	r0, r1, #14
     23e:	movs	r0, #0
     240:	.word	0x401f4400
     244:	cmp	ip, r4
     246:	.short	0x2000
     248:	lsrs	r4, r3, #13
     24a:	.short	0x2000
     24c:	str	r5, [sp, #404]	; 0x194
     24e:	.short	0x0000
     250:	lsrs	r4, r5, #13
     252:	.short	0x2000
     254:	lsrs	r4, r2, #14
     256:	movs	r0, #0
     258:	.word	0x2000c6a4
     25c:	adds	r4, r3, r5
     25e:	.short	0x2000
     260:	stmia	r7!, {r3, r4, r5}
     262:	.short	0x2000
     264:	asrs	r2, r0, #11
     266:	.short	0x2000
     268:	lsrs	r0, r0, #13
     26a:	movs	r0, #0
     26c:	lsrs	r0, r6, #11
     26e:	movs	r0, #0

00000270 <MTPD::writestring(char const*)>:
  void write64(uint64_t x) { write((char*)&x, sizeof(x)); }

#define Store2Storage(x) (x+1)
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
     270:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (*str) 
     274:	ldrb	r3, [r1, #0]
  void write64(uint64_t x) { write((char*)&x, sizeof(x)); }

#define Store2Storage(x) (x+1)
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
     276:	.short	0xb083
     278:	mov	r9, r0
    if (*str) 
     27a:	.short	0x2b00
     27c:	beq.n	346 <MTPD::writestring(char const*)+0xd6>
    { write8(strlen(str) + 1);
     27e:	.short	0x4608
     280:	mov	sl, r1
     282:	bl	c040 <strlen>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     286:	.short	0xf899
     288:	asrs	r0, r0, #32
     28a:	.short	0x3001
      {
        write_length_ += len;
     28c:	ldr.w	r3, [r9, #4]
     290:	.word	0x0002f88d
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     294:	cmp	r1, #0
     296:	.short	0xf000
     298:	strh	r5, [r2, #4]
      {
        write_length_ += len;
     29a:	adds	r3, #1
     29c:	.word	0x3004f8c9
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
     2a0:	ldrb.w	r2, [sl]
     2a4:	.word	0xd0482a00
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     2a8:	add.w	r8, r9, #544	; 0x220
     2ac:	.word	0x3302e006
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
     2b0:	str.w	r3, [r9, #4]
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
     2b4:	.word	0x2f01f81a
     2b8:	cmp	r2, #0
     2ba:	.short	0xd039
     2bc:	strh.w	r2, [sp, #6]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     2c0:	.word	0xd1f42900
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     2c4:	ldr	r4, [pc, #500]	; (4bc <MTPD::writestring(char const*)+0x24c>)
     2c6:	.short	0x2b00
     2c8:	beq.n	35a <MTPD::writestring(char const*)+0xea>
     2ca:	.short	0x6820
        write_length_ += len;
     2cc:	adds	r3, #2
     2ce:	.short	0xf509
     2d0:	str	r4, [r0, #120]	; 0x78
        
        const char * src=data;
     2d2:	.short	0xf10d
     2d4:	lsls	r6, r0, #24
        //
        int pos = 0; // into data
     2d6:	.short	0x2500
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     2d8:	str.w	r3, [r9, #4]
     2dc:	.word	0x2d01e002
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     2e0:	bgt.n	320 <MTPD::writestring(char const*)+0xb0>
     2e2:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     2e4:	.word	0xf1c51a3a
     2e8:	lsls	r2, r0, #12
          memcpy(dst,src,to_copy);
     2ea:	mov	r1, r6
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     2ec:	.word	0xbfa8429a
     2f0:	movge	r2, r3
     2f2:	mov	fp, r2
          memcpy(dst,src,to_copy);
          pos += to_copy;
     2f4:	.word	0xf0074415
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     2f8:	cdp2	8, 13, cr6, cr13, cr2, {1}
          pos += to_copy;
          src += to_copy;
     2fc:	.word	0xeb02445e
          dst += to_copy;
     300:	lsls	r3, r1, #12
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     302:	cmp	r3, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     304:	.word	0xd1ea6023

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     308:	movs	r2, #60	; 0x3c
     30a:	.short	0xf44f
     30c:	strb	r0, [r0, #4]
     30e:	.short	0x4640
     310:	bl	a000 <usb_mtp_send>
     314:	.word	0xddf72800
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     318:	cmp	r5, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     31a:	.short	0xf8c4
     31c:	strh	r0, [r0, #0]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     31e:	ble.n	2e2 <MTPD::writestring(char const*)+0x72>
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
     320:	ldrb.w	r2, [sl, #1]!
     324:	ldrb.w	r1, [r9]
     328:	ldr.w	r3, [r9, #4]
     32c:	.word	0xd1c52a00
     330:	movs	r2, #0
     332:	.short	0xf8ad
     334:	movs	r0, #4
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     336:	.short	0x2900
     338:	beq.n	438 <MTPD::writestring(char const*)+0x1c8>
      {
        write_length_ += len;
     33a:	.short	0x3302
     33c:	str.w	r3, [r9, #4]
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    } else 
    { write8(0);
    }
  }
     340:	.word	0xe8bdb003
     344:	ldrh	r0, [r6, #62]	; 0x3e
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     346:	.short	0x7802
     348:	strb.w	r3, [sp, #3]
      {
        write_length_ += len;
     34c:	.word	0xb1426843
     350:	adds	r3, #1
     352:	.short	0x6043
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    } else 
    { write8(0);
    }
  }
     354:	add	sp, #12
     356:	.short	0xe8bd
     358:	ldrh	r0, [r6, #62]	; 0x3e
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     35a:	.short	0x4640
     35c:	str.w	r8, [r4]
     360:	b.n	2cc <MTPD::writestring(char const*)+0x5c>
     362:	.short	0x2b00
     364:	beq.w	496 <MTPD::writestring(char const*)+0x226>
     368:	.word	0x68204c54
        write_length_ += len;
     36c:	adds	r3, #1
     36e:	.short	0xf509
     370:	str	r4, [r0, #120]	; 0x78
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     372:	.short	0xf509
     374:	ldrb	r0, [r1, #0]
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
     376:	.short	0xf10d
     378:	lsls	r3, r0, #24
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     37a:	.short	0xf8c9
     37c:	adds	r0, #4
        
        const char * src=data;
        //
        int pos = 0; // into data
     37e:	.short	0xf04f
     380:	lsrs	r0, r0, #4
     382:	.short	0xe003
        while(pos<len)
     384:	cmp.w	r9, #0
     388:	.word	0x6820dce4
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     38c:	subs	r5, r7, r0
     38e:	.short	0xf1c9
     390:	lsls	r1, r0, #12
          memcpy(dst,src,to_copy);
     392:	.short	0x4631
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     394:	cmp	r5, r3
     396:	.short	0xbfa8
     398:	movge	r5, r3
          memcpy(dst,src,to_copy);
     39a:	.short	0x462a
          pos += to_copy;
     39c:	add	r9, r5
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     39e:	.short	0xf007
     3a0:	cdp2	8, 8, cr6, cr9, cr3, {1}
          pos += to_copy;
          src += to_copy;
     3a4:	.word	0x441d442e
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     3a8:	cmp	r5, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     3aa:	.short	0x6025
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     3ac:	bne.n	384 <MTPD::writestring(char const*)+0x114>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     3ae:	.short	0x223c
     3b0:	mov.w	r1, #512	; 0x200
     3b4:	.word	0xf0094640
     3b8:	cdp2	8, 2, cr2, cr3, cr0, {0}
     3bc:	.word	0xf8c4ddf7
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     3c0:	strh	r0, [r0, #0]
     3c2:	.short	0xe7df
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     3c4:	cmp	r3, #0
     3c6:	.short	0xd072
     3c8:	ldr	r4, [pc, #240]	; (4bc <MTPD::writestring(char const*)+0x24c>)
     3ca:	.short	0x6820
        write_length_ += len;
     3cc:	adds	r3, #1
     3ce:	.short	0xf509
     3d0:	ldr	r4, [r0, #8]
        
        const char * src=data;
     3d2:	.short	0xf10d
     3d4:	lsls	r2, r0, #28
        //
        int pos = 0; // into data
     3d6:	.short	0x2600
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     3d8:	str.w	r3, [r9, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     3dc:	.word	0x7b08f509
     3e0:	b.n	3e8 <MTPD::writestring(char const*)+0x178>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     3e2:	.short	0x2e00
     3e4:	bgt.n	424 <MTPD::writestring(char const*)+0x1b4>
     3e6:	.short	0x6820
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     3e8:	rsb	r5, r0, r8
     3ec:	.word	0x0301f1c6
          memcpy(dst,src,to_copy);
     3f0:	mov	r1, r7
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     3f2:	.short	0x429d
     3f4:	it	ge
     3f6:	.short	0x461d
          memcpy(dst,src,to_copy);
     3f8:	mov	r2, r5
          pos += to_copy;
     3fa:	.short	0x442e
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     3fc:	bl	80b4 <memcpy>	; unpredictable branch in IT block

          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     400:	.word	0x442f6823
     404:	add	r5, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     406:	.short	0x4545
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     408:	str	r5, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     40a:	.short	0xd1ea

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     40c:	movs	r2, #60	; 0x3c
     40e:	.short	0xf44f
     410:	strb	r0, [r0, #4]
     412:	.short	0x4658
     414:	bl	a000 <usb_mtp_send>	; unpredictable branch in IT block

     418:	.word	0xddf72800
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     41c:	cmp	r6, #0
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     41e:	.short	0xf8c4
     420:	add	sp, #0
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     422:	ble.n	3e6 <MTPD::writestring(char const*)+0x176>	; unpredictable <IT:ge>
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
     424:	ldrb.w	r2, [sl]
     428:	ldrb.w	r1, [r9]
     42c:	ldr.w	r3, [r9, #4]
     430:	cmp	r2, #0
     432:	bne.w	2a8 <MTPD::writestring(char const*)+0x38>
     436:	b.n	330 <MTPD::writestring(char const*)+0xc0>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     438:	cbz	r3, 4a2 <MTPD::writestring(char const*)+0x232>
     43a:	ldr	r4, [pc, #128]	; (4bc <MTPD::writestring(char const*)+0x24c>)
     43c:	ldr	r0, [r4, #0]
        write_length_ += len;
     43e:	adds	r3, #2
     440:	add.w	r7, r9, #1056	; 0x420
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     444:	add.w	r8, r9, #544	; 0x220
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
     448:	add	r6, sp, #4
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     44a:	str.w	r3, [r9, #4]
        
        const char * src=data;
        //
        int pos = 0; // into data
     44e:	mov.w	r9, #0
     452:	b.n	45e <MTPD::writestring(char const*)+0x1ee>
        while(pos<len)
     454:	cmp.w	r9, #1
     458:	bgt.w	354 <MTPD::writestring(char const*)+0xe4>
     45c:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     45e:	subs	r5, r7, r0
     460:	rsb	r3, r9, #2
          memcpy(dst,src,to_copy);
     464:	mov	r1, r6
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     466:	cmp	r5, r3
     468:	it	ge
     46a:	movge	r5, r3
          memcpy(dst,src,to_copy);
     46c:	mov	r2, r5
          pos += to_copy;
     46e:	add	r9, r5
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     470:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     474:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
     476:	add	r6, r5
          dst += to_copy;
     478:	add	r5, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     47a:	cmp	r5, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     47c:	str	r5, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     47e:	bne.n	454 <MTPD::writestring(char const*)+0x1e4>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     480:	movs	r2, #60	; 0x3c
     482:	mov.w	r1, #512	; 0x200
     486:	mov	r0, r8
     488:	bl	a000 <usb_mtp_send>
     48c:	cmp	r0, #0
     48e:	ble.n	480 <MTPD::writestring(char const*)+0x210>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     490:	str.w	r8, [r4]
     494:	b.n	454 <MTPD::writestring(char const*)+0x1e4>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     496:	add.w	r2, r0, #544	; 0x220
     49a:	ldr	r4, [pc, #32]	; (4bc <MTPD::writestring(char const*)+0x24c>)
     49c:	mov	r0, r2
     49e:	str	r2, [r4, #0]
     4a0:	b.n	36c <MTPD::writestring(char const*)+0xfc>
     4a2:	add.w	r2, r9, #544	; 0x220
     4a6:	ldr	r4, [pc, #20]	; (4bc <MTPD::writestring(char const*)+0x24c>)
     4a8:	mov	r0, r2
     4aa:	str	r2, [r4, #0]
     4ac:	b.n	43e <MTPD::writestring(char const*)+0x1ce>
     4ae:	add.w	r2, r9, #544	; 0x220
     4b2:	ldr	r4, [pc, #8]	; (4bc <MTPD::writestring(char const*)+0x24c>)
     4b4:	mov	r0, r2
     4b6:	str	r2, [r4, #0]
     4b8:	b.n	3cc <MTPD::writestring(char const*)+0x15c>
     4ba:	nop
     4bc:	.word	0x20004604

000004c0 <MTPD::WriteDescriptor()>:
    } else 
    { write8(0);
    }
  }

  void WriteDescriptor() {
     4c0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     4c4:	movs	r2, #100	; 0x64
     4c6:	sub	sp, #92	; 0x5c
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     4c8:	ldrb	r3, [r0, #0]
    } else 
    { write8(0);
    }
  }

  void WriteDescriptor() {
     4ca:	mov	r5, r0
     4cc:	strh.w	r2, [sp, #14]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     4d0:	cmp	r3, #0
     4d2:	beq.w	d70 <MTPD::WriteDescriptor()+0x8b0>
      {
        write_length_ += len;
     4d6:	ldr	r3, [r0, #4]
     4d8:	movs	r2, #6
     4da:	adds	r3, #2
     4dc:	str	r2, [sp, #48]	; 0x30
     4de:	movs	r2, #100	; 0x64
     4e0:	adds	r3, #4
     4e2:	strh.w	r2, [sp, #12]
     4e6:	movs	r2, #20
     4e8:	adds	r3, #2
     4ea:	strb.w	r2, [sp, #3]
     4ee:	adds	r3, #1
     4f0:	movs	r1, #1
     4f2:	str	r3, [r5, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     4f4:	add.w	r9, r5, #544	; 0x220
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
     4f8:	movs	r2, #109	; 0x6d
     4fa:	ldr.w	sl, [pc, #824]	; 834 <MTPD::WriteDescriptor()+0x374>
     4fe:	mov	r0, r9
     500:	mov	r9, r5
     502:	mov	r5, r0
     504:	b.n	514 <MTPD::WriteDescriptor()+0x54>
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
     506:	adds	r3, #2
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
     508:	ldrb.w	r2, [sl, #1]!
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
     50c:	str.w	r3, [r9, #4]
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
     510:	cmp	r2, #0
     512:	beq.n	588 <MTPD::WriteDescriptor()+0xc8>
     514:	strh.w	r2, [sp, #26]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     518:	cmp	r1, #0
     51a:	bne.n	506 <MTPD::WriteDescriptor()+0x46>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     51c:	ldr	r7, [pc, #772]	; (824 <MTPD::WriteDescriptor()+0x364>)
     51e:	cmp	r3, #0
     520:	beq.w	8d8 <MTPD::WriteDescriptor()+0x418>
     524:	ldr	r0, [r7, #0]
        write_length_ += len;
     526:	adds	r3, #2
     528:	add.w	fp, r9, #1056	; 0x420
        
        const char * src=data;
     52c:	add.w	r8, sp, #26
        //
        int pos = 0; // into data
     530:	movs	r6, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     532:	str.w	r3, [r9, #4]
     536:	b.n	53e <MTPD::WriteDescriptor()+0x7e>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     538:	cmp	r6, #1
     53a:	bgt.n	578 <MTPD::WriteDescriptor()+0xb8>
     53c:	ldr	r0, [r7, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     53e:	rsb	r4, r0, fp
     542:	rsb	r3, r6, #2
          memcpy(dst,src,to_copy);
     546:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     548:	cmp	r4, r3
     54a:	it	ge
     54c:	movge	r4, r3
          memcpy(dst,src,to_copy);
     54e:	mov	r2, r4
          pos += to_copy;
     550:	add	r6, r4
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     552:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     556:	ldr	r3, [r7, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
     558:	add	r8, r4
          dst += to_copy;
     55a:	add	r4, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     55c:	cmp	r4, fp
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     55e:	str	r4, [r7, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     560:	bne.n	538 <MTPD::WriteDescriptor()+0x78>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     562:	movs	r2, #60	; 0x3c
     564:	mov.w	r1, #512	; 0x200
     568:	mov	r0, r5
     56a:	bl	a000 <usb_mtp_send>
     56e:	cmp	r0, #0
     570:	ble.n	562 <MTPD::WriteDescriptor()+0xa2>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     572:	cmp	r6, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     574:	str	r5, [r7, #0]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     576:	ble.n	53c <MTPD::WriteDescriptor()+0x7c>
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
     578:	ldrb.w	r2, [sl, #1]!
     57c:	ldrb.w	r1, [r9]
     580:	ldr.w	r3, [r9, #4]
     584:	cmp	r2, #0
     586:	bne.n	514 <MTPD::WriteDescriptor()+0x54>
     588:	mov	r5, r9
     58a:	strh.w	r2, [sp, #24]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     58e:	cmp	r1, #0
     590:	beq.w	f3e <MTPD::WriteDescriptor()+0xa7e>
      {
        write_length_ += len;
     594:	adds	r3, #2
     596:	strh.w	r2, [sp, #10]
     59a:	movs	r2, #11
     59c:	adds	r3, #2
     59e:	str	r2, [sp, #44]	; 0x2c
     5a0:	adds	r3, #4
     5a2:	movs	r1, #1
     5a4:	str	r3, [r5, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     5a6:	add.w	r9, r5, #544	; 0x220
     5aa:	ldr.w	sl, [pc, #652]	; 838 <MTPD::WriteDescriptor()+0x378>
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
     5ae:	movw	r2, #4097	; 0x1001
     5b2:	mov	r0, r9
     5b4:	mov	r9, r5
     5b6:	mov	r5, r0
     5b8:	b.n	5ca <MTPD::WriteDescriptor()+0x10a>
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
    write32(supported_op_num);
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
     5ba:	ldr	r2, [pc, #620]	; (828 <MTPD::WriteDescriptor()+0x368>)
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
     5bc:	adds	r3, #2
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
    write32(supported_op_num);
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
     5be:	cmp	r2, sl
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
     5c0:	str.w	r3, [r9, #4]
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
    write32(supported_op_num);
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
     5c4:	beq.n	63c <MTPD::WriteDescriptor()+0x17c>
     5c6:	ldrh.w	r2, [sl, #2]!
     5ca:	strh.w	r2, [sp, #16]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     5ce:	cmp	r1, #0
     5d0:	bne.n	5ba <MTPD::WriteDescriptor()+0xfa>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     5d2:	ldr	r7, [pc, #592]	; (824 <MTPD::WriteDescriptor()+0x364>)
     5d4:	cmp	r3, #0
     5d6:	beq.w	8de <MTPD::WriteDescriptor()+0x41e>
     5da:	ldr	r0, [r7, #0]
        write_length_ += len;
     5dc:	adds	r3, #2
     5de:	add.w	fp, r9, #1056	; 0x420
        
        const char * src=data;
     5e2:	add.w	r8, sp, #16
        //
        int pos = 0; // into data
     5e6:	movs	r6, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     5e8:	str.w	r3, [r9, #4]
     5ec:	b.n	5f4 <MTPD::WriteDescriptor()+0x134>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     5ee:	cmp	r6, #1
     5f0:	bgt.n	62e <MTPD::WriteDescriptor()+0x16e>
     5f2:	ldr	r0, [r7, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     5f4:	rsb	r4, r0, fp
     5f8:	rsb	r3, r6, #2
          memcpy(dst,src,to_copy);
     5fc:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     5fe:	cmp	r4, r3
     600:	it	ge
     602:	movge	r4, r3
          memcpy(dst,src,to_copy);
     604:	mov	r2, r4
          pos += to_copy;
     606:	add	r6, r4
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     608:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     60c:	ldr	r3, [r7, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
     60e:	add	r8, r4
          dst += to_copy;
     610:	add	r4, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     612:	cmp	r4, fp
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     614:	str	r4, [r7, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     616:	bne.n	5ee <MTPD::WriteDescriptor()+0x12e>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     618:	movs	r2, #60	; 0x3c
     61a:	mov.w	r1, #512	; 0x200
     61e:	mov	r0, r5
     620:	bl	a000 <usb_mtp_send>
     624:	cmp	r0, #0
     626:	ble.n	618 <MTPD::WriteDescriptor()+0x158>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     628:	cmp	r6, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     62a:	str	r5, [r7, #0]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     62c:	ble.n	5f2 <MTPD::WriteDescriptor()+0x132>
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
    write32(supported_op_num);
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
     62e:	ldr	r2, [pc, #504]	; (828 <MTPD::WriteDescriptor()+0x368>)
     630:	ldrb.w	r1, [r9]
     634:	cmp	r2, sl
     636:	ldr.w	r3, [r9, #4]
     63a:	bne.n	5c6 <MTPD::WriteDescriptor()+0x106>
     63c:	movs	r2, #0
     63e:	mov	r5, r9
     640:	str	r2, [sp, #52]	; 0x34
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     642:	cmp	r1, #0
     644:	beq.w	9fc <MTPD::WriteDescriptor()+0x53c>
     648:	movs	r2, #1
      {
        write_length_ += len;
     64a:	adds	r3, #4
     64c:	str	r2, [sp, #64]	; 0x40
     64e:	movw	r2, #54274	; 0xd402
     652:	adds	r3, #4
     654:	strh.w	r2, [sp, #22]
     658:	movs	r2, #0
     65a:	adds	r3, #2
     65c:	str	r2, [sp, #60]	; 0x3c
     65e:	movs	r2, #2
     660:	adds	r3, #4
     662:	str	r2, [sp, #56]	; 0x38
     664:	mov.w	r2, #12288	; 0x3000
     668:	adds	r3, #4
     66a:	strh.w	r2, [sp, #20]
     66e:	movw	r2, #12289	; 0x3001
     672:	adds	r3, #2
     674:	strh.w	r2, [sp, #18]
     678:	movs	r2, #5
     67a:	adds	r3, #2
     67c:	strb.w	r2, [sp, #7]
     680:	adds	r3, #1
     682:	movs	r1, #1
     684:	str	r3, [r5, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     686:	add.w	r9, r5, #544	; 0x220
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
     68a:	movs	r2, #80	; 0x50
     68c:	ldr.w	sl, [pc, #428]	; 83c <MTPD::WriteDescriptor()+0x37c>
     690:	mov	r0, r9
     692:	mov	r9, r5
     694:	mov	r5, r0
     696:	b.n	6a6 <MTPD::WriteDescriptor()+0x1e6>
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
     698:	adds	r3, #2
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
     69a:	ldrb.w	r2, [sl, #1]!
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
     69e:	str.w	r3, [r9, #4]
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
     6a2:	cmp	r2, #0
     6a4:	beq.n	71a <MTPD::WriteDescriptor()+0x25a>
     6a6:	strh.w	r2, [sp, #30]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     6aa:	cmp	r1, #0
     6ac:	bne.n	698 <MTPD::WriteDescriptor()+0x1d8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     6ae:	ldr	r7, [pc, #372]	; (824 <MTPD::WriteDescriptor()+0x364>)
     6b0:	cmp	r3, #0
     6b2:	beq.w	8e4 <MTPD::WriteDescriptor()+0x424>
     6b6:	ldr	r0, [r7, #0]
        write_length_ += len;
     6b8:	adds	r3, #2
     6ba:	add.w	fp, r9, #1056	; 0x420
        
        const char * src=data;
     6be:	add.w	r8, sp, #30
        //
        int pos = 0; // into data
     6c2:	movs	r6, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     6c4:	str.w	r3, [r9, #4]
     6c8:	b.n	6d0 <MTPD::WriteDescriptor()+0x210>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     6ca:	cmp	r6, #1
     6cc:	bgt.n	70a <MTPD::WriteDescriptor()+0x24a>
     6ce:	ldr	r0, [r7, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     6d0:	rsb	r4, r0, fp
     6d4:	rsb	r3, r6, #2
          memcpy(dst,src,to_copy);
     6d8:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     6da:	cmp	r4, r3
     6dc:	it	ge
     6de:	movge	r4, r3
          memcpy(dst,src,to_copy);
     6e0:	mov	r2, r4
          pos += to_copy;
     6e2:	add	r6, r4
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     6e4:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     6e8:	ldr	r3, [r7, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
     6ea:	add	r8, r4
          dst += to_copy;
     6ec:	add	r4, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     6ee:	cmp	r4, fp
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     6f0:	str	r4, [r7, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     6f2:	bne.n	6ca <MTPD::WriteDescriptor()+0x20a>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     6f4:	movs	r2, #60	; 0x3c
     6f6:	mov.w	r1, #512	; 0x200
     6fa:	mov	r0, r5
     6fc:	bl	a000 <usb_mtp_send>
     700:	cmp	r0, #0
     702:	ble.n	6f4 <MTPD::WriteDescriptor()+0x234>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     704:	cmp	r6, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     706:	str	r5, [r7, #0]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     708:	ble.n	6ce <MTPD::WriteDescriptor()+0x20e>
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
     70a:	ldrb.w	r2, [sl, #1]!
     70e:	ldrb.w	r1, [r9]
     712:	ldr.w	r3, [r9, #4]
     716:	cmp	r2, #0
     718:	bne.n	6a6 <MTPD::WriteDescriptor()+0x1e6>
     71a:	mov	r5, r9
     71c:	strh.w	r2, [sp, #28]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     720:	cmp	r1, #0
     722:	beq.w	12b2 <MTPD::WriteDescriptor()+0xdf2>
     726:	movs	r2, #7
      {
        write_length_ += len;
     728:	adds	r3, #2
     72a:	strb.w	r2, [sp, #6]
     72e:	adds	r3, #1
     730:	movs	r1, #1
     732:	str	r3, [r5, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     734:	add.w	r9, r5, #544	; 0x220
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
     738:	movs	r2, #84	; 0x54
     73a:	ldr.w	sl, [pc, #260]	; 840 <MTPD::WriteDescriptor()+0x380>
     73e:	mov	r0, r9
     740:	mov	r9, r5
     742:	mov	r5, r0
     744:	b.n	754 <MTPD::WriteDescriptor()+0x294>
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
     746:	adds	r3, #2
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
     748:	ldrb.w	r2, [sl, #1]!
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
     74c:	str.w	r3, [r9, #4]
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
     750:	cmp	r2, #0
     752:	beq.n	7c8 <MTPD::WriteDescriptor()+0x308>
     754:	strh.w	r2, [sp, #34]	; 0x22
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     758:	cmp	r1, #0
     75a:	bne.n	746 <MTPD::WriteDescriptor()+0x286>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     75c:	ldr	r7, [pc, #196]	; (824 <MTPD::WriteDescriptor()+0x364>)
     75e:	cmp	r3, #0
     760:	beq.w	8ea <MTPD::WriteDescriptor()+0x42a>
     764:	ldr	r0, [r7, #0]
        write_length_ += len;
     766:	adds	r3, #2
     768:	add.w	fp, r9, #1056	; 0x420
        
        const char * src=data;
     76c:	add.w	r8, sp, #34	; 0x22
        //
        int pos = 0; // into data
     770:	movs	r6, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     772:	str.w	r3, [r9, #4]
     776:	b.n	77e <MTPD::WriteDescriptor()+0x2be>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     778:	cmp	r6, #1
     77a:	bgt.n	7b8 <MTPD::WriteDescriptor()+0x2f8>
     77c:	ldr	r0, [r7, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     77e:	rsb	r4, r0, fp
     782:	rsb	r3, r6, #2
          memcpy(dst,src,to_copy);
     786:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     788:	cmp	r4, r3
     78a:	it	ge
     78c:	movge	r4, r3
          memcpy(dst,src,to_copy);
     78e:	mov	r2, r4
          pos += to_copy;
     790:	add	r6, r4
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     792:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     796:	ldr	r3, [r7, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
     798:	add	r8, r4
          dst += to_copy;
     79a:	add	r4, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     79c:	cmp	r4, fp
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     79e:	str	r4, [r7, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     7a0:	bne.n	778 <MTPD::WriteDescriptor()+0x2b8>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     7a2:	movs	r2, #60	; 0x3c
     7a4:	mov.w	r1, #512	; 0x200
     7a8:	mov	r0, r5
     7aa:	bl	a000 <usb_mtp_send>
     7ae:	cmp	r0, #0
     7b0:	ble.n	7a2 <MTPD::WriteDescriptor()+0x2e2>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     7b2:	cmp	r6, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     7b4:	str	r5, [r7, #0]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     7b6:	ble.n	77c <MTPD::WriteDescriptor()+0x2bc>
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
     7b8:	ldrb.w	r2, [sl, #1]!
     7bc:	ldrb.w	r1, [r9]
     7c0:	ldr.w	r3, [r9, #4]
     7c4:	cmp	r2, #0
     7c6:	bne.n	754 <MTPD::WriteDescriptor()+0x294>
     7c8:	mov	r5, r9
     7ca:	strh.w	r2, [sp, #32]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     7ce:	cmp	r1, #0
     7d0:	beq.w	1404 <MTPD::WriteDescriptor()+0xf44>
      {
        write_length_ += len;
     7d4:	adds	r3, #2
     7d6:	str.w	r3, [r9, #4]
    writestring(MTP_MODEL);     // Model
    //writestring(MTP_VERS);      // version
    //writestring(MTP_SERNR);     // serial
    
    char buf[20];    
    dtostrf( (float)(TEENSYDUINO / 100.0f), 3, 2, buf);
     7da:	movs	r1, #2
     7dc:	vldr	s0, [pc, #76]	; 82c <MTPD::WriteDescriptor()+0x36c>
     7e0:	add	r2, sp, #68	; 0x44
     7e2:	movs	r0, #3
     7e4:	bl	95e4 <dtostrf>
    strlcat(buf, " / MTP " MTP_VERS, sizeof(buf) );
     7e8:	add	r0, sp, #68	; 0x44
     7ea:	movs	r2, #20
     7ec:	ldr	r1, [pc, #64]	; (830 <MTPD::WriteDescriptor()+0x370>)
     7ee:	bl	bf9c <strlcat>

#define Store2Storage(x) (x+1)
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
     7f2:	ldrb.w	r6, [sp, #68]	; 0x44
     7f6:	cmp	r6, #0
     7f8:	beq.n	8f6 <MTPD::WriteDescriptor()+0x436>
    { write8(strlen(str) + 1);
     7fa:	add	r0, sp, #68	; 0x44
     7fc:	bl	c040 <strlen>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     800:	ldrb	r4, [r5, #0]
     802:	adds	r0, #1
      {
        write_length_ += len;
     804:	ldr	r3, [r5, #4]
     806:	strb.w	r0, [sp, #5]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     80a:	cmp	r4, #0
     80c:	beq.w	138c <MTPD::WriteDescriptor()+0xecc>
      {
        write_length_ += len;
     810:	adds	r3, #1
     812:	str	r3, [r5, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     814:	add.w	r9, r5, #544	; 0x220
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
     818:	add.w	sl, sp, #68	; 0x44
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     81c:	mov	r2, r9
     81e:	mov	r9, r5
     820:	mov	r5, r2
     822:	b.n	852 <MTPD::WriteDescriptor()+0x392>
     824:	.word	0x20004604
     828:	.word	0x20000428
     82c:	.word	0x3fc51eb8
     830:	.word	0x20000be4
     834:	.word	0x20000bc0
     838:	.word	0x20000414
     83c:	.word	0x20000bd4
     840:	.word	0x20000bdc
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
     844:	adds	r3, #2
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
     846:	ldrb.w	r6, [sl, #1]!
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
     84a:	str.w	r3, [r9, #4]
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
     84e:	cmp	r6, #0
     850:	beq.n	8c4 <MTPD::WriteDescriptor()+0x404>
     852:	strh.w	r6, [sp, #38]	; 0x26
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     856:	cmp	r4, #0
     858:	bne.n	844 <MTPD::WriteDescriptor()+0x384>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     85a:	ldr	r7, [pc, #776]	; (b64 <MTPD::WriteDescriptor()+0x6a4>)
     85c:	cmp	r3, #0
     85e:	beq.n	8f0 <MTPD::WriteDescriptor()+0x430>
     860:	ldr	r0, [r7, #0]
        write_length_ += len;
     862:	adds	r3, #2
     864:	add.w	fp, r9, #1056	; 0x420
        
        const char * src=data;
     868:	add.w	r8, sp, #38	; 0x26
        //
        int pos = 0; // into data
     86c:	movs	r6, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     86e:	str.w	r3, [r9, #4]
     872:	b.n	87a <MTPD::WriteDescriptor()+0x3ba>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     874:	cmp	r6, #1
     876:	bgt.n	8b4 <MTPD::WriteDescriptor()+0x3f4>
     878:	ldr	r0, [r7, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     87a:	rsb	r4, r0, fp
     87e:	rsb	r3, r6, #2
          memcpy(dst,src,to_copy);
     882:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     884:	cmp	r4, r3
     886:	it	ge
     888:	movge	r4, r3
          memcpy(dst,src,to_copy);
     88a:	mov	r2, r4
          pos += to_copy;
     88c:	add	r6, r4
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     88e:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     892:	ldr	r3, [r7, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
     894:	add	r8, r4
          dst += to_copy;
     896:	add	r4, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     898:	cmp	r4, fp
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     89a:	str	r4, [r7, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     89c:	bne.n	874 <MTPD::WriteDescriptor()+0x3b4>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     89e:	movs	r2, #60	; 0x3c
     8a0:	mov.w	r1, #512	; 0x200
     8a4:	mov	r0, r5
     8a6:	bl	a000 <usb_mtp_send>
     8aa:	cmp	r0, #0
     8ac:	ble.n	89e <MTPD::WriteDescriptor()+0x3de>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     8ae:	cmp	r6, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     8b0:	str	r5, [r7, #0]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     8b2:	ble.n	878 <MTPD::WriteDescriptor()+0x3b8>
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
     8b4:	ldrb.w	r6, [sl, #1]!
     8b8:	ldrb.w	r4, [r9]
     8bc:	ldr.w	r3, [r9, #4]
     8c0:	cmp	r6, #0
     8c2:	bne.n	852 <MTPD::WriteDescriptor()+0x392>
     8c4:	mov	r5, r9
     8c6:	movs	r2, #0
     8c8:	strh.w	r2, [sp, #36]	; 0x24
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     8cc:	cmp	r4, #0
     8ce:	beq.w	11f4 <MTPD::WriteDescriptor()+0xd34>
      {
        write_length_ += len;
     8d2:	adds	r7, r3, #2
     8d4:	str	r7, [r5, #4]
     8d6:	b.n	908 <MTPD::WriteDescriptor()+0x448>
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     8d8:	mov	r0, r5
     8da:	str	r5, [r7, #0]
     8dc:	b.n	526 <MTPD::WriteDescriptor()+0x66>
     8de:	mov	r0, r5
     8e0:	str	r5, [r7, #0]
     8e2:	b.n	5dc <MTPD::WriteDescriptor()+0x11c>
     8e4:	mov	r0, r5
     8e6:	str	r5, [r7, #0]
     8e8:	b.n	6b8 <MTPD::WriteDescriptor()+0x1f8>
     8ea:	mov	r0, r5
     8ec:	str	r5, [r7, #0]
     8ee:	b.n	766 <MTPD::WriteDescriptor()+0x2a6>
     8f0:	mov	r0, r5
     8f2:	str	r5, [r7, #0]
     8f4:	b.n	862 <MTPD::WriteDescriptor()+0x3a2>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     8f6:	ldrb	r4, [r5, #0]
     8f8:	strb.w	r6, [sp, #4]
      {
        write_length_ += len;
     8fc:	ldr	r3, [r5, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     8fe:	cmp	r4, #0
     900:	beq.w	10e8 <MTPD::WriteDescriptor()+0xc28>
      {
        write_length_ += len;
     904:	adds	r7, r3, #1
     906:	str	r7, [r5, #4]
     908:	ldr	r2, [pc, #604]	; (b68 <MTPD::WriteDescriptor()+0x6a8>)
     90a:	add	r3, sp, #68	; 0x44
     90c:	add.w	r0, sp, #78	; 0x4e
    dtostrf( (float)(TEENSYDUINO / 100.0f), 3, 2, buf);
    strlcat(buf, " / MTP " MTP_VERS, sizeof(buf) );
    writestring( buf );    
    #pragma GCC diagnostic push
    #pragma GCC diagnostic ignored "-Warray-bounds"
    for (size_t i=0; i<10; i++) buf[i] = usb_string_serial_number.wString[i];
     910:	ldrh.w	r1, [r2, #2]!
     914:	strb.w	r1, [r3], #1
     918:	cmp	r0, r3
     91a:	bne.n	910 <MTPD::WriteDescriptor()+0x450>

#define Store2Storage(x) (x+1)
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
     91c:	ldrb.w	r6, [sp, #68]	; 0x44
     920:	cmp	r6, #0
     922:	beq.n	9e8 <MTPD::WriteDescriptor()+0x528>
    { write8(strlen(str) + 1);
     924:	add	r0, sp, #68	; 0x44
     926:	bl	c040 <strlen>
     92a:	adds	r0, #1
     92c:	strb.w	r0, [sp, #9]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     930:	cmp	r4, #0
     932:	beq.w	1182 <MTPD::WriteDescriptor()+0xcc2>
      {
        write_length_ += len;
     936:	adds	r3, r7, #1
     938:	str	r3, [r5, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     93a:	add.w	r9, r5, #544	; 0x220
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
     93e:	add.w	sl, sp, #68	; 0x44
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     942:	mov	r2, r9
     944:	mov	r9, r5
     946:	mov	r5, r2
     948:	b.n	958 <MTPD::WriteDescriptor()+0x498>
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
     94a:	adds	r3, #2
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
     94c:	ldrb.w	r6, [sl, #1]!
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
     950:	str.w	r3, [r9, #4]
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
     954:	cmp	r6, #0
     956:	beq.n	9ca <MTPD::WriteDescriptor()+0x50a>
     958:	strh.w	r6, [sp, #42]	; 0x2a
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     95c:	cmp	r4, #0
     95e:	bne.n	94a <MTPD::WriteDescriptor()+0x48a>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     960:	ldr	r7, [pc, #512]	; (b64 <MTPD::WriteDescriptor()+0x6a4>)
     962:	cmp	r3, #0
     964:	beq.n	9e2 <MTPD::WriteDescriptor()+0x522>
     966:	ldr	r0, [r7, #0]
        write_length_ += len;
     968:	adds	r3, #2
     96a:	add.w	fp, r9, #1056	; 0x420
        
        const char * src=data;
     96e:	add.w	r8, sp, #42	; 0x2a
        //
        int pos = 0; // into data
     972:	movs	r6, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     974:	str.w	r3, [r9, #4]
     978:	b.n	980 <MTPD::WriteDescriptor()+0x4c0>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     97a:	cmp	r6, #1
     97c:	bgt.n	9ba <MTPD::WriteDescriptor()+0x4fa>
     97e:	ldr	r0, [r7, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     980:	rsb	r4, r0, fp
     984:	rsb	r3, r6, #2
          memcpy(dst,src,to_copy);
     988:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     98a:	cmp	r4, r3
     98c:	it	ge
     98e:	movge	r4, r3
          memcpy(dst,src,to_copy);
     990:	mov	r2, r4
          pos += to_copy;
     992:	add	r6, r4
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     994:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     998:	ldr	r3, [r7, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
     99a:	add	r8, r4
          dst += to_copy;
     99c:	add	r4, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     99e:	cmp	r4, fp
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     9a0:	str	r4, [r7, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     9a2:	bne.n	97a <MTPD::WriteDescriptor()+0x4ba>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     9a4:	movs	r2, #60	; 0x3c
     9a6:	mov.w	r1, #512	; 0x200
     9aa:	mov	r0, r5
     9ac:	bl	a000 <usb_mtp_send>
     9b0:	cmp	r0, #0
     9b2:	ble.n	9a4 <MTPD::WriteDescriptor()+0x4e4>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     9b4:	cmp	r6, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     9b6:	str	r5, [r7, #0]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     9b8:	ble.n	97e <MTPD::WriteDescriptor()+0x4be>
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
     9ba:	ldrb.w	r6, [sl, #1]!
     9be:	ldrb.w	r4, [r9]
     9c2:	ldr.w	r3, [r9, #4]
     9c6:	cmp	r6, #0
     9c8:	bne.n	958 <MTPD::WriteDescriptor()+0x498>
     9ca:	mov	r5, r9
     9cc:	movs	r2, #0
     9ce:	strh.w	r2, [sp, #40]	; 0x28
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     9d2:	cmp	r4, #0
     9d4:	beq.w	1252 <MTPD::WriteDescriptor()+0xd92>
      {
        write_length_ += len;
     9d8:	adds	r3, #2
     9da:	str	r3, [r5, #4]
    #pragma GCC diagnostic push
    #pragma GCC diagnostic ignored "-Warray-bounds"
    for (size_t i=0; i<10; i++) buf[i] = usb_string_serial_number.wString[i];
    #pragma GCC diagnostic pop
    writestring(buf);    
  }
     9dc:	add	sp, #92	; 0x5c
     9de:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     9e2:	mov	r0, r5
     9e4:	str	r5, [r7, #0]
     9e6:	b.n	968 <MTPD::WriteDescriptor()+0x4a8>
     9e8:	strb.w	r6, [sp, #8]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     9ec:	cmp	r4, #0
     9ee:	beq.w	1088 <MTPD::WriteDescriptor()+0xbc8>
      {
        write_length_ += len;
     9f2:	adds	r3, r7, #1
     9f4:	str	r3, [r5, #4]
    #pragma GCC diagnostic push
    #pragma GCC diagnostic ignored "-Warray-bounds"
    for (size_t i=0; i<10; i++) buf[i] = usb_string_serial_number.wString[i];
    #pragma GCC diagnostic pop
    writestring(buf);    
  }
     9f6:	add	sp, #92	; 0x5c
     9f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     9fc:	cmp	r3, #0
     9fe:	beq.w	f32 <MTPD::WriteDescriptor()+0xa72>
     a02:	ldr	r4, [pc, #352]	; (b64 <MTPD::WriteDescriptor()+0x6a4>)
     a04:	ldr	r0, [r4, #0]
        write_length_ += len;
     a06:	adds	r3, #4
     a08:	add.w	r6, r5, #1056	; 0x420
        
        const char * src=data;
     a0c:	add.w	r9, sp, #52	; 0x34
        //
        int pos = 0; // into data
     a10:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     a14:	str	r3, [r5, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     a16:	add.w	sl, r5, #544	; 0x220
     a1a:	b.n	a24 <MTPD::WriteDescriptor()+0x564>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     a1c:	cmp.w	r8, #3
     a20:	bgt.n	a60 <MTPD::WriteDescriptor()+0x5a0>
     a22:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     a24:	subs	r7, r6, r0
     a26:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
     a2a:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     a2c:	cmp	r7, r3
     a2e:	it	ge
     a30:	movge	r7, r3
          memcpy(dst,src,to_copy);
     a32:	mov	r2, r7
          pos += to_copy;
     a34:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     a36:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     a3a:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
     a3c:	add	r9, r7
          dst += to_copy;
     a3e:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     a40:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     a42:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     a44:	bne.n	a1c <MTPD::WriteDescriptor()+0x55c>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     a46:	movs	r2, #60	; 0x3c
     a48:	mov.w	r1, #512	; 0x200
     a4c:	mov	r0, sl
     a4e:	bl	a000 <usb_mtp_send>
     a52:	cmp	r0, #0
     a54:	ble.n	a46 <MTPD::WriteDescriptor()+0x586>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     a56:	cmp.w	r8, #3
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     a5a:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     a5e:	ble.n	a22 <MTPD::WriteDescriptor()+0x562>
     a60:	movs	r1, #1
     a62:	ldrb	r2, [r5, #0]
     a64:	ldr	r3, [r5, #4]
     a66:	str	r1, [sp, #64]	; 0x40
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     a68:	cmp	r2, #0
     a6a:	bne.w	64e <MTPD::WriteDescriptor()+0x18e>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     a6e:	cmp	r3, #0
     a70:	beq.w	1476 <MTPD::WriteDescriptor()+0xfb6>
     a74:	ldr	r0, [r4, #0]
        write_length_ += len;
     a76:	adds	r3, #4
        
        const char * src=data;
     a78:	add.w	r9, sp, #64	; 0x40
        //
        int pos = 0; // into data
     a7c:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     a80:	add.w	sl, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     a84:	str	r3, [r5, #4]
     a86:	b.n	a90 <MTPD::WriteDescriptor()+0x5d0>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     a88:	cmp.w	r8, #3
     a8c:	bgt.n	acc <MTPD::WriteDescriptor()+0x60c>
     a8e:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     a90:	subs	r7, r6, r0
     a92:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
     a96:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     a98:	cmp	r7, r3
     a9a:	it	ge
     a9c:	movge	r7, r3
          memcpy(dst,src,to_copy);
     a9e:	mov	r2, r7
          pos += to_copy;
     aa0:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     aa2:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     aa6:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
     aa8:	add	r9, r7
          dst += to_copy;
     aaa:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     aac:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     aae:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     ab0:	bne.n	a88 <MTPD::WriteDescriptor()+0x5c8>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     ab2:	movs	r2, #60	; 0x3c
     ab4:	mov.w	r1, #512	; 0x200
     ab8:	mov	r0, sl
     aba:	bl	a000 <usb_mtp_send>
     abe:	cmp	r0, #0
     ac0:	ble.n	ab2 <MTPD::WriteDescriptor()+0x5f2>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     ac2:	cmp.w	r8, #3
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     ac6:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     aca:	ble.n	a8e <MTPD::WriteDescriptor()+0x5ce>
     acc:	movw	r1, #54274	; 0xd402
     ad0:	ldrb	r2, [r5, #0]
     ad2:	ldr	r3, [r5, #4]
     ad4:	strh.w	r1, [sp, #22]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     ad8:	cmp	r2, #0
     ada:	bne.w	658 <MTPD::WriteDescriptor()+0x198>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     ade:	cmp	r3, #0
     ae0:	beq.w	1178 <MTPD::WriteDescriptor()+0xcb8>
     ae4:	ldr	r0, [r4, #0]
        write_length_ += len;
     ae6:	adds	r3, #2
        
        const char * src=data;
     ae8:	add.w	r9, sp, #22
        //
        int pos = 0; // into data
     aec:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     af0:	add.w	sl, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     af4:	str	r3, [r5, #4]
     af6:	b.n	b00 <MTPD::WriteDescriptor()+0x640>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     af8:	cmp.w	r8, #1
     afc:	bgt.n	b3c <MTPD::WriteDescriptor()+0x67c>
     afe:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     b00:	subs	r7, r6, r0
     b02:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
     b06:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     b08:	cmp	r7, r3
     b0a:	it	ge
     b0c:	movge	r7, r3
          memcpy(dst,src,to_copy);
     b0e:	mov	r2, r7
          pos += to_copy;
     b10:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     b12:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     b16:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
     b18:	add	r9, r7
          dst += to_copy;
     b1a:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     b1c:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     b1e:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     b20:	bne.n	af8 <MTPD::WriteDescriptor()+0x638>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     b22:	movs	r2, #60	; 0x3c
     b24:	mov.w	r1, #512	; 0x200
     b28:	mov	r0, sl
     b2a:	bl	a000 <usb_mtp_send>
     b2e:	cmp	r0, #0
     b30:	ble.n	b22 <MTPD::WriteDescriptor()+0x662>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     b32:	cmp.w	r8, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     b36:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     b3a:	ble.n	afe <MTPD::WriteDescriptor()+0x63e>
     b3c:	movs	r1, #0
     b3e:	ldrb	r2, [r5, #0]
     b40:	ldr	r3, [r5, #4]
     b42:	str	r1, [sp, #60]	; 0x3c
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     b44:	cmp	r2, #0
     b46:	bne.w	65e <MTPD::WriteDescriptor()+0x19e>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     b4a:	cmp	r3, #0
     b4c:	beq.w	116e <MTPD::WriteDescriptor()+0xcae>
     b50:	ldr	r0, [r4, #0]
        write_length_ += len;
     b52:	adds	r3, #4
        
        const char * src=data;
     b54:	add.w	r9, sp, #60	; 0x3c
        //
        int pos = 0; // into data
     b58:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     b5c:	add.w	sl, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     b60:	str	r3, [r5, #4]
     b62:	b.n	b74 <MTPD::WriteDescriptor()+0x6b4>
     b64:	.word	0x20004604
     b68:	.word	0x2000193c
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     b6c:	cmp.w	r8, #3
     b70:	bgt.n	bb0 <MTPD::WriteDescriptor()+0x6f0>
     b72:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     b74:	subs	r7, r6, r0
     b76:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
     b7a:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     b7c:	cmp	r7, r3
     b7e:	it	ge
     b80:	movge	r7, r3
          memcpy(dst,src,to_copy);
     b82:	mov	r2, r7
          pos += to_copy;
     b84:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     b86:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     b8a:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
     b8c:	add	r9, r7
          dst += to_copy;
     b8e:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     b90:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     b92:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     b94:	bne.n	b6c <MTPD::WriteDescriptor()+0x6ac>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     b96:	movs	r2, #60	; 0x3c
     b98:	mov.w	r1, #512	; 0x200
     b9c:	mov	r0, sl
     b9e:	bl	a000 <usb_mtp_send>
     ba2:	cmp	r0, #0
     ba4:	ble.n	b96 <MTPD::WriteDescriptor()+0x6d6>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     ba6:	cmp.w	r8, #3
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     baa:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     bae:	ble.n	b72 <MTPD::WriteDescriptor()+0x6b2>
     bb0:	movs	r1, #2
     bb2:	ldrb	r2, [r5, #0]
     bb4:	ldr	r3, [r5, #4]
     bb6:	str	r1, [sp, #56]	; 0x38
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     bb8:	cmp	r2, #0
     bba:	bne.w	664 <MTPD::WriteDescriptor()+0x1a4>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     bbe:	cmp	r3, #0
     bc0:	beq.w	1164 <MTPD::WriteDescriptor()+0xca4>
     bc4:	ldr	r0, [r4, #0]
        write_length_ += len;
     bc6:	adds	r3, #4
        
        const char * src=data;
     bc8:	add.w	r9, sp, #56	; 0x38
        //
        int pos = 0; // into data
     bcc:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     bd0:	add.w	sl, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     bd4:	str	r3, [r5, #4]
     bd6:	b.n	be0 <MTPD::WriteDescriptor()+0x720>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     bd8:	cmp.w	r8, #3
     bdc:	bgt.n	c1c <MTPD::WriteDescriptor()+0x75c>
     bde:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     be0:	subs	r7, r6, r0
     be2:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
     be6:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     be8:	cmp	r7, r3
     bea:	it	ge
     bec:	movge	r7, r3
          memcpy(dst,src,to_copy);
     bee:	mov	r2, r7
          pos += to_copy;
     bf0:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     bf2:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     bf6:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
     bf8:	add	r9, r7
          dst += to_copy;
     bfa:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     bfc:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     bfe:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     c00:	bne.n	bd8 <MTPD::WriteDescriptor()+0x718>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     c02:	movs	r2, #60	; 0x3c
     c04:	mov.w	r1, #512	; 0x200
     c08:	mov	r0, sl
     c0a:	bl	a000 <usb_mtp_send>
     c0e:	cmp	r0, #0
     c10:	ble.n	c02 <MTPD::WriteDescriptor()+0x742>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     c12:	cmp.w	r8, #3
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     c16:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     c1a:	ble.n	bde <MTPD::WriteDescriptor()+0x71e>
     c1c:	mov.w	r1, #12288	; 0x3000
     c20:	ldrb	r2, [r5, #0]
     c22:	ldr	r3, [r5, #4]
     c24:	strh.w	r1, [sp, #20]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     c28:	cmp	r2, #0
     c2a:	bne.w	66e <MTPD::WriteDescriptor()+0x1ae>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     c2e:	cmp	r3, #0
     c30:	beq.w	115a <MTPD::WriteDescriptor()+0xc9a>
     c34:	ldr	r0, [r4, #0]
        write_length_ += len;
     c36:	adds	r3, #2
        
        const char * src=data;
     c38:	add.w	r9, sp, #20
        //
        int pos = 0; // into data
     c3c:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     c40:	add.w	sl, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     c44:	str	r3, [r5, #4]
     c46:	b.n	c50 <MTPD::WriteDescriptor()+0x790>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     c48:	cmp.w	r8, #1
     c4c:	bgt.n	c8c <MTPD::WriteDescriptor()+0x7cc>
     c4e:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     c50:	subs	r7, r6, r0
     c52:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
     c56:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     c58:	cmp	r7, r3
     c5a:	it	ge
     c5c:	movge	r7, r3
          memcpy(dst,src,to_copy);
     c5e:	mov	r2, r7
          pos += to_copy;
     c60:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     c62:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     c66:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
     c68:	add	r9, r7
          dst += to_copy;
     c6a:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     c6c:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     c6e:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     c70:	bne.n	c48 <MTPD::WriteDescriptor()+0x788>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     c72:	movs	r2, #60	; 0x3c
     c74:	mov.w	r1, #512	; 0x200
     c78:	mov	r0, sl
     c7a:	bl	a000 <usb_mtp_send>
     c7e:	cmp	r0, #0
     c80:	ble.n	c72 <MTPD::WriteDescriptor()+0x7b2>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     c82:	cmp.w	r8, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     c86:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     c8a:	ble.n	c4e <MTPD::WriteDescriptor()+0x78e>
     c8c:	movw	r1, #12289	; 0x3001
     c90:	ldrb	r2, [r5, #0]
     c92:	ldr	r3, [r5, #4]
     c94:	strh.w	r1, [sp, #18]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     c98:	cmp	r2, #0
     c9a:	bne.w	678 <MTPD::WriteDescriptor()+0x1b8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     c9e:	cmp	r3, #0
     ca0:	beq.w	1150 <MTPD::WriteDescriptor()+0xc90>
     ca4:	ldr	r0, [r4, #0]
        write_length_ += len;
     ca6:	adds	r3, #2
        
        const char * src=data;
     ca8:	add.w	r9, sp, #18
        //
        int pos = 0; // into data
     cac:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     cb0:	add.w	sl, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     cb4:	str	r3, [r5, #4]
     cb6:	b.n	cc0 <MTPD::WriteDescriptor()+0x800>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     cb8:	cmp.w	r8, #1
     cbc:	bgt.n	cfc <MTPD::WriteDescriptor()+0x83c>
     cbe:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     cc0:	subs	r7, r6, r0
     cc2:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
     cc6:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     cc8:	cmp	r7, r3
     cca:	it	ge
     ccc:	movge	r7, r3
          memcpy(dst,src,to_copy);
     cce:	mov	r2, r7
          pos += to_copy;
     cd0:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     cd2:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     cd6:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
     cd8:	add	r9, r7
          dst += to_copy;
     cda:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     cdc:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     cde:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     ce0:	bne.n	cb8 <MTPD::WriteDescriptor()+0x7f8>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     ce2:	movs	r2, #60	; 0x3c
     ce4:	mov.w	r1, #512	; 0x200
     ce8:	mov	r0, sl
     cea:	bl	a000 <usb_mtp_send>
     cee:	cmp	r0, #0
     cf0:	ble.n	ce2 <MTPD::WriteDescriptor()+0x822>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     cf2:	cmp.w	r8, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     cf6:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     cfa:	ble.n	cbe <MTPD::WriteDescriptor()+0x7fe>
     cfc:	movs	r1, #5
     cfe:	ldrb	r2, [r5, #0]
     d00:	ldr	r3, [r5, #4]
     d02:	strb.w	r1, [sp, #7]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     d06:	cmp	r2, #0
     d08:	bne.w	680 <MTPD::WriteDescriptor()+0x1c0>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     d0c:	cmp	r3, #0
     d0e:	beq.w	14ba <MTPD::WriteDescriptor()+0xffa>
     d12:	ldr	r0, [r4, #0]
        write_length_ += len;
     d14:	adds	r3, #1
        
        const char * src=data;
     d16:	add.w	r9, sp, #7
        //
        int pos = 0; // into data
     d1a:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     d1e:	add.w	sl, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     d22:	str	r3, [r5, #4]
     d24:	b.n	d2e <MTPD::WriteDescriptor()+0x86e>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     d26:	cmp.w	r8, #0
     d2a:	bgt.n	d6a <MTPD::WriteDescriptor()+0x8aa>
     d2c:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     d2e:	subs	r7, r6, r0
     d30:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
     d34:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     d36:	cmp	r7, r3
     d38:	it	ge
     d3a:	movge	r7, r3
          memcpy(dst,src,to_copy);
     d3c:	mov	r2, r7
          pos += to_copy;
     d3e:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     d40:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     d44:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
     d46:	add	r9, r7
          dst += to_copy;
     d48:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     d4a:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     d4c:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     d4e:	bne.n	d26 <MTPD::WriteDescriptor()+0x866>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     d50:	movs	r2, #60	; 0x3c
     d52:	mov.w	r1, #512	; 0x200
     d56:	mov	r0, sl
     d58:	bl	a000 <usb_mtp_send>
     d5c:	cmp	r0, #0
     d5e:	ble.n	d50 <MTPD::WriteDescriptor()+0x890>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     d60:	cmp.w	r8, #0
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     d64:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     d68:	ble.n	d2c <MTPD::WriteDescriptor()+0x86c>
     d6a:	ldrb	r1, [r5, #0]
     d6c:	ldr	r3, [r5, #4]
     d6e:	b.n	686 <MTPD::WriteDescriptor()+0x1c6>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     d70:	ldr	r3, [r0, #4]
     d72:	cmp	r3, #0
     d74:	beq.w	f26 <MTPD::WriteDescriptor()+0xa66>
     d78:	ldr	r4, [pc, #776]	; (1084 <MTPD::WriteDescriptor()+0xbc4>)
     d7a:	ldr	r0, [r4, #0]
        write_length_ += len;
     d7c:	adds	r3, #2
     d7e:	add.w	r6, r5, #1056	; 0x420
        
        const char * src=data;
     d82:	add.w	r9, sp, #14
        //
        int pos = 0; // into data
     d86:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     d8a:	str	r3, [r5, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     d8c:	add.w	sl, r5, #544	; 0x220
     d90:	b.n	d9a <MTPD::WriteDescriptor()+0x8da>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     d92:	cmp.w	r8, #1
     d96:	bgt.n	dd6 <MTPD::WriteDescriptor()+0x916>
     d98:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     d9a:	subs	r7, r6, r0
     d9c:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
     da0:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     da2:	cmp	r7, r3
     da4:	it	ge
     da6:	movge	r7, r3
          memcpy(dst,src,to_copy);
     da8:	mov	r2, r7
          pos += to_copy;
     daa:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     dac:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     db0:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
     db2:	add	r9, r7
          dst += to_copy;
     db4:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     db6:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     db8:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     dba:	bne.n	d92 <MTPD::WriteDescriptor()+0x8d2>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     dbc:	movs	r2, #60	; 0x3c
     dbe:	mov.w	r1, #512	; 0x200
     dc2:	mov	r0, sl
     dc4:	bl	a000 <usb_mtp_send>
     dc8:	cmp	r0, #0
     dca:	ble.n	dbc <MTPD::WriteDescriptor()+0x8fc>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     dcc:	cmp.w	r8, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     dd0:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     dd4:	ble.n	d98 <MTPD::WriteDescriptor()+0x8d8>
     dd6:	movs	r1, #6
     dd8:	ldrb	r2, [r5, #0]
     dda:	ldr	r3, [r5, #4]
     ddc:	str	r1, [sp, #48]	; 0x30
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     dde:	cmp	r2, #0
     de0:	bne.w	4de <MTPD::WriteDescriptor()+0x1e>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     de4:	cmp	r3, #0
     de6:	beq.w	148c <MTPD::WriteDescriptor()+0xfcc>
     dea:	ldr	r0, [r4, #0]
        write_length_ += len;
     dec:	adds	r3, #4
        
        const char * src=data;
     dee:	add.w	r9, sp, #48	; 0x30
        //
        int pos = 0; // into data
     df2:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     df6:	add.w	sl, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     dfa:	str	r3, [r5, #4]
     dfc:	b.n	e06 <MTPD::WriteDescriptor()+0x946>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     dfe:	cmp.w	r8, #3
     e02:	bgt.n	e42 <MTPD::WriteDescriptor()+0x982>
     e04:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     e06:	subs	r7, r6, r0
     e08:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
     e0c:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     e0e:	cmp	r7, r3
     e10:	it	ge
     e12:	movge	r7, r3
          memcpy(dst,src,to_copy);
     e14:	mov	r2, r7
          pos += to_copy;
     e16:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     e18:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     e1c:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
     e1e:	add	r9, r7
          dst += to_copy;
     e20:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     e22:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     e24:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     e26:	bne.n	dfe <MTPD::WriteDescriptor()+0x93e>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     e28:	movs	r2, #60	; 0x3c
     e2a:	mov.w	r1, #512	; 0x200
     e2e:	mov	r0, sl
     e30:	bl	a000 <usb_mtp_send>
     e34:	cmp	r0, #0
     e36:	ble.n	e28 <MTPD::WriteDescriptor()+0x968>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     e38:	cmp.w	r8, #3
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     e3c:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     e40:	ble.n	e04 <MTPD::WriteDescriptor()+0x944>
     e42:	movs	r1, #100	; 0x64
     e44:	ldrb	r2, [r5, #0]
     e46:	ldr	r3, [r5, #4]
     e48:	strh.w	r1, [sp, #12]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     e4c:	cmp	r2, #0
     e4e:	bne.w	4e6 <MTPD::WriteDescriptor()+0x26>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     e52:	cmp	r3, #0
     e54:	beq.w	1482 <MTPD::WriteDescriptor()+0xfc2>
     e58:	ldr	r0, [r4, #0]
        write_length_ += len;
     e5a:	adds	r3, #2
        
        const char * src=data;
     e5c:	add.w	r9, sp, #12
        //
        int pos = 0; // into data
     e60:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     e64:	add.w	sl, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     e68:	str	r3, [r5, #4]
     e6a:	b.n	e74 <MTPD::WriteDescriptor()+0x9b4>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     e6c:	cmp.w	r8, #1
     e70:	bgt.n	eb0 <MTPD::WriteDescriptor()+0x9f0>
     e72:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     e74:	subs	r7, r6, r0
     e76:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
     e7a:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     e7c:	cmp	r7, r3
     e7e:	it	ge
     e80:	movge	r7, r3
          memcpy(dst,src,to_copy);
     e82:	mov	r2, r7
          pos += to_copy;
     e84:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     e86:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     e8a:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
     e8c:	add	r9, r7
          dst += to_copy;
     e8e:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     e90:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     e92:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     e94:	bne.n	e6c <MTPD::WriteDescriptor()+0x9ac>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     e96:	movs	r2, #60	; 0x3c
     e98:	mov.w	r1, #512	; 0x200
     e9c:	mov	r0, sl
     e9e:	bl	a000 <usb_mtp_send>
     ea2:	cmp	r0, #0
     ea4:	ble.n	e96 <MTPD::WriteDescriptor()+0x9d6>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     ea6:	cmp.w	r8, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     eaa:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     eae:	ble.n	e72 <MTPD::WriteDescriptor()+0x9b2>
     eb0:	movs	r1, #20
     eb2:	ldrb	r2, [r5, #0]
     eb4:	ldr	r3, [r5, #4]
     eb6:	strb.w	r1, [sp, #3]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     eba:	cmp	r2, #0
     ebc:	bne.w	4ee <MTPD::WriteDescriptor()+0x2e>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     ec0:	cmp	r3, #0
     ec2:	beq.w	14e8 <MTPD::WriteDescriptor()+0x1028>
     ec6:	ldr	r0, [r4, #0]
        write_length_ += len;
     ec8:	adds	r3, #1
        
        const char * src=data;
     eca:	add.w	r9, sp, #3
        //
        int pos = 0; // into data
     ece:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     ed2:	add.w	sl, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     ed6:	str	r3, [r5, #4]
     ed8:	b.n	ee2 <MTPD::WriteDescriptor()+0xa22>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     eda:	cmp.w	r8, #0
     ede:	bgt.n	f1e <MTPD::WriteDescriptor()+0xa5e>
     ee0:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     ee2:	subs	r7, r6, r0
     ee4:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
     ee8:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     eea:	cmp	r7, r3
     eec:	it	ge
     eee:	movge	r7, r3
          memcpy(dst,src,to_copy);
     ef0:	mov	r2, r7
          pos += to_copy;
     ef2:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     ef4:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     ef8:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
     efa:	add	r9, r7
          dst += to_copy;
     efc:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     efe:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     f00:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     f02:	bne.n	eda <MTPD::WriteDescriptor()+0xa1a>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     f04:	movs	r2, #60	; 0x3c
     f06:	mov.w	r1, #512	; 0x200
     f0a:	mov	r0, sl
     f0c:	bl	a000 <usb_mtp_send>
     f10:	cmp	r0, #0
     f12:	ble.n	f04 <MTPD::WriteDescriptor()+0xa44>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     f14:	cmp.w	r8, #0
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     f18:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     f1c:	ble.n	ee0 <MTPD::WriteDescriptor()+0xa20>
     f1e:	ldrb	r1, [r5, #0]
     f20:	ldr	r3, [r5, #4]
     f22:	b.w	4f4 <MTPD::WriteDescriptor()+0x34>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     f26:	add.w	r2, r0, #544	; 0x220
     f2a:	ldr	r4, [pc, #344]	; (1084 <MTPD::WriteDescriptor()+0xbc4>)
     f2c:	mov	r0, r2
     f2e:	str	r2, [r4, #0]
     f30:	b.n	d7c <MTPD::WriteDescriptor()+0x8bc>
     f32:	add.w	r2, r9, #544	; 0x220
     f36:	ldr	r4, [pc, #332]	; (1084 <MTPD::WriteDescriptor()+0xbc4>)
     f38:	mov	r0, r2
     f3a:	str	r2, [r4, #0]
     f3c:	b.n	a06 <MTPD::WriteDescriptor()+0x546>
     f3e:	cmp	r3, #0
     f40:	beq.w	14dc <MTPD::WriteDescriptor()+0x101c>
     f44:	ldr	r4, [pc, #316]	; (1084 <MTPD::WriteDescriptor()+0xbc4>)
     f46:	ldr	r0, [r4, #0]
        write_length_ += len;
     f48:	adds	r3, #2
     f4a:	add.w	r6, r5, #1056	; 0x420
        
        const char * src=data;
     f4e:	add.w	r9, sp, #24
        //
        int pos = 0; // into data
     f52:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     f56:	str	r3, [r5, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     f58:	add.w	sl, r5, #544	; 0x220
     f5c:	b.n	f66 <MTPD::WriteDescriptor()+0xaa6>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     f5e:	cmp.w	r8, #1
     f62:	bgt.n	fa2 <MTPD::WriteDescriptor()+0xae2>
     f64:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     f66:	subs	r7, r6, r0
     f68:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
     f6c:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     f6e:	cmp	r7, r3
     f70:	it	ge
     f72:	movge	r7, r3
          memcpy(dst,src,to_copy);
     f74:	mov	r2, r7
          pos += to_copy;
     f76:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     f78:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     f7c:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
     f7e:	add	r9, r7
          dst += to_copy;
     f80:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     f82:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     f84:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     f86:	bne.n	f5e <MTPD::WriteDescriptor()+0xa9e>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     f88:	movs	r2, #60	; 0x3c
     f8a:	mov.w	r1, #512	; 0x200
     f8e:	mov	r0, sl
     f90:	bl	a000 <usb_mtp_send>
     f94:	cmp	r0, #0
     f96:	ble.n	f88 <MTPD::WriteDescriptor()+0xac8>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     f98:	cmp.w	r8, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     f9c:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     fa0:	ble.n	f64 <MTPD::WriteDescriptor()+0xaa4>
     fa2:	movs	r1, #0
     fa4:	ldrb	r2, [r5, #0]
     fa6:	ldr	r3, [r5, #4]
     fa8:	strh.w	r1, [sp, #10]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     fac:	cmp	r2, #0
     fae:	bne.w	59a <MTPD::WriteDescriptor()+0xda>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     fb2:	cmp	r3, #0
     fb4:	beq.w	146c <MTPD::WriteDescriptor()+0xfac>
     fb8:	ldr	r0, [r4, #0]
        write_length_ += len;
     fba:	adds	r3, #2
        
        const char * src=data;
     fbc:	add.w	r9, sp, #10
        //
        int pos = 0; // into data
     fc0:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     fc4:	add.w	sl, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     fc8:	str	r3, [r5, #4]
     fca:	b.n	fd4 <MTPD::WriteDescriptor()+0xb14>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     fcc:	cmp.w	r8, #1
     fd0:	bgt.n	1010 <MTPD::WriteDescriptor()+0xb50>
     fd2:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     fd4:	subs	r7, r6, r0
     fd6:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
     fda:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     fdc:	cmp	r7, r3
     fde:	it	ge
     fe0:	movge	r7, r3
          memcpy(dst,src,to_copy);
     fe2:	mov	r2, r7
          pos += to_copy;
     fe4:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     fe6:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     fea:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
     fec:	add	r9, r7
          dst += to_copy;
     fee:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     ff0:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     ff2:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     ff4:	bne.n	fcc <MTPD::WriteDescriptor()+0xb0c>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     ff6:	movs	r2, #60	; 0x3c
     ff8:	mov.w	r1, #512	; 0x200
     ffc:	mov	r0, sl
     ffe:	bl	a000 <usb_mtp_send>
    1002:	cmp	r0, #0
    1004:	ble.n	ff6 <MTPD::WriteDescriptor()+0xb36>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1006:	cmp.w	r8, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    100a:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    100e:	ble.n	fd2 <MTPD::WriteDescriptor()+0xb12>
    1010:	movs	r1, #11
    1012:	ldrb	r2, [r5, #0]
    1014:	ldr	r3, [r5, #4]
    1016:	str	r1, [sp, #44]	; 0x2c
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    1018:	cmp	r2, #0
    101a:	bne.w	5a0 <MTPD::WriteDescriptor()+0xe0>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    101e:	cmp	r3, #0
    1020:	beq.w	1462 <MTPD::WriteDescriptor()+0xfa2>
    1024:	ldr	r0, [r4, #0]
        write_length_ += len;
    1026:	adds	r3, #4
        
        const char * src=data;
    1028:	add.w	r9, sp, #44	; 0x2c
        //
        int pos = 0; // into data
    102c:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    1030:	add.w	sl, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    1034:	str	r3, [r5, #4]
    1036:	b.n	1040 <MTPD::WriteDescriptor()+0xb80>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1038:	cmp.w	r8, #3
    103c:	bgt.n	107c <MTPD::WriteDescriptor()+0xbbc>
    103e:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1040:	subs	r7, r6, r0
    1042:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    1046:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1048:	cmp	r7, r3
    104a:	it	ge
    104c:	movge	r7, r3
          memcpy(dst,src,to_copy);
    104e:	mov	r2, r7
          pos += to_copy;
    1050:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    1052:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1056:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    1058:	add	r9, r7
          dst += to_copy;
    105a:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    105c:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    105e:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1060:	bne.n	1038 <MTPD::WriteDescriptor()+0xb78>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    1062:	movs	r2, #60	; 0x3c
    1064:	mov.w	r1, #512	; 0x200
    1068:	mov	r0, sl
    106a:	bl	a000 <usb_mtp_send>
    106e:	cmp	r0, #0
    1070:	ble.n	1062 <MTPD::WriteDescriptor()+0xba2>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1072:	cmp.w	r8, #3
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    1076:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    107a:	ble.n	103e <MTPD::WriteDescriptor()+0xb7e>
    107c:	ldrb	r1, [r5, #0]
    107e:	ldr	r3, [r5, #4]
    1080:	b.w	5a6 <MTPD::WriteDescriptor()+0xe6>
    1084:	.word	0x20004604
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1088:	cmp	r7, #0
    108a:	beq.w	14a2 <MTPD::WriteDescriptor()+0xfe2>
    108e:	ldr	r4, [pc, #796]	; (13ac <MTPD::WriteDescriptor()+0xeec>)
    1090:	ldr	r0, [r4, #0]
        write_length_ += len;
    1092:	adds	r3, r7, #1
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    1094:	add.w	r8, r5, #544	; 0x220
    1098:	add.w	r7, r5, #1056	; 0x420
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    109c:	add	r6, sp, #8
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    109e:	str	r3, [r5, #4]
        
        const char * src=data;
        //
        int pos = 0; // into data
    10a0:	mov.w	r9, #0
    10a4:	b.n	10b0 <MTPD::WriteDescriptor()+0xbf0>
        while(pos<len)
    10a6:	cmp.w	r9, #0
    10aa:	bgt.w	9f6 <MTPD::WriteDescriptor()+0x536>
    10ae:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    10b0:	subs	r5, r7, r0
    10b2:	rsb	r3, r9, #1
          memcpy(dst,src,to_copy);
    10b6:	mov	r1, r6
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    10b8:	cmp	r5, r3
    10ba:	it	ge
    10bc:	movge	r5, r3
          memcpy(dst,src,to_copy);
    10be:	mov	r2, r5
          pos += to_copy;
    10c0:	add	r9, r5
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    10c2:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    10c6:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    10c8:	add	r6, r5
          dst += to_copy;
    10ca:	add	r5, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    10cc:	cmp	r5, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    10ce:	str	r5, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    10d0:	bne.n	10a6 <MTPD::WriteDescriptor()+0xbe6>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    10d2:	movs	r2, #60	; 0x3c
    10d4:	mov.w	r1, #512	; 0x200
    10d8:	mov	r0, r8
    10da:	bl	a000 <usb_mtp_send>
    10de:	cmp	r0, #0
    10e0:	ble.n	10d2 <MTPD::WriteDescriptor()+0xc12>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    10e2:	str.w	r8, [r4]
    10e6:	b.n	10a6 <MTPD::WriteDescriptor()+0xbe6>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    10e8:	cmp	r3, #0
    10ea:	beq.w	1496 <MTPD::WriteDescriptor()+0xfd6>
    10ee:	ldr	r4, [pc, #700]	; (13ac <MTPD::WriteDescriptor()+0xeec>)
    10f0:	ldr	r0, [r4, #0]
        write_length_ += len;
    10f2:	adds	r3, #1
    10f4:	add.w	r9, r5, #1056	; 0x420
        
        const char * src=data;
    10f8:	add.w	r8, sp, #4
        //
        int pos = 0; // into data
    10fc:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    10fe:	str	r3, [r5, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    1100:	add.w	sl, r5, #544	; 0x220
    1104:	b.n	110c <MTPD::WriteDescriptor()+0xc4c>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1106:	cmp	r7, #0
    1108:	bgt.n	1148 <MTPD::WriteDescriptor()+0xc88>
    110a:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    110c:	rsb	r6, r0, r9
    1110:	rsb	r3, r7, #1
          memcpy(dst,src,to_copy);
    1114:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1116:	cmp	r6, r3
    1118:	it	ge
    111a:	movge	r6, r3
          memcpy(dst,src,to_copy);
    111c:	mov	r2, r6
          pos += to_copy;
    111e:	add	r7, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    1120:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1124:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    1126:	add	r8, r6
          dst += to_copy;
    1128:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    112a:	cmp	r6, r9
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    112c:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    112e:	bne.n	1106 <MTPD::WriteDescriptor()+0xc46>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    1130:	movs	r2, #60	; 0x3c
    1132:	mov.w	r1, #512	; 0x200
    1136:	mov	r0, sl
    1138:	bl	a000 <usb_mtp_send>
    113c:	cmp	r0, #0
    113e:	ble.n	1130 <MTPD::WriteDescriptor()+0xc70>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1140:	cmp	r7, #0
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    1142:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1146:	ble.n	110a <MTPD::WriteDescriptor()+0xc4a>
    1148:	ldrb	r4, [r5, #0]
    114a:	ldr	r7, [r5, #4]
    114c:	b.w	908 <MTPD::WriteDescriptor()+0x448>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1150:	add.w	r2, r5, #544	; 0x220
    1154:	mov	r0, r2
    1156:	str	r2, [r4, #0]
    1158:	b.n	ca6 <MTPD::WriteDescriptor()+0x7e6>
    115a:	add.w	r2, r5, #544	; 0x220
    115e:	mov	r0, r2
    1160:	str	r2, [r4, #0]
    1162:	b.n	c36 <MTPD::WriteDescriptor()+0x776>
    1164:	add.w	r2, r5, #544	; 0x220
    1168:	mov	r0, r2
    116a:	str	r2, [r4, #0]
    116c:	b.n	bc6 <MTPD::WriteDescriptor()+0x706>
    116e:	add.w	r2, r5, #544	; 0x220
    1172:	mov	r0, r2
    1174:	str	r2, [r4, #0]
    1176:	b.n	b52 <MTPD::WriteDescriptor()+0x692>
    1178:	add.w	r2, r5, #544	; 0x220
    117c:	mov	r0, r2
    117e:	str	r2, [r4, #0]
    1180:	b.n	ae6 <MTPD::WriteDescriptor()+0x626>
    1182:	cmp	r7, #0
    1184:	beq.w	14ae <MTPD::WriteDescriptor()+0xfee>
    1188:	ldr	r4, [pc, #544]	; (13ac <MTPD::WriteDescriptor()+0xeec>)
    118a:	ldr	r0, [r4, #0]
        write_length_ += len;
    118c:	adds	r3, r7, #1
    118e:	add.w	r9, r5, #1056	; 0x420
        
        const char * src=data;
    1192:	add.w	r8, sp, #9
        //
        int pos = 0; // into data
    1196:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    1198:	str	r3, [r5, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    119a:	add.w	sl, r5, #544	; 0x220
    119e:	b.n	11a6 <MTPD::WriteDescriptor()+0xce6>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    11a0:	cmp	r7, #0
    11a2:	bgt.n	11e2 <MTPD::WriteDescriptor()+0xd22>
    11a4:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    11a6:	rsb	r6, r0, r9
    11aa:	rsb	r3, r7, #1
          memcpy(dst,src,to_copy);
    11ae:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    11b0:	cmp	r6, r3
    11b2:	it	ge
    11b4:	movge	r6, r3
          memcpy(dst,src,to_copy);
    11b6:	mov	r2, r6
          pos += to_copy;
    11b8:	add	r7, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    11ba:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    11be:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    11c0:	add	r8, r6
          dst += to_copy;
    11c2:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    11c4:	cmp	r6, r9
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    11c6:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    11c8:	bne.n	11a0 <MTPD::WriteDescriptor()+0xce0>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    11ca:	movs	r2, #60	; 0x3c
    11cc:	mov.w	r1, #512	; 0x200
    11d0:	mov	r0, sl
    11d2:	bl	a000 <usb_mtp_send>
    11d6:	cmp	r0, #0
    11d8:	ble.n	11ca <MTPD::WriteDescriptor()+0xd0a>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    11da:	cmp	r7, #0
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    11dc:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    11e0:	ble.n	11a4 <MTPD::WriteDescriptor()+0xce4>
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    11e2:	ldrb.w	r6, [sp, #68]	; 0x44
    11e6:	ldrb	r4, [r5, #0]
    11e8:	ldr	r3, [r5, #4]
    11ea:	cmp	r6, #0
    11ec:	bne.w	93a <MTPD::WriteDescriptor()+0x47a>
    11f0:	b.w	9cc <MTPD::WriteDescriptor()+0x50c>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    11f4:	cmp	r3, #0
    11f6:	beq.w	1514 <MTPD::WriteDescriptor()+0x1054>
    11fa:	ldr	r4, [pc, #432]	; (13ac <MTPD::WriteDescriptor()+0xeec>)
    11fc:	ldr	r0, [r4, #0]
        write_length_ += len;
    11fe:	adds	r3, #2
    1200:	add.w	r9, r5, #1056	; 0x420
        
        const char * src=data;
    1204:	add.w	r8, sp, #36	; 0x24
        //
        int pos = 0; // into data
    1208:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    120a:	str	r3, [r5, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    120c:	add.w	sl, r5, #544	; 0x220
    1210:	b.n	1218 <MTPD::WriteDescriptor()+0xd58>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1212:	cmp	r7, #1
    1214:	bgt.n	1148 <MTPD::WriteDescriptor()+0xc88>
    1216:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1218:	rsb	r6, r0, r9
    121c:	rsb	r3, r7, #2
          memcpy(dst,src,to_copy);
    1220:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1222:	cmp	r6, r3
    1224:	it	ge
    1226:	movge	r6, r3
          memcpy(dst,src,to_copy);
    1228:	mov	r2, r6
          pos += to_copy;
    122a:	add	r7, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    122c:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1230:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    1232:	add	r8, r6
          dst += to_copy;
    1234:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1236:	cmp	r6, r9
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1238:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    123a:	bne.n	1212 <MTPD::WriteDescriptor()+0xd52>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    123c:	movs	r2, #60	; 0x3c
    123e:	mov.w	r1, #512	; 0x200
    1242:	mov	r0, sl
    1244:	bl	a000 <usb_mtp_send>
    1248:	cmp	r0, #0
    124a:	ble.n	123c <MTPD::WriteDescriptor()+0xd7c>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    124c:	str.w	sl, [r4]
    1250:	b.n	1212 <MTPD::WriteDescriptor()+0xd52>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1252:	cmp	r3, #0
    1254:	beq.w	1508 <MTPD::WriteDescriptor()+0x1048>
    1258:	ldr	r4, [pc, #336]	; (13ac <MTPD::WriteDescriptor()+0xeec>)
    125a:	ldr	r0, [r4, #0]
        write_length_ += len;
    125c:	adds	r3, #2
    125e:	add.w	r7, r5, #1056	; 0x420
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    1262:	add.w	r8, r5, #544	; 0x220
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    1266:	add	r6, sp, #40	; 0x28
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    1268:	str	r3, [r5, #4]
        
        const char * src=data;
        //
        int pos = 0; // into data
    126a:	mov.w	r9, #0
    126e:	b.n	127a <MTPD::WriteDescriptor()+0xdba>
        while(pos<len)
    1270:	cmp.w	r9, #1
    1274:	bgt.w	9f6 <MTPD::WriteDescriptor()+0x536>
    1278:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    127a:	subs	r5, r7, r0
    127c:	rsb	r3, r9, #2
          memcpy(dst,src,to_copy);
    1280:	mov	r1, r6
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1282:	cmp	r5, r3
    1284:	it	ge
    1286:	movge	r5, r3
          memcpy(dst,src,to_copy);
    1288:	mov	r2, r5
          pos += to_copy;
    128a:	add	r9, r5
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    128c:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1290:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    1292:	add	r6, r5
          dst += to_copy;
    1294:	add	r5, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1296:	cmp	r5, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1298:	str	r5, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    129a:	bne.n	1270 <MTPD::WriteDescriptor()+0xdb0>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    129c:	movs	r2, #60	; 0x3c
    129e:	mov.w	r1, #512	; 0x200
    12a2:	mov	r0, r8
    12a4:	bl	a000 <usb_mtp_send>
    12a8:	cmp	r0, #0
    12aa:	ble.n	129c <MTPD::WriteDescriptor()+0xddc>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    12ac:	str.w	r8, [r4]
    12b0:	b.n	1270 <MTPD::WriteDescriptor()+0xdb0>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    12b2:	cmp	r3, #0
    12b4:	beq.w	14fc <MTPD::WriteDescriptor()+0x103c>
    12b8:	ldr	r4, [pc, #240]	; (13ac <MTPD::WriteDescriptor()+0xeec>)
    12ba:	ldr	r0, [r4, #0]
        write_length_ += len;
    12bc:	adds	r3, #2
    12be:	add.w	r6, r5, #1056	; 0x420
        
        const char * src=data;
    12c2:	add.w	r9, sp, #28
        //
        int pos = 0; // into data
    12c6:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    12ca:	str	r3, [r5, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    12cc:	add.w	sl, r5, #544	; 0x220
    12d0:	b.n	12da <MTPD::WriteDescriptor()+0xe1a>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    12d2:	cmp.w	r8, #1
    12d6:	bgt.n	1316 <MTPD::WriteDescriptor()+0xe56>
    12d8:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    12da:	subs	r7, r6, r0
    12dc:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    12e0:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    12e2:	cmp	r7, r3
    12e4:	it	ge
    12e6:	movge	r7, r3
          memcpy(dst,src,to_copy);
    12e8:	mov	r2, r7
          pos += to_copy;
    12ea:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    12ec:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    12f0:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    12f2:	add	r9, r7
          dst += to_copy;
    12f4:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    12f6:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    12f8:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    12fa:	bne.n	12d2 <MTPD::WriteDescriptor()+0xe12>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    12fc:	movs	r2, #60	; 0x3c
    12fe:	mov.w	r1, #512	; 0x200
    1302:	mov	r0, sl
    1304:	bl	a000 <usb_mtp_send>
    1308:	cmp	r0, #0
    130a:	ble.n	12fc <MTPD::WriteDescriptor()+0xe3c>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    130c:	cmp.w	r8, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    1310:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1314:	ble.n	12d8 <MTPD::WriteDescriptor()+0xe18>
    1316:	movs	r1, #7
    1318:	ldrb	r2, [r5, #0]
    131a:	ldr	r3, [r5, #4]
    131c:	strb.w	r1, [sp, #6]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    1320:	cmp	r2, #0
    1322:	bne.w	72e <MTPD::WriteDescriptor()+0x26e>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1326:	cmp	r3, #0
    1328:	beq.w	14f2 <MTPD::WriteDescriptor()+0x1032>
    132c:	ldr	r0, [r4, #0]
        write_length_ += len;
    132e:	adds	r3, #1
        
        const char * src=data;
    1330:	add.w	r9, sp, #6
        //
        int pos = 0; // into data
    1334:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    1338:	add.w	sl, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    133c:	str	r3, [r5, #4]
    133e:	b.n	1348 <MTPD::WriteDescriptor()+0xe88>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1340:	cmp.w	r8, #0
    1344:	bgt.n	1384 <MTPD::WriteDescriptor()+0xec4>
    1346:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1348:	subs	r7, r6, r0
    134a:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    134e:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1350:	cmp	r7, r3
    1352:	it	ge
    1354:	movge	r7, r3
          memcpy(dst,src,to_copy);
    1356:	mov	r2, r7
          pos += to_copy;
    1358:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    135a:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    135e:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    1360:	add	r9, r7
          dst += to_copy;
    1362:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1364:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1366:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1368:	bne.n	1340 <MTPD::WriteDescriptor()+0xe80>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    136a:	movs	r2, #60	; 0x3c
    136c:	mov.w	r1, #512	; 0x200
    1370:	mov	r0, sl
    1372:	bl	a000 <usb_mtp_send>
    1376:	cmp	r0, #0
    1378:	ble.n	136a <MTPD::WriteDescriptor()+0xeaa>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    137a:	cmp.w	r8, #0
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    137e:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1382:	ble.n	1346 <MTPD::WriteDescriptor()+0xe86>
    1384:	ldrb	r1, [r5, #0]
    1386:	ldr	r3, [r5, #4]
    1388:	b.w	734 <MTPD::WriteDescriptor()+0x274>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    138c:	cmp	r3, #0
    138e:	beq.w	14d0 <MTPD::WriteDescriptor()+0x1010>
    1392:	ldr	r4, [pc, #24]	; (13ac <MTPD::WriteDescriptor()+0xeec>)
    1394:	ldr	r0, [r4, #0]
        write_length_ += len;
    1396:	adds	r3, #1
    1398:	add.w	r9, r5, #1056	; 0x420
        
        const char * src=data;
    139c:	add.w	r8, sp, #5
        //
        int pos = 0; // into data
    13a0:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    13a2:	str	r3, [r5, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    13a4:	add.w	sl, r5, #544	; 0x220
    13a8:	b.n	13b6 <MTPD::WriteDescriptor()+0xef6>
    13aa:	nop
    13ac:	.word	0x20004604
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    13b0:	cmp	r7, #0
    13b2:	bgt.n	13f2 <MTPD::WriteDescriptor()+0xf32>
    13b4:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    13b6:	rsb	r6, r0, r9
    13ba:	rsb	r3, r7, #1
          memcpy(dst,src,to_copy);
    13be:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    13c0:	cmp	r6, r3
    13c2:	it	ge
    13c4:	movge	r6, r3
          memcpy(dst,src,to_copy);
    13c6:	mov	r2, r6
          pos += to_copy;
    13c8:	add	r7, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    13ca:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    13ce:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    13d0:	add	r8, r6
          dst += to_copy;
    13d2:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    13d4:	cmp	r6, r9
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    13d6:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    13d8:	bne.n	13b0 <MTPD::WriteDescriptor()+0xef0>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    13da:	movs	r2, #60	; 0x3c
    13dc:	mov.w	r1, #512	; 0x200
    13e0:	mov	r0, sl
    13e2:	bl	a000 <usb_mtp_send>
    13e6:	cmp	r0, #0
    13e8:	ble.n	13da <MTPD::WriteDescriptor()+0xf1a>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    13ea:	cmp	r7, #0
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    13ec:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    13f0:	ble.n	13b4 <MTPD::WriteDescriptor()+0xef4>
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    13f2:	ldrb.w	r6, [sp, #68]	; 0x44
    13f6:	ldrb	r4, [r5, #0]
    13f8:	ldr	r3, [r5, #4]
    13fa:	cmp	r6, #0
    13fc:	bne.w	814 <MTPD::WriteDescriptor()+0x354>
    1400:	b.w	8c6 <MTPD::WriteDescriptor()+0x406>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1404:	cmp	r3, #0
    1406:	beq.n	14c4 <MTPD::WriteDescriptor()+0x1004>
    1408:	ldr	r4, [pc, #276]	; (1520 <MTPD::WriteDescriptor()+0x1060>)
    140a:	ldr	r0, [r4, #0]
        write_length_ += len;
    140c:	adds	r3, #2
    140e:	add.w	r9, r5, #1056	; 0x420
        
        const char * src=data;
    1412:	add.w	r8, sp, #32
        //
        int pos = 0; // into data
    1416:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    1418:	str	r3, [r5, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    141a:	add.w	sl, r5, #544	; 0x220
    141e:	b.n	1428 <MTPD::WriteDescriptor()+0xf68>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1420:	cmp	r7, #1
    1422:	bgt.w	7da <MTPD::WriteDescriptor()+0x31a>
    1426:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1428:	rsb	r6, r0, r9
    142c:	rsb	r3, r7, #2
          memcpy(dst,src,to_copy);
    1430:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1432:	cmp	r6, r3
    1434:	it	ge
    1436:	movge	r6, r3
          memcpy(dst,src,to_copy);
    1438:	mov	r2, r6
          pos += to_copy;
    143a:	add	r7, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    143c:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1440:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    1442:	add	r8, r6
          dst += to_copy;
    1444:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1446:	cmp	r6, r9
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1448:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    144a:	bne.n	1420 <MTPD::WriteDescriptor()+0xf60>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    144c:	movs	r2, #60	; 0x3c
    144e:	mov.w	r1, #512	; 0x200
    1452:	mov	r0, sl
    1454:	bl	a000 <usb_mtp_send>
    1458:	cmp	r0, #0
    145a:	ble.n	144c <MTPD::WriteDescriptor()+0xf8c>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    145c:	str.w	sl, [r4]
    1460:	b.n	1420 <MTPD::WriteDescriptor()+0xf60>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1462:	add.w	r2, r5, #544	; 0x220
    1466:	mov	r0, r2
    1468:	str	r2, [r4, #0]
    146a:	b.n	1026 <MTPD::WriteDescriptor()+0xb66>
    146c:	add.w	r2, r5, #544	; 0x220
    1470:	mov	r0, r2
    1472:	str	r2, [r4, #0]
    1474:	b.n	fba <MTPD::WriteDescriptor()+0xafa>
    1476:	add.w	r2, r5, #544	; 0x220
    147a:	mov	r0, r2
    147c:	str	r2, [r4, #0]
    147e:	b.w	a76 <MTPD::WriteDescriptor()+0x5b6>
    1482:	add.w	r2, r5, #544	; 0x220
    1486:	mov	r0, r2
    1488:	str	r2, [r4, #0]
    148a:	b.n	e5a <MTPD::WriteDescriptor()+0x99a>
    148c:	add.w	r2, r5, #544	; 0x220
    1490:	mov	r0, r2
    1492:	str	r2, [r4, #0]
    1494:	b.n	dec <MTPD::WriteDescriptor()+0x92c>
    1496:	add.w	r2, r5, #544	; 0x220
    149a:	ldr	r4, [pc, #132]	; (1520 <MTPD::WriteDescriptor()+0x1060>)
    149c:	mov	r0, r2
    149e:	str	r2, [r4, #0]
    14a0:	b.n	10f2 <MTPD::WriteDescriptor()+0xc32>
    14a2:	add.w	r3, r5, #544	; 0x220
    14a6:	ldr	r4, [pc, #120]	; (1520 <MTPD::WriteDescriptor()+0x1060>)
    14a8:	mov	r0, r3
    14aa:	str	r3, [r4, #0]
    14ac:	b.n	1092 <MTPD::WriteDescriptor()+0xbd2>
    14ae:	add.w	r3, r5, #544	; 0x220
    14b2:	ldr	r4, [pc, #108]	; (1520 <MTPD::WriteDescriptor()+0x1060>)
    14b4:	mov	r0, r3
    14b6:	str	r3, [r4, #0]
    14b8:	b.n	118c <MTPD::WriteDescriptor()+0xccc>
    14ba:	add.w	r2, r5, #544	; 0x220
    14be:	mov	r0, r2
    14c0:	str	r2, [r4, #0]
    14c2:	b.n	d14 <MTPD::WriteDescriptor()+0x854>
    14c4:	add.w	r2, r9, #544	; 0x220
    14c8:	ldr	r4, [pc, #84]	; (1520 <MTPD::WriteDescriptor()+0x1060>)
    14ca:	mov	r0, r2
    14cc:	str	r2, [r4, #0]
    14ce:	b.n	140c <MTPD::WriteDescriptor()+0xf4c>
    14d0:	add.w	r2, r5, #544	; 0x220
    14d4:	ldr	r4, [pc, #72]	; (1520 <MTPD::WriteDescriptor()+0x1060>)
    14d6:	mov	r0, r2
    14d8:	str	r2, [r4, #0]
    14da:	b.n	1396 <MTPD::WriteDescriptor()+0xed6>
    14dc:	add.w	r2, r9, #544	; 0x220
    14e0:	ldr	r4, [pc, #60]	; (1520 <MTPD::WriteDescriptor()+0x1060>)
    14e2:	mov	r0, r2
    14e4:	str	r2, [r4, #0]
    14e6:	b.n	f48 <MTPD::WriteDescriptor()+0xa88>
    14e8:	add.w	r2, r5, #544	; 0x220
    14ec:	mov	r0, r2
    14ee:	str	r2, [r4, #0]
    14f0:	b.n	ec8 <MTPD::WriteDescriptor()+0xa08>
    14f2:	add.w	r2, r5, #544	; 0x220
    14f6:	mov	r0, r2
    14f8:	str	r2, [r4, #0]
    14fa:	b.n	132e <MTPD::WriteDescriptor()+0xe6e>
    14fc:	add.w	r2, r9, #544	; 0x220
    1500:	ldr	r4, [pc, #28]	; (1520 <MTPD::WriteDescriptor()+0x1060>)
    1502:	mov	r0, r2
    1504:	str	r2, [r4, #0]
    1506:	b.n	12bc <MTPD::WriteDescriptor()+0xdfc>
    1508:	add.w	r2, r5, #544	; 0x220
    150c:	ldr	r4, [pc, #16]	; (1520 <MTPD::WriteDescriptor()+0x1060>)
    150e:	mov	r0, r2
    1510:	str	r2, [r4, #0]
    1512:	b.n	125c <MTPD::WriteDescriptor()+0xd9c>
    1514:	add.w	r2, r5, #544	; 0x220
    1518:	ldr	r4, [pc, #4]	; (1520 <MTPD::WriteDescriptor()+0x1060>)
    151a:	mov	r0, r2
    151c:	str	r2, [r4, #0]
    151e:	b.n	11fe <MTPD::WriteDescriptor()+0xd3e>
    1520:	.word	0x20004604

00001524 <MTPD::GetStorageInfo(unsigned long)>:
    uint32_t num=1;//mFS_get_FSCount();
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
  }

  void GetStorageInfo(uint32_t storage) {
    1524:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1528:	movs	r2, #1
    152a:	sub	sp, #52	; 0x34
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    152c:	ldrb	r3, [r0, #0]
    uint32_t num=1;//mFS_get_FSCount();
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
  }

  void GetStorageInfo(uint32_t storage) {
    152e:	mov	r6, r0
    uint32_t store = Storage2Store(storage);
    1530:	add.w	r9, r1, #4294967295
    1534:	strh.w	r2, [sp, #22]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    1538:	cmp	r3, #0
    153a:	beq.w	1846 <MTPD::GetStorageInfo(unsigned long)+0x322>
    153e:	movs	r2, #2
      {
        write_length_ += len;
    1540:	ldr	r3, [r0, #4]
    1542:	add	r3, r2
    1544:	strh.w	r2, [sp, #20]
    1548:	movs	r2, #0
    154a:	adds	r3, #2
    154c:	strh.w	r2, [sp, #18]
    1550:	adds	r3, #2
    1552:	movs	r4, #1
    1554:	str	r3, [r6, #4]
public:
    uint32_t Count(uint32_t store,uint32_t parent) {return zFs_[store].Count(parent);}
    uint32_t Next(uint32_t store) {return zFs_[store].Next();}

    uint64_t size(uint32_t store)  
    { return (uint64_t)512 *(uint64_t)(zFs_[store].totalSectors() - zFs_[store].rootSector()); }
    1556:	movw	r2, #10864	; 0x2a70
    155a:	mul.w	r9, r2, r9
    155e:	ldr	r2, [pc, #776]	; (1868 <MTPD::GetStorageInfo(unsigned long)+0x344>)
    1560:	ldr	r2, [r2, #80]	; 0x50
    1562:	add.w	r0, r2, r9
    1566:	ldr.w	r2, [r2, r9]
    156a:	ldr	r1, [r0, #24]
    uint64_t free(uint32_t store)  
    { return (uint64_t)512 *(uint64_t)(zFs_[store].totalSectors() - zFs_[store].eofSector()); }
    156c:	ldr	r0, [r0, #16]
public:
    uint32_t Count(uint32_t store,uint32_t parent) {return zFs_[store].Count(parent);}
    uint32_t Next(uint32_t store) {return zFs_[store].Next();}

    uint64_t size(uint32_t store)  
    { return (uint64_t)512 *(uint64_t)(zFs_[store].totalSectors() - zFs_[store].rootSector()); }
    156e:	subs	r2, r1, r2
    uint64_t free(uint32_t store)  
    { return (uint64_t)512 *(uint64_t)(zFs_[store].totalSectors() - zFs_[store].eofSector()); }
    1570:	subs	r1, r1, r0
    1572:	lsrs	r0, r2, #23
    1574:	lsls	r2, r2, #9
    1576:	str	r0, [sp, #44]	; 0x2c
    1578:	lsrs	r0, r1, #23
    157a:	str	r2, [sp, #40]	; 0x28
    157c:	lsls	r2, r1, #9
    157e:	str	r0, [sp, #4]
    1580:	str	r2, [sp, #0]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    1582:	cmp	r4, #0
    1584:	beq.n	1674 <MTPD::GetStorageInfo(unsigned long)+0x150>
      {
        write_length_ += len;
    1586:	adds	r3, #8
    1588:	str	r2, [sp, #32]
    158a:	str	r0, [sp, #36]	; 0x24
    158c:	mov.w	r2, #4294967295
    1590:	adds	r3, #8
    1592:	str	r2, [sp, #28]
    uint64_t size(uint32_t store)  
    { return (uint64_t)512 *(uint64_t)(zFs_[store].totalSectors() - zFs_[store].rootSector()); }
    uint64_t free(uint32_t store)  
    { return (uint64_t)512 *(uint64_t)(zFs_[store].totalSectors() - zFs_[store].eofSector()); }

    char * getName(uint32_t store) {return zFs_[store].getName();}
    1594:	ldr	r2, [pc, #720]	; (1868 <MTPD::GetStorageInfo(unsigned long)+0x344>)
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    1596:	adds	r7, r3, #4
    uint64_t size(uint32_t store)  
    { return (uint64_t)512 *(uint64_t)(zFs_[store].totalSectors() - zFs_[store].rootSector()); }
    uint64_t free(uint32_t store)  
    { return (uint64_t)512 *(uint64_t)(zFs_[store].totalSectors() - zFs_[store].eofSector()); }

    char * getName(uint32_t store) {return zFs_[store].getName();}
    1598:	ldr	r2, [r2, #80]	; 0x50
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    159a:	str	r7, [r6, #4]
    uint64_t size(uint32_t store)  
    { return (uint64_t)512 *(uint64_t)(zFs_[store].totalSectors() - zFs_[store].rootSector()); }
    uint64_t free(uint32_t store)  
    { return (uint64_t)512 *(uint64_t)(zFs_[store].totalSectors() - zFs_[store].eofSector()); }

    char * getName(uint32_t store) {return zFs_[store].getName();}
    159c:	add	r9, r2

#define Store2Storage(x) (x+1)
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    159e:	ldrb.w	r3, [r9, #32]
    15a2:	cmp	r3, #0
    15a4:	beq.n	1662 <MTPD::GetStorageInfo(unsigned long)+0x13e>
    uint32_t Read(uint32_t handle, char* out, uint32_t count) ;

    uint64_t size()  {  return (uint64_t)512 *(uint64_t)(total_sectors - root_sector); }
    uint64_t free()  {  return (uint64_t)512 *(uint64_t)(total_sectors - eof_sector); }

    char * getName() {return devName;}
    15a6:	add.w	sl, r9, #32
    { write8(strlen(str) + 1);
    15aa:	mov	r0, sl
    15ac:	bl	c040 <strlen>
    15b0:	adds	r0, #1
    15b2:	strb.w	r0, [sp, #17]
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    15b6:	adds	r3, r7, #1
    15b8:	str	r3, [r6, #4]
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    15ba:	ldrb.w	r2, [r9, #32]
    15be:	cmp	r2, #0
    15c0:	beq.n	165e <MTPD::GetStorageInfo(unsigned long)+0x13a>
    15c2:	movs	r1, #1
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    15c4:	add.w	r9, r6, #544	; 0x220
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    15c8:	mov	r0, r9
    15ca:	mov	r9, r6
    15cc:	mov	r6, r0
    15ce:	b.n	15de <MTPD::GetStorageInfo(unsigned long)+0xba>
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    15d0:	adds	r3, #2
    15d2:	str.w	r3, [r9, #4]
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    15d6:	ldrb.w	r2, [sl, #1]!
    15da:	cmp	r2, #0
    15dc:	beq.n	1650 <MTPD::GetStorageInfo(unsigned long)+0x12c>
    15de:	strh.w	r2, [sp, #26]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    15e2:	cmp	r1, #0
    15e4:	bne.n	15d0 <MTPD::GetStorageInfo(unsigned long)+0xac>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    15e6:	ldr	r7, [pc, #644]	; (186c <MTPD::GetStorageInfo(unsigned long)+0x348>)
    15e8:	cmp	r3, #0
    15ea:	beq.n	166e <MTPD::GetStorageInfo(unsigned long)+0x14a>
    15ec:	ldr	r0, [r7, #0]
        write_length_ += len;
    15ee:	adds	r3, #2
    15f0:	add.w	fp, r9, #1056	; 0x420
        
        const char * src=data;
    15f4:	add.w	r8, sp, #26
        //
        int pos = 0; // into data
    15f8:	movs	r5, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    15fa:	str.w	r3, [r9, #4]
    15fe:	b.n	1606 <MTPD::GetStorageInfo(unsigned long)+0xe2>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1600:	cmp	r5, #1
    1602:	bgt.n	1640 <MTPD::GetStorageInfo(unsigned long)+0x11c>
    1604:	ldr	r0, [r7, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1606:	rsb	r4, r0, fp
    160a:	rsb	r3, r5, #2
          memcpy(dst,src,to_copy);
    160e:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1610:	cmp	r4, r3
    1612:	it	ge
    1614:	movge	r4, r3
          memcpy(dst,src,to_copy);
    1616:	mov	r2, r4
          pos += to_copy;
    1618:	add	r5, r4
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    161a:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    161e:	ldr	r3, [r7, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    1620:	add	r8, r4
          dst += to_copy;
    1622:	add	r4, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1624:	cmp	r4, fp
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1626:	str	r4, [r7, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1628:	bne.n	1600 <MTPD::GetStorageInfo(unsigned long)+0xdc>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    162a:	movs	r2, #60	; 0x3c
    162c:	mov.w	r1, #512	; 0x200
    1630:	mov	r0, r6
    1632:	bl	a000 <usb_mtp_send>
    1636:	cmp	r0, #0
    1638:	ble.n	162a <MTPD::GetStorageInfo(unsigned long)+0x106>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    163a:	cmp	r5, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    163c:	str	r6, [r7, #0]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    163e:	ble.n	1604 <MTPD::GetStorageInfo(unsigned long)+0xe0>
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    1640:	ldrb.w	r2, [sl, #1]!
    1644:	ldrb.w	r1, [r9]
    1648:	ldr.w	r3, [r9, #4]
    164c:	cmp	r2, #0
    164e:	bne.n	15de <MTPD::GetStorageInfo(unsigned long)+0xba>
    1650:	mov	r6, r9
    1652:	movs	r2, #0
    1654:	strh.w	r2, [sp, #24]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    1658:	cmp	r1, #0
    165a:	beq.w	1aa6 <MTPD::GetStorageInfo(unsigned long)+0x582>
      {
        write_length_ += len;
    165e:	adds	r3, #2
    1660:	b.n	1664 <MTPD::GetStorageInfo(unsigned long)+0x140>
    1662:	adds	r3, r7, #1
    1664:	adds	r3, #1
    1666:	str	r3, [r6, #4]
    const char *name = mFS.getName(store);
    writestring(name);  // storage descriptor
    writestring("");  // volume identifier

    //Printf("%d %d ",storage,store); Serial.println(name); Serial.flush();
  }
    1668:	add	sp, #52	; 0x34
    166a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    166e:	mov	r0, r6
    1670:	str	r6, [r7, #0]
    1672:	b.n	15ee <MTPD::GetStorageInfo(unsigned long)+0xca>
    1674:	cmp	r3, #0
    1676:	beq.w	19a2 <MTPD::GetStorageInfo(unsigned long)+0x47e>
    167a:	ldr	r4, [pc, #496]	; (186c <MTPD::GetStorageInfo(unsigned long)+0x348>)
    167c:	ldr	r0, [r4, #0]
        write_length_ += len;
    167e:	adds	r3, #8
    1680:	add.w	r5, r6, #1056	; 0x420
        
        const char * src=data;
    1684:	add.w	r8, sp, #40	; 0x28
        //
        int pos = 0; // into data
    1688:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    168a:	str	r3, [r6, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    168c:	add.w	sl, r6, #544	; 0x220
    1690:	b.n	1698 <MTPD::GetStorageInfo(unsigned long)+0x174>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1692:	cmp	r7, #7
    1694:	bgt.n	16d4 <MTPD::GetStorageInfo(unsigned long)+0x1b0>
    1696:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1698:	rsb	fp, r0, r5
    169c:	rsb	r3, r7, #8
          memcpy(dst,src,to_copy);
    16a0:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    16a2:	cmp	fp, r3
    16a4:	it	ge
    16a6:	movge	fp, r3
          memcpy(dst,src,to_copy);
    16a8:	mov	r2, fp
          pos += to_copy;
    16aa:	add	r7, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    16ac:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    16b0:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    16b2:	add	r8, fp
          dst += to_copy;
    16b4:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    16b6:	cmp	r3, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    16b8:	str	r3, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    16ba:	bne.n	1692 <MTPD::GetStorageInfo(unsigned long)+0x16e>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    16bc:	movs	r2, #60	; 0x3c
    16be:	mov.w	r1, #512	; 0x200
    16c2:	mov	r0, sl
    16c4:	bl	a000 <usb_mtp_send>
    16c8:	cmp	r0, #0
    16ca:	ble.n	16bc <MTPD::GetStorageInfo(unsigned long)+0x198>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    16cc:	cmp	r7, #7
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    16ce:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    16d2:	ble.n	1696 <MTPD::GetStorageInfo(unsigned long)+0x172>
    16d4:	ldr	r3, [sp, #0]
    16d6:	ldrb	r2, [r6, #0]
    16d8:	str	r3, [sp, #32]
    16da:	ldr	r3, [sp, #4]
    16dc:	str	r3, [sp, #36]	; 0x24
    16de:	ldr	r3, [r6, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    16e0:	cmp	r2, #0
    16e2:	bne.w	158c <MTPD::GetStorageInfo(unsigned long)+0x68>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    16e6:	cmp	r3, #0
    16e8:	beq.w	1a88 <MTPD::GetStorageInfo(unsigned long)+0x564>
    16ec:	ldr	r0, [r4, #0]
        write_length_ += len;
    16ee:	adds	r3, #8
        
        const char * src=data;
    16f0:	add.w	r8, sp, #32
        //
        int pos = 0; // into data
    16f4:	movs	r7, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    16f6:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    16fa:	str	r3, [r6, #4]
    16fc:	b.n	1704 <MTPD::GetStorageInfo(unsigned long)+0x1e0>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    16fe:	cmp	r7, #7
    1700:	bgt.n	1740 <MTPD::GetStorageInfo(unsigned long)+0x21c>
    1702:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1704:	rsb	fp, r0, r5
    1708:	rsb	r3, r7, #8
          memcpy(dst,src,to_copy);
    170c:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    170e:	cmp	fp, r3
    1710:	it	ge
    1712:	movge	fp, r3
          memcpy(dst,src,to_copy);
    1714:	mov	r2, fp
          pos += to_copy;
    1716:	add	r7, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    1718:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    171c:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    171e:	add	r8, fp
          dst += to_copy;
    1720:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1722:	cmp	r3, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1724:	str	r3, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1726:	bne.n	16fe <MTPD::GetStorageInfo(unsigned long)+0x1da>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    1728:	movs	r2, #60	; 0x3c
    172a:	mov.w	r1, #512	; 0x200
    172e:	mov	r0, sl
    1730:	bl	a000 <usb_mtp_send>
    1734:	cmp	r0, #0
    1736:	ble.n	1728 <MTPD::GetStorageInfo(unsigned long)+0x204>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1738:	cmp	r7, #7
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    173a:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    173e:	ble.n	1702 <MTPD::GetStorageInfo(unsigned long)+0x1de>
    1740:	mov.w	r1, #4294967295
    1744:	ldrb	r2, [r6, #0]
    1746:	ldr	r3, [r6, #4]
    1748:	str	r1, [sp, #28]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    174a:	cmp	r2, #0
    174c:	bne.w	1594 <MTPD::GetStorageInfo(unsigned long)+0x70>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1750:	cmp	r3, #0
    1752:	beq.w	19ae <MTPD::GetStorageInfo(unsigned long)+0x48a>
    1756:	ldr	r0, [r4, #0]
        write_length_ += len;
    1758:	adds	r3, #4
        
        const char * src=data;
    175a:	add.w	r8, sp, #28
        //
        int pos = 0; // into data
    175e:	movs	r7, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    1760:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    1764:	str	r3, [r6, #4]
    1766:	b.n	176e <MTPD::GetStorageInfo(unsigned long)+0x24a>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1768:	cmp	r7, #3
    176a:	bgt.n	17aa <MTPD::GetStorageInfo(unsigned long)+0x286>
    176c:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    176e:	rsb	fp, r0, r5
    1772:	rsb	r3, r7, #4
          memcpy(dst,src,to_copy);
    1776:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1778:	cmp	fp, r3
    177a:	it	ge
    177c:	movge	fp, r3
          memcpy(dst,src,to_copy);
    177e:	mov	r2, fp
          pos += to_copy;
    1780:	add	r7, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    1782:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1786:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    1788:	add	r8, fp
          dst += to_copy;
    178a:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    178c:	cmp	r3, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    178e:	str	r3, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1790:	bne.n	1768 <MTPD::GetStorageInfo(unsigned long)+0x244>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    1792:	movs	r2, #60	; 0x3c
    1794:	mov.w	r1, #512	; 0x200
    1798:	mov	r0, sl
    179a:	bl	a000 <usb_mtp_send>
    179e:	cmp	r0, #0
    17a0:	ble.n	1792 <MTPD::GetStorageInfo(unsigned long)+0x26e>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    17a2:	cmp	r7, #3
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    17a4:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    17a8:	ble.n	176c <MTPD::GetStorageInfo(unsigned long)+0x248>
    uint64_t size(uint32_t store)  
    { return (uint64_t)512 *(uint64_t)(zFs_[store].totalSectors() - zFs_[store].rootSector()); }
    uint64_t free(uint32_t store)  
    { return (uint64_t)512 *(uint64_t)(zFs_[store].totalSectors() - zFs_[store].eofSector()); }

    char * getName(uint32_t store) {return zFs_[store].getName();}
    17aa:	ldr	r3, [pc, #188]	; (1868 <MTPD::GetStorageInfo(unsigned long)+0x344>)
    17ac:	ldrb.w	r8, [r6]
    17b0:	ldr	r3, [r3, #80]	; 0x50
    17b2:	ldr	r7, [r6, #4]
    17b4:	add	r9, r3

#define Store2Storage(x) (x+1)
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    17b6:	ldrb.w	r3, [r9, #32]
    17ba:	cmp	r3, #0
    17bc:	beq.w	19b8 <MTPD::GetStorageInfo(unsigned long)+0x494>
    17c0:	add.w	sl, r9, #32
    { write8(strlen(str) + 1);
    17c4:	mov	r0, sl
    17c6:	bl	c040 <strlen>
    17ca:	adds	r0, #1
    17cc:	strb.w	r0, [sp, #17]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    17d0:	cmp.w	r8, #0
    17d4:	bne.w	15b6 <MTPD::GetStorageInfo(unsigned long)+0x92>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    17d8:	cmp	r7, #0
    17da:	beq.w	1b22 <MTPD::GetStorageInfo(unsigned long)+0x5fe>
    17de:	ldr	r0, [r4, #0]
        write_length_ += len;
    17e0:	adds	r3, r7, #1
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    17e2:	add.w	r2, r6, #544	; 0x220
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    17e6:	add.w	r8, sp, #17
        //
        int pos = 0; // into data
    17ea:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    17ec:	str	r3, [r6, #4]
    17ee:	mov	fp, r2
    17f0:	str	r6, [sp, #0]
    17f2:	b.n	17fa <MTPD::GetStorageInfo(unsigned long)+0x2d6>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    17f4:	cmp	r7, #0
    17f6:	bgt.n	1834 <MTPD::GetStorageInfo(unsigned long)+0x310>
    17f8:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    17fa:	subs	r2, r5, r0
    17fc:	rsb	r3, r7, #1
          memcpy(dst,src,to_copy);
    1800:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1802:	cmp	r2, r3
    1804:	it	ge
    1806:	movge	r2, r3
    1808:	mov	r6, r2
          memcpy(dst,src,to_copy);
          pos += to_copy;
    180a:	add	r7, r2
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    180c:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1810:	ldr	r2, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    1812:	add	r8, r6
          dst += to_copy;
    1814:	adds	r3, r2, r6
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1816:	cmp	r3, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1818:	str	r3, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    181a:	bne.n	17f4 <MTPD::GetStorageInfo(unsigned long)+0x2d0>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    181c:	movs	r2, #60	; 0x3c
    181e:	mov.w	r1, #512	; 0x200
    1822:	mov	r0, fp
    1824:	bl	a000 <usb_mtp_send>
    1828:	cmp	r0, #0
    182a:	ble.n	181c <MTPD::GetStorageInfo(unsigned long)+0x2f8>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    182c:	cmp	r7, #0
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    182e:	str.w	fp, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1832:	ble.n	17f8 <MTPD::GetStorageInfo(unsigned long)+0x2d4>
    1834:	ldr	r6, [sp, #0]
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    1836:	ldrb.w	r2, [r9, #32]
    183a:	ldrb	r1, [r6, #0]
    183c:	ldr	r3, [r6, #4]
    183e:	cmp	r2, #0
    1840:	bne.w	15c4 <MTPD::GetStorageInfo(unsigned long)+0xa0>
    1844:	b.n	1652 <MTPD::GetStorageInfo(unsigned long)+0x12e>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1846:	ldr	r3, [r0, #4]
    1848:	cmp	r3, #0
    184a:	beq.w	1996 <MTPD::GetStorageInfo(unsigned long)+0x472>
    184e:	ldr	r4, [pc, #28]	; (186c <MTPD::GetStorageInfo(unsigned long)+0x348>)
    1850:	ldr	r0, [r4, #0]
        write_length_ += len;
    1852:	adds	r3, #2
    1854:	add.w	r5, r6, #1056	; 0x420
        
        const char * src=data;
    1858:	add.w	sl, sp, #22
        //
        int pos = 0; // into data
    185c:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    1860:	str	r3, [r6, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    1862:	add.w	fp, r6, #544	; 0x220
    1866:	b.n	1878 <MTPD::GetStorageInfo(unsigned long)+0x354>
    1868:	.word	0x2000c650
    186c:	.word	0x20004604
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1870:	cmp.w	r8, #1
    1874:	bgt.n	18b4 <MTPD::GetStorageInfo(unsigned long)+0x390>
    1876:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1878:	subs	r7, r5, r0
    187a:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    187e:	mov	r1, sl
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1880:	cmp	r7, r3
    1882:	it	ge
    1884:	movge	r7, r3
          memcpy(dst,src,to_copy);
    1886:	mov	r2, r7
          pos += to_copy;
    1888:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    188a:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    188e:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    1890:	add	sl, r7
          dst += to_copy;
    1892:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1894:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1896:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1898:	bne.n	1870 <MTPD::GetStorageInfo(unsigned long)+0x34c>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    189a:	movs	r2, #60	; 0x3c
    189c:	mov.w	r1, #512	; 0x200
    18a0:	mov	r0, fp
    18a2:	bl	a000 <usb_mtp_send>
    18a6:	cmp	r0, #0
    18a8:	ble.n	189a <MTPD::GetStorageInfo(unsigned long)+0x376>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    18aa:	cmp.w	r8, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    18ae:	str.w	fp, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    18b2:	ble.n	1876 <MTPD::GetStorageInfo(unsigned long)+0x352>
    18b4:	movs	r1, #2
    18b6:	ldrb	r2, [r6, #0]
    18b8:	ldr	r3, [r6, #4]
    18ba:	strh.w	r1, [sp, #20]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    18be:	cmp	r2, #0
    18c0:	bne.w	1548 <MTPD::GetStorageInfo(unsigned long)+0x24>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    18c4:	cmp	r3, #0
    18c6:	beq.w	1a92 <MTPD::GetStorageInfo(unsigned long)+0x56e>
    18ca:	ldr	r0, [r4, #0]
        write_length_ += len;
    18cc:	adds	r3, #2
        
        const char * src=data;
    18ce:	add.w	sl, sp, #20
        //
        int pos = 0; // into data
    18d2:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    18d6:	add.w	fp, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    18da:	str	r3, [r6, #4]
    18dc:	b.n	18e6 <MTPD::GetStorageInfo(unsigned long)+0x3c2>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    18de:	cmp.w	r8, #1
    18e2:	bgt.n	1922 <MTPD::GetStorageInfo(unsigned long)+0x3fe>
    18e4:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    18e6:	subs	r7, r5, r0
    18e8:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    18ec:	mov	r1, sl
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    18ee:	cmp	r7, r3
    18f0:	it	ge
    18f2:	movge	r7, r3
          memcpy(dst,src,to_copy);
    18f4:	mov	r2, r7
          pos += to_copy;
    18f6:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    18f8:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    18fc:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    18fe:	add	sl, r7
          dst += to_copy;
    1900:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1902:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1904:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1906:	bne.n	18de <MTPD::GetStorageInfo(unsigned long)+0x3ba>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    1908:	movs	r2, #60	; 0x3c
    190a:	mov.w	r1, #512	; 0x200
    190e:	mov	r0, fp
    1910:	bl	a000 <usb_mtp_send>
    1914:	cmp	r0, #0
    1916:	ble.n	1908 <MTPD::GetStorageInfo(unsigned long)+0x3e4>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1918:	cmp.w	r8, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    191c:	str.w	fp, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1920:	ble.n	18e4 <MTPD::GetStorageInfo(unsigned long)+0x3c0>
    1922:	movs	r1, #0
    1924:	ldrb	r2, [r6, #0]
    1926:	ldr	r3, [r6, #4]
    1928:	strh.w	r1, [sp, #18]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    192c:	cmp	r2, #0
    192e:	bne.w	1550 <MTPD::GetStorageInfo(unsigned long)+0x2c>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1932:	cmp	r3, #0
    1934:	beq.w	1a9c <MTPD::GetStorageInfo(unsigned long)+0x578>
    1938:	ldr	r0, [r4, #0]
        write_length_ += len;
    193a:	adds	r3, #2
        
        const char * src=data;
    193c:	add.w	sl, sp, #18
        //
        int pos = 0; // into data
    1940:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    1944:	add.w	fp, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    1948:	str	r3, [r6, #4]
    194a:	b.n	1954 <MTPD::GetStorageInfo(unsigned long)+0x430>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    194c:	cmp.w	r8, #1
    1950:	bgt.n	1990 <MTPD::GetStorageInfo(unsigned long)+0x46c>
    1952:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1954:	subs	r7, r5, r0
    1956:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    195a:	mov	r1, sl
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    195c:	cmp	r7, r3
    195e:	it	ge
    1960:	movge	r7, r3
          memcpy(dst,src,to_copy);
    1962:	mov	r2, r7
          pos += to_copy;
    1964:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    1966:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    196a:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    196c:	add	sl, r7
          dst += to_copy;
    196e:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1970:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1972:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1974:	bne.n	194c <MTPD::GetStorageInfo(unsigned long)+0x428>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    1976:	movs	r2, #60	; 0x3c
    1978:	mov.w	r1, #512	; 0x200
    197c:	mov	r0, fp
    197e:	bl	a000 <usb_mtp_send>
    1982:	cmp	r0, #0
    1984:	ble.n	1976 <MTPD::GetStorageInfo(unsigned long)+0x452>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1986:	cmp.w	r8, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    198a:	str.w	fp, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    198e:	ble.n	1952 <MTPD::GetStorageInfo(unsigned long)+0x42e>
    1990:	ldrb	r4, [r6, #0]
    1992:	ldr	r3, [r6, #4]
    1994:	b.n	1556 <MTPD::GetStorageInfo(unsigned long)+0x32>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1996:	add.w	r2, r0, #544	; 0x220
    199a:	ldr	r4, [pc, #400]	; (1b2c <MTPD::GetStorageInfo(unsigned long)+0x608>)
    199c:	mov	r0, r2
    199e:	str	r2, [r4, #0]
    19a0:	b.n	1852 <MTPD::GetStorageInfo(unsigned long)+0x32e>
    19a2:	add.w	r2, r6, #544	; 0x220
    19a6:	ldr	r4, [pc, #388]	; (1b2c <MTPD::GetStorageInfo(unsigned long)+0x608>)
    19a8:	mov	r0, r2
    19aa:	str	r2, [r4, #0]
    19ac:	b.n	167e <MTPD::GetStorageInfo(unsigned long)+0x15a>
    19ae:	add.w	r2, r6, #544	; 0x220
    19b2:	mov	r0, r2
    19b4:	str	r2, [r4, #0]
    19b6:	b.n	1758 <MTPD::GetStorageInfo(unsigned long)+0x234>
    19b8:	strb.w	r3, [sp, #16]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    19bc:	cmp.w	r8, #0
    19c0:	bne.w	1662 <MTPD::GetStorageInfo(unsigned long)+0x13e>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    19c4:	cmp	r7, #0
    19c6:	beq.w	1b0c <MTPD::GetStorageInfo(unsigned long)+0x5e8>
    19ca:	ldr	r0, [r4, #0]
        write_length_ += len;
    19cc:	adds	r3, r7, #1
        
        const char * src=data;
    19ce:	add.w	r9, sp, #16
        //
        int pos = 0; // into data
    19d2:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    19d6:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    19da:	str	r3, [r6, #4]
    19dc:	b.n	19e6 <MTPD::GetStorageInfo(unsigned long)+0x4c2>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    19de:	cmp.w	r8, #0
    19e2:	bgt.n	1a22 <MTPD::GetStorageInfo(unsigned long)+0x4fe>
    19e4:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    19e6:	subs	r7, r5, r0
    19e8:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    19ec:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    19ee:	cmp	r7, r3
    19f0:	it	ge
    19f2:	movge	r7, r3
          memcpy(dst,src,to_copy);
    19f4:	mov	r2, r7
          pos += to_copy;
    19f6:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    19f8:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    19fc:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    19fe:	add	r9, r7
          dst += to_copy;
    1a00:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1a02:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1a04:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1a06:	bne.n	19de <MTPD::GetStorageInfo(unsigned long)+0x4ba>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    1a08:	movs	r2, #60	; 0x3c
    1a0a:	mov.w	r1, #512	; 0x200
    1a0e:	mov	r0, sl
    1a10:	bl	a000 <usb_mtp_send>
    1a14:	cmp	r0, #0
    1a16:	ble.n	1a08 <MTPD::GetStorageInfo(unsigned long)+0x4e4>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1a18:	cmp.w	r8, #0
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    1a1c:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1a20:	ble.n	19e4 <MTPD::GetStorageInfo(unsigned long)+0x4c0>
    1a22:	movs	r2, #0
    1a24:	ldrb	r1, [r6, #0]
    1a26:	ldr	r3, [r6, #4]
    1a28:	strb.w	r2, [sp, #15]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    1a2c:	cmp	r1, #0
    1a2e:	bne.w	1664 <MTPD::GetStorageInfo(unsigned long)+0x140>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1a32:	cmp	r3, #0
    1a34:	beq.n	1b02 <MTPD::GetStorageInfo(unsigned long)+0x5de>
    1a36:	ldr	r0, [r4, #0]
        write_length_ += len;
    1a38:	adds	r3, #1
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    1a3a:	add.w	r9, r6, #544	; 0x220
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    1a3e:	add.w	r8, sp, #15
        //
        int pos = 0; // into data
    1a42:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    1a44:	str	r3, [r6, #4]
    1a46:	b.n	1a50 <MTPD::GetStorageInfo(unsigned long)+0x52c>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1a48:	cmp	r7, #0
    1a4a:	bgt.w	1668 <MTPD::GetStorageInfo(unsigned long)+0x144>
    1a4e:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1a50:	subs	r6, r5, r0
    1a52:	rsb	r3, r7, #1
          memcpy(dst,src,to_copy);
    1a56:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1a58:	cmp	r6, r3
    1a5a:	it	ge
    1a5c:	movge	r6, r3
          memcpy(dst,src,to_copy);
    1a5e:	mov	r2, r6
          pos += to_copy;
    1a60:	add	r7, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    1a62:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1a66:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    1a68:	add	r8, r6
          dst += to_copy;
    1a6a:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1a6c:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1a6e:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1a70:	bne.n	1a48 <MTPD::GetStorageInfo(unsigned long)+0x524>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    1a72:	movs	r2, #60	; 0x3c
    1a74:	mov.w	r1, #512	; 0x200
    1a78:	mov	r0, r9
    1a7a:	bl	a000 <usb_mtp_send>
    1a7e:	cmp	r0, #0
    1a80:	ble.n	1a72 <MTPD::GetStorageInfo(unsigned long)+0x54e>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    1a82:	str.w	r9, [r4]
    1a86:	b.n	1a48 <MTPD::GetStorageInfo(unsigned long)+0x524>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1a88:	add.w	r2, r6, #544	; 0x220
    1a8c:	mov	r0, r2
    1a8e:	str	r2, [r4, #0]
    1a90:	b.n	16ee <MTPD::GetStorageInfo(unsigned long)+0x1ca>
    1a92:	add.w	r2, r6, #544	; 0x220
    1a96:	mov	r0, r2
    1a98:	str	r2, [r4, #0]
    1a9a:	b.n	18cc <MTPD::GetStorageInfo(unsigned long)+0x3a8>
    1a9c:	add.w	r2, r6, #544	; 0x220
    1aa0:	mov	r0, r2
    1aa2:	str	r2, [r4, #0]
    1aa4:	b.n	193a <MTPD::GetStorageInfo(unsigned long)+0x416>
    1aa6:	cbz	r3, 1b16 <MTPD::GetStorageInfo(unsigned long)+0x5f2>
    1aa8:	ldr	r4, [pc, #128]	; (1b2c <MTPD::GetStorageInfo(unsigned long)+0x608>)
    1aaa:	ldr	r0, [r4, #0]
        write_length_ += len;
    1aac:	adds	r3, #2
    1aae:	add.w	r5, r6, #1056	; 0x420
        
        const char * src=data;
    1ab2:	add.w	r9, sp, #24
        //
        int pos = 0; // into data
    1ab6:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    1aba:	str	r3, [r6, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    1abc:	add.w	sl, r6, #544	; 0x220
    1ac0:	b.n	1aca <MTPD::GetStorageInfo(unsigned long)+0x5a6>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1ac2:	cmp.w	r8, #1
    1ac6:	bgt.n	1a22 <MTPD::GetStorageInfo(unsigned long)+0x4fe>
    1ac8:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1aca:	subs	r7, r5, r0
    1acc:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    1ad0:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1ad2:	cmp	r7, r3
    1ad4:	it	ge
    1ad6:	movge	r7, r3
          memcpy(dst,src,to_copy);
    1ad8:	mov	r2, r7
          pos += to_copy;
    1ada:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    1adc:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1ae0:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    1ae2:	add	r9, r7
          dst += to_copy;
    1ae4:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1ae6:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1ae8:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1aea:	bne.n	1ac2 <MTPD::GetStorageInfo(unsigned long)+0x59e>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    1aec:	movs	r2, #60	; 0x3c
    1aee:	mov.w	r1, #512	; 0x200
    1af2:	mov	r0, sl
    1af4:	bl	a000 <usb_mtp_send>
    1af8:	cmp	r0, #0
    1afa:	ble.n	1aec <MTPD::GetStorageInfo(unsigned long)+0x5c8>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    1afc:	str.w	sl, [r4]
    1b00:	b.n	1ac2 <MTPD::GetStorageInfo(unsigned long)+0x59e>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1b02:	add.w	r2, r6, #544	; 0x220
    1b06:	mov	r0, r2
    1b08:	str	r2, [r4, #0]
    1b0a:	b.n	1a38 <MTPD::GetStorageInfo(unsigned long)+0x514>
    1b0c:	add.w	r3, r6, #544	; 0x220
    1b10:	mov	r0, r3
    1b12:	str	r3, [r4, #0]
    1b14:	b.n	19cc <MTPD::GetStorageInfo(unsigned long)+0x4a8>
    1b16:	add.w	r2, r6, #544	; 0x220
    1b1a:	ldr	r4, [pc, #16]	; (1b2c <MTPD::GetStorageInfo(unsigned long)+0x608>)
    1b1c:	mov	r0, r2
    1b1e:	str	r2, [r4, #0]
    1b20:	b.n	1aac <MTPD::GetStorageInfo(unsigned long)+0x588>
    1b22:	add.w	r3, r6, #544	; 0x220
    1b26:	mov	r0, r3
    1b28:	str	r3, [r4, #0]
    1b2a:	b.n	17e0 <MTPD::GetStorageInfo(unsigned long)+0x2bc>
    1b2c:	.word	0x20004604

00001b30 <MTPD::GetObjectInfo(unsigned long)>:
      uint32_t handle;
      while((handle=mFS.Next(store))) write32(handle);
    }
    return;
  }
  void GetObjectInfo(uint32_t handle) 
    1b30:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b34:	ldr	r3, [pc, #732]	; (1e14 <MTPD::GetObjectInfo(unsigned long)+0x2e4>)
    1b36:	sub	sp, #348	; 0x15c
    1b38:	mov	r7, r0
    { return (uint64_t)512 *(uint64_t)(zFs_[store].totalSectors() - zFs_[store].eofSector()); }

    char * getName(uint32_t store) {return zFs_[store].getName();}

    uint32_t Info(uint32_t handle, char *filename, uint32_t *size, uint32_t *parent)
    { return zFs_[0].Info(handle, filename, size, parent);}
    1b3a:	ldr	r4, [r3, #80]	; 0x50
    1b3c:	add	r6, sp, #40	; 0x28
    1b3e:	add	r3, sp, #36	; 0x24
    1b40:	add	r2, sp, #88	; 0x58
    1b42:	mov	r0, r4
    1b44:	str	r6, [sp, #0]
    1b46:	bl	6bd4 <zeroFS_class::Info(unsigned long, char*, unsigned long*, unsigned long*)>
    1b4a:	movs	r2, #1
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    1b4c:	ldrb	r3, [r7, #0]
    1b4e:	str	r2, [sp, #44]	; 0x2c
    1b50:	cmp	r3, #0
    1b52:	beq.w	1c98 <MTPD::GetObjectInfo(unsigned long)+0x168>
      {
        write_length_ += len;
    1b56:	ldr	r3, [r7, #4]
    Serial.println(parent,HEX);
    #endif

    uint32_t storage = Store2Storage(store);
    write32(storage); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    1b58:	ldr	r2, [sp, #36]	; 0x24
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    1b5a:	adds	r3, #4
    Serial.println(parent,HEX);
    #endif

    uint32_t storage = Store2Storage(store);
    write32(storage); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    1b5c:	adds	r2, #1
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    1b5e:	str	r3, [r7, #4]
    Serial.println(parent,HEX);
    #endif

    uint32_t storage = Store2Storage(store);
    write32(storage); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    1b60:	beq.w	23c2 <MTPD::GetObjectInfo(unsigned long)+0x892>
    1b64:	movs	r2, #0
    1b66:	strh.w	r2, [sp, #28]
    1b6a:	movs	r2, #0
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    1b6c:	adds	r3, #2
    1b6e:	strh.w	r2, [sp, #26]
    1b72:	ldr	r2, [sp, #36]	; 0x24
    1b74:	adds	r3, #2
    1b76:	str	r2, [sp, #76]	; 0x4c
    1b78:	movs	r2, #0
    1b7a:	adds	r3, #4
    1b7c:	strh.w	r2, [sp, #24]
    1b80:	movs	r2, #0
    1b82:	adds	r3, #2
    1b84:	str	r2, [sp, #72]	; 0x48
    1b86:	movs	r2, #0
    1b88:	adds	r3, #4
    1b8a:	str	r2, [sp, #68]	; 0x44
    1b8c:	movs	r2, #0
    1b8e:	adds	r3, #4
    1b90:	str	r2, [sp, #64]	; 0x40
    1b92:	movs	r2, #0
    1b94:	adds	r3, #4
    1b96:	str	r2, [sp, #60]	; 0x3c
    1b98:	movs	r2, #0
    1b9a:	adds	r3, #4
    1b9c:	str	r2, [sp, #56]	; 0x38
    1b9e:	movs	r2, #0
    1ba0:	adds	r3, #4
    1ba2:	str	r2, [sp, #52]	; 0x34
    1ba4:	ldr	r2, [r6, #0]
    1ba6:	adds	r3, #4
    1ba8:	str	r2, [sp, #48]	; 0x30
    1baa:	ldr	r2, [sp, #36]	; 0x24
    1bac:	adds	r3, #4
    1bae:	sub.w	r2, r2, #4294967295
    1bb2:	clz	r2, r2
    1bb6:	lsrs	r2, r2, #5
    1bb8:	strh.w	r2, [sp, #30]
    1bbc:	movs	r2, #0
    1bbe:	adds	r3, #2
    1bc0:	str	r2, [sp, #84]	; 0x54
    1bc2:	movs	r2, #0
    1bc4:	adds	r3, #4
    1bc6:	str	r2, [sp, #80]	; 0x50
    1bc8:	adds	r6, r3, #4

#define Store2Storage(x) (x+1)
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    1bca:	ldrb.w	r2, [sp, #88]	; 0x58
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    1bce:	str	r6, [r7, #4]

#define Store2Storage(x) (x+1)
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    1bd0:	cmp	r2, #0
    1bd2:	beq.n	1c80 <MTPD::GetObjectInfo(unsigned long)+0x150>
    { write8(strlen(str) + 1);
    1bd4:	add	r0, sp, #88	; 0x58
    1bd6:	str	r2, [sp, #12]
    1bd8:	bl	c040 <strlen>
    1bdc:	ldr	r2, [sp, #12]
    1bde:	adds	r0, #1
    1be0:	strb.w	r0, [sp, #23]
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    1be4:	adds	r3, r6, #1
    1be6:	movs	r1, #1
    1be8:	str	r3, [r7, #4]
    1bea:	add.w	sl, sp, #88	; 0x58
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    1bee:	add.w	r9, r7, #544	; 0x220
    1bf2:	b.n	1c00 <MTPD::GetObjectInfo(unsigned long)+0xd0>
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    1bf4:	adds	r3, #2
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    1bf6:	ldrb.w	r2, [sl, #1]!
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    1bfa:	str	r3, [r7, #4]
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    1bfc:	cmp	r2, #0
    1bfe:	beq.n	1c70 <MTPD::GetObjectInfo(unsigned long)+0x140>
    1c00:	strh.w	r2, [sp, #34]	; 0x22
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    1c04:	cmp	r1, #0
    1c06:	bne.n	1bf4 <MTPD::GetObjectInfo(unsigned long)+0xc4>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1c08:	ldr	r4, [pc, #524]	; (1e18 <MTPD::GetObjectInfo(unsigned long)+0x2e8>)
    1c0a:	cmp	r3, #0
    1c0c:	beq.n	1c90 <MTPD::GetObjectInfo(unsigned long)+0x160>
    1c0e:	ldr	r0, [r4, #0]
        write_length_ += len;
    1c10:	adds	r3, #2
    1c12:	add.w	r8, r7, #1056	; 0x420
        
        const char * src=data;
    1c16:	add.w	r6, sp, #34	; 0x22
        //
        int pos = 0; // into data
    1c1a:	movs	r5, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    1c1c:	str	r3, [r7, #4]
    1c1e:	b.n	1c26 <MTPD::GetObjectInfo(unsigned long)+0xf6>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1c20:	cmp	r5, #1
    1c22:	bgt.n	1c64 <MTPD::GetObjectInfo(unsigned long)+0x134>
    1c24:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1c26:	rsb	r2, r0, r8
    1c2a:	rsb	r3, r5, #2
          memcpy(dst,src,to_copy);
    1c2e:	mov	r1, r6
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1c30:	cmp	r2, r3
    1c32:	it	ge
    1c34:	movge	r2, r3
    1c36:	mov	fp, r2
          memcpy(dst,src,to_copy);
          pos += to_copy;
    1c38:	add	r5, r2
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    1c3a:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1c3e:	ldr	r2, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    1c40:	add	r6, fp
          dst += to_copy;
    1c42:	add.w	r3, r2, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1c46:	cmp	r3, r8
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1c48:	str	r3, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1c4a:	bne.n	1c20 <MTPD::GetObjectInfo(unsigned long)+0xf0>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    1c4c:	movs	r2, #60	; 0x3c
    1c4e:	mov.w	r1, #512	; 0x200
    1c52:	mov	r0, r9
    1c54:	bl	a000 <usb_mtp_send>
    1c58:	cmp	r0, #0
    1c5a:	ble.n	1c4c <MTPD::GetObjectInfo(unsigned long)+0x11c>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1c5c:	cmp	r5, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    1c5e:	str.w	r9, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1c62:	ble.n	1c24 <MTPD::GetObjectInfo(unsigned long)+0xf4>
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    1c64:	ldrb.w	r2, [sl, #1]!
    1c68:	ldrb	r1, [r7, #0]
    1c6a:	ldr	r3, [r7, #4]
    1c6c:	cmp	r2, #0
    1c6e:	bne.n	1c00 <MTPD::GetObjectInfo(unsigned long)+0xd0>
    1c70:	movs	r2, #0
    1c72:	strh.w	r2, [sp, #32]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    1c76:	cmp	r1, #0
    1c78:	beq.w	25d0 <MTPD::GetObjectInfo(unsigned long)+0xaa0>
      {
        write_length_ += len;
    1c7c:	adds	r3, #2
    1c7e:	b.n	1c82 <MTPD::GetObjectInfo(unsigned long)+0x152>
    1c80:	adds	r3, r6, #1
    1c82:	adds	r3, #1
    1c84:	adds	r3, #1
    1c86:	adds	r3, #1
    1c88:	str	r3, [r7, #4]
    write32(0);  // sequence number
    writestring(filename);
    writestring("");  // date created
    writestring("");  // date modified
    writestring("");  // keywords
  }
    1c8a:	add	sp, #348	; 0x15c
    1c8c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1c90:	mov	r0, r9
    1c92:	str.w	r9, [r4]
    1c96:	b.n	1c10 <MTPD::GetObjectInfo(unsigned long)+0xe0>
    1c98:	ldr	r3, [r7, #4]
    1c9a:	cmp	r3, #0
    1c9c:	beq.w	23b6 <MTPD::GetObjectInfo(unsigned long)+0x886>
    1ca0:	ldr	r4, [pc, #372]	; (1e18 <MTPD::GetObjectInfo(unsigned long)+0x2e8>)
    1ca2:	ldr	r0, [r4, #0]
        write_length_ += len;
    1ca4:	adds	r3, #4
        
        const char * src=data;
    1ca6:	add.w	sl, sp, #44	; 0x2c
    1caa:	add.w	r5, r7, #1056	; 0x420
        //
        int pos = 0; // into data
    1cae:	mov.w	r9, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    1cb2:	str	r3, [r7, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    1cb4:	add.w	fp, r7, #544	; 0x220
    1cb8:	b.n	1cc2 <MTPD::GetObjectInfo(unsigned long)+0x192>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1cba:	cmp.w	r9, #3
    1cbe:	bgt.n	1d00 <MTPD::GetObjectInfo(unsigned long)+0x1d0>
    1cc0:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1cc2:	rsb	r8, r0, r5
    1cc6:	rsb	r3, r9, #4
          memcpy(dst,src,to_copy);
    1cca:	mov	r1, sl
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1ccc:	cmp	r8, r3
    1cce:	it	ge
    1cd0:	movge	r8, r3
          memcpy(dst,src,to_copy);
    1cd2:	mov	r2, r8
          pos += to_copy;
    1cd4:	add	r9, r8
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    1cd6:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1cda:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    1cdc:	add	sl, r8
          dst += to_copy;
    1cde:	add	r3, r8
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1ce0:	cmp	r3, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1ce2:	str	r3, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1ce4:	bne.n	1cba <MTPD::GetObjectInfo(unsigned long)+0x18a>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    1ce6:	movs	r2, #60	; 0x3c
    1ce8:	mov.w	r1, #512	; 0x200
    1cec:	mov	r0, fp
    1cee:	bl	a000 <usb_mtp_send>
    1cf2:	cmp	r0, #0
    1cf4:	ble.n	1ce6 <MTPD::GetObjectInfo(unsigned long)+0x1b6>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1cf6:	cmp.w	r9, #3
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    1cfa:	str.w	fp, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1cfe:	ble.n	1cc0 <MTPD::GetObjectInfo(unsigned long)+0x190>
    Serial.println(parent,HEX);
    #endif

    uint32_t storage = Store2Storage(store);
    write32(storage); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    1d00:	ldr	r3, [sp, #36]	; 0x24
    1d02:	movw	r2, #12289	; 0x3001
    1d06:	ldrb	r1, [r7, #0]
    1d08:	adds	r3, #1
    1d0a:	ldr	r3, [r7, #4]
    1d0c:	it	ne
    1d0e:	movne	r2, #0
    1d10:	strh.w	r2, [sp, #28]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    1d14:	cmp	r1, #0
    1d16:	bne.w	1b6a <MTPD::GetObjectInfo(unsigned long)+0x3a>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1d1a:	cmp	r3, #0
    1d1c:	beq.w	263c <MTPD::GetObjectInfo(unsigned long)+0xb0c>
    1d20:	ldr	r0, [r4, #0]
        write_length_ += len;
    1d22:	adds	r3, #2
        
        const char * src=data;
    1d24:	add.w	r9, sp, #28
        //
        int pos = 0; // into data
    1d28:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    1d2c:	add.w	sl, r7, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    1d30:	str	r3, [r7, #4]
    1d32:	b.n	1d3c <MTPD::GetObjectInfo(unsigned long)+0x20c>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1d34:	cmp.w	r8, #1
    1d38:	bgt.n	1d7a <MTPD::GetObjectInfo(unsigned long)+0x24a>
    1d3a:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1d3c:	rsb	fp, r0, r5
    1d40:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    1d44:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1d46:	cmp	fp, r3
    1d48:	it	ge
    1d4a:	movge	fp, r3
          memcpy(dst,src,to_copy);
    1d4c:	mov	r2, fp
          pos += to_copy;
    1d4e:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    1d50:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1d54:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    1d56:	add	r9, fp
          dst += to_copy;
    1d58:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1d5a:	cmp	r3, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1d5c:	str	r3, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1d5e:	bne.n	1d34 <MTPD::GetObjectInfo(unsigned long)+0x204>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    1d60:	movs	r2, #60	; 0x3c
    1d62:	mov.w	r1, #512	; 0x200
    1d66:	mov	r0, sl
    1d68:	bl	a000 <usb_mtp_send>
    1d6c:	cmp	r0, #0
    1d6e:	ble.n	1d60 <MTPD::GetObjectInfo(unsigned long)+0x230>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1d70:	cmp.w	r8, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    1d74:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1d78:	ble.n	1d3a <MTPD::GetObjectInfo(unsigned long)+0x20a>
    1d7a:	movs	r3, #0
    1d7c:	ldrb	r2, [r7, #0]
    1d7e:	strh.w	r3, [sp, #26]
    1d82:	ldr	r3, [r7, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    1d84:	cmp	r2, #0
    1d86:	bne.w	1b72 <MTPD::GetObjectInfo(unsigned long)+0x42>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1d8a:	cmp	r3, #0
    1d8c:	beq.w	2630 <MTPD::GetObjectInfo(unsigned long)+0xb00>
    1d90:	ldr	r0, [r4, #0]
        write_length_ += len;
    1d92:	adds	r3, #2
        
        const char * src=data;
    1d94:	add.w	r9, sp, #26
        //
        int pos = 0; // into data
    1d98:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    1d9c:	add.w	sl, r7, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    1da0:	str	r3, [r7, #4]
    1da2:	b.n	1dac <MTPD::GetObjectInfo(unsigned long)+0x27c>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1da4:	cmp.w	r8, #1
    1da8:	bgt.n	1dea <MTPD::GetObjectInfo(unsigned long)+0x2ba>
    1daa:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1dac:	rsb	fp, r0, r5
    1db0:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    1db4:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1db6:	cmp	fp, r3
    1db8:	it	ge
    1dba:	movge	fp, r3
          memcpy(dst,src,to_copy);
    1dbc:	mov	r2, fp
          pos += to_copy;
    1dbe:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    1dc0:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1dc4:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    1dc6:	add	r9, fp
          dst += to_copy;
    1dc8:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1dca:	cmp	r3, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1dcc:	str	r3, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1dce:	bne.n	1da4 <MTPD::GetObjectInfo(unsigned long)+0x274>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    1dd0:	movs	r2, #60	; 0x3c
    1dd2:	mov.w	r1, #512	; 0x200
    1dd6:	mov	r0, sl
    1dd8:	bl	a000 <usb_mtp_send>
    1ddc:	cmp	r0, #0
    1dde:	ble.n	1dd0 <MTPD::GetObjectInfo(unsigned long)+0x2a0>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1de0:	cmp.w	r8, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    1de4:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1de8:	ble.n	1daa <MTPD::GetObjectInfo(unsigned long)+0x27a>
    1dea:	ldr	r3, [sp, #36]	; 0x24
    1dec:	ldrb	r2, [r7, #0]
    1dee:	str	r3, [sp, #76]	; 0x4c
    1df0:	ldr	r3, [r7, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    1df2:	cmp	r2, #0
    1df4:	bne.w	1b78 <MTPD::GetObjectInfo(unsigned long)+0x48>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1df8:	cmp	r3, #0
    1dfa:	beq.w	2666 <MTPD::GetObjectInfo(unsigned long)+0xb36>
    1dfe:	ldr	r0, [r4, #0]
        write_length_ += len;
    1e00:	adds	r3, #4
        
        const char * src=data;
    1e02:	add.w	r9, sp, #76	; 0x4c
        //
        int pos = 0; // into data
    1e06:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    1e0a:	add.w	sl, r7, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    1e0e:	str	r3, [r7, #4]
    1e10:	b.n	1e24 <MTPD::GetObjectInfo(unsigned long)+0x2f4>
    1e12:	nop
    1e14:	.word	0x2000c650
    1e18:	.word	0x20004604
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1e1c:	cmp.w	r8, #3
    1e20:	bgt.n	1e62 <MTPD::GetObjectInfo(unsigned long)+0x332>
    1e22:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1e24:	rsb	fp, r0, r5
    1e28:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    1e2c:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1e2e:	cmp	fp, r3
    1e30:	it	ge
    1e32:	movge	fp, r3
          memcpy(dst,src,to_copy);
    1e34:	mov	r2, fp
          pos += to_copy;
    1e36:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    1e38:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1e3c:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    1e3e:	add	r9, fp
          dst += to_copy;
    1e40:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1e42:	cmp	r3, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1e44:	str	r3, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1e46:	bne.n	1e1c <MTPD::GetObjectInfo(unsigned long)+0x2ec>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    1e48:	movs	r2, #60	; 0x3c
    1e4a:	mov.w	r1, #512	; 0x200
    1e4e:	mov	r0, sl
    1e50:	bl	a000 <usb_mtp_send>
    1e54:	cmp	r0, #0
    1e56:	ble.n	1e48 <MTPD::GetObjectInfo(unsigned long)+0x318>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1e58:	cmp.w	r8, #3
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    1e5c:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1e60:	ble.n	1e22 <MTPD::GetObjectInfo(unsigned long)+0x2f2>
    1e62:	movs	r3, #0
    1e64:	ldrb	r2, [r7, #0]
    1e66:	strh.w	r3, [sp, #24]
    1e6a:	ldr	r3, [r7, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    1e6c:	cmp	r2, #0
    1e6e:	bne.w	1b80 <MTPD::GetObjectInfo(unsigned long)+0x50>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1e72:	cmp	r3, #0
    1e74:	beq.w	265c <MTPD::GetObjectInfo(unsigned long)+0xb2c>
    1e78:	ldr	r0, [r4, #0]
        write_length_ += len;
    1e7a:	adds	r3, #2
        
        const char * src=data;
    1e7c:	add.w	r9, sp, #24
        //
        int pos = 0; // into data
    1e80:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    1e84:	add.w	sl, r7, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    1e88:	str	r3, [r7, #4]
    1e8a:	b.n	1e94 <MTPD::GetObjectInfo(unsigned long)+0x364>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1e8c:	cmp.w	r8, #1
    1e90:	bgt.n	1ed2 <MTPD::GetObjectInfo(unsigned long)+0x3a2>
    1e92:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1e94:	rsb	fp, r0, r5
    1e98:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    1e9c:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1e9e:	cmp	fp, r3
    1ea0:	it	ge
    1ea2:	movge	fp, r3
          memcpy(dst,src,to_copy);
    1ea4:	mov	r2, fp
          pos += to_copy;
    1ea6:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    1ea8:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1eac:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    1eae:	add	r9, fp
          dst += to_copy;
    1eb0:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1eb2:	cmp	r3, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1eb4:	str	r3, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1eb6:	bne.n	1e8c <MTPD::GetObjectInfo(unsigned long)+0x35c>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    1eb8:	movs	r2, #60	; 0x3c
    1eba:	mov.w	r1, #512	; 0x200
    1ebe:	mov	r0, sl
    1ec0:	bl	a000 <usb_mtp_send>
    1ec4:	cmp	r0, #0
    1ec6:	ble.n	1eb8 <MTPD::GetObjectInfo(unsigned long)+0x388>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1ec8:	cmp.w	r8, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    1ecc:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1ed0:	ble.n	1e92 <MTPD::GetObjectInfo(unsigned long)+0x362>
    1ed2:	movs	r3, #0
    1ed4:	ldrb	r2, [r7, #0]
    1ed6:	str	r3, [sp, #72]	; 0x48
    1ed8:	ldr	r3, [r7, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    1eda:	cmp	r2, #0
    1edc:	bne.w	1b86 <MTPD::GetObjectInfo(unsigned long)+0x56>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1ee0:	cmp	r3, #0
    1ee2:	beq.w	2652 <MTPD::GetObjectInfo(unsigned long)+0xb22>
    1ee6:	ldr	r0, [r4, #0]
        write_length_ += len;
    1ee8:	adds	r3, #4
        
        const char * src=data;
    1eea:	add.w	r9, sp, #72	; 0x48
        //
        int pos = 0; // into data
    1eee:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    1ef2:	add.w	sl, r7, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    1ef6:	str	r3, [r7, #4]
    1ef8:	b.n	1f02 <MTPD::GetObjectInfo(unsigned long)+0x3d2>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1efa:	cmp.w	r8, #3
    1efe:	bgt.n	1f40 <MTPD::GetObjectInfo(unsigned long)+0x410>
    1f00:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1f02:	rsb	fp, r0, r5
    1f06:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    1f0a:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1f0c:	cmp	fp, r3
    1f0e:	it	ge
    1f10:	movge	fp, r3
          memcpy(dst,src,to_copy);
    1f12:	mov	r2, fp
          pos += to_copy;
    1f14:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    1f16:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1f1a:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    1f1c:	add	r9, fp
          dst += to_copy;
    1f1e:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1f20:	cmp	r3, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1f22:	str	r3, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1f24:	bne.n	1efa <MTPD::GetObjectInfo(unsigned long)+0x3ca>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    1f26:	movs	r2, #60	; 0x3c
    1f28:	mov.w	r1, #512	; 0x200
    1f2c:	mov	r0, sl
    1f2e:	bl	a000 <usb_mtp_send>
    1f32:	cmp	r0, #0
    1f34:	ble.n	1f26 <MTPD::GetObjectInfo(unsigned long)+0x3f6>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1f36:	cmp.w	r8, #3
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    1f3a:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1f3e:	ble.n	1f00 <MTPD::GetObjectInfo(unsigned long)+0x3d0>
    1f40:	movs	r3, #0
    1f42:	ldrb	r2, [r7, #0]
    1f44:	str	r3, [sp, #68]	; 0x44
    1f46:	ldr	r3, [r7, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    1f48:	cmp	r2, #0
    1f4a:	bne.w	1b8c <MTPD::GetObjectInfo(unsigned long)+0x5c>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1f4e:	cmp	r3, #0
    1f50:	beq.w	2648 <MTPD::GetObjectInfo(unsigned long)+0xb18>
    1f54:	ldr	r0, [r4, #0]
        write_length_ += len;
    1f56:	adds	r3, #4
        
        const char * src=data;
    1f58:	add.w	r9, sp, #68	; 0x44
        //
        int pos = 0; // into data
    1f5c:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    1f60:	add.w	sl, r7, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    1f64:	str	r3, [r7, #4]
    1f66:	b.n	1f70 <MTPD::GetObjectInfo(unsigned long)+0x440>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1f68:	cmp.w	r8, #3
    1f6c:	bgt.n	1fae <MTPD::GetObjectInfo(unsigned long)+0x47e>
    1f6e:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1f70:	rsb	fp, r0, r5
    1f74:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    1f78:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1f7a:	cmp	fp, r3
    1f7c:	it	ge
    1f7e:	movge	fp, r3
          memcpy(dst,src,to_copy);
    1f80:	mov	r2, fp
          pos += to_copy;
    1f82:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    1f84:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1f88:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    1f8a:	add	r9, fp
          dst += to_copy;
    1f8c:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1f8e:	cmp	r3, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1f90:	str	r3, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1f92:	bne.n	1f68 <MTPD::GetObjectInfo(unsigned long)+0x438>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    1f94:	movs	r2, #60	; 0x3c
    1f96:	mov.w	r1, #512	; 0x200
    1f9a:	mov	r0, sl
    1f9c:	bl	a000 <usb_mtp_send>
    1fa0:	cmp	r0, #0
    1fa2:	ble.n	1f94 <MTPD::GetObjectInfo(unsigned long)+0x464>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1fa4:	cmp.w	r8, #3
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    1fa8:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1fac:	ble.n	1f6e <MTPD::GetObjectInfo(unsigned long)+0x43e>
    1fae:	movs	r3, #0
    1fb0:	ldrb	r2, [r7, #0]
    1fb2:	str	r3, [sp, #64]	; 0x40
    1fb4:	ldr	r3, [r7, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    1fb6:	cmp	r2, #0
    1fb8:	bne.w	1b92 <MTPD::GetObjectInfo(unsigned long)+0x62>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1fbc:	cmp	r3, #0
    1fbe:	beq.w	25c6 <MTPD::GetObjectInfo(unsigned long)+0xa96>
    1fc2:	ldr	r0, [r4, #0]
        write_length_ += len;
    1fc4:	adds	r3, #4
        
        const char * src=data;
    1fc6:	add.w	r9, sp, #64	; 0x40
        //
        int pos = 0; // into data
    1fca:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    1fce:	add.w	sl, r7, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    1fd2:	str	r3, [r7, #4]
    1fd4:	b.n	1fde <MTPD::GetObjectInfo(unsigned long)+0x4ae>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1fd6:	cmp.w	r8, #3
    1fda:	bgt.n	201c <MTPD::GetObjectInfo(unsigned long)+0x4ec>
    1fdc:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1fde:	rsb	fp, r0, r5
    1fe2:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    1fe6:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1fe8:	cmp	fp, r3
    1fea:	it	ge
    1fec:	movge	fp, r3
          memcpy(dst,src,to_copy);
    1fee:	mov	r2, fp
          pos += to_copy;
    1ff0:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    1ff2:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1ff6:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    1ff8:	add	r9, fp
          dst += to_copy;
    1ffa:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1ffc:	cmp	r3, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1ffe:	str	r3, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2000:	bne.n	1fd6 <MTPD::GetObjectInfo(unsigned long)+0x4a6>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2002:	movs	r2, #60	; 0x3c
    2004:	mov.w	r1, #512	; 0x200
    2008:	mov	r0, sl
    200a:	bl	a000 <usb_mtp_send>
    200e:	cmp	r0, #0
    2010:	ble.n	2002 <MTPD::GetObjectInfo(unsigned long)+0x4d2>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2012:	cmp.w	r8, #3
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2016:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    201a:	ble.n	1fdc <MTPD::GetObjectInfo(unsigned long)+0x4ac>
    201c:	movs	r3, #0
    201e:	ldrb	r2, [r7, #0]
    2020:	str	r3, [sp, #60]	; 0x3c
    2022:	ldr	r3, [r7, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2024:	cmp	r2, #0
    2026:	bne.w	1b98 <MTPD::GetObjectInfo(unsigned long)+0x68>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    202a:	cmp	r3, #0
    202c:	beq.w	25bc <MTPD::GetObjectInfo(unsigned long)+0xa8c>
    2030:	ldr	r0, [r4, #0]
        write_length_ += len;
    2032:	adds	r3, #4
        
        const char * src=data;
    2034:	add.w	r9, sp, #60	; 0x3c
        //
        int pos = 0; // into data
    2038:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    203c:	add.w	sl, r7, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2040:	str	r3, [r7, #4]
    2042:	b.n	204c <MTPD::GetObjectInfo(unsigned long)+0x51c>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2044:	cmp.w	r8, #3
    2048:	bgt.n	208a <MTPD::GetObjectInfo(unsigned long)+0x55a>
    204a:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    204c:	rsb	fp, r0, r5
    2050:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    2054:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2056:	cmp	fp, r3
    2058:	it	ge
    205a:	movge	fp, r3
          memcpy(dst,src,to_copy);
    205c:	mov	r2, fp
          pos += to_copy;
    205e:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2060:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2064:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    2066:	add	r9, fp
          dst += to_copy;
    2068:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    206a:	cmp	r3, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    206c:	str	r3, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    206e:	bne.n	2044 <MTPD::GetObjectInfo(unsigned long)+0x514>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2070:	movs	r2, #60	; 0x3c
    2072:	mov.w	r1, #512	; 0x200
    2076:	mov	r0, sl
    2078:	bl	a000 <usb_mtp_send>
    207c:	cmp	r0, #0
    207e:	ble.n	2070 <MTPD::GetObjectInfo(unsigned long)+0x540>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2080:	cmp.w	r8, #3
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2084:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2088:	ble.n	204a <MTPD::GetObjectInfo(unsigned long)+0x51a>
    208a:	movs	r3, #0
    208c:	ldrb	r2, [r7, #0]
    208e:	str	r3, [sp, #56]	; 0x38
    2090:	ldr	r3, [r7, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2092:	cmp	r2, #0
    2094:	bne.w	1b9e <MTPD::GetObjectInfo(unsigned long)+0x6e>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2098:	cmp	r3, #0
    209a:	beq.w	25b2 <MTPD::GetObjectInfo(unsigned long)+0xa82>
    209e:	ldr	r0, [r4, #0]
        write_length_ += len;
    20a0:	adds	r3, #4
        
        const char * src=data;
    20a2:	add.w	r9, sp, #56	; 0x38
        //
        int pos = 0; // into data
    20a6:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    20aa:	add.w	sl, r7, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    20ae:	str	r3, [r7, #4]
    20b0:	b.n	20ba <MTPD::GetObjectInfo(unsigned long)+0x58a>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    20b2:	cmp.w	r8, #3
    20b6:	bgt.n	20f8 <MTPD::GetObjectInfo(unsigned long)+0x5c8>
    20b8:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    20ba:	rsb	fp, r0, r5
    20be:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    20c2:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    20c4:	cmp	fp, r3
    20c6:	it	ge
    20c8:	movge	fp, r3
          memcpy(dst,src,to_copy);
    20ca:	mov	r2, fp
          pos += to_copy;
    20cc:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    20ce:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    20d2:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    20d4:	add	r9, fp
          dst += to_copy;
    20d6:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    20d8:	cmp	r3, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    20da:	str	r3, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    20dc:	bne.n	20b2 <MTPD::GetObjectInfo(unsigned long)+0x582>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    20de:	movs	r2, #60	; 0x3c
    20e0:	mov.w	r1, #512	; 0x200
    20e4:	mov	r0, sl
    20e6:	bl	a000 <usb_mtp_send>
    20ea:	cmp	r0, #0
    20ec:	ble.n	20de <MTPD::GetObjectInfo(unsigned long)+0x5ae>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    20ee:	cmp.w	r8, #3
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    20f2:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    20f6:	ble.n	20b8 <MTPD::GetObjectInfo(unsigned long)+0x588>
    20f8:	movs	r3, #0
    20fa:	ldrb	r2, [r7, #0]
    20fc:	str	r3, [sp, #52]	; 0x34
    20fe:	ldr	r3, [r7, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2100:	cmp	r2, #0
    2102:	bne.w	1ba4 <MTPD::GetObjectInfo(unsigned long)+0x74>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2106:	cmp	r3, #0
    2108:	beq.w	25a8 <MTPD::GetObjectInfo(unsigned long)+0xa78>
    210c:	ldr	r0, [r4, #0]
        write_length_ += len;
    210e:	adds	r3, #4
        
        const char * src=data;
    2110:	add.w	r9, sp, #52	; 0x34
        //
        int pos = 0; // into data
    2114:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2118:	add.w	sl, r7, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    211c:	str	r3, [r7, #4]
    211e:	b.n	2128 <MTPD::GetObjectInfo(unsigned long)+0x5f8>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2120:	cmp.w	r8, #3
    2124:	bgt.n	2166 <MTPD::GetObjectInfo(unsigned long)+0x636>
    2126:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2128:	rsb	fp, r0, r5
    212c:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    2130:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2132:	cmp	fp, r3
    2134:	it	ge
    2136:	movge	fp, r3
          memcpy(dst,src,to_copy);
    2138:	mov	r2, fp
          pos += to_copy;
    213a:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    213c:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2140:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    2142:	add	r9, fp
          dst += to_copy;
    2144:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2146:	cmp	r3, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2148:	str	r3, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    214a:	bne.n	2120 <MTPD::GetObjectInfo(unsigned long)+0x5f0>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    214c:	movs	r2, #60	; 0x3c
    214e:	mov.w	r1, #512	; 0x200
    2152:	mov	r0, sl
    2154:	bl	a000 <usb_mtp_send>
    2158:	cmp	r0, #0
    215a:	ble.n	214c <MTPD::GetObjectInfo(unsigned long)+0x61c>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    215c:	cmp.w	r8, #3
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2160:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2164:	ble.n	2126 <MTPD::GetObjectInfo(unsigned long)+0x5f6>
    2166:	ldr	r3, [r6, #0]
    2168:	ldrb	r2, [r7, #0]
    216a:	str	r3, [sp, #48]	; 0x30
    216c:	ldr	r3, [r7, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    216e:	cmp	r2, #0
    2170:	bne.w	1baa <MTPD::GetObjectInfo(unsigned long)+0x7a>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2174:	cmp	r3, #0
    2176:	beq.w	259e <MTPD::GetObjectInfo(unsigned long)+0xa6e>
    217a:	ldr	r0, [r4, #0]
        write_length_ += len;
    217c:	adds	r3, #4
        
        const char * src=data;
    217e:	add.w	r9, sp, #48	; 0x30
        //
        int pos = 0; // into data
    2182:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2186:	add.w	sl, r7, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    218a:	str	r3, [r7, #4]
    218c:	b.n	2196 <MTPD::GetObjectInfo(unsigned long)+0x666>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    218e:	cmp.w	r8, #3
    2192:	bgt.n	21d2 <MTPD::GetObjectInfo(unsigned long)+0x6a2>
    2194:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2196:	subs	r6, r5, r0
    2198:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    219c:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    219e:	cmp	r6, r3
    21a0:	it	ge
    21a2:	movge	r6, r3
          memcpy(dst,src,to_copy);
    21a4:	mov	r2, r6
          pos += to_copy;
    21a6:	add	r8, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    21a8:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    21ac:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    21ae:	add	r9, r6
          dst += to_copy;
    21b0:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    21b2:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    21b4:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    21b6:	bne.n	218e <MTPD::GetObjectInfo(unsigned long)+0x65e>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    21b8:	movs	r2, #60	; 0x3c
    21ba:	mov.w	r1, #512	; 0x200
    21be:	mov	r0, sl
    21c0:	bl	a000 <usb_mtp_send>
    21c4:	cmp	r0, #0
    21c6:	ble.n	21b8 <MTPD::GetObjectInfo(unsigned long)+0x688>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    21c8:	cmp.w	r8, #3
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    21cc:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    21d0:	ble.n	2194 <MTPD::GetObjectInfo(unsigned long)+0x664>
    21d2:	ldr	r2, [sp, #36]	; 0x24
    21d4:	ldrb	r1, [r7, #0]
    21d6:	sub.w	r2, r2, #4294967295
    21da:	ldr	r3, [r7, #4]
    21dc:	clz	r2, r2
    21e0:	lsrs	r2, r2, #5
    21e2:	strh.w	r2, [sp, #30]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    21e6:	cmp	r1, #0
    21e8:	bne.w	1bbc <MTPD::GetObjectInfo(unsigned long)+0x8c>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    21ec:	cmp	r3, #0
    21ee:	beq.w	2594 <MTPD::GetObjectInfo(unsigned long)+0xa64>
    21f2:	ldr	r0, [r4, #0]
        write_length_ += len;
    21f4:	adds	r3, #2
        
        const char * src=data;
    21f6:	add.w	r9, sp, #30
        //
        int pos = 0; // into data
    21fa:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    21fe:	add.w	sl, r7, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2202:	str	r3, [r7, #4]
    2204:	b.n	220e <MTPD::GetObjectInfo(unsigned long)+0x6de>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2206:	cmp.w	r8, #1
    220a:	bgt.n	224a <MTPD::GetObjectInfo(unsigned long)+0x71a>
    220c:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    220e:	subs	r6, r5, r0
    2210:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    2214:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2216:	cmp	r6, r3
    2218:	it	ge
    221a:	movge	r6, r3
          memcpy(dst,src,to_copy);
    221c:	mov	r2, r6
          pos += to_copy;
    221e:	add	r8, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2220:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2224:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    2226:	add	r9, r6
          dst += to_copy;
    2228:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    222a:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    222c:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    222e:	bne.n	2206 <MTPD::GetObjectInfo(unsigned long)+0x6d6>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2230:	movs	r2, #60	; 0x3c
    2232:	mov.w	r1, #512	; 0x200
    2236:	mov	r0, sl
    2238:	bl	a000 <usb_mtp_send>
    223c:	cmp	r0, #0
    223e:	ble.n	2230 <MTPD::GetObjectInfo(unsigned long)+0x700>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2240:	cmp.w	r8, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2244:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2248:	ble.n	220c <MTPD::GetObjectInfo(unsigned long)+0x6dc>
    224a:	movs	r3, #0
    224c:	ldrb	r2, [r7, #0]
    224e:	str	r3, [sp, #84]	; 0x54
    2250:	ldr	r3, [r7, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2252:	cmp	r2, #0
    2254:	bne.w	1bc2 <MTPD::GetObjectInfo(unsigned long)+0x92>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2258:	cmp	r3, #0
    225a:	beq.w	258a <MTPD::GetObjectInfo(unsigned long)+0xa5a>
    225e:	ldr	r0, [r4, #0]
        write_length_ += len;
    2260:	adds	r3, #4
        
        const char * src=data;
    2262:	add.w	r9, sp, #84	; 0x54
        //
        int pos = 0; // into data
    2266:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    226a:	add.w	sl, r7, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    226e:	str	r3, [r7, #4]
    2270:	b.n	227a <MTPD::GetObjectInfo(unsigned long)+0x74a>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2272:	cmp.w	r8, #3
    2276:	bgt.n	22b6 <MTPD::GetObjectInfo(unsigned long)+0x786>
    2278:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    227a:	subs	r6, r5, r0
    227c:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    2280:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2282:	cmp	r6, r3
    2284:	it	ge
    2286:	movge	r6, r3
          memcpy(dst,src,to_copy);
    2288:	mov	r2, r6
          pos += to_copy;
    228a:	add	r8, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    228c:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2290:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    2292:	add	r9, r6
          dst += to_copy;
    2294:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2296:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2298:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    229a:	bne.n	2272 <MTPD::GetObjectInfo(unsigned long)+0x742>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    229c:	movs	r2, #60	; 0x3c
    229e:	mov.w	r1, #512	; 0x200
    22a2:	mov	r0, sl
    22a4:	bl	a000 <usb_mtp_send>
    22a8:	cmp	r0, #0
    22aa:	ble.n	229c <MTPD::GetObjectInfo(unsigned long)+0x76c>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    22ac:	cmp.w	r8, #3
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    22b0:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    22b4:	ble.n	2278 <MTPD::GetObjectInfo(unsigned long)+0x748>
    22b6:	movs	r3, #0
    22b8:	ldrb	r2, [r7, #0]
    22ba:	str	r3, [sp, #80]	; 0x50
    22bc:	ldr	r3, [r7, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    22be:	cmp	r2, #0
    22c0:	bne.w	1bc8 <MTPD::GetObjectInfo(unsigned long)+0x98>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    22c4:	cmp	r3, #0
    22c6:	beq.w	23ce <MTPD::GetObjectInfo(unsigned long)+0x89e>
    22ca:	ldr	r0, [r4, #0]
        write_length_ += len;
    22cc:	adds	r3, #4
        
        const char * src=data;
    22ce:	add.w	r9, sp, #80	; 0x50
        //
        int pos = 0; // into data
    22d2:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    22d6:	add.w	sl, r7, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    22da:	str	r3, [r7, #4]
    22dc:	b.n	22e6 <MTPD::GetObjectInfo(unsigned long)+0x7b6>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    22de:	cmp.w	r8, #3
    22e2:	bgt.n	2322 <MTPD::GetObjectInfo(unsigned long)+0x7f2>
    22e4:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    22e6:	subs	r6, r5, r0
    22e8:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    22ec:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    22ee:	cmp	r6, r3
    22f0:	it	ge
    22f2:	movge	r6, r3
          memcpy(dst,src,to_copy);
    22f4:	mov	r2, r6
          pos += to_copy;
    22f6:	add	r8, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    22f8:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    22fc:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    22fe:	add	r9, r6
          dst += to_copy;
    2300:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2302:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2304:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2306:	bne.n	22de <MTPD::GetObjectInfo(unsigned long)+0x7ae>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2308:	movs	r2, #60	; 0x3c
    230a:	mov.w	r1, #512	; 0x200
    230e:	mov	r0, sl
    2310:	bl	a000 <usb_mtp_send>
    2314:	cmp	r0, #0
    2316:	ble.n	2308 <MTPD::GetObjectInfo(unsigned long)+0x7d8>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2318:	cmp.w	r8, #3
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    231c:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2320:	ble.n	22e4 <MTPD::GetObjectInfo(unsigned long)+0x7b4>

#define Store2Storage(x) (x+1)
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    2322:	ldrb.w	r2, [sp, #88]	; 0x58
    2326:	ldrb.w	r8, [r7]
    232a:	ldr	r6, [r7, #4]
    232c:	cmp	r2, #0
    232e:	beq.n	23d8 <MTPD::GetObjectInfo(unsigned long)+0x8a8>
    { write8(strlen(str) + 1);
    2330:	add	r0, sp, #88	; 0x58
    2332:	str	r2, [sp, #12]
    2334:	bl	c040 <strlen>
    2338:	adds	r0, #1
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    233a:	ldr	r2, [sp, #12]
    233c:	strb.w	r0, [sp, #23]
    2340:	cmp.w	r8, #0
    2344:	bne.w	1be4 <MTPD::GetObjectInfo(unsigned long)+0xb4>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2348:	cmp	r6, #0
    234a:	beq.w	26a6 <MTPD::GetObjectInfo(unsigned long)+0xb76>
    234e:	ldr	r0, [r4, #0]
        write_length_ += len;
    2350:	adds	r3, r6, #1
        
        const char * src=data;
    2352:	add.w	r9, sp, #23
        //
        int pos = 0; // into data
    2356:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    235a:	add.w	sl, r7, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    235e:	str	r3, [r7, #4]
    2360:	b.n	236a <MTPD::GetObjectInfo(unsigned long)+0x83a>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2362:	cmp.w	r8, #0
    2366:	bgt.n	23a6 <MTPD::GetObjectInfo(unsigned long)+0x876>
    2368:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    236a:	subs	r6, r5, r0
    236c:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    2370:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2372:	cmp	r6, r3
    2374:	it	ge
    2376:	movge	r6, r3
          memcpy(dst,src,to_copy);
    2378:	mov	r2, r6
          pos += to_copy;
    237a:	add	r8, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    237c:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2380:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    2382:	add	r9, r6
          dst += to_copy;
    2384:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2386:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2388:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    238a:	bne.n	2362 <MTPD::GetObjectInfo(unsigned long)+0x832>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    238c:	movs	r2, #60	; 0x3c
    238e:	mov.w	r1, #512	; 0x200
    2392:	mov	r0, sl
    2394:	bl	a000 <usb_mtp_send>
    2398:	cmp	r0, #0
    239a:	ble.n	238c <MTPD::GetObjectInfo(unsigned long)+0x85c>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    239c:	cmp.w	r8, #0
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    23a0:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    23a4:	ble.n	2368 <MTPD::GetObjectInfo(unsigned long)+0x838>
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    23a6:	ldrb.w	r2, [sp, #88]	; 0x58
    23aa:	ldrb	r1, [r7, #0]
    23ac:	ldr	r3, [r7, #4]
    23ae:	cmp	r2, #0
    23b0:	bne.w	1bea <MTPD::GetObjectInfo(unsigned long)+0xba>
    23b4:	b.n	1c70 <MTPD::GetObjectInfo(unsigned long)+0x140>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    23b6:	add.w	r2, r7, #544	; 0x220
    23ba:	ldr	r4, [pc, #756]	; (26b0 <MTPD::GetObjectInfo(unsigned long)+0xb80>)
    23bc:	mov	r0, r2
    23be:	str	r2, [r4, #0]
    23c0:	b.n	1ca4 <MTPD::GetObjectInfo(unsigned long)+0x174>
    23c2:	movw	r2, #12289	; 0x3001
    23c6:	strh.w	r2, [sp, #28]
    23ca:	b.w	1b6a <MTPD::GetObjectInfo(unsigned long)+0x3a>
    23ce:	add.w	r2, r7, #544	; 0x220
    23d2:	mov	r0, r2
    23d4:	str	r2, [r4, #0]
    23d6:	b.n	22cc <MTPD::GetObjectInfo(unsigned long)+0x79c>
    23d8:	strb.w	r2, [sp, #22]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    23dc:	cmp.w	r8, #0
    23e0:	bne.w	1c80 <MTPD::GetObjectInfo(unsigned long)+0x150>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    23e4:	cmp	r6, #0
    23e6:	beq.w	2690 <MTPD::GetObjectInfo(unsigned long)+0xb60>
    23ea:	ldr	r0, [r4, #0]
        write_length_ += len;
    23ec:	adds	r3, r6, #1
        
        const char * src=data;
    23ee:	add.w	r9, sp, #22
        //
        int pos = 0; // into data
    23f2:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    23f6:	add.w	sl, r7, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    23fa:	str	r3, [r7, #4]
    23fc:	b.n	2406 <MTPD::GetObjectInfo(unsigned long)+0x8d6>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    23fe:	cmp.w	r8, #0
    2402:	bgt.n	2442 <MTPD::GetObjectInfo(unsigned long)+0x912>
    2404:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2406:	subs	r6, r5, r0
    2408:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    240c:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    240e:	cmp	r6, r3
    2410:	it	ge
    2412:	movge	r6, r3
          memcpy(dst,src,to_copy);
    2414:	mov	r2, r6
          pos += to_copy;
    2416:	add	r8, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2418:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    241c:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    241e:	add	r9, r6
          dst += to_copy;
    2420:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2422:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2424:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2426:	bne.n	23fe <MTPD::GetObjectInfo(unsigned long)+0x8ce>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2428:	movs	r2, #60	; 0x3c
    242a:	mov.w	r1, #512	; 0x200
    242e:	mov	r0, sl
    2430:	bl	a000 <usb_mtp_send>
    2434:	cmp	r0, #0
    2436:	ble.n	2428 <MTPD::GetObjectInfo(unsigned long)+0x8f8>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2438:	cmp.w	r8, #0
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    243c:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2440:	ble.n	2404 <MTPD::GetObjectInfo(unsigned long)+0x8d4>
    2442:	movs	r2, #0
    2444:	ldrb	r1, [r7, #0]
    2446:	ldr	r3, [r7, #4]
    2448:	strb.w	r2, [sp, #21]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    244c:	cmp	r1, #0
    244e:	bne.w	1c82 <MTPD::GetObjectInfo(unsigned long)+0x152>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2452:	cmp	r3, #0
    2454:	beq.w	2686 <MTPD::GetObjectInfo(unsigned long)+0xb56>
    2458:	ldr	r0, [r4, #0]
        write_length_ += len;
    245a:	adds	r3, #1
        
        const char * src=data;
    245c:	add.w	r9, sp, #21
        //
        int pos = 0; // into data
    2460:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2464:	add.w	sl, r7, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2468:	str	r3, [r7, #4]
    246a:	b.n	2474 <MTPD::GetObjectInfo(unsigned long)+0x944>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    246c:	cmp.w	r8, #0
    2470:	bgt.n	24b0 <MTPD::GetObjectInfo(unsigned long)+0x980>
    2472:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2474:	subs	r6, r5, r0
    2476:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    247a:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    247c:	cmp	r6, r3
    247e:	it	ge
    2480:	movge	r6, r3
          memcpy(dst,src,to_copy);
    2482:	mov	r2, r6
          pos += to_copy;
    2484:	add	r8, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2486:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    248a:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    248c:	add	r9, r6
          dst += to_copy;
    248e:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2490:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2492:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2494:	bne.n	246c <MTPD::GetObjectInfo(unsigned long)+0x93c>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2496:	movs	r2, #60	; 0x3c
    2498:	mov.w	r1, #512	; 0x200
    249c:	mov	r0, sl
    249e:	bl	a000 <usb_mtp_send>
    24a2:	cmp	r0, #0
    24a4:	ble.n	2496 <MTPD::GetObjectInfo(unsigned long)+0x966>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    24a6:	cmp.w	r8, #0
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    24aa:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    24ae:	ble.n	2472 <MTPD::GetObjectInfo(unsigned long)+0x942>
    24b0:	movs	r3, #0
    24b2:	ldrb	r2, [r7, #0]
    24b4:	strb.w	r3, [sp, #20]
    24b8:	ldr	r3, [r7, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    24ba:	cmp	r2, #0
    24bc:	bne.w	1c84 <MTPD::GetObjectInfo(unsigned long)+0x154>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    24c0:	cmp	r3, #0
    24c2:	beq.w	267c <MTPD::GetObjectInfo(unsigned long)+0xb4c>
    24c6:	ldr	r0, [r4, #0]
        write_length_ += len;
    24c8:	adds	r3, #1
        
        const char * src=data;
    24ca:	add.w	r9, sp, #20
        //
        int pos = 0; // into data
    24ce:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    24d2:	add.w	sl, r7, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    24d6:	str	r3, [r7, #4]
    24d8:	b.n	24e2 <MTPD::GetObjectInfo(unsigned long)+0x9b2>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    24da:	cmp.w	r8, #0
    24de:	bgt.n	251e <MTPD::GetObjectInfo(unsigned long)+0x9ee>
    24e0:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    24e2:	subs	r6, r5, r0
    24e4:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    24e8:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    24ea:	cmp	r6, r3
    24ec:	it	ge
    24ee:	movge	r6, r3
          memcpy(dst,src,to_copy);
    24f0:	mov	r2, r6
          pos += to_copy;
    24f2:	add	r8, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    24f4:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    24f8:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    24fa:	add	r9, r6
          dst += to_copy;
    24fc:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    24fe:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2500:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2502:	bne.n	24da <MTPD::GetObjectInfo(unsigned long)+0x9aa>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2504:	movs	r2, #60	; 0x3c
    2506:	mov.w	r1, #512	; 0x200
    250a:	mov	r0, sl
    250c:	bl	a000 <usb_mtp_send>
    2510:	cmp	r0, #0
    2512:	ble.n	2504 <MTPD::GetObjectInfo(unsigned long)+0x9d4>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2514:	cmp.w	r8, #0
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2518:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    251c:	ble.n	24e0 <MTPD::GetObjectInfo(unsigned long)+0x9b0>
    251e:	movs	r3, #0
    2520:	ldrb	r2, [r7, #0]
    2522:	strb.w	r3, [sp, #19]
    2526:	ldr	r3, [r7, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2528:	cmp	r2, #0
    252a:	bne.w	1c86 <MTPD::GetObjectInfo(unsigned long)+0x156>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    252e:	cmp	r3, #0
    2530:	beq.w	2672 <MTPD::GetObjectInfo(unsigned long)+0xb42>
    2534:	ldr	r0, [r4, #0]
        write_length_ += len;
    2536:	adds	r3, #1
        
        const char * src=data;
    2538:	add.w	r9, sp, #19
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    253c:	add.w	sl, r7, #544	; 0x220
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
    2540:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2544:	str	r3, [r7, #4]
    2546:	b.n	2552 <MTPD::GetObjectInfo(unsigned long)+0xa22>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2548:	cmp.w	r8, #0
    254c:	bgt.w	1c8a <MTPD::GetObjectInfo(unsigned long)+0x15a>
    2550:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2552:	subs	r6, r5, r0
    2554:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    2558:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    255a:	cmp	r6, r3
    255c:	it	ge
    255e:	movge	r6, r3
          memcpy(dst,src,to_copy);
    2560:	mov	r2, r6
          pos += to_copy;
    2562:	add	r8, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2564:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2568:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    256a:	add	r9, r6
          dst += to_copy;
    256c:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    256e:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2570:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2572:	bne.n	2548 <MTPD::GetObjectInfo(unsigned long)+0xa18>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2574:	movs	r2, #60	; 0x3c
    2576:	mov.w	r1, #512	; 0x200
    257a:	mov	r0, sl
    257c:	bl	a000 <usb_mtp_send>
    2580:	cmp	r0, #0
    2582:	ble.n	2574 <MTPD::GetObjectInfo(unsigned long)+0xa44>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2584:	str.w	sl, [r4]
    2588:	b.n	2548 <MTPD::GetObjectInfo(unsigned long)+0xa18>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    258a:	add.w	r2, r7, #544	; 0x220
    258e:	mov	r0, r2
    2590:	str	r2, [r4, #0]
    2592:	b.n	2260 <MTPD::GetObjectInfo(unsigned long)+0x730>
    2594:	add.w	r2, r7, #544	; 0x220
    2598:	mov	r0, r2
    259a:	str	r2, [r4, #0]
    259c:	b.n	21f4 <MTPD::GetObjectInfo(unsigned long)+0x6c4>
    259e:	add.w	r2, r7, #544	; 0x220
    25a2:	mov	r0, r2
    25a4:	str	r2, [r4, #0]
    25a6:	b.n	217c <MTPD::GetObjectInfo(unsigned long)+0x64c>
    25a8:	add.w	r2, r7, #544	; 0x220
    25ac:	mov	r0, r2
    25ae:	str	r2, [r4, #0]
    25b0:	b.n	210e <MTPD::GetObjectInfo(unsigned long)+0x5de>
    25b2:	add.w	r2, r7, #544	; 0x220
    25b6:	mov	r0, r2
    25b8:	str	r2, [r4, #0]
    25ba:	b.n	20a0 <MTPD::GetObjectInfo(unsigned long)+0x570>
    25bc:	add.w	r2, r7, #544	; 0x220
    25c0:	mov	r0, r2
    25c2:	str	r2, [r4, #0]
    25c4:	b.n	2032 <MTPD::GetObjectInfo(unsigned long)+0x502>
    25c6:	add.w	r2, r7, #544	; 0x220
    25ca:	mov	r0, r2
    25cc:	str	r2, [r4, #0]
    25ce:	b.n	1fc4 <MTPD::GetObjectInfo(unsigned long)+0x494>
    25d0:	cmp	r3, #0
    25d2:	beq.n	269a <MTPD::GetObjectInfo(unsigned long)+0xb6a>
    25d4:	ldr	r4, [pc, #216]	; (26b0 <MTPD::GetObjectInfo(unsigned long)+0xb80>)
    25d6:	ldr	r0, [r4, #0]
        write_length_ += len;
    25d8:	adds	r3, #2
        
        const char * src=data;
    25da:	add.w	r9, sp, #32
    25de:	add.w	r5, r7, #1056	; 0x420
        //
        int pos = 0; // into data
    25e2:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    25e6:	str	r3, [r7, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    25e8:	add.w	sl, r7, #544	; 0x220
    25ec:	b.n	25f8 <MTPD::GetObjectInfo(unsigned long)+0xac8>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    25ee:	cmp.w	r8, #1
    25f2:	bgt.w	2442 <MTPD::GetObjectInfo(unsigned long)+0x912>
    25f6:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    25f8:	subs	r6, r5, r0
    25fa:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    25fe:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2600:	cmp	r6, r3
    2602:	it	ge
    2604:	movge	r6, r3
          memcpy(dst,src,to_copy);
    2606:	mov	r2, r6
          pos += to_copy;
    2608:	add	r8, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    260a:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    260e:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    2610:	add	r9, r6
          dst += to_copy;
    2612:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2614:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2616:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2618:	bne.n	25ee <MTPD::GetObjectInfo(unsigned long)+0xabe>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    261a:	movs	r2, #60	; 0x3c
    261c:	mov.w	r1, #512	; 0x200
    2620:	mov	r0, sl
    2622:	bl	a000 <usb_mtp_send>
    2626:	cmp	r0, #0
    2628:	ble.n	261a <MTPD::GetObjectInfo(unsigned long)+0xaea>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    262a:	str.w	sl, [r4]
    262e:	b.n	25ee <MTPD::GetObjectInfo(unsigned long)+0xabe>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2630:	add.w	r2, r7, #544	; 0x220
    2634:	mov	r0, r2
    2636:	str	r2, [r4, #0]
    2638:	b.w	1d92 <MTPD::GetObjectInfo(unsigned long)+0x262>
    263c:	add.w	r2, r7, #544	; 0x220
    2640:	mov	r0, r2
    2642:	str	r2, [r4, #0]
    2644:	b.w	1d22 <MTPD::GetObjectInfo(unsigned long)+0x1f2>
    2648:	add.w	r2, r7, #544	; 0x220
    264c:	mov	r0, r2
    264e:	str	r2, [r4, #0]
    2650:	b.n	1f56 <MTPD::GetObjectInfo(unsigned long)+0x426>
    2652:	add.w	r2, r7, #544	; 0x220
    2656:	mov	r0, r2
    2658:	str	r2, [r4, #0]
    265a:	b.n	1ee8 <MTPD::GetObjectInfo(unsigned long)+0x3b8>
    265c:	add.w	r2, r7, #544	; 0x220
    2660:	mov	r0, r2
    2662:	str	r2, [r4, #0]
    2664:	b.n	1e7a <MTPD::GetObjectInfo(unsigned long)+0x34a>
    2666:	add.w	r2, r7, #544	; 0x220
    266a:	mov	r0, r2
    266c:	str	r2, [r4, #0]
    266e:	b.w	1e00 <MTPD::GetObjectInfo(unsigned long)+0x2d0>
    2672:	add.w	r2, r7, #544	; 0x220
    2676:	mov	r0, r2
    2678:	str	r2, [r4, #0]
    267a:	b.n	2536 <MTPD::GetObjectInfo(unsigned long)+0xa06>
    267c:	add.w	r2, r7, #544	; 0x220
    2680:	mov	r0, r2
    2682:	str	r2, [r4, #0]
    2684:	b.n	24c8 <MTPD::GetObjectInfo(unsigned long)+0x998>
    2686:	add.w	r2, r7, #544	; 0x220
    268a:	mov	r0, r2
    268c:	str	r2, [r4, #0]
    268e:	b.n	245a <MTPD::GetObjectInfo(unsigned long)+0x92a>
    2690:	add.w	r3, r7, #544	; 0x220
    2694:	mov	r0, r3
    2696:	str	r3, [r4, #0]
    2698:	b.n	23ec <MTPD::GetObjectInfo(unsigned long)+0x8bc>
    269a:	add.w	r2, r7, #544	; 0x220
    269e:	ldr	r4, [pc, #16]	; (26b0 <MTPD::GetObjectInfo(unsigned long)+0xb80>)
    26a0:	mov	r0, r2
    26a2:	str	r2, [r4, #0]
    26a4:	b.n	25d8 <MTPD::GetObjectInfo(unsigned long)+0xaa8>
    26a6:	add.w	r3, r7, #544	; 0x220
    26aa:	mov	r0, r3
    26ac:	str	r3, [r4, #0]
    26ae:	b.n	2350 <MTPD::GetObjectInfo(unsigned long)+0x820>
    26b0:	.word	0x20004604

000026b4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>:
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    }

    void getObjectPropDesc(uint32_t p1, uint32_t p2)
    {
      switch(p1)
    26b4:	mvn.w	r3, #56320	; 0xdc00
    26b8:	add	r3, r1
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    }

    void getObjectPropDesc(uint32_t p1, uint32_t p2)
    26ba:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    26be:	mov	r6, r0
    26c0:	sub	sp, #144	; 0x90
    {
      switch(p1)
    26c2:	cmp	r3, #67	; 0x43
    26c4:	bhi.n	2772 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbe>
    26c6:	tbh	[pc, r3, lsl #1]
    26ca:	.short	0x0057
    26cc:	.word	0x00730065
    26d0:	.word	0x005400ac
    26d4:	.word	0x00ba0054
    26d8:	.word	0x012d00f3
    26dc:	.word	0x01670054
    26e0:	.word	0x00540054
    26e4:	.word	0x00540054
    26e8:	.word	0x00540054
    26ec:	.word	0x00540054
    26f0:	.word	0x00540054
    26f4:	.word	0x00540054
    26f8:	.word	0x00540054
    26fc:	.word	0x00540054
    2700:	.word	0x00540054
    2704:	.word	0x00540054
    2708:	.word	0x00540054
    270c:	.word	0x00540054
    2710:	.word	0x00540054
    2714:	.word	0x00540054
    2718:	.word	0x00540054
    271c:	.word	0x00540054
    2720:	.word	0x00540054
    2724:	.word	0x00540054
    2728:	.word	0x00540054
    272c:	.word	0x00540054
    2730:	.word	0x00540054
    2734:	.word	0x00540054
    2738:	.word	0x00540054
    273c:	.word	0x00540054
    2740:	.word	0x00540054
    2744:	.word	0x00540054
    2748:	.word	0x01a10054
    274c:	.word	0x00540054
    2750:	.short	0x0044
    2752:	movw	r2, #56388	; 0xdc44
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2756:	ldrb	r3, [r0, #0]
    2758:	strh.w	r2, [sp, #70]	; 0x46
    275c:	cmp	r3, #0
    275e:	beq.w	32d0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc1c>
      {
        write_length_ += len;
    2762:	ldr	r3, [r6, #4]
    2764:	adds	r3, #2
    2766:	adds	r3, #2
    2768:	adds	r3, #1
    276a:	adds	r3, #1
    276c:	adds	r3, #4
    276e:	adds	r3, #1
    2770:	str	r3, [r6, #4]
          write8(0);
          break;
        default:
          break;
      }
    }
    2772:	add	sp, #144	; 0x90
    2774:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2778:	movw	r2, #56321	; 0xdc01
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    277c:	ldrb	r3, [r0, #0]
    277e:	strh.w	r2, [sp, #30]
    2782:	cmp	r3, #0
    2784:	beq.w	3192 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xade>
      {
        write_length_ += len;
    2788:	ldr	r3, [r6, #4]
    278a:	adds	r3, #2
    278c:	adds	r3, #2
    278e:	adds	r3, #1
    2790:	adds	r3, #4
    2792:	b.n	276c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb8>
    2794:	movw	r2, #56322	; 0xdc02
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2798:	ldrb	r3, [r0, #0]
    279a:	strh.w	r2, [sp, #36]	; 0x24
    279e:	cmp	r3, #0
    27a0:	beq.w	2f22 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x86e>
      {
        write_length_ += len;
    27a4:	ldr	r3, [r6, #4]
    27a6:	adds	r3, #2
    27a8:	adds	r3, #2
    27aa:	adds	r3, #1
    27ac:	adds	r3, #2
    27ae:	b.n	276c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb8>
    27b0:	movw	r2, #56323	; 0xdc03
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    27b4:	ldrb	r3, [r0, #0]
    27b6:	strh.w	r2, [sp, #42]	; 0x2a
    27ba:	cmp	r3, #0
    27bc:	bne.n	27a4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf0>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    27be:	ldr	r3, [r0, #4]
    27c0:	cmp	r3, #0
    27c2:	beq.w	41f0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b3c>
    27c6:	ldr	r4, [pc, #760]	; (2ac0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x40c>)
    27c8:	ldr	r0, [r4, #0]
        write_length_ += len;
    27ca:	adds	r3, #2
    27cc:	add.w	r5, r6, #1056	; 0x420
        
        const char * src=data;
    27d0:	add.w	r9, sp, #42	; 0x2a
        //
        int pos = 0; // into data
    27d4:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    27d8:	str	r3, [r6, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    27da:	add.w	sl, r6, #544	; 0x220
    27de:	b.n	27ea <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x136>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    27e0:	cmp.w	r8, #1
    27e4:	bgt.w	3826 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1172>
    27e8:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    27ea:	subs	r7, r5, r0
    27ec:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    27f0:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    27f2:	cmp	r7, r3
    27f4:	it	ge
    27f6:	movge	r7, r3
          memcpy(dst,src,to_copy);
    27f8:	mov	r2, r7
          pos += to_copy;
    27fa:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    27fc:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2800:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    2802:	add	r9, r7
          dst += to_copy;
    2804:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2806:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2808:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    280a:	bne.n	27e0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x12c>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    280c:	movs	r2, #60	; 0x3c
    280e:	mov.w	r1, #512	; 0x200
    2812:	mov	r0, sl
    2814:	bl	a000 <usb_mtp_send>
    2818:	cmp	r0, #0
    281a:	ble.n	280c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x158>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    281c:	str.w	sl, [r4]
    2820:	b.n	27e0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x12c>
    2822:	movw	r2, #56324	; 0xdc04
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2826:	ldrb	r3, [r0, #0]
    2828:	strh.w	r2, [sp, #46]	; 0x2e
    282c:	cmp	r3, #0
    282e:	beq.w	3892 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x11de>
      {
        write_length_ += len;
    2832:	ldr	r3, [r0, #4]
    2834:	adds	r3, #2
    2836:	adds	r3, #2
    2838:	adds	r3, #1
    283a:	adds	r3, #8
    283c:	b.n	276c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb8>
    283e:	movw	r2, #56327	; 0xdc07
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2842:	ldrb	r3, [r0, #0]
    2844:	strh.w	r2, [sp, #50]	; 0x32
    2848:	cmp	r3, #0
    284a:	bne.n	2762 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xae>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    284c:	ldr	r3, [r0, #4]
    284e:	cmp	r3, #0
    2850:	beq.w	42fe <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c4a>
    2854:	ldr	r4, [pc, #616]	; (2ac0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x40c>)
    2856:	ldr	r0, [r4, #0]
        write_length_ += len;
    2858:	adds	r3, #2
    285a:	add.w	r5, r6, #1056	; 0x420
        
        const char * src=data;
    285e:	add.w	r9, sp, #50	; 0x32
        //
        int pos = 0; // into data
    2862:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2866:	str	r3, [r6, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2868:	add.w	sl, r6, #544	; 0x220
    286c:	b.n	2878 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c4>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    286e:	cmp.w	r8, #1
    2872:	bgt.w	3cb0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x15fc>
    2876:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2878:	subs	r7, r5, r0
    287a:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    287e:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2880:	cmp	r7, r3
    2882:	it	ge
    2884:	movge	r7, r3
          memcpy(dst,src,to_copy);
    2886:	mov	r2, r7
          pos += to_copy;
    2888:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    288a:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    288e:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    2890:	add	r9, r7
          dst += to_copy;
    2892:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2894:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2896:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2898:	bne.n	286e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1ba>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    289a:	movs	r2, #60	; 0x3c
    289c:	mov.w	r1, #512	; 0x200
    28a0:	mov	r0, sl
    28a2:	bl	a000 <usb_mtp_send>
    28a6:	cmp	r0, #0
    28a8:	ble.n	289a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1e6>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    28aa:	str.w	sl, [r4]
    28ae:	b.n	286e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1ba>
    28b0:	movw	r2, #56328	; 0xdc08
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    28b4:	ldrb	r3, [r0, #0]
    28b6:	strh.w	r2, [sp, #54]	; 0x36
    28ba:	cmp	r3, #0
    28bc:	bne.w	2762 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xae>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    28c0:	ldr	r3, [r0, #4]
    28c2:	cmp	r3, #0
    28c4:	beq.w	420a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b56>
    28c8:	ldr	r4, [pc, #500]	; (2ac0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x40c>)
    28ca:	ldr	r0, [r4, #0]
        write_length_ += len;
    28cc:	adds	r3, #2
    28ce:	add.w	r5, r6, #1056	; 0x420
        
        const char * src=data;
    28d2:	add.w	r9, sp, #54	; 0x36
        //
        int pos = 0; // into data
    28d6:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    28da:	str	r3, [r6, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    28dc:	add.w	sl, r6, #544	; 0x220
    28e0:	b.n	28ec <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x238>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    28e2:	cmp.w	r8, #1
    28e6:	bgt.w	2a28 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x374>
    28ea:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    28ec:	subs	r7, r5, r0
    28ee:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    28f2:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    28f4:	cmp	r7, r3
    28f6:	it	ge
    28f8:	movge	r7, r3
          memcpy(dst,src,to_copy);
    28fa:	mov	r2, r7
          pos += to_copy;
    28fc:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    28fe:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2902:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    2904:	add	r9, r7
          dst += to_copy;
    2906:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2908:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    290a:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    290c:	bne.n	28e2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x22e>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    290e:	movs	r2, #60	; 0x3c
    2910:	mov.w	r1, #512	; 0x200
    2914:	mov	r0, sl
    2916:	bl	a000 <usb_mtp_send>
    291a:	cmp	r0, #0
    291c:	ble.n	290e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x25a>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    291e:	str.w	sl, [r4]
    2922:	b.n	28e2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x22e>
    2924:	movw	r2, #56329	; 0xdc09
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2928:	ldrb	r3, [r0, #0]
    292a:	strh.w	r2, [sp, #58]	; 0x3a
    292e:	cmp	r3, #0
    2930:	bne.w	2762 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xae>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2934:	ldr	r3, [r0, #4]
    2936:	cmp	r3, #0
    2938:	beq.w	42d0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c1c>
    293c:	ldr	r4, [pc, #384]	; (2ac0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x40c>)
    293e:	ldr	r0, [r4, #0]
        write_length_ += len;
    2940:	adds	r3, #2
    2942:	add.w	r5, r6, #1056	; 0x420
        
        const char * src=data;
    2946:	add.w	r9, sp, #58	; 0x3a
        //
        int pos = 0; // into data
    294a:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    294e:	str	r3, [r6, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2950:	add.w	sl, r6, #544	; 0x220
    2954:	b.n	2960 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x2ac>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2956:	cmp.w	r8, #1
    295a:	bgt.w	2b06 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x452>
    295e:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2960:	subs	r7, r5, r0
    2962:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    2966:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2968:	cmp	r7, r3
    296a:	it	ge
    296c:	movge	r7, r3
          memcpy(dst,src,to_copy);
    296e:	mov	r2, r7
          pos += to_copy;
    2970:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2972:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2976:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    2978:	add	r9, r7
          dst += to_copy;
    297a:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    297c:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    297e:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2980:	bne.n	2956 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x2a2>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2982:	movs	r2, #60	; 0x3c
    2984:	mov.w	r1, #512	; 0x200
    2988:	mov	r0, sl
    298a:	bl	a000 <usb_mtp_send>
    298e:	cmp	r0, #0
    2990:	ble.n	2982 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x2ce>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2992:	str.w	sl, [r4]
    2996:	b.n	2956 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x2a2>
    2998:	movw	r2, #56331	; 0xdc0b
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    299c:	ldrb	r3, [r0, #0]
    299e:	strh.w	r2, [sp, #62]	; 0x3e
    29a2:	cmp	r3, #0
    29a4:	bne.w	2788 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xd4>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    29a8:	ldr	r3, [r0, #4]
    29aa:	cmp	r3, #0
    29ac:	beq.w	42b6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c02>
    29b0:	ldr	r4, [pc, #268]	; (2ac0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x40c>)
    29b2:	ldr	r0, [r4, #0]
        write_length_ += len;
    29b4:	adds	r3, #2
    29b6:	add.w	r5, r6, #1056	; 0x420
        
        const char * src=data;
    29ba:	add.w	r9, sp, #62	; 0x3e
        //
        int pos = 0; // into data
    29be:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    29c2:	str	r3, [r6, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    29c4:	add.w	sl, r6, #544	; 0x220
    29c8:	b.n	29d4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x320>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    29ca:	cmp.w	r8, #1
    29ce:	bgt.w	2d16 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x662>
    29d2:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    29d4:	subs	r7, r5, r0
    29d6:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    29da:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    29dc:	cmp	r7, r3
    29de:	it	ge
    29e0:	movge	r7, r3
          memcpy(dst,src,to_copy);
    29e2:	mov	r2, r7
          pos += to_copy;
    29e4:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    29e6:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    29ea:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    29ec:	add	r9, r7
          dst += to_copy;
    29ee:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    29f0:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    29f2:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    29f4:	bne.n	29ca <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x316>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    29f6:	movs	r2, #60	; 0x3c
    29f8:	mov.w	r1, #512	; 0x200
    29fc:	mov	r0, sl
    29fe:	bl	a000 <usb_mtp_send>
    2a02:	cmp	r0, #0
    2a04:	ble.n	29f6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x342>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2a06:	str.w	sl, [r4]
    2a0a:	b.n	29ca <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x316>
    2a0c:	movw	r2, #56385	; 0xdc41
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2a10:	ldrb	r3, [r0, #0]
    2a12:	strh.w	r2, [sp, #66]	; 0x42
    2a16:	cmp	r3, #0
    2a18:	beq.w	3542 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe8e>
      {
        write_length_ += len;
    2a1c:	ldr	r3, [r0, #4]
    2a1e:	adds	r3, #2
    2a20:	adds	r3, #2
    2a22:	adds	r3, #1
    2a24:	adds	r3, #8
    2a26:	b.n	283a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x186>
    2a28:	movw	r1, #65535	; 0xffff
    2a2c:	ldrb	r2, [r6, #0]
    2a2e:	ldr	r3, [r6, #4]
    2a30:	strh.w	r1, [sp, #52]	; 0x34
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2a34:	cmp	r2, #0
    2a36:	bne.w	2766 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb2>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2a3a:	cmp	r3, #0
    2a3c:	beq.w	42e8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c34>
    2a40:	ldr	r0, [r4, #0]
        write_length_ += len;
    2a42:	adds	r3, #2
        
        const char * src=data;
    2a44:	add.w	r9, sp, #52	; 0x34
        //
        int pos = 0; // into data
    2a48:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2a4c:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2a50:	str	r3, [r6, #4]
    2a52:	b.n	2a5c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3a8>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2a54:	cmp.w	r8, #1
    2a58:	bgt.n	2a94 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3e0>
    2a5a:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2a5c:	subs	r7, r5, r0
    2a5e:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    2a62:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2a64:	cmp	r7, r3
    2a66:	it	ge
    2a68:	movge	r7, r3
          memcpy(dst,src,to_copy);
    2a6a:	mov	r2, r7
          pos += to_copy;
    2a6c:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2a6e:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2a72:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    2a74:	add	r9, r7
          dst += to_copy;
    2a76:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2a78:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2a7a:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2a7c:	bne.n	2a54 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3a0>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2a7e:	movs	r2, #60	; 0x3c
    2a80:	mov.w	r1, #512	; 0x200
    2a84:	mov	r0, sl
    2a86:	bl	a000 <usb_mtp_send>
    2a8a:	cmp	r0, #0
    2a8c:	ble.n	2a7e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3ca>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2a8e:	str.w	sl, [r4]
    2a92:	b.n	2a54 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3a0>
    2a94:	movs	r1, #0
    2a96:	ldrb	r2, [r6, #0]
    2a98:	ldr	r3, [r6, #4]
    2a9a:	strb.w	r1, [sp, #17]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2a9e:	cmp	r2, #0
    2aa0:	bne.w	2768 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb4>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2aa4:	cmp	r3, #0
    2aa6:	beq.w	42c4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c10>
    2aaa:	ldr	r0, [r4, #0]
        write_length_ += len;
    2aac:	adds	r3, #1
        
        const char * src=data;
    2aae:	add.w	r9, sp, #17
        //
        int pos = 0; // into data
    2ab2:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2ab6:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2aba:	str	r3, [r6, #4]
    2abc:	b.n	2ace <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x41a>
    2abe:	nop
    2ac0:	.word	0x20004604
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2ac4:	cmp.w	r8, #0
    2ac8:	bgt.w	3ec0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x180c>
    2acc:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2ace:	subs	r7, r5, r0
    2ad0:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    2ad4:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2ad6:	cmp	r7, r3
    2ad8:	it	ge
    2ada:	movge	r7, r3
          memcpy(dst,src,to_copy);
    2adc:	mov	r2, r7
          pos += to_copy;
    2ade:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2ae0:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2ae4:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    2ae6:	add	r9, r7
          dst += to_copy;
    2ae8:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2aea:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2aec:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2aee:	bne.n	2ac4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x410>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2af0:	movs	r2, #60	; 0x3c
    2af2:	mov.w	r1, #512	; 0x200
    2af6:	mov	r0, sl
    2af8:	bl	a000 <usb_mtp_send>
    2afc:	cmp	r0, #0
    2afe:	ble.n	2af0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x43c>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2b00:	str.w	sl, [r4]
    2b04:	b.n	2ac4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x410>
    2b06:	movw	r1, #65535	; 0xffff
    2b0a:	ldrb	r2, [r6, #0]
    2b0c:	ldr	r3, [r6, #4]
    2b0e:	strh.w	r1, [sp, #56]	; 0x38
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2b12:	cmp	r2, #0
    2b14:	bne.w	2766 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb2>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2b18:	cmp	r3, #0
    2b1a:	beq.w	43f2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1d3e>
    2b1e:	ldr	r0, [r4, #0]
        write_length_ += len;
    2b20:	adds	r3, #2
        
        const char * src=data;
    2b22:	add.w	r9, sp, #56	; 0x38
        //
        int pos = 0; // into data
    2b26:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2b2a:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2b2e:	str	r3, [r6, #4]
    2b30:	b.n	2b3a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x486>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2b32:	cmp.w	r8, #1
    2b36:	bgt.n	2b72 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x4be>
    2b38:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2b3a:	subs	r7, r5, r0
    2b3c:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    2b40:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2b42:	cmp	r7, r3
    2b44:	it	ge
    2b46:	movge	r7, r3
          memcpy(dst,src,to_copy);
    2b48:	mov	r2, r7
          pos += to_copy;
    2b4a:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2b4c:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2b50:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    2b52:	add	r9, r7
          dst += to_copy;
    2b54:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2b56:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2b58:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2b5a:	bne.n	2b32 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x47e>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2b5c:	movs	r2, #60	; 0x3c
    2b5e:	mov.w	r1, #512	; 0x200
    2b62:	mov	r0, sl
    2b64:	bl	a000 <usb_mtp_send>
    2b68:	cmp	r0, #0
    2b6a:	ble.n	2b5c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x4a8>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2b6c:	str.w	sl, [r4]
    2b70:	b.n	2b32 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x47e>
    2b72:	movs	r1, #0
    2b74:	ldrb	r2, [r6, #0]
    2b76:	ldr	r3, [r6, #4]
    2b78:	strb.w	r1, [sp, #20]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2b7c:	cmp	r2, #0
    2b7e:	bne.w	2768 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb4>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2b82:	cmp	r3, #0
    2b84:	beq.w	43e6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1d32>
    2b88:	ldr	r0, [r4, #0]
        write_length_ += len;
    2b8a:	adds	r3, #1
        
        const char * src=data;
    2b8c:	add.w	r9, sp, #20
        //
        int pos = 0; // into data
    2b90:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2b94:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2b98:	str	r3, [r6, #4]
    2b9a:	b.n	2ba4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x4f0>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2b9c:	cmp.w	r8, #0
    2ba0:	bgt.n	2bdc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x528>
    2ba2:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2ba4:	subs	r7, r5, r0
    2ba6:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    2baa:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2bac:	cmp	r7, r3
    2bae:	it	ge
    2bb0:	movge	r7, r3
          memcpy(dst,src,to_copy);
    2bb2:	mov	r2, r7
          pos += to_copy;
    2bb4:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2bb6:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2bba:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    2bbc:	add	r9, r7
          dst += to_copy;
    2bbe:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2bc0:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2bc2:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2bc4:	bne.n	2b9c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x4e8>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2bc6:	movs	r2, #60	; 0x3c
    2bc8:	mov.w	r1, #512	; 0x200
    2bcc:	mov	r0, sl
    2bce:	bl	a000 <usb_mtp_send>
    2bd2:	cmp	r0, #0
    2bd4:	ble.n	2bc6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x512>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2bd6:	str.w	sl, [r4]
    2bda:	b.n	2b9c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x4e8>
    2bdc:	movs	r1, #0
    2bde:	ldrb	r2, [r6, #0]
    2be0:	ldr	r3, [r6, #4]
    2be2:	strb.w	r1, [sp, #19]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2be6:	cmp	r2, #0
    2be8:	bne.w	276a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb6>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2bec:	cmp	r3, #0
    2bee:	beq.w	43da <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1d26>
    2bf2:	ldr	r0, [r4, #0]
        write_length_ += len;
    2bf4:	adds	r3, #1
        
        const char * src=data;
    2bf6:	add.w	r9, sp, #19
        //
        int pos = 0; // into data
    2bfa:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2bfe:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2c02:	str	r3, [r6, #4]
    2c04:	b.n	2c0e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x55a>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2c06:	cmp.w	r8, #0
    2c0a:	bgt.n	2c46 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x592>
    2c0c:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2c0e:	subs	r7, r5, r0
    2c10:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    2c14:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2c16:	cmp	r7, r3
    2c18:	it	ge
    2c1a:	movge	r7, r3
          memcpy(dst,src,to_copy);
    2c1c:	mov	r2, r7
          pos += to_copy;
    2c1e:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2c20:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2c24:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    2c26:	add	r9, r7
          dst += to_copy;
    2c28:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2c2a:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2c2c:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2c2e:	bne.n	2c06 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x552>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2c30:	movs	r2, #60	; 0x3c
    2c32:	mov.w	r1, #512	; 0x200
    2c36:	mov	r0, sl
    2c38:	bl	a000 <usb_mtp_send>
    2c3c:	cmp	r0, #0
    2c3e:	ble.n	2c30 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x57c>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2c40:	str.w	sl, [r4]
    2c44:	b.n	2c06 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x552>
    2c46:	movs	r1, #0
    2c48:	ldrb	r2, [r6, #0]
    2c4a:	ldr	r3, [r6, #4]
    2c4c:	str	r1, [sp, #100]	; 0x64
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2c4e:	cmp	r2, #0
    2c50:	bne.w	276c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2c54:	cmp	r3, #0
    2c56:	beq.w	43ce <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1d1a>
    2c5a:	ldr	r0, [r4, #0]
        write_length_ += len;
    2c5c:	adds	r3, #4
        
        const char * src=data;
    2c5e:	add.w	r9, sp, #100	; 0x64
        //
        int pos = 0; // into data
    2c62:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2c66:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2c6a:	str	r3, [r6, #4]
    2c6c:	b.n	2c76 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x5c2>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2c6e:	cmp.w	r8, #3
    2c72:	bgt.n	2cae <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x5fa>
    2c74:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2c76:	subs	r7, r5, r0
    2c78:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    2c7c:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2c7e:	cmp	r7, r3
    2c80:	it	ge
    2c82:	movge	r7, r3
          memcpy(dst,src,to_copy);
    2c84:	mov	r2, r7
          pos += to_copy;
    2c86:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2c88:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2c8c:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    2c8e:	add	r9, r7
          dst += to_copy;
    2c90:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2c92:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2c94:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2c96:	bne.n	2c6e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x5ba>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2c98:	movs	r2, #60	; 0x3c
    2c9a:	mov.w	r1, #512	; 0x200
    2c9e:	mov	r0, sl
    2ca0:	bl	a000 <usb_mtp_send>
    2ca4:	cmp	r0, #0
    2ca6:	ble.n	2c98 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x5e4>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2ca8:	str.w	sl, [r4]
    2cac:	b.n	2c6e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x5ba>
    2cae:	movs	r1, #0
    2cb0:	ldrb	r2, [r6, #0]
    2cb2:	ldr	r3, [r6, #4]
    2cb4:	strb.w	r1, [sp, #18]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2cb8:	cmp	r2, #0
    2cba:	bne.w	276e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xba>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2cbe:	cmp	r3, #0
    2cc0:	beq.w	42aa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1bf6>
    2cc4:	ldr	r0, [r4, #0]
        write_length_ += len;
    2cc6:	adds	r3, #1
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2cc8:	add.w	r9, r6, #544	; 0x220
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    2ccc:	add.w	r8, sp, #18
        //
        int pos = 0; // into data
    2cd0:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2cd2:	str	r3, [r6, #4]
    2cd4:	b.n	2cde <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x62a>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2cd6:	cmp	r7, #0
    2cd8:	bgt.w	2772 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbe>
    2cdc:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2cde:	subs	r6, r5, r0
    2ce0:	rsb	r3, r7, #1
          memcpy(dst,src,to_copy);
    2ce4:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2ce6:	cmp	r6, r3
    2ce8:	it	ge
    2cea:	movge	r6, r3
          memcpy(dst,src,to_copy);
    2cec:	mov	r2, r6
          pos += to_copy;
    2cee:	add	r7, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2cf0:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2cf4:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    2cf6:	add	r8, r6
          dst += to_copy;
    2cf8:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2cfa:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2cfc:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2cfe:	bne.n	2cd6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x622>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2d00:	movs	r2, #60	; 0x3c
    2d02:	mov.w	r1, #512	; 0x200
    2d06:	mov	r0, r9
    2d08:	bl	a000 <usb_mtp_send>
    2d0c:	cmp	r0, #0
    2d0e:	ble.n	2d00 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x64c>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2d10:	str.w	r9, [r4]
    2d14:	b.n	2cd6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x622>
    2d16:	movs	r1, #6
    2d18:	ldrb	r2, [r6, #0]
    2d1a:	ldr	r3, [r6, #4]
    2d1c:	strh.w	r1, [sp, #60]	; 0x3c
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2d20:	cmp	r2, #0
    2d22:	bne.w	278c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xd8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2d26:	cmp	r3, #0
    2d28:	beq.w	43c2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1d0e>
    2d2c:	ldr	r0, [r4, #0]
        write_length_ += len;
    2d2e:	adds	r3, #2
        
        const char * src=data;
    2d30:	add.w	r9, sp, #60	; 0x3c
        //
        int pos = 0; // into data
    2d34:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2d38:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2d3c:	str	r3, [r6, #4]
    2d3e:	b.n	2d48 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x694>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2d40:	cmp.w	r8, #1
    2d44:	bgt.n	2d80 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6cc>
    2d46:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2d48:	subs	r7, r5, r0
    2d4a:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    2d4e:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2d50:	cmp	r7, r3
    2d52:	it	ge
    2d54:	movge	r7, r3
          memcpy(dst,src,to_copy);
    2d56:	mov	r2, r7
          pos += to_copy;
    2d58:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2d5a:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2d5e:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    2d60:	add	r9, r7
          dst += to_copy;
    2d62:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2d64:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2d66:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2d68:	bne.n	2d40 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x68c>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2d6a:	movs	r2, #60	; 0x3c
    2d6c:	mov.w	r1, #512	; 0x200
    2d70:	mov	r0, sl
    2d72:	bl	a000 <usb_mtp_send>
    2d76:	cmp	r0, #0
    2d78:	ble.n	2d6a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b6>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2d7a:	str.w	sl, [r4]
    2d7e:	b.n	2d40 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x68c>
    2d80:	movs	r1, #0
    2d82:	ldrb	r2, [r6, #0]
    2d84:	ldr	r3, [r6, #4]
    2d86:	strb.w	r1, [sp, #22]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2d8a:	cmp	r2, #0
    2d8c:	bne.w	278e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xda>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2d90:	cmp	r3, #0
    2d92:	beq.w	43b6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1d02>
    2d96:	ldr	r0, [r4, #0]
        write_length_ += len;
    2d98:	adds	r3, #1
        
        const char * src=data;
    2d9a:	add.w	r9, sp, #22
        //
        int pos = 0; // into data
    2d9e:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2da2:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2da6:	str	r3, [r6, #4]
    2da8:	b.n	2db2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6fe>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2daa:	cmp.w	r8, #0
    2dae:	bgt.n	2dea <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x736>
    2db0:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2db2:	subs	r7, r5, r0
    2db4:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    2db8:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2dba:	cmp	r7, r3
    2dbc:	it	ge
    2dbe:	movge	r7, r3
          memcpy(dst,src,to_copy);
    2dc0:	mov	r2, r7
          pos += to_copy;
    2dc2:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2dc4:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2dc8:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    2dca:	add	r9, r7
          dst += to_copy;
    2dcc:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2dce:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2dd0:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2dd2:	bne.n	2daa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6f6>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2dd4:	movs	r2, #60	; 0x3c
    2dd6:	mov.w	r1, #512	; 0x200
    2dda:	mov	r0, sl
    2ddc:	bl	a000 <usb_mtp_send>
    2de0:	cmp	r0, #0
    2de2:	ble.n	2dd4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x720>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2de4:	str.w	sl, [r4]
    2de8:	b.n	2daa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6f6>
    2dea:	movs	r1, #0
    2dec:	ldrb	r2, [r6, #0]
    2dee:	ldr	r3, [r6, #4]
    2df0:	str	r1, [sp, #108]	; 0x6c
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2df2:	cmp	r2, #0
    2df4:	bne.w	2790 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xdc>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2df8:	cmp	r3, #0
    2dfa:	beq.w	43aa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1cf6>
    2dfe:	ldr	r0, [r4, #0]
        write_length_ += len;
    2e00:	adds	r3, #4
        
        const char * src=data;
    2e02:	add.w	r9, sp, #108	; 0x6c
        //
        int pos = 0; // into data
    2e06:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2e0a:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2e0e:	str	r3, [r6, #4]
    2e10:	b.n	2e1a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x766>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2e12:	cmp.w	r8, #3
    2e16:	bgt.n	2e52 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x79e>
    2e18:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2e1a:	subs	r7, r5, r0
    2e1c:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    2e20:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2e22:	cmp	r7, r3
    2e24:	it	ge
    2e26:	movge	r7, r3
          memcpy(dst,src,to_copy);
    2e28:	mov	r2, r7
          pos += to_copy;
    2e2a:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2e2c:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2e30:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    2e32:	add	r9, r7
          dst += to_copy;
    2e34:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2e36:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2e38:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2e3a:	bne.n	2e12 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x75e>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2e3c:	movs	r2, #60	; 0x3c
    2e3e:	mov.w	r1, #512	; 0x200
    2e42:	mov	r0, sl
    2e44:	bl	a000 <usb_mtp_send>
    2e48:	cmp	r0, #0
    2e4a:	ble.n	2e3c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x788>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2e4c:	str.w	sl, [r4]
    2e50:	b.n	2e12 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x75e>
    2e52:	movs	r1, #0
    2e54:	ldrb	r2, [r6, #0]
    2e56:	ldr	r3, [r6, #4]
    2e58:	str	r1, [sp, #104]	; 0x68
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2e5a:	cmp	r2, #0
    2e5c:	bne.w	276c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2e60:	cmp	r3, #0
    2e62:	beq.w	439e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1cea>
    2e66:	ldr	r0, [r4, #0]
        write_length_ += len;
    2e68:	adds	r3, #4
        
        const char * src=data;
    2e6a:	add.w	r9, sp, #104	; 0x68
        //
        int pos = 0; // into data
    2e6e:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2e72:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2e76:	str	r3, [r6, #4]
    2e78:	b.n	2e82 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x7ce>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2e7a:	cmp.w	r8, #3
    2e7e:	bgt.n	2eba <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x806>
    2e80:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2e82:	subs	r7, r5, r0
    2e84:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    2e88:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2e8a:	cmp	r7, r3
    2e8c:	it	ge
    2e8e:	movge	r7, r3
          memcpy(dst,src,to_copy);
    2e90:	mov	r2, r7
          pos += to_copy;
    2e92:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2e94:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2e98:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    2e9a:	add	r9, r7
          dst += to_copy;
    2e9c:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2e9e:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2ea0:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2ea2:	bne.n	2e7a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x7c6>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2ea4:	movs	r2, #60	; 0x3c
    2ea6:	mov.w	r1, #512	; 0x200
    2eaa:	mov	r0, sl
    2eac:	bl	a000 <usb_mtp_send>
    2eb0:	cmp	r0, #0
    2eb2:	ble.n	2ea4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x7f0>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2eb4:	str.w	sl, [r4]
    2eb8:	b.n	2e7a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x7c6>
    2eba:	movs	r1, #0
    2ebc:	ldrb	r2, [r6, #0]
    2ebe:	ldr	r3, [r6, #4]
    2ec0:	strb.w	r1, [sp, #21]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2ec4:	cmp	r2, #0
    2ec6:	bne.w	276e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xba>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2eca:	cmp	r3, #0
    2ecc:	beq.w	4360 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1cac>
    2ed0:	ldr	r0, [r4, #0]
        write_length_ += len;
    2ed2:	adds	r3, #1
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2ed4:	add.w	r9, r6, #544	; 0x220
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    2ed8:	add.w	r8, sp, #21
        //
        int pos = 0; // into data
    2edc:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2ede:	str	r3, [r6, #4]
    2ee0:	b.n	2eea <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x836>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2ee2:	cmp	r7, #0
    2ee4:	bgt.w	2772 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbe>
    2ee8:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2eea:	subs	r6, r5, r0
    2eec:	rsb	r3, r7, #1
          memcpy(dst,src,to_copy);
    2ef0:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2ef2:	cmp	r6, r3
    2ef4:	it	ge
    2ef6:	movge	r6, r3
          memcpy(dst,src,to_copy);
    2ef8:	mov	r2, r6
          pos += to_copy;
    2efa:	add	r7, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2efc:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2f00:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    2f02:	add	r8, r6
          dst += to_copy;
    2f04:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2f06:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2f08:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2f0a:	bne.n	2ee2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x82e>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2f0c:	movs	r2, #60	; 0x3c
    2f0e:	mov.w	r1, #512	; 0x200
    2f12:	mov	r0, r9
    2f14:	bl	a000 <usb_mtp_send>
    2f18:	cmp	r0, #0
    2f1a:	ble.n	2f0c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x858>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2f1c:	str.w	r9, [r4]
    2f20:	b.n	2ee2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x82e>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2f22:	ldr	r3, [r0, #4]
    2f24:	cmp	r3, #0
    2f26:	beq.w	4390 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1cdc>
    2f2a:	ldr	r4, [pc, #756]	; (3220 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb6c>)
    2f2c:	ldr	r0, [r4, #0]
        write_length_ += len;
    2f2e:	adds	r3, #2
    2f30:	add.w	r5, r6, #1056	; 0x420
        
        const char * src=data;
    2f34:	add.w	r9, sp, #36	; 0x24
        //
        int pos = 0; // into data
    2f38:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2f3c:	str	r3, [r6, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2f3e:	add.w	sl, r6, #544	; 0x220
    2f42:	b.n	2f4c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x898>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2f44:	cmp.w	r8, #1
    2f48:	bgt.n	2f84 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x8d0>
    2f4a:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2f4c:	subs	r7, r5, r0
    2f4e:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    2f52:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2f54:	cmp	r7, r3
    2f56:	it	ge
    2f58:	movge	r7, r3
          memcpy(dst,src,to_copy);
    2f5a:	mov	r2, r7
          pos += to_copy;
    2f5c:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2f5e:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2f62:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    2f64:	add	r9, r7
          dst += to_copy;
    2f66:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2f68:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2f6a:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2f6c:	bne.n	2f44 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x890>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2f6e:	movs	r2, #60	; 0x3c
    2f70:	mov.w	r1, #512	; 0x200
    2f74:	mov	r0, sl
    2f76:	bl	a000 <usb_mtp_send>
    2f7a:	cmp	r0, #0
    2f7c:	ble.n	2f6e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x8ba>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2f7e:	str.w	sl, [r4]
    2f82:	b.n	2f44 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x890>
    2f84:	movs	r1, #4
    2f86:	ldrb	r2, [r6, #0]
    2f88:	ldr	r3, [r6, #4]
    2f8a:	strh.w	r1, [sp, #34]	; 0x22
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2f8e:	cmp	r2, #0
    2f90:	bne.w	27a8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf4>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2f94:	cmp	r3, #0
    2f96:	beq.w	4384 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1cd0>
    2f9a:	ldr	r0, [r4, #0]
        write_length_ += len;
    2f9c:	adds	r3, #2
        
        const char * src=data;
    2f9e:	add.w	r9, sp, #34	; 0x22
        //
        int pos = 0; // into data
    2fa2:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2fa6:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2faa:	str	r3, [r6, #4]
    2fac:	b.n	2fb6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x902>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2fae:	cmp.w	r8, #1
    2fb2:	bgt.n	2fee <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x93a>
    2fb4:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2fb6:	subs	r7, r5, r0
    2fb8:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    2fbc:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2fbe:	cmp	r7, r3
    2fc0:	it	ge
    2fc2:	movge	r7, r3
          memcpy(dst,src,to_copy);
    2fc4:	mov	r2, r7
          pos += to_copy;
    2fc6:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2fc8:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2fcc:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    2fce:	add	r9, r7
          dst += to_copy;
    2fd0:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2fd2:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2fd4:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2fd6:	bne.n	2fae <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x8fa>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2fd8:	movs	r2, #60	; 0x3c
    2fda:	mov.w	r1, #512	; 0x200
    2fde:	mov	r0, sl
    2fe0:	bl	a000 <usb_mtp_send>
    2fe4:	cmp	r0, #0
    2fe6:	ble.n	2fd8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x924>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2fe8:	str.w	sl, [r4]
    2fec:	b.n	2fae <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x8fa>
    2fee:	movs	r1, #0
    2ff0:	ldrb	r2, [r6, #0]
    2ff2:	ldr	r3, [r6, #4]
    2ff4:	strb.w	r1, [sp, #7]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2ff8:	cmp	r2, #0
    2ffa:	bne.w	27aa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf6>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2ffe:	cmp	r3, #0
    3000:	beq.w	4378 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1cc4>
    3004:	ldr	r0, [r4, #0]
        write_length_ += len;
    3006:	adds	r3, #1
        
        const char * src=data;
    3008:	add.w	r9, sp, #7
        //
        int pos = 0; // into data
    300c:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3010:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3014:	str	r3, [r6, #4]
    3016:	b.n	3020 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x96c>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3018:	cmp.w	r8, #0
    301c:	bgt.n	3058 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x9a4>
    301e:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3020:	subs	r7, r5, r0
    3022:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    3026:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3028:	cmp	r7, r3
    302a:	it	ge
    302c:	movge	r7, r3
          memcpy(dst,src,to_copy);
    302e:	mov	r2, r7
          pos += to_copy;
    3030:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3032:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3036:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3038:	add	r9, r7
          dst += to_copy;
    303a:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    303c:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    303e:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3040:	bne.n	3018 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x964>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3042:	movs	r2, #60	; 0x3c
    3044:	mov.w	r1, #512	; 0x200
    3048:	mov	r0, sl
    304a:	bl	a000 <usb_mtp_send>
    304e:	cmp	r0, #0
    3050:	ble.n	3042 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x98e>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3052:	str.w	sl, [r4]
    3056:	b.n	3018 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x964>
    3058:	movs	r1, #0
    305a:	ldrb	r2, [r6, #0]
    305c:	ldr	r3, [r6, #4]
    305e:	strh.w	r1, [sp, #32]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3062:	cmp	r2, #0
    3064:	bne.w	27ac <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3068:	cmp	r3, #0
    306a:	beq.w	436c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1cb8>
    306e:	ldr	r0, [r4, #0]
        write_length_ += len;
    3070:	adds	r3, #2
        
        const char * src=data;
    3072:	add.w	r9, sp, #32
        //
        int pos = 0; // into data
    3076:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    307a:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    307e:	str	r3, [r6, #4]
    3080:	b.n	308a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x9d6>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3082:	cmp.w	r8, #1
    3086:	bgt.n	30c2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xa0e>
    3088:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    308a:	subs	r7, r5, r0
    308c:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    3090:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3092:	cmp	r7, r3
    3094:	it	ge
    3096:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3098:	mov	r2, r7
          pos += to_copy;
    309a:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    309c:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    30a0:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    30a2:	add	r9, r7
          dst += to_copy;
    30a4:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    30a6:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    30a8:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    30aa:	bne.n	3082 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x9ce>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    30ac:	movs	r2, #60	; 0x3c
    30ae:	mov.w	r1, #512	; 0x200
    30b2:	mov	r0, sl
    30b4:	bl	a000 <usb_mtp_send>
    30b8:	cmp	r0, #0
    30ba:	ble.n	30ac <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x9f8>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    30bc:	str.w	sl, [r4]
    30c0:	b.n	3082 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x9ce>
    30c2:	movs	r1, #0
    30c4:	ldrb	r2, [r6, #0]
    30c6:	ldr	r3, [r6, #4]
    30c8:	str	r1, [sp, #80]	; 0x50
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    30ca:	cmp	r2, #0
    30cc:	bne.w	276c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    30d0:	cmp	r3, #0
    30d2:	beq.w	429e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1bea>
    30d6:	ldr	r0, [r4, #0]
        write_length_ += len;
    30d8:	adds	r3, #4
        
        const char * src=data;
    30da:	add.w	r9, sp, #80	; 0x50
        //
        int pos = 0; // into data
    30de:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    30e2:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    30e6:	str	r3, [r6, #4]
    30e8:	b.n	30f2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xa3e>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    30ea:	cmp.w	r8, #3
    30ee:	bgt.n	312a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xa76>
    30f0:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    30f2:	subs	r7, r5, r0
    30f4:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    30f8:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    30fa:	cmp	r7, r3
    30fc:	it	ge
    30fe:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3100:	mov	r2, r7
          pos += to_copy;
    3102:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3104:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3108:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    310a:	add	r9, r7
          dst += to_copy;
    310c:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    310e:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3110:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3112:	bne.n	30ea <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xa36>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3114:	movs	r2, #60	; 0x3c
    3116:	mov.w	r1, #512	; 0x200
    311a:	mov	r0, sl
    311c:	bl	a000 <usb_mtp_send>
    3120:	cmp	r0, #0
    3122:	ble.n	3114 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xa60>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3124:	str.w	sl, [r4]
    3128:	b.n	30ea <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xa36>
    312a:	movs	r1, #0
    312c:	ldrb	r2, [r6, #0]
    312e:	ldr	r3, [r6, #4]
    3130:	strb.w	r1, [sp, #6]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3134:	cmp	r2, #0
    3136:	bne.w	276e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xba>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    313a:	cmp	r3, #0
    313c:	beq.w	4292 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1bde>
    3140:	ldr	r0, [r4, #0]
        write_length_ += len;
    3142:	adds	r3, #1
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3144:	add.w	r9, r6, #544	; 0x220
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    3148:	add.w	r8, sp, #6
        //
        int pos = 0; // into data
    314c:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    314e:	str	r3, [r6, #4]
    3150:	b.n	315a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xaa6>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3152:	cmp	r7, #0
    3154:	bgt.w	2772 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbe>
    3158:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    315a:	subs	r6, r5, r0
    315c:	rsb	r3, r7, #1
          memcpy(dst,src,to_copy);
    3160:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3162:	cmp	r6, r3
    3164:	it	ge
    3166:	movge	r6, r3
          memcpy(dst,src,to_copy);
    3168:	mov	r2, r6
          pos += to_copy;
    316a:	add	r7, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    316c:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3170:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3172:	add	r8, r6
          dst += to_copy;
    3174:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3176:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3178:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    317a:	bne.n	3152 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xa9e>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    317c:	movs	r2, #60	; 0x3c
    317e:	mov.w	r1, #512	; 0x200
    3182:	mov	r0, r9
    3184:	bl	a000 <usb_mtp_send>
    3188:	cmp	r0, #0
    318a:	ble.n	317c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xac8>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    318c:	str.w	r9, [r4]
    3190:	b.n	3152 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xa9e>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3192:	ldr	r3, [r0, #4]
    3194:	cmp	r3, #0
    3196:	beq.w	4352 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c9e>
    319a:	ldr	r4, [pc, #132]	; (3220 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb6c>)
    319c:	ldr	r0, [r4, #0]
        write_length_ += len;
    319e:	adds	r3, #2
    31a0:	add.w	r5, r6, #1056	; 0x420
        
        const char * src=data;
    31a4:	add.w	r9, sp, #30
        //
        int pos = 0; // into data
    31a8:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    31ac:	str	r3, [r6, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    31ae:	add.w	sl, r6, #544	; 0x220
    31b2:	b.n	31bc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb08>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    31b4:	cmp.w	r8, #1
    31b8:	bgt.n	31f4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb40>
    31ba:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    31bc:	subs	r7, r5, r0
    31be:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    31c2:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    31c4:	cmp	r7, r3
    31c6:	it	ge
    31c8:	movge	r7, r3
          memcpy(dst,src,to_copy);
    31ca:	mov	r2, r7
          pos += to_copy;
    31cc:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    31ce:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    31d2:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    31d4:	add	r9, r7
          dst += to_copy;
    31d6:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    31d8:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    31da:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    31dc:	bne.n	31b4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb00>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    31de:	movs	r2, #60	; 0x3c
    31e0:	mov.w	r1, #512	; 0x200
    31e4:	mov	r0, sl
    31e6:	bl	a000 <usb_mtp_send>
    31ea:	cmp	r0, #0
    31ec:	ble.n	31de <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb2a>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    31ee:	str.w	sl, [r4]
    31f2:	b.n	31b4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb00>
    31f4:	movs	r1, #6
    31f6:	ldrb	r2, [r6, #0]
    31f8:	ldr	r3, [r6, #4]
    31fa:	strh.w	r1, [sp, #28]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    31fe:	cmp	r2, #0
    3200:	bne.w	278c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xd8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3204:	cmp	r3, #0
    3206:	beq.w	4346 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c92>
    320a:	ldr	r0, [r4, #0]
        write_length_ += len;
    320c:	adds	r3, #2
        
        const char * src=data;
    320e:	add.w	r9, sp, #28
        //
        int pos = 0; // into data
    3212:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3216:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    321a:	str	r3, [r6, #4]
    321c:	b.n	322c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb78>
    321e:	nop
    3220:	.word	0x20004604
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3224:	cmp.w	r8, #1
    3228:	bgt.n	3264 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbb0>
    322a:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    322c:	subs	r7, r5, r0
    322e:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    3232:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3234:	cmp	r7, r3
    3236:	it	ge
    3238:	movge	r7, r3
          memcpy(dst,src,to_copy);
    323a:	mov	r2, r7
          pos += to_copy;
    323c:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    323e:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3242:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3244:	add	r9, r7
          dst += to_copy;
    3246:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3248:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    324a:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    324c:	bne.n	3224 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb70>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    324e:	movs	r2, #60	; 0x3c
    3250:	mov.w	r1, #512	; 0x200
    3254:	mov	r0, sl
    3256:	bl	a000 <usb_mtp_send>
    325a:	cmp	r0, #0
    325c:	ble.n	324e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb9a>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    325e:	str.w	sl, [r4]
    3262:	b.n	3224 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb70>
    3264:	movs	r1, #0
    3266:	ldrb	r2, [r6, #0]
    3268:	ldr	r3, [r6, #4]
    326a:	strb.w	r1, [sp, #5]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    326e:	cmp	r2, #0
    3270:	bne.w	278e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xda>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3274:	cmp	r3, #0
    3276:	beq.w	423e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b8a>
    327a:	ldr	r0, [r4, #0]
        write_length_ += len;
    327c:	adds	r3, #1
        
        const char * src=data;
    327e:	add.w	r9, sp, #5
        //
        int pos = 0; // into data
    3282:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3286:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    328a:	str	r3, [r6, #4]
    328c:	b.n	3298 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbe4>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    328e:	cmp.w	r8, #0
    3292:	bgt.w	3ffa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1946>
    3296:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3298:	subs	r7, r5, r0
    329a:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    329e:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    32a0:	cmp	r7, r3
    32a2:	it	ge
    32a4:	movge	r7, r3
          memcpy(dst,src,to_copy);
    32a6:	mov	r2, r7
          pos += to_copy;
    32a8:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    32aa:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    32ae:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    32b0:	add	r9, r7
          dst += to_copy;
    32b2:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    32b4:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    32b6:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    32b8:	bne.n	328e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbda>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    32ba:	movs	r2, #60	; 0x3c
    32bc:	mov.w	r1, #512	; 0x200
    32c0:	mov	r0, sl
    32c2:	bl	a000 <usb_mtp_send>
    32c6:	cmp	r0, #0
    32c8:	ble.n	32ba <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc06>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    32ca:	str.w	sl, [r4]
    32ce:	b.n	328e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbda>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    32d0:	ldr	r3, [r0, #4]
    32d2:	cmp	r3, #0
    32d4:	beq.w	426e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1bba>
    32d8:	ldr	r4, [pc, #756]	; (35d0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf1c>)
    32da:	ldr	r0, [r4, #0]
        write_length_ += len;
    32dc:	adds	r3, #2
    32de:	add.w	r5, r6, #1056	; 0x420
        
        const char * src=data;
    32e2:	add.w	r9, sp, #70	; 0x46
        //
        int pos = 0; // into data
    32e6:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    32ea:	str	r3, [r6, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    32ec:	add.w	sl, r6, #544	; 0x220
    32f0:	b.n	32fa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc46>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    32f2:	cmp.w	r8, #1
    32f6:	bgt.n	3332 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc7e>
    32f8:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    32fa:	subs	r7, r5, r0
    32fc:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    3300:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3302:	cmp	r7, r3
    3304:	it	ge
    3306:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3308:	mov	r2, r7
          pos += to_copy;
    330a:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    330c:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3310:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3312:	add	r9, r7
          dst += to_copy;
    3314:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3316:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3318:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    331a:	bne.n	32f2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc3e>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    331c:	movs	r2, #60	; 0x3c
    331e:	mov.w	r1, #512	; 0x200
    3322:	mov	r0, sl
    3324:	bl	a000 <usb_mtp_send>
    3328:	cmp	r0, #0
    332a:	ble.n	331c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc68>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    332c:	str.w	sl, [r4]
    3330:	b.n	32f2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc3e>
    3332:	movw	r1, #65535	; 0xffff
    3336:	ldrb	r2, [r6, #0]
    3338:	ldr	r3, [r6, #4]
    333a:	strh.w	r1, [sp, #68]	; 0x44
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    333e:	cmp	r2, #0
    3340:	bne.w	2766 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb2>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3344:	cmp	r3, #0
    3346:	beq.w	4262 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1bae>
    334a:	ldr	r0, [r4, #0]
        write_length_ += len;
    334c:	adds	r3, #2
        
        const char * src=data;
    334e:	add.w	r9, sp, #68	; 0x44
        //
        int pos = 0; // into data
    3352:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3356:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    335a:	str	r3, [r6, #4]
    335c:	b.n	3366 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xcb2>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    335e:	cmp.w	r8, #1
    3362:	bgt.n	339e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xcea>
    3364:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3366:	subs	r7, r5, r0
    3368:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    336c:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    336e:	cmp	r7, r3
    3370:	it	ge
    3372:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3374:	mov	r2, r7
          pos += to_copy;
    3376:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3378:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    337c:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    337e:	add	r9, r7
          dst += to_copy;
    3380:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3382:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3384:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3386:	bne.n	335e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xcaa>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3388:	movs	r2, #60	; 0x3c
    338a:	mov.w	r1, #512	; 0x200
    338e:	mov	r0, sl
    3390:	bl	a000 <usb_mtp_send>
    3394:	cmp	r0, #0
    3396:	ble.n	3388 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xcd4>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3398:	str.w	sl, [r4]
    339c:	b.n	335e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xcaa>
    339e:	movs	r1, #0
    33a0:	ldrb	r2, [r6, #0]
    33a2:	ldr	r3, [r6, #4]
    33a4:	strb.w	r1, [sp, #27]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    33a8:	cmp	r2, #0
    33aa:	bne.w	2768 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb4>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    33ae:	cmp	r3, #0
    33b0:	beq.w	4256 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1ba2>
    33b4:	ldr	r0, [r4, #0]
        write_length_ += len;
    33b6:	adds	r3, #1
        
        const char * src=data;
    33b8:	add.w	r9, sp, #27
        //
        int pos = 0; // into data
    33bc:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    33c0:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    33c4:	str	r3, [r6, #4]
    33c6:	b.n	33d0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xd1c>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    33c8:	cmp.w	r8, #0
    33cc:	bgt.n	3408 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xd54>
    33ce:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    33d0:	subs	r7, r5, r0
    33d2:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    33d6:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    33d8:	cmp	r7, r3
    33da:	it	ge
    33dc:	movge	r7, r3
          memcpy(dst,src,to_copy);
    33de:	mov	r2, r7
          pos += to_copy;
    33e0:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    33e2:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    33e6:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    33e8:	add	r9, r7
          dst += to_copy;
    33ea:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    33ec:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    33ee:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    33f0:	bne.n	33c8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xd14>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    33f2:	movs	r2, #60	; 0x3c
    33f4:	mov.w	r1, #512	; 0x200
    33f8:	mov	r0, sl
    33fa:	bl	a000 <usb_mtp_send>
    33fe:	cmp	r0, #0
    3400:	ble.n	33f2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xd3e>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3402:	str.w	sl, [r4]
    3406:	b.n	33c8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xd14>
    3408:	movs	r1, #0
    340a:	ldrb	r2, [r6, #0]
    340c:	ldr	r3, [r6, #4]
    340e:	strb.w	r1, [sp, #26]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3412:	cmp	r2, #0
    3414:	bne.w	276a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb6>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3418:	cmp	r3, #0
    341a:	beq.w	424a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b96>
    341e:	ldr	r0, [r4, #0]
        write_length_ += len;
    3420:	adds	r3, #1
        
        const char * src=data;
    3422:	add.w	r9, sp, #26
        //
        int pos = 0; // into data
    3426:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    342a:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    342e:	str	r3, [r6, #4]
    3430:	b.n	343a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xd86>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3432:	cmp.w	r8, #0
    3436:	bgt.n	3472 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xdbe>
    3438:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    343a:	subs	r7, r5, r0
    343c:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    3440:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3442:	cmp	r7, r3
    3444:	it	ge
    3446:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3448:	mov	r2, r7
          pos += to_copy;
    344a:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    344c:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3450:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3452:	add	r9, r7
          dst += to_copy;
    3454:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3456:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3458:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    345a:	bne.n	3432 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xd7e>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    345c:	movs	r2, #60	; 0x3c
    345e:	mov.w	r1, #512	; 0x200
    3462:	mov	r0, sl
    3464:	bl	a000 <usb_mtp_send>
    3468:	cmp	r0, #0
    346a:	ble.n	345c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xda8>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    346c:	str.w	sl, [r4]
    3470:	b.n	3432 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xd7e>
    3472:	movs	r1, #0
    3474:	ldrb	r2, [r6, #0]
    3476:	ldr	r3, [r6, #4]
    3478:	str	r1, [sp, #116]	; 0x74
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    347a:	cmp	r2, #0
    347c:	bne.w	276c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3480:	cmp	r3, #0
    3482:	beq.w	4286 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1bd2>
    3486:	ldr	r0, [r4, #0]
        write_length_ += len;
    3488:	adds	r3, #4
        
        const char * src=data;
    348a:	add.w	r9, sp, #116	; 0x74
        //
        int pos = 0; // into data
    348e:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3492:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3496:	str	r3, [r6, #4]
    3498:	b.n	34a2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xdee>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    349a:	cmp.w	r8, #3
    349e:	bgt.n	34da <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe26>
    34a0:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    34a2:	subs	r7, r5, r0
    34a4:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    34a8:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    34aa:	cmp	r7, r3
    34ac:	it	ge
    34ae:	movge	r7, r3
          memcpy(dst,src,to_copy);
    34b0:	mov	r2, r7
          pos += to_copy;
    34b2:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    34b4:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    34b8:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    34ba:	add	r9, r7
          dst += to_copy;
    34bc:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    34be:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    34c0:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    34c2:	bne.n	349a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xde6>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    34c4:	movs	r2, #60	; 0x3c
    34c6:	mov.w	r1, #512	; 0x200
    34ca:	mov	r0, sl
    34cc:	bl	a000 <usb_mtp_send>
    34d0:	cmp	r0, #0
    34d2:	ble.n	34c4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe10>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    34d4:	str.w	sl, [r4]
    34d8:	b.n	349a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xde6>
    34da:	movs	r1, #0
    34dc:	ldrb	r2, [r6, #0]
    34de:	ldr	r3, [r6, #4]
    34e0:	strb.w	r1, [sp, #25]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    34e4:	cmp	r2, #0
    34e6:	bne.w	276e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xba>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    34ea:	cmp	r3, #0
    34ec:	beq.w	4130 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1a7c>
    34f0:	ldr	r0, [r4, #0]
        write_length_ += len;
    34f2:	adds	r3, #1
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    34f4:	add.w	r9, r6, #544	; 0x220
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    34f8:	add.w	r8, sp, #25
        //
        int pos = 0; // into data
    34fc:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    34fe:	str	r3, [r6, #4]
    3500:	b.n	350a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe56>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3502:	cmp	r7, #0
    3504:	bgt.w	2772 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbe>
    3508:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    350a:	subs	r6, r5, r0
    350c:	rsb	r3, r7, #1
          memcpy(dst,src,to_copy);
    3510:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3512:	cmp	r6, r3
    3514:	it	ge
    3516:	movge	r6, r3
          memcpy(dst,src,to_copy);
    3518:	mov	r2, r6
          pos += to_copy;
    351a:	add	r7, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    351c:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3520:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3522:	add	r8, r6
          dst += to_copy;
    3524:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3526:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3528:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    352a:	bne.n	3502 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe4e>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    352c:	movs	r2, #60	; 0x3c
    352e:	mov.w	r1, #512	; 0x200
    3532:	mov	r0, r9
    3534:	bl	a000 <usb_mtp_send>
    3538:	cmp	r0, #0
    353a:	ble.n	352c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe78>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    353c:	str.w	r9, [r4]
    3540:	b.n	3502 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe4e>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3542:	ldr	r3, [r0, #4]
    3544:	cmp	r3, #0
    3546:	beq.w	4230 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b7c>
    354a:	ldr	r4, [pc, #132]	; (35d0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf1c>)
    354c:	ldr	r0, [r4, #0]
        write_length_ += len;
    354e:	adds	r3, #2
    3550:	add.w	r5, r6, #1056	; 0x420
        
        const char * src=data;
    3554:	add.w	r9, sp, #66	; 0x42
        //
        int pos = 0; // into data
    3558:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    355c:	str	r3, [r6, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    355e:	add.w	sl, r6, #544	; 0x220
    3562:	b.n	356c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xeb8>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3564:	cmp.w	r8, #1
    3568:	bgt.n	35a4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xef0>
    356a:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    356c:	subs	r7, r5, r0
    356e:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    3572:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3574:	cmp	r7, r3
    3576:	it	ge
    3578:	movge	r7, r3
          memcpy(dst,src,to_copy);
    357a:	mov	r2, r7
          pos += to_copy;
    357c:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    357e:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3582:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3584:	add	r9, r7
          dst += to_copy;
    3586:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3588:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    358a:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    358c:	bne.n	3564 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xeb0>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    358e:	movs	r2, #60	; 0x3c
    3590:	mov.w	r1, #512	; 0x200
    3594:	mov	r0, sl
    3596:	bl	a000 <usb_mtp_send>
    359a:	cmp	r0, #0
    359c:	ble.n	358e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xeda>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    359e:	str.w	sl, [r4]
    35a2:	b.n	3564 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xeb0>
    35a4:	movs	r1, #10
    35a6:	ldrb	r2, [r6, #0]
    35a8:	ldr	r3, [r6, #4]
    35aa:	strh.w	r1, [sp, #64]	; 0x40
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    35ae:	cmp	r2, #0
    35b0:	bne.w	2a20 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x36c>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    35b4:	cmp	r3, #0
    35b6:	beq.w	4224 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b70>
    35ba:	ldr	r0, [r4, #0]
        write_length_ += len;
    35bc:	adds	r3, #2
        
        const char * src=data;
    35be:	add.w	r9, sp, #64	; 0x40
        //
        int pos = 0; // into data
    35c2:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    35c6:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    35ca:	str	r3, [r6, #4]
    35cc:	b.n	35dc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf28>
    35ce:	nop
    35d0:	.word	0x20004604
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    35d4:	cmp.w	r8, #1
    35d8:	bgt.n	3614 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf60>
    35da:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    35dc:	subs	r7, r5, r0
    35de:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    35e2:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    35e4:	cmp	r7, r3
    35e6:	it	ge
    35e8:	movge	r7, r3
          memcpy(dst,src,to_copy);
    35ea:	mov	r2, r7
          pos += to_copy;
    35ec:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    35ee:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    35f2:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    35f4:	add	r9, r7
          dst += to_copy;
    35f6:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    35f8:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    35fa:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    35fc:	bne.n	35d4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf20>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    35fe:	movs	r2, #60	; 0x3c
    3600:	mov.w	r1, #512	; 0x200
    3604:	mov	r0, sl
    3606:	bl	a000 <usb_mtp_send>
    360a:	cmp	r0, #0
    360c:	ble.n	35fe <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf4a>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    360e:	str.w	sl, [r4]
    3612:	b.n	35d4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf20>
    3614:	movs	r1, #0
    3616:	ldrb	r2, [r6, #0]
    3618:	ldr	r3, [r6, #4]
    361a:	strb.w	r1, [sp, #24]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    361e:	cmp	r2, #0
    3620:	bne.w	2a22 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x36e>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3624:	cmp	r3, #0
    3626:	beq.w	4218 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b64>
    362a:	ldr	r0, [r4, #0]
        write_length_ += len;
    362c:	adds	r3, #1
        
        const char * src=data;
    362e:	add.w	r9, sp, #24
        //
        int pos = 0; // into data
    3632:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3636:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    363a:	str	r3, [r6, #4]
    363c:	b.n	3646 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf92>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    363e:	cmp.w	r8, #0
    3642:	bgt.n	367e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xfca>
    3644:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3646:	subs	r7, r5, r0
    3648:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    364c:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    364e:	cmp	r7, r3
    3650:	it	ge
    3652:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3654:	mov	r2, r7
          pos += to_copy;
    3656:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3658:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    365c:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    365e:	add	r9, r7
          dst += to_copy;
    3660:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3662:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3664:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3666:	bne.n	363e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf8a>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3668:	movs	r2, #60	; 0x3c
    366a:	mov.w	r1, #512	; 0x200
    366e:	mov	r0, sl
    3670:	bl	a000 <usb_mtp_send>
    3674:	cmp	r0, #0
    3676:	ble.n	3668 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xfb4>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3678:	str.w	sl, [r4]
    367c:	b.n	363e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf8a>
    367e:	movs	r0, #0
    3680:	movs	r1, #0
    3682:	ldrb	r2, [r6, #0]
    3684:	ldr	r3, [r6, #4]
    3686:	strd	r0, r1, [sp, #136]	; 0x88
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    368a:	cmp	r2, #0
    368c:	bne.w	2a24 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x370>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3690:	cmp	r3, #0
    3692:	beq.w	4330 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c7c>
    3696:	ldr	r0, [r4, #0]
        write_length_ += len;
    3698:	adds	r3, #8
        
        const char * src=data;
    369a:	add.w	r9, sp, #136	; 0x88
        //
        int pos = 0; // into data
    369e:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    36a2:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    36a6:	str	r3, [r6, #4]
    36a8:	b.n	36b2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xffe>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    36aa:	cmp.w	r8, #7
    36ae:	bgt.n	36ea <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1036>
    36b0:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    36b2:	subs	r7, r5, r0
    36b4:	rsb	r3, r8, #8
          memcpy(dst,src,to_copy);
    36b8:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    36ba:	cmp	r7, r3
    36bc:	it	ge
    36be:	movge	r7, r3
          memcpy(dst,src,to_copy);
    36c0:	mov	r2, r7
          pos += to_copy;
    36c2:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    36c4:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    36c8:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    36ca:	add	r9, r7
          dst += to_copy;
    36cc:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    36ce:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    36d0:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    36d2:	bne.n	36aa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xff6>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    36d4:	movs	r2, #60	; 0x3c
    36d6:	mov.w	r1, #512	; 0x200
    36da:	mov	r0, sl
    36dc:	bl	a000 <usb_mtp_send>
    36e0:	cmp	r0, #0
    36e2:	ble.n	36d4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1020>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    36e4:	str.w	sl, [r4]
    36e8:	b.n	36aa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xff6>
    36ea:	movs	r0, #0
    36ec:	movs	r1, #0
    36ee:	ldrb	r2, [r6, #0]
    36f0:	ldr	r3, [r6, #4]
    36f2:	strd	r0, r1, [sp, #128]	; 0x80
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    36f6:	cmp	r2, #0
    36f8:	bne.w	283a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x186>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    36fc:	cmp	r3, #0
    36fe:	beq.w	4324 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c70>
    3702:	ldr	r0, [r4, #0]
        write_length_ += len;
    3704:	adds	r3, #8
        
        const char * src=data;
    3706:	add.w	r9, sp, #128	; 0x80
        //
        int pos = 0; // into data
    370a:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    370e:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3712:	str	r3, [r6, #4]
    3714:	b.n	371e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x106a>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3716:	cmp.w	r8, #7
    371a:	bgt.n	3756 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x10a2>
    371c:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    371e:	subs	r7, r5, r0
    3720:	rsb	r3, r8, #8
          memcpy(dst,src,to_copy);
    3724:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3726:	cmp	r7, r3
    3728:	it	ge
    372a:	movge	r7, r3
          memcpy(dst,src,to_copy);
    372c:	mov	r2, r7
          pos += to_copy;
    372e:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3730:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3734:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3736:	add	r9, r7
          dst += to_copy;
    3738:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    373a:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    373c:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    373e:	bne.n	3716 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1062>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3740:	movs	r2, #60	; 0x3c
    3742:	mov.w	r1, #512	; 0x200
    3746:	mov	r0, sl
    3748:	bl	a000 <usb_mtp_send>
    374c:	cmp	r0, #0
    374e:	ble.n	3740 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x108c>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3750:	str.w	sl, [r4]
    3754:	b.n	3716 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1062>
    3756:	movs	r1, #0
    3758:	ldrb	r2, [r6, #0]
    375a:	ldr	r3, [r6, #4]
    375c:	str	r1, [sp, #112]	; 0x70
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    375e:	cmp	r2, #0
    3760:	bne.w	276c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3764:	cmp	r3, #0
    3766:	beq.w	4318 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c64>
    376a:	ldr	r0, [r4, #0]
        write_length_ += len;
    376c:	adds	r3, #4
        
        const char * src=data;
    376e:	add.w	r9, sp, #112	; 0x70
        //
        int pos = 0; // into data
    3772:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3776:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    377a:	str	r3, [r6, #4]
    377c:	b.n	3786 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x10d2>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    377e:	cmp.w	r8, #3
    3782:	bgt.n	37be <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x110a>
    3784:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3786:	subs	r7, r5, r0
    3788:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    378c:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    378e:	cmp	r7, r3
    3790:	it	ge
    3792:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3794:	mov	r2, r7
          pos += to_copy;
    3796:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3798:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    379c:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    379e:	add	r9, r7
          dst += to_copy;
    37a0:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    37a2:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    37a4:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    37a6:	bne.n	377e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x10ca>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    37a8:	movs	r2, #60	; 0x3c
    37aa:	mov.w	r1, #512	; 0x200
    37ae:	mov	r0, sl
    37b0:	bl	a000 <usb_mtp_send>
    37b4:	cmp	r0, #0
    37b6:	ble.n	37a8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x10f4>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    37b8:	str.w	sl, [r4]
    37bc:	b.n	377e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x10ca>
    37be:	movs	r1, #0
    37c0:	ldrb	r2, [r6, #0]
    37c2:	ldr	r3, [r6, #4]
    37c4:	strb.w	r1, [sp, #23]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    37c8:	cmp	r2, #0
    37ca:	bne.w	276e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xba>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    37ce:	cmp	r3, #0
    37d0:	beq.w	430c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c58>
    37d4:	ldr	r0, [r4, #0]
        write_length_ += len;
    37d6:	adds	r3, #1
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    37d8:	add.w	r9, r6, #544	; 0x220
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    37dc:	add.w	r8, sp, #23
        //
        int pos = 0; // into data
    37e0:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    37e2:	str	r3, [r6, #4]
    37e4:	b.n	37ee <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x113a>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    37e6:	cmp	r7, #0
    37e8:	bgt.w	2772 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbe>
    37ec:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    37ee:	subs	r6, r5, r0
    37f0:	rsb	r3, r7, #1
          memcpy(dst,src,to_copy);
    37f4:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    37f6:	cmp	r6, r3
    37f8:	it	ge
    37fa:	movge	r6, r3
          memcpy(dst,src,to_copy);
    37fc:	mov	r2, r6
          pos += to_copy;
    37fe:	add	r7, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3800:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3804:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3806:	add	r8, r6
          dst += to_copy;
    3808:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    380a:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    380c:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    380e:	bne.n	37e6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1132>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3810:	movs	r2, #60	; 0x3c
    3812:	mov.w	r1, #512	; 0x200
    3816:	mov	r0, r9
    3818:	bl	a000 <usb_mtp_send>
    381c:	cmp	r0, #0
    381e:	ble.n	3810 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x115c>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3820:	str.w	r9, [r4]
    3824:	b.n	37e6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1132>
    3826:	movs	r1, #4
    3828:	ldrb	r2, [r6, #0]
    382a:	ldr	r3, [r6, #4]
    382c:	strh.w	r1, [sp, #40]	; 0x28
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3830:	cmp	r2, #0
    3832:	bne.w	27a8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf4>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3836:	cmp	r3, #0
    3838:	beq.w	41fe <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b4a>
    383c:	ldr	r0, [r4, #0]
        write_length_ += len;
    383e:	adds	r3, #2
        
        const char * src=data;
    3840:	add.w	r9, sp, #40	; 0x28
        //
        int pos = 0; // into data
    3844:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3848:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    384c:	str	r3, [r6, #4]
    384e:	b.n	385a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x11a6>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3850:	cmp.w	r8, #1
    3854:	bgt.w	3a36 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1382>
    3858:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    385a:	subs	r7, r5, r0
    385c:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    3860:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3862:	cmp	r7, r3
    3864:	it	ge
    3866:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3868:	mov	r2, r7
          pos += to_copy;
    386a:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    386c:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3870:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3872:	add	r9, r7
          dst += to_copy;
    3874:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3876:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3878:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    387a:	bne.n	3850 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x119c>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    387c:	movs	r2, #60	; 0x3c
    387e:	mov.w	r1, #512	; 0x200
    3882:	mov	r0, sl
    3884:	bl	a000 <usb_mtp_send>
    3888:	cmp	r0, #0
    388a:	ble.n	387c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x11c8>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    388c:	str.w	sl, [r4]
    3890:	b.n	3850 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x119c>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3892:	ldr	r3, [r0, #4]
    3894:	cmp	r3, #0
    3896:	beq.w	41ae <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1afa>
    389a:	ldr	r4, [pc, #768]	; (3b9c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x14e8>)
    389c:	ldr	r0, [r4, #0]
        write_length_ += len;
    389e:	adds	r3, #2
    38a0:	add.w	r5, r6, #1056	; 0x420
        
        const char * src=data;
    38a4:	add.w	r9, sp, #46	; 0x2e
        //
        int pos = 0; // into data
    38a8:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    38ac:	str	r3, [r6, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    38ae:	add.w	sl, r6, #544	; 0x220
    38b2:	b.n	38bc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1208>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    38b4:	cmp.w	r8, #1
    38b8:	bgt.n	38f4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1240>
    38ba:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    38bc:	subs	r7, r5, r0
    38be:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    38c2:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    38c4:	cmp	r7, r3
    38c6:	it	ge
    38c8:	movge	r7, r3
          memcpy(dst,src,to_copy);
    38ca:	mov	r2, r7
          pos += to_copy;
    38cc:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    38ce:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    38d2:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    38d4:	add	r9, r7
          dst += to_copy;
    38d6:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    38d8:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    38da:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    38dc:	bne.n	38b4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1200>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    38de:	movs	r2, #60	; 0x3c
    38e0:	mov.w	r1, #512	; 0x200
    38e4:	mov	r0, sl
    38e6:	bl	a000 <usb_mtp_send>
    38ea:	cmp	r0, #0
    38ec:	ble.n	38de <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x122a>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    38ee:	str.w	sl, [r4]
    38f2:	b.n	38b4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1200>
    38f4:	movs	r1, #8
    38f6:	ldrb	r2, [r6, #0]
    38f8:	ldr	r3, [r6, #4]
    38fa:	strh.w	r1, [sp, #44]	; 0x2c
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    38fe:	cmp	r2, #0
    3900:	bne.w	2836 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x182>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3904:	cmp	r3, #0
    3906:	beq.w	41a2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1aee>
    390a:	ldr	r0, [r4, #0]
        write_length_ += len;
    390c:	adds	r3, #2
        
        const char * src=data;
    390e:	add.w	r9, sp, #44	; 0x2c
        //
        int pos = 0; // into data
    3912:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3916:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    391a:	str	r3, [r6, #4]
    391c:	b.n	3926 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1272>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    391e:	cmp.w	r8, #1
    3922:	bgt.n	395e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x12aa>
    3924:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3926:	subs	r7, r5, r0
    3928:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    392c:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    392e:	cmp	r7, r3
    3930:	it	ge
    3932:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3934:	mov	r2, r7
          pos += to_copy;
    3936:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3938:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    393c:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    393e:	add	r9, r7
          dst += to_copy;
    3940:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3942:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3944:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3946:	bne.n	391e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x126a>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3948:	movs	r2, #60	; 0x3c
    394a:	mov.w	r1, #512	; 0x200
    394e:	mov	r0, sl
    3950:	bl	a000 <usb_mtp_send>
    3954:	cmp	r0, #0
    3956:	ble.n	3948 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1294>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3958:	str.w	sl, [r4]
    395c:	b.n	391e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x126a>
    395e:	movs	r1, #0
    3960:	ldrb	r2, [r6, #0]
    3962:	ldr	r3, [r6, #4]
    3964:	strb.w	r1, [sp, #11]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3968:	cmp	r2, #0
    396a:	bne.w	2838 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x184>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    396e:	cmp	r3, #0
    3970:	beq.w	4196 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1ae2>
    3974:	ldr	r0, [r4, #0]
        write_length_ += len;
    3976:	adds	r3, #1
        
        const char * src=data;
    3978:	add.w	r9, sp, #11
        //
        int pos = 0; // into data
    397c:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3980:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3984:	str	r3, [r6, #4]
    3986:	b.n	3990 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x12dc>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3988:	cmp.w	r8, #0
    398c:	bgt.n	39c8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1314>
    398e:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3990:	subs	r7, r5, r0
    3992:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    3996:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3998:	cmp	r7, r3
    399a:	it	ge
    399c:	movge	r7, r3
          memcpy(dst,src,to_copy);
    399e:	mov	r2, r7
          pos += to_copy;
    39a0:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    39a2:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    39a6:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    39a8:	add	r9, r7
          dst += to_copy;
    39aa:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    39ac:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    39ae:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    39b0:	bne.n	3988 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x12d4>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    39b2:	movs	r2, #60	; 0x3c
    39b4:	mov.w	r1, #512	; 0x200
    39b8:	mov	r0, sl
    39ba:	bl	a000 <usb_mtp_send>
    39be:	cmp	r0, #0
    39c0:	ble.n	39b2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x12fe>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    39c2:	str.w	sl, [r4]
    39c6:	b.n	3988 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x12d4>
    39c8:	movs	r0, #0
    39ca:	movs	r1, #0
    39cc:	ldrb	r2, [r6, #0]
    39ce:	ldr	r3, [r6, #4]
    39d0:	strd	r0, r1, [sp, #120]	; 0x78
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    39d4:	cmp	r2, #0
    39d6:	bne.w	283a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x186>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    39da:	cmp	r3, #0
    39dc:	beq.w	41e4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b30>
    39e0:	ldr	r0, [r4, #0]
        write_length_ += len;
    39e2:	adds	r3, #8
        
        const char * src=data;
    39e4:	add.w	r9, sp, #120	; 0x78
        //
        int pos = 0; // into data
    39e8:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    39ec:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    39f0:	str	r3, [r6, #4]
    39f2:	b.n	39fe <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x134a>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    39f4:	cmp.w	r8, #7
    39f8:	bgt.w	3be0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x152c>
    39fc:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    39fe:	subs	r7, r5, r0
    3a00:	rsb	r3, r8, #8
          memcpy(dst,src,to_copy);
    3a04:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3a06:	cmp	r7, r3
    3a08:	it	ge
    3a0a:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3a0c:	mov	r2, r7
          pos += to_copy;
    3a0e:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3a10:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3a14:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3a16:	add	r9, r7
          dst += to_copy;
    3a18:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3a1a:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3a1c:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3a1e:	bne.n	39f4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1340>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3a20:	movs	r2, #60	; 0x3c
    3a22:	mov.w	r1, #512	; 0x200
    3a26:	mov	r0, sl
    3a28:	bl	a000 <usb_mtp_send>
    3a2c:	cmp	r0, #0
    3a2e:	ble.n	3a20 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x136c>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3a30:	str.w	sl, [r4]
    3a34:	b.n	39f4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1340>
    3a36:	movs	r1, #0
    3a38:	ldrb	r2, [r6, #0]
    3a3a:	ldr	r3, [r6, #4]
    3a3c:	strb.w	r1, [sp, #9]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3a40:	cmp	r2, #0
    3a42:	bne.w	27aa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf6>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3a46:	cmp	r3, #0
    3a48:	beq.w	41da <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b26>
    3a4c:	ldr	r0, [r4, #0]
        write_length_ += len;
    3a4e:	adds	r3, #1
        
        const char * src=data;
    3a50:	add.w	r9, sp, #9
        //
        int pos = 0; // into data
    3a54:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3a58:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3a5c:	str	r3, [r6, #4]
    3a5e:	b.n	3a68 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x13b4>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3a60:	cmp.w	r8, #0
    3a64:	bgt.n	3aa0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x13ec>
    3a66:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3a68:	subs	r7, r5, r0
    3a6a:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    3a6e:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3a70:	cmp	r7, r3
    3a72:	it	ge
    3a74:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3a76:	mov	r2, r7
          pos += to_copy;
    3a78:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3a7a:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3a7e:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3a80:	add	r9, r7
          dst += to_copy;
    3a82:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3a84:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3a86:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3a88:	bne.n	3a60 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x13ac>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3a8a:	movs	r2, #60	; 0x3c
    3a8c:	mov.w	r1, #512	; 0x200
    3a90:	mov	r0, sl
    3a92:	bl	a000 <usb_mtp_send>
    3a96:	cmp	r0, #0
    3a98:	ble.n	3a8a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x13d6>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3a9a:	str.w	sl, [r4]
    3a9e:	b.n	3a60 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x13ac>
    3aa0:	movs	r1, #0
    3aa2:	ldrb	r2, [r6, #0]
    3aa4:	ldr	r3, [r6, #4]
    3aa6:	strh.w	r1, [sp, #38]	; 0x26
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3aaa:	cmp	r2, #0
    3aac:	bne.w	27ac <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3ab0:	cmp	r3, #0
    3ab2:	beq.w	41d0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b1c>
    3ab6:	ldr	r0, [r4, #0]
        write_length_ += len;
    3ab8:	adds	r3, #2
        
        const char * src=data;
    3aba:	add.w	r9, sp, #38	; 0x26
        //
        int pos = 0; // into data
    3abe:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3ac2:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3ac6:	str	r3, [r6, #4]
    3ac8:	b.n	3ad2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x141e>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3aca:	cmp.w	r8, #1
    3ace:	bgt.n	3b0a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1456>
    3ad0:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3ad2:	subs	r7, r5, r0
    3ad4:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    3ad8:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3ada:	cmp	r7, r3
    3adc:	it	ge
    3ade:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3ae0:	mov	r2, r7
          pos += to_copy;
    3ae2:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3ae4:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3ae8:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3aea:	add	r9, r7
          dst += to_copy;
    3aec:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3aee:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3af0:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3af2:	bne.n	3aca <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1416>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3af4:	movs	r2, #60	; 0x3c
    3af6:	mov.w	r1, #512	; 0x200
    3afa:	mov	r0, sl
    3afc:	bl	a000 <usb_mtp_send>
    3b00:	cmp	r0, #0
    3b02:	ble.n	3af4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1440>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3b04:	str.w	sl, [r4]
    3b08:	b.n	3aca <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1416>
    3b0a:	movs	r1, #0
    3b0c:	ldrb	r2, [r6, #0]
    3b0e:	ldr	r3, [r6, #4]
    3b10:	str	r1, [sp, #84]	; 0x54
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3b12:	cmp	r2, #0
    3b14:	bne.w	276c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3b18:	cmp	r3, #0
    3b1a:	beq.w	41c6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b12>
    3b1e:	ldr	r0, [r4, #0]
        write_length_ += len;
    3b20:	adds	r3, #4
        
        const char * src=data;
    3b22:	add.w	r9, sp, #84	; 0x54
        //
        int pos = 0; // into data
    3b26:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3b2a:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3b2e:	str	r3, [r6, #4]
    3b30:	b.n	3b3a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1486>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3b32:	cmp.w	r8, #3
    3b36:	bgt.n	3b72 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x14be>
    3b38:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3b3a:	subs	r7, r5, r0
    3b3c:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    3b40:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3b42:	cmp	r7, r3
    3b44:	it	ge
    3b46:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3b48:	mov	r2, r7
          pos += to_copy;
    3b4a:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3b4c:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3b50:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3b52:	add	r9, r7
          dst += to_copy;
    3b54:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3b56:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3b58:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3b5a:	bne.n	3b32 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x147e>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3b5c:	movs	r2, #60	; 0x3c
    3b5e:	mov.w	r1, #512	; 0x200
    3b62:	mov	r0, sl
    3b64:	bl	a000 <usb_mtp_send>
    3b68:	cmp	r0, #0
    3b6a:	ble.n	3b5c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x14a8>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3b6c:	str.w	sl, [r4]
    3b70:	b.n	3b32 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x147e>
    3b72:	movs	r1, #0
    3b74:	ldrb	r2, [r6, #0]
    3b76:	ldr	r3, [r6, #4]
    3b78:	strb.w	r1, [sp, #8]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3b7c:	cmp	r2, #0
    3b7e:	bne.w	276e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xba>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3b82:	cmp	r3, #0
    3b84:	beq.w	41bc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b08>
    3b88:	ldr	r0, [r4, #0]
        write_length_ += len;
    3b8a:	adds	r3, #1
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3b8c:	add.w	r9, r6, #544	; 0x220
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    3b90:	add.w	r8, sp, #8
        //
        int pos = 0; // into data
    3b94:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3b96:	str	r3, [r6, #4]
    3b98:	b.n	3ba8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x14f4>
    3b9a:	nop
    3b9c:	.word	0x20004604
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3ba0:	cmp	r7, #0
    3ba2:	bgt.w	2772 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbe>
    3ba6:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3ba8:	subs	r6, r5, r0
    3baa:	rsb	r3, r7, #1
          memcpy(dst,src,to_copy);
    3bae:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3bb0:	cmp	r6, r3
    3bb2:	it	ge
    3bb4:	movge	r6, r3
          memcpy(dst,src,to_copy);
    3bb6:	mov	r2, r6
          pos += to_copy;
    3bb8:	add	r7, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3bba:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3bbe:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3bc0:	add	r8, r6
          dst += to_copy;
    3bc2:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3bc4:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3bc6:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3bc8:	bne.n	3ba0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x14ec>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3bca:	movs	r2, #60	; 0x3c
    3bcc:	mov.w	r1, #512	; 0x200
    3bd0:	mov	r0, r9
    3bd2:	bl	a000 <usb_mtp_send>
    3bd6:	cmp	r0, #0
    3bd8:	ble.n	3bca <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1516>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3bda:	str.w	r9, [r4]
    3bde:	b.n	3ba0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x14ec>
    3be0:	movs	r1, #0
    3be2:	ldrb	r2, [r6, #0]
    3be4:	ldr	r3, [r6, #4]
    3be6:	str	r1, [sp, #88]	; 0x58
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3be8:	cmp	r2, #0
    3bea:	bne.w	276c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3bee:	cmp	r3, #0
    3bf0:	beq.w	418c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1ad8>
    3bf4:	ldr	r0, [r4, #0]
        write_length_ += len;
    3bf6:	adds	r3, #4
        
        const char * src=data;
    3bf8:	add.w	r9, sp, #88	; 0x58
        //
        int pos = 0; // into data
    3bfc:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3c00:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3c04:	str	r3, [r6, #4]
    3c06:	b.n	3c10 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x155c>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3c08:	cmp.w	r8, #3
    3c0c:	bgt.n	3c48 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1594>
    3c0e:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3c10:	subs	r7, r5, r0
    3c12:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    3c16:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3c18:	cmp	r7, r3
    3c1a:	it	ge
    3c1c:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3c1e:	mov	r2, r7
          pos += to_copy;
    3c20:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3c22:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3c26:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3c28:	add	r9, r7
          dst += to_copy;
    3c2a:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3c2c:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3c2e:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3c30:	bne.n	3c08 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1554>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3c32:	movs	r2, #60	; 0x3c
    3c34:	mov.w	r1, #512	; 0x200
    3c38:	mov	r0, sl
    3c3a:	bl	a000 <usb_mtp_send>
    3c3e:	cmp	r0, #0
    3c40:	ble.n	3c32 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x157e>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3c42:	str.w	sl, [r4]
    3c46:	b.n	3c08 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1554>
    3c48:	movs	r1, #0
    3c4a:	ldrb	r2, [r6, #0]
    3c4c:	ldr	r3, [r6, #4]
    3c4e:	strb.w	r1, [sp, #10]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3c52:	cmp	r2, #0
    3c54:	bne.w	276e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xba>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3c58:	cmp	r3, #0
    3c5a:	beq.w	42f4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c40>
    3c5e:	ldr	r0, [r4, #0]
        write_length_ += len;
    3c60:	adds	r3, #1
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3c62:	add.w	r9, r6, #544	; 0x220
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    3c66:	add.w	r8, sp, #10
        //
        int pos = 0; // into data
    3c6a:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3c6c:	str	r3, [r6, #4]
    3c6e:	b.n	3c78 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x15c4>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3c70:	cmp	r7, #0
    3c72:	bgt.w	2772 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbe>
    3c76:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3c78:	subs	r6, r5, r0
    3c7a:	rsb	r3, r7, #1
          memcpy(dst,src,to_copy);
    3c7e:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3c80:	cmp	r6, r3
    3c82:	it	ge
    3c84:	movge	r6, r3
          memcpy(dst,src,to_copy);
    3c86:	mov	r2, r6
          pos += to_copy;
    3c88:	add	r7, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3c8a:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3c8e:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3c90:	add	r8, r6
          dst += to_copy;
    3c92:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3c94:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3c96:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3c98:	bne.n	3c70 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x15bc>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3c9a:	movs	r2, #60	; 0x3c
    3c9c:	mov.w	r1, #512	; 0x200
    3ca0:	mov	r0, r9
    3ca2:	bl	a000 <usb_mtp_send>
    3ca6:	cmp	r0, #0
    3ca8:	ble.n	3c9a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x15e6>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3caa:	str.w	r9, [r4]
    3cae:	b.n	3c70 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x15bc>
    3cb0:	movw	r1, #65535	; 0xffff
    3cb4:	ldrb	r2, [r6, #0]
    3cb6:	ldr	r3, [r6, #4]
    3cb8:	strh.w	r1, [sp, #48]	; 0x30
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3cbc:	cmp	r2, #0
    3cbe:	bne.w	2766 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb2>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3cc2:	cmp	r3, #0
    3cc4:	beq.w	4182 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1ace>
    3cc8:	ldr	r0, [r4, #0]
        write_length_ += len;
    3cca:	adds	r3, #2
        
        const char * src=data;
    3ccc:	add.w	r9, sp, #48	; 0x30
        //
        int pos = 0; // into data
    3cd0:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3cd4:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3cd8:	str	r3, [r6, #4]
    3cda:	b.n	3ce4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1630>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3cdc:	cmp.w	r8, #1
    3ce0:	bgt.n	3d1c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1668>
    3ce2:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3ce4:	subs	r7, r5, r0
    3ce6:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    3cea:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3cec:	cmp	r7, r3
    3cee:	it	ge
    3cf0:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3cf2:	mov	r2, r7
          pos += to_copy;
    3cf4:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3cf6:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3cfa:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3cfc:	add	r9, r7
          dst += to_copy;
    3cfe:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3d00:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3d02:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3d04:	bne.n	3cdc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1628>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3d06:	movs	r2, #60	; 0x3c
    3d08:	mov.w	r1, #512	; 0x200
    3d0c:	mov	r0, sl
    3d0e:	bl	a000 <usb_mtp_send>
    3d12:	cmp	r0, #0
    3d14:	ble.n	3d06 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1652>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3d16:	str.w	sl, [r4]
    3d1a:	b.n	3cdc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1628>
    3d1c:	movs	r1, #1
    3d1e:	ldrb	r2, [r6, #0]
    3d20:	ldr	r3, [r6, #4]
    3d22:	strb.w	r1, [sp, #14]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3d26:	cmp	r2, #0
    3d28:	bne.w	2768 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb4>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3d2c:	cmp	r3, #0
    3d2e:	beq.w	4178 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1ac4>
    3d32:	ldr	r0, [r4, #0]
        write_length_ += len;
    3d34:	adds	r3, #1
        
        const char * src=data;
    3d36:	add.w	r9, sp, #14
        //
        int pos = 0; // into data
    3d3a:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3d3e:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3d42:	str	r3, [r6, #4]
    3d44:	b.n	3d4e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x169a>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3d46:	cmp.w	r8, #0
    3d4a:	bgt.n	3d86 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x16d2>
    3d4c:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3d4e:	subs	r7, r5, r0
    3d50:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    3d54:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3d56:	cmp	r7, r3
    3d58:	it	ge
    3d5a:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3d5c:	mov	r2, r7
          pos += to_copy;
    3d5e:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3d60:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3d64:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3d66:	add	r9, r7
          dst += to_copy;
    3d68:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3d6a:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3d6c:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3d6e:	bne.n	3d46 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1692>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3d70:	movs	r2, #60	; 0x3c
    3d72:	mov.w	r1, #512	; 0x200
    3d76:	mov	r0, sl
    3d78:	bl	a000 <usb_mtp_send>
    3d7c:	cmp	r0, #0
    3d7e:	ble.n	3d70 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x16bc>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3d80:	str.w	sl, [r4]
    3d84:	b.n	3d46 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1692>
    3d86:	movs	r1, #0
    3d88:	ldrb	r2, [r6, #0]
    3d8a:	ldr	r3, [r6, #4]
    3d8c:	strb.w	r1, [sp, #13]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3d90:	cmp	r2, #0
    3d92:	bne.w	276a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb6>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3d96:	cmp	r3, #0
    3d98:	beq.w	416e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1aba>
    3d9c:	ldr	r0, [r4, #0]
        write_length_ += len;
    3d9e:	adds	r3, #1
        
        const char * src=data;
    3da0:	add.w	r9, sp, #13
        //
        int pos = 0; // into data
    3da4:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3da8:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3dac:	str	r3, [r6, #4]
    3dae:	b.n	3db8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1704>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3db0:	cmp.w	r8, #0
    3db4:	bgt.n	3df0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x173c>
    3db6:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3db8:	subs	r7, r5, r0
    3dba:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    3dbe:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3dc0:	cmp	r7, r3
    3dc2:	it	ge
    3dc4:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3dc6:	mov	r2, r7
          pos += to_copy;
    3dc8:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3dca:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3dce:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3dd0:	add	r9, r7
          dst += to_copy;
    3dd2:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3dd4:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3dd6:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3dd8:	bne.n	3db0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x16fc>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3dda:	movs	r2, #60	; 0x3c
    3ddc:	mov.w	r1, #512	; 0x200
    3de0:	mov	r0, sl
    3de2:	bl	a000 <usb_mtp_send>
    3de6:	cmp	r0, #0
    3de8:	ble.n	3dda <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1726>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3dea:	str.w	sl, [r4]
    3dee:	b.n	3db0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x16fc>
    3df0:	movs	r1, #0
    3df2:	ldrb	r2, [r6, #0]
    3df4:	ldr	r3, [r6, #4]
    3df6:	str	r1, [sp, #92]	; 0x5c
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3df8:	cmp	r2, #0
    3dfa:	bne.w	276c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3dfe:	cmp	r3, #0
    3e00:	beq.w	4164 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1ab0>
    3e04:	ldr	r0, [r4, #0]
        write_length_ += len;
    3e06:	adds	r3, #4
        
        const char * src=data;
    3e08:	add.w	r9, sp, #92	; 0x5c
        //
        int pos = 0; // into data
    3e0c:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3e10:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3e14:	str	r3, [r6, #4]
    3e16:	b.n	3e20 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x176c>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3e18:	cmp.w	r8, #3
    3e1c:	bgt.n	3e58 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17a4>
    3e1e:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3e20:	subs	r7, r5, r0
    3e22:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    3e26:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3e28:	cmp	r7, r3
    3e2a:	it	ge
    3e2c:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3e2e:	mov	r2, r7
          pos += to_copy;
    3e30:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3e32:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3e36:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3e38:	add	r9, r7
          dst += to_copy;
    3e3a:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3e3c:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3e3e:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3e40:	bne.n	3e18 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1764>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3e42:	movs	r2, #60	; 0x3c
    3e44:	mov.w	r1, #512	; 0x200
    3e48:	mov	r0, sl
    3e4a:	bl	a000 <usb_mtp_send>
    3e4e:	cmp	r0, #0
    3e50:	ble.n	3e42 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x178e>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3e52:	str.w	sl, [r4]
    3e56:	b.n	3e18 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1764>
    3e58:	movs	r1, #0
    3e5a:	ldrb	r2, [r6, #0]
    3e5c:	ldr	r3, [r6, #4]
    3e5e:	strb.w	r1, [sp, #12]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3e62:	cmp	r2, #0
    3e64:	bne.w	276e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xba>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3e68:	cmp	r3, #0
    3e6a:	beq.w	42de <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c2a>
    3e6e:	ldr	r0, [r4, #0]
        write_length_ += len;
    3e70:	adds	r3, #1
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3e72:	add.w	r9, r6, #544	; 0x220
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    3e76:	add.w	r8, sp, #12
        //
        int pos = 0; // into data
    3e7a:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3e7c:	str	r3, [r6, #4]
    3e7e:	b.n	3e88 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17d4>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3e80:	cmp	r7, #0
    3e82:	bgt.w	2772 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbe>
    3e86:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3e88:	subs	r6, r5, r0
    3e8a:	rsb	r3, r7, #1
          memcpy(dst,src,to_copy);
    3e8e:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3e90:	cmp	r6, r3
    3e92:	it	ge
    3e94:	movge	r6, r3
          memcpy(dst,src,to_copy);
    3e96:	mov	r2, r6
          pos += to_copy;
    3e98:	add	r7, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3e9a:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3e9e:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3ea0:	add	r8, r6
          dst += to_copy;
    3ea2:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3ea4:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3ea6:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3ea8:	bne.n	3e80 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17cc>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3eaa:	movs	r2, #60	; 0x3c
    3eac:	mov.w	r1, #512	; 0x200
    3eb0:	mov	r0, r9
    3eb2:	bl	a000 <usb_mtp_send>
    3eb6:	cmp	r0, #0
    3eb8:	ble.n	3eaa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17f6>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3eba:	str.w	r9, [r4]
    3ebe:	b.n	3e80 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17cc>
    3ec0:	movs	r1, #0
    3ec2:	ldrb	r2, [r6, #0]
    3ec4:	ldr	r3, [r6, #4]
    3ec6:	strb.w	r1, [sp, #16]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3eca:	cmp	r2, #0
    3ecc:	bne.w	276a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb6>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3ed0:	cmp	r3, #0
    3ed2:	beq.w	415a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1aa6>
    3ed6:	ldr	r0, [r4, #0]
        write_length_ += len;
    3ed8:	adds	r3, #1
        
        const char * src=data;
    3eda:	add.w	r9, sp, #16
        //
        int pos = 0; // into data
    3ede:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3ee2:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3ee6:	str	r3, [r6, #4]
    3ee8:	b.n	3ef2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x183e>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3eea:	cmp.w	r8, #0
    3eee:	bgt.n	3f2a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1876>
    3ef0:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3ef2:	subs	r7, r5, r0
    3ef4:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    3ef8:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3efa:	cmp	r7, r3
    3efc:	it	ge
    3efe:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3f00:	mov	r2, r7
          pos += to_copy;
    3f02:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3f04:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3f08:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3f0a:	add	r9, r7
          dst += to_copy;
    3f0c:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3f0e:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3f10:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3f12:	bne.n	3eea <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1836>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3f14:	movs	r2, #60	; 0x3c
    3f16:	mov.w	r1, #512	; 0x200
    3f1a:	mov	r0, sl
    3f1c:	bl	a000 <usb_mtp_send>
    3f20:	cmp	r0, #0
    3f22:	ble.n	3f14 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1860>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3f24:	str.w	sl, [r4]
    3f28:	b.n	3eea <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1836>
    3f2a:	movs	r1, #0
    3f2c:	ldrb	r2, [r6, #0]
    3f2e:	ldr	r3, [r6, #4]
    3f30:	str	r1, [sp, #96]	; 0x60
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3f32:	cmp	r2, #0
    3f34:	bne.w	276c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3f38:	cmp	r3, #0
    3f3a:	beq.w	4150 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1a9c>
    3f3e:	ldr	r0, [r4, #0]
        write_length_ += len;
    3f40:	adds	r3, #4
        
        const char * src=data;
    3f42:	add.w	r9, sp, #96	; 0x60
        //
        int pos = 0; // into data
    3f46:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3f4a:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3f4e:	str	r3, [r6, #4]
    3f50:	b.n	3f5a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x18a6>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3f52:	cmp.w	r8, #3
    3f56:	bgt.n	3f92 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x18de>
    3f58:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3f5a:	subs	r7, r5, r0
    3f5c:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    3f60:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3f62:	cmp	r7, r3
    3f64:	it	ge
    3f66:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3f68:	mov	r2, r7
          pos += to_copy;
    3f6a:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3f6c:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3f70:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3f72:	add	r9, r7
          dst += to_copy;
    3f74:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3f76:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3f78:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3f7a:	bne.n	3f52 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x189e>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3f7c:	movs	r2, #60	; 0x3c
    3f7e:	mov.w	r1, #512	; 0x200
    3f82:	mov	r0, sl
    3f84:	bl	a000 <usb_mtp_send>
    3f88:	cmp	r0, #0
    3f8a:	ble.n	3f7c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x18c8>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3f8c:	str.w	sl, [r4]
    3f90:	b.n	3f52 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x189e>
    3f92:	movs	r1, #0
    3f94:	ldrb	r2, [r6, #0]
    3f96:	ldr	r3, [r6, #4]
    3f98:	strb.w	r1, [sp, #15]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3f9c:	cmp	r2, #0
    3f9e:	bne.w	276e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xba>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3fa2:	cmp	r3, #0
    3fa4:	beq.w	433c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c88>
    3fa8:	ldr	r0, [r4, #0]
        write_length_ += len;
    3faa:	adds	r3, #1
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3fac:	add.w	r9, r6, #544	; 0x220
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    3fb0:	add.w	r8, sp, #15
        //
        int pos = 0; // into data
    3fb4:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3fb6:	str	r3, [r6, #4]
    3fb8:	b.n	3fc2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x190e>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3fba:	cmp	r7, #0
    3fbc:	bgt.w	2772 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbe>
    3fc0:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3fc2:	subs	r6, r5, r0
    3fc4:	rsb	r3, r7, #1
          memcpy(dst,src,to_copy);
    3fc8:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3fca:	cmp	r6, r3
    3fcc:	it	ge
    3fce:	movge	r6, r3
          memcpy(dst,src,to_copy);
    3fd0:	mov	r2, r6
          pos += to_copy;
    3fd2:	add	r7, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3fd4:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3fd8:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3fda:	add	r8, r6
          dst += to_copy;
    3fdc:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3fde:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3fe0:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3fe2:	bne.n	3fba <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1906>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3fe4:	movs	r2, #60	; 0x3c
    3fe6:	mov.w	r1, #512	; 0x200
    3fea:	mov	r0, r9
    3fec:	bl	a000 <usb_mtp_send>
    3ff0:	cmp	r0, #0
    3ff2:	ble.n	3fe4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1930>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3ff4:	str.w	r9, [r4]
    3ff8:	b.n	3fba <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1906>
    3ffa:	movs	r1, #0
    3ffc:	ldrb	r2, [r6, #0]
    3ffe:	ldr	r3, [r6, #4]
    4000:	str	r1, [sp, #76]	; 0x4c
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    4002:	cmp	r2, #0
    4004:	bne.w	2790 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xdc>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    4008:	cmp	r3, #0
    400a:	beq.w	4146 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1a92>
    400e:	ldr	r0, [r4, #0]
        write_length_ += len;
    4010:	adds	r3, #4
        
        const char * src=data;
    4012:	add.w	r9, sp, #76	; 0x4c
        //
        int pos = 0; // into data
    4016:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    401a:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    401e:	str	r3, [r6, #4]
    4020:	b.n	402a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1976>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    4022:	cmp.w	r8, #3
    4026:	bgt.n	4062 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x19ae>
    4028:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    402a:	subs	r7, r5, r0
    402c:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    4030:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4032:	cmp	r7, r3
    4034:	it	ge
    4036:	movge	r7, r3
          memcpy(dst,src,to_copy);
    4038:	mov	r2, r7
          pos += to_copy;
    403a:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    403c:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4040:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    4042:	add	r9, r7
          dst += to_copy;
    4044:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4046:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4048:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    404a:	bne.n	4022 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x196e>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    404c:	movs	r2, #60	; 0x3c
    404e:	mov.w	r1, #512	; 0x200
    4052:	mov	r0, sl
    4054:	bl	a000 <usb_mtp_send>
    4058:	cmp	r0, #0
    405a:	ble.n	404c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1998>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    405c:	str.w	sl, [r4]
    4060:	b.n	4022 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x196e>
    4062:	movs	r1, #0
    4064:	ldrb	r2, [r6, #0]
    4066:	ldr	r3, [r6, #4]
    4068:	str	r1, [sp, #72]	; 0x48
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    406a:	cmp	r2, #0
    406c:	bne.w	276c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    4070:	cmp	r3, #0
    4072:	beq.n	413c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1a88>
    4074:	ldr	r0, [r4, #0]
        write_length_ += len;
    4076:	adds	r3, #4
        
        const char * src=data;
    4078:	add.w	r9, sp, #72	; 0x48
        //
        int pos = 0; // into data
    407c:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4080:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    4084:	str	r3, [r6, #4]
    4086:	b.n	4090 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x19dc>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    4088:	cmp.w	r8, #3
    408c:	bgt.n	40c8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1a14>
    408e:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4090:	subs	r7, r5, r0
    4092:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    4096:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4098:	cmp	r7, r3
    409a:	it	ge
    409c:	movge	r7, r3
          memcpy(dst,src,to_copy);
    409e:	mov	r2, r7
          pos += to_copy;
    40a0:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    40a2:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    40a6:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    40a8:	add	r9, r7
          dst += to_copy;
    40aa:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    40ac:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    40ae:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    40b0:	bne.n	4088 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x19d4>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    40b2:	movs	r2, #60	; 0x3c
    40b4:	mov.w	r1, #512	; 0x200
    40b8:	mov	r0, sl
    40ba:	bl	a000 <usb_mtp_send>
    40be:	cmp	r0, #0
    40c0:	ble.n	40b2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x19fe>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    40c2:	str.w	sl, [r4]
    40c6:	b.n	4088 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x19d4>
    40c8:	movs	r1, #0
    40ca:	ldrb	r2, [r6, #0]
    40cc:	ldr	r3, [r6, #4]
    40ce:	strb.w	r1, [sp, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    40d2:	cmp	r2, #0
    40d4:	bne.w	276e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xba>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    40d8:	cmp	r3, #0
    40da:	beq.w	427c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1bc8>
    40de:	ldr	r0, [r4, #0]
        write_length_ += len;
    40e0:	adds	r3, #1
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    40e2:	add.w	r9, r6, #544	; 0x220
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    40e6:	add.w	r8, sp, #4
        //
        int pos = 0; // into data
    40ea:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    40ec:	str	r3, [r6, #4]
    40ee:	b.n	40f8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1a44>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    40f0:	cmp	r7, #0
    40f2:	bgt.w	2772 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbe>
    40f6:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    40f8:	subs	r6, r5, r0
    40fa:	rsb	r3, r7, #1
          memcpy(dst,src,to_copy);
    40fe:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4100:	cmp	r6, r3
    4102:	it	ge
    4104:	movge	r6, r3
          memcpy(dst,src,to_copy);
    4106:	mov	r2, r6
          pos += to_copy;
    4108:	add	r7, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    410a:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    410e:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    4110:	add	r8, r6
          dst += to_copy;
    4112:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4114:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4116:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4118:	bne.n	40f0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1a3c>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    411a:	movs	r2, #60	; 0x3c
    411c:	mov.w	r1, #512	; 0x200
    4120:	mov	r0, r9
    4122:	bl	a000 <usb_mtp_send>
    4126:	cmp	r0, #0
    4128:	ble.n	411a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1a66>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    412a:	str.w	r9, [r4]
    412e:	b.n	40f0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1a3c>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    4130:	add.w	r2, r6, #544	; 0x220
    4134:	mov	r0, r2
    4136:	str	r2, [r4, #0]
    4138:	b.w	34f2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe3e>
    413c:	add.w	r2, r6, #544	; 0x220
    4140:	mov	r0, r2
    4142:	str	r2, [r4, #0]
    4144:	b.n	4076 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x19c2>
    4146:	add.w	r2, r6, #544	; 0x220
    414a:	mov	r0, r2
    414c:	str	r2, [r4, #0]
    414e:	b.n	4010 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x195c>
    4150:	add.w	r2, r6, #544	; 0x220
    4154:	mov	r0, r2
    4156:	str	r2, [r4, #0]
    4158:	b.n	3f40 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x188c>
    415a:	add.w	r2, r6, #544	; 0x220
    415e:	mov	r0, r2
    4160:	str	r2, [r4, #0]
    4162:	b.n	3ed8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1824>
    4164:	add.w	r2, r6, #544	; 0x220
    4168:	mov	r0, r2
    416a:	str	r2, [r4, #0]
    416c:	b.n	3e06 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1752>
    416e:	add.w	r2, r6, #544	; 0x220
    4172:	mov	r0, r2
    4174:	str	r2, [r4, #0]
    4176:	b.n	3d9e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x16ea>
    4178:	add.w	r2, r6, #544	; 0x220
    417c:	mov	r0, r2
    417e:	str	r2, [r4, #0]
    4180:	b.n	3d34 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1680>
    4182:	add.w	r2, r6, #544	; 0x220
    4186:	mov	r0, r2
    4188:	str	r2, [r4, #0]
    418a:	b.n	3cca <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1616>
    418c:	add.w	r2, r6, #544	; 0x220
    4190:	mov	r0, r2
    4192:	str	r2, [r4, #0]
    4194:	b.n	3bf6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1542>
    4196:	add.w	r2, r6, #544	; 0x220
    419a:	mov	r0, r2
    419c:	str	r2, [r4, #0]
    419e:	b.w	3976 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x12c2>
    41a2:	add.w	r2, r6, #544	; 0x220
    41a6:	mov	r0, r2
    41a8:	str	r2, [r4, #0]
    41aa:	b.w	390c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1258>
    41ae:	add.w	r2, r0, #544	; 0x220
    41b2:	ldr	r4, [pc, #588]	; (4400 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1d4c>)
    41b4:	mov	r0, r2
    41b6:	str	r2, [r4, #0]
    41b8:	b.w	389e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x11ea>
    41bc:	add.w	r2, r6, #544	; 0x220
    41c0:	mov	r0, r2
    41c2:	str	r2, [r4, #0]
    41c4:	b.n	3b8a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x14d6>
    41c6:	add.w	r2, r6, #544	; 0x220
    41ca:	mov	r0, r2
    41cc:	str	r2, [r4, #0]
    41ce:	b.n	3b20 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x146c>
    41d0:	add.w	r2, r6, #544	; 0x220
    41d4:	mov	r0, r2
    41d6:	str	r2, [r4, #0]
    41d8:	b.n	3ab8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1404>
    41da:	add.w	r2, r6, #544	; 0x220
    41de:	mov	r0, r2
    41e0:	str	r2, [r4, #0]
    41e2:	b.n	3a4e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x139a>
    41e4:	add.w	r2, r6, #544	; 0x220
    41e8:	mov	r0, r2
    41ea:	str	r2, [r4, #0]
    41ec:	b.w	39e2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x132e>
    41f0:	add.w	r2, r0, #544	; 0x220
    41f4:	ldr	r4, [pc, #520]	; (4400 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1d4c>)
    41f6:	mov	r0, r2
    41f8:	str	r2, [r4, #0]
    41fa:	b.w	27ca <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x116>
    41fe:	add.w	r2, r6, #544	; 0x220
    4202:	mov	r0, r2
    4204:	str	r2, [r4, #0]
    4206:	b.w	383e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x118a>
    420a:	add.w	r2, r0, #544	; 0x220
    420e:	ldr	r4, [pc, #496]	; (4400 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1d4c>)
    4210:	mov	r0, r2
    4212:	str	r2, [r4, #0]
    4214:	b.w	28cc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x218>
    4218:	add.w	r2, r6, #544	; 0x220
    421c:	mov	r0, r2
    421e:	str	r2, [r4, #0]
    4220:	b.w	362c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf78>
    4224:	add.w	r2, r6, #544	; 0x220
    4228:	mov	r0, r2
    422a:	str	r2, [r4, #0]
    422c:	b.w	35bc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf08>
    4230:	add.w	r2, r0, #544	; 0x220
    4234:	ldr	r4, [pc, #456]	; (4400 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1d4c>)
    4236:	mov	r0, r2
    4238:	str	r2, [r4, #0]
    423a:	b.w	354e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe9a>
    423e:	add.w	r2, r6, #544	; 0x220
    4242:	mov	r0, r2
    4244:	str	r2, [r4, #0]
    4246:	b.w	327c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbc8>
    424a:	add.w	r2, r6, #544	; 0x220
    424e:	mov	r0, r2
    4250:	str	r2, [r4, #0]
    4252:	b.w	3420 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xd6c>
    4256:	add.w	r2, r6, #544	; 0x220
    425a:	mov	r0, r2
    425c:	str	r2, [r4, #0]
    425e:	b.w	33b6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xd02>
    4262:	add.w	r2, r6, #544	; 0x220
    4266:	mov	r0, r2
    4268:	str	r2, [r4, #0]
    426a:	b.w	334c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc98>
    426e:	add.w	r2, r0, #544	; 0x220
    4272:	ldr	r4, [pc, #396]	; (4400 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1d4c>)
    4274:	mov	r0, r2
    4276:	str	r2, [r4, #0]
    4278:	b.w	32dc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc28>
    427c:	add.w	r2, r6, #544	; 0x220
    4280:	mov	r0, r2
    4282:	str	r2, [r4, #0]
    4284:	b.n	40e0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1a2c>
    4286:	add.w	r2, r6, #544	; 0x220
    428a:	mov	r0, r2
    428c:	str	r2, [r4, #0]
    428e:	b.w	3488 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xdd4>
    4292:	add.w	r2, r6, #544	; 0x220
    4296:	mov	r0, r2
    4298:	str	r2, [r4, #0]
    429a:	b.w	3142 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xa8e>
    429e:	add.w	r2, r6, #544	; 0x220
    42a2:	mov	r0, r2
    42a4:	str	r2, [r4, #0]
    42a6:	b.w	30d8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xa24>
    42aa:	add.w	r2, r6, #544	; 0x220
    42ae:	mov	r0, r2
    42b0:	str	r2, [r4, #0]
    42b2:	b.w	2cc6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x612>
    42b6:	add.w	r2, r0, #544	; 0x220
    42ba:	ldr	r4, [pc, #324]	; (4400 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1d4c>)
    42bc:	mov	r0, r2
    42be:	str	r2, [r4, #0]
    42c0:	b.w	29b4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x300>
    42c4:	add.w	r2, r6, #544	; 0x220
    42c8:	mov	r0, r2
    42ca:	str	r2, [r4, #0]
    42cc:	b.w	2aac <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3f8>
    42d0:	add.w	r2, r0, #544	; 0x220
    42d4:	ldr	r4, [pc, #296]	; (4400 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1d4c>)
    42d6:	mov	r0, r2
    42d8:	str	r2, [r4, #0]
    42da:	b.w	2940 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x28c>
    42de:	add.w	r2, r6, #544	; 0x220
    42e2:	mov	r0, r2
    42e4:	str	r2, [r4, #0]
    42e6:	b.n	3e70 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17bc>
    42e8:	add.w	r2, r6, #544	; 0x220
    42ec:	mov	r0, r2
    42ee:	str	r2, [r4, #0]
    42f0:	b.w	2a42 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x38e>
    42f4:	add.w	r2, r6, #544	; 0x220
    42f8:	mov	r0, r2
    42fa:	str	r2, [r4, #0]
    42fc:	b.n	3c60 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x15ac>
    42fe:	add.w	r2, r0, #544	; 0x220
    4302:	ldr	r4, [pc, #252]	; (4400 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1d4c>)
    4304:	mov	r0, r2
    4306:	str	r2, [r4, #0]
    4308:	b.w	2858 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1a4>
    430c:	add.w	r2, r6, #544	; 0x220
    4310:	mov	r0, r2
    4312:	str	r2, [r4, #0]
    4314:	b.w	37d6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1122>
    4318:	add.w	r2, r6, #544	; 0x220
    431c:	mov	r0, r2
    431e:	str	r2, [r4, #0]
    4320:	b.w	376c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x10b8>
    4324:	add.w	r2, r6, #544	; 0x220
    4328:	mov	r0, r2
    432a:	str	r2, [r4, #0]
    432c:	b.w	3704 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1050>
    4330:	add.w	r2, r6, #544	; 0x220
    4334:	mov	r0, r2
    4336:	str	r2, [r4, #0]
    4338:	b.w	3698 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xfe4>
    433c:	add.w	r2, r6, #544	; 0x220
    4340:	mov	r0, r2
    4342:	str	r2, [r4, #0]
    4344:	b.n	3faa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x18f6>
    4346:	add.w	r2, r6, #544	; 0x220
    434a:	mov	r0, r2
    434c:	str	r2, [r4, #0]
    434e:	b.w	320c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb58>
    4352:	add.w	r2, r0, #544	; 0x220
    4356:	ldr	r4, [pc, #168]	; (4400 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1d4c>)
    4358:	mov	r0, r2
    435a:	str	r2, [r4, #0]
    435c:	b.w	319e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xaea>
    4360:	add.w	r2, r6, #544	; 0x220
    4364:	mov	r0, r2
    4366:	str	r2, [r4, #0]
    4368:	b.w	2ed2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x81e>
    436c:	add.w	r2, r6, #544	; 0x220
    4370:	mov	r0, r2
    4372:	str	r2, [r4, #0]
    4374:	b.w	3070 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x9bc>
    4378:	add.w	r2, r6, #544	; 0x220
    437c:	mov	r0, r2
    437e:	str	r2, [r4, #0]
    4380:	b.w	3006 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x952>
    4384:	add.w	r2, r6, #544	; 0x220
    4388:	mov	r0, r2
    438a:	str	r2, [r4, #0]
    438c:	b.w	2f9c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x8e8>
    4390:	add.w	r2, r0, #544	; 0x220
    4394:	ldr	r4, [pc, #104]	; (4400 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1d4c>)
    4396:	mov	r0, r2
    4398:	str	r2, [r4, #0]
    439a:	b.w	2f2e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x87a>
    439e:	add.w	r2, r6, #544	; 0x220
    43a2:	mov	r0, r2
    43a4:	str	r2, [r4, #0]
    43a6:	b.w	2e68 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x7b4>
    43aa:	add.w	r2, r6, #544	; 0x220
    43ae:	mov	r0, r2
    43b0:	str	r2, [r4, #0]
    43b2:	b.w	2e00 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x74c>
    43b6:	add.w	r2, r6, #544	; 0x220
    43ba:	mov	r0, r2
    43bc:	str	r2, [r4, #0]
    43be:	b.w	2d98 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6e4>
    43c2:	add.w	r2, r6, #544	; 0x220
    43c6:	mov	r0, r2
    43c8:	str	r2, [r4, #0]
    43ca:	b.w	2d2e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x67a>
    43ce:	add.w	r2, r6, #544	; 0x220
    43d2:	mov	r0, r2
    43d4:	str	r2, [r4, #0]
    43d6:	b.w	2c5c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x5a8>
    43da:	add.w	r2, r6, #544	; 0x220
    43de:	mov	r0, r2
    43e0:	str	r2, [r4, #0]
    43e2:	b.w	2bf4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x540>
    43e6:	add.w	r2, r6, #544	; 0x220
    43ea:	mov	r0, r2
    43ec:	str	r2, [r4, #0]
    43ee:	b.w	2b8a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x4d6>
    43f2:	add.w	r2, r6, #544	; 0x220
    43f6:	mov	r0, r2
    43f8:	str	r2, [r4, #0]
    43fa:	b.w	2b20 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x46c>
    43fe:	nop
    4400:	.word	0x20004604

00004404 <MTPD::getObjectPropValue(unsigned long, unsigned long)>:
        default:
          break;
      }
    }

    void getObjectPropValue(uint32_t p1, uint32_t p2)
    4404:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4408:	ldr	r3, [pc, #676]	; (46b0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x2ac>)
    440a:	sub	sp, #332	; 0x14c
    440c:	mov	r4, r2
    440e:	mov	r5, r0
    { return (uint64_t)512 *(uint64_t)(zFs_[store].totalSectors() - zFs_[store].eofSector()); }

    char * getName(uint32_t store) {return zFs_[store].getName();}

    uint32_t Info(uint32_t handle, char *filename, uint32_t *size, uint32_t *parent)
    { return zFs_[0].Info(handle, filename, size, parent);}
    4410:	ldr	r6, [r3, #80]	; 0x50
    4412:	add.w	r8, sp, #36	; 0x24
    4416:	add	r3, sp, #32
    4418:	add	r2, sp, #72	; 0x48
    441a:	mov	r0, r6
    441c:	str.w	r8, [sp]
        default:
          break;
      }
    }

    void getObjectPropValue(uint32_t p1, uint32_t p2)
    4420:	mov	r6, r1
    { return (uint64_t)512 *(uint64_t)(zFs_[store].totalSectors() - zFs_[store].eofSector()); }

    char * getName(uint32_t store) {return zFs_[store].getName();}

    uint32_t Info(uint32_t handle, char *filename, uint32_t *size, uint32_t *parent)
    { return zFs_[0].Info(handle, filename, size, parent);}
    4422:	bl	6bd4 <zeroFS_class::Info(unsigned long, char*, unsigned long*, unsigned long*)>
      uint16_t store = 0;
      uint32_t storage = Store2Storage(store);

      uint32_t dir = (size == 0xFFFFFFFFUL);

      switch(p2)
    4426:	mvn.w	r3, #56320	; 0xdc00
      mFS.Info(p1, filename, &size, &parent);

      uint16_t store = 0;
      uint32_t storage = Store2Storage(store);

      uint32_t dir = (size == 0xFFFFFFFFUL);
    442a:	ldr	r2, [sp, #32]

      switch(p2)
    442c:	add	r3, r4
    442e:	cmp	r3, #67	; 0x43
    4430:	bhi.n	44d0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xcc>
    4432:	tbh	[pc, r3, lsl #1]
    4436:	.short	0x0044
    4438:	.word	0x009e008c
    443c:	.word	0x004d00a9
    4440:	.word	0x00b1004d
    4444:	.word	0x0141012f
    4448:	.word	0x00ed004d
    444c:	.word	0x004d004d
    4450:	.word	0x004d004d
    4454:	.word	0x004d004d
    4458:	.word	0x004d004d
    445c:	.word	0x004d004d
    4460:	.word	0x004d004d
    4464:	.word	0x004d004d
    4468:	.word	0x004d004d
    446c:	.word	0x004d004d
    4470:	.word	0x004d004d
    4474:	.word	0x004d004d
    4478:	.word	0x004d004d
    447c:	.word	0x004d004d
    4480:	.word	0x004d004d
    4484:	.word	0x004d004d
    4488:	.word	0x004d004d
    448c:	.word	0x004d004d
    4490:	.word	0x004d004d
    4494:	.word	0x004d004d
    4498:	.word	0x004d004d
    449c:	.word	0x004d004d
    44a0:	.word	0x004d004d
    44a4:	.word	0x004d004d
    44a8:	.word	0x004d004d
    44ac:	.word	0x004d004d
    44b0:	.word	0x004d004d
    44b4:	.word	0x0125004d
    44b8:	.word	0x004d004d
    44bc:	.short	0x0050
    44be:	movs	r2, #1
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    44c0:	ldrb	r3, [r5, #0]
    44c2:	str	r2, [sp, #40]	; 0x28
    44c4:	cmp	r3, #0
    44c6:	beq.w	4a2a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x626>
      {
        write_length_ += len;
    44ca:	ldr	r3, [r5, #4]
    44cc:	adds	r3, #4
    44ce:	str	r3, [r5, #4]
          writestring(filename);
          break;
        default:
          break;
      }
    }
    44d0:	add	sp, #332	; 0x14c
    44d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

#define Store2Storage(x) (x+1)
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    44d6:	ldrb.w	r4, [sp, #72]	; 0x48
    44da:	cmp	r4, #0
    44dc:	bne.w	47c4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x3c0>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    44e0:	ldrb	r3, [r5, #0]
    44e2:	strb.w	r4, [sp, #18]
    44e6:	cmp	r3, #0
    44e8:	bne.w	46a2 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x29e>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    44ec:	ldr	r3, [r5, #4]
    44ee:	cmp	r3, #0
    44f0:	beq.w	4e8c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xa88>
    44f4:	ldr	r4, [pc, #444]	; (46b4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x2b0>)
    44f6:	ldr	r0, [r4, #0]
        write_length_ += len;
    44f8:	adds	r3, #1
        
        const char * src=data;
    44fa:	add.w	r6, sp, #18
    44fe:	add.w	r7, r5, #1056	; 0x420
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4502:	add.w	r8, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    4506:	str	r3, [r5, #4]
        
        const char * src=data;
        //
        int pos = 0; // into data
    4508:	mov.w	r9, #0
    450c:	b.n	4516 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x112>
        while(pos<len)
    450e:	cmp.w	r9, #0
    4512:	bgt.n	44d0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xcc>
    4514:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4516:	subs	r5, r7, r0
    4518:	rsb	r3, r9, #1
          memcpy(dst,src,to_copy);
    451c:	mov	r1, r6
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    451e:	cmp	r5, r3
    4520:	it	ge
    4522:	movge	r5, r3
          memcpy(dst,src,to_copy);
    4524:	mov	r2, r5
          pos += to_copy;
    4526:	add	r9, r5
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    4528:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    452c:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    452e:	add	r6, r5
          dst += to_copy;
    4530:	add	r5, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4532:	cmp	r5, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4534:	str	r5, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4536:	bne.n	450e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x10a>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    4538:	movs	r2, #60	; 0x3c
    453a:	mov.w	r1, #512	; 0x200
    453e:	mov	r0, r8
    4540:	bl	a000 <usb_mtp_send>
    4544:	cmp	r0, #0
    4546:	ble.n	4538 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x134>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    4548:	str.w	r8, [r4]
    454c:	b.n	450e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x10a>
      {
        case MTP_PROPERTY_STORAGE_ID:         //0xDC01:
          write32(storage);
          break;
        case MTP_PROPERTY_OBJECT_FORMAT:      //0xDC02:
          write16(dir?0x3001:0x3000);
    454e:	adds	r2, #1
    4550:	movw	r3, #12289	; 0x3001
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    4554:	ldrb	r2, [r5, #0]
      {
        case MTP_PROPERTY_STORAGE_ID:         //0xDC01:
          write32(storage);
          break;
        case MTP_PROPERTY_OBJECT_FORMAT:      //0xDC02:
          write16(dir?0x3001:0x3000);
    4556:	it	ne
    4558:	movne.w	r3, #12288	; 0x3000
    455c:	strh.w	r3, [sp, #20]
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    4560:	ldr	r3, [r5, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    4562:	cmp	r2, #0
    4564:	beq.w	4af0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x6ec>
      {
        write_length_ += len;
    4568:	adds	r3, #2
    456a:	str	r3, [r5, #4]
          writestring(filename);
          break;
        default:
          break;
      }
    }
    456c:	add	sp, #332	; 0x14c
    456e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4572:	movs	r2, #0
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    4574:	ldrb	r3, [r5, #0]
    4576:	strh.w	r2, [sp, #22]
    457a:	cmp	r3, #0
    457c:	beq.w	4a8c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x688>
      {
        write_length_ += len;
    4580:	ldr	r3, [r5, #4]
    4582:	adds	r3, #2
    4584:	str	r3, [r5, #4]
    4586:	b.n	44d0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xcc>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    4588:	ldrb	r3, [r5, #0]
    458a:	str	r2, [sp, #48]	; 0x30
    458c:	cmp	r3, #0
    458e:	beq.w	495c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x558>
      {
        write_length_ += len;
    4592:	ldr	r3, [r5, #4]
    4594:	adds	r3, #4
    4596:	b.n	44cc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xc8>

#define Store2Storage(x) (x+1)
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    4598:	ldrb.w	r4, [sp, #72]	; 0x48
    459c:	cmp	r4, #0
    459e:	bne.w	4728 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x324>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    45a2:	ldrb	r3, [r5, #0]
    45a4:	strb.w	r4, [sp, #14]
    45a8:	cmp	r3, #0
    45aa:	bne.n	46a2 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x29e>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    45ac:	ldr	r3, [r5, #4]
    45ae:	cmp	r3, #0
    45b0:	beq.w	4ea6 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xaa2>
    45b4:	ldr	r4, [pc, #252]	; (46b4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x2b0>)
    45b6:	ldr	r0, [r4, #0]
        write_length_ += len;
    45b8:	adds	r3, #1
        
        const char * src=data;
    45ba:	add.w	r6, sp, #14
    45be:	add.w	r7, r5, #1056	; 0x420
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    45c2:	add.w	r8, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    45c6:	str	r3, [r5, #4]
        
        const char * src=data;
        //
        int pos = 0; // into data
    45c8:	mov.w	r9, #0
    45cc:	b.n	45d8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1d4>
        while(pos<len)
    45ce:	cmp.w	r9, #0
    45d2:	bgt.w	44d0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xcc>
    45d6:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    45d8:	subs	r5, r7, r0
    45da:	rsb	r3, r9, #1
          memcpy(dst,src,to_copy);
    45de:	mov	r1, r6
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    45e0:	cmp	r5, r3
    45e2:	it	ge
    45e4:	movge	r5, r3
          memcpy(dst,src,to_copy);
    45e6:	mov	r2, r5
          pos += to_copy;
    45e8:	add	r9, r5
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    45ea:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    45ee:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    45f0:	add	r6, r5
          dst += to_copy;
    45f2:	add	r5, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    45f4:	cmp	r5, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    45f6:	str	r5, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    45f8:	bne.n	45ce <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1ca>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    45fa:	movs	r2, #60	; 0x3c
    45fc:	mov.w	r1, #512	; 0x200
    4600:	mov	r0, r8
    4602:	bl	a000 <usb_mtp_send>
    4606:	cmp	r0, #0
    4608:	ble.n	45fa <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1f6>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    460a:	str.w	r8, [r4]
    460e:	b.n	45ce <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1ca>
    4610:	ldr.w	r2, [r8]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    4614:	ldrb	r3, [r5, #0]
    4616:	str	r2, [sp, #52]	; 0x34
    4618:	cmp	r3, #0
    461a:	bne.w	44ca <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xc6>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    461e:	ldr	r3, [r5, #4]
    4620:	cmp	r3, #0
    4622:	beq.w	4e72 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xa6e>
    4626:	ldr	r4, [pc, #140]	; (46b4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x2b0>)
    4628:	ldr	r0, [r4, #0]
        write_length_ += len;
    462a:	adds	r3, #4
        
        const char * src=data;
    462c:	add	r6, sp, #52	; 0x34
    462e:	add.w	r7, r5, #1056	; 0x420
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4632:	add.w	r8, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    4636:	str	r3, [r5, #4]
        
        const char * src=data;
        //
        int pos = 0; // into data
    4638:	mov.w	r9, #0
    463c:	b.n	4648 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x244>
        while(pos<len)
    463e:	cmp.w	r9, #3
    4642:	bgt.w	44d0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xcc>
    4646:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4648:	subs	r5, r7, r0
    464a:	rsb	r3, r9, #4
          memcpy(dst,src,to_copy);
    464e:	mov	r1, r6
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4650:	cmp	r5, r3
    4652:	it	ge
    4654:	movge	r5, r3
          memcpy(dst,src,to_copy);
    4656:	mov	r2, r5
          pos += to_copy;
    4658:	add	r9, r5
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    465a:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    465e:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    4660:	add	r6, r5
          dst += to_copy;
    4662:	add	r5, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4664:	cmp	r5, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4666:	str	r5, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4668:	bne.n	463e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x23a>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    466a:	movs	r2, #60	; 0x3c
    466c:	mov.w	r1, #512	; 0x200
    4670:	mov	r0, r8
    4672:	bl	a000 <usb_mtp_send>
    4676:	cmp	r0, #0
    4678:	ble.n	466a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x266>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    467a:	str.w	r8, [r4]
    467e:	b.n	463e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x23a>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    4680:	ldrb	r3, [r5, #0]
    4682:	str	r6, [sp, #60]	; 0x3c
    4684:	cmp	r3, #0
    4686:	beq.w	4b50 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x74c>
      {
        write_length_ += len;
    468a:	ldr	r3, [r5, #4]
    468c:	adds	r3, #4
    468e:	adds	r3, #4
    4690:	adds	r3, #4
    4692:	b.n	44cc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xc8>
    4694:	movs	r2, #0
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    4696:	ldrb	r3, [r5, #0]
    4698:	strb.w	r2, [sp, #16]
    469c:	cmp	r3, #0
    469e:	beq.w	4ce8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x8e4>
      {
        write_length_ += len;
    46a2:	ldr	r3, [r5, #4]
    46a4:	adds	r3, #1
    46a6:	str	r3, [r5, #4]
          writestring(filename);
          break;
        default:
          break;
      }
    }
    46a8:	add	sp, #332	; 0x14c
    46aa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    46ae:	nop
    46b0:	.word	0x2000c650
    46b4:	.word	0x20004604
    46b8:	movs	r2, #0
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    46ba:	ldrb	r3, [r5, #0]
    46bc:	strb.w	r2, [sp, #17]
    46c0:	cmp	r3, #0
    46c2:	bne.n	46a2 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x29e>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    46c4:	ldr	r3, [r5, #4]
    46c6:	cmp	r3, #0
    46c8:	beq.w	4e80 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xa7c>
    46cc:	ldr	r4, [pc, #752]	; (49c0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x5bc>)
    46ce:	ldr	r0, [r4, #0]
        write_length_ += len;
    46d0:	adds	r3, #1
        
        const char * src=data;
    46d2:	add.w	r6, sp, #17
    46d6:	add.w	r7, r5, #1056	; 0x420
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    46da:	add.w	r8, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    46de:	str	r3, [r5, #4]
        
        const char * src=data;
        //
        int pos = 0; // into data
    46e0:	mov.w	r9, #0
    46e4:	b.n	46f0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x2ec>
        while(pos<len)
    46e6:	cmp.w	r9, #0
    46ea:	bgt.w	44d0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xcc>
    46ee:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    46f0:	subs	r5, r7, r0
    46f2:	rsb	r3, r9, #1
          memcpy(dst,src,to_copy);
    46f6:	mov	r1, r6
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    46f8:	cmp	r5, r3
    46fa:	it	ge
    46fc:	movge	r5, r3
          memcpy(dst,src,to_copy);
    46fe:	mov	r2, r5
          pos += to_copy;
    4700:	add	r9, r5
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    4702:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4706:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    4708:	add	r6, r5
          dst += to_copy;
    470a:	add	r5, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    470c:	cmp	r5, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    470e:	str	r5, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4710:	bne.n	46e6 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x2e2>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    4712:	movs	r2, #60	; 0x3c
    4714:	mov.w	r1, #512	; 0x200
    4718:	mov	r0, r8
    471a:	bl	a000 <usb_mtp_send>
    471e:	cmp	r0, #0
    4720:	ble.n	4712 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x30e>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    4722:	str.w	r8, [r4]
    4726:	b.n	46e6 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x2e2>
#define Store2Storage(x) (x+1)
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
    4728:	add	r0, sp, #72	; 0x48
    472a:	bl	c040 <strlen>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    472e:	ldrb	r2, [r5, #0]
    4730:	adds	r0, #1
      {
        write_length_ += len;
    4732:	ldr	r3, [r5, #4]
    4734:	strb.w	r0, [sp, #15]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    4738:	cmp	r2, #0
    473a:	beq.w	4d86 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x982>
      {
        write_length_ += len;
    473e:	adds	r3, #1
    4740:	str	r3, [r5, #4]
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
    4742:	add.w	r8, sp, #72	; 0x48
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4746:	add.w	sl, r5, #544	; 0x220
    474a:	b.n	475a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x356>
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    474c:	adds	r3, #2
    474e:	str	r3, [r5, #4]
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    4750:	ldrb.w	r4, [r8, #1]!
    4754:	cmp	r4, #0
    4756:	beq.w	48f0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x4ec>
    475a:	strh.w	r4, [sp, #26]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    475e:	cmp	r2, #0
    4760:	bne.n	474c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x348>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    4762:	ldr	r4, [pc, #604]	; (49c0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x5bc>)
    4764:	cmp	r3, #0
    4766:	beq.n	485a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x456>
    4768:	ldr	r0, [r4, #0]
        write_length_ += len;
    476a:	adds	r3, #2
    476c:	add.w	r9, r5, #1056	; 0x420
        
        const char * src=data;
    4770:	add.w	r7, sp, #26
        //
        int pos = 0; // into data
    4774:	movs	r6, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    4776:	str	r3, [r5, #4]
    4778:	b.n	4780 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x37c>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    477a:	cmp	r6, #1
    477c:	bgt.n	47be <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x3ba>
    477e:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4780:	rsb	r2, r0, r9
    4784:	rsb	r3, r6, #2
          memcpy(dst,src,to_copy);
    4788:	mov	r1, r7
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    478a:	cmp	r2, r3
    478c:	it	ge
    478e:	movge	r2, r3
    4790:	mov	fp, r2
          memcpy(dst,src,to_copy);
          pos += to_copy;
    4792:	add	r6, r2
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    4794:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4798:	ldr	r2, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    479a:	add	r7, fp
          dst += to_copy;
    479c:	add.w	r3, r2, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    47a0:	cmp	r3, r9
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    47a2:	str	r3, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    47a4:	bne.n	477a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x376>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    47a6:	movs	r2, #60	; 0x3c
    47a8:	mov.w	r1, #512	; 0x200
    47ac:	mov	r0, sl
    47ae:	bl	a000 <usb_mtp_send>
    47b2:	cmp	r0, #0
    47b4:	ble.n	47a6 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x3a2>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    47b6:	cmp	r6, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    47b8:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    47bc:	ble.n	477e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x37a>
    47be:	ldrb	r2, [r5, #0]
    47c0:	ldr	r3, [r5, #4]
    47c2:	b.n	4750 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x34c>
#define Store2Storage(x) (x+1)
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
    47c4:	add	r0, sp, #72	; 0x48
    47c6:	bl	c040 <strlen>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    47ca:	ldrb	r2, [r5, #0]
    47cc:	adds	r0, #1
      {
        write_length_ += len;
    47ce:	ldr	r3, [r5, #4]
    47d0:	strb.w	r0, [sp, #19]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    47d4:	cmp	r2, #0
    47d6:	beq.w	4de6 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x9e2>
      {
        write_length_ += len;
    47da:	adds	r3, #1
    47dc:	str	r3, [r5, #4]
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
    47de:	add	r7, sp, #72	; 0x48
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    47e0:	add.w	sl, r5, #544	; 0x220
    47e4:	b.n	47f2 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x3ee>
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    47e6:	adds	r3, #2
    47e8:	str	r3, [r5, #4]
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    47ea:	ldrb.w	r4, [r7, #1]!
    47ee:	cmp	r4, #0
    47f0:	beq.n	4876 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x472>
    47f2:	strh.w	r4, [sp, #30]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    47f6:	cmp	r2, #0
    47f8:	bne.n	47e6 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x3e2>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    47fa:	ldr	r4, [pc, #452]	; (49c0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x5bc>)
    47fc:	cbz	r3, 4862 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x45e>
    47fe:	ldr	r0, [r4, #0]
        write_length_ += len;
    4800:	adds	r3, #2
    4802:	add.w	r9, r5, #1056	; 0x420
        
        const char * src=data;
    4806:	add.w	r8, sp, #30
        //
        int pos = 0; // into data
    480a:	movs	r6, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    480c:	str	r3, [r5, #4]
    480e:	b.n	4816 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x412>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    4810:	cmp	r6, #1
    4812:	bgt.n	4854 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x450>
    4814:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4816:	rsb	r2, r0, r9
    481a:	rsb	r3, r6, #2
          memcpy(dst,src,to_copy);
    481e:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4820:	cmp	r2, r3
    4822:	it	ge
    4824:	movge	r2, r3
    4826:	mov	fp, r2
          memcpy(dst,src,to_copy);
          pos += to_copy;
    4828:	add	r6, r2
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    482a:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    482e:	ldr	r2, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    4830:	add	r8, fp
          dst += to_copy;
    4832:	add.w	r3, r2, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4836:	cmp	r3, r9
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4838:	str	r3, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    483a:	bne.n	4810 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x40c>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    483c:	movs	r2, #60	; 0x3c
    483e:	mov.w	r1, #512	; 0x200
    4842:	mov	r0, sl
    4844:	bl	a000 <usb_mtp_send>
    4848:	cmp	r0, #0
    484a:	ble.n	483c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x438>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    484c:	cmp	r6, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    484e:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    4852:	ble.n	4814 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x410>
    4854:	ldrb	r2, [r5, #0]
    4856:	ldr	r3, [r5, #4]
    4858:	b.n	47ea <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x3e6>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    485a:	mov	r0, sl
    485c:	str.w	sl, [r4]
    4860:	b.n	476a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x366>
    4862:	mov	r0, sl
    4864:	str.w	sl, [r4]
    4868:	b.n	4800 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x3fc>
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    486a:	ldrb.w	r4, [sp, #72]	; 0x48
    486e:	ldrb	r2, [r5, #0]
    4870:	ldr	r3, [r5, #4]
    4872:	cmp	r4, #0
    4874:	bne.n	47de <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x3da>
    4876:	movs	r1, #0
    4878:	strh.w	r1, [sp, #28]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    487c:	cmp	r2, #0
    487e:	bne.w	4568 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x164>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    4882:	cmp	r3, #0
    4884:	beq.w	4ed8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xad4>
    4888:	ldr	r4, [pc, #308]	; (49c0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x5bc>)
    488a:	ldr	r0, [r4, #0]
        write_length_ += len;
    488c:	adds	r3, #2
        
        const char * src=data;
    488e:	add	r6, sp, #28
    4890:	add.w	r7, r5, #1056	; 0x420
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4894:	add.w	r8, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    4898:	str	r3, [r5, #4]
        
        const char * src=data;
        //
        int pos = 0; // into data
    489a:	mov.w	r9, #0
    489e:	b.n	48aa <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x4a6>
        while(pos<len)
    48a0:	cmp.w	r9, #1
    48a4:	bgt.w	44d0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xcc>
    48a8:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    48aa:	subs	r5, r7, r0
    48ac:	rsb	r3, r9, #2
          memcpy(dst,src,to_copy);
    48b0:	mov	r1, r6
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    48b2:	cmp	r5, r3
    48b4:	it	ge
    48b6:	movge	r5, r3
          memcpy(dst,src,to_copy);
    48b8:	mov	r2, r5
          pos += to_copy;
    48ba:	add	r9, r5
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    48bc:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    48c0:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    48c2:	add	r6, r5
          dst += to_copy;
    48c4:	add	r5, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    48c6:	cmp	r5, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    48c8:	str	r5, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    48ca:	bne.n	48a0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x49c>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    48cc:	movs	r2, #60	; 0x3c
    48ce:	mov.w	r1, #512	; 0x200
    48d2:	mov	r0, r8
    48d4:	bl	a000 <usb_mtp_send>
    48d8:	cmp	r0, #0
    48da:	ble.n	48cc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x4c8>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    48dc:	str.w	r8, [r4]
    48e0:	b.n	48a0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x49c>
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    48e2:	ldrb.w	r4, [sp, #72]	; 0x48
    48e6:	ldrb	r2, [r5, #0]
    48e8:	ldr	r3, [r5, #4]
    48ea:	cmp	r4, #0
    48ec:	bne.w	4742 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x33e>
    48f0:	movs	r1, #0
    48f2:	strh.w	r1, [sp, #24]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    48f6:	cmp	r2, #0
    48f8:	bne.w	4568 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x164>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    48fc:	cmp	r3, #0
    48fe:	beq.w	4ec0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xabc>
    4902:	ldr	r4, [pc, #188]	; (49c0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x5bc>)
    4904:	ldr	r0, [r4, #0]
        write_length_ += len;
    4906:	adds	r3, #2
        
        const char * src=data;
    4908:	add	r6, sp, #24
    490a:	add.w	r7, r5, #1056	; 0x420
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    490e:	add.w	r8, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    4912:	str	r3, [r5, #4]
        
        const char * src=data;
        //
        int pos = 0; // into data
    4914:	mov.w	r9, #0
    4918:	b.n	4924 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x520>
        while(pos<len)
    491a:	cmp.w	r9, #1
    491e:	bgt.w	44d0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xcc>
    4922:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4924:	subs	r5, r7, r0
    4926:	rsb	r3, r9, #2
          memcpy(dst,src,to_copy);
    492a:	mov	r1, r6
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    492c:	cmp	r5, r3
    492e:	it	ge
    4930:	movge	r5, r3
          memcpy(dst,src,to_copy);
    4932:	mov	r2, r5
          pos += to_copy;
    4934:	add	r9, r5
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    4936:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    493a:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    493c:	add	r6, r5
          dst += to_copy;
    493e:	add	r5, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4940:	cmp	r5, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4942:	str	r5, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4944:	bne.n	491a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x516>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    4946:	movs	r2, #60	; 0x3c
    4948:	mov.w	r1, #512	; 0x200
    494c:	mov	r0, r8
    494e:	bl	a000 <usb_mtp_send>
    4952:	cmp	r0, #0
    4954:	ble.n	4946 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x542>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    4956:	str.w	r8, [r4]
    495a:	b.n	491a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x516>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    495c:	ldr	r3, [r5, #4]
    495e:	cmp	r3, #0
    4960:	beq.w	4d50 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x94c>
    4964:	ldr	r4, [pc, #88]	; (49c0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x5bc>)
    4966:	ldr	r0, [r4, #0]
        write_length_ += len;
    4968:	adds	r3, #4
        
        const char * src=data;
    496a:	add.w	r9, sp, #48	; 0x30
    496e:	add.w	r6, r5, #1056	; 0x420
        //
        int pos = 0; // into data
    4972:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    4976:	str	r3, [r5, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4978:	add.w	sl, r5, #544	; 0x220
    497c:	b.n	4986 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x582>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    497e:	cmp.w	r8, #3
    4982:	bgt.n	49c4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x5c0>
    4984:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4986:	subs	r7, r6, r0
    4988:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    498c:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    498e:	cmp	r7, r3
    4990:	it	ge
    4992:	movge	r7, r3
          memcpy(dst,src,to_copy);
    4994:	mov	r2, r7
          pos += to_copy;
    4996:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    4998:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    499c:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    499e:	add	r9, r7
          dst += to_copy;
    49a0:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    49a2:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    49a4:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    49a6:	bne.n	497e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x57a>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    49a8:	movs	r2, #60	; 0x3c
    49aa:	mov.w	r1, #512	; 0x200
    49ae:	mov	r0, sl
    49b0:	bl	a000 <usb_mtp_send>
    49b4:	cmp	r0, #0
    49b6:	ble.n	49a8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x5a4>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    49b8:	str.w	sl, [r4]
    49bc:	b.n	497e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x57a>
    49be:	nop
    49c0:	.word	0x20004604
    49c4:	movs	r3, #0
    49c6:	ldrb	r2, [r5, #0]
    49c8:	str	r3, [sp, #44]	; 0x2c
    49ca:	ldr	r3, [r5, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    49cc:	cmp	r2, #0
    49ce:	bne.w	44cc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xc8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    49d2:	cmp	r3, #0
    49d4:	beq.w	4e68 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xa64>
    49d8:	ldr	r0, [r4, #0]
        write_length_ += len;
    49da:	adds	r3, #4
        
        const char * src=data;
    49dc:	add.w	r8, sp, #44	; 0x2c
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    49e0:	add.w	r9, r5, #544	; 0x220
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
    49e4:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    49e6:	str	r3, [r5, #4]
    49e8:	b.n	49f2 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x5ee>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    49ea:	cmp	r7, #3
    49ec:	bgt.w	44d0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xcc>
    49f0:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    49f2:	subs	r5, r6, r0
    49f4:	rsb	r3, r7, #4
          memcpy(dst,src,to_copy);
    49f8:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    49fa:	cmp	r5, r3
    49fc:	it	ge
    49fe:	movge	r5, r3
          memcpy(dst,src,to_copy);
    4a00:	mov	r2, r5
          pos += to_copy;
    4a02:	add	r7, r5
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    4a04:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4a08:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    4a0a:	add	r8, r5
          dst += to_copy;
    4a0c:	add	r5, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4a0e:	cmp	r5, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4a10:	str	r5, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4a12:	bne.n	49ea <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x5e6>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    4a14:	movs	r2, #60	; 0x3c
    4a16:	mov.w	r1, #512	; 0x200
    4a1a:	mov	r0, r9
    4a1c:	bl	a000 <usb_mtp_send>
    4a20:	cmp	r0, #0
    4a22:	ble.n	4a14 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x610>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    4a24:	str.w	r9, [r4]
    4a28:	b.n	49ea <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x5e6>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    4a2a:	ldr	r3, [r5, #4]
    4a2c:	cmp	r3, #0
    4a2e:	beq.w	4e5c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xa58>
    4a32:	ldr	r4, [pc, #792]	; (4d4c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x948>)
    4a34:	ldr	r0, [r4, #0]
        write_length_ += len;
    4a36:	adds	r3, #4
        
        const char * src=data;
    4a38:	add	r6, sp, #40	; 0x28
    4a3a:	add.w	r7, r5, #1056	; 0x420
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4a3e:	add.w	r8, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    4a42:	str	r3, [r5, #4]
        
        const char * src=data;
        //
        int pos = 0; // into data
    4a44:	mov.w	r9, #0
    4a48:	b.n	4a54 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x650>
        while(pos<len)
    4a4a:	cmp.w	r9, #3
    4a4e:	bgt.w	44d0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xcc>
    4a52:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4a54:	subs	r5, r7, r0
    4a56:	rsb	r3, r9, #4
          memcpy(dst,src,to_copy);
    4a5a:	mov	r1, r6
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4a5c:	cmp	r5, r3
    4a5e:	it	ge
    4a60:	movge	r5, r3
          memcpy(dst,src,to_copy);
    4a62:	mov	r2, r5
          pos += to_copy;
    4a64:	add	r9, r5
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    4a66:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4a6a:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    4a6c:	add	r6, r5
          dst += to_copy;
    4a6e:	add	r5, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4a70:	cmp	r5, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4a72:	str	r5, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4a74:	bne.n	4a4a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x646>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    4a76:	movs	r2, #60	; 0x3c
    4a78:	mov.w	r1, #512	; 0x200
    4a7c:	mov	r0, r8
    4a7e:	bl	a000 <usb_mtp_send>
    4a82:	cmp	r0, #0
    4a84:	ble.n	4a76 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x672>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    4a86:	str.w	r8, [r4]
    4a8a:	b.n	4a4a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x646>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    4a8c:	ldr	r3, [r5, #4]
    4a8e:	cmp	r3, #0
    4a90:	beq.w	4e50 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xa4c>
    4a94:	ldr	r4, [pc, #692]	; (4d4c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x948>)
    4a96:	ldr	r0, [r4, #0]
        write_length_ += len;
    4a98:	adds	r3, #2
        
        const char * src=data;
    4a9a:	add.w	r6, sp, #22
    4a9e:	add.w	r7, r5, #1056	; 0x420
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4aa2:	add.w	r8, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    4aa6:	str	r3, [r5, #4]
        
        const char * src=data;
        //
        int pos = 0; // into data
    4aa8:	mov.w	r9, #0
    4aac:	b.n	4ab8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x6b4>
        while(pos<len)
    4aae:	cmp.w	r9, #1
    4ab2:	bgt.w	44d0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xcc>
    4ab6:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4ab8:	subs	r5, r7, r0
    4aba:	rsb	r3, r9, #2
          memcpy(dst,src,to_copy);
    4abe:	mov	r1, r6
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4ac0:	cmp	r5, r3
    4ac2:	it	ge
    4ac4:	movge	r5, r3
          memcpy(dst,src,to_copy);
    4ac6:	mov	r2, r5
          pos += to_copy;
    4ac8:	add	r9, r5
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    4aca:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4ace:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    4ad0:	add	r6, r5
          dst += to_copy;
    4ad2:	add	r5, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4ad4:	cmp	r5, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4ad6:	str	r5, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4ad8:	bne.n	4aae <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x6aa>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    4ada:	movs	r2, #60	; 0x3c
    4adc:	mov.w	r1, #512	; 0x200
    4ae0:	mov	r0, r8
    4ae2:	bl	a000 <usb_mtp_send>
    4ae6:	cmp	r0, #0
    4ae8:	ble.n	4ada <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x6d6>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    4aea:	str.w	r8, [r4]
    4aee:	b.n	4aae <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x6aa>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    4af0:	cmp	r3, #0
    4af2:	beq.w	4e44 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xa40>
    4af6:	ldr	r4, [pc, #596]	; (4d4c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x948>)
    4af8:	ldr	r0, [r4, #0]
        write_length_ += len;
    4afa:	adds	r3, #2
        
        const char * src=data;
    4afc:	add	r6, sp, #20
    4afe:	add.w	r7, r5, #1056	; 0x420
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4b02:	add.w	r8, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    4b06:	str	r3, [r5, #4]
        
        const char * src=data;
        //
        int pos = 0; // into data
    4b08:	mov.w	r9, #0
    4b0c:	b.n	4b18 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x714>
        while(pos<len)
    4b0e:	cmp.w	r9, #1
    4b12:	bgt.w	44d0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xcc>
    4b16:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4b18:	subs	r5, r7, r0
    4b1a:	rsb	r3, r9, #2
          memcpy(dst,src,to_copy);
    4b1e:	mov	r1, r6
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4b20:	cmp	r5, r3
    4b22:	it	ge
    4b24:	movge	r5, r3
          memcpy(dst,src,to_copy);
    4b26:	mov	r2, r5
          pos += to_copy;
    4b28:	add	r9, r5
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    4b2a:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4b2e:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    4b30:	add	r6, r5
          dst += to_copy;
    4b32:	add	r5, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4b34:	cmp	r5, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4b36:	str	r5, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4b38:	bne.n	4b0e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x70a>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    4b3a:	movs	r2, #60	; 0x3c
    4b3c:	mov.w	r1, #512	; 0x200
    4b40:	mov	r0, r8
    4b42:	bl	a000 <usb_mtp_send>
    4b46:	cmp	r0, #0
    4b48:	ble.n	4b3a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x736>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    4b4a:	str.w	r8, [r4]
    4b4e:	b.n	4b0e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x70a>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    4b50:	ldr	r3, [r5, #4]
    4b52:	cmp	r3, #0
    4b54:	beq.w	4d7a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x976>
    4b58:	ldr	r4, [pc, #496]	; (4d4c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x948>)
    4b5a:	ldr	r0, [r4, #0]
        write_length_ += len;
    4b5c:	adds	r3, #4
        
        const char * src=data;
    4b5e:	add.w	sl, sp, #60	; 0x3c
    4b62:	add.w	r6, r5, #1056	; 0x420
        //
        int pos = 0; // into data
    4b66:	mov.w	r9, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    4b6a:	str	r3, [r5, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4b6c:	add.w	fp, r5, #544	; 0x220
    4b70:	b.n	4b7a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x776>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    4b72:	cmp.w	r9, #3
    4b76:	bgt.n	4bb2 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x7ae>
    4b78:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4b7a:	subs	r7, r6, r0
    4b7c:	rsb	r3, r9, #4
          memcpy(dst,src,to_copy);
    4b80:	mov	r1, sl
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4b82:	cmp	r7, r3
    4b84:	it	ge
    4b86:	movge	r7, r3
          memcpy(dst,src,to_copy);
    4b88:	mov	r2, r7
          pos += to_copy;
    4b8a:	add	r9, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    4b8c:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4b90:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    4b92:	add	sl, r7
          dst += to_copy;
    4b94:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4b96:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4b98:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4b9a:	bne.n	4b72 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x76e>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    4b9c:	movs	r2, #60	; 0x3c
    4b9e:	mov.w	r1, #512	; 0x200
    4ba2:	mov	r0, fp
    4ba4:	bl	a000 <usb_mtp_send>
    4ba8:	cmp	r0, #0
    4baa:	ble.n	4b9c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x798>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    4bac:	str.w	fp, [r4]
    4bb0:	b.n	4b72 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x76e>
    4bb2:	ldr.w	r3, [r8]
    4bb6:	ldrb	r2, [r5, #0]
    4bb8:	str	r3, [sp, #56]	; 0x38
    4bba:	ldr	r3, [r5, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    4bbc:	cmp	r2, #0
    4bbe:	bne.w	468e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x28a>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    4bc2:	cmp	r3, #0
    4bc4:	beq.w	4d70 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x96c>
    4bc8:	ldr	r0, [r4, #0]
        write_length_ += len;
    4bca:	adds	r3, #4
        
        const char * src=data;
    4bcc:	add.w	r9, sp, #56	; 0x38
        //
        int pos = 0; // into data
    4bd0:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4bd4:	add.w	sl, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    4bd8:	str	r3, [r5, #4]
    4bda:	b.n	4be4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x7e0>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    4bdc:	cmp.w	r8, #3
    4be0:	bgt.n	4c1c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x818>
    4be2:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4be4:	subs	r7, r6, r0
    4be6:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    4bea:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4bec:	cmp	r7, r3
    4bee:	it	ge
    4bf0:	movge	r7, r3
          memcpy(dst,src,to_copy);
    4bf2:	mov	r2, r7
          pos += to_copy;
    4bf4:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    4bf6:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4bfa:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    4bfc:	add	r9, r7
          dst += to_copy;
    4bfe:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4c00:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4c02:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4c04:	bne.n	4bdc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x7d8>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    4c06:	movs	r2, #60	; 0x3c
    4c08:	mov.w	r1, #512	; 0x200
    4c0c:	mov	r0, sl
    4c0e:	bl	a000 <usb_mtp_send>
    4c12:	cmp	r0, #0
    4c14:	ble.n	4c06 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x802>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    4c16:	str.w	sl, [r4]
    4c1a:	b.n	4bdc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x7d8>
    4c1c:	movs	r3, #1
    4c1e:	ldrb	r2, [r5, #0]
    4c20:	str	r3, [sp, #64]	; 0x40
    4c22:	ldr	r3, [r5, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    4c24:	cmp	r2, #0
    4c26:	bne.w	4690 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x28c>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    4c2a:	cmp	r3, #0
    4c2c:	beq.w	4d66 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x962>
    4c30:	ldr	r0, [r4, #0]
        write_length_ += len;
    4c32:	adds	r3, #4
        
        const char * src=data;
    4c34:	add.w	r9, sp, #64	; 0x40
        //
        int pos = 0; // into data
    4c38:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4c3c:	add.w	sl, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    4c40:	str	r3, [r5, #4]
    4c42:	b.n	4c4c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x848>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    4c44:	cmp.w	r8, #3
    4c48:	bgt.n	4c84 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x880>
    4c4a:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4c4c:	subs	r7, r6, r0
    4c4e:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    4c52:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4c54:	cmp	r7, r3
    4c56:	it	ge
    4c58:	movge	r7, r3
          memcpy(dst,src,to_copy);
    4c5a:	mov	r2, r7
          pos += to_copy;
    4c5c:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    4c5e:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4c62:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    4c64:	add	r9, r7
          dst += to_copy;
    4c66:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4c68:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4c6a:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4c6c:	bne.n	4c44 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x840>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    4c6e:	movs	r2, #60	; 0x3c
    4c70:	mov.w	r1, #512	; 0x200
    4c74:	mov	r0, sl
    4c76:	bl	a000 <usb_mtp_send>
    4c7a:	cmp	r0, #0
    4c7c:	ble.n	4c6e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x86a>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    4c7e:	str.w	sl, [r4]
    4c82:	b.n	4c44 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x840>
    4c84:	movs	r3, #0
    4c86:	ldrb	r2, [r5, #0]
    4c88:	str	r3, [sp, #68]	; 0x44
    4c8a:	ldr	r3, [r5, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    4c8c:	cmp	r2, #0
    4c8e:	bne.w	44cc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xc8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    4c92:	cmp	r3, #0
    4c94:	beq.n	4d5c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x958>
    4c96:	ldr	r0, [r4, #0]
        write_length_ += len;
    4c98:	adds	r3, #4
        
        const char * src=data;
    4c9a:	add.w	r8, sp, #68	; 0x44
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4c9e:	add.w	r9, r5, #544	; 0x220
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
    4ca2:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    4ca4:	str	r3, [r5, #4]
    4ca6:	b.n	4cb0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x8ac>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    4ca8:	cmp	r7, #3
    4caa:	bgt.w	44d0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xcc>
    4cae:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4cb0:	subs	r5, r6, r0
    4cb2:	rsb	r3, r7, #4
          memcpy(dst,src,to_copy);
    4cb6:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4cb8:	cmp	r5, r3
    4cba:	it	ge
    4cbc:	movge	r5, r3
          memcpy(dst,src,to_copy);
    4cbe:	mov	r2, r5
          pos += to_copy;
    4cc0:	add	r7, r5
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    4cc2:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4cc6:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    4cc8:	add	r8, r5
          dst += to_copy;
    4cca:	add	r5, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4ccc:	cmp	r5, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4cce:	str	r5, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4cd0:	bne.n	4ca8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x8a4>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    4cd2:	movs	r2, #60	; 0x3c
    4cd4:	mov.w	r1, #512	; 0x200
    4cd8:	mov	r0, r9
    4cda:	bl	a000 <usb_mtp_send>
    4cde:	cmp	r0, #0
    4ce0:	ble.n	4cd2 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x8ce>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    4ce2:	str.w	r9, [r4]
    4ce6:	b.n	4ca8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x8a4>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    4ce8:	ldr	r3, [r5, #4]
    4cea:	cmp	r3, #0
    4cec:	beq.w	4e9a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xa96>
    4cf0:	ldr	r4, [pc, #88]	; (4d4c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x948>)
    4cf2:	ldr	r0, [r4, #0]
        write_length_ += len;
    4cf4:	adds	r3, #1
        
        const char * src=data;
    4cf6:	add	r6, sp, #16
    4cf8:	add.w	r7, r5, #1056	; 0x420
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4cfc:	add.w	r8, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    4d00:	str	r3, [r5, #4]
        
        const char * src=data;
        //
        int pos = 0; // into data
    4d02:	mov.w	r9, #0
    4d06:	b.n	4d12 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x90e>
        while(pos<len)
    4d08:	cmp.w	r9, #0
    4d0c:	bgt.w	44d0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xcc>
    4d10:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4d12:	subs	r5, r7, r0
    4d14:	rsb	r3, r9, #1
          memcpy(dst,src,to_copy);
    4d18:	mov	r1, r6
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4d1a:	cmp	r5, r3
    4d1c:	it	ge
    4d1e:	movge	r5, r3
          memcpy(dst,src,to_copy);
    4d20:	mov	r2, r5
          pos += to_copy;
    4d22:	add	r9, r5
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    4d24:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4d28:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    4d2a:	add	r6, r5
          dst += to_copy;
    4d2c:	add	r5, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4d2e:	cmp	r5, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4d30:	str	r5, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4d32:	bne.n	4d08 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x904>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    4d34:	movs	r2, #60	; 0x3c
    4d36:	mov.w	r1, #512	; 0x200
    4d3a:	mov	r0, r8
    4d3c:	bl	a000 <usb_mtp_send>
    4d40:	cmp	r0, #0
    4d42:	ble.n	4d34 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x930>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    4d44:	str.w	r8, [r4]
    4d48:	b.n	4d08 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x904>
    4d4a:	nop
    4d4c:	.word	0x20004604
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    4d50:	add.w	r2, r5, #544	; 0x220
    4d54:	ldr	r4, [pc, #396]	; (4ee4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xae0>)
    4d56:	mov	r0, r2
    4d58:	str	r2, [r4, #0]
    4d5a:	b.n	4968 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x564>
    4d5c:	add.w	r2, r5, #544	; 0x220
    4d60:	mov	r0, r2
    4d62:	str	r2, [r4, #0]
    4d64:	b.n	4c98 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x894>
    4d66:	add.w	r2, r5, #544	; 0x220
    4d6a:	mov	r0, r2
    4d6c:	str	r2, [r4, #0]
    4d6e:	b.n	4c32 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x82e>
    4d70:	add.w	r2, r5, #544	; 0x220
    4d74:	mov	r0, r2
    4d76:	str	r2, [r4, #0]
    4d78:	b.n	4bca <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x7c6>
    4d7a:	add.w	r2, r5, #544	; 0x220
    4d7e:	ldr	r4, [pc, #356]	; (4ee4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xae0>)
    4d80:	mov	r0, r2
    4d82:	str	r2, [r4, #0]
    4d84:	b.n	4b5c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x758>
    4d86:	cmp	r3, #0
    4d88:	beq.w	4eb4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xab0>
    4d8c:	ldr	r4, [pc, #340]	; (4ee4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xae0>)
    4d8e:	ldr	r0, [r4, #0]
        write_length_ += len;
    4d90:	adds	r3, #1
        
        const char * src=data;
    4d92:	add.w	r8, sp, #15
    4d96:	add.w	r9, r5, #1056	; 0x420
        //
        int pos = 0; // into data
    4d9a:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    4d9c:	str	r3, [r5, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4d9e:	add.w	sl, r5, #544	; 0x220
    4da2:	b.n	4dac <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x9a8>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    4da4:	cmp	r7, #0
    4da6:	bgt.w	48e2 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x4de>
    4daa:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4dac:	rsb	r6, r0, r9
    4db0:	rsb	r3, r7, #1
          memcpy(dst,src,to_copy);
    4db4:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4db6:	cmp	r6, r3
    4db8:	it	ge
    4dba:	movge	r6, r3
          memcpy(dst,src,to_copy);
    4dbc:	mov	r2, r6
          pos += to_copy;
    4dbe:	add	r7, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    4dc0:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4dc4:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    4dc6:	add	r8, r6
          dst += to_copy;
    4dc8:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4dca:	cmp	r6, r9
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4dcc:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4dce:	bne.n	4da4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x9a0>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    4dd0:	movs	r2, #60	; 0x3c
    4dd2:	mov.w	r1, #512	; 0x200
    4dd6:	mov	r0, sl
    4dd8:	bl	a000 <usb_mtp_send>
    4ddc:	cmp	r0, #0
    4dde:	ble.n	4dd0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x9cc>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    4de0:	str.w	sl, [r4]
    4de4:	b.n	4da4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x9a0>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    4de6:	cmp	r3, #0
    4de8:	beq.n	4ecc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xac8>
    4dea:	ldr	r4, [pc, #248]	; (4ee4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xae0>)
    4dec:	ldr	r0, [r4, #0]
        write_length_ += len;
    4dee:	adds	r3, #1
        
        const char * src=data;
    4df0:	add.w	r8, sp, #19
    4df4:	add.w	r9, r5, #1056	; 0x420
        //
        int pos = 0; // into data
    4df8:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    4dfa:	str	r3, [r5, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4dfc:	add.w	sl, r5, #544	; 0x220
    4e00:	b.n	4e0a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xa06>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    4e02:	cmp	r7, #0
    4e04:	bgt.w	486a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x466>
    4e08:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4e0a:	rsb	r6, r0, r9
    4e0e:	rsb	r3, r7, #1
          memcpy(dst,src,to_copy);
    4e12:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4e14:	cmp	r6, r3
    4e16:	it	ge
    4e18:	movge	r6, r3
          memcpy(dst,src,to_copy);
    4e1a:	mov	r2, r6
          pos += to_copy;
    4e1c:	add	r7, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    4e1e:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4e22:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    4e24:	add	r8, r6
          dst += to_copy;
    4e26:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4e28:	cmp	r6, r9
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4e2a:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4e2c:	bne.n	4e02 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x9fe>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    4e2e:	movs	r2, #60	; 0x3c
    4e30:	mov.w	r1, #512	; 0x200
    4e34:	mov	r0, sl
    4e36:	bl	a000 <usb_mtp_send>
    4e3a:	cmp	r0, #0
    4e3c:	ble.n	4e2e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xa2a>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    4e3e:	str.w	sl, [r4]
    4e42:	b.n	4e02 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x9fe>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    4e44:	add.w	r2, r5, #544	; 0x220
    4e48:	ldr	r4, [pc, #152]	; (4ee4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xae0>)
    4e4a:	mov	r0, r2
    4e4c:	str	r2, [r4, #0]
    4e4e:	b.n	4afa <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x6f6>
    4e50:	add.w	r2, r5, #544	; 0x220
    4e54:	ldr	r4, [pc, #140]	; (4ee4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xae0>)
    4e56:	mov	r0, r2
    4e58:	str	r2, [r4, #0]
    4e5a:	b.n	4a98 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x694>
    4e5c:	add.w	r2, r5, #544	; 0x220
    4e60:	ldr	r4, [pc, #128]	; (4ee4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xae0>)
    4e62:	mov	r0, r2
    4e64:	str	r2, [r4, #0]
    4e66:	b.n	4a36 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x632>
    4e68:	add.w	r2, r5, #544	; 0x220
    4e6c:	mov	r0, r2
    4e6e:	str	r2, [r4, #0]
    4e70:	b.n	49da <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x5d6>
    4e72:	add.w	r2, r5, #544	; 0x220
    4e76:	ldr	r4, [pc, #108]	; (4ee4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xae0>)
    4e78:	mov	r0, r2
    4e7a:	str	r2, [r4, #0]
    4e7c:	b.w	462a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x226>
    4e80:	add.w	r2, r5, #544	; 0x220
    4e84:	ldr	r4, [pc, #92]	; (4ee4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xae0>)
    4e86:	mov	r0, r2
    4e88:	str	r2, [r4, #0]
    4e8a:	b.n	46d0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x2cc>
    4e8c:	add.w	r2, r5, #544	; 0x220
    4e90:	ldr	r4, [pc, #80]	; (4ee4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xae0>)
    4e92:	mov	r0, r2
    4e94:	str	r2, [r4, #0]
    4e96:	b.w	44f8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xf4>
    4e9a:	add.w	r2, r5, #544	; 0x220
    4e9e:	ldr	r4, [pc, #68]	; (4ee4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xae0>)
    4ea0:	mov	r0, r2
    4ea2:	str	r2, [r4, #0]
    4ea4:	b.n	4cf4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x8f0>
    4ea6:	add.w	r2, r5, #544	; 0x220
    4eaa:	ldr	r4, [pc, #56]	; (4ee4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xae0>)
    4eac:	mov	r0, r2
    4eae:	str	r2, [r4, #0]
    4eb0:	b.w	45b8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1b4>
    4eb4:	add.w	r2, r5, #544	; 0x220
    4eb8:	ldr	r4, [pc, #40]	; (4ee4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xae0>)
    4eba:	mov	r0, r2
    4ebc:	str	r2, [r4, #0]
    4ebe:	b.n	4d90 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x98c>
    4ec0:	add.w	r2, r5, #544	; 0x220
    4ec4:	ldr	r4, [pc, #28]	; (4ee4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xae0>)
    4ec6:	mov	r0, r2
    4ec8:	str	r2, [r4, #0]
    4eca:	b.n	4906 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x502>
    4ecc:	add.w	r2, r5, #544	; 0x220
    4ed0:	ldr	r4, [pc, #16]	; (4ee4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xae0>)
    4ed2:	mov	r0, r2
    4ed4:	str	r2, [r4, #0]
    4ed6:	b.n	4dee <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x9ea>
    4ed8:	add.w	r2, r5, #544	; 0x220
    4edc:	ldr	r4, [pc, #4]	; (4ee4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xae0>)
    4ede:	mov	r0, r2
    4ee0:	str	r2, [r4, #0]
    4ee2:	b.n	488c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x488>
    4ee4:	.word	0x20004604

00004ee8 <MTPD::loop()>:
        return 0x2005;
    }
*/

public:
    void loop(void)
    4ee8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4eec:	sub	sp, #116	; 0x74
    4eee:	mov	r4, r0
    { if(!usb_mtp_available()) return;
    4ef0:	bl	9fd0 <usb_mtp_available>
    4ef4:	cbnz	r0, 4efc <MTPD::loop()+0x14>

            memcpy(tx_data_buffer,rx_data_buffer,len);
            push_packet(tx_data_buffer,len); // for acknowledge use rx_data_buffer
        }
      }
    }
    4ef6:	add	sp, #116	; 0x74
    4ef8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
*/

public:
    void loop(void)
    { if(!usb_mtp_available()) return;
      if(fetch_packet(rx_data_buffer))
    4efc:	add.w	r3, r4, #32
      return usb_mtp_recv(data_buffer,60);
    }

    int fetch_packet(uint8_t *data_buffer)
    {
      return usb_mtp_recv(data_buffer,60);
    4f00:	movs	r1, #60	; 0x3c
    4f02:	mov	r0, r3
*/

public:
    void loop(void)
    { if(!usb_mtp_available()) return;
      if(fetch_packet(rx_data_buffer))
    4f04:	str	r3, [sp, #12]
      return usb_mtp_recv(data_buffer,60);
    }

    int fetch_packet(uint8_t *data_buffer)
    {
      return usb_mtp_recv(data_buffer,60);
    4f06:	bl	9f1c <usb_mtp_recv>
*/

public:
    void loop(void)
    { if(!usb_mtp_available()) return;
      if(fetch_packet(rx_data_buffer))
    4f0a:	cmp	r0, #0
    4f0c:	beq.n	4ef6 <MTPD::loop()+0xe>
      { printContainer(); // to switch on set debug to 1 at beginning of file
    4f0e:	ldr	r0, [r4, #40]	; 0x28
    4f10:	ldrh	r1, [r4, #36]	; 0x24
    4f12:	ldr	r3, [r4, #32]
    4f14:	ldrh	r2, [r4, #38]	; 0x26
    4f16:	str	r0, [sp, #4]
    4f18:	str	r1, [sp, #0]
    4f1a:	ldr	r0, [pc, #812]	; (5248 <MTPD::loop()+0x360>)
    4f1c:	ldr	r1, [pc, #812]	; (524c <MTPD::loop()+0x364>)
    4f1e:	bl	a3a0 <Print::printf(char const*, ...)>
    4f22:	ldr	r3, [r4, #32]
    4f24:	cmp	r3, #12
    4f26:	bhi.w	5170 <MTPD::loop()+0x288>
    4f2a:	ldr	r1, [pc, #804]	; (5250 <MTPD::loop()+0x368>)
    4f2c:	ldr	r0, [pc, #792]	; (5248 <MTPD::loop()+0x360>)
    4f2e:	bl	a3a0 <Print::printf(char const*, ...)>

        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
        int p2 = CONTAINER->params[1];
        int p3 = CONTAINER->params[2];
        int id = CONTAINER->transaction_id;
    4f32:	ldr	r3, [r4, #40]	; 0x28
        int typ= CONTAINER->type;
        //TID=id;

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds
    4f34:	ldrh	r5, [r4, #36]	; 0x24
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
        int typ= CONTAINER->type;
        //TID=id;

        int return_code =0x2001; //OK use as default value
    4f36:	movw	r1, #8197	; 0x2005
    4f3a:	movw	r2, #8193	; 0x2001

        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
        int p2 = CONTAINER->params[1];
        int p3 = CONTAINER->params[2];
        int id = CONTAINER->transaction_id;
    4f3e:	mov	r6, r3
    4f40:	str	r3, [sp, #20]

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    4f42:	movw	r0, #4108	; 0x100c
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
        int typ= CONTAINER->type;
        //TID=id;

        int return_code =0x2001; //OK use as default value
    4f46:	cmp	r5, #2
    4f48:	ite	eq
    4f4a:	moveq	r5, r1
    4f4c:	movne	r5, r2
    void loop(void)
    { if(!usb_mtp_available()) return;
      if(fetch_packet(rx_data_buffer))
      { printContainer(); // to switch on set debug to 1 at beginning of file

        int op = CONTAINER->op;
    4f4e:	ldrh	r3, [r4, #38]	; 0x26
        int p1 = CONTAINER->params[0];
        int p2 = CONTAINER->params[1];
        int p3 = CONTAINER->params[2];
        int id = CONTAINER->transaction_id;
    4f50:	mov	lr, r6
      if(fetch_packet(rx_data_buffer))
      { printContainer(); // to switch on set debug to 1 at beginning of file

        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
        int p2 = CONTAINER->params[1];
    4f52:	ldr.w	sl, [r4, #48]	; 0x30
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
        int typ= CONTAINER->type;
        //TID=id;

        int return_code =0x2001; //OK use as default value
    4f56:	str	r5, [sp, #24]

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    4f58:	cmp	r3, r0
    { if(!usb_mtp_available()) return;
      if(fetch_packet(rx_data_buffer))
      { printContainer(); // to switch on set debug to 1 at beginning of file

        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
    4f5a:	ldr	r5, [r4, #44]	; 0x2c
        int p2 = CONTAINER->params[1];
        int p3 = CONTAINER->params[2];
    4f5c:	ldr.w	r8, [r4, #52]	; 0x34
    { if(!usb_mtp_available()) return;
      if(fetch_packet(rx_data_buffer))
      { printContainer(); // to switch on set debug to 1 at beginning of file

        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
    4f60:	str	r5, [sp, #16]
        int p2 = CONTAINER->params[1];
        int p3 = CONTAINER->params[2];
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
    4f62:	ldr	r7, [r4, #32]

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    4f64:	beq.w	55da <MTPD::loop()+0x6f2>
    4f68:	bhi.n	4fae <MTPD::loop()+0xc6>
    4f6a:	movw	r2, #4101	; 0x1005
    4f6e:	cmp	r3, r2
    4f70:	beq.w	5422 <MTPD::loop()+0x53a>
    4f74:	bls.w	50d6 <MTPD::loop()+0x1ee>
    4f78:	movw	r2, #4104	; 0x1008
    4f7c:	cmp	r3, r2
    4f7e:	beq.w	56ea <MTPD::loop()+0x802>
    4f82:	bhi.w	51c0 <MTPD::loop()+0x2d8>
    4f86:	movw	r2, #4102	; 0x1006
    4f8a:	cmp	r3, r2
    4f8c:	beq.w	56c2 <MTPD::loop()+0x7da>
    4f90:	movw	r2, #4103	; 0x1007
    4f94:	cmp	r3, r2
    4f96:	bne.w	56a8 <MTPD::loop()+0x7c0>
                p1 = GetNumObjects(p1, p3);
            }
            break;

          case 0x1007:  // GetObjectHandles
            if (p2) 
    4f9a:	cmp.w	sl, #0
    4f9e:	beq.w	5c4c <MTPD::loop()+0xd64>
    4fa2:	ldr	r0, [sp, #16]
    4fa4:	add.w	r5, r4, #544	; 0x220
    4fa8:	movw	r2, #8212	; 0x2014
    4fac:	b.n	4fe4 <MTPD::loop()+0xfc>

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    4fae:	movw	r0, #4122	; 0x101a
    4fb2:	cmp	r3, r0
    4fb4:	beq.w	54d2 <MTPD::loop()+0x5ea>
    4fb8:	bhi.n	5010 <MTPD::loop()+0x128>
    4fba:	movw	r2, #4116	; 0x1014
    4fbe:	cmp	r3, r2
    4fc0:	beq.w	55f4 <MTPD::loop()+0x70c>
    4fc4:	bhi.w	51a0 <MTPD::loop()+0x2b8>
    4fc8:	movw	r2, #4109	; 0x100d
    4fcc:	cmp	r3, r2
    4fce:	beq.w	56b4 <MTPD::loop()+0x7cc>
    4fd2:	movw	r2, #4112	; 0x1010
    4fd6:	cmp	r3, r2
    4fd8:	bne.w	56a8 <MTPD::loop()+0x7c0>
              TRANSMIT(GetDevicePropValue(p1));
              break;

          case 0x1010:  // Reset
              return_code = 0x2005;
              break;
    4fdc:	ldr	r0, [sp, #16]
    4fde:	mov	r2, r1
    4fe0:	add.w	r5, r4, #544	; 0x220
              return_code = 0x2005;  // operation not supported
              break;
        }
        if(return_code)
        {
            CONTAINER->type=3;
    4fe4:	movs	r3, #3
            CONTAINER->len=len;
            CONTAINER->op=return_code;
    4fe6:	strh	r2, [r4, #38]	; 0x26
            CONTAINER->transaction_id=id;
    4fe8:	ldr	r2, [sp, #20]
            CONTAINER->params[0]=p1;
    4fea:	str	r0, [r4, #44]	; 0x2c
            #if DEBUG >1
              printContainer(); // to switch on set debug to 2 at beginning of file
            #endif

            memcpy(tx_data_buffer,rx_data_buffer,len);
    4fec:	mov	r0, r5
        if(return_code)
        {
            CONTAINER->type=3;
            CONTAINER->len=len;
            CONTAINER->op=return_code;
            CONTAINER->transaction_id=id;
    4fee:	str	r2, [r4, #40]	; 0x28
            CONTAINER->params[0]=p1;
            #if DEBUG >1
              printContainer(); // to switch on set debug to 2 at beginning of file
            #endif

            memcpy(tx_data_buffer,rx_data_buffer,len);
    4ff0:	mov	r2, r7
              break;
        }
        if(return_code)
        {
            CONTAINER->type=3;
            CONTAINER->len=len;
    4ff2:	str	r7, [r4, #32]
            CONTAINER->params[0]=p1;
            #if DEBUG >1
              printContainer(); // to switch on set debug to 2 at beginning of file
            #endif

            memcpy(tx_data_buffer,rx_data_buffer,len);
    4ff4:	ldr	r1, [sp, #12]
              return_code = 0x2005;  // operation not supported
              break;
        }
        if(return_code)
        {
            CONTAINER->type=3;
    4ff6:	strh	r3, [r4, #36]	; 0x24
            CONTAINER->params[0]=p1;
            #if DEBUG >1
              printContainer(); // to switch on set debug to 2 at beginning of file
            #endif

            memcpy(tx_data_buffer,rx_data_buffer,len);
    4ff8:	bl	80b4 <memcpy>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    4ffc:	movs	r2, #60	; 0x3c
    4ffe:	mov	r1, r7
    5000:	mov	r0, r5
    5002:	bl	a000 <usb_mtp_send>
    5006:	cmp	r0, #0
    5008:	ble.n	4ffc <MTPD::loop()+0x114>

            memcpy(tx_data_buffer,rx_data_buffer,len);
            push_packet(tx_data_buffer,len); // for acknowledge use rx_data_buffer
        }
      }
    }
    500a:	add	sp, #116	; 0x74
    500c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    5010:	movw	r2, #38914	; 0x9802
    5014:	cmp	r3, r2
    5016:	beq.w	5334 <MTPD::loop()+0x44c>
    501a:	bhi.w	51ec <MTPD::loop()+0x304>
    501e:	movw	r2, #4123	; 0x101b
    5022:	cmp	r3, r2
    5024:	beq.w	550e <MTPD::loop()+0x626>
    5028:	movw	r2, #38913	; 0x9801
    502c:	cmp	r3, r2
    502e:	bne.w	56a8 <MTPD::loop()+0x7c0>
  }

    void getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    5032:	ldr	r1, [pc, #544]	; (5254 <MTPD::loop()+0x36c>)
          case 0x101B:  // GetPartialObject
//              TRANSMIT1(GetPartialObject(p1,p2,p3));
              break;

          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
    5034:	movs	r2, #1
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    5036:	movs	r3, #4
    5038:	add.w	r8, r4, #1056	; 0x420
  }

    void getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    503c:	ldr	r1, [r1, #0]
    503e:	add.w	r5, r4, #544	; 0x220
          case 0x101B:  // GetPartialObject
//              TRANSMIT1(GetPartialObject(p1,p2,p3));
              break;

          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
    5042:	strb	r2, [r4, #0]
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    5044:	str	r3, [r4, #4]
  }

    void getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    5046:	cmp	r1, #0
    5048:	beq.w	6104 <MTPD::loop()+0x121c>
    504c:	ldr	r1, [pc, #520]	; (5258 <MTPD::loop()+0x370>)
    504e:	movs	r0, #0
    5050:	ldr	r6, [pc, #520]	; (525c <MTPD::loop()+0x374>)
    5052:	str	r1, [sp, #28]
    5054:	mov	sl, r0
    5056:	movw	r1, #56321	; 0xdc01
    505a:	str	r7, [sp, #32]
    505c:	b.n	507a <MTPD::loop()+0x192>
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    505e:	adds	r3, #2
    5060:	str	r3, [r4, #4]
  }

    void getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    5062:	ldr	r2, [pc, #496]	; (5254 <MTPD::loop()+0x36c>)
    5064:	add.w	sl, sl, #1
    5068:	ldr	r2, [r2, #0]
    506a:	cmp	r2, sl
    506c:	bls.w	592c <MTPD::loop()+0xa44>
    5070:	ldr	r2, [sp, #28]
    5072:	ldrh.w	r1, [r2, #2]!
    5076:	str	r2, [sp, #28]
    5078:	ldrb	r2, [r4, #0]
    507a:	strh.w	r1, [sp, #78]	; 0x4e
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    507e:	cmp	r2, #0
    5080:	bne.n	505e <MTPD::loop()+0x176>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5082:	cmp	r3, #0
    5084:	beq.w	58e4 <MTPD::loop()+0x9fc>
    5088:	ldr	r0, [r6, #0]
        write_length_ += len;
    508a:	adds	r3, #2
        
        const char * src=data;
    508c:	add.w	r9, sp, #78	; 0x4e
        //
        int pos = 0; // into data
    5090:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    5092:	str	r3, [r4, #4]
    5094:	b.n	509e <MTPD::loop()+0x1b6>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    5096:	cmp	r7, #1
    5098:	bgt.w	51e8 <MTPD::loop()+0x300>
    509c:	ldr	r0, [r6, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    509e:	rsb	fp, r0, r8
    50a2:	rsb	r3, r7, #2
          memcpy(dst,src,to_copy);
    50a6:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    50a8:	cmp	fp, r3
    50aa:	it	ge
    50ac:	movge	fp, r3
          memcpy(dst,src,to_copy);
    50ae:	mov	r2, fp
          pos += to_copy;
    50b0:	add	r7, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    50b2:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    50b6:	ldr	r3, [r6, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    50b8:	add	r9, fp
          dst += to_copy;
    50ba:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    50bc:	cmp	r3, r8
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    50be:	str	r3, [r6, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    50c0:	bne.n	5096 <MTPD::loop()+0x1ae>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    50c2:	movs	r2, #60	; 0x3c
    50c4:	mov.w	r1, #512	; 0x200
    50c8:	mov	r0, r5
    50ca:	bl	a000 <usb_mtp_send>
    50ce:	cmp	r0, #0
    50d0:	ble.n	50c2 <MTPD::loop()+0x1da>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    50d2:	str	r5, [r6, #0]
    50d4:	b.n	5096 <MTPD::loop()+0x1ae>

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    50d6:	movw	r2, #4098	; 0x1002
    50da:	cmp	r3, r2
    50dc:	beq.w	5410 <MTPD::loop()+0x528>
    50e0:	bls.w	52a6 <MTPD::loop()+0x3be>
    50e4:	movw	r2, #4099	; 0x1003
    50e8:	cmp	r3, r2
    50ea:	beq.w	550e <MTPD::loop()+0x626>
    50ee:	movw	r2, #4100	; 0x1004
    50f2:	cmp	r3, r2
    50f4:	bne.w	56a8 <MTPD::loop()+0x7c0>

          case 0x1003:  // CloseSession
            break;

          case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
    50f8:	movs	r2, #0
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    50fa:	add.w	r5, r4, #544	; 0x220

          case 0x1003:  // CloseSession
            break;

          case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
    50fe:	mov.w	ip, #20
    5102:	mov.w	lr, #2
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5106:	ldr	r6, [pc, #340]	; (525c <MTPD::loop()+0x374>)
        write_length_ += len;
    5108:	movs	r1, #12

          case 0x1003:  // CloseSession
            break;

          case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
    510a:	strh.w	r3, [sp, #106]	; 0x6a
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
    510e:	mov	r8, r2

          case 0x1003:  // CloseSession
            break;

          case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
    5110:	ldr	r3, [sp, #20]
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    5112:	mov	r0, r5

          case 0x1003:  // CloseSession
            break;

          case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
    5114:	strb	r2, [r4, #0]
    5116:	add.w	r9, r4, #1056	; 0x420
    511a:	str	r3, [sp, #108]	; 0x6c
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    511c:	add.w	sl, sp, #100	; 0x64

          case 0x1003:  // CloseSession
            break;

          case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
    5120:	str.w	ip, [sp, #100]	; 0x64
    5124:	strh.w	lr, [sp, #104]	; 0x68
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5128:	str	r5, [r6, #0]
        write_length_ += len;
    512a:	str	r1, [r4, #4]
    512c:	b.n	5138 <MTPD::loop()+0x250>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    512e:	cmp.w	r8, #11
    5132:	bgt.w	58ec <MTPD::loop()+0xa04>
    5136:	ldr	r0, [r6, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5138:	rsb	fp, r0, r9
    513c:	rsb	r3, r8, #12
          memcpy(dst,src,to_copy);
    5140:	mov	r1, sl
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5142:	cmp	fp, r3
    5144:	it	ge
    5146:	movge	fp, r3
          memcpy(dst,src,to_copy);
    5148:	mov	r2, fp
          pos += to_copy;
    514a:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    514c:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5150:	ldr	r3, [r6, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    5152:	add	sl, fp
          dst += to_copy;
    5154:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5156:	cmp	r3, r9
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5158:	str	r3, [r6, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    515a:	bne.n	512e <MTPD::loop()+0x246>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    515c:	movs	r2, #60	; 0x3c
    515e:	mov.w	r1, #512	; 0x200
    5162:	mov	r0, r5
    5164:	bl	a000 <usb_mtp_send>
    5168:	cmp	r0, #0
    516a:	ble.n	515c <MTPD::loop()+0x274>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    516c:	str	r5, [r6, #0]
    516e:	b.n	512e <MTPD::loop()+0x246>

public:
    void loop(void)
    { if(!usb_mtp_available()) return;
      if(fetch_packet(rx_data_buffer))
      { printContainer(); // to switch on set debug to 1 at beginning of file
    5170:	ldr	r2, [r4, #44]	; 0x2c
    5172:	ldr	r1, [pc, #236]	; (5260 <MTPD::loop()+0x378>)
    5174:	ldr	r0, [pc, #208]	; (5248 <MTPD::loop()+0x360>)
    5176:	bl	a3a0 <Print::printf(char const*, ...)>
    517a:	ldr	r3, [r4, #32]
    517c:	cmp	r3, #16
    517e:	bls.w	4f2a <MTPD::loop()+0x42>
    5182:	ldr	r2, [r4, #48]	; 0x30
    5184:	ldr	r1, [pc, #216]	; (5260 <MTPD::loop()+0x378>)
    5186:	ldr	r0, [pc, #192]	; (5248 <MTPD::loop()+0x360>)
    5188:	bl	a3a0 <Print::printf(char const*, ...)>
    518c:	ldr	r3, [r4, #32]
    518e:	cmp	r3, #20
    5190:	bls.w	4f2a <MTPD::loop()+0x42>
    5194:	ldr	r2, [r4, #52]	; 0x34
    5196:	ldr	r1, [pc, #200]	; (5260 <MTPD::loop()+0x378>)
    5198:	ldr	r0, [pc, #172]	; (5248 <MTPD::loop()+0x360>)
    519a:	bl	a3a0 <Print::printf(char const*, ...)>
    519e:	b.n	4f2a <MTPD::loop()+0x42>

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    51a0:	movw	r2, #4117	; 0x1015
    51a4:	cmp	r3, r2
    51a6:	beq.w	5778 <MTPD::loop()+0x890>
    51aa:	movw	r2, #4121	; 0x1019
    51ae:	cmp	r3, r2
    51b0:	bne.w	56a8 <MTPD::loop()+0x7c0>

          case 0x1019:  // MoveObject
              return_code = 0x2005;
//              return_code = moveObject(p1,p2,p3);
              len = 12;
              break;
    51b4:	ldr	r0, [sp, #16]
    51b6:	mov	r2, r1
    51b8:	add.w	r5, r4, #544	; 0x220
    51bc:	movs	r7, #12
    51be:	b.n	4fe4 <MTPD::loop()+0xfc>

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    51c0:	movw	r2, #4105	; 0x1009
    51c4:	cmp	r3, r2
    51c6:	beq.w	551a <MTPD::loop()+0x632>
    51ca:	movw	r2, #4107	; 0x100b
    51ce:	cmp	r3, r2
    51d0:	bne.w	56a8 <MTPD::loop()+0x7c0>
          case 0x1009:  // GetObject
            TRANSMIT(GetObject(p1));
            break;

          case 0x100B:  // DeleteObject
              if (p2) {
    51d4:	ldr	r0, [sp, #16]
    51d6:	add.w	r5, r4, #544	; 0x220
    51da:	cmp.w	sl, #0
    51de:	beq.w	5be4 <MTPD::loop()+0xcfc>
    51e2:	movw	r2, #8212	; 0x2014
    51e6:	b.n	4fe4 <MTPD::loop()+0xfc>
    51e8:	ldr	r3, [r4, #4]
    51ea:	b.n	5062 <MTPD::loop()+0x17a>

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    51ec:	movw	r2, #38915	; 0x9803
    51f0:	cmp	r3, r2
    51f2:	bne.w	5504 <MTPD::loop()+0x61c>
          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
              break;

          case 0x9803:  // getObjectPropertyValue
              TRANSMIT(getObjectPropValue(p1,p2));
    51f6:	movs	r3, #1
    51f8:	mov.w	r8, #0
    51fc:	mov	r2, sl
    51fe:	ldr	r1, [sp, #16]
    5200:	mov	r0, r4
    5202:	strb	r3, [r4, #0]
    5204:	str.w	r8, [r4, #4]
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5208:	add.w	r5, r4, #544	; 0x220
          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
              break;

          case 0x9803:  // getObjectPropertyValue
              TRANSMIT(getObjectPropValue(p1,p2));
    520c:	bl	4404 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    5210:	ldr	r6, [r4, #4]
    5212:	movs	r0, #2
    5214:	ldrh	r1, [r4, #38]	; 0x26
    5216:	add.w	r3, r6, #12
    521a:	ldr	r2, [r4, #40]	; 0x28
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    521c:	ldr	r6, [pc, #60]	; (525c <MTPD::loop()+0x374>)
        write_length_ += len;
    521e:	mov.w	lr, #12
          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
              break;

          case 0x9803:  // getObjectPropertyValue
              TRANSMIT(getObjectPropValue(p1,p2));
    5222:	strb.w	r8, [r4]
    5226:	add.w	fp, r4, #1056	; 0x420
    522a:	strh.w	r0, [sp, #104]	; 0x68
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    522e:	add.w	r9, sp, #100	; 0x64
          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
              break;

          case 0x9803:  // getObjectPropertyValue
              TRANSMIT(getObjectPropValue(p1,p2));
    5232:	str	r3, [sp, #28]
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    5234:	mov	r0, r5
          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
              break;

          case 0x9803:  // getObjectPropertyValue
              TRANSMIT(getObjectPropValue(p1,p2));
    5236:	str	r3, [sp, #100]	; 0x64
    5238:	strh.w	r1, [sp, #106]	; 0x6a
    523c:	str	r2, [sp, #108]	; 0x6c
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    523e:	str	r5, [r6, #0]
        write_length_ += len;
    5240:	str.w	lr, [r4, #4]
    5244:	str	r4, [sp, #32]
    5246:	b.n	526e <MTPD::loop()+0x386>
    5248:	.word	0x20001388
    524c:	.word	0x20000bf0
    5250:	.word	0x20000c04
    5254:	.word	0x20001934
    5258:	.word	0x20000404
    525c:	.word	0x20004604
    5260:	.word	0x20000c00
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    5264:	cmp.w	r8, #11
    5268:	bgt.w	54dc <MTPD::loop()+0x5f4>
    526c:	ldr	r0, [r6, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    526e:	rsb	r2, r0, fp
    5272:	rsb	r3, r8, #12
          memcpy(dst,src,to_copy);
    5276:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5278:	cmp	r2, r3
    527a:	it	ge
    527c:	movge	r2, r3
    527e:	mov	r4, r2
          memcpy(dst,src,to_copy);
          pos += to_copy;
    5280:	add	r8, r2
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    5282:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5286:	ldr	r2, [r6, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    5288:	add	r9, r4
          dst += to_copy;
    528a:	adds	r3, r2, r4
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    528c:	cmp	r3, fp
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    528e:	str	r3, [r6, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5290:	bne.n	5264 <MTPD::loop()+0x37c>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5292:	movs	r2, #60	; 0x3c
    5294:	mov.w	r1, #512	; 0x200
    5298:	mov	r0, r5
    529a:	bl	a000 <usb_mtp_send>
    529e:	cmp	r0, #0
    52a0:	ble.n	5292 <MTPD::loop()+0x3aa>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    52a2:	str	r5, [r6, #0]
    52a4:	b.n	5264 <MTPD::loop()+0x37c>

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    52a6:	movw	r2, #4097	; 0x1001
    52aa:	cmp	r3, r2
    52ac:	bne.w	56a8 <MTPD::loop()+0x7c0>
        {
          case 0x1001:
            TRANSMIT(WriteDescriptor());
    52b0:	movs	r6, #0
    52b2:	movs	r3, #1
    52b4:	mov	r0, r4
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    52b6:	add.w	r5, r4, #544	; 0x220
        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
        {
          case 0x1001:
            TRANSMIT(WriteDescriptor());
    52ba:	str	r6, [r4, #4]
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
    52bc:	mov	r8, r6
        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
        {
          case 0x1001:
            TRANSMIT(WriteDescriptor());
    52be:	strb	r3, [r4, #0]
    52c0:	add.w	sl, r4, #1056	; 0x420
    52c4:	bl	4c0 <MTPD::WriteDescriptor()>
    52c8:	ldr	r3, [r4, #4]
    52ca:	strb	r6, [r4, #0]
    52cc:	movs	r0, #2
    52ce:	adds	r3, #12
    52d0:	ldrh	r1, [r4, #38]	; 0x26
    52d2:	ldr	r2, [r4, #40]	; 0x28
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    52d4:	add.w	r9, sp, #100	; 0x64
        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
        {
          case 0x1001:
            TRANSMIT(WriteDescriptor());
    52d8:	str	r3, [sp, #28]
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    52da:	movs	r3, #12
        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
        {
          case 0x1001:
            TRANSMIT(WriteDescriptor());
    52dc:	ldr	r6, [sp, #28]
    52de:	strh.w	r0, [sp, #104]	; 0x68
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    52e2:	mov	r0, r5
        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
        {
          case 0x1001:
            TRANSMIT(WriteDescriptor());
    52e4:	str	r6, [sp, #100]	; 0x64
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    52e6:	ldr	r6, [pc, #768]	; (55e8 <MTPD::loop()+0x700>)
        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
        {
          case 0x1001:
            TRANSMIT(WriteDescriptor());
    52e8:	strh.w	r1, [sp, #106]	; 0x6a
    52ec:	str	r2, [sp, #108]	; 0x6c
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    52ee:	str	r3, [r4, #4]
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    52f0:	str	r5, [r6, #0]
    52f2:	b.n	52fc <MTPD::loop()+0x414>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    52f4:	cmp.w	r8, #11
    52f8:	bgt.n	53c6 <MTPD::loop()+0x4de>
    52fa:	ldr	r0, [r6, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    52fc:	rsb	fp, r0, sl
    5300:	rsb	r3, r8, #12
          memcpy(dst,src,to_copy);
    5304:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5306:	cmp	fp, r3
    5308:	it	ge
    530a:	movge	fp, r3
          memcpy(dst,src,to_copy);
    530c:	mov	r2, fp
          pos += to_copy;
    530e:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    5310:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5314:	ldr	r3, [r6, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    5316:	add	r9, fp
          dst += to_copy;
    5318:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    531a:	cmp	r3, sl
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    531c:	str	r3, [r6, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    531e:	bne.n	52f4 <MTPD::loop()+0x40c>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5320:	movs	r2, #60	; 0x3c
    5322:	mov.w	r1, #512	; 0x200
    5326:	mov	r0, r5
    5328:	bl	a000 <usb_mtp_send>
    532c:	cmp	r0, #0
    532e:	ble.n	5320 <MTPD::loop()+0x438>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    5330:	str	r5, [r6, #0]
    5332:	b.n	52f4 <MTPD::loop()+0x40c>
          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
              break;

          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
    5334:	movs	r3, #1
    5336:	mov.w	r8, #0
    533a:	mov	r2, sl
    533c:	ldr	r1, [sp, #16]
    533e:	mov	r0, r4
    5340:	strb	r3, [r4, #0]
    5342:	str.w	r8, [r4, #4]
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5346:	add.w	r5, r4, #544	; 0x220
          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
              break;

          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
    534a:	bl	26b4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    534e:	ldr	r6, [r4, #4]
    5350:	movs	r0, #2
    5352:	ldrh	r1, [r4, #38]	; 0x26
    5354:	add.w	r3, r6, #12
    5358:	ldr	r2, [r4, #40]	; 0x28
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    535a:	ldr	r6, [pc, #652]	; (55e8 <MTPD::loop()+0x700>)
        write_length_ += len;
    535c:	mov.w	lr, #12
          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
              break;

          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
    5360:	strb.w	r8, [r4]
    5364:	add.w	fp, r4, #1056	; 0x420
    5368:	strh.w	r0, [sp, #104]	; 0x68
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    536c:	add.w	r9, sp, #100	; 0x64
          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
              break;

          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
    5370:	str	r3, [sp, #28]
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    5372:	mov	r0, r5
          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
              break;

          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
    5374:	str	r3, [sp, #100]	; 0x64
    5376:	strh.w	r1, [sp, #106]	; 0x6a
    537a:	str	r2, [sp, #108]	; 0x6c
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    537c:	str	r5, [r6, #0]
        write_length_ += len;
    537e:	str.w	lr, [r4, #4]
    5382:	str	r4, [sp, #32]
    5384:	b.n	538e <MTPD::loop()+0x4a6>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    5386:	cmp.w	r8, #11
    538a:	bgt.n	53ea <MTPD::loop()+0x502>
    538c:	ldr	r0, [r6, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    538e:	rsb	r2, r0, fp
    5392:	rsb	r3, r8, #12
          memcpy(dst,src,to_copy);
    5396:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5398:	cmp	r2, r3
    539a:	it	ge
    539c:	movge	r2, r3
    539e:	mov	r4, r2
          memcpy(dst,src,to_copy);
          pos += to_copy;
    53a0:	add	r8, r2
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    53a2:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    53a6:	ldr	r2, [r6, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    53a8:	add	r9, r4
          dst += to_copy;
    53aa:	adds	r3, r2, r4
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    53ac:	cmp	r3, fp
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    53ae:	str	r3, [r6, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    53b0:	bne.n	5386 <MTPD::loop()+0x49e>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    53b2:	movs	r2, #60	; 0x3c
    53b4:	mov.w	r1, #512	; 0x200
    53b8:	mov	r0, r5
    53ba:	bl	a000 <usb_mtp_send>
    53be:	cmp	r0, #0
    53c0:	ble.n	53b2 <MTPD::loop()+0x4ca>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    53c2:	str	r5, [r6, #0]
    53c4:	b.n	5386 <MTPD::loop()+0x49e>
        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
        {
          case 0x1001:
            TRANSMIT(WriteDescriptor());
    53c6:	ldr	r3, [sp, #28]
    53c8:	mov	r0, r4
    53ca:	ubfx	r6, r3, #0, #9
    53ce:	bl	4c0 <MTPD::WriteDescriptor()>
    53d2:	cbz	r6, 53e2 <MTPD::loop()+0x4fa>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    53d4:	movs	r2, #60	; 0x3c
    53d6:	mov	r1, r6
    53d8:	mov	r0, r5
    53da:	bl	a000 <usb_mtp_send>
    53de:	cmp	r0, #0
    53e0:	ble.n	53d4 <MTPD::loop()+0x4ec>
    53e2:	ldrh.w	r2, [sp, #24]
              TRANSMIT(getObjectPropDesc(p1,p2));
              break;

          case 0x9803:  // getObjectPropertyValue
              TRANSMIT(getObjectPropValue(p1,p2));
              break;
    53e6:	ldr	r0, [sp, #16]
    53e8:	b.n	4fe4 <MTPD::loop()+0xfc>
          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
              break;

          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
    53ea:	ldr	r3, [sp, #28]
    53ec:	mov	r2, sl
    53ee:	ldr	r4, [sp, #32]
    53f0:	ubfx	r6, r3, #0, #9
    53f4:	ldr	r1, [sp, #16]
    53f6:	mov	r0, r4
    53f8:	bl	26b4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    53fc:	cmp	r6, #0
    53fe:	beq.n	53e2 <MTPD::loop()+0x4fa>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5400:	movs	r2, #60	; 0x3c
    5402:	mov	r1, r6
    5404:	mov	r0, r5
    5406:	bl	a000 <usb_mtp_send>
    540a:	cmp	r0, #0
    540c:	ble.n	5400 <MTPD::loop()+0x518>
    540e:	b.n	53e2 <MTPD::loop()+0x4fa>
      return mFS_copy(handle,store1,newHandle);
    }
*/    
    void openSession(uint32_t id)
    {
      sessionID_ = id;
    5410:	ldr	r1, [sp, #16]
    5412:	add.w	r5, r4, #544	; 0x220
    5416:	ldr	r3, [pc, #468]	; (55ec <MTPD::loop()+0x704>)
    5418:	ldrh.w	r2, [sp, #24]
    541c:	mov	r0, r1
    541e:	str	r1, [r3, #0]
    5420:	b.n	4fe4 <MTPD::loop()+0xfc>
          case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
            break;

          case 0x1005:  // GetStorageInfo
            TRANSMIT(GetStorageInfo(p1));
    5422:	mov.w	r9, #0
    5426:	movs	r3, #1
    5428:	ldr	r1, [sp, #16]
    542a:	mov	r0, r4
    542c:	str.w	r9, [r4, #4]
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5430:	add.w	r5, r4, #544	; 0x220
          case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
            break;

          case 0x1005:  // GetStorageInfo
            TRANSMIT(GetStorageInfo(p1));
    5434:	strb	r3, [r4, #0]
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
    5436:	mov	r8, r9
          case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
            break;

          case 0x1005:  // GetStorageInfo
            TRANSMIT(GetStorageInfo(p1));
    5438:	bl	1524 <MTPD::GetStorageInfo(unsigned long)>
    543c:	ldr	r3, [r4, #4]
    543e:	movs	r0, #2
    5440:	ldrh	r1, [r4, #38]	; 0x26
    5442:	adds	r3, #12
    5444:	ldr	r2, [r4, #40]	; 0x28
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5446:	ldr	r6, [pc, #416]	; (55e8 <MTPD::loop()+0x700>)
        write_length_ += len;
    5448:	mov.w	lr, #12
          case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
            break;

          case 0x1005:  // GetStorageInfo
            TRANSMIT(GetStorageInfo(p1));
    544c:	strb.w	r9, [r4]
    5450:	add.w	sl, r4, #1056	; 0x420
    5454:	strh.w	r0, [sp, #104]	; 0x68
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    5458:	add.w	r9, sp, #100	; 0x64
          case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
            break;

          case 0x1005:  // GetStorageInfo
            TRANSMIT(GetStorageInfo(p1));
    545c:	str	r3, [sp, #28]
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    545e:	mov	r0, r5
          case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
            break;

          case 0x1005:  // GetStorageInfo
            TRANSMIT(GetStorageInfo(p1));
    5460:	str	r3, [sp, #100]	; 0x64
    5462:	strh.w	r1, [sp, #106]	; 0x6a
    5466:	str	r2, [sp, #108]	; 0x6c
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5468:	str	r5, [r6, #0]
        write_length_ += len;
    546a:	str.w	lr, [r4, #4]
    546e:	b.n	5478 <MTPD::loop()+0x590>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    5470:	cmp.w	r8, #11
    5474:	bgt.n	54b0 <MTPD::loop()+0x5c8>
    5476:	ldr	r0, [r6, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5478:	rsb	fp, r0, sl
    547c:	rsb	r3, r8, #12
          memcpy(dst,src,to_copy);
    5480:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5482:	cmp	fp, r3
    5484:	it	ge
    5486:	movge	fp, r3
          memcpy(dst,src,to_copy);
    5488:	mov	r2, fp
          pos += to_copy;
    548a:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    548c:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5490:	ldr	r3, [r6, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    5492:	add	r9, fp
          dst += to_copy;
    5494:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5496:	cmp	r3, sl
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5498:	str	r3, [r6, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    549a:	bne.n	5470 <MTPD::loop()+0x588>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    549c:	movs	r2, #60	; 0x3c
    549e:	mov.w	r1, #512	; 0x200
    54a2:	mov	r0, r5
    54a4:	bl	a000 <usb_mtp_send>
    54a8:	cmp	r0, #0
    54aa:	ble.n	549c <MTPD::loop()+0x5b4>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    54ac:	str	r5, [r6, #0]
    54ae:	b.n	5470 <MTPD::loop()+0x588>
          case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
            break;

          case 0x1005:  // GetStorageInfo
            TRANSMIT(GetStorageInfo(p1));
    54b0:	ldr	r3, [sp, #28]
    54b2:	mov	r0, r4
    54b4:	ldr	r1, [sp, #16]
    54b6:	ubfx	r6, r3, #0, #9
    54ba:	bl	1524 <MTPD::GetStorageInfo(unsigned long)>
    54be:	cmp	r6, #0
    54c0:	beq.n	53e2 <MTPD::loop()+0x4fa>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    54c2:	movs	r2, #60	; 0x3c
    54c4:	mov	r1, r6
    54c6:	mov	r0, r5
    54c8:	bl	a000 <usb_mtp_send>
    54cc:	cmp	r0, #0
    54ce:	ble.n	54c2 <MTPD::loop()+0x5da>
    54d0:	b.n	53e2 <MTPD::loop()+0x4fa>

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    54d2:	mov	r0, r1
    54d4:	add.w	r5, r4, #544	; 0x220
    54d8:	movs	r7, #16
    54da:	b.n	4fe4 <MTPD::loop()+0xfc>
          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
              break;

          case 0x9803:  // getObjectPropertyValue
              TRANSMIT(getObjectPropValue(p1,p2));
    54dc:	ldr	r3, [sp, #28]
    54de:	mov	r2, sl
    54e0:	ldr	r4, [sp, #32]
    54e2:	ubfx	r6, r3, #0, #9
    54e6:	ldr	r1, [sp, #16]
    54e8:	mov	r0, r4
    54ea:	bl	4404 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    54ee:	cmp	r6, #0
    54f0:	beq.w	53e2 <MTPD::loop()+0x4fa>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    54f4:	movs	r2, #60	; 0x3c
    54f6:	mov	r1, r6
    54f8:	mov	r0, r5
    54fa:	bl	a000 <usb_mtp_send>
    54fe:	cmp	r0, #0
    5500:	ble.n	54f4 <MTPD::loop()+0x60c>
    5502:	b.n	53e2 <MTPD::loop()+0x4fa>

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    5504:	movw	r2, #38916	; 0x9804
    5508:	cmp	r3, r2
    550a:	bne.w	56a8 <MTPD::loop()+0x7c0>
    550e:	ldrh.w	r2, [sp, #24]
    5512:	add.w	r5, r4, #544	; 0x220
    5516:	ldr	r0, [sp, #16]
    5518:	b.n	4fe4 <MTPD::loop()+0xfc>
    551a:	ldr	r1, [pc, #212]	; (55f0 <MTPD::loop()+0x708>)
          case 0x1008:  // GetObjectInfo
            TRANSMIT(GetObjectInfo(p1));
            break;

          case 0x1009:  // GetObject
            TRANSMIT(GetObject(p1));
    551c:	movs	r3, #1
    551e:	movs	r2, #0
    5520:	mov	r0, r1
    5522:	str	r1, [sp, #28]
    5524:	strb	r3, [r4, #0]
    char * getName(uint32_t store) {return zFs_[store].getName();}

    uint32_t Info(uint32_t handle, char *filename, uint32_t *size, uint32_t *parent)
    { return zFs_[0].Info(handle, filename, size, parent);}

    uint32_t GetSize(uint32_t handle) {return zFs_[0].GetSize(handle);}
    5526:	ldr	r1, [sp, #16]
          case 0x1008:  // GetObjectInfo
            TRANSMIT(GetObjectInfo(p1));
            break;

          case 0x1009:  // GetObject
            TRANSMIT(GetObject(p1));
    5528:	str	r2, [r4, #4]
    char * getName(uint32_t store) {return zFs_[store].getName();}

    uint32_t Info(uint32_t handle, char *filename, uint32_t *size, uint32_t *parent)
    { return zFs_[0].Info(handle, filename, size, parent);}

    uint32_t GetSize(uint32_t handle) {return zFs_[0].GetSize(handle);}
    552a:	ldr	r0, [r0, #80]	; 0x50
    552c:	bl	6c54 <zeroFS_class::GetSize(unsigned long)>

    void GetObject(uint32_t object_id) 
    {
      uint32_t size = mFS.GetSize(object_id);

      if (write_get_length_) {
    5530:	ldrb	r3, [r4, #0]
    5532:	cmp	r3, #0
    5534:	bne.w	5bfc <MTPD::loop()+0xd14>
        uint32_t pos = 0; // into data
        uint32_t len = sizeof(MTPHeader);
        uint32_t sector = object_id;
        uint32_t count = size / 512;

        disk_pos=DISK_BUFFER_SIZE;
    5538:	movw	r1, #9248	; 0x2420
    553c:	mov.w	r2, #8192	; 0x2000
      } else 
      { 
        uint32_t pos = 0; // into data
        uint32_t len = sizeof(MTPHeader);
        uint32_t sector = object_id;
        uint32_t count = size / 512;
    5540:	lsrs	r5, r0, #9

        disk_pos=DISK_BUFFER_SIZE;
    5542:	str	r2, [r4, r1]
      } else 
      { 
        uint32_t pos = 0; // into data
        uint32_t len = sizeof(MTPHeader);
        uint32_t sector = object_id;
        uint32_t count = size / 512;
    5544:	mov	lr, r5

        disk_pos=DISK_BUFFER_SIZE;
        while(pos<size)
    5546:	cmp	r0, #0
    5548:	beq.w	61ba <MTPD::loop()+0x12d2>
    554c:	mov	fp, r2
    554e:	add.w	r9, r4, #544	; 0x220
    5552:	mov	sl, r3
    5554:	movw	r6, #9248	; 0x2420
    5558:	add.w	r3, r4, #1056	; 0x420
    { if(!usb_mtp_available()) return;
      if(fetch_packet(rx_data_buffer))
      { printContainer(); // to switch on set debug to 1 at beginning of file

        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
    555c:	ldr	r2, [sp, #16]
    555e:	add	r6, r4
    5560:	str	r7, [sp, #44]	; 0x2c
    5562:	mov	r5, fp
    5564:	str	r4, [sp, #52]	; 0x34
    5566:	str	r3, [sp, #40]	; 0x28
        uint32_t len = sizeof(MTPHeader);
        uint32_t sector = object_id;
        uint32_t count = size / 512;

        disk_pos=DISK_BUFFER_SIZE;
        while(pos<size)
    5568:	mov.w	r8, #12
    556c:	str	r3, [sp, #32]
    556e:	mov	r7, r0
    { if(!usb_mtp_available()) return;
      if(fetch_packet(rx_data_buffer))
      { printContainer(); // to switch on set debug to 1 at beginning of file

        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
    5570:	str	r2, [sp, #36]	; 0x24
    5572:	mov	r4, lr
    5574:	str.w	r9, [sp, #48]	; 0x30
    5578:	mov	fp, r3
    557a:	b.n	5584 <MTPD::loop()+0x69c>
        uint32_t len = sizeof(MTPHeader);
        uint32_t sector = object_id;
        uint32_t count = size / 512;

        disk_pos=DISK_BUFFER_SIZE;
        while(pos<size)
    557c:	cmp	r7, sl
    557e:	bls.w	5a5c <MTPD::loop()+0xb74>
    5582:	ldr	r5, [r6, #0]
        {
          if(disk_pos==DISK_BUFFER_SIZE)
    5584:	cmp.w	r5, #8192	; 0x2000
    5588:	beq.w	5852 <MTPD::loop()+0x96a>
    558c:	rsb	lr, r5, #8192	; 0x2000
            count-=MCOUNT;

            disk_pos=0;
          }

          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
    5590:	rsb	r2, r8, #512	; 0x200
    5594:	rsb	r3, sl, r7
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);

          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    5598:	add.w	r1, fp, r5
    559c:	add.w	r0, r9, r8
            count-=MCOUNT;

            disk_pos=0;
          }

          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
    55a0:	cmp	r2, r3
    55a2:	it	cs
    55a4:	movcs	r2, r3
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    55a6:	cmp	r2, lr
            count-=MCOUNT;

            disk_pos=0;
          }

          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
    55a8:	mov	r5, r2
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    55aa:	it	cs
    55ac:	movcs	r5, lr

          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    55ae:	mov	r2, r5
          disk_pos += to_copy;
          pos += to_copy;
          len += to_copy;
    55b0:	add	r8, r5
          }

          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);

          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    55b2:	bl	80b4 <memcpy>
          disk_pos += to_copy;
    55b6:	ldr	r3, [r6, #0]
          pos += to_copy;
    55b8:	add	sl, r5
          len += to_copy;

          if(len==MTP_TX_SIZE)
    55ba:	cmp.w	r8, #512	; 0x200

          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);

          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
          disk_pos += to_copy;
    55be:	add	r5, r3
    55c0:	str	r5, [r6, #0]
          pos += to_copy;
          len += to_copy;

          if(len==MTP_TX_SIZE)
    55c2:	bne.n	557c <MTPD::loop()+0x694>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    55c4:	movs	r2, #60	; 0x3c
    55c6:	mov.w	r1, #512	; 0x200
    55ca:	mov	r0, r9
    55cc:	bl	a000 <usb_mtp_send>
    55d0:	cmp	r0, #0
    55d2:	ble.n	55c4 <MTPD::loop()+0x6dc>
          pos += to_copy;
          len += to_copy;

          if(len==MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            len=0;
    55d4:	mov.w	r8, #0
    55d8:	b.n	557c <MTPD::loop()+0x694>
    55da:	ldrh.w	r2, [sp, #24]
    55de:	add.w	r5, r4, #544	; 0x220
//                                  p2); // parent

              CONTAINER->params[1]=p2;
              CONTAINER->params[2]=p3;
              len = 12 + 3 * 4;
              break;
    55e2:	ldr	r0, [sp, #16]
    55e4:	movs	r7, #24
    55e6:	b.n	4fe4 <MTPD::loop()+0xfc>
    55e8:	.word	0x20004604
    55ec:	.word	0x2000c718
    55f0:	.word	0x2000c650
        break;
    }
  }

  void GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    55f4:	movw	r2, #54274	; 0xd402
    55f8:	ldr	r1, [sp, #16]
//              if(!SendObject()) return_code = 0x2005;
              len = 12;
              break;

          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    55fa:	movs	r5, #0
    55fc:	movs	r6, #1
        break;
    }
  }

  void GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    55fe:	cmp	r1, r2
//              if(!SendObject()) return_code = 0x2005;
              len = 12;
              break;

          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    5600:	str	r5, [r4, #4]
    5602:	strb	r6, [r4, #0]
        break;
    }
  }

  void GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    5604:	bne.w	5bec <MTPD::loop()+0xd04>
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    5608:	movs	r3, #5
  void GetDevicePropValue(uint32_t prop) {
    switch (prop) {
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring(MTP_NAME);
    560a:	ldr	r1, [pc, #788]	; (5920 <MTPD::loop()+0xa38>)
    560c:	mov	r0, r4
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    560e:	str	r3, [r4, #4]
  void GetDevicePropValue(uint32_t prop) {
    switch (prop) {
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring(MTP_NAME);
    5610:	bl	270 <MTPD::writestring(char const*)>
    5614:	ldr	r1, [pc, #776]	; (5920 <MTPD::loop()+0xa38>)
    5616:	mov	r0, r4
    5618:	bl	270 <MTPD::writestring(char const*)>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    561c:	ldrb	r3, [r4, #0]
    561e:	strb.w	r5, [sp, #60]	; 0x3c
    5622:	cmp	r3, #0
    5624:	beq.w	5e5c <MTPD::loop()+0xf74>
      {
        write_length_ += len;
    5628:	ldr	r2, [r4, #4]
    562a:	ldrh	r3, [r4, #38]	; 0x26
    562c:	adds	r2, #13
    562e:	ldr	r0, [r4, #40]	; 0x28
    5630:	str	r2, [sp, #28]
//              if(!SendObject()) return_code = 0x2005;
              len = 12;
              break;

          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    5632:	movs	r2, #0
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5634:	add.w	r5, r4, #544	; 0x220
//              if(!SendObject()) return_code = 0x2005;
              len = 12;
              break;

          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    5638:	mov.w	lr, #2
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    563c:	ldr	r6, [pc, #740]	; (5924 <MTPD::loop()+0xa3c>)
        write_length_ += len;
    563e:	mov.w	ip, #12
//              if(!SendObject()) return_code = 0x2005;
              len = 12;
              break;

          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    5642:	ldr	r1, [sp, #28]
    5644:	str	r0, [sp, #108]	; 0x6c
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
    5646:	mov	r8, r2
//              if(!SendObject()) return_code = 0x2005;
              len = 12;
              break;

          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    5648:	strb	r2, [r4, #0]
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    564a:	mov	r0, r5
//              if(!SendObject()) return_code = 0x2005;
              len = 12;
              break;

          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    564c:	str	r1, [sp, #100]	; 0x64
    564e:	add.w	r9, r4, #1056	; 0x420
    5652:	strh.w	r3, [sp, #106]	; 0x6a
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    5656:	add.w	sl, sp, #100	; 0x64
//              if(!SendObject()) return_code = 0x2005;
              len = 12;
              break;

          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    565a:	strh.w	lr, [sp, #104]	; 0x68
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    565e:	str	r5, [r6, #0]
        write_length_ += len;
    5660:	str.w	ip, [r4, #4]
    5664:	b.n	5670 <MTPD::loop()+0x788>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    5666:	cmp.w	r8, #11
    566a:	bgt.w	5872 <MTPD::loop()+0x98a>
    566e:	ldr	r0, [r6, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5670:	rsb	fp, r0, r9
    5674:	rsb	r3, r8, #12
          memcpy(dst,src,to_copy);
    5678:	mov	r1, sl
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    567a:	cmp	fp, r3
    567c:	it	ge
    567e:	movge	fp, r3
          memcpy(dst,src,to_copy);
    5680:	mov	r2, fp
          pos += to_copy;
    5682:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    5684:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5688:	ldr	r3, [r6, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    568a:	add	sl, fp
          dst += to_copy;
    568c:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    568e:	cmp	r3, r9
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5690:	str	r3, [r6, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5692:	bne.n	5666 <MTPD::loop()+0x77e>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5694:	movs	r2, #60	; 0x3c
    5696:	mov.w	r1, #512	; 0x200
    569a:	mov	r0, r5
    569c:	bl	a000 <usb_mtp_send>
    56a0:	cmp	r0, #0
    56a2:	ble.n	5694 <MTPD::loop()+0x7ac>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    56a4:	str	r5, [r6, #0]
    56a6:	b.n	5666 <MTPD::loop()+0x77e>
//              return_code = setObjectPropValue(p1,p2);
              break;

          default:
              return_code = 0x2005;  // operation not supported
              break;
    56a8:	ldr	r0, [sp, #16]
    56aa:	add.w	r5, r4, #544	; 0x220
    56ae:	movw	r2, #8197	; 0x2005
    56b2:	b.n	4fe4 <MTPD::loop()+0xfc>
    56b4:	ldrh.w	r2, [sp, #24]
    56b8:	add.w	r5, r4, #544	; 0x220
              break;

          case 0x100D:  // SendObject
//              if(!SendObject()) return_code = 0x2005;
              len = 12;
              break;
    56bc:	ldr	r0, [sp, #16]
    56be:	movs	r7, #12
    56c0:	b.n	4fe4 <MTPD::loop()+0xfc>
          case 0x1005:  // GetStorageInfo
            TRANSMIT(GetStorageInfo(p1));
            break;

          case 0x1006:  // GetNumObjects
            if (p2) 
    56c2:	cmp.w	sl, #0
    56c6:	bne.w	4fa2 <MTPD::loop()+0xba>
{
   char name[80];
   zeroFS_class *zFs_ = zFS;

public:
    uint32_t Count(uint32_t store,uint32_t parent) {return zFs_[store].Count(parent);}
    56ca:	ldr	r2, [sp, #16]
    56cc:	movw	r0, #10864	; 0x2a70
    56d0:	ldr	r3, [pc, #596]	; (5928 <MTPD::loop()+0xa40>)
    56d2:	mov	r1, r8
    56d4:	subs	r2, #1
    56d6:	add.w	r5, r4, #544	; 0x220
    56da:	ldr	r3, [r3, #80]	; 0x50
    56dc:	mla	r0, r0, r2, r3
    56e0:	bl	6b14 <zeroFS_class::Count(unsigned long)>
    56e4:	ldrh.w	r2, [sp, #24]
    56e8:	b.n	4fe4 <MTPD::loop()+0xfc>
              TRANSMIT(GetObjectHandles(p1, p3));
            }
            break;

          case 0x1008:  // GetObjectInfo
            TRANSMIT(GetObjectInfo(p1));
    56ea:	mov.w	r9, #0
    56ee:	movs	r3, #1
    56f0:	ldr	r1, [sp, #16]
    56f2:	mov	r0, r4
    56f4:	str.w	r9, [r4, #4]
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    56f8:	add.w	r5, r4, #544	; 0x220
              TRANSMIT(GetObjectHandles(p1, p3));
            }
            break;

          case 0x1008:  // GetObjectInfo
            TRANSMIT(GetObjectInfo(p1));
    56fc:	strb	r3, [r4, #0]
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
    56fe:	mov	r8, r9
              TRANSMIT(GetObjectHandles(p1, p3));
            }
            break;

          case 0x1008:  // GetObjectInfo
            TRANSMIT(GetObjectInfo(p1));
    5700:	bl	1b30 <MTPD::GetObjectInfo(unsigned long)>
    5704:	ldr	r3, [r4, #4]
    5706:	movs	r0, #2
    5708:	ldrh	r1, [r4, #38]	; 0x26
    570a:	adds	r3, #12
    570c:	ldr	r2, [r4, #40]	; 0x28
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    570e:	ldr	r6, [pc, #532]	; (5924 <MTPD::loop()+0xa3c>)
        write_length_ += len;
    5710:	mov.w	lr, #12
              TRANSMIT(GetObjectHandles(p1, p3));
            }
            break;

          case 0x1008:  // GetObjectInfo
            TRANSMIT(GetObjectInfo(p1));
    5714:	strb.w	r9, [r4]
    5718:	add.w	sl, r4, #1056	; 0x420
    571c:	strh.w	r0, [sp, #104]	; 0x68
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    5720:	add.w	r9, sp, #100	; 0x64
              TRANSMIT(GetObjectHandles(p1, p3));
            }
            break;

          case 0x1008:  // GetObjectInfo
            TRANSMIT(GetObjectInfo(p1));
    5724:	str	r3, [sp, #28]
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    5726:	mov	r0, r5
              TRANSMIT(GetObjectHandles(p1, p3));
            }
            break;

          case 0x1008:  // GetObjectInfo
            TRANSMIT(GetObjectInfo(p1));
    5728:	str	r3, [sp, #100]	; 0x64
    572a:	strh.w	r1, [sp, #106]	; 0x6a
    572e:	str	r2, [sp, #108]	; 0x6c
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5730:	str	r5, [r6, #0]
        write_length_ += len;
    5732:	str.w	lr, [r4, #4]
    5736:	b.n	5740 <MTPD::loop()+0x858>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    5738:	cmp.w	r8, #11
    573c:	bgt.n	5806 <MTPD::loop()+0x91e>
    573e:	ldr	r0, [r6, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5740:	rsb	fp, r0, sl
    5744:	rsb	r3, r8, #12
          memcpy(dst,src,to_copy);
    5748:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    574a:	cmp	fp, r3
    574c:	it	ge
    574e:	movge	fp, r3
          memcpy(dst,src,to_copy);
    5750:	mov	r2, fp
          pos += to_copy;
    5752:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    5754:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5758:	ldr	r3, [r6, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    575a:	add	r9, fp
          dst += to_copy;
    575c:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    575e:	cmp	r3, sl
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5760:	str	r3, [r6, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5762:	bne.n	5738 <MTPD::loop()+0x850>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5764:	movs	r2, #60	; 0x3c
    5766:	mov.w	r1, #512	; 0x200
    576a:	mov	r0, r5
    576c:	bl	a000 <usb_mtp_send>
    5770:	cmp	r0, #0
    5772:	ble.n	5764 <MTPD::loop()+0x87c>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    5774:	str	r5, [r6, #0]
    5776:	b.n	5738 <MTPD::loop()+0x850>
          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;

          case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    5778:	movs	r2, #1
      }
    }
  }

  void GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    577a:	movw	r3, #54274	; 0xd402
          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;

          case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    577e:	movs	r1, #0
    5780:	strb	r2, [r4, #0]
      }
    }
  }

  void GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    5782:	ldr	r2, [sp, #16]
          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;

          case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    5784:	str	r1, [r4, #4]
      }
    }
  }

  void GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    5786:	cmp	r2, r3
    5788:	beq.w	5c10 <MTPD::loop()+0xd28>
    578c:	movs	r3, #12
    578e:	str	r3, [sp, #28]
          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;

          case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    5790:	movs	r3, #0
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5792:	add.w	r5, r4, #544	; 0x220
          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;

          case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    5796:	ldr	r0, [sp, #28]
    5798:	mov.w	ip, #2
    579c:	movw	r1, #4117	; 0x1015
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    57a0:	ldr	r6, [pc, #384]	; (5924 <MTPD::loop()+0xa3c>)
        write_length_ += len;
    57a2:	movs	r2, #12
          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;

          case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    57a4:	str	r0, [sp, #100]	; 0x64
    57a6:	strb	r3, [r4, #0]
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
    57a8:	mov	r8, r3
          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;

          case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    57aa:	str.w	lr, [sp, #108]	; 0x6c
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    57ae:	mov	r0, r5
          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;

          case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    57b0:	strh.w	ip, [sp, #104]	; 0x68
    57b4:	add.w	sl, r4, #1056	; 0x420
    57b8:	strh.w	r1, [sp, #106]	; 0x6a
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    57bc:	add.w	r9, sp, #100	; 0x64
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    57c0:	str	r5, [r6, #0]
        write_length_ += len;
    57c2:	str	r2, [r4, #4]
    57c4:	b.n	57ce <MTPD::loop()+0x8e6>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    57c6:	cmp.w	r8, #11
    57ca:	bgt.n	582a <MTPD::loop()+0x942>
    57cc:	ldr	r0, [r6, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    57ce:	rsb	fp, r0, sl
    57d2:	rsb	r3, r8, #12
          memcpy(dst,src,to_copy);
    57d6:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    57d8:	cmp	fp, r3
    57da:	it	ge
    57dc:	movge	fp, r3
          memcpy(dst,src,to_copy);
    57de:	mov	r2, fp
          pos += to_copy;
    57e0:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    57e2:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    57e6:	ldr	r3, [r6, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    57e8:	add	r9, fp
          dst += to_copy;
    57ea:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    57ec:	cmp	r3, sl
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    57ee:	str	r3, [r6, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    57f0:	bne.n	57c6 <MTPD::loop()+0x8de>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    57f2:	movs	r2, #60	; 0x3c
    57f4:	mov.w	r1, #512	; 0x200
    57f8:	mov	r0, r5
    57fa:	bl	a000 <usb_mtp_send>
    57fe:	cmp	r0, #0
    5800:	ble.n	57f2 <MTPD::loop()+0x90a>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    5802:	str	r5, [r6, #0]
    5804:	b.n	57c6 <MTPD::loop()+0x8de>
              TRANSMIT(GetObjectHandles(p1, p3));
            }
            break;

          case 0x1008:  // GetObjectInfo
            TRANSMIT(GetObjectInfo(p1));
    5806:	ldr	r3, [sp, #28]
    5808:	mov	r0, r4
    580a:	ldr	r1, [sp, #16]
    580c:	ubfx	r6, r3, #0, #9
    5810:	bl	1b30 <MTPD::GetObjectInfo(unsigned long)>
    5814:	cmp	r6, #0
    5816:	beq.w	53e2 <MTPD::loop()+0x4fa>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    581a:	movs	r2, #60	; 0x3c
    581c:	mov	r1, r6
    581e:	mov	r0, r5
    5820:	bl	a000 <usb_mtp_send>
    5824:	cmp	r0, #0
    5826:	ble.n	581a <MTPD::loop()+0x932>
    5828:	b.n	53e2 <MTPD::loop()+0x4fa>
      }
    }
  }

  void GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    582a:	movw	r3, #54274	; 0xd402
    582e:	ldr	r2, [sp, #16]
    5830:	cmp	r2, r3
    5832:	beq.w	5f9c <MTPD::loop()+0x10b4>
          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;

          case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    5836:	ldr	r3, [sp, #28]
    5838:	ubfx	r6, r3, #0, #9
    583c:	cmp	r6, #0
    583e:	beq.w	53e2 <MTPD::loop()+0x4fa>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5842:	movs	r2, #60	; 0x3c
    5844:	mov	r1, r6
    5846:	mov	r0, r5
    5848:	bl	a000 <usb_mtp_send>
    584c:	cmp	r0, #0
    584e:	ble.n	5842 <MTPD::loop()+0x95a>
    5850:	b.n	53e2 <MTPD::loop()+0x4fa>
    { return zFs_[0].Info(handle, filename, size, parent);}

    uint32_t GetSize(uint32_t handle) {return zFs_[0].GetSize(handle);}
    
    uint32_t Read(uint32_t handle, char* out, uint32_t count) 
    { return zFs_[0].Read(handle, out, count);}
    5852:	cmp	r4, #16
    5854:	ldr	r0, [sp, #28]
    5856:	mov	r3, r4
    5858:	ldr	r1, [sp, #36]	; 0x24
    585a:	it	cs
    585c:	movcs	r3, #16
    585e:	mov	r2, fp
    5860:	ldr	r0, [r0, #80]	; 0x50
          if(disk_pos==DISK_BUFFER_SIZE)
          {
//            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
//            mFS.Read(object_id,size,pos,(char *)disk_buffer,nread);
            sector = mFS.Read(sector, (char *)disk_buffer, min(count,MCOUNT));
            count-=MCOUNT;
    5862:	subs	r4, #16
    { return zFs_[0].Info(handle, filename, size, parent);}

    uint32_t GetSize(uint32_t handle) {return zFs_[0].GetSize(handle);}
    
    uint32_t Read(uint32_t handle, char* out, uint32_t count) 
    { return zFs_[0].Read(handle, out, count);}
    5864:	bl	6ca0 <zeroFS_class::Read(unsigned long, char*, unsigned long)>
//            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
//            mFS.Read(object_id,size,pos,(char *)disk_buffer,nread);
            sector = mFS.Read(sector, (char *)disk_buffer, min(count,MCOUNT));
            count-=MCOUNT;

            disk_pos=0;
    5868:	mov	lr, r5
    586a:	movs	r5, #0
    { return zFs_[0].Info(handle, filename, size, parent);}

    uint32_t GetSize(uint32_t handle) {return zFs_[0].GetSize(handle);}
    
    uint32_t Read(uint32_t handle, char* out, uint32_t count) 
    { return zFs_[0].Read(handle, out, count);}
    586c:	str	r0, [sp, #36]	; 0x24
//            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
//            mFS.Read(object_id,size,pos,(char *)disk_buffer,nread);
            sector = mFS.Read(sector, (char *)disk_buffer, min(count,MCOUNT));
            count-=MCOUNT;

            disk_pos=0;
    586e:	str	r5, [r6, #0]
    5870:	b.n	5590 <MTPD::loop()+0x6a8>
        break;
    }
  }

  void GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    5872:	movw	r3, #54274	; 0xd402
    5876:	ldr	r1, [sp, #16]
    5878:	cmp	r1, r3
    587a:	bne.n	58c8 <MTPD::loop()+0x9e0>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    587c:	ldrb	r3, [r4, #0]
    587e:	strh.w	r1, [sp, #64]	; 0x40
    5882:	cmp	r3, #0
    5884:	beq.w	5e74 <MTPD::loop()+0xf8c>
      {
        write_length_ += len;
    5888:	ldr	r3, [r4, #4]
    588a:	movw	r2, #65535	; 0xffff
    588e:	adds	r3, #2
    5890:	strh.w	r2, [sp, #66]	; 0x42
    5894:	movs	r2, #0
    5896:	adds	r3, #2
    5898:	strb.w	r2, [sp, #61]	; 0x3d
    589c:	adds	r3, #1
    589e:	str	r3, [r4, #4]
  void GetDevicePropValue(uint32_t prop) {
    switch (prop) {
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring(MTP_NAME);
    58a0:	ldr	r1, [pc, #124]	; (5920 <MTPD::loop()+0xa38>)
    58a2:	mov	r0, r4
    58a4:	bl	270 <MTPD::writestring(char const*)>
    58a8:	ldr	r1, [pc, #116]	; (5920 <MTPD::loop()+0xa38>)
    58aa:	mov	r0, r4
    58ac:	bl	270 <MTPD::writestring(char const*)>
    58b0:	movs	r2, #0
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    58b2:	ldrb	r3, [r4, #0]
    58b4:	strb.w	r2, [sp, #62]	; 0x3e
    58b8:	cmp	r3, #0
    58ba:	beq.w	5da8 <MTPD::loop()+0xec0>
      {
        write_length_ += len;
    58be:	ldr	r3, [r4, #4]
    58c0:	ldr	r2, [sp, #100]	; 0x64
    58c2:	adds	r3, #1
    58c4:	str	r2, [sp, #28]
    58c6:	str	r3, [r4, #4]
//              if(!SendObject()) return_code = 0x2005;
              len = 12;
              break;

          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    58c8:	ldr	r3, [sp, #28]
    58ca:	ubfx	r6, r3, #0, #9
    58ce:	cmp	r6, #0
    58d0:	beq.w	53e2 <MTPD::loop()+0x4fa>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    58d4:	movs	r2, #60	; 0x3c
    58d6:	mov	r1, r6
    58d8:	mov	r0, r5
    58da:	bl	a000 <usb_mtp_send>
    58de:	cmp	r0, #0
    58e0:	ble.n	58d4 <MTPD::loop()+0x9ec>
    58e2:	b.n	53e2 <MTPD::loop()+0x4fa>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    58e4:	mov	r0, r5
    58e6:	str	r5, [r6, #0]
    58e8:	b.w	508a <MTPD::loop()+0x1a2>
    58ec:	movs	r2, #1
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    58ee:	ldrb	r3, [r4, #0]
    58f0:	str	r2, [sp, #80]	; 0x50
    58f2:	cmp	r3, #0
    58f4:	beq.w	5cec <MTPD::loop()+0xe04>
      {
        write_length_ += len;
    58f8:	ldr	r3, [r4, #4]
    58fa:	str	r2, [sp, #84]	; 0x54
    58fc:	adds	r3, #4
    58fe:	adds	r3, #4
    5900:	str	r3, [r4, #4]

          case 0x1003:  // CloseSession
            break;

          case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
    5902:	ldr	r6, [sp, #100]	; 0x64
    5904:	ubfx	r6, r6, #0, #9
    5908:	cmp	r6, #0
    590a:	beq.w	53e2 <MTPD::loop()+0x4fa>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    590e:	movs	r2, #60	; 0x3c
    5910:	mov	r1, r6
    5912:	mov	r0, r5
    5914:	bl	a000 <usb_mtp_send>
    5918:	cmp	r0, #0
    591a:	ble.n	590e <MTPD::loop()+0xa26>
    591c:	b.n	53e2 <MTPD::loop()+0x4fa>
    591e:	nop
    5920:	.word	0x20000bdc
    5924:	.word	0x20004604
    5928:	.word	0x2000c650
    592c:	ldr	r7, [sp, #32]
    592e:	ldr.w	lr, [r4, #40]	; 0x28
          case 0x101B:  // GetPartialObject
//              TRANSMIT1(GetPartialObject(p1,p2,p3));
              break;

          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
    5932:	movs	r0, #2
    5934:	adds	r3, #12
    5936:	mov.w	r9, #0
    593a:	ldrh	r1, [r4, #38]	; 0x26
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    593c:	movs	r2, #12
          case 0x101B:  // GetPartialObject
//              TRANSMIT1(GetPartialObject(p1,p2,p3));
              break;

          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
    593e:	strh.w	r0, [sp, #104]	; 0x68
    5942:	strb.w	r9, [r4]
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    5946:	mov	r0, r5
          case 0x101B:  // GetPartialObject
//              TRANSMIT1(GetPartialObject(p1,p2,p3));
              break;

          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
    5948:	str.w	lr, [sp, #108]	; 0x6c
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    594c:	add.w	sl, sp, #100	; 0x64
          case 0x101B:  // GetPartialObject
//              TRANSMIT1(GetPartialObject(p1,p2,p3));
              break;

          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
    5950:	str	r3, [sp, #100]	; 0x64
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5952:	str	r5, [r6, #0]
          case 0x101B:  // GetPartialObject
//              TRANSMIT1(GetPartialObject(p1,p2,p3));
              break;

          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
    5954:	strh.w	r1, [sp, #106]	; 0x6a
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    5958:	str	r2, [r4, #4]
    595a:	b.n	5964 <MTPD::loop()+0xa7c>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    595c:	cmp.w	r9, #11
    5960:	bgt.n	599c <MTPD::loop()+0xab4>
    5962:	ldr	r0, [r6, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5964:	rsb	fp, r0, r8
    5968:	rsb	r3, r9, #12
          memcpy(dst,src,to_copy);
    596c:	mov	r1, sl
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    596e:	cmp	fp, r3
    5970:	it	ge
    5972:	movge	fp, r3
          memcpy(dst,src,to_copy);
    5974:	mov	r2, fp
          pos += to_copy;
    5976:	add	r9, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    5978:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    597c:	ldr	r3, [r6, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    597e:	add	sl, fp
          dst += to_copy;
    5980:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5982:	cmp	r3, r8
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5984:	str	r3, [r6, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5986:	bne.n	595c <MTPD::loop()+0xa74>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5988:	movs	r2, #60	; 0x3c
    598a:	mov.w	r1, #512	; 0x200
    598e:	mov	r0, r5
    5990:	bl	a000 <usb_mtp_send>
    5994:	cmp	r0, #0
    5996:	ble.n	5988 <MTPD::loop()+0xaa0>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    5998:	str	r5, [r6, #0]
    599a:	b.n	595c <MTPD::loop()+0xa74>
    }
  }

    void getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
    599c:	ldr	r3, [pc, #668]	; (5c3c <MTPD::loop()+0xd54>)
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    599e:	ldrb	r2, [r4, #0]
    }
  }

    void getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
    59a0:	ldr	r3, [r3, #0]
    59a2:	str	r3, [sp, #96]	; 0x60
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    59a4:	cmp	r2, #0
    59a6:	beq.w	5dfc <MTPD::loop()+0xf14>
      {
        write_length_ += len;
    59aa:	ldr	r2, [r4, #4]
    59ac:	adds	r2, #4
    59ae:	str	r2, [r4, #4]
  }

    void getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    59b0:	cmp	r3, #0
    59b2:	beq.n	5a40 <MTPD::loop()+0xb58>
    59b4:	ldr	r3, [pc, #648]	; (5c40 <MTPD::loop()+0xd58>)
    59b6:	movw	r2, #56321	; 0xdc01
    59ba:	str	r7, [sp, #32]
    59bc:	str	r3, [sp, #28]
    59be:	movs	r3, #0
    59c0:	mov	sl, r3
    59c2:	b.n	59de <MTPD::loop()+0xaf6>
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    59c4:	ldr	r3, [r4, #4]
    59c6:	adds	r3, #2
    59c8:	str	r3, [r4, #4]
  }

    void getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    59ca:	ldr	r3, [pc, #624]	; (5c3c <MTPD::loop()+0xd54>)
    59cc:	add.w	sl, sl, #1
    59d0:	ldr	r3, [r3, #0]
    59d2:	cmp	r3, sl
    59d4:	bls.n	5a3e <MTPD::loop()+0xb56>
    59d6:	ldr	r3, [sp, #28]
    59d8:	ldrh.w	r2, [r3, #2]!
    59dc:	str	r3, [sp, #28]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    59de:	ldrb	r3, [r4, #0]
    59e0:	strh.w	r2, [sp, #76]	; 0x4c
    59e4:	cmp	r3, #0
    59e6:	bne.n	59c4 <MTPD::loop()+0xadc>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    59e8:	ldr	r3, [r4, #4]
    59ea:	cbz	r3, 5a38 <MTPD::loop()+0xb50>
    59ec:	ldr	r0, [r6, #0]
        write_length_ += len;
    59ee:	adds	r3, #2
        
        const char * src=data;
    59f0:	add.w	r9, sp, #76	; 0x4c
        //
        int pos = 0; // into data
    59f4:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    59f6:	str	r3, [r4, #4]
    59f8:	b.n	5a00 <MTPD::loop()+0xb18>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    59fa:	cmp	r7, #1
    59fc:	bgt.n	59ca <MTPD::loop()+0xae2>
    59fe:	ldr	r0, [r6, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5a00:	rsb	fp, r0, r8
    5a04:	rsb	r3, r7, #2
          memcpy(dst,src,to_copy);
    5a08:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5a0a:	cmp	fp, r3
    5a0c:	it	ge
    5a0e:	movge	fp, r3
          memcpy(dst,src,to_copy);
    5a10:	mov	r2, fp
          pos += to_copy;
    5a12:	add	r7, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    5a14:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5a18:	ldr	r3, [r6, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    5a1a:	add	r9, fp
          dst += to_copy;
    5a1c:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5a1e:	cmp	r3, r8
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5a20:	str	r3, [r6, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5a22:	bne.n	59fa <MTPD::loop()+0xb12>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5a24:	movs	r2, #60	; 0x3c
    5a26:	mov.w	r1, #512	; 0x200
    5a2a:	mov	r0, r5
    5a2c:	bl	a000 <usb_mtp_send>
    5a30:	cmp	r0, #0
    5a32:	ble.n	5a24 <MTPD::loop()+0xb3c>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    5a34:	str	r5, [r6, #0]
    5a36:	b.n	59fa <MTPD::loop()+0xb12>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5a38:	mov	r0, r5
    5a3a:	str	r5, [r6, #0]
    5a3c:	b.n	59ee <MTPD::loop()+0xb06>
    5a3e:	ldr	r7, [sp, #32]
          case 0x101B:  // GetPartialObject
//              TRANSMIT1(GetPartialObject(p1,p2,p3));
              break;

          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
    5a40:	ldr	r6, [sp, #100]	; 0x64
    5a42:	ubfx	r6, r6, #0, #9
    5a46:	cmp	r6, #0
    5a48:	beq.w	53e2 <MTPD::loop()+0x4fa>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5a4c:	movs	r2, #60	; 0x3c
    5a4e:	mov	r1, r6
    5a50:	mov	r0, r5
    5a52:	bl	a000 <usb_mtp_send>
    5a56:	cmp	r0, #0
    5a58:	ble.n	5a4c <MTPD::loop()+0xb64>
    5a5a:	b.n	53e2 <MTPD::loop()+0x4fa>
    5a5c:	ldr	r7, [sp, #44]	; 0x2c
    5a5e:	ldr	r5, [sp, #48]	; 0x30
    5a60:	ldr	r4, [sp, #52]	; 0x34
          if(len==MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            len=0;
          }
        }
        if(len>0)
    5a62:	cmp.w	r8, #0
    5a66:	beq.n	5a7e <MTPD::loop()+0xb96>
    5a68:	ldr	r3, [sp, #40]	; 0x28
    5a6a:	mov	r5, r9
    5a6c:	str	r3, [sp, #32]

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5a6e:	movs	r2, #60	; 0x3c
    5a70:	mov.w	r1, #512	; 0x200
    5a74:	mov	r0, r9
    5a76:	bl	a000 <usb_mtp_send>
    5a7a:	cmp	r0, #0
    5a7c:	ble.n	5a6e <MTPD::loop()+0xb86>
    5a7e:	ldr	r3, [r4, #4]
          case 0x1008:  // GetObjectInfo
            TRANSMIT(GetObjectInfo(p1));
            break;

          case 0x1009:  // GetObject
            TRANSMIT(GetObject(p1));
    5a80:	adds	r3, #12
    5a82:	movs	r0, #2
    5a84:	mov.w	r8, #0
    5a88:	ldrh	r1, [r4, #38]	; 0x26
    5a8a:	mov	r6, r3
    5a8c:	str	r3, [sp, #36]	; 0x24
    5a8e:	ldr	r2, [r4, #40]	; 0x28
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    5a90:	movs	r3, #12
          case 0x1008:  // GetObjectInfo
            TRANSMIT(GetObjectInfo(p1));
            break;

          case 0x1009:  // GetObject
            TRANSMIT(GetObject(p1));
    5a92:	str	r6, [sp, #100]	; 0x64
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    5a94:	add.w	r9, sp, #100	; 0x64
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5a98:	ldr	r6, [pc, #424]	; (5c44 <MTPD::loop()+0xd5c>)
          case 0x1008:  // GetObjectInfo
            TRANSMIT(GetObjectInfo(p1));
            break;

          case 0x1009:  // GetObject
            TRANSMIT(GetObject(p1));
    5a9a:	strb.w	r8, [r4]
    5a9e:	strh.w	r0, [sp, #104]	; 0x68
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    5aa2:	mov	r0, r5
          case 0x1008:  // GetObjectInfo
            TRANSMIT(GetObjectInfo(p1));
            break;

          case 0x1009:  // GetObject
            TRANSMIT(GetObject(p1));
    5aa4:	strh.w	r1, [sp, #106]	; 0x6a
    5aa8:	str	r2, [sp, #108]	; 0x6c
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    5aaa:	str	r3, [r4, #4]
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5aac:	str	r5, [r6, #0]
    5aae:	ldr.w	fp, [sp, #32]
    5ab2:	b.n	5abc <MTPD::loop()+0xbd4>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    5ab4:	cmp.w	r8, #11
    5ab8:	bgt.n	5af4 <MTPD::loop()+0xc0c>
    5aba:	ldr	r0, [r6, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5abc:	rsb	sl, r0, fp
    5ac0:	rsb	r3, r8, #12
          memcpy(dst,src,to_copy);
    5ac4:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5ac6:	cmp	sl, r3
    5ac8:	it	ge
    5aca:	movge	sl, r3
          memcpy(dst,src,to_copy);
    5acc:	mov	r2, sl
          pos += to_copy;
    5ace:	add	r8, sl
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    5ad0:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5ad4:	ldr	r3, [r6, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    5ad6:	add	r9, sl
          dst += to_copy;
    5ad8:	add	r3, sl
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5ada:	cmp	r3, fp
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5adc:	str	r3, [r6, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5ade:	bne.n	5ab4 <MTPD::loop()+0xbcc>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5ae0:	movs	r2, #60	; 0x3c
    5ae2:	mov.w	r1, #512	; 0x200
    5ae6:	mov	r0, r5
    5ae8:	bl	a000 <usb_mtp_send>
    5aec:	cmp	r0, #0
    5aee:	ble.n	5ae0 <MTPD::loop()+0xbf8>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    5af0:	str	r5, [r6, #0]
    5af2:	b.n	5ab4 <MTPD::loop()+0xbcc>
    char * getName(uint32_t store) {return zFs_[store].getName();}

    uint32_t Info(uint32_t handle, char *filename, uint32_t *size, uint32_t *parent)
    { return zFs_[0].Info(handle, filename, size, parent);}

    uint32_t GetSize(uint32_t handle) {return zFs_[0].GetSize(handle);}
    5af4:	ldr	r3, [sp, #28]
    5af6:	ldr	r1, [sp, #16]
    5af8:	ldr	r0, [r3, #80]	; 0x50
    5afa:	bl	6c54 <zeroFS_class::GetSize(unsigned long)>

    void GetObject(uint32_t object_id) 
    {
      uint32_t size = mFS.GetSize(object_id);

      if (write_get_length_) {
    5afe:	ldrb	r3, [r4, #0]
    char * getName(uint32_t store) {return zFs_[store].getName();}

    uint32_t Info(uint32_t handle, char *filename, uint32_t *size, uint32_t *parent)
    { return zFs_[0].Info(handle, filename, size, parent);}

    uint32_t GetSize(uint32_t handle) {return zFs_[0].GetSize(handle);}
    5b00:	mov	fp, r0

    void GetObject(uint32_t object_id) 
    {
      uint32_t size = mFS.GetSize(object_id);

      if (write_get_length_) {
    5b02:	cmp	r3, #0
    5b04:	bne.n	5bf4 <MTPD::loop()+0xd0c>
        uint32_t pos = 0; // into data
        uint32_t len = sizeof(MTPHeader);
        uint32_t sector = object_id;
        uint32_t count = size / 512;

        disk_pos=DISK_BUFFER_SIZE;
    5b06:	movw	r1, #9248	; 0x2420
    5b0a:	mov.w	r2, #8192	; 0x2000
      } else 
      { 
        uint32_t pos = 0; // into data
        uint32_t len = sizeof(MTPHeader);
        uint32_t sector = object_id;
        uint32_t count = size / 512;
    5b0e:	lsrs	r0, r0, #9

        disk_pos=DISK_BUFFER_SIZE;
    5b10:	str	r2, [r4, r1]
        while(pos<size)
    5b12:	cmp.w	fp, #0
    5b16:	beq.n	5b98 <MTPD::loop()+0xcb0>
    5b18:	mov	r9, r3
    5b1a:	mov	r6, r1
    { if(!usb_mtp_available()) return;
      if(fetch_packet(rx_data_buffer))
      { printContainer(); // to switch on set debug to 1 at beginning of file

        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
    5b1c:	ldr	r3, [sp, #16]
        uint32_t len = sizeof(MTPHeader);
        uint32_t sector = object_id;
        uint32_t count = size / 512;

        disk_pos=DISK_BUFFER_SIZE;
        while(pos<size)
    5b1e:	mov.w	r8, #12
    5b22:	add	r6, r4
    5b24:	str	r7, [sp, #44]	; 0x2c
    5b26:	ldr.w	sl, [sp, #32]
    5b2a:	mov	r7, r2
    5b2c:	str	r4, [sp, #32]
    5b2e:	mov	r4, r0
    { if(!usb_mtp_available()) return;
      if(fetch_packet(rx_data_buffer))
      { printContainer(); // to switch on set debug to 1 at beginning of file

        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
    5b30:	str	r3, [sp, #40]	; 0x28
    5b32:	b.n	5b3a <MTPD::loop()+0xc52>
        uint32_t len = sizeof(MTPHeader);
        uint32_t sector = object_id;
        uint32_t count = size / 512;

        disk_pos=DISK_BUFFER_SIZE;
        while(pos<size)
    5b34:	cmp	fp, r9
    5b36:	bls.n	5b8e <MTPD::loop()+0xca6>
    5b38:	ldr	r7, [r6, #0]
        {
          if(disk_pos==DISK_BUFFER_SIZE)
    5b3a:	cmp.w	r7, #8192	; 0x2000
    5b3e:	beq.n	5bc4 <MTPD::loop()+0xcdc>
    5b40:	rsb	lr, r7, #8192	; 0x2000
            count-=MCOUNT;

            disk_pos=0;
          }

          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
    5b44:	rsb	r2, r8, #512	; 0x200
    5b48:	rsb	r3, r9, fp
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);

          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    5b4c:	add.w	r1, sl, r7
    5b50:	add.w	r0, r5, r8
            count-=MCOUNT;

            disk_pos=0;
          }

          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
    5b54:	cmp	r2, r3
    5b56:	it	cs
    5b58:	movcs	r2, r3
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    5b5a:	cmp	r2, lr
            count-=MCOUNT;

            disk_pos=0;
          }

          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
    5b5c:	mov	r7, r2
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    5b5e:	it	cs
    5b60:	movcs	r7, lr

          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    5b62:	mov	r2, r7
          disk_pos += to_copy;
          pos += to_copy;
          len += to_copy;
    5b64:	add	r8, r7
          }

          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);

          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    5b66:	bl	80b4 <memcpy>
          disk_pos += to_copy;
    5b6a:	ldr	r3, [r6, #0]
          pos += to_copy;
    5b6c:	add	r9, r7
          len += to_copy;

          if(len==MTP_TX_SIZE)
    5b6e:	cmp.w	r8, #512	; 0x200

          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);

          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
          disk_pos += to_copy;
    5b72:	add	r7, r3
    5b74:	str	r7, [r6, #0]
          pos += to_copy;
          len += to_copy;

          if(len==MTP_TX_SIZE)
    5b76:	bne.n	5b34 <MTPD::loop()+0xc4c>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5b78:	movs	r2, #60	; 0x3c
    5b7a:	mov.w	r1, #512	; 0x200
    5b7e:	mov	r0, r5
    5b80:	bl	a000 <usb_mtp_send>
    5b84:	cmp	r0, #0
    5b86:	ble.n	5b78 <MTPD::loop()+0xc90>
          pos += to_copy;
          len += to_copy;

          if(len==MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            len=0;
    5b88:	mov.w	r8, #0
    5b8c:	b.n	5b34 <MTPD::loop()+0xc4c>
    5b8e:	ldr	r7, [sp, #44]	; 0x2c
    5b90:	ldr	r4, [sp, #32]
          }
        }
        if(len>0)
    5b92:	cmp.w	r8, #0
    5b96:	beq.n	5ba8 <MTPD::loop()+0xcc0>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5b98:	movs	r2, #60	; 0x3c
    5b9a:	mov.w	r1, #512	; 0x200
    5b9e:	mov	r0, r5
    5ba0:	bl	a000 <usb_mtp_send>
    5ba4:	cmp	r0, #0
    5ba6:	ble.n	5b98 <MTPD::loop()+0xcb0>
          case 0x1008:  // GetObjectInfo
            TRANSMIT(GetObjectInfo(p1));
            break;

          case 0x1009:  // GetObject
            TRANSMIT(GetObject(p1));
    5ba8:	ldr	r3, [sp, #36]	; 0x24
    5baa:	ubfx	r6, r3, #0, #9
    5bae:	cmp	r6, #0
    5bb0:	beq.w	53e2 <MTPD::loop()+0x4fa>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5bb4:	movs	r2, #60	; 0x3c
    5bb6:	mov	r1, r6
    5bb8:	mov	r0, r5
    5bba:	bl	a000 <usb_mtp_send>
    5bbe:	cmp	r0, #0
    5bc0:	ble.n	5bb4 <MTPD::loop()+0xccc>
    5bc2:	b.n	53e2 <MTPD::loop()+0x4fa>
    { return zFs_[0].Info(handle, filename, size, parent);}

    uint32_t GetSize(uint32_t handle) {return zFs_[0].GetSize(handle);}
    
    uint32_t Read(uint32_t handle, char* out, uint32_t count) 
    { return zFs_[0].Read(handle, out, count);}
    5bc4:	cmp	r4, #16
    5bc6:	ldr	r0, [sp, #28]
    5bc8:	mov	r3, r4
    5bca:	ldr	r1, [sp, #40]	; 0x28
    5bcc:	it	cs
    5bce:	movcs	r3, #16
    5bd0:	mov	r2, sl
    5bd2:	ldr	r0, [r0, #80]	; 0x50
          if(disk_pos==DISK_BUFFER_SIZE)
          {
//            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
//            mFS.Read(object_id,size,pos,(char *)disk_buffer,nread);
            sector = mFS.Read(sector, (char *)disk_buffer, min(count,MCOUNT));
            count-=MCOUNT;
    5bd4:	subs	r4, #16
    { return zFs_[0].Info(handle, filename, size, parent);}

    uint32_t GetSize(uint32_t handle) {return zFs_[0].GetSize(handle);}
    
    uint32_t Read(uint32_t handle, char* out, uint32_t count) 
    { return zFs_[0].Read(handle, out, count);}
    5bd6:	bl	6ca0 <zeroFS_class::Read(unsigned long, char*, unsigned long)>
//            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
//            mFS.Read(object_id,size,pos,(char *)disk_buffer,nread);
            sector = mFS.Read(sector, (char *)disk_buffer, min(count,MCOUNT));
            count-=MCOUNT;

            disk_pos=0;
    5bda:	mov	lr, r7
    5bdc:	movs	r7, #0
    { return zFs_[0].Info(handle, filename, size, parent);}

    uint32_t GetSize(uint32_t handle) {return zFs_[0].GetSize(handle);}
    
    uint32_t Read(uint32_t handle, char* out, uint32_t count) 
    { return zFs_[0].Read(handle, out, count);}
    5bde:	str	r0, [sp, #40]	; 0x28
//            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
//            mFS.Read(object_id,size,pos,(char *)disk_buffer,nread);
            sector = mFS.Read(sector, (char *)disk_buffer, min(count,MCOUNT));
            count-=MCOUNT;

            disk_pos=0;
    5be0:	str	r7, [r6, #0]
    5be2:	b.n	5b44 <MTPD::loop()+0xc5c>
          case 0x1009:  // GetObject
            TRANSMIT(GetObject(p1));
            break;

          case 0x100B:  // DeleteObject
              if (p2) {
    5be4:	movw	r2, #8210	; 0x2012
    5be8:	b.w	4fe4 <MTPD::loop()+0xfc>
        break;
    }
  }

  void GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    5bec:	movs	r2, #12
    5bee:	ldr	r0, [sp, #20]
    5bf0:	str	r2, [sp, #28]
    5bf2:	b.n	5632 <MTPD::loop()+0x74a>
    void GetObject(uint32_t object_id) 
    {
      uint32_t size = mFS.GetSize(object_id);

      if (write_get_length_) {
        write_length_ += size;
    5bf4:	ldr	r3, [r4, #4]
    5bf6:	add	r3, r0
    5bf8:	str	r3, [r4, #4]
    5bfa:	b.n	5ba8 <MTPD::loop()+0xcc0>
    5bfc:	add.w	r2, r4, #1056	; 0x420
    5c00:	ldr	r3, [r4, #4]
    5c02:	add.w	r5, r4, #544	; 0x220
    5c06:	str	r2, [sp, #32]
    5c08:	mov	r2, r0
    5c0a:	add	r2, r3
    5c0c:	mov	r3, r2
    5c0e:	b.n	5a80 <MTPD::loop()+0xb98>
      }
    }
  }

  void GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    5c10:	mov.w	fp, #3
    5c14:	movs	r3, #84	; 0x54
    5c16:	ldr	r2, [pc, #48]	; (5c48 <MTPD::loop()+0xd60>)
    5c18:	b.n	5c1c <MTPD::loop()+0xd34>
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    5c1a:	mov	fp, r1
    5c1c:	uxth	r0, r3
    5c1e:	ldrb.w	r3, [r2, #1]!
    5c22:	add.w	r1, fp, #2
    5c26:	cmp	r3, #0
    5c28:	bne.n	5c1a <MTPD::loop()+0xd32>
    5c2a:	add.w	r2, fp, #14
    5c2e:	strh.w	r0, [sp, #70]	; 0x46
    5c32:	strh.w	r3, [sp, #68]	; 0x44
    5c36:	str	r2, [sp, #28]
    5c38:	b.n	5790 <MTPD::loop()+0x8a8>
    5c3a:	nop
    5c3c:	.word	0x20001934
    5c40:	.word	0x20000404
    5c44:	.word	0x20004604
    5c48:	.word	0x20000bdc
{
   char name[80];
   zeroFS_class *zFs_ = zFS;

public:
    uint32_t Count(uint32_t store,uint32_t parent) {return zFs_[store].Count(parent);}
    5c4c:	ldr	r3, [sp, #16]
    5c4e:	movw	r1, #10864	; 0x2a70
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5c52:	add.w	r5, r4, #544	; 0x220
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
    5c56:	mov	fp, sl
{
   char name[80];
   zeroFS_class *zFs_ = zFS;

public:
    uint32_t Count(uint32_t store,uint32_t parent) {return zFs_[store].Count(parent);}
    5c58:	subs	r2, r3, #1
    5c5a:	ldr	r3, [pc, #720]	; (5f2c <MTPD::loop()+0x1044>)
    5c5c:	mul.w	r2, r1, r2
    5c60:	mov	r0, r3
    5c62:	str	r3, [sp, #28]
          case 0x1007:  // GetObjectHandles
            if (p2) 
            { return_code = 0x2014; // spec by format unsupported
            } else 
            { 
              TRANSMIT(GetObjectHandles(p1, p3));
    5c64:	movs	r3, #1
{
   char name[80];
   zeroFS_class *zFs_ = zFS;

public:
    uint32_t Count(uint32_t store,uint32_t parent) {return zFs_[store].Count(parent);}
    5c66:	mov	r6, r2
    5c68:	ldr	r0, [r0, #80]	; 0x50
    5c6a:	mov	r1, r8
          case 0x1007:  // GetObjectHandles
            if (p2) 
            { return_code = 0x2014; // spec by format unsupported
            } else 
            { 
              TRANSMIT(GetObjectHandles(p1, p3));
    5c6c:	str.w	sl, [r4, #4]
{
   char name[80];
   zeroFS_class *zFs_ = zFS;

public:
    uint32_t Count(uint32_t store,uint32_t parent) {return zFs_[store].Count(parent);}
    5c70:	add	r0, r6
          case 0x1007:  // GetObjectHandles
            if (p2) 
            { return_code = 0x2014; // spec by format unsupported
            } else 
            { 
              TRANSMIT(GetObjectHandles(p1, p3));
    5c72:	strb	r3, [r4, #0]
{
   char name[80];
   zeroFS_class *zFs_ = zFS;

public:
    uint32_t Count(uint32_t store,uint32_t parent) {return zFs_[store].Count(parent);}
    5c74:	str	r2, [sp, #32]
    5c76:	bl	6b14 <zeroFS_class::Count(unsigned long)>
          case 0x1007:  // GetObjectHandles
            if (p2) 
            { return_code = 0x2014; // spec by format unsupported
            } else 
            { 
              TRANSMIT(GetObjectHandles(p1, p3));
    5c7a:	lsls	r3, r0, #2
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5c7c:	ldr	r6, [pc, #688]	; (5f30 <MTPD::loop()+0x1048>)
          case 0x1007:  // GetObjectHandles
            if (p2) 
            { return_code = 0x2014; // spec by format unsupported
            } else 
            { 
              TRANSMIT(GetObjectHandles(p1, p3));
    5c7e:	movs	r0, #2
    5c80:	ldrh	r1, [r4, #38]	; 0x26
    5c82:	adds	r3, #16
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    5c84:	movs	r2, #12
          case 0x1007:  // GetObjectHandles
            if (p2) 
            { return_code = 0x2014; // spec by format unsupported
            } else 
            { 
              TRANSMIT(GetObjectHandles(p1, p3));
    5c86:	strb.w	sl, [r4]
    5c8a:	add.w	sl, r4, #1056	; 0x420
    5c8e:	str	r3, [sp, #100]	; 0x64
    5c90:	ldr	r3, [r4, #40]	; 0x28
    5c92:	strh.w	r0, [sp, #104]	; 0x68
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    5c96:	mov	r0, r5
          case 0x1007:  // GetObjectHandles
            if (p2) 
            { return_code = 0x2014; // spec by format unsupported
            } else 
            { 
              TRANSMIT(GetObjectHandles(p1, p3));
    5c98:	str	r3, [sp, #108]	; 0x6c
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    5c9a:	add	r3, sp, #100	; 0x64
          case 0x1007:  // GetObjectHandles
            if (p2) 
            { return_code = 0x2014; // spec by format unsupported
            } else 
            { 
              TRANSMIT(GetObjectHandles(p1, p3));
    5c9c:	strh.w	r1, [sp, #106]	; 0x6a
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5ca0:	str	r5, [r6, #0]
    5ca2:	mov	r9, r3
        write_length_ += len;
    5ca4:	str	r2, [r4, #4]
    5ca6:	str	r4, [sp, #36]	; 0x24
    5ca8:	b.n	5cb4 <MTPD::loop()+0xdcc>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    5caa:	cmp.w	fp, #11
    5cae:	bgt.w	6040 <MTPD::loop()+0x1158>
    5cb2:	ldr	r0, [r6, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5cb4:	rsb	r2, r0, sl
    5cb8:	rsb	r3, fp, #12
          memcpy(dst,src,to_copy);
    5cbc:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5cbe:	cmp	r2, r3
    5cc0:	it	ge
    5cc2:	movge	r2, r3
    5cc4:	mov	r4, r2
          memcpy(dst,src,to_copy);
          pos += to_copy;
    5cc6:	add	fp, r2
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    5cc8:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5ccc:	ldr	r2, [r6, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    5cce:	add	r9, r4
          dst += to_copy;
    5cd0:	adds	r3, r2, r4
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5cd2:	cmp	r3, sl
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5cd4:	str	r3, [r6, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5cd6:	bne.n	5caa <MTPD::loop()+0xdc2>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5cd8:	movs	r2, #60	; 0x3c
    5cda:	mov.w	r1, #512	; 0x200
    5cde:	mov	r0, r5
    5ce0:	bl	a000 <usb_mtp_send>
    5ce4:	cmp	r0, #0
    5ce6:	ble.n	5cd8 <MTPD::loop()+0xdf0>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    5ce8:	str	r5, [r6, #0]
    5cea:	b.n	5caa <MTPD::loop()+0xdc2>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5cec:	ldr	r3, [r4, #4]
    5cee:	cbnz	r3, 5cf2 <MTPD::loop()+0xe0a>
    5cf0:	str	r5, [r6, #0]
        write_length_ += len;
    5cf2:	adds	r3, #4
        
        const char * src=data;
    5cf4:	add.w	sl, sp, #80	; 0x50
        //
        int pos = 0; // into data
    5cf8:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    5cfc:	str	r3, [r4, #4]
    5cfe:	b.n	5d06 <MTPD::loop()+0xe1e>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    5d00:	cmp.w	r8, #3
    5d04:	bgt.n	5d40 <MTPD::loop()+0xe58>
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    5d06:	ldr	r0, [r6, #0]
          int to_copy = min(len - pos, avail);
    5d08:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    5d0c:	mov	r1, sl
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5d0e:	rsb	fp, r0, r9
    5d12:	cmp	fp, r3
    5d14:	it	ge
    5d16:	movge	fp, r3
          memcpy(dst,src,to_copy);
    5d18:	mov	r2, fp
          pos += to_copy;
    5d1a:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    5d1c:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5d20:	ldr	r3, [r6, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    5d22:	add	sl, fp
          dst += to_copy;
    5d24:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5d26:	cmp	r3, r9
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5d28:	str	r3, [r6, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5d2a:	bne.n	5d00 <MTPD::loop()+0xe18>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5d2c:	movs	r2, #60	; 0x3c
    5d2e:	mov.w	r1, #512	; 0x200
    5d32:	mov	r0, r5
    5d34:	bl	a000 <usb_mtp_send>
    5d38:	cmp	r0, #0
    5d3a:	ble.n	5d2c <MTPD::loop()+0xe44>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    5d3c:	str	r5, [r6, #0]
    5d3e:	b.n	5d00 <MTPD::loop()+0xe18>
    5d40:	movs	r1, #1
    5d42:	ldrb	r2, [r4, #0]
    5d44:	ldr	r3, [r4, #4]
    5d46:	str	r1, [sp, #84]	; 0x54
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    5d48:	cmp	r2, #0
    5d4a:	bne.w	58fe <MTPD::loop()+0xa16>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5d4e:	cbz	r3, 5da2 <MTPD::loop()+0xeba>
    5d50:	ldr	r0, [r6, #0]
        write_length_ += len;
    5d52:	adds	r3, #4
        
        const char * src=data;
    5d54:	add.w	sl, sp, #84	; 0x54
        //
        int pos = 0; // into data
    5d58:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    5d5c:	str	r3, [r4, #4]
    5d5e:	b.n	5d6a <MTPD::loop()+0xe82>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    5d60:	cmp.w	r8, #3
    5d64:	bgt.w	5902 <MTPD::loop()+0xa1a>
    5d68:	ldr	r0, [r6, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5d6a:	rsb	fp, r0, r9
    5d6e:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    5d72:	mov	r1, sl
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5d74:	cmp	fp, r3
    5d76:	it	ge
    5d78:	movge	fp, r3
          memcpy(dst,src,to_copy);
    5d7a:	mov	r2, fp
          pos += to_copy;
    5d7c:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    5d7e:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5d82:	ldr	r3, [r6, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    5d84:	add	sl, fp
          dst += to_copy;
    5d86:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5d88:	cmp	r3, r9
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5d8a:	str	r3, [r6, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5d8c:	bne.n	5d60 <MTPD::loop()+0xe78>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5d8e:	movs	r2, #60	; 0x3c
    5d90:	mov.w	r1, #512	; 0x200
    5d94:	mov	r0, r5
    5d96:	bl	a000 <usb_mtp_send>
    5d9a:	cmp	r0, #0
    5d9c:	ble.n	5d8e <MTPD::loop()+0xea6>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    5d9e:	str	r5, [r6, #0]
    5da0:	b.n	5d60 <MTPD::loop()+0xe78>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5da2:	mov	r0, r5
    5da4:	str	r5, [r6, #0]
    5da6:	b.n	5d52 <MTPD::loop()+0xe6a>
    5da8:	ldr	r3, [r4, #4]
    5daa:	cbnz	r3, 5dae <MTPD::loop()+0xec6>
    5dac:	str	r5, [r6, #0]
        write_length_ += len;
    5dae:	adds	r3, #1
        
        const char * src=data;
    5db0:	add.w	sl, sp, #62	; 0x3e
        //
        int pos = 0; // into data
    5db4:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    5db8:	str	r3, [r4, #4]
    5dba:	b.n	5dc2 <MTPD::loop()+0xeda>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    5dbc:	cmp.w	r8, #0
    5dc0:	bgt.n	5e50 <MTPD::loop()+0xf68>
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    5dc2:	ldr	r0, [r6, #0]
          int to_copy = min(len - pos, avail);
    5dc4:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    5dc8:	mov	r1, sl
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5dca:	rsb	fp, r0, r9
    5dce:	cmp	fp, r3
    5dd0:	it	ge
    5dd2:	movge	fp, r3
          memcpy(dst,src,to_copy);
    5dd4:	mov	r2, fp
          pos += to_copy;
    5dd6:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    5dd8:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5ddc:	ldr	r3, [r6, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    5dde:	add	sl, fp
          dst += to_copy;
    5de0:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5de2:	cmp	r3, r9
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5de4:	str	r3, [r6, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5de6:	bne.n	5dbc <MTPD::loop()+0xed4>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5de8:	movs	r2, #60	; 0x3c
    5dea:	mov.w	r1, #512	; 0x200
    5dee:	mov	r0, r5
    5df0:	bl	a000 <usb_mtp_send>
    5df4:	cmp	r0, #0
    5df6:	ble.n	5de8 <MTPD::loop()+0xf00>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    5df8:	str	r5, [r6, #0]
    5dfa:	b.n	5dbc <MTPD::loop()+0xed4>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5dfc:	ldr	r3, [r4, #4]
    5dfe:	cbnz	r3, 5e02 <MTPD::loop()+0xf1a>
    5e00:	str	r5, [r6, #0]
        write_length_ += len;
    5e02:	adds	r3, #4
        
        const char * src=data;
    5e04:	add.w	sl, sp, #96	; 0x60
        //
        int pos = 0; // into data
    5e08:	mov.w	r9, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    5e0c:	str	r3, [r4, #4]
    5e0e:	b.n	5e16 <MTPD::loop()+0xf2e>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    5e10:	cmp.w	r9, #3
    5e14:	bgt.n	5e56 <MTPD::loop()+0xf6e>
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    5e16:	ldr	r0, [r6, #0]
          int to_copy = min(len - pos, avail);
    5e18:	rsb	r3, r9, #4
          memcpy(dst,src,to_copy);
    5e1c:	mov	r1, sl
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5e1e:	rsb	fp, r0, r8
    5e22:	cmp	fp, r3
    5e24:	it	ge
    5e26:	movge	fp, r3
          memcpy(dst,src,to_copy);
    5e28:	mov	r2, fp
          pos += to_copy;
    5e2a:	add	r9, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    5e2c:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5e30:	ldr	r3, [r6, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    5e32:	add	sl, fp
          dst += to_copy;
    5e34:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5e36:	cmp	r3, r8
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5e38:	str	r3, [r6, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5e3a:	bne.n	5e10 <MTPD::loop()+0xf28>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5e3c:	movs	r2, #60	; 0x3c
    5e3e:	mov.w	r1, #512	; 0x200
    5e42:	mov	r0, r5
    5e44:	bl	a000 <usb_mtp_send>
    5e48:	cmp	r0, #0
    5e4a:	ble.n	5e3c <MTPD::loop()+0xf54>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    5e4c:	str	r5, [r6, #0]
    5e4e:	b.n	5e10 <MTPD::loop()+0xf28>
    5e50:	ldr	r3, [sp, #100]	; 0x64
    5e52:	str	r3, [sp, #28]
    5e54:	b.n	58c8 <MTPD::loop()+0x9e0>
    5e56:	ldr	r3, [pc, #220]	; (5f34 <MTPD::loop()+0x104c>)
    5e58:	ldr	r3, [r3, #0]
    5e5a:	b.n	59b0 <MTPD::loop()+0xac8>
    5e5c:	mov	r2, r6
    5e5e:	mov	r0, r4
    5e60:	add	r1, sp, #60	; 0x3c
    5e62:	bl	7c <MTPD::write(char const*, int) [clone .part.19]>
    5e66:	ldr	r2, [r4, #4]
    5e68:	ldrh	r3, [r4, #38]	; 0x26
    5e6a:	adds	r2, #12
    5e6c:	ldr	r0, [r4, #40]	; 0x28
    5e6e:	str	r2, [sp, #28]
    5e70:	b.w	5632 <MTPD::loop()+0x74a>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5e74:	ldr	r3, [r4, #4]
    5e76:	cbnz	r3, 5e7a <MTPD::loop()+0xf92>
    5e78:	str	r5, [r6, #0]
        write_length_ += len;
    5e7a:	adds	r3, #2
        
        const char * src=data;
    5e7c:	add.w	sl, sp, #64	; 0x40
        //
        int pos = 0; // into data
    5e80:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    5e84:	str	r3, [r4, #4]
    5e86:	b.n	5e8e <MTPD::loop()+0xfa6>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    5e88:	cmp.w	r8, #1
    5e8c:	bgt.n	5ec8 <MTPD::loop()+0xfe0>
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    5e8e:	ldr	r0, [r6, #0]
          int to_copy = min(len - pos, avail);
    5e90:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    5e94:	mov	r1, sl
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5e96:	rsb	fp, r0, r9
    5e9a:	cmp	fp, r3
    5e9c:	it	ge
    5e9e:	movge	fp, r3
          memcpy(dst,src,to_copy);
    5ea0:	mov	r2, fp
          pos += to_copy;
    5ea2:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    5ea4:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5ea8:	ldr	r3, [r6, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    5eaa:	add	sl, fp
          dst += to_copy;
    5eac:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5eae:	cmp	r3, r9
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5eb0:	str	r3, [r6, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5eb2:	bne.n	5e88 <MTPD::loop()+0xfa0>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5eb4:	movs	r2, #60	; 0x3c
    5eb6:	mov.w	r1, #512	; 0x200
    5eba:	mov	r0, r5
    5ebc:	bl	a000 <usb_mtp_send>
    5ec0:	cmp	r0, #0
    5ec2:	ble.n	5eb4 <MTPD::loop()+0xfcc>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    5ec4:	str	r5, [r6, #0]
    5ec6:	b.n	5e88 <MTPD::loop()+0xfa0>
    5ec8:	movw	r1, #65535	; 0xffff
    5ecc:	ldrb	r2, [r4, #0]
    5ece:	ldr	r3, [r4, #4]
    5ed0:	strh.w	r1, [sp, #66]	; 0x42
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    5ed4:	cmp	r2, #0
    5ed6:	bne.w	5894 <MTPD::loop()+0x9ac>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5eda:	cbnz	r3, 5ede <MTPD::loop()+0xff6>
    5edc:	str	r5, [r6, #0]
        write_length_ += len;
    5ede:	adds	r3, #2
        
        const char * src=data;
    5ee0:	add.w	sl, sp, #66	; 0x42
        //
        int pos = 0; // into data
    5ee4:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    5ee8:	str	r3, [r4, #4]
    5eea:	b.n	5ef2 <MTPD::loop()+0x100a>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    5eec:	cmp.w	r8, #1
    5ef0:	bgt.n	5f38 <MTPD::loop()+0x1050>
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    5ef2:	ldr	r0, [r6, #0]
          int to_copy = min(len - pos, avail);
    5ef4:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    5ef8:	mov	r1, sl
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5efa:	rsb	fp, r0, r9
    5efe:	cmp	fp, r3
    5f00:	it	ge
    5f02:	movge	fp, r3
          memcpy(dst,src,to_copy);
    5f04:	mov	r2, fp
          pos += to_copy;
    5f06:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    5f08:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5f0c:	ldr	r3, [r6, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    5f0e:	add	sl, fp
          dst += to_copy;
    5f10:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5f12:	cmp	r3, r9
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5f14:	str	r3, [r6, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5f16:	bne.n	5eec <MTPD::loop()+0x1004>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5f18:	movs	r2, #60	; 0x3c
    5f1a:	mov.w	r1, #512	; 0x200
    5f1e:	mov	r0, r5
    5f20:	bl	a000 <usb_mtp_send>
    5f24:	cmp	r0, #0
    5f26:	ble.n	5f18 <MTPD::loop()+0x1030>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    5f28:	str	r5, [r6, #0]
    5f2a:	b.n	5eec <MTPD::loop()+0x1004>
    5f2c:	.word	0x2000c650
    5f30:	.word	0x20004604
    5f34:	.word	0x20001934
    5f38:	movs	r1, #0
    5f3a:	ldrb	r2, [r4, #0]
    5f3c:	ldr	r3, [r4, #4]
    5f3e:	strb.w	r1, [sp, #61]	; 0x3d
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    5f42:	cmp	r2, #0
    5f44:	bne.w	589c <MTPD::loop()+0x9b4>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5f48:	cbnz	r3, 5f4c <MTPD::loop()+0x1064>
    5f4a:	str	r5, [r6, #0]
        write_length_ += len;
    5f4c:	adds	r3, #1
        
        const char * src=data;
    5f4e:	add.w	sl, sp, #61	; 0x3d
        //
        int pos = 0; // into data
    5f52:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    5f56:	str	r3, [r4, #4]
    5f58:	b.n	5f62 <MTPD::loop()+0x107a>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    5f5a:	cmp.w	r8, #0
    5f5e:	bgt.w	58a0 <MTPD::loop()+0x9b8>
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    5f62:	ldr	r0, [r6, #0]
          int to_copy = min(len - pos, avail);
    5f64:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    5f68:	mov	r1, sl
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5f6a:	rsb	fp, r0, r9
    5f6e:	cmp	fp, r3
    5f70:	it	ge
    5f72:	movge	fp, r3
          memcpy(dst,src,to_copy);
    5f74:	mov	r2, fp
          pos += to_copy;
    5f76:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    5f78:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5f7c:	ldr	r3, [r6, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    5f7e:	add	sl, fp
          dst += to_copy;
    5f80:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5f82:	cmp	r3, r9
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5f84:	str	r3, [r6, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5f86:	bne.n	5f5a <MTPD::loop()+0x1072>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5f88:	movs	r2, #60	; 0x3c
    5f8a:	mov.w	r1, #512	; 0x200
    5f8e:	mov	r0, r5
    5f90:	bl	a000 <usb_mtp_send>
    5f94:	cmp	r0, #0
    5f96:	ble.n	5f88 <MTPD::loop()+0x10a0>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    5f98:	str	r5, [r6, #0]
    5f9a:	b.n	5f5a <MTPD::loop()+0x1072>
    5f9c:	movs	r3, #7
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    5f9e:	ldrb	r1, [r4, #0]
    5fa0:	strb.w	r3, [sp, #63]	; 0x3f
      {
        write_length_ += len;
    5fa4:	ldr	r3, [r4, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    5fa6:	cmp	r1, #0
    5fa8:	beq.w	6162 <MTPD::loop()+0x127a>
      {
        write_length_ += len;
    5fac:	adds	r3, #1
    5fae:	str	r3, [r4, #4]
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
    5fb0:	ldr	r0, [pc, #544]	; (61d4 <MTPD::loop()+0x12ec>)
    5fb2:	movs	r2, #84	; 0x54
    5fb4:	str	r7, [sp, #28]
    5fb6:	mov	fp, r0
    5fb8:	b.n	5fc4 <MTPD::loop()+0x10dc>
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    5fba:	adds	r3, #2
    5fbc:	str	r3, [r4, #4]
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    5fbe:	ldrb.w	r2, [fp, #1]!
    5fc2:	cbz	r2, 602a <MTPD::loop()+0x1142>
    5fc4:	strh.w	r2, [sp, #74]	; 0x4a
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    5fc8:	cmp	r1, #0
    5fca:	bne.n	5fba <MTPD::loop()+0x10d2>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5fcc:	cbz	r3, 6024 <MTPD::loop()+0x113c>
    5fce:	ldr	r0, [r6, #0]
        write_length_ += len;
    5fd0:	adds	r3, #2
        
        const char * src=data;
    5fd2:	add.w	r9, sp, #74	; 0x4a
        //
        int pos = 0; // into data
    5fd6:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    5fda:	str	r3, [r4, #4]
    5fdc:	b.n	5fe6 <MTPD::loop()+0x10fe>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    5fde:	cmp.w	r8, #1
    5fe2:	bgt.n	601e <MTPD::loop()+0x1136>
    5fe4:	ldr	r0, [r6, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5fe6:	rsb	r7, r0, sl
    5fea:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    5fee:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5ff0:	cmp	r7, r3
    5ff2:	it	ge
    5ff4:	movge	r7, r3
          memcpy(dst,src,to_copy);
    5ff6:	mov	r2, r7
          pos += to_copy;
    5ff8:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    5ffa:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5ffe:	ldr	r3, [r6, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    6000:	add	r9, r7
          dst += to_copy;
    6002:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    6004:	cmp	r7, sl
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    6006:	str	r7, [r6, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    6008:	bne.n	5fde <MTPD::loop()+0x10f6>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    600a:	movs	r2, #60	; 0x3c
    600c:	mov.w	r1, #512	; 0x200
    6010:	mov	r0, r5
    6012:	bl	a000 <usb_mtp_send>
    6016:	cmp	r0, #0
    6018:	ble.n	600a <MTPD::loop()+0x1122>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    601a:	str	r5, [r6, #0]
    601c:	b.n	5fde <MTPD::loop()+0x10f6>
    601e:	ldrb	r1, [r4, #0]
    6020:	ldr	r3, [r4, #4]
    6022:	b.n	5fbe <MTPD::loop()+0x10d6>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    6024:	mov	r0, r5
    6026:	str	r5, [r6, #0]
    6028:	b.n	5fd0 <MTPD::loop()+0x10e8>
    602a:	ldr	r7, [sp, #28]
    602c:	strh.w	r2, [sp, #72]	; 0x48
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    6030:	cmp	r1, #0
    6032:	beq.n	6108 <MTPD::loop()+0x1220>
      {
        write_length_ += len;
    6034:	adds	r3, #2
    6036:	ldr	r2, [sp, #100]	; 0x64
    6038:	str	r3, [r4, #4]
    603a:	str	r2, [sp, #28]
    603c:	b.w	5836 <MTPD::loop()+0x94e>
    6040:	ldr	r4, [sp, #36]	; 0x24
  }

  void GetObjectHandles(uint32_t storage, uint32_t parent) 
  { uint32_t store = Storage2Store(storage);

    if (write_get_length_) {
    6042:	ldrb	r3, [r4, #0]
    6044:	cmp	r3, #0
    6046:	bne.n	60d2 <MTPD::loop()+0x11ea>
{
   char name[80];
   zeroFS_class *zFs_ = zFS;

public:
    uint32_t Count(uint32_t store,uint32_t parent) {return zFs_[store].Count(parent);}
    6048:	ldr	r3, [sp, #28]
    604a:	mov	r1, r8
    604c:	ldr	r0, [r3, #80]	; 0x50
    604e:	ldr	r3, [sp, #32]
    6050:	add	r0, r3
    6052:	bl	6b14 <zeroFS_class::Count(unsigned long)>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    6056:	ldrb	r3, [r4, #0]
    6058:	str	r0, [sp, #92]	; 0x5c
    605a:	cmp	r3, #0
    605c:	beq.w	61c6 <MTPD::loop()+0x12de>
      {
        write_length_ += len;
    6060:	ldr	r3, [r4, #4]
    6062:	adds	r3, #4
    6064:	str	r3, [r4, #4]
   char name[80];
   zeroFS_class *zFs_ = zFS;

public:
    uint32_t Count(uint32_t store,uint32_t parent) {return zFs_[store].Count(parent);}
    uint32_t Next(uint32_t store) {return zFs_[store].Next();}
    6066:	ldr	r3, [sp, #28]
    6068:	ldr	r0, [r3, #80]	; 0x50
    606a:	ldr	r3, [sp, #32]
    606c:	add	r0, r3
    606e:	bl	6b88 <zeroFS_class::Next()>
    {
      uint32_t num=0;
      num=GetNumObjects(storage,parent);
      write32(num);
      uint32_t handle;
      while((handle=mFS.Next(store))) write32(handle);
    6072:	cmp	r0, #0
    6074:	beq.n	60e6 <MTPD::loop()+0x11fe>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    6076:	ldrb	r3, [r4, #0]
    6078:	str	r0, [sp, #88]	; 0x58
    607a:	cmp	r3, #0
    607c:	bne.n	6060 <MTPD::loop()+0x1178>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    607e:	ldr	r3, [r4, #4]
    6080:	cbnz	r3, 6084 <MTPD::loop()+0x119c>
    6082:	str	r5, [r6, #0]
        write_length_ += len;
    6084:	adds	r3, #4
        
        const char * src=data;
    6086:	add.w	r9, sp, #88	; 0x58
        //
        int pos = 0; // into data
    608a:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    608e:	str	r3, [r4, #4]
    6090:	b.n	6098 <MTPD::loop()+0x11b0>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    6092:	cmp.w	r8, #3
    6096:	bgt.n	6066 <MTPD::loop()+0x117e>
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    6098:	ldr	r0, [r6, #0]
          int to_copy = min(len - pos, avail);
    609a:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    609e:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    60a0:	rsb	fp, r0, sl
    60a4:	cmp	fp, r3
    60a6:	it	ge
    60a8:	movge	fp, r3
          memcpy(dst,src,to_copy);
    60aa:	mov	r2, fp
          pos += to_copy;
    60ac:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    60ae:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    60b2:	ldr	r3, [r6, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    60b4:	add	r9, fp
          dst += to_copy;
    60b6:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    60b8:	cmp	r3, sl
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    60ba:	str	r3, [r6, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    60bc:	bne.n	6092 <MTPD::loop()+0x11aa>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    60be:	movs	r2, #60	; 0x3c
    60c0:	mov.w	r1, #512	; 0x200
    60c4:	mov	r0, r5
    60c6:	bl	a000 <usb_mtp_send>
    60ca:	cmp	r0, #0
    60cc:	ble.n	60be <MTPD::loop()+0x11d6>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    60ce:	str	r5, [r6, #0]
    60d0:	b.n	6092 <MTPD::loop()+0x11aa>
{
   char name[80];
   zeroFS_class *zFs_ = zFS;

public:
    uint32_t Count(uint32_t store,uint32_t parent) {return zFs_[store].Count(parent);}
    60d2:	ldr	r3, [sp, #28]
    60d4:	mov	r1, r8
    60d6:	ldr	r0, [r3, #80]	; 0x50
    60d8:	ldr	r3, [sp, #32]
    60da:	add	r0, r3
    60dc:	bl	6b14 <zeroFS_class::Count(unsigned long)>
  { uint32_t store = Storage2Store(storage);

    if (write_get_length_) {
      write_length_ = GetNumObjects(storage, parent);
      write_length_++;
      write_length_ *= 4;
    60e0:	adds	r0, #1
    60e2:	lsls	r3, r0, #2
    60e4:	str	r3, [r4, #4]
          case 0x1007:  // GetObjectHandles
            if (p2) 
            { return_code = 0x2014; // spec by format unsupported
            } else 
            { 
              TRANSMIT(GetObjectHandles(p1, p3));
    60e6:	ldr	r6, [sp, #100]	; 0x64
    60e8:	ubfx	r6, r6, #0, #9
    60ec:	cmp	r6, #0
    60ee:	beq.w	53e2 <MTPD::loop()+0x4fa>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    60f2:	movs	r2, #60	; 0x3c
    60f4:	mov	r1, r6
    60f6:	mov	r0, r5
    60f8:	bl	a000 <usb_mtp_send>
    60fc:	cmp	r0, #0
    60fe:	ble.n	60f2 <MTPD::loop()+0x120a>
    6100:	b.w	53e2 <MTPD::loop()+0x4fa>
    6104:	ldr	r6, [pc, #208]	; (61d8 <MTPD::loop()+0x12f0>)
    6106:	b.n	5932 <MTPD::loop()+0xa4a>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    6108:	cbnz	r3, 610c <MTPD::loop()+0x1224>
    610a:	str	r5, [r6, #0]
        write_length_ += len;
    610c:	adds	r3, #2
        
        const char * src=data;
    610e:	add.w	r9, sp, #72	; 0x48
        //
        int pos = 0; // into data
    6112:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    6116:	str	r3, [r4, #4]
    6118:	b.n	6120 <MTPD::loop()+0x1238>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    611a:	cmp.w	r8, #1
    611e:	bgt.n	615a <MTPD::loop()+0x1272>
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    6120:	ldr	r0, [r6, #0]
          int to_copy = min(len - pos, avail);
    6122:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    6126:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    6128:	rsb	fp, r0, sl
    612c:	cmp	fp, r3
    612e:	it	ge
    6130:	movge	fp, r3
          memcpy(dst,src,to_copy);
    6132:	mov	r2, fp
          pos += to_copy;
    6134:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    6136:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    613a:	ldr	r3, [r6, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    613c:	add	r9, fp
          dst += to_copy;
    613e:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    6140:	cmp	r3, sl
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    6142:	str	r3, [r6, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    6144:	bne.n	611a <MTPD::loop()+0x1232>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    6146:	movs	r2, #60	; 0x3c
    6148:	mov.w	r1, #512	; 0x200
    614c:	mov	r0, r5
    614e:	bl	a000 <usb_mtp_send>
    6152:	cmp	r0, #0
    6154:	ble.n	6146 <MTPD::loop()+0x125e>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    6156:	str	r5, [r6, #0]
    6158:	b.n	611a <MTPD::loop()+0x1232>
    615a:	ldr	r3, [sp, #100]	; 0x64
    615c:	str	r3, [sp, #28]
    615e:	b.w	5836 <MTPD::loop()+0x94e>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    6162:	cbnz	r3, 6166 <MTPD::loop()+0x127e>
    6164:	str	r5, [r6, #0]
        write_length_ += len;
    6166:	adds	r3, #1
        
        const char * src=data;
    6168:	add.w	r9, sp, #63	; 0x3f
        //
        int pos = 0; // into data
    616c:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    6170:	str	r3, [r4, #4]
    6172:	b.n	617a <MTPD::loop()+0x1292>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    6174:	cmp.w	r8, #0
    6178:	bgt.n	61b4 <MTPD::loop()+0x12cc>
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    617a:	ldr	r0, [r6, #0]
          int to_copy = min(len - pos, avail);
    617c:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    6180:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    6182:	rsb	fp, r0, sl
    6186:	cmp	fp, r3
    6188:	it	ge
    618a:	movge	fp, r3
          memcpy(dst,src,to_copy);
    618c:	mov	r2, fp
          pos += to_copy;
    618e:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    6190:	bl	80b4 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    6194:	ldr	r3, [r6, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    6196:	add	r9, fp
          dst += to_copy;
    6198:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    619a:	cmp	r3, sl
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    619c:	str	r3, [r6, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    619e:	bne.n	6174 <MTPD::loop()+0x128c>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    61a0:	movs	r2, #60	; 0x3c
    61a2:	mov.w	r1, #512	; 0x200
    61a6:	mov	r0, r5
    61a8:	bl	a000 <usb_mtp_send>
    61ac:	cmp	r0, #0
    61ae:	ble.n	61a0 <MTPD::loop()+0x12b8>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    61b0:	str	r5, [r6, #0]
    61b2:	b.n	6174 <MTPD::loop()+0x128c>
    61b4:	ldr	r3, [r4, #4]
    61b6:	ldrb	r1, [r4, #0]
    61b8:	b.n	5fb0 <MTPD::loop()+0x10c8>
    61ba:	add.w	r3, r4, #1056	; 0x420
    61be:	add.w	r9, r4, #544	; 0x220
    61c2:	str	r3, [sp, #40]	; 0x28
    61c4:	b.n	5a68 <MTPD::loop()+0xb80>
    61c6:	movs	r2, #4
    61c8:	add	r1, sp, #92	; 0x5c
    61ca:	mov	r0, r4
    61cc:	bl	7c <MTPD::write(char const*, int) [clone .part.19]>
    61d0:	b.n	6066 <MTPD::loop()+0x117e>
    61d2:	nop
    61d4:	.word	0x20000bdc
    61d8:	.word	0x20004604

000061dc <loop>:
uint16_t open2=0;
uint16_t open3=0;
uint32_t ncount=0;

extern "C" void loop() 
{
    61dc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(mode==0) // we are only addressing MTP
    61e0:	ldr	r4, [pc, #452]	; (63a8 <loop+0x1cc>)
uint16_t open2=0;
uint16_t open3=0;
uint32_t ncount=0;

extern "C" void loop() 
{
    61e2:	sub	sp, #88	; 0x58
  if(mode==0) // we are only addressing MTP
    61e4:	ldr	r3, [r4, #0]
    61e6:	cbz	r3, 6230 <loop+0x54>
  return 1;
}
int newFile()
{
  static int16_t old=-1;
  int16_t x = second()/20;
    61e8:	bl	66c4 <second()>
    61ec:	ldr	r1, [pc, #444]	; (63ac <loop+0x1d0>)
    61ee:	asrs	r3, r0, #31
  if( x == old) return 0;
    61f0:	ldr	r2, [pc, #444]	; (63b0 <loop+0x1d4>)
  return 1;
}
int newFile()
{
  static int16_t old=-1;
  int16_t x = second()/20;
    61f2:	smull	r1, r0, r1, r0
  if( x == old) return 0;
    61f6:	ldrsh.w	r1, [r2]
  return 1;
}
int newFile()
{
  static int16_t old=-1;
  int16_t x = second()/20;
    61fa:	rsb	r3, r3, r0, asr #3
    61fe:	sxth	r3, r3
  if( x == old) return 0;
    6200:	cmp	r1, r3
    6202:	beq.n	623c <loop+0x60>
  }
  else
  { uint32_t nbuf=NDAT;
    if(newFile())
    { 
      if(open3) 
    6204:	ldr	r5, [pc, #428]	; (63b4 <loop+0x1d8>)
int newFile()
{
  static int16_t old=-1;
  int16_t x = second()/20;
  if( x == old) return 0;
  old=x;
    6206:	strh	r3, [r2, #0]
  }
  else
  { uint32_t nbuf=NDAT;
    if(newFile())
    { 
      if(open3) 
    6208:	ldrh	r3, [r5, #0]
    620a:	cmp	r3, #0
    620c:	bne.w	635e <loop+0x182>
    6210:	ldr	r6, [pc, #420]	; (63b8 <loop+0x1dc>)
        t3=micros();
        Serial.printf(" %7d %7d %7d %7d\n",tmn,tmx,(t3-t0), ncount);
      }

      // do we have space for new file?
      if(zFS[0].writeSector()>zFS[0].totalSectors()- 100000) 
    6212:	ldr	r3, [pc, #424]	; (63bc <loop+0x1e0>)
    6214:	ldr	r1, [r6, #24]
    6216:	ldr	r2, [r6, #4]
    6218:	add	r3, r1
    621a:	cmp	r3, r2
    621c:	bcs.n	6290 <loop+0xb4>
      { 
        open1=0;
    621e:	movs	r3, #0
    6220:	ldr	r1, [pc, #412]	; (63c0 <loop+0x1e4>)
        open2=0;
    6222:	ldr	r2, [pc, #416]	; (63c4 <loop+0x1e8>)
      }

      // do we have space for new file?
      if(zFS[0].writeSector()>zFS[0].totalSectors()- 100000) 
      { 
        open1=0;
    6224:	strh	r3, [r1, #0]
        open2=0;
        // find new disk
        // not found
        mode=0; 
    6226:	str	r3, [r4, #0]

      // do we have space for new file?
      if(zFS[0].writeSector()>zFS[0].totalSectors()- 100000) 
      { 
        open1=0;
        open2=0;
    6228:	strh	r3, [r2, #0]
    tx=micros()-tx;
    if(tx>tmx) tmx=tx;
    if(tx<tmn) tmn=tx;
    ncount++;
  }
}
    622a:	add	sp, #88	; 0x58
    622c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

extern "C" void loop() 
{
  if(mode==0) // we are only addressing MTP
  {
    mtpd.loop();
    6230:	ldr	r0, [pc, #404]	; (63c8 <loop+0x1ec>)
    6232:	bl	4ee8 <MTPD::loop()>
    tx=micros()-tx;
    if(tx>tmx) tmx=tx;
    if(tx<tmn) tmn=tx;
    ncount++;
  }
}
    6236:	add	sp, #88	; 0x58
    6238:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  {
    mtpd.loop();
    return;
  }
  else
  { uint32_t nbuf=NDAT;
    623c:	mov.w	r4, #32768	; 0x8000
    6240:	ldr.w	r8, [pc, #408]	; 63dc <loop+0x200>
    6244:	ldr	r7, [pc, #388]	; (63cc <loop+0x1f0>)
    6246:	ldr	r6, [pc, #392]	; (63d0 <loop+0x1f4>)
    6248:	ldr	r2, [pc, #392]	; (63d4 <loop+0x1f8>)
uint16_t open2=0;
uint16_t open3=0;
uint32_t ncount=0;

extern "C" void loop() 
{
    624a:	movs	r3, #0
      tmn=0xFFFFFFFF;
      tmx=0;
    }

    // fetch and store data
    for(int nn=0; nn<nbuf; nn++) data[nn]=(nn)%256;
    624c:	strb.w	r3, [r2, #1]!
    6250:	adds	r3, #1
    6252:	cmp	r4, r3
    6254:	bne.n	624c <loop+0x70>
    uint32_t tx = micros();
    6256:	bl	9340 <micros>
    625a:	mov	r5, r0
    zFS[0].Write((void *)data,nbuf);
    625c:	mov	r2, r4
    625e:	ldr	r1, [pc, #376]	; (63d8 <loop+0x1fc>)
    6260:	ldr	r0, [pc, #340]	; (63b8 <loop+0x1dc>)
    6262:	bl	6ad8 <zeroFS_class::Write(void*, unsigned long)>
    tx=micros()-tx;
    6266:	bl	9340 <micros>
    if(tx>tmx) tmx=tx;
    626a:	ldr.w	r3, [r8]

    // fetch and store data
    for(int nn=0; nn<nbuf; nn++) data[nn]=(nn)%256;
    uint32_t tx = micros();
    zFS[0].Write((void *)data,nbuf);
    tx=micros()-tx;
    626e:	subs	r0, r0, r5
    if(tx>tmx) tmx=tx;
    6270:	ldr	r2, [pc, #360]	; (63dc <loop+0x200>)
    6272:	cmp	r0, r3
    if(tx<tmn) tmn=tx;
    6274:	ldr	r3, [r7, #0]
    // fetch and store data
    for(int nn=0; nn<nbuf; nn++) data[nn]=(nn)%256;
    uint32_t tx = micros();
    zFS[0].Write((void *)data,nbuf);
    tx=micros()-tx;
    if(tx>tmx) tmx=tx;
    6276:	it	hi
    6278:	strhi	r0, [r2, #0]
    if(tx<tmn) tmn=tx;
    627a:	cmp	r0, r3
    ncount++;
    627c:	ldr	r3, [r6, #0]
    for(int nn=0; nn<nbuf; nn++) data[nn]=(nn)%256;
    uint32_t tx = micros();
    zFS[0].Write((void *)data,nbuf);
    tx=micros()-tx;
    if(tx>tmx) tmx=tx;
    if(tx<tmn) tmn=tx;
    627e:	ldr	r2, [pc, #332]	; (63cc <loop+0x1f0>)
    ncount++;
    6280:	add.w	r3, r3, #1
    for(int nn=0; nn<nbuf; nn++) data[nn]=(nn)%256;
    uint32_t tx = micros();
    zFS[0].Write((void *)data,nbuf);
    tx=micros()-tx;
    if(tx>tmx) tmx=tx;
    if(tx<tmn) tmn=tx;
    6284:	it	cc
    6286:	strcc	r0, [r2, #0]
    ncount++;
    6288:	str	r3, [r6, #0]
  }
}
    628a:	add	sp, #88	; 0x58
    628c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

int newDay(int reset=0)
{
  static int16_t old=-1;
  if(reset) {old=-1; return 1;} 
  int16_t x = day();
    6290:	bl	66e4 <day()>
  if(x == old) return 0;
    6294:	ldr	r3, [pc, #328]	; (63e0 <loop+0x204>)

int newDay(int reset=0)
{
  static int16_t old=-1;
  if(reset) {old=-1; return 1;} 
  int16_t x = day();
    6296:	sxth	r0, r0
  if(x == old) return 0;
    6298:	ldrsh.w	r2, [r3]
    629c:	cmp	r2, r0
    629e:	beq.n	6390 <loop+0x1b4>
        return;
      }

      if(newDay())
      { // new day
        if(open1) zFS[0].Close(T_DAY); // close directory if required
    62a0:	ldr	r7, [pc, #284]	; (63c0 <loop+0x1e4>)
{
  static int16_t old=-1;
  if(reset) {old=-1; return 1;} 
  int16_t x = day();
  if(x == old) return 0;
  old=x;
    62a2:	strh	r0, [r3, #0]
        return;
      }

      if(newDay())
      { // new day
        if(open1) zFS[0].Close(T_DAY); // close directory if required
    62a4:	ldrh	r3, [r7, #0]
    62a6:	cmp	r3, #0
    62a8:	bne.n	639e <loop+0x1c2>
        char dayName[80];
        sprintf(dayName,"Day_%04d%02d%02d",year(),month(),day());
    62aa:	bl	6724 <year()>
    62ae:	add	r4, sp, #8
    62b0:	mov	r8, r0
    62b2:	bl	6704 <month()>
    62b6:	mov	r6, r0
    62b8:	bl	66e4 <day()>
    62bc:	mov	r2, r8
    62be:	str	r0, [sp, #0]
    62c0:	mov	r3, r6
    62c2:	ldr	r1, [pc, #288]	; (63e4 <loop+0x208>)
    62c4:	mov	r0, r4
    62c6:	bl	be94 <sprintf>
        zFS[0].Create(T_DAY, dayName);
    62ca:	mov	r2, r4
    62cc:	movs	r1, #1
    62ce:	ldr	r0, [pc, #232]	; (63b8 <loop+0x1dc>)
    62d0:	bl	6880 <zeroFS_class::Create(HDR_TYPE, char const*)>
        open1=1;
    62d4:	movs	r3, #1
    62d6:	strh	r3, [r7, #0]
}
int newHour(int reset=0)
{
  static int16_t old=-1;
  if(reset) {old=-1; return 1;} 
  int16_t x = hour();
    62d8:	bl	6684 <hour()>
  if(x == old) return 0;
    62dc:	ldr	r3, [pc, #264]	; (63e8 <loop+0x20c>)
}
int newHour(int reset=0)
{
  static int16_t old=-1;
  if(reset) {old=-1; return 1;} 
  int16_t x = hour();
    62de:	sxth	r0, r0
  if(x == old) return 0;
    62e0:	ldrsh.w	r2, [r3]
    62e4:	cmp	r2, r0
    62e6:	beq.n	630e <loop+0x132>
        open1=1;
      }

      if(newHour())
      { // new day
        if(open2) zFS[0].Close(T_HOUR); // close directory if required
    62e8:	ldr	r6, [pc, #216]	; (63c4 <loop+0x1e8>)
{
  static int16_t old=-1;
  if(reset) {old=-1; return 1;} 
  int16_t x = hour();
  if(x == old) return 0;
  old=x;
    62ea:	strh	r0, [r3, #0]
        open1=1;
      }

      if(newHour())
      { // new day
        if(open2) zFS[0].Close(T_HOUR); // close directory if required
    62ec:	ldrh	r3, [r6, #0]
    62ee:	cmp	r3, #0
    62f0:	bne.n	6394 <loop+0x1b8>
        char hourName[80];
        sprintf(hourName,"Hour_%02d",hour());
    62f2:	bl	6684 <hour()>
    62f6:	ldr	r1, [pc, #244]	; (63ec <loop+0x210>)
    62f8:	mov	r2, r0
    62fa:	mov	r0, r4
    62fc:	bl	be94 <sprintf>
        zFS[0].Create(T_HOUR,hourName);
    6300:	mov	r2, r4
    6302:	movs	r1, #2
    6304:	ldr	r0, [pc, #176]	; (63b8 <loop+0x1dc>)
    6306:	bl	6880 <zeroFS_class::Create(HDR_TYPE, char const*)>
        open2=1;
    630a:	movs	r3, #1
    630c:	strh	r3, [r6, #0]
      }

      // new file
      char filename[80];
      sprintf(filename,"File_%02d%02d%02d.dat",hour(),minute(),second());
    630e:	bl	6684 <hour()>
    6312:	mov	r7, r0
    6314:	bl	66a4 <minute()>
    6318:	mov	r6, r0
    631a:	bl	66c4 <second()>
    631e:	mov	r2, r7
    6320:	mov	r3, r6
    6322:	ldr	r1, [pc, #204]	; (63f0 <loop+0x214>)
    6324:	str	r0, [sp, #0]
    6326:	mov	r0, r4
    6328:	bl	be94 <sprintf>
      t0 = micros();
      zFS[0].Create(T_FILE,filename);
      open3=1;
      nbuf=NDAT-512;
      ncount=0;
    632c:	ldr	r6, [pc, #160]	; (63d0 <loop+0x1f4>)
      }

      // new file
      char filename[80];
      sprintf(filename,"File_%02d%02d%02d.dat",hour(),minute(),second());
      t0 = micros();
    632e:	bl	9340 <micros>
    6332:	ldr	r3, [pc, #192]	; (63f4 <loop+0x218>)
      zFS[0].Create(T_FILE,filename);
    6334:	mov	r2, r4
    6336:	movs	r1, #3
      }

      // new file
      char filename[80];
      sprintf(filename,"File_%02d%02d%02d.dat",hour(),minute(),second());
      t0 = micros();
    6338:	str	r0, [r3, #0]
      zFS[0].Create(T_FILE,filename);
      open3=1;
      nbuf=NDAT-512;
    633a:	mov.w	r4, #32256	; 0x7e00

      // new file
      char filename[80];
      sprintf(filename,"File_%02d%02d%02d.dat",hour(),minute(),second());
      t0 = micros();
      zFS[0].Create(T_FILE,filename);
    633e:	ldr	r0, [pc, #120]	; (63b8 <loop+0x1dc>)
    6340:	bl	6880 <zeroFS_class::Create(HDR_TYPE, char const*)>
      open3=1;
      nbuf=NDAT-512;
      ncount=0;

      tmn=0xFFFFFFFF;
      tmx=0;
    6344:	ldr.w	r8, [pc, #148]	; 63dc <loop+0x200>
      sprintf(filename,"File_%02d%02d%02d.dat",hour(),minute(),second());
      t0 = micros();
      zFS[0].Create(T_FILE,filename);
      open3=1;
      nbuf=NDAT-512;
      ncount=0;
    6348:	movs	r3, #0
      // new file
      char filename[80];
      sprintf(filename,"File_%02d%02d%02d.dat",hour(),minute(),second());
      t0 = micros();
      zFS[0].Create(T_FILE,filename);
      open3=1;
    634a:	movs	r1, #1
      nbuf=NDAT-512;
      ncount=0;

      tmn=0xFFFFFFFF;
    634c:	ldr	r7, [pc, #124]	; (63cc <loop+0x1f0>)
    634e:	mov.w	r2, #4294967295
      // new file
      char filename[80];
      sprintf(filename,"File_%02d%02d%02d.dat",hour(),minute(),second());
      t0 = micros();
      zFS[0].Create(T_FILE,filename);
      open3=1;
    6352:	strh	r1, [r5, #0]
      nbuf=NDAT-512;
      ncount=0;
    6354:	str	r3, [r6, #0]

      tmn=0xFFFFFFFF;
      tmx=0;
    6356:	str.w	r3, [r8]
      zFS[0].Create(T_FILE,filename);
      open3=1;
      nbuf=NDAT-512;
      ncount=0;

      tmn=0xFFFFFFFF;
    635a:	str	r2, [r7, #0]
    635c:	b.n	6248 <loop+0x6c>
  { uint32_t nbuf=NDAT;
    if(newFile())
    { 
      if(open3) 
      { // have file open, so close it
        zFS[0].Close(T_FILE);
    635e:	movs	r1, #3
    6360:	ldr	r0, [pc, #84]	; (63b8 <loop+0x1dc>)
    6362:	bl	6a50 <zeroFS_class::Close(HDR_TYPE)>
        t3=micros();
    6366:	ldr	r7, [pc, #144]	; (63f8 <loop+0x21c>)
    6368:	bl	9340 <micros>
        Serial.printf(" %7d %7d %7d %7d\n",tmn,tmx,(t3-t0), ncount);
    636c:	ldr	r2, [pc, #132]	; (63f4 <loop+0x218>)
    if(newFile())
    { 
      if(open3) 
      { // have file open, so close it
        zFS[0].Close(T_FILE);
        t3=micros();
    636e:	mov	r6, r0
        Serial.printf(" %7d %7d %7d %7d\n",tmn,tmx,(t3-t0), ncount);
    6370:	ldr	r0, [pc, #92]	; (63d0 <loop+0x1f4>)
    6372:	ldr	r1, [r2, #0]
    6374:	ldr	r0, [r0, #0]
    6376:	subs	r1, r6, r1
    6378:	ldr	r3, [pc, #96]	; (63dc <loop+0x200>)
    637a:	ldr	r2, [pc, #80]	; (63cc <loop+0x1f0>)
    637c:	ldr	r3, [r3, #0]
    637e:	ldr	r2, [r2, #0]
    6380:	str	r1, [sp, #0]
    6382:	str	r0, [sp, #4]
    6384:	ldr	r1, [pc, #116]	; (63fc <loop+0x220>)
    if(newFile())
    { 
      if(open3) 
      { // have file open, so close it
        zFS[0].Close(T_FILE);
        t3=micros();
    6386:	str	r6, [r7, #0]
        Serial.printf(" %7d %7d %7d %7d\n",tmn,tmx,(t3-t0), ncount);
    6388:	ldr	r0, [pc, #116]	; (6400 <loop+0x224>)
    638a:	bl	a3a0 <Print::printf(char const*, ...)>
    638e:	b.n	6210 <loop+0x34>
    6390:	add	r4, sp, #8
    6392:	b.n	62d8 <loop+0xfc>
        open1=1;
      }

      if(newHour())
      { // new day
        if(open2) zFS[0].Close(T_HOUR); // close directory if required
    6394:	movs	r1, #2
    6396:	ldr	r0, [pc, #32]	; (63b8 <loop+0x1dc>)
    6398:	bl	6a50 <zeroFS_class::Close(HDR_TYPE)>
    639c:	b.n	62f2 <loop+0x116>
        return;
      }

      if(newDay())
      { // new day
        if(open1) zFS[0].Close(T_DAY); // close directory if required
    639e:	mov	r0, r6
    63a0:	movs	r1, #1
    63a2:	bl	6a50 <zeroFS_class::Close(HDR_TYPE)>
    63a6:	b.n	62aa <loop+0xce>
    63a8:	.word	0x2000c6a4
    63ac:	.word	0x66666667
    63b0:	.word	0x20001954
    63b4:	.word	0x2000f1b2
    63b8:	.word	0x2000c738
    63bc:	.word	0xfffe7960
    63c0:	.word	0x2000f1ae
    63c4:	.word	0x2000f1b0
    63c8:	.word	0x20001ec0
    63cc:	.word	0x20001938
    63d0:	.word	0x2000c6ac
    63d4:	.word	0x2000463b
    63d8:	.word	0x2000463c
    63dc:	.word	0x2000c72c
    63e0:	.word	0x20001952
    63e4:	.word	0x20000c1c
    63e8:	.word	0x20001956
    63ec:	.word	0x20000c30
    63f0:	.word	0x20000c3c
    63f4:	.word	0x2000c724
    63f8:	.word	0x2000c728
    63fc:	.word	0x20000c08
    6400:	.word	0x20001388

00006404 <_GLOBAL__sub_I_zFS>:
    tx=micros()-tx;
    if(tx>tmx) tmx=tx;
    if(tx<tmn) tmn=tx;
    ncount++;
  }
}
    6404:	push	{r4, lr}
} HDR_TYPE;

#define Sector2Index(x) (x>>4)
#define Index2Sector(x) (x<<4)

class zeroFS_class
    6406:	movw	r0, #8816	; 0x2270
    640a:	ldr	r4, [pc, #32]	; (642c <_GLOBAL__sub_I_zFS+0x28>)
    640c:	mov.w	r2, #2048	; 0x800
    6410:	movs	r1, #0
    6412:	add	r0, r4
    6414:	bl	b9ec <memset>
#define MTP_SERNR "1234"
#define MTP_NAME  "Teensy"

#define USE_EVENTS 1

class MTPD {
    6418:	ldr	r3, [pc, #20]	; (6430 <_GLOBAL__sub_I_zFS+0x2c>)
    641a:	movs	r2, #0

#include "zeroFS.h"

extern zeroFS_class zFS[];

class mtpFS
    641c:	ldr	r0, [pc, #20]	; (6434 <_GLOBAL__sub_I_zFS+0x30>)
#define MTP_SERNR "1234"
#define MTP_NAME  "Teensy"

#define USE_EVENTS 1

class MTPD {
    641e:	movw	r1, #9248	; 0x2420

#include "zeroFS.h"

extern zeroFS_class zFS[];

class mtpFS
    6422:	str	r4, [r0, #80]	; 0x50
#define MTP_SERNR "1234"
#define MTP_NAME  "Teensy"

#define USE_EVENTS 1

class MTPD {
    6424:	strb	r2, [r3, #0]
    6426:	str	r2, [r3, #4]
    6428:	str	r2, [r3, r1]
    642a:	pop	{r4, pc}
    642c:	.word	0x2000c738
    6430:	.word	0x20001ec0
    6434:	.word	0x2000c650

00006438 <breakTime(long, tmElements_t&)>:
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
    6438:	ldr	r3, [pc, #392]	; (65c4 <breakTime(long, tmElements_t&)+0x18c>)
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    643a:	ldr	r2, [pc, #396]	; (65c8 <breakTime(long, tmElements_t&)+0x190>)
  time /= 24; // now it is days
    643c:	umull	r3, ip, r3, r0
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    6440:	ldr	r3, [pc, #392]	; (65cc <breakTime(long, tmElements_t&)+0x194>)
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
    6442:	mov.w	ip, ip, lsr #16
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0
 
void breakTime(time_t timeInput, tmElements_t &tm){
    6446:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    644a:	umull	r4, r8, r3, r0
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    644e:	add.w	lr, ip, #4
    6452:	ldr	r6, [pc, #380]	; (65d0 <breakTime(long, tmElements_t&)+0x198>)
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    6454:	umull	r4, r2, r2, r0
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    6458:	mov.w	r8, r8, lsr #5
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    645c:	ldr.w	r9, [pc, #380]	; 65dc <breakTime(long, tmElements_t&)+0x1a4>
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    6460:	umull	r6, r7, lr, r6
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    6464:	lsrs	r2, r2, #11
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    6466:	umull	r4, r3, r3, r8
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    646a:	movs	r5, #0
    646c:	rsb	r4, r7, lr
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    6470:	umull	r9, r6, r9, r2
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    6474:	lsrs	r3, r3, #5
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    6476:	ldr.w	r9, [pc, #348]	; 65d4 <breakTime(long, tmElements_t&)+0x19c>
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    647a:	add.w	r4, r7, r4, lsr #1
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    647e:	mov.w	fp, #100	; 0x64
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    6482:	lsrs	r6, r6, #4
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    6484:	mov.w	sl, #400	; 0x190
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    6488:	lsrs	r4, r4, #2
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    648a:	rsb	r3, r3, r3, lsl #4
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    648e:	rsb	r4, r4, r4, lsl #3
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    6492:	add.w	r6, r6, r6, lsl #1
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    6496:	rsb	r4, r4, lr
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    649a:	rsb	r7, r8, r8, lsl #4
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    649e:	sub.w	r6, r2, r6, lsl #3
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
    64a2:	mov	r2, r5
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    64a4:	sub.w	r3, r8, r3, lsl #2
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    64a8:	adds	r4, #1
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    64aa:	sub.w	r0, r0, r7, lsl #2
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    64ae:	strb	r6, [r1, #2]
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    64b0:	strb	r3, [r1, #1]
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    64b2:	strb	r0, [r1, #0]
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    64b4:	strb	r4, [r1, #3]
    64b6:	uxtb	r7, r5
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    64b8:	movw	r4, #365	; 0x16d
    64bc:	addw	r3, r7, #1970	; 0x7b2
    64c0:	smull	r0, lr, r9, r3
    64c4:	ands.w	r8, r3, #3
    64c8:	mov.w	r0, r3, asr #31
    64cc:	rsb	r6, r0, lr, asr #5
    64d0:	bne.n	64ee <breakTime(long, tmElements_t&)+0xb6>
    64d2:	rsb	r0, r0, lr, asr #7
    64d6:	mls	r6, fp, r6, r3
    64da:	mov.w	r4, #366	; 0x16e
    64de:	mls	r0, sl, r0, r3
    64e2:	cbnz	r6, 64ee <breakTime(long, tmElements_t&)+0xb6>
    64e4:	cmp	r0, #0
    64e6:	movw	r0, #365	; 0x16d
    64ea:	it	ne
    64ec:	movne	r4, r0
    64ee:	add	r2, r4
    64f0:	adds	r5, #1
    64f2:	cmp	ip, r2
    64f4:	bcs.n	64b6 <breakTime(long, tmElements_t&)+0x7e>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
    64f6:	strb	r7, [r1, #6]
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    64f8:	cmp.w	r8, #0
    64fc:	bne.n	6518 <breakTime(long, tmElements_t&)+0xe0>
    64fe:	ldr	r0, [pc, #212]	; (65d4 <breakTime(long, tmElements_t&)+0x19c>)
    6500:	asrs	r6, r3, #31
    6502:	movs	r5, #100	; 0x64
    6504:	smull	r4, r0, r0, r3
    6508:	rsb	r4, r6, r0, asr #5
    650c:	mls	r4, r5, r4, r3
    6510:	cbz	r4, 6584 <breakTime(long, tmElements_t&)+0x14c>
    6512:	mov.w	r4, #366	; 0x16e
    6516:	b.n	651e <breakTime(long, tmElements_t&)+0xe6>
    6518:	movw	r4, #365	; 0x16d
    651c:	asrs	r6, r3, #31
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    651e:	ldr	r0, [pc, #180]	; (65d4 <breakTime(long, tmElements_t&)+0x19c>)
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
  time  -= days; // now it is days in this year, starting at 0
    6520:	subs	r2, r2, r4
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    6522:	movs	r5, #100	; 0x64
    6524:	mov.w	r4, #400	; 0x190
    6528:	smull	r7, r0, r0, r3
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
  time  -= days; // now it is days in this year, starting at 0
    652c:	rsb	ip, r2, ip
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    6530:	movs	r2, #0
    6532:	rsb	r7, r6, r0, asr #5
    6536:	rsb	r6, r6, r0, asr #7
    653a:	movs	r0, #1
    653c:	mls	r7, r5, r7, r3
        monthLength=29;
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
    6540:	ldr	r5, [pc, #148]	; (65d8 <breakTime(long, tmElements_t&)+0x1a0>)
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    6542:	mls	r6, r4, r6, r3
    6546:	b.n	654e <breakTime(long, tmElements_t&)+0x116>
    6548:	adds	r0, #1
    654a:	adds	r2, #1
    654c:	uxtb	r0, r0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
    654e:	cmp	r2, #1
    6550:	uxtb	r4, r2
    6552:	beq.n	659e <breakTime(long, tmElements_t&)+0x166>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    6554:	ldrb	r3, [r2, r5]
    6556:	cmp	r3, ip
    6558:	bhi.n	6572 <breakTime(long, tmElements_t&)+0x13a>
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    655a:	cmp	r0, #12
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
      time -= monthLength;
    655c:	rsb	ip, r3, ip
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    6560:	bne.n	6548 <breakTime(long, tmElements_t&)+0x110>
    6562:	movs	r4, #13
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
    6564:	add.w	ip, ip, #1
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    6568:	strb	r4, [r1, #5]
  tm.Day = time + 1;     // day of month
    656a:	strb.w	ip, [r1, #4]
}
    656e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6572:	adds	r4, #1
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
    6574:	add.w	ip, ip, #1
    6578:	uxtb	r4, r4
    657a:	strb.w	ip, [r1, #4]
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    657e:	strb	r4, [r1, #5]
  tm.Day = time + 1;     // day of month
}
    6580:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    6584:	rsb	r0, r6, r0, asr #7
    6588:	mov.w	r5, #400	; 0x190
    658c:	movw	r4, #365	; 0x16d
    6590:	mls	r0, r5, r0, r3
    6594:	cmp	r0, #0
    6596:	it	eq
    6598:	moveq.w	r4, #366	; 0x16e
    659c:	b.n	651e <breakTime(long, tmElements_t&)+0xe6>
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    659e:	cmp.w	r8, #0
    65a2:	bne.n	65b8 <breakTime(long, tmElements_t&)+0x180>
    65a4:	cbnz	r7, 65c0 <breakTime(long, tmElements_t&)+0x188>
    65a6:	cmp	r6, #0
    65a8:	ite	ne
    65aa:	movne	r3, #28
    65ac:	moveq	r3, #29
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    65ae:	cmp	ip, r3
    65b0:	bcc.n	65bc <breakTime(long, tmElements_t&)+0x184>
      time -= monthLength;
    65b2:	rsb	ip, r3, ip
    65b6:	b.n	6548 <breakTime(long, tmElements_t&)+0x110>
    65b8:	movs	r3, #28
    65ba:	b.n	65ae <breakTime(long, tmElements_t&)+0x176>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    65bc:	movs	r4, #2
    65be:	b.n	6564 <breakTime(long, tmElements_t&)+0x12c>
    65c0:	movs	r3, #29
    65c2:	b.n	65ae <breakTime(long, tmElements_t&)+0x176>
    65c4:	.word	0xc22e4507
    65c8:	.word	0x91a2b3c5
    65cc:	.word	0x88888889
    65d0:	.word	0x24924925
    65d4:	.word	0x51eb851f
    65d8:	.word	0x2000062c
    65dc:	.word	0xaaaaaaab

000065e0 <refreshCache(long) [clone .part.0]>:

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
    65e0:	push	{r4, lr}
  if (t != cacheTime) {
    breakTime(t, tm); 
    65e2:	ldr	r1, [pc, #12]	; (65f0 <refreshCache(long) [clone .part.0]+0x10>)

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
    65e4:	mov	r4, r0
  if (t != cacheTime) {
    breakTime(t, tm); 
    65e6:	bl	6438 <breakTime(long, tmElements_t&)>
    cacheTime = t; 
    65ea:	ldr	r3, [pc, #8]	; (65f4 <refreshCache(long) [clone .part.0]+0x14>)
    65ec:	str	r4, [r3, #0]
    65ee:	pop	{r4, pc}
    65f0:	.word	0x200045c0
    65f4:	.word	0x200045d0

000065f8 <now()>:
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
    65f8:	push	{r3, r4, r5, r6, r7, lr}
    65fa:	ldr	r4, [pc, #108]	; (6668 <now()+0x70>)
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    65fc:	ldr	r5, [pc, #108]	; (666c <now()+0x74>)
    65fe:	ldr	r3, [r4, #0]
    6600:	ldr	r2, [r5, #0]
    6602:	ldr	r7, [pc, #108]	; (6670 <now()+0x78>)
    6604:	subs	r3, r3, r2
    6606:	ldr	r0, [r7, #0]
    6608:	cmp.w	r3, #1000	; 0x3e8
    660c:	bcc.n	6628 <now()+0x30>
    660e:	adds	r0, #1
    6610:	b.n	6614 <now()+0x1c>
    6612:	mov	r0, r1
		// millis() and prevMillis are both unsigned ints thus the subtraction will always be the absolute value of the difference
    sysTime++;
    prevMillis += 1000;	
    6614:	add.w	r2, r2, #1000	; 0x3e8
    6618:	ldr	r3, [r4, #0]
    661a:	adds	r1, r0, #1
#endif


time_t now() {
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    661c:	subs	r3, r3, r2
    661e:	cmp.w	r3, #1000	; 0x3e8
    6622:	bcs.n	6612 <now()+0x1a>
    6624:	str	r0, [r7, #0]
    6626:	str	r2, [r5, #0]
    prevMillis += 1000;	
#ifdef TIME_DRIFT_INFO
    sysUnsyncedTime++; // this can be compared to the synced time to measure long term drift     
#endif
  }
  if (nextSyncTime <= sysTime) {
    6628:	ldr	r6, [pc, #72]	; (6674 <now()+0x7c>)
    662a:	ldr	r3, [r6, #0]
    662c:	cmp	r0, r3
    662e:	bcc.n	6650 <now()+0x58>
    if (getTimePtr != 0) {
    6630:	ldr	r3, [pc, #68]	; (6678 <now()+0x80>)
    6632:	ldr	r3, [r3, #0]
    6634:	cbz	r3, 6650 <now()+0x58>
      time_t t = getTimePtr();
    6636:	blx	r3
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    6638:	ldr	r3, [pc, #64]	; (667c <now()+0x84>)
#endif
  }
  if (nextSyncTime <= sysTime) {
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
    663a:	cbnz	r0, 6652 <now()+0x5a>
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    663c:	ldr	r1, [pc, #64]	; (6680 <now()+0x88>)
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    663e:	ldr	r2, [r3, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    6640:	ldrb	r3, [r1, #0]
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    6642:	ldr	r0, [r7, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    6644:	adds	r3, #0
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    6646:	add	r2, r0
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    6648:	it	ne
    664a:	movne	r3, #1
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    664c:	str	r2, [r6, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    664e:	strb	r3, [r1, #0]
      }
    }
  }  
  return (time_t)sysTime;
}
    6650:	pop	{r3, r4, r5, r6, r7, pc}
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    6652:	ldr	r3, [r3, #0]
  Status = timeSet;
    6654:	movs	r1, #2
    6656:	ldr	r4, [r4, #0]
    6658:	ldr	r2, [pc, #36]	; (6680 <now()+0x88>)
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    665a:	add	r3, r0
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
    665c:	str	r0, [r7, #0]
  nextSyncTime = (uint32_t)t + syncInterval;
  Status = timeSet;
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
    665e:	str	r4, [r5, #0]
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    6660:	str	r3, [r6, #0]
  Status = timeSet;
    6662:	strb	r1, [r2, #0]
    6664:	pop	{r3, r4, r5, r6, r7, pc}
    6666:	nop
    6668:	.word	0x2000c720
    666c:	.word	0x200045a8
    6670:	.word	0x200045cc
    6674:	.word	0x200045bc
    6678:	.word	0x2000c64c
    667c:	.word	0x20001398
    6680:	.word	0x2000f1be

00006684 <hour()>:
    breakTime(t, tm); 
    cacheTime = t; 
  }
}

int hour() { // the hour now 
    6684:	push	{r3, lr}
  return hour(now()); 
    6686:	bl	65f8 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    668a:	ldr	r3, [pc, #16]	; (669c <hour()+0x18>)
    668c:	ldr	r3, [r3, #0]
    668e:	cmp	r0, r3
    6690:	beq.n	6696 <hour()+0x12>
    6692:	bl	65e0 <refreshCache(long) [clone .part.0]>
  return hour(now()); 
}

int hour(time_t t) { // the hour for the given time
  refreshCache(t);
  return tm.Hour;  
    6696:	ldr	r3, [pc, #8]	; (66a0 <hour()+0x1c>)
  }
}

int hour() { // the hour now 
  return hour(now()); 
}
    6698:	ldrb	r0, [r3, #2]
    669a:	pop	{r3, pc}
    669c:	.word	0x200045d0
    66a0:	.word	0x200045c0

000066a4 <minute()>:

uint8_t isPM(time_t t) { // returns true if PM
  return (hour(t) >= 12); 
}

int minute() {
    66a4:	push	{r3, lr}
  return minute(now()); 
    66a6:	bl	65f8 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    66aa:	ldr	r3, [pc, #16]	; (66bc <minute()+0x18>)
    66ac:	ldr	r3, [r3, #0]
    66ae:	cmp	r0, r3
    66b0:	beq.n	66b6 <minute()+0x12>
    66b2:	bl	65e0 <refreshCache(long) [clone .part.0]>
  return minute(now()); 
}

int minute(time_t t) { // the minute for the given time
  refreshCache(t);
  return tm.Minute;  
    66b6:	ldr	r3, [pc, #8]	; (66c0 <minute()+0x1c>)
  return (hour(t) >= 12); 
}

int minute() {
  return minute(now()); 
}
    66b8:	ldrb	r0, [r3, #1]
    66ba:	pop	{r3, pc}
    66bc:	.word	0x200045d0
    66c0:	.word	0x200045c0

000066c4 <second()>:
int minute(time_t t) { // the minute for the given time
  refreshCache(t);
  return tm.Minute;  
}

int second() {
    66c4:	push	{r3, lr}
  return second(now()); 
    66c6:	bl	65f8 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    66ca:	ldr	r3, [pc, #16]	; (66dc <second()+0x18>)
    66cc:	ldr	r3, [r3, #0]
    66ce:	cmp	r0, r3
    66d0:	beq.n	66d6 <second()+0x12>
    66d2:	bl	65e0 <refreshCache(long) [clone .part.0]>
  return second(now()); 
}

int second(time_t t) {  // the second for the given time
  refreshCache(t);
  return tm.Second;
    66d6:	ldr	r3, [pc, #8]	; (66e0 <second()+0x1c>)
  return tm.Minute;  
}

int second() {
  return second(now()); 
}
    66d8:	ldrb	r0, [r3, #0]
    66da:	pop	{r3, pc}
    66dc:	.word	0x200045d0
    66e0:	.word	0x200045c0

000066e4 <day()>:
int second(time_t t) {  // the second for the given time
  refreshCache(t);
  return tm.Second;
}

int day(){
    66e4:	push	{r3, lr}
  return(day(now())); 
    66e6:	bl	65f8 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    66ea:	ldr	r3, [pc, #16]	; (66fc <day()+0x18>)
    66ec:	ldr	r3, [r3, #0]
    66ee:	cmp	r0, r3
    66f0:	beq.n	66f6 <day()+0x12>
    66f2:	bl	65e0 <refreshCache(long) [clone .part.0]>
  return(day(now())); 
}

int day(time_t t) { // the day for the given time (0-6)
  refreshCache(t);
  return tm.Day;
    66f6:	ldr	r3, [pc, #8]	; (6700 <day()+0x1c>)
  return tm.Second;
}

int day(){
  return(day(now())); 
}
    66f8:	ldrb	r0, [r3, #4]
    66fa:	pop	{r3, pc}
    66fc:	.word	0x200045d0
    6700:	.word	0x200045c0

00006704 <month()>:
int weekday(time_t t) {
  refreshCache(t);
  return tm.Wday;
}
   
int month(){
    6704:	push	{r3, lr}
  return month(now()); 
    6706:	bl	65f8 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    670a:	ldr	r3, [pc, #16]	; (671c <month()+0x18>)
    670c:	ldr	r3, [r3, #0]
    670e:	cmp	r0, r3
    6710:	beq.n	6716 <month()+0x12>
    6712:	bl	65e0 <refreshCache(long) [clone .part.0]>
  return month(now()); 
}

int month(time_t t) {  // the month for the given time
  refreshCache(t);
  return tm.Month;
    6716:	ldr	r3, [pc, #8]	; (6720 <month()+0x1c>)
  return tm.Wday;
}
   
int month(){
  return month(now()); 
}
    6718:	ldrb	r0, [r3, #5]
    671a:	pop	{r3, pc}
    671c:	.word	0x200045d0
    6720:	.word	0x200045c0

00006724 <year()>:
int month(time_t t) {  // the month for the given time
  refreshCache(t);
  return tm.Month;
}

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
    6724:	push	{r3, lr}
  return year(now()); 
    6726:	bl	65f8 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    672a:	ldr	r3, [pc, #20]	; (6740 <year()+0x1c>)
    672c:	ldr	r3, [r3, #0]
    672e:	cmp	r0, r3
    6730:	beq.n	6736 <year()+0x12>
    6732:	bl	65e0 <refreshCache(long) [clone .part.0]>
  return year(now()); 
}

int year(time_t t) { // the year for the given time
  refreshCache(t);
  return tmYearToCalendar(tm.Year);
    6736:	ldr	r3, [pc, #12]	; (6744 <year()+0x20>)
  refreshCache(t);
  return tm.Month;
}

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
  return year(now()); 
    6738:	ldrb	r0, [r3, #6]
}
    673a:	addw	r0, r0, #1970	; 0x7b2
    673e:	pop	{r3, pc}
    6740:	.word	0x200045d0
    6744:	.word	0x200045c0

00006748 <setSyncProvider(long (*)())>:
  return Status;
}

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
  nextSyncTime = sysTime;
    6748:	ldr	r3, [pc, #12]	; (6758 <setSyncProvider(long (*)())+0x10>)
    674a:	ldr	r2, [pc, #16]	; (675c <setSyncProvider(long (*)())+0x14>)
    674c:	ldr	r1, [r3, #0]
  now(); // required to actually update the status
  return Status;
}

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
    674e:	ldr	r3, [pc, #16]	; (6760 <setSyncProvider(long (*)())+0x18>)
  nextSyncTime = sysTime;
    6750:	str	r1, [r2, #0]
  now(); // required to actually update the status
  return Status;
}

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
    6752:	str	r0, [r3, #0]
  nextSyncTime = sysTime;
  now(); // this will sync the clock
    6754:	b.w	65f8 <now()>
    6758:	.word	0x200045cc
    675c:	.word	0x200045bc
    6760:	.word	0x2000c64c

00006764 <Print::write(char const*)>:
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    6764:	push	{r4, r5, r6, lr}
    6766:	mov	r4, r0
    6768:	mov	r0, r1
    676a:	mov	r5, r1
    676c:	bl	c040 <strlen>
    6770:	ldr	r3, [r4, #0]
    6772:	mov	r2, r0
    6774:	mov	r1, r5
    6776:	mov	r0, r4
    6778:	ldr	r3, [r3, #4]
    677a:	ldmia.w	sp!, {r4, r5, r6, lr}
    677e:	bx	r3

00006780 <die(char const*, DRESULT)>:
  for(int ii=0;ii<512; ii++)
  if((ii+1)%16) Serial.printf("%02x ",buff[ii]); else Serial.printf("%02x\n",buff[ii]);
}

void die(const char * txt, DRESULT res)
{
    6780:	push	{r3, lr}
    6782:	mov	r4, r1
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    6784:	mov	r1, r0
    6786:	ldr	r0, [pc, #28]	; (67a4 <die(char const*, DRESULT)+0x24>)
    6788:	bl	6764 <Print::write(char const*)>
    678c:	ldr	r1, [pc, #24]	; (67a8 <die(char const*, DRESULT)+0x28>)
    678e:	ldr	r0, [pc, #20]	; (67a4 <die(char const*, DRESULT)+0x24>)
    6790:	bl	6764 <Print::write(char const*)>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
	size_t print(int64_t n);
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
    6794:	mov	r1, r4
    6796:	movs	r3, #0
    6798:	movs	r2, #16
    679a:	ldr	r0, [pc, #8]	; (67a4 <die(char const*, DRESULT)+0x24>)
    679c:	bl	a3c0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    67a0:	b.n	67a0 <die(char const*, DRESULT)+0x20>
    67a2:	nop
    67a4:	.word	0x20001388
    67a8:	.word	0x20000bfc

000067ac <zeroFS_class::Init(unsigned char, unsigned char, char const*)>:
  Serial.print(txt); Serial.print(" "); Serial.print(res,HEX); while(1);
}

bool zeroFS_class::Init(BYTE device, BYTE cs, const char *str)
{
    67ac:	push	{r4, r5, r6, lr}
    67ae:	mov	r4, r0
// DEV_SPI
// DEV_SDHC
// DEV_MSC
// DEV_USB

  pdrv = device;
    67b0:	strb	r1, [r0, #28]
{
  Serial.print(txt); Serial.print(" "); Serial.print(res,HEX); while(1);
}

bool zeroFS_class::Init(BYTE device, BYTE cs, const char *str)
{
    67b2:	mov	r6, r2
    67b4:	sub.w	sp, sp, #512	; 0x200
// DEV_SDHC
// DEV_MSC
// DEV_USB

  pdrv = device;
  strlcpy(devName,str,80);
    67b8:	movs	r2, #80	; 0x50
    67ba:	adds	r0, #32
    67bc:	mov	r1, r3
{
  Serial.print(txt); Serial.print(" "); Serial.print(res,HEX); while(1);
}

bool zeroFS_class::Init(BYTE device, BYTE cs, const char *str)
{
    67be:	mov	r5, r3
// DEV_SDHC
// DEV_MSC
// DEV_USB

  pdrv = device;
  strlcpy(devName,str,80);
    67c0:	bl	bff0 <strlcpy>

  csel=cs;
  if(pdrv==DEV_SPI) disk_ioctl(pdrv,1,(void *)&csel); // set cs for spi mode
    67c4:	ldrb	r0, [r4, #28]
// DEV_USB

  pdrv = device;
  strlcpy(devName,str,80);

  csel=cs;
    67c6:	strh	r6, [r4, #30]
  if(pdrv==DEV_SPI) disk_ioctl(pdrv,1,(void *)&csel); // set cs for spi mode
    67c8:	cbnz	r0, 67d4 <zeroFS_class::Init(unsigned char, unsigned char, char const*)+0x28>
    67ca:	add.w	r2, r4, #30
    67ce:	movs	r1, #1
    67d0:	bl	6d80 <disk_ioctl>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    67d4:	movs	r3, #0
    67d6:	movs	r2, #10
    67d8:	mov	r1, r6
    67da:	ldr	r0, [pc, #148]	; (6870 <zeroFS_class::Init(unsigned char, unsigned char, char const*)+0xc4>)
    67dc:	bl	a3c0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    67e0:	movs	r1, #1
    67e2:	ldr	r0, [pc, #144]	; (6874 <zeroFS_class::Init(unsigned char, unsigned char, char const*)+0xc8>)
    67e4:	bl	883c <usb_serial_write>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    67e8:	mov	r0, r5
    67ea:	bl	c040 <strlen>
    67ee:	mov	r1, r0
    67f0:	mov	r0, r5
    67f2:	bl	883c <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    67f6:	ldr	r0, [pc, #120]	; (6870 <zeroFS_class::Init(unsigned char, unsigned char, char const*)+0xc4>)
    67f8:	bl	a370 <Print::println()>
  
  Serial.print(cs); Serial.print(" "); Serial.println(str);
  
  MBR_t mbr;
  if(DSTATUS stat = disk_initialize(pdrv))
    67fc:	ldrb	r0, [r4, #28]
    67fe:	bl	6cc4 <disk_initialize>
    6802:	mov	r5, r0
    6804:	cbz	r0, 6822 <zeroFS_class::Init(unsigned char, unsigned char, char const*)+0x76>
    6806:	movs	r1, #24
    6808:	ldr	r0, [pc, #108]	; (6878 <zeroFS_class::Init(unsigned char, unsigned char, char const*)+0xcc>)
    680a:	bl	883c <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    680e:	mov	r1, r5
    6810:	movs	r3, #0
    6812:	movs	r2, #10
    6814:	ldr	r0, [pc, #88]	; (6870 <zeroFS_class::Init(unsigned char, unsigned char, char const*)+0xc4>)
    6816:	bl	a3c0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
    681a:	ldr	r0, [pc, #84]	; (6870 <zeroFS_class::Init(unsigned char, unsigned char, char const*)+0xc4>)
    681c:	bl	a370 <Print::println()>
    6820:	b.n	6820 <zeroFS_class::Init(unsigned char, unsigned char, char const*)+0x74>

  BYTE* buff = (BYTE *) &mbr;
  DWORD sector = 0;
  UINT count = 1;
  
  if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("init",res);
    6822:	mov	r2, r0
    6824:	movs	r3, #1
    6826:	ldrb	r0, [r4, #28]
    6828:	mov	r1, sp
    682a:	bl	6cf8 <disk_read>
    682e:	mov	r5, r0
    6830:	cbnz	r0, 6868 <zeroFS_class::Init(unsigned char, unsigned char, char const*)+0xbc>
  Serial.println(mbr.mbrSig0,HEX); //0x55
  Serial.println(mbr.mbrSig1,HEX); //0xAA
  }  
  #endif

  root_sector=mbr.part[0].firstSector;
    6832:	ldr.w	r1, [sp, #454]	; 0x1c6

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    6836:	mov	r3, r0
  total_sectors=mbr.part[0].totalSectors;
    6838:	ldr.w	r0, [sp, #458]	; 0x1ca
    683c:	movs	r2, #16
  Serial.println(mbr.mbrSig0,HEX); //0x55
  Serial.println(mbr.mbrSig1,HEX); //0xAA
  }  
  #endif

  root_sector=mbr.part[0].firstSector;
    683e:	str	r1, [r4, #0]
  total_sectors=mbr.part[0].totalSectors;
    6840:	str	r0, [r4, #24]
    6842:	ldr	r0, [pc, #44]	; (6870 <zeroFS_class::Init(unsigned char, unsigned char, char const*)+0xc4>)
    6844:	bl	a3c0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    6848:	ldr	r0, [pc, #36]	; (6870 <zeroFS_class::Init(unsigned char, unsigned char, char const*)+0xc4>)
    684a:	bl	a370 <Print::println()>

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    684e:	mov	r3, r5
    6850:	ldr	r1, [r4, #24]
    6852:	movs	r2, #16
    6854:	ldr	r0, [pc, #24]	; (6870 <zeroFS_class::Init(unsigned char, unsigned char, char const*)+0xc4>)
    6856:	bl	a3c0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    685a:	ldr	r0, [pc, #20]	; (6870 <zeroFS_class::Init(unsigned char, unsigned char, char const*)+0xc4>)
    685c:	bl	a370 <Print::println()>
  Serial.println(total_sectors,HEX);
  // clean up earlier disk usage

//  findEOF();
  return true;
}
    6860:	movs	r0, #1
    6862:	add.w	sp, sp, #512	; 0x200
    6866:	pop	{r4, r5, r6, pc}

  BYTE* buff = (BYTE *) &mbr;
  DWORD sector = 0;
  UINT count = 1;
  
  if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("init",res);
    6868:	mov	r1, r0
    686a:	ldr	r0, [pc, #16]	; (687c <zeroFS_class::Init(unsigned char, unsigned char, char const*)+0xd0>)
    686c:	bl	6780 <die(char const*, DRESULT)>
    6870:	.word	0x20001388
    6874:	.word	0x20000bfc
    6878:	.word	0x20000c64
    687c:	.word	0x20000c80

00006880 <zeroFS_class::Create(HDR_TYPE, char const*)>:
    sprintf(name,"R%03X_0X%08x",sernum,(unsigned int)write_sector);
    Create(type, name);
  }
}
void zeroFS_class::Create(HDR_TYPE type, const char *name)
{
    6880:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  //
  memset(&hdr,0,sizeof(hdr));
    6884:	movw	r5, #8304	; 0x2070
    sprintf(name,"R%03X_0X%08x",sernum,(unsigned int)write_sector);
    Create(type, name);
  }
}
void zeroFS_class::Create(HDR_TYPE type, const char *name)
{
    6888:	mov	r4, r0
    688a:	mov	r6, r1
    688c:	mov	r8, r2
  //
  memset(&hdr,0,sizeof(hdr));
    688e:	add	r5, r0
    6890:	mov.w	r2, #512	; 0x200
    6894:	movs	r1, #0
    6896:	movw	r9, #8304	; 0x2070
    689a:	mov	r0, r5
  hdr.magic=MAGIC;
    689c:	ldr	r7, [pc, #412]	; (6a3c <zeroFS_class::Create(HDR_TYPE, char const*)+0x1bc>)
  }
}
void zeroFS_class::Create(HDR_TYPE type, const char *name)
{
  //
  memset(&hdr,0,sizeof(hdr));
    689e:	bl	b9ec <memset>
  hdr.magic=MAGIC;
  hdr.type=type;
  hdr.prev=write_sector;
    68a2:	movw	sl, #8316	; 0x207c
    68a6:	ldr	r3, [r4, #4]
void zeroFS_class::Create(HDR_TYPE type, const char *name)
{
  //
  memset(&hdr,0,sizeof(hdr));
  hdr.magic=MAGIC;
  hdr.type=type;
    68a8:	movw	r0, #8308	; 0x2074
  hdr.prev=write_sector;
  hdr.sect=write_sector;
    68ac:	movw	r2, #8312	; 0x2078
}
void zeroFS_class::Create(HDR_TYPE type, const char *name)
{
  //
  memset(&hdr,0,sizeof(hdr));
  hdr.magic=MAGIC;
    68b0:	str.w	r7, [r4, r9]
  hdr.type=type;
  hdr.prev=write_sector;
  hdr.sect=write_sector;
  hdr.size=0;
    68b4:	movw	r1, #8328	; 0x2088
void zeroFS_class::Create(HDR_TYPE type, const char *name)
{
  //
  memset(&hdr,0,sizeof(hdr));
  hdr.magic=MAGIC;
  hdr.type=type;
    68b8:	str	r6, [r4, r0]
  hdr.prev=write_sector;
  hdr.sect=write_sector;
    68ba:	str	r3, [r4, r2]
  hdr.size=0;
    68bc:	movs	r0, #0
{
  //
  memset(&hdr,0,sizeof(hdr));
  hdr.magic=MAGIC;
  hdr.type=type;
  hdr.prev=write_sector;
    68be:	str.w	r3, [r4, sl]
  hdr.sect=write_sector;
  hdr.size=0;
  hdr.next=0xFFFFFFFF;
    68c2:	add.w	r2, r4, #8320	; 0x2080
    68c6:	mov.w	r3, #4294967295
  memset(&hdr,0,sizeof(hdr));
  hdr.magic=MAGIC;
  hdr.type=type;
  hdr.prev=write_sector;
  hdr.sect=write_sector;
  hdr.size=0;
    68ca:	str	r0, [r4, r1]
  hdr.millis=millis();
  hdr.micros=micros();
  strcpy(hdr.name,name);
  
  {    
    if(hdr_list[type].magic==MAGIC)
    68cc:	mov.w	r9, r6, lsl #9
  hdr.magic=MAGIC;
  hdr.type=type;
  hdr.prev=write_sector;
  hdr.sect=write_sector;
  hdr.size=0;
  hdr.next=0xFFFFFFFF;
    68d0:	str	r3, [r2, #0]
  hdr.ctime=rtc_get();
    68d2:	bl	9564 <rtc_get>
    68d6:	ldr	r2, [pc, #360]	; (6a40 <zeroFS_class::Create(HDR_TYPE, char const*)+0x1c0>)
    68d8:	movw	r1, #8332	; 0x208c
  hdr.millis=millis();
    68dc:	movw	r3, #8336	; 0x2090
    68e0:	ldr	r2, [r2, #0]
  hdr.type=type;
  hdr.prev=write_sector;
  hdr.sect=write_sector;
  hdr.size=0;
  hdr.next=0xFFFFFFFF;
  hdr.ctime=rtc_get();
    68e2:	str	r0, [r4, r1]
  hdr.millis=millis();
    68e4:	str	r2, [r4, r3]
  hdr.micros=micros();
    68e6:	bl	9340 <micros>
    68ea:	movw	r3, #8340	; 0x2094
  strcpy(hdr.name,name);
    68ee:	mov	r1, r8
  hdr.sect=write_sector;
  hdr.size=0;
  hdr.next=0xFFFFFFFF;
  hdr.ctime=rtc_get();
  hdr.millis=millis();
  hdr.micros=micros();
    68f0:	str	r0, [r4, r3]
  strcpy(hdr.name,name);
    68f2:	movw	r0, #8344	; 0x2098
    68f6:	add	r0, r4
    68f8:	bl	bee0 <strcpy>
  
  {    
    if(hdr_list[type].magic==MAGIC)
    68fc:	add.w	r3, r4, r9
    6900:	movw	r2, #8816	; 0x2270
    6904:	ldr	r2, [r3, r2]
    6906:	cmp	r2, r7
    6908:	beq.w	6a26 <zeroFS_class::Create(HDR_TYPE, char const*)+0x1a6>
    {  hdr.prev = hdr_list[type].sect;
    }
    
    hdr.parent = (type==T_ROOT)? 0xFFFFFFFFUL : hdr_list[type-1].sect;
    690c:	cmp	r6, #0
    690e:	beq.n	69a2 <zeroFS_class::Create(HDR_TYPE, char const*)+0x122>
    6910:	subs	r3, r6, #1
    6912:	movw	r2, #8824	; 0x2278

    // write hdr to disk
    DWORD sector = hdr.sect;
    6916:	movw	lr, #8312	; 0x2078
  {    
    if(hdr_list[type].magic==MAGIC)
    {  hdr.prev = hdr_list[type].sect;
    }
    
    hdr.parent = (type==T_ROOT)? 0xFFFFFFFFUL : hdr_list[type-1].sect;
    691a:	movw	r1, #8324	; 0x2084
    691e:	add.w	r3, r4, r3, lsl #9

    // write hdr to disk
    DWORD sector = hdr.sect;
    memset(buff,0,NBUF);
    6922:	add.w	r7, r4, #112	; 0x70
    }
    
    hdr.parent = (type==T_ROOT)? 0xFFFFFFFFUL : hdr_list[type-1].sect;

    // write hdr to disk
    DWORD sector = hdr.sect;
    6926:	ldr.w	sl, [r4, lr]
  {    
    if(hdr_list[type].magic==MAGIC)
    {  hdr.prev = hdr_list[type].sect;
    }
    
    hdr.parent = (type==T_ROOT)? 0xFFFFFFFFUL : hdr_list[type-1].sect;
    692a:	ldr	r3, [r3, r2]

    // write hdr to disk
    DWORD sector = hdr.sect;
    memset(buff,0,NBUF);
    692c:	mov	r0, r7
    692e:	mov.w	r2, #8192	; 0x2000
  {    
    if(hdr_list[type].magic==MAGIC)
    {  hdr.prev = hdr_list[type].sect;
    }
    
    hdr.parent = (type==T_ROOT)? 0xFFFFFFFFUL : hdr_list[type-1].sect;
    6932:	str	r3, [r4, r1]

    // write hdr to disk
    DWORD sector = hdr.sect;
    memset(buff,0,NBUF);
    6934:	movs	r1, #0
    6936:	bl	b9ec <memset>
    memcpy(buff,&hdr,sizeof(HDR_t));
    693a:	mov	r0, r7
    693c:	mov.w	r2, #512	; 0x200
    6940:	mov	r1, r5
    6942:	bl	80b4 <memcpy>
//    BYTE* buff = (BYTE *) &hdr;
    UINT count = (type==T_FILE)? 1: MCOUNT;
    6946:	cmp	r6, #3
    6948:	bne.n	69d0 <zeroFS_class::Create(HDR_TYPE, char const*)+0x150>
    if(DRESULT res = disk_write (pdrv, buff, sector, count)) die("write1",res);
    694a:	mov	r2, sl
    694c:	mov	r1, r7
    694e:	movs	r3, #1
    6950:	ldrb	r0, [r4, #28]
    6952:	bl	6d3c <disk_write>
    6956:	mov	r6, r0
    6958:	cmp	r0, #0
    695a:	bne.n	6a32 <zeroFS_class::Create(HDR_TYPE, char const*)+0x1b2>

    memcpy(&hdr_list[type],&hdr, sizeof(HDR_t));
    695c:	movw	r0, #10352	; 0x2870
    6960:	mov.w	r2, #512	; 0x200
    6964:	mov	r1, r5
    6966:	add	r0, r4
    6968:	bl	80b4 <memcpy>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    696c:	mov	r0, r8
    696e:	bl	c040 <strlen>
    6972:	mov	r1, r0
    6974:	mov	r0, r8
    6976:	bl	883c <usb_serial_write>
    697a:	movs	r1, #1
    697c:	ldr	r0, [pc, #196]	; (6a44 <zeroFS_class::Create(HDR_TYPE, char const*)+0x1c4>)
    697e:	bl	883c <usb_serial_write>

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    6982:	mov	r3, r6
    6984:	movs	r2, #16
    6986:	ldr	r1, [r4, #4]
    6988:	ldr	r0, [pc, #188]	; (6a48 <zeroFS_class::Create(HDR_TYPE, char const*)+0x1c8>)
    698a:	bl	a3c0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    698e:	movs	r1, #1
    6990:	ldr	r0, [pc, #176]	; (6a44 <zeroFS_class::Create(HDR_TYPE, char const*)+0x1c4>)
    6992:	bl	883c <usb_serial_write>

    Serial.print(name); Serial.print(" "); Serial.print(write_sector,HEX); 
    if(type ==T_FILE) Serial.print(" "); else Serial.println();

    write_sector=write_sector+count;
    6996:	ldr	r2, [r4, #4]
    // write hdr to disk
    DWORD sector = hdr.sect;
    memset(buff,0,NBUF);
    memcpy(buff,&hdr,sizeof(HDR_t));
//    BYTE* buff = (BYTE *) &hdr;
    UINT count = (type==T_FILE)? 1: MCOUNT;
    6998:	movs	r3, #1
    memcpy(&hdr_list[type],&hdr, sizeof(HDR_t));

    Serial.print(name); Serial.print(" "); Serial.print(write_sector,HEX); 
    if(type ==T_FILE) Serial.print(" "); else Serial.println();

    write_sector=write_sector+count;
    699a:	add	r3, r2
    699c:	str	r3, [r4, #4]
//    {
//      for(int nn=0; nn<NBUF; nn++) buff[nn]=0;
//      Write(buff,NBUF-512);
//    }
  }
}
    699e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  {    
    if(hdr_list[type].magic==MAGIC)
    {  hdr.prev = hdr_list[type].sect;
    }
    
    hdr.parent = (type==T_ROOT)? 0xFFFFFFFFUL : hdr_list[type-1].sect;
    69a2:	movw	r2, #8324	; 0x2084
    69a6:	mov.w	r0, #4294967295

    // write hdr to disk
    DWORD sector = hdr.sect;
    memset(buff,0,NBUF);
    69aa:	add.w	r7, r4, #112	; 0x70
    }
    
    hdr.parent = (type==T_ROOT)? 0xFFFFFFFFUL : hdr_list[type-1].sect;

    // write hdr to disk
    DWORD sector = hdr.sect;
    69ae:	movw	r3, #8312	; 0x2078
  {    
    if(hdr_list[type].magic==MAGIC)
    {  hdr.prev = hdr_list[type].sect;
    }
    
    hdr.parent = (type==T_ROOT)? 0xFFFFFFFFUL : hdr_list[type-1].sect;
    69b2:	str	r0, [r4, r2]

    // write hdr to disk
    DWORD sector = hdr.sect;
    memset(buff,0,NBUF);
    69b4:	mov	r1, r6
    69b6:	mov.w	r2, #8192	; 0x2000
    69ba:	mov	r0, r7
    }
    
    hdr.parent = (type==T_ROOT)? 0xFFFFFFFFUL : hdr_list[type-1].sect;

    // write hdr to disk
    DWORD sector = hdr.sect;
    69bc:	ldr.w	sl, [r4, r3]
    memset(buff,0,NBUF);
    69c0:	bl	b9ec <memset>
    memcpy(buff,&hdr,sizeof(HDR_t));
    69c4:	mov	r0, r7
    69c6:	mov.w	r2, #512	; 0x200
    69ca:	mov	r1, r5
    69cc:	bl	80b4 <memcpy>
//    BYTE* buff = (BYTE *) &hdr;
    UINT count = (type==T_FILE)? 1: MCOUNT;
    if(DRESULT res = disk_write (pdrv, buff, sector, count)) die("write1",res);
    69d0:	mov	r2, sl
    69d2:	mov	r1, r7
    69d4:	movs	r3, #16
    69d6:	ldrb	r0, [r4, #28]
    69d8:	bl	6d3c <disk_write>
    69dc:	mov	r6, r0
    69de:	cbnz	r0, 6a32 <zeroFS_class::Create(HDR_TYPE, char const*)+0x1b2>

    memcpy(&hdr_list[type],&hdr, sizeof(HDR_t));
    69e0:	movw	r0, #8816	; 0x2270
    69e4:	mov.w	r2, #512	; 0x200
    69e8:	mov	r1, r5
    69ea:	add	r0, r9
    69ec:	add	r0, r4
    69ee:	bl	80b4 <memcpy>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    69f2:	mov	r0, r8
    69f4:	bl	c040 <strlen>
    69f8:	mov	r1, r0
    69fa:	mov	r0, r8
    69fc:	bl	883c <usb_serial_write>
    6a00:	movs	r1, #1
    6a02:	ldr	r0, [pc, #64]	; (6a44 <zeroFS_class::Create(HDR_TYPE, char const*)+0x1c4>)
    6a04:	bl	883c <usb_serial_write>

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    6a08:	mov	r3, r6
    6a0a:	movs	r2, #16
    6a0c:	ldr	r1, [r4, #4]
    6a0e:	ldr	r0, [pc, #56]	; (6a48 <zeroFS_class::Create(HDR_TYPE, char const*)+0x1c8>)
    6a10:	bl	a3c0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

    Serial.print(name); Serial.print(" "); Serial.print(write_sector,HEX); 
    if(type ==T_FILE) Serial.print(" "); else Serial.println();
    6a14:	ldr	r0, [pc, #48]	; (6a48 <zeroFS_class::Create(HDR_TYPE, char const*)+0x1c8>)
    6a16:	bl	a370 <Print::println()>

    write_sector=write_sector+count;
    6a1a:	ldr	r2, [r4, #4]
    if(DRESULT res = disk_write (pdrv, buff, sector, count)) die("write1",res);

    memcpy(&hdr_list[type],&hdr, sizeof(HDR_t));

    Serial.print(name); Serial.print(" "); Serial.print(write_sector,HEX); 
    if(type ==T_FILE) Serial.print(" "); else Serial.println();
    6a1c:	movs	r3, #16

    write_sector=write_sector+count;
    6a1e:	add	r3, r2
    6a20:	str	r3, [r4, #4]
//    {
//      for(int nn=0; nn<NBUF; nn++) buff[nn]=0;
//      Write(buff,NBUF-512);
//    }
  }
}
    6a22:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hdr.micros=micros();
  strcpy(hdr.name,name);
  
  {    
    if(hdr_list[type].magic==MAGIC)
    {  hdr.prev = hdr_list[type].sect;
    6a26:	movw	r2, #8824	; 0x2278
    6a2a:	ldr	r3, [r3, r2]
    6a2c:	str.w	r3, [r4, sl]
    6a30:	b.n	690c <zeroFS_class::Create(HDR_TYPE, char const*)+0x8c>
    DWORD sector = hdr.sect;
    memset(buff,0,NBUF);
    memcpy(buff,&hdr,sizeof(HDR_t));
//    BYTE* buff = (BYTE *) &hdr;
    UINT count = (type==T_FILE)? 1: MCOUNT;
    if(DRESULT res = disk_write (pdrv, buff, sector, count)) die("write1",res);
    6a32:	mov	r1, r6
    6a34:	ldr	r0, [pc, #20]	; (6a4c <zeroFS_class::Create(HDR_TYPE, char const*)+0x1cc>)
    6a36:	bl	6780 <die(char const*, DRESULT)>
    6a3a:	nop
    6a3c:	.word	0x6f72657a
    6a40:	.word	0x2000c720
    6a44:	.word	0x20000bfc
    6a48:	.word	0x20001388
    6a4c:	.word	0x20000c88

00006a50 <zeroFS_class::Close(HDR_TYPE)>:
  hdr_sector=hdr.sect;
  read_sector=hdr_sector+(type==T_FILE)? 1: MCOUNT;
}

void zeroFS_class::Close(HDR_TYPE type)
{
    6a50:	push	{r4, r5, r6, lr}
    6a52:	mov	r4, r0
  if(type==T_ROOT)
    6a54:	cbz	r1, 6a94 <zeroFS_class::Close(HDR_TYPE)+0x44>
    BYTE* buff = (BYTE *) &hdr;
    UINT count = 1;      
    if(DRESULT res = disk_write (pdrv, buff, sector, count)) die("close1 ",res);
  }
  
  hdr_list[type].next=write_sector;
    6a56:	add.w	r2, r4, r1, lsl #9
    6a5a:	ldr	r3, [r4, #4]
  if(type==T_FILE) hdr_list[type].size= (hdr_list[type].next-hdr_list[type].sect);
    6a5c:	cmp	r1, #3
    BYTE* buff = (BYTE *) &hdr;
    UINT count = 1;      
    if(DRESULT res = disk_write (pdrv, buff, sector, count)) die("close1 ",res);
  }
  
  hdr_list[type].next=write_sector;
    6a5e:	add.w	r0, r2, #8832	; 0x2280
    6a62:	str	r3, [r0, #0]
  if(type==T_FILE) hdr_list[type].size= (hdr_list[type].next-hdr_list[type].sect);
    6a64:	beq.n	6a84 <zeroFS_class::Close(HDR_TYPE)+0x34>
  //
  DWORD sector = hdr_list[type].sect;
    6a66:	lsls	r1, r1, #9
  BYTE* buff = (BYTE *) &hdr_list[type];
    6a68:	movw	r5, #8816	; 0x2270
  }
  
  hdr_list[type].next=write_sector;
  if(type==T_FILE) hdr_list[type].size= (hdr_list[type].next-hdr_list[type].sect);
  //
  DWORD sector = hdr_list[type].sect;
    6a6c:	movw	r2, #8824	; 0x2278
  BYTE* buff = (BYTE *) &hdr_list[type];
  UINT count = 1;      
  if(DRESULT res = disk_write (pdrv, buff, sector, count)) die("close2 ",res);
    6a70:	ldrb	r0, [r4, #28]
  }
  
  hdr_list[type].next=write_sector;
  if(type==T_FILE) hdr_list[type].size= (hdr_list[type].next-hdr_list[type].sect);
  //
  DWORD sector = hdr_list[type].sect;
    6a72:	adds	r6, r4, r1
  BYTE* buff = (BYTE *) &hdr_list[type];
    6a74:	add	r5, r1
  UINT count = 1;      
  if(DRESULT res = disk_write (pdrv, buff, sector, count)) die("close2 ",res);
    6a76:	movs	r3, #1
    6a78:	ldr	r2, [r6, r2]
    6a7a:	adds	r1, r4, r5
    6a7c:	bl	6d3c <disk_write>
    6a80:	cbnz	r0, 6abe <zeroFS_class::Close(HDR_TYPE)+0x6e>
    6a82:	pop	{r4, r5, r6, pc}
    UINT count = 1;      
    if(DRESULT res = disk_write (pdrv, buff, sector, count)) die("close1 ",res);
  }
  
  hdr_list[type].next=write_sector;
  if(type==T_FILE) hdr_list[type].size= (hdr_list[type].next-hdr_list[type].sect);
    6a84:	movw	r5, #8824	; 0x2278
    6a88:	movw	r0, #8840	; 0x2288
    6a8c:	ldr	r5, [r2, r5]
    6a8e:	subs	r3, r3, r5
    6a90:	str	r3, [r2, r0]
    6a92:	b.n	6a66 <zeroFS_class::Close(HDR_TYPE)+0x16>

void zeroFS_class::Close(HDR_TYPE type)
{
  if(type==T_ROOT)
  { // add an empty header to end of data
    memset(&hdr,0,sizeof(hdr));
    6a94:	movw	r5, #8304	; 0x2070
    6a98:	mov.w	r2, #512	; 0x200
    6a9c:	add	r5, r0
    6a9e:	mov	r0, r5
    6aa0:	bl	b9ec <memset>
    DWORD sector = write_sector;
    BYTE* buff = (BYTE *) &hdr;
    UINT count = 1;      
    if(DRESULT res = disk_write (pdrv, buff, sector, count)) die("close1 ",res);
    6aa4:	mov	r1, r5
    6aa6:	movs	r3, #1
    6aa8:	ldr	r2, [r4, #4]
    6aaa:	ldrb	r0, [r4, #28]
    6aac:	bl	6d3c <disk_write>
    6ab0:	cbnz	r0, 6ac6 <zeroFS_class::Close(HDR_TYPE)+0x76>
  }
  
  hdr_list[type].next=write_sector;
    6ab2:	add.w	r3, r4, #8832	; 0x2280
    6ab6:	ldr	r2, [r4, #4]
    6ab8:	mov	r1, r0
    6aba:	str	r2, [r3, #0]
    6abc:	b.n	6a66 <zeroFS_class::Close(HDR_TYPE)+0x16>
  if(type==T_FILE) hdr_list[type].size= (hdr_list[type].next-hdr_list[type].sect);
  //
  DWORD sector = hdr_list[type].sect;
  BYTE* buff = (BYTE *) &hdr_list[type];
  UINT count = 1;      
  if(DRESULT res = disk_write (pdrv, buff, sector, count)) die("close2 ",res);
    6abe:	mov	r1, r0
    6ac0:	ldr	r0, [pc, #12]	; (6ad0 <zeroFS_class::Close(HDR_TYPE)+0x80>)
    6ac2:	bl	6780 <die(char const*, DRESULT)>
  { // add an empty header to end of data
    memset(&hdr,0,sizeof(hdr));
    DWORD sector = write_sector;
    BYTE* buff = (BYTE *) &hdr;
    UINT count = 1;      
    if(DRESULT res = disk_write (pdrv, buff, sector, count)) die("close1 ",res);
    6ac6:	mov	r1, r0
    6ac8:	ldr	r0, [pc, #8]	; (6ad4 <zeroFS_class::Close(HDR_TYPE)+0x84>)
    6aca:	bl	6780 <die(char const*, DRESULT)>
    6ace:	nop
    6ad0:	.word	0x20000cac
    6ad4:	.word	0x20000ca4

00006ad8 <zeroFS_class::Write(void*, unsigned long)>:
  UINT count = 1;      
  if(DRESULT res = disk_write (pdrv, buff, sector, count)) die("close2 ",res);
  
}
uint32_t zeroFS_class::Write(void * data, uint32_t ndat)
{
    6ad8:	push	{r3, r4, r5, lr}
    6ada:	mov	r4, r2
    BYTE* buff = (BYTE *) data;
    DWORD sector = write_sector;
    6adc:	ldr	r2, [r0, #4]
    UINT count = ndat/512;
    if(!sector) {Serial.println("Error MBR"); while(1);}
    6ade:	cbnz	r2, 6af0 <zeroFS_class::Write(void*, unsigned long)+0x18>
    6ae0:	movs	r1, #9
    6ae2:	ldr	r0, [pc, #40]	; (6b0c <zeroFS_class::Write(void*, unsigned long)+0x34>)
    6ae4:	bl	883c <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    6ae8:	ldr	r0, [pc, #36]	; (6b10 <zeroFS_class::Write(void*, unsigned long)+0x38>)
    6aea:	bl	a370 <Print::println()>
    6aee:	b.n	6aee <zeroFS_class::Write(void*, unsigned long)+0x16>
}
uint32_t zeroFS_class::Write(void * data, uint32_t ndat)
{
    BYTE* buff = (BYTE *) data;
    DWORD sector = write_sector;
    UINT count = ndat/512;
    6af0:	lsrs	r4, r4, #9
    6af2:	mov	r5, r0
    if(!sector) {Serial.println("Error MBR"); while(1);}
    if(DRESULT res = disk_write (pdrv, buff, sector, count)) return 0;
    6af4:	ldrb	r0, [r0, #28]
    6af6:	mov	r3, r4
    6af8:	bl	6d3c <disk_write>
    6afc:	cbnz	r0, 6b08 <zeroFS_class::Write(void*, unsigned long)+0x30>

    write_sector += count;
    6afe:	ldr	r3, [r5, #4]
    return count;
    6b00:	mov	r0, r4
    DWORD sector = write_sector;
    UINT count = ndat/512;
    if(!sector) {Serial.println("Error MBR"); while(1);}
    if(DRESULT res = disk_write (pdrv, buff, sector, count)) return 0;

    write_sector += count;
    6b02:	add	r4, r3
    6b04:	str	r4, [r5, #4]
    return count;
    6b06:	pop	{r3, r4, r5, pc}
{
    BYTE* buff = (BYTE *) data;
    DWORD sector = write_sector;
    UINT count = ndat/512;
    if(!sector) {Serial.println("Error MBR"); while(1);}
    if(DRESULT res = disk_write (pdrv, buff, sector, count)) return 0;
    6b08:	movs	r0, #0

    write_sector += count;
    return count;
}
    6b0a:	pop	{r3, r4, r5, pc}
    6b0c:	.word	0x20000cb4
    6b10:	.word	0x20001388

00006b14 <zeroFS_class::Count(unsigned long)>:


/*********************** for MTP **********************/

uint32_t zeroFS_class::Count(uint32_t parent)
{
    6b14:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6b18:	mov	r5, r0
  if(parent == 0xfffffffful) parent=Sector2Index(root_sector);
    6b1a:	adds	r0, r1, #1
    6b1c:	beq.n	6b78 <zeroFS_class::Count(unsigned long)+0x64>
  DWORD sector = Index2Sector(parent)+MCOUNT;
    6b1e:	lsls	r6, r1, #4
    6b20:	movw	r9, #8304	; 0x2070
    6b24:	movw	r8, #8324	; 0x2084

  read_sector = sector;
  //Serial.print(" "); Serial.println(sector,HEX);
  uint32_t cnt=0;
    6b28:	movs	r7, #0
/*********************** for MTP **********************/

uint32_t zeroFS_class::Count(uint32_t parent)
{
  if(parent == 0xfffffffful) parent=Sector2Index(root_sector);
  DWORD sector = Index2Sector(parent)+MCOUNT;
    6b2a:	add.w	r4, r6, #16
    6b2e:	add	r9, r5
    6b30:	add	r8, r5
    6b32:	add.w	sl, r5, #8320	; 0x2080

  read_sector = sector;
    6b36:	str	r4, [r5, #12]
    6b38:	b.n	6b52 <zeroFS_class::Count(unsigned long)+0x3e>
      BYTE* buff = (BYTE *) &hdr;
      UINT count = 1;
      if(DRESULT res = disk_read (pdrv, buff, sector, count)) { Serial.printf("count %x\n",sector); while(1); }
      cnt++;      
      sector = hdr.next;
      if(hdr.parent != Index2Sector(parent)) {cnt--; break;}
    6b3a:	ldr.w	r2, [r8]
    {
      BYTE* buff = (BYTE *) &hdr;
      UINT count = 1;
      if(DRESULT res = disk_read (pdrv, buff, sector, count)) { Serial.printf("count %x\n",sector); while(1); }
      cnt++;      
      sector = hdr.next;
    6b3e:	ldr.w	r4, [sl]
      if(hdr.parent != Index2Sector(parent)) {cnt--; break;}
    6b42:	cmp	r6, r2
    6b44:	bne.n	6b72 <zeroFS_class::Count(unsigned long)+0x5e>
      if(sector==eof_sector) break; // end of data reached
      if(sector==0xFFFFFFFFUL) break; // end of list
    6b46:	ldr	r2, [r5, #16]
    while(1)
    {
      BYTE* buff = (BYTE *) &hdr;
      UINT count = 1;
      if(DRESULT res = disk_read (pdrv, buff, sector, count)) { Serial.printf("count %x\n",sector); while(1); }
      cnt++;      
    6b48:	mov	r7, r3
      sector = hdr.next;
      if(hdr.parent != Index2Sector(parent)) {cnt--; break;}
      if(sector==eof_sector) break; // end of data reached
      if(sector==0xFFFFFFFFUL) break; // end of list
    6b4a:	cmp	r2, r4
    6b4c:	beq.n	6b70 <zeroFS_class::Count(unsigned long)+0x5c>
    6b4e:	adds	r2, r4, #1
    6b50:	beq.n	6b70 <zeroFS_class::Count(unsigned long)+0x5c>
  uint32_t cnt=0;
    while(1)
    {
      BYTE* buff = (BYTE *) &hdr;
      UINT count = 1;
      if(DRESULT res = disk_read (pdrv, buff, sector, count)) { Serial.printf("count %x\n",sector); while(1); }
    6b52:	movs	r3, #1
    6b54:	mov	r2, r4
    6b56:	mov	r1, r9
    6b58:	ldrb	r0, [r5, #28]
    6b5a:	bl	6cf8 <disk_read>
      cnt++;      
    6b5e:	adds	r3, r7, #1
  uint32_t cnt=0;
    while(1)
    {
      BYTE* buff = (BYTE *) &hdr;
      UINT count = 1;
      if(DRESULT res = disk_read (pdrv, buff, sector, count)) { Serial.printf("count %x\n",sector); while(1); }
    6b60:	cmp	r0, #0
    6b62:	beq.n	6b3a <zeroFS_class::Count(unsigned long)+0x26>
    6b64:	mov	r2, r4
    6b66:	ldr	r1, [pc, #24]	; (6b80 <zeroFS_class::Count(unsigned long)+0x6c>)
    6b68:	ldr	r0, [pc, #24]	; (6b84 <zeroFS_class::Count(unsigned long)+0x70>)
    6b6a:	bl	a3a0 <Print::printf(char const*, ...)>
    6b6e:	b.n	6b6e <zeroFS_class::Count(unsigned long)+0x5a>
      cnt++;      
    6b70:	mov	r7, r3
    }
    read_sector=parent+1; // reset read_sector to first object ater parent
    return cnt;
  }
*/
}
    6b72:	mov	r0, r7
    6b74:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

/*********************** for MTP **********************/

uint32_t zeroFS_class::Count(uint32_t parent)
{
  if(parent == 0xfffffffful) parent=Sector2Index(root_sector);
    6b78:	ldr	r1, [r5, #0]
    6b7a:	lsrs	r1, r1, #4
    6b7c:	b.n	6b1e <zeroFS_class::Count(unsigned long)+0xa>
    6b7e:	nop
    6b80:	.word	0x20000d30
    6b84:	.word	0x20001388

00006b88 <zeroFS_class::Next()>:
    return cnt;
  }
*/
}
uint32_t zeroFS_class::Next(void)
{
    6b88:	push	{r3, r4, r5, lr}
  //uint32_t old_type=0;
  uint32_t sector = read_sector;
    6b8a:	ldr	r5, [r0, #12]
  HDR_TYPE type=T_ROOT;

  if(sector==eof_sector) return 0;
  if(sector==0xFFFFFFFFUL) return 0;
    6b8c:	ldr	r3, [r0, #16]
    6b8e:	cmp	r3, r5
    6b90:	beq.n	6bbc <zeroFS_class::Next()+0x34>
    6b92:	adds	r3, r5, #1
    6b94:	beq.n	6bbc <zeroFS_class::Next()+0x34>
    6b96:	mov	r4, r0

  BYTE* buff = (BYTE *) &hdr;
  UINT count = 1;
  
  //Serial.println(sector,HEX);
  if(DRESULT res = disk_read (pdrv, buff, sector, count)) { Serial.printf("next %x\n",sector); while(1); }
    6b98:	movw	r1, #8304	; 0x2070
    6b9c:	movs	r3, #1
    6b9e:	mov	r2, r5
    6ba0:	ldrb	r0, [r0, #28]
    6ba2:	add	r1, r4
    6ba4:	bl	6cf8 <disk_read>
    6ba8:	cbnz	r0, 6bc0 <zeroFS_class::Next()+0x38>
  //Serial.println(hdr.next,HEX);
  
  read_sector = hdr.next;
    6baa:	add.w	r3, r4, #8320	; 0x2080
  uint32_t index = Sector2Index(hdr.sect);
    6bae:	movw	r2, #8312	; 0x2078
  
  //Serial.println(sector,HEX);
  if(DRESULT res = disk_read (pdrv, buff, sector, count)) { Serial.printf("next %x\n",sector); while(1); }
  //Serial.println(hdr.next,HEX);
  
  read_sector = hdr.next;
    6bb2:	ldr	r3, [r3, #0]
  uint32_t index = Sector2Index(hdr.sect);
    6bb4:	ldr	r0, [r4, r2]
  
  //Serial.println(sector,HEX);
  if(DRESULT res = disk_read (pdrv, buff, sector, count)) { Serial.printf("next %x\n",sector); while(1); }
  //Serial.println(hdr.next,HEX);
  
  read_sector = hdr.next;
    6bb6:	str	r3, [r4, #12]
  uint32_t index = Sector2Index(hdr.sect);
    6bb8:	lsrs	r0, r0, #4
  return index;
    6bba:	pop	{r3, r4, r5, pc}
  //uint32_t old_type=0;
  uint32_t sector = read_sector;
  HDR_TYPE type=T_ROOT;

  if(sector==eof_sector) return 0;
  if(sector==0xFFFFFFFFUL) return 0;
    6bbc:	movs	r0, #0
  //Serial.println(hdr.next,HEX);
  
  read_sector = hdr.next;
  uint32_t index = Sector2Index(hdr.sect);
  return index;
}
    6bbe:	pop	{r3, r4, r5, pc}

  BYTE* buff = (BYTE *) &hdr;
  UINT count = 1;
  
  //Serial.println(sector,HEX);
  if(DRESULT res = disk_read (pdrv, buff, sector, count)) { Serial.printf("next %x\n",sector); while(1); }
    6bc0:	mov	r2, r5
    6bc2:	ldr	r1, [pc, #8]	; (6bcc <zeroFS_class::Next()+0x44>)
    6bc4:	ldr	r0, [pc, #8]	; (6bd0 <zeroFS_class::Next()+0x48>)
    6bc6:	bl	a3a0 <Print::printf(char const*, ...)>
    6bca:	b.n	6bca <zeroFS_class::Next()+0x42>
    6bcc:	.word	0x20000d3c
    6bd0:	.word	0x20001388

00006bd4 <zeroFS_class::Info(unsigned long, char*, unsigned long*, unsigned long*)>:
  uint32_t index = Sector2Index(hdr.sect);
  return index;
}

uint32_t zeroFS_class::Info(uint32_t handle, char *filename, uint32_t *size, uint32_t *parent)
{
    6bd4:	push	{r3, r4, r5, r6, r7, lr}
  //uint32_t old_type=0;
  uint32_t sector = Index2Sector(handle);
    6bd6:	lsls	r6, r1, #4
  if(sector==eof_sector) return 0;
    6bd8:	ldr	r1, [r0, #16]
    6bda:	cmp	r6, r1
    6bdc:	beq.n	6c28 <zeroFS_class::Info(unsigned long, char*, unsigned long*, unsigned long*)+0x54>
    6bde:	mov	r4, r0

    BYTE* buff = (BYTE *) &hdr;
    UINT count = 1;
    if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read5",res);
    6be0:	movw	r1, #8304	; 0x2070
    6be4:	mov	r7, r3
    6be6:	mov	r5, r2
    6be8:	movs	r3, #1
    6bea:	mov	r2, r6
    6bec:	ldrb	r0, [r0, #28]
    6bee:	add	r1, r4
    6bf0:	bl	6cf8 <disk_read>
    6bf4:	cbnz	r0, 6c46 <zeroFS_class::Info(unsigned long, char*, unsigned long*, unsigned long*)+0x72>

    strcpy(filename,hdr.name);
    6bf6:	movw	r1, #8344	; 0x2098
    6bfa:	mov	r0, r5
    6bfc:	add	r1, r4
    6bfe:	bl	bee0 <strcpy>
    if(hdr.type==T_FILE)
    6c02:	movw	r3, #8308	; 0x2074
    6c06:	ldr	r3, [r4, r3]
    6c08:	cmp	r3, #3
    6c0a:	beq.n	6c2c <zeroFS_class::Info(unsigned long, char*, unsigned long*, unsigned long*)+0x58>
    { hdr.size = hdr.next-hdr.sect;
      *size=512*hdr.size;
    }
    else
    {
      *size=0xFFFFFFFFul;
    6c0c:	mov.w	r3, #4294967295
    6c10:	str	r3, [r7, #0]
    }
    *parent=Sector2Index(hdr.parent);
    6c12:	movw	r3, #8324	; 0x2084
    return Sector2Index(hdr.sect);
    6c16:	movw	r2, #8312	; 0x2078
    }
    else
    {
      *size=0xFFFFFFFFul;
    }
    *parent=Sector2Index(hdr.parent);
    6c1a:	ldr	r1, [sp, #24]
    6c1c:	ldr	r3, [r4, r3]
    6c1e:	lsrs	r3, r3, #4
    6c20:	str	r3, [r1, #0]
    return Sector2Index(hdr.sect);
    6c22:	ldr	r0, [r4, r2]
    6c24:	lsrs	r0, r0, #4
    6c26:	pop	{r3, r4, r5, r6, r7, pc}

uint32_t zeroFS_class::Info(uint32_t handle, char *filename, uint32_t *size, uint32_t *parent)
{
  //uint32_t old_type=0;
  uint32_t sector = Index2Sector(handle);
  if(sector==eof_sector) return 0;
    6c28:	movs	r0, #0
    {
      *size=0xFFFFFFFFul;
    }
    *parent=Sector2Index(hdr.parent);
    return Sector2Index(hdr.sect);
}
    6c2a:	pop	{r3, r4, r5, r6, r7, pc}
    UINT count = 1;
    if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read5",res);

    strcpy(filename,hdr.name);
    if(hdr.type==T_FILE)
    { hdr.size = hdr.next-hdr.sect;
    6c2c:	add.w	r3, r4, #8320	; 0x2080
    6c30:	movw	r2, #8312	; 0x2078
    6c34:	movw	r1, #8328	; 0x2088
    6c38:	ldr	r2, [r4, r2]
    6c3a:	ldr	r3, [r3, #0]
    6c3c:	subs	r3, r3, r2
      *size=512*hdr.size;
    6c3e:	lsls	r2, r3, #9
    UINT count = 1;
    if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read5",res);

    strcpy(filename,hdr.name);
    if(hdr.type==T_FILE)
    { hdr.size = hdr.next-hdr.sect;
    6c40:	str	r3, [r4, r1]
      *size=512*hdr.size;
    6c42:	str	r2, [r7, #0]
    6c44:	b.n	6c12 <zeroFS_class::Info(unsigned long, char*, unsigned long*, unsigned long*)+0x3e>
  uint32_t sector = Index2Sector(handle);
  if(sector==eof_sector) return 0;

    BYTE* buff = (BYTE *) &hdr;
    UINT count = 1;
    if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read5",res);
    6c46:	mov	r1, r0
    6c48:	ldr	r0, [pc, #4]	; (6c50 <zeroFS_class::Info(unsigned long, char*, unsigned long*, unsigned long*)+0x7c>)
    6c4a:	bl	6780 <die(char const*, DRESULT)>
    6c4e:	nop
    6c50:	.word	0x20000d48

00006c54 <zeroFS_class::GetSize(unsigned long)>:
    *parent=Sector2Index(hdr.parent);
    return Sector2Index(hdr.sect);
}

  uint32_t zeroFS_class::GetSize(uint32_t handle) 
  {
    6c54:	push	{r4, lr}
    uint32_t sector=Index2Sector(handle);
    BYTE* buff = (BYTE *) &hdr;
    UINT count = 1;
    if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read6",res);
    6c56:	lsls	r2, r1, #4
    *parent=Sector2Index(hdr.parent);
    return Sector2Index(hdr.sect);
}

  uint32_t zeroFS_class::GetSize(uint32_t handle) 
  {
    6c58:	mov	r4, r0
    uint32_t sector=Index2Sector(handle);
    BYTE* buff = (BYTE *) &hdr;
    UINT count = 1;
    if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read6",res);
    6c5a:	movw	r1, #8304	; 0x2070
    6c5e:	movs	r3, #1
    6c60:	ldrb	r0, [r0, #28]
    6c62:	add	r1, r4
    6c64:	bl	6cf8 <disk_read>
    6c68:	cbnz	r0, 6c92 <zeroFS_class::GetSize(unsigned long)+0x3e>

    if(hdr.type==T_FILE) hdr.size = hdr.next-hdr.sect;
    6c6a:	movw	r3, #8308	; 0x2074
    6c6e:	ldr	r3, [r4, r3]
    6c70:	cmp	r3, #3
    6c72:	beq.n	6c7a <zeroFS_class::GetSize(unsigned long)+0x26>

    return (hdr.type==T_FILE)? 512*hdr.size : 0xFFFFFFFFUL;
    6c74:	mov.w	r0, #4294967295
  }
    6c78:	pop	{r4, pc}
    uint32_t sector=Index2Sector(handle);
    BYTE* buff = (BYTE *) &hdr;
    UINT count = 1;
    if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read6",res);

    if(hdr.type==T_FILE) hdr.size = hdr.next-hdr.sect;
    6c7a:	add.w	r3, r4, #8320	; 0x2080
    6c7e:	movw	r1, #8312	; 0x2078
    6c82:	movw	r2, #8328	; 0x2088
    6c86:	ldr	r3, [r3, #0]
    6c88:	ldr	r0, [r4, r1]
    6c8a:	subs	r0, r3, r0
    6c8c:	str	r0, [r4, r2]

    return (hdr.type==T_FILE)? 512*hdr.size : 0xFFFFFFFFUL;
    6c8e:	lsls	r0, r0, #9
    6c90:	pop	{r4, pc}
  uint32_t zeroFS_class::GetSize(uint32_t handle) 
  {
    uint32_t sector=Index2Sector(handle);
    BYTE* buff = (BYTE *) &hdr;
    UINT count = 1;
    if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read6",res);
    6c92:	mov	r1, r0
    6c94:	ldr	r0, [pc, #4]	; (6c9c <zeroFS_class::GetSize(unsigned long)+0x48>)
    6c96:	bl	6780 <die(char const*, DRESULT)>
    6c9a:	nop
    6c9c:	.word	0x20000d50

00006ca0 <zeroFS_class::Read(unsigned long, char*, unsigned long)>:
    // keep sector number for next call
    old_sector=sector;
  }

  uint32_t zeroFS_class::Read(uint32_t sector, char* out, uint32_t count) 
  { if(DRESULT res = disk_read (pdrv, (BYTE*)out, sector, count)) die("read_",res);
    6ca0:	push	{r3, r4, r5, lr}
    6ca2:	mov	r4, r1
    6ca4:	ldrb	r0, [r0, #28]
    6ca6:	mov	r1, r2
    6ca8:	mov	r5, r3
    6caa:	mov	r2, r4
    6cac:	bl	6cf8 <disk_read>
    6cb0:	cbnz	r0, 6cb6 <zeroFS_class::Read(unsigned long, char*, unsigned long)+0x16>
    return sector+count;
    6cb2:	adds	r0, r4, r5
    6cb4:	pop	{r3, r4, r5, pc}
    // keep sector number for next call
    old_sector=sector;
  }

  uint32_t zeroFS_class::Read(uint32_t sector, char* out, uint32_t count) 
  { if(DRESULT res = disk_read (pdrv, (BYTE*)out, sector, count)) die("read_",res);
    6cb6:	mov	r1, r0
    6cb8:	ldr	r0, [pc, #4]	; (6cc0 <zeroFS_class::Read(unsigned long, char*, unsigned long)+0x20>)
    6cba:	bl	6780 <die(char const*, DRESULT)>
    6cbe:	nop
    6cc0:	.word	0x20000d68

00006cc4 <disk_initialize>:
)
{
	DSTATUS stat=STA_NOINIT;
	int result;

	switch (pdrv) {
    6cc4:	cmp	r0, #1
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
    6cc6:	push	{r3, lr}
	DSTATUS stat=STA_NOINIT;
	int result;

	switch (pdrv) {
    6cc8:	beq.n	6cea <disk_initialize+0x26>
    6cca:	bcc.n	6cde <disk_initialize+0x1a>
    6ccc:	cmp	r0, #2
    6cce:	bne.n	6cda <disk_initialize+0x16>
		if(result==RES_OK) stat=0; else stat=STA_NODISK;

		return stat;

	case DEV_MSC :
		result = MSC_disk_initialize();
    6cd0:	bl	80a8 <MSC_disk_initialize>

		// translate the reslut code here
		if(result==RES_OK) stat=0; else stat=STA_NODISK;
    6cd4:	cbz	r0, 6ce6 <disk_initialize+0x22>
	switch (pdrv) {
	case DEV_SPI :

		result = SPI_disk_initialize();
		// translate the reslut code here
		if(result==RES_OK) stat=0; else stat=STA_NODISK;
    6cd6:	movs	r0, #2
    6cd8:	pop	{r3, pc}
		// translate the reslut code here
		if(result==RES_OK) stat=0; else stat=STA_NODISK;

		return stat;
	}
	return STA_NOINIT;
    6cda:	movs	r0, #1
}
    6cdc:	pop	{r3, pc}
	int result;

	switch (pdrv) {
	case DEV_SPI :

		result = SPI_disk_initialize();
    6cde:	bl	8098 <SPI_disk_initialize()>
		// translate the reslut code here
		if(result==RES_OK) stat=0; else stat=STA_NODISK;
    6ce2:	cmp	r0, #0
    6ce4:	bne.n	6cd6 <disk_initialize+0x12>
    6ce6:	movs	r0, #0
    6ce8:	pop	{r3, pc}

		return stat;

	case DEV_SDHC :
		result = SDHC_disk_initialize();
    6cea:	bl	7320 <SDHC_disk_initialize>

		// translate the reslut code here
		if(result==RES_OK) stat=0; else stat=STA_NODISK;
    6cee:	cmp	r0, #0
    6cf0:	beq.n	6ce6 <disk_initialize+0x22>
	switch (pdrv) {
	case DEV_SPI :

		result = SPI_disk_initialize();
		// translate the reslut code here
		if(result==RES_OK) stat=0; else stat=STA_NODISK;
    6cf2:	movs	r0, #2
    6cf4:	pop	{r3, pc}
    6cf6:	nop

00006cf8 <disk_read>:
	UINT count		/* Number of sectors to read */
)
{
	DRESULT res=RES_OK;
	int result=0;
	switch (pdrv) {
    6cf8:	cmp	r0, #1
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	/* Start sector in LBA */
	UINT count		/* Number of sectors to read */
)
{
    6cfa:	push	{r4, lr}
    6cfc:	mov	r4, r1
    6cfe:	mov	r1, r2
	DRESULT res=RES_OK;
	int result=0;
	switch (pdrv) {
    6d00:	beq.n	6d2a <disk_read+0x32>
    6d02:	bcc.n	6d1a <disk_read+0x22>
    6d04:	cmp	r0, #2
    6d06:	bne.n	6d16 <disk_read+0x1e>
		return res;

	case DEV_MSC :
		// translate the arguments here

		result = MSC_disk_read(buff, sector, count);
    6d08:	mov	r2, r3
    6d0a:	mov	r0, r4
    6d0c:	bl	80ac <MSC_disk_read>
		// translate the reslut code here
		if(result==0) res=RES_OK; else res=RES_READERROR;
    6d10:	cbz	r0, 6d26 <disk_read+0x2e>
	switch (pdrv) {
	case DEV_SPI :
  
		result = SPI_disk_read(buff, sector, count);
		// translate the reslut code here
 	    if(result==0) res=RES_OK; else res=RES_READERROR;
    6d12:	movs	r0, #6
    6d14:	pop	{r4, pc}

		return res;

	}

	return RES_PARERR;
    6d16:	movs	r0, #4
}
    6d18:	pop	{r4, pc}
	DRESULT res=RES_OK;
	int result=0;
	switch (pdrv) {
	case DEV_SPI :
  
		result = SPI_disk_read(buff, sector, count);
    6d1a:	mov	r2, r3
    6d1c:	mov	r0, r4
    6d1e:	bl	7c08 <SPI_disk_read(unsigned char*, unsigned long, unsigned int)>
		// translate the reslut code here
 	    if(result==0) res=RES_OK; else res=RES_READERROR;
    6d22:	cmp	r0, #0
    6d24:	bne.n	6d12 <disk_read+0x1a>
    6d26:	movs	r0, #0
    6d28:	pop	{r4, pc}
		return res;

	case DEV_SDHC :
		// translate the arguments here

		result = SDHC_disk_read(buff, sector, count);
    6d2a:	mov	r2, r3
    6d2c:	mov	r0, r4
    6d2e:	bl	7438 <SDHC_disk_read>
		// translate the reslut code here
		if(result==0) res=RES_OK; else res=RES_READERROR;
    6d32:	cmp	r0, #0
    6d34:	beq.n	6d26 <disk_read+0x2e>
	switch (pdrv) {
	case DEV_SPI :
  
		result = SPI_disk_read(buff, sector, count);
		// translate the reslut code here
 	    if(result==0) res=RES_OK; else res=RES_READERROR;
    6d36:	movs	r0, #6
    6d38:	pop	{r4, pc}
    6d3a:	nop

00006d3c <disk_write>:
)
{
	DRESULT res=RES_OK;
	int result;

	switch (pdrv) {
    6d3c:	cmp	r0, #1
	BYTE pdrv,			/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Start sector in LBA */
	UINT count			/* Number of sectors to write */
)
{
    6d3e:	push	{r4, lr}
    6d40:	mov	r4, r1
    6d42:	mov	r1, r2
	DRESULT res=RES_OK;
	int result;

	switch (pdrv) {
    6d44:	beq.n	6d6e <disk_write+0x32>
    6d46:	bcc.n	6d5e <disk_write+0x22>
    6d48:	cmp	r0, #2
    6d4a:	bne.n	6d5a <disk_write+0x1e>
		return res;

	case DEV_MSC :
		// translate the arguments here

		result = MSC_disk_write(buff, sector, count);
    6d4c:	mov	r2, r3
    6d4e:	mov	r0, r4
    6d50:	bl	80b0 <MSC_disk_write>
		// translate the reslut code here
		if(result==0) res=RES_OK; else res=RES_WRITEERROR;
    6d54:	cbz	r0, 6d6a <disk_write+0x2e>
	case DEV_SPI :
		// translate the arguments here

		result = SPI_disk_write(buff, sector, count);
		// translate the reslut code here
		if(result==0) res=RES_OK; else res=RES_WRITEERROR;
    6d56:	movs	r0, #7
    6d58:	pop	{r4, pc}
		if(result==0) res=RES_OK; else res=RES_WRITEERROR;

		return res;
	}

	return RES_PARERR;
    6d5a:	movs	r0, #4
}
    6d5c:	pop	{r4, pc}

	switch (pdrv) {
	case DEV_SPI :
		// translate the arguments here

		result = SPI_disk_write(buff, sector, count);
    6d5e:	mov	r2, r3
    6d60:	mov	r0, r4
    6d62:	bl	7eb0 <SPI_disk_write(unsigned char const*, unsigned long, unsigned int)>
		// translate the reslut code here
		if(result==0) res=RES_OK; else res=RES_WRITEERROR;
    6d66:	cmp	r0, #0
    6d68:	bne.n	6d56 <disk_write+0x1a>
    6d6a:	movs	r0, #0
    6d6c:	pop	{r4, pc}
		return res;

	case DEV_SDHC :
		// translate the arguments here

		result = SDHC_disk_write(buff, sector, count);
    6d6e:	mov	r2, r3
    6d70:	mov	r0, r4
    6d72:	bl	75ac <SDHC_disk_write>
		// translate the reslut code here
		if(result==0) res=RES_OK; else res=RES_WRITEERROR;
    6d76:	cmp	r0, #0
    6d78:	beq.n	6d6a <disk_write+0x2e>
	case DEV_SPI :
		// translate the arguments here

		result = SPI_disk_write(buff, sector, count);
		// translate the reslut code here
		if(result==0) res=RES_OK; else res=RES_WRITEERROR;
    6d7a:	movs	r0, #7
    6d7c:	pop	{r4, pc}
    6d7e:	nop

00006d80 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
//	DRESULT res=RES_OK;

	switch (pdrv) {
    6d80:	cmp	r0, #1
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    6d82:	mov	r3, r1
//	DRESULT res=RES_OK;

	switch (pdrv) {
    6d84:	beq.n	6d8c <disk_ioctl+0xc>
    6d86:	bcc.n	6d98 <disk_ioctl+0x18>
    6d88:	cmp	r0, #2
    6d8a:	bne.n	6d94 <disk_ioctl+0x14>
		// Process of the command for the SDHC device

//		return res;

	case DEV_MSC :
		return SDHC_disk_ioctl(cmd,(BYTE*)buff);
    6d8c:	mov	r1, r2
    6d8e:	mov	r0, r3
    6d90:	b.w	6f60 <SDHC_disk_ioctl>
//		return res;

		}

	return RES_PARERR;
}
    6d94:	movs	r0, #4
    6d96:	bx	lr
{
//	DRESULT res=RES_OK;

	switch (pdrv) {
	case DEV_SPI :
		return SPI_disk_ioctl(cmd,(BYTE*)buff);
    6d98:	mov	r1, r2
    6d9a:	mov	r0, r3
    6d9c:	b.w	7660 <SPI_disk_ioctl(unsigned char, unsigned char*)>

00006da0 <setSdclk(unsigned long)>:
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = 6; //CCM_CLKO2 (0 is USDHC1_DAT3)
  }
  
  static uint32_t sdClock()
  {
    uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    6da0:	ldr	r2, [pc, #152]	; (6e3c <setSdclk(unsigned long)+0x9c>)
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000 * kHzMax;
    6da2:	mov.w	r1, #1000	; 0x3e8
  }
  
  static uint32_t sdClock()
  {
    uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    uint32_t PLL2PFD0 = (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    6da6:	ldr	r3, [pc, #152]	; (6e40 <setSdclk(unsigned long)+0xa0>)
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = 6; //CCM_CLKO2 (0 is USDHC1_DAT3)
  }
  
  static uint32_t sdClock()
  {
    uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    6da8:	ldr	r2, [r2, #36]	; 0x24
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000 * kHzMax;
    6daa:	mul.w	r0, r1, r0
  }
  
  static uint32_t sdClock()
  {
    uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    uint32_t PLL2PFD0 = (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    6dae:	ldr.w	r3, [r3, #256]	; 0x100
    6db2:	ldr	r1, [pc, #144]	; (6e44 <setSdclk(unsigned long)+0xa4>)
    6db4:	and.w	r3, r3, #63	; 0x3f
    6db8:	umull	r1, r3, r1, r3
    return PLL2PFD0;
  }

#endif

static void setSdclk(uint32_t kHzMax) {
    6dbc:	push	{r4, r5, r6, r7}
  }
  
  static uint32_t sdClock()
  {
    uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    uint32_t PLL2PFD0 = (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    6dbe:	lsrs	r3, r3, #2
    6dc0:	ubfx	r4, r2, #11, #3
    6dc4:	ldr	r2, [pc, #128]	; (6e48 <setSdclk(unsigned long)+0xa8>)
    6dc6:	adds	r4, #1
    6dc8:	udiv	r3, r2, r3
    6dcc:	udiv	r4, r3, r4
  uint32_t maxSdclk = 1000 * kHzMax;

  //  uint32_t f_pll = F_CPU;
  uint32_t f_pll = sdClock();

  while ((f_pll / (sdclkfs * DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    6dd0:	cmp.w	r0, r4, lsr #4
    6dd4:	bcs.n	6e32 <setSdclk(unsigned long)+0x92>
    6dd6:	movs	r3, #1
    6dd8:	b.n	6dde <setSdclk(unsigned long)+0x3e>
    6dda:	cmp	r3, #255	; 0xff
    6ddc:	bhi.n	6dea <setSdclk(unsigned long)+0x4a>
    sdclkfs <<= 1;
    6dde:	lsls	r3, r3, #1
  uint32_t maxSdclk = 1000 * kHzMax;

  //  uint32_t f_pll = F_CPU;
  uint32_t f_pll = sdClock();

  while ((f_pll / (sdclkfs * DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    6de0:	lsls	r2, r3, #4
    6de2:	udiv	r2, r4, r2
    6de6:	cmp	r0, r2
    6de8:	bcc.n	6dda <setSdclk(unsigned long)+0x3a>
    6dea:	lsrs	r2, r3, #1
    6dec:	lsls	r7, r2, #8
    sdclkfs <<= 1;
  }
  while ((f_pll / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    6dee:	udiv	r2, r4, r3
    6df2:	cmp	r0, r2
    6df4:	bcs.n	6e38 <setSdclk(unsigned long)+0x98>
    6df6:	lsls	r1, r3, #1
    6df8:	movs	r2, #1
    dvs++;
    6dfa:	adds	r6, r2, #1
  uint32_t f_pll = sdClock();

  while ((f_pll / (sdclkfs * DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((f_pll / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    6dfc:	udiv	r5, r4, r1
    6e00:	cmp	r0, r5
    6e02:	add	r1, r3
    6e04:	bcs.n	6e2e <setSdclk(unsigned long)+0x8e>
    6e06:	cmp	r6, #16
    6e08:	mov	r2, r6
    6e0a:	bne.n	6dfa <setSdclk(unsigned long)+0x5a>
    6e0c:	movs	r3, #240	; 0xf0
    // Disable SDHC clock.
    SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
  #endif

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    6e0e:	ldr	r4, [pc, #60]	; (6e4c <setSdclk(unsigned long)+0xac>)
                                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    6e10:	ldr	r0, [pc, #60]	; (6e50 <setSdclk(unsigned long)+0xb0>)
    // Disable SDHC clock.
    SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
  #endif

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    6e12:	ldr	r2, [r4, #44]	; 0x2c

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) { }
    6e14:	mov	r1, r4
  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
                                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    6e16:	ands	r0, r2
    6e18:	orr.w	r0, r0, #917504	; 0xe0000
    6e1c:	orr.w	r2, r0, r7
    6e20:	orrs	r2, r3
    6e22:	str	r2, [r4, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) { }
    6e24:	ldr	r3, [r1, #36]	; 0x24
    6e26:	lsls	r3, r3, #28
    6e28:	bpl.n	6e24 <setSdclk(unsigned long)+0x84>

  #if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    // Enable the SDHC clock.
    SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
  #endif
}
    6e2a:	pop	{r4, r5, r6, r7}
    6e2c:	bx	lr
    6e2e:	lsls	r3, r2, #4
    6e30:	b.n	6e0e <setSdclk(unsigned long)+0x6e>
  uint32_t maxSdclk = 1000 * kHzMax;

  //  uint32_t f_pll = F_CPU;
  uint32_t f_pll = sdClock();

  while ((f_pll / (sdclkfs * DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    6e32:	movs	r7, #0

static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
    6e34:	movs	r3, #1
    6e36:	b.n	6dee <setSdclk(unsigned long)+0x4e>
  uint32_t f_pll = sdClock();

  while ((f_pll / (sdclkfs * DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((f_pll / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    6e38:	movs	r3, #0
    6e3a:	b.n	6e0e <setSdclk(unsigned long)+0x6e>
    6e3c:	.word	0x400fc000
    6e40:	.word	0x400d8000
    6e44:	.word	0xaaaaaaab
    6e48:	.word	0x5e69ec00
    6e4c:	.word	0x402c0000
    6e50:	.word	0xfff0000f

00006e54 <sd_isr()>:

static volatile uint32_t dmaDone=0;
//

void sd_isr(void)
{ SDHC_IRQSIGEN &= ~SDHC_IRQSIGEN_DMA_MASK;
    6e54:	ldr	r3, [pc, #64]	; (6e98 <sd_isr()+0x44>)
    6e56:	ldr	r2, [pc, #68]	; (6e9c <sd_isr()+0x48>)
    6e58:	ldr	r0, [r3, #56]	; 0x38
  //
  while(!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC));//  SDHC_IRQSTAT &= ~SDHC_IRQSTAT_TC;
    6e5a:	mov	r1, r3

static volatile uint32_t dmaDone=0;
//

void sd_isr(void)
{ SDHC_IRQSIGEN &= ~SDHC_IRQSIGEN_DMA_MASK;
    6e5c:	ands	r2, r0
    6e5e:	str	r2, [r3, #56]	; 0x38
  //
  while(!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC));//  SDHC_IRQSTAT &= ~SDHC_IRQSTAT_TC;
    6e60:	ldr	r3, [r1, #48]	; 0x30
    6e62:	ldr	r2, [pc, #52]	; (6e98 <sd_isr()+0x44>)
    6e64:	lsls	r0, r3, #30
    6e66:	bpl.n	6e60 <sd_isr()+0xc>

  #if defined(__IMXRT1052__) || defined(__IMXRT1062__)
    SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN) ;  
    6e68:	ldr	r3, [r2, #72]	; 0x48
    6e6a:	bic.w	r3, r3, #129	; 0x81
    6e6e:	str	r3, [r2, #72]	; 0x48
  #endif
  
  if(SDHC_SYSCTL & SDHC_SYSCTL_HCKEN) SDHC_SYSCTL &=  ~SDHC_SYSCTL_HCKEN;
    6e70:	ldr	r3, [r2, #44]	; 0x2c
    6e72:	lsls	r3, r3, #30
    6e74:	bpl.n	6e7e <sd_isr()+0x2a>
    6e76:	ldr	r3, [r2, #44]	; 0x2c
    6e78:	bic.w	r3, r3, #2
    6e7c:	str	r3, [r2, #44]	; 0x2c
  SDHC_PROCTL &= ~SDHC_PROCTL_D3CD; SDHC_PROCTL |=  SDHC_PROCTL_D3CD;
    6e7e:	ldr	r3, [pc, #24]	; (6e98 <sd_isr()+0x44>)

  dmaDone=1;
    6e80:	movs	r0, #1
    6e82:	ldr	r1, [pc, #28]	; (6ea0 <sd_isr()+0x4c>)
  #if defined(__IMXRT1052__) || defined(__IMXRT1062__)
    SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN) ;  
  #endif
  
  if(SDHC_SYSCTL & SDHC_SYSCTL_HCKEN) SDHC_SYSCTL &=  ~SDHC_SYSCTL_HCKEN;
  SDHC_PROCTL &= ~SDHC_PROCTL_D3CD; SDHC_PROCTL |=  SDHC_PROCTL_D3CD;
    6e84:	ldr	r2, [r3, #40]	; 0x28
    6e86:	bic.w	r2, r2, #8
    6e8a:	str	r2, [r3, #40]	; 0x28
    6e8c:	ldr	r2, [r3, #40]	; 0x28
    6e8e:	orr.w	r2, r2, #8
    6e92:	str	r2, [r3, #40]	; 0x28

  dmaDone=1;
    6e94:	str	r0, [r1, #0]
    6e96:	bx	lr
    6e98:	.word	0x402c0000
    6e9c:	.word	0xeffffff5
    6ea0:	.word	0x200045c8

00006ea4 <sd_CMD(unsigned long, unsigned long)>:
/***************************** LOW Level SDHC interface ********************************/
// sends the command to SDcard
static int sd_CMD(uint32_t xfertyp, uint32_t arg)
{
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
    6ea4:	ldr	r3, [pc, #80]	; (6ef8 <sd_CMD(unsigned long, unsigned long)+0x54>)
}

/***************************** LOW Level SDHC interface ********************************/
// sends the command to SDcard
static int sd_CMD(uint32_t xfertyp, uint32_t arg)
{
    6ea6:	push	{r4, r5, r6}
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
    6ea8:	ldr	r4, [r3, #48]	; 0x30

  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB));
    6eaa:	mov	r2, r3
    6eac:	mov	r6, r3
/***************************** LOW Level SDHC interface ********************************/
// sends the command to SDcard
static int sd_CMD(uint32_t xfertyp, uint32_t arg)
{
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
    6eae:	orr.w	r4, r4, #128	; 0x80
    6eb2:	str	r4, [r3, #48]	; 0x30

  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB));
    6eb4:	ldr	r3, [r2, #36]	; 0x24
    6eb6:	ldr	r5, [pc, #64]	; (6ef8 <sd_CMD(unsigned long, unsigned long)+0x54>)
    6eb8:	lsls	r4, r3, #31
    6eba:	bmi.n	6eb4 <sd_CMD(unsigned long, unsigned long)+0x10>
    6ebc:	ldr	r3, [r6, #36]	; 0x24
    6ebe:	lsls	r3, r3, #30
    6ec0:	bmi.n	6eb4 <sd_CMD(unsigned long, unsigned long)+0x10>

  // send command
  SDHC_CMDARG = arg;
    6ec2:	str	r1, [r5, #8]
static uint32_t sd_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
  do
  { result = SDHC_IRQSTAT & mask;
    6ec4:	mov	r4, r5
  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB));

  // send command
  SDHC_CMDARG = arg;
  SDHC_XFERTYP = xfertyp;
    6ec6:	str	r0, [r5, #12]
******************************************************************************/
// waits for status bits sets
static uint32_t sd_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
    6ec8:	mov.w	r2, #16777216	; 0x1000000
    6ecc:	b.n	6ed0 <sd_CMD(unsigned long, unsigned long)+0x2c>
  do
  { result = SDHC_IRQSTAT & mask;
    timeout--;
  } while (!result && (timeout));
    6ece:	cbz	r2, 6ee2 <sd_CMD(unsigned long, unsigned long)+0x3e>
static uint32_t sd_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
  do
  { result = SDHC_IRQSTAT & mask;
    6ed0:	ldr	r1, [r4, #48]	; 0x30
    timeout--;
    6ed2:	subs	r2, #1
static uint32_t sd_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
  do
  { result = SDHC_IRQSTAT & mask;
    6ed4:	ldr	r3, [pc, #36]	; (6efc <sd_CMD(unsigned long, unsigned long)+0x58>)
    6ed6:	ands	r3, r1
    timeout--;
  } while (!result && (timeout));
    6ed8:	cmp	r3, #0
    6eda:	beq.n	6ece <sd_CMD(unsigned long, unsigned long)+0x2a>
  if (timeout) return result;
    6edc:	cbz	r2, 6ee2 <sd_CMD(unsigned long, unsigned long)+0x3e>
  SDHC_CMDARG = arg;
  SDHC_XFERTYP = xfertyp;

  /* Wait for response */
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (sd_WaitStatus(mask) != SDHC_IRQSTAT_CC)
    6ede:	cmp	r3, #1
    6ee0:	beq.n	6ef2 <sd_CMD(unsigned long, unsigned long)+0x4e>
  { SDHC_IRQSTAT |= mask;
    6ee2:	ldr	r2, [pc, #20]	; (6ef8 <sd_CMD(unsigned long, unsigned long)+0x54>)
    return SDHC_RESULT_ERROR;
    6ee4:	movs	r0, #1
  SDHC_XFERTYP = xfertyp;

  /* Wait for response */
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (sd_WaitStatus(mask) != SDHC_IRQSTAT_CC)
  { SDHC_IRQSTAT |= mask;
    6ee6:	ldr	r3, [pc, #20]	; (6efc <sd_CMD(unsigned long, unsigned long)+0x58>)
    6ee8:	ldr	r1, [r2, #48]	; 0x30
    6eea:	orrs	r3, r1
    return SDHC_RESULT_NO_RESPONSE;
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;

  return SDHC_RESULT_OK;
}
    6eec:	pop	{r4, r5, r6}
  SDHC_XFERTYP = xfertyp;

  /* Wait for response */
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (sd_WaitStatus(mask) != SDHC_IRQSTAT_CC)
  { SDHC_IRQSTAT |= mask;
    6eee:	str	r3, [r2, #48]	; 0x30
    return SDHC_RESULT_NO_RESPONSE;
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;

  return SDHC_RESULT_OK;
}
    6ef0:	bx	lr
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (sd_WaitStatus(mask) != SDHC_IRQSTAT_CC)
  { SDHC_IRQSTAT |= mask;
    return SDHC_RESULT_ERROR;
  }
  return SDHC_RESULT_OK;
    6ef2:	movs	r0, #0
    return SDHC_RESULT_NO_RESPONSE;
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;

  return SDHC_RESULT_OK;
}
    6ef4:	pop	{r4, r5, r6}
    6ef6:	bx	lr
    6ef8:	.word	0x402c0000
    6efc:	.word	0x000e0001

00006f00 <sd_ACMD(unsigned long, unsigned long, unsigned long)>:
// send CMD 55 Application specific command
#define SDHC_CMD55_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD55) | SDHC_XFERTYP_CICEN | \
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48))

static int sd_ACMD(uint32_t xfertyp, uint32_t arg1, uint32_t arg2)
{
    6f00:	push	{r3, r4, r5, lr}
    6f02:	mov	r4, r0
  int result =sd_CMD(SDHC_CMD55_XFERTYP,arg1);
    6f04:	ldr	r0, [pc, #20]	; (6f1c <sd_ACMD(unsigned long, unsigned long, unsigned long)+0x1c>)
// send CMD 55 Application specific command
#define SDHC_CMD55_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD55) | SDHC_XFERTYP_CICEN | \
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48))

static int sd_ACMD(uint32_t xfertyp, uint32_t arg1, uint32_t arg2)
{
    6f06:	mov	r5, r2
  int result =sd_CMD(SDHC_CMD55_XFERTYP,arg1);
    6f08:	bl	6ea4 <sd_CMD(unsigned long, unsigned long)>
  if(!(result == SDHC_RESULT_OK)) return result;
    6f0c:	cbz	r0, 6f10 <sd_ACMD(unsigned long, unsigned long, unsigned long)+0x10>
  return sd_CMD(xfertyp,arg2);
}
    6f0e:	pop	{r3, r4, r5, pc}

static int sd_ACMD(uint32_t xfertyp, uint32_t arg1, uint32_t arg2)
{
  int result =sd_CMD(SDHC_CMD55_XFERTYP,arg1);
  if(!(result == SDHC_RESULT_OK)) return result;
  return sd_CMD(xfertyp,arg2);
    6f10:	mov	r1, r5
    6f12:	mov	r0, r4
}
    6f14:	ldmia.w	sp!, {r3, r4, r5, lr}

static int sd_ACMD(uint32_t xfertyp, uint32_t arg1, uint32_t arg2)
{
  int result =sd_CMD(SDHC_CMD55_XFERTYP,arg1);
  if(!(result == SDHC_RESULT_OK)) return result;
  return sd_CMD(xfertyp,arg2);
    6f18:	b.w	6ea4 <sd_CMD(unsigned long, unsigned long)>
    6f1c:	.word	0x371a0000

00006f20 <sd_CMD12_StopTransferWaitForBusy()>:
//
static int sd_CMD12_StopTransfer(void){  return sd_CMD(SDHC_CMD12_XFERTYP, 0);}

// ---------- sends CMD12 to stop transfer and first waits to ready SDCard
static int sd_CMD12_StopTransferWaitForBusy(void)
{
    6f20:	push	{r3, r4, r5, lr}

// ---------- sends CMD12 to stop transfer
#define SDHC_CMD12_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) | \
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY))
//
static int sd_CMD12_StopTransfer(void){  return sd_CMD(SDHC_CMD12_XFERTYP, 0);}
    6f22:	movs	r1, #0
    6f24:	ldr	r0, [pc, #48]	; (6f58 <sd_CMD12_StopTransferWaitForBusy()+0x38>)
    6f26:	bl	6ea4 <sd_CMD(unsigned long, unsigned long)>
{
  uint32_t timeOut = 1000;
  int result;
  do 
  { result = sd_CMD12_StopTransfer();
    timeOut--;
    6f2a:	movw	r4, #999	; 0x3e7

// ---------- sends CMD12 to stop transfer
#define SDHC_CMD12_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) | \
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY))
//
static int sd_CMD12_StopTransfer(void){  return sd_CMD(SDHC_CMD12_XFERTYP, 0);}
    6f2e:	mov	r3, r0
  uint32_t timeOut = 1000;
  int result;
  do 
  { result = sd_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    6f30:	ldr	r5, [pc, #40]	; (6f5c <sd_CMD12_StopTransferWaitForBusy()+0x3c>)
    6f32:	b.n	6f40 <sd_CMD12_StopTransferWaitForBusy()+0x20>
    6f34:	cbnz	r3, 6f4a <sd_CMD12_StopTransferWaitForBusy()+0x2a>

// ---------- sends CMD12 to stop transfer
#define SDHC_CMD12_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) | \
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY))
//
static int sd_CMD12_StopTransfer(void){  return sd_CMD(SDHC_CMD12_XFERTYP, 0);}
    6f36:	bl	6ea4 <sd_CMD(unsigned long, unsigned long)>
  uint32_t timeOut = 1000;
  int result;
  do 
  { result = sd_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    6f3a:	subs	r4, #1

// ---------- sends CMD12 to stop transfer
#define SDHC_CMD12_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) | \
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY))
//
static int sd_CMD12_StopTransfer(void){  return sd_CMD(SDHC_CMD12_XFERTYP, 0);}
    6f3c:	mov	r3, r0
  uint32_t timeOut = 1000;
  int result;
  do 
  { result = sd_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    6f3e:	beq.n	6f4e <sd_CMD12_StopTransferWaitForBusy()+0x2e>
    6f40:	ldr	r2, [r5, #36]	; 0x24

// ---------- sends CMD12 to stop transfer
#define SDHC_CMD12_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) | \
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY))
//
static int sd_CMD12_StopTransfer(void){  return sd_CMD(SDHC_CMD12_XFERTYP, 0);}
    6f42:	movs	r1, #0
    6f44:	ldr	r0, [pc, #16]	; (6f58 <sd_CMD12_StopTransferWaitForBusy()+0x38>)
  uint32_t timeOut = 1000;
  int result;
  do 
  { result = sd_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    6f46:	lsls	r2, r2, #29
    6f48:	bmi.n	6f34 <sd_CMD12_StopTransferWaitForBusy()+0x14>
  
  if (result != SDHC_RESULT_OK)  return result;
  if (!timeOut)  return SDHC_RESULT_NO_RESPONSE;

  return SDHC_RESULT_OK;
}
    6f4a:	mov	r0, r3
    6f4c:	pop	{r3, r4, r5, pc}
  { result = sd_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
  
  if (result != SDHC_RESULT_OK)  return result;
  if (!timeOut)  return SDHC_RESULT_NO_RESPONSE;
    6f4e:	cmp	r0, #0
    6f50:	it	eq
    6f52:	moveq	r3, #5

  return SDHC_RESULT_OK;
}
    6f54:	mov	r0, r3
    6f56:	pop	{r3, r4, r5, pc}
    6f58:	.word	0x0cdb0000
    6f5c:	.word	0x402c0000

00006f60 <SDHC_disk_ioctl>:
{	return (DRESULT) sd_CardWriteBlocks((void *) buff, (uint32_t) sector, (uint32_t) count);
}

DRESULT SDHC_disk_ioctl(BYTE cmd, BYTE *buff)
{   return RES_OK;
}
    6f60:	movs	r0, #0
    6f62:	bx	lr

00006f64 <sd_CardInit()>:
  }
  
  static void initClock()
  {
    /* set PDF_528 PLL2PFD0 */
    CCM_ANALOG_PFD_528 |= (1 << 7);
    6f64:	ldr	r2, [pc, #408]	; (7100 <sd_CardInit()+0x19c>)
    CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0); // 12 - 35
    CCM_ANALOG_PFD_528 &= ~(1 << 7);
  
    /* Enable USDHC clock. */
    CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    6f66:	ldr	r3, [pc, #412]	; (7104 <sd_CardInit()+0x1a0>)
  }
  
  static void initClock()
  {
    /* set PDF_528 PLL2PFD0 */
    CCM_ANALOG_PFD_528 |= (1 << 7);
    6f68:	ldr.w	r0, [r2, #256]	; 0x100
    CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((7)); // &0x7
  
    // for testing
    CCM_CCOSR = CCM_CCOSR_CLKO1_EN | CCM_CCOSR_CLKO1_DIV(7) | CCM_CCOSR_CLKO1_SEL(1); //(1: SYS_PLL/2)
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 6; //CCM_CLKO1 (0 is USDHC1_DAT2)
    6f6c:	ldr	r1, [pc, #408]	; (7108 <sd_CardInit()+0x1a4>)
  }
  
  static void initClock()
  {
    /* set PDF_528 PLL2PFD0 */
    CCM_ANALOG_PFD_528 |= (1 << 7);
    6f6e:	orr.w	r0, r0, #128	; 0x80

//-----------------------------------------------------------------------------
// initialize the SDHC Controller and SD Card
// returns status of initialization(OK, nonInit, noCard, CardProtected)
uint8_t sd_CardInit(void)
{
    6f72:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }
  
  static void initClock()
  {
    /* set PDF_528 PLL2PFD0 */
    CCM_ANALOG_PFD_528 |= (1 << 7);
    6f76:	str.w	r0, [r2, #256]	; 0x100
    CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((7)); // &0x7
  
    // for testing
    CCM_CCOSR = CCM_CCOSR_CLKO1_EN | CCM_CCOSR_CLKO1_DIV(7) | CCM_CCOSR_CLKO1_SEL(1); //(1: SYS_PLL/2)
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 6; //CCM_CLKO1 (0 is USDHC1_DAT2)
    6f7a:	movs	r7, #6
  
  static void initClock()
  {
    /* set PDF_528 PLL2PFD0 */
    CCM_ANALOG_PFD_528 |= (1 << 7);
    CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    6f7c:	ldr.w	r5, [r2, #256]	; 0x100
    //  CCM_CSCMR1 &= ~(CCM_CSCMR1_USDHC1_CLK_SEL);     // PLL2PFD2
    CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((7)); // &0x7
  
    // for testing
    CCM_CCOSR = CCM_CCOSR_CLKO1_EN | CCM_CCOSR_CLKO1_DIV(7) | CCM_CCOSR_CLKO1_SEL(1); //(1: SYS_PLL/2)
    6f80:	mov.w	lr, #241	; 0xf1
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 6; //CCM_CLKO1 (0 is USDHC1_DAT2)
    // for testing
    CCM_CCOSR |= (CCM_CCOSR_CLKO2_EN | CCM_CCOSR_CLKO2_DIV(7) | CCM_CCOSR_CLKO2_SEL(3)); //(3: usdhc1_clk_root))
    6f84:	ldr	r6, [pc, #388]	; (710c <sd_CardInit()+0x1a8>)
    }
  }
  
  static void sd_ReleaseGPIO(void)
  {
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 5; //GPIO3_IO16
    6f86:	movs	r4, #5
  
  static void initClock()
  {
    /* set PDF_528 PLL2PFD0 */
    CCM_ANALOG_PFD_528 |= (1 << 7);
    CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    6f88:	bic.w	r5, r5, #63	; 0x3f
  initClock();

  // De-init GPIO - to prevent unwanted clocks on bus
  sd_ReleaseGPIO();
  #if defined (__IMXRT1052__) || defined (__IMXRT1062__)
    SDHC_SYSCTL   |= 0xF;
    6f8c:	ldr	r0, [pc, #384]	; (7110 <sd_CardInit()+0x1ac>)
  
  static void initClock()
  {
    /* set PDF_528 PLL2PFD0 */
    CCM_ANALOG_PFD_528 |= (1 << 7);
    CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    6f8e:	str.w	r5, [r2, #256]	; 0x100
    CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0); // 12 - 35
    6f92:	ldr.w	r5, [r2, #256]	; 0x100
    6f96:	orr.w	r5, r5, #24
    6f9a:	str.w	r5, [r2, #256]	; 0x100
    CCM_ANALOG_PFD_528 &= ~(1 << 7);
    6f9e:	ldr.w	r5, [r2, #256]	; 0x100
    6fa2:	bic.w	r5, r5, #128	; 0x80
    6fa6:	str.w	r5, [r2, #256]	; 0x100
    SDHC_MIX_CTRL |= 0x80000000;
  #endif  

  /* Reset SDHC */
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) ; // wait
    6faa:	mov	r2, r0
    CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0); // 12 - 35
    CCM_ANALOG_PFD_528 &= ~(1 << 7);
  
    /* Enable USDHC clock. */
    CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    6fac:	ldr.w	r5, [r3, #128]	; 0x80
    6fb0:	orr.w	r5, r5, #12
    6fb4:	str.w	r5, [r3, #128]	; 0x80
    CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    6fb8:	ldr	r5, [r3, #36]	; 0x24
    6fba:	bic.w	r5, r5, #14336	; 0x3800
    6fbe:	str	r5, [r3, #36]	; 0x24
    //
    //  CCM_CSCMR1 &= ~(CCM_CSCMR1_USDHC1_CLK_SEL);     // PLL2PFD2
    CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    6fc0:	ldr	r5, [r3, #28]
    6fc2:	orr.w	r5, r5, #65536	; 0x10000
    6fc6:	str	r5, [r3, #28]
    CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((7)); // &0x7
    6fc8:	ldr	r5, [r3, #36]	; 0x24
    6fca:	orr.w	r5, r5, #14336	; 0x3800
    6fce:	str	r5, [r3, #36]	; 0x24
  
    // for testing
    CCM_CCOSR = CCM_CCOSR_CLKO1_EN | CCM_CCOSR_CLKO1_DIV(7) | CCM_CCOSR_CLKO1_SEL(1); //(1: SYS_PLL/2)
    6fd0:	str.w	lr, [r3, #96]	; 0x60
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 6; //CCM_CLKO1 (0 is USDHC1_DAT2)
    6fd4:	str.w	r7, [r1, #460]	; 0x1cc
    // for testing
    CCM_CCOSR |= (CCM_CCOSR_CLKO2_EN | CCM_CCOSR_CLKO2_DIV(7) | CCM_CCOSR_CLKO2_SEL(3)); //(3: usdhc1_clk_root))
    6fd8:	ldr	r5, [r3, #96]	; 0x60
    6fda:	orrs	r6, r5
    SDHC_SYSCTL   |= 0xF;
    SDHC_MIX_CTRL |= 0x80000000;
  #endif  

  /* Reset SDHC */
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    6fdc:	ldr	r5, [pc, #308]	; (7114 <sd_CardInit()+0x1b0>)
  
    // for testing
    CCM_CCOSR = CCM_CCOSR_CLKO1_EN | CCM_CCOSR_CLKO1_DIV(7) | CCM_CCOSR_CLKO1_SEL(1); //(1: SYS_PLL/2)
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 6; //CCM_CLKO1 (0 is USDHC1_DAT2)
    // for testing
    CCM_CCOSR |= (CCM_CCOSR_CLKO2_EN | CCM_CCOSR_CLKO2_DIV(7) | CCM_CCOSR_CLKO2_SEL(3)); //(3: usdhc1_clk_root))
    6fde:	str	r6, [r3, #96]	; 0x60
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = 6; //CCM_CLKO2 (0 is USDHC1_DAT3)
    6fe0:	str.w	r7, [r1, #464]	; 0x1d0
    }
  }
  
  static void sd_ReleaseGPIO(void)
  {
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 5; //GPIO3_IO16
    6fe4:	str.w	r4, [r1, #460]	; 0x1cc
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = 5; //GPIO3_IO17
    6fe8:	str.w	r4, [r1, #464]	; 0x1d0
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = 5; //GPIO3_IO12
    6fec:	str.w	r4, [r1, #444]	; 0x1bc
    //3.3V
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = 5; //GPIO3_IO13
    6ff0:	str.w	r4, [r1, #448]	; 0x1c0
    //GND
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = 5; //GPIO3_IO14
    6ff4:	str.w	r4, [r1, #452]	; 0x1c4
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = 5; //GPIO3_IO15
    6ff8:	str.w	r4, [r1, #456]	; 0x1c8
  initClock();

  // De-init GPIO - to prevent unwanted clocks on bus
  sd_ReleaseGPIO();
  #if defined (__IMXRT1052__) || defined (__IMXRT1062__)
    SDHC_SYSCTL   |= 0xF;
    6ffc:	ldr	r3, [r0, #44]	; 0x2c
    6ffe:	orr.w	r3, r3, #15
    7002:	str	r3, [r0, #44]	; 0x2c
    SDHC_MIX_CTRL |= 0x80000000;
    7004:	ldr	r3, [r0, #72]	; 0x48
    7006:	orr.w	r3, r3, #2147483648	; 0x80000000
    700a:	str	r3, [r0, #72]	; 0x48
  #endif  

  /* Reset SDHC */
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    700c:	ldr	r3, [r0, #44]	; 0x2c
    700e:	orrs	r5, r3
    7010:	str	r5, [r0, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) ; // wait
    7012:	ldr	r3, [r2, #44]	; 0x2c
    7014:	lsls	r0, r3, #7
    7016:	bmi.n	7012 <sd_CardInit()+0xae>

  /* Set the SDHC initial baud rate divider and start */
  setSdclk(400);
    7018:	mov.w	r0, #400	; 0x190
    701c:	bl	6da0 <setSdclk(unsigned long)>

  /* Poll inhibit bits */
  while (SDHC_PRSSTAT & (SDHC_PRSSTAT_CIHB | SDHC_PRSSTAT_CDIHB)) ;
    7020:	ldr	r1, [pc, #236]	; (7110 <sd_CardInit()+0x1ac>)
    7022:	ldr	r3, [r1, #36]	; 0x24
    7024:	ldr	r2, [pc, #232]	; (7110 <sd_CardInit()+0x1ac>)
    7026:	ands.w	r3, r3, #3
    702a:	bne.n	7022 <sd_CardInit()+0xbe>
#else

  static void sd_InitGPIO(void)
  {
    { //T4                              // Inverted pins(T4)
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 0; //DAT2  
    702c:	ldr	r1, [pc, #216]	; (7108 <sd_CardInit()+0x1a4>)
                                  IOMUXC_SW_PAD_CTL_PAD_SPEED(2);
  
      const uint32_t DATA_MASK = CLOCK_MASK |
                                 (IOMUXC_SW_PAD_CTL_PAD_PUE | IOMUXC_SW_PAD_CTL_PAD_PUS(1));
  
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;
    702e:	movw	r0, #28808	; 0x7088
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;
    7032:	movw	r4, #4232	; 0x1088
  SDHC_PROCTL |=  SDHC_PROCTL_D3CD;
  // SDHC_PROCTL = SDHC_PROCTL_EMODE(SDHC_PROCTL_EMODE_INVARIANT) | SDHC_PROCTL_D3CD;
  //  SDHC_WML |= SDHC_WML_RDWML(SDHC_FIFO_BUFFER_SIZE) | SDHC_WML_WRWML(SDHC_FIFO_BUFFER_SIZE);

  #if defined(__IMXRT1052__) || defined (__IMXRT1062__)
    SDHC_VENDOR = 0x2000F801; // (1<<29 | 0x1F<<11 | 1);
    7036:	ldr	r5, [pc, #224]	; (7118 <sd_CardInit()+0x1b4>)
#else

  static void sd_InitGPIO(void)
  {
    { //T4                              // Inverted pins(T4)
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 0; //DAT2  
    7038:	str.w	r3, [r1, #460]	; 0x1cc
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = 0; //DAT3  
    703c:	str.w	r3, [r1, #464]	; 0x1d0
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = 0; //CMD   
    7040:	str.w	r3, [r1, #444]	; 0x1bc
      //3.3V                                           
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = 0; //CLK   
    7044:	str.w	r3, [r1, #448]	; 0x1c0
      //GND                                           
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = 0; //DAT0 
    7048:	str.w	r3, [r1, #452]	; 0x1c4
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = 0; //DAT1 
    704c:	str.w	r3, [r1, #456]	; 0x1c8
                                  IOMUXC_SW_PAD_CTL_PAD_SPEED(2);
  
      const uint32_t DATA_MASK = CLOCK_MASK |
                                 (IOMUXC_SW_PAD_CTL_PAD_PUE | IOMUXC_SW_PAD_CTL_PAD_PUS(1));
  
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;
    7050:	str.w	r0, [r1, #956]	; 0x3bc
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;
    7054:	str.w	r0, [r1, #960]	; 0x3c0
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;
    7058:	str.w	r0, [r1, #940]	; 0x3ac
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;
    705c:	str.w	r4, [r1, #944]	; 0x3b0
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;
    7060:	str.w	r0, [r1, #948]	; 0x3b4
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;
    7064:	str.w	r0, [r1, #952]	; 0x3b8
  sd_InitGPIO();

  /* Initial values */ // to do - Check values
//  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(512);
  
  SDHC_PROCTL &= ~SDHC_PROCTL_DMAS(3); // clear ADMA
    7068:	ldr	r3, [r2, #40]	; 0x28
  // clear interrupt status
  SDHC_IRQSTAT = SDHC_IRQSTAT;

  /* Enable requests */
  SDHC_IRQSTATEN =  SDHC_IRQSTAT_CRM | SDHC_IRQSTATEN_CIESEN | 
                    SDHC_IRQSTATEN_TCSEN | SDHC_IRQSTATEN_CCSEN;
    706a:	ldr	r4, [pc, #176]	; (711c <sd_CardInit()+0x1b8>)
  sd_InitGPIO();

  /* Initial values */ // to do - Check values
//  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(512);
  
  SDHC_PROCTL &= ~SDHC_PROCTL_DMAS(3); // clear ADMA
    706c:	bic.w	r3, r3, #768	; 0x300


#ifdef __cplusplus
extern "C" void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    7070:	ldr	r1, [pc, #172]	; (7120 <sd_CardInit()+0x1bc>)
    7072:	ldr	r0, [pc, #176]	; (7124 <sd_CardInit()+0x1c0>)
    7074:	str	r3, [r2, #40]	; 0x28

  SDHC_PROCTL |=  SDHC_PROCTL_D3CD;
    7076:	ldr	r3, [r2, #40]	; 0x28
    7078:	orr.w	r3, r3, #8
    707c:	str	r3, [r2, #40]	; 0x28
  // SDHC_PROCTL = SDHC_PROCTL_EMODE(SDHC_PROCTL_EMODE_INVARIANT) | SDHC_PROCTL_D3CD;
  //  SDHC_WML |= SDHC_WML_RDWML(SDHC_FIFO_BUFFER_SIZE) | SDHC_WML_WRWML(SDHC_FIFO_BUFFER_SIZE);

  #if defined(__IMXRT1052__) || defined (__IMXRT1062__)
    SDHC_VENDOR = 0x2000F801; // (1<<29 | 0x1F<<11 | 1);
    707e:	str.w	r5, [r2, #192]	; 0xc0
    SDHC_VENDOR2 &= ~(1<<12); //switch off ACMD23 sharing SDMA
    7082:	ldr.w	r3, [r2, #200]	; 0xc8
    7086:	bic.w	r3, r3, #4096	; 0x1000
    708a:	str.w	r3, [r2, #200]	; 0xc8
  #endif
  
  // clear interrupt status
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    708e:	ldr	r3, [r2, #48]	; 0x30
    7090:	str	r3, [r2, #48]	; 0x30

  /* Enable requests */
  SDHC_IRQSTATEN =  SDHC_IRQSTAT_CRM | SDHC_IRQSTATEN_CIESEN | 
                    SDHC_IRQSTATEN_TCSEN | SDHC_IRQSTATEN_CCSEN;
    7092:	str	r4, [r2, #52]	; 0x34
    7094:	str.w	r0, [r1, #504]	; 0x1f8

  attachInterruptVector(IRQ_SDHC, sd_isr);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6 * 16);
    7098:	ldr	r0, [pc, #140]	; (7128 <sd_CardInit()+0x1c4>)
    709a:	movs	r4, #96	; 0x60
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    709c:	ldr	r3, [pc, #140]	; (712c <sd_CardInit()+0x1c8>)
    709e:	mov.w	r1, #16384	; 0x4000
    70a2:	mov.w	r5, #500	; 0x1f4
  /* Enable requests */
  SDHC_IRQSTATEN =  SDHC_IRQSTAT_CRM | SDHC_IRQSTATEN_CIESEN | 
                    SDHC_IRQSTATEN_TCSEN | SDHC_IRQSTATEN_CCSEN;

  attachInterruptVector(IRQ_SDHC, sd_isr);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6 * 16);
    70a6:	strb	r4, [r0, #0]
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    70a8:	str	r1, [r3, #0]

  // initial clocks... SD spec says only 74 clocks are needed, but if Teensy rebooted
  // while the card was in middle of an operation, thousands of clock cycles can be
  // needed to get the card to complete a prior command and return to a usable state.
  for (int ii = 0; ii < 500; ii++) {
    SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    70aa:	ldr	r3, [r2, #44]	; 0x2c
    70ac:	orr.w	r3, r3, #134217728	; 0x8000000
    70b0:	str	r3, [r2, #44]	; 0x2c
    while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) ;
    70b2:	ldr	r3, [r2, #44]	; 0x2c
    70b4:	ldr	r4, [pc, #88]	; (7110 <sd_CardInit()+0x1ac>)
    70b6:	lsls	r1, r3, #4
    70b8:	bmi.n	70b2 <sd_CardInit()+0x14e>
  NVIC_ENABLE_IRQ(IRQ_SDHC);

  // initial clocks... SD spec says only 74 clocks are needed, but if Teensy rebooted
  // while the card was in middle of an operation, thousands of clock cycles can be
  // needed to get the card to complete a prior command and return to a usable state.
  for (int ii = 0; ii < 500; ii++) {
    70ba:	subs	r5, #1
    70bc:	bne.n	70aa <sd_CardInit()+0x146>
    SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) ;
  }

  if(!(SDHC_PRSSTAT & SDHC_PRSSTAT_CINS)) return SDHC_STATUS_NODISK;
    70be:	ldr	r3, [r4, #36]	; 0x24
    70c0:	lsls	r2, r3, #15
    70c2:	bmi.n	70d8 <sd_CardInit()+0x174>
  uint8_t resS;
  int resR;

  resS = sd_Init();

  sdCardDesc.status = resS;
    70c4:	ldr	r3, [pc, #104]	; (7130 <sd_CardInit()+0x1cc>)
    70c6:	movs	r2, #2
  sdCardDesc.address = 0;
    70c8:	str	r5, [r3, #4]
  for (int ii = 0; ii < 500; ii++) {
    SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) ;
  }

  if(!(SDHC_PRSSTAT & SDHC_PRSSTAT_CINS)) return SDHC_STATUS_NODISK;
    70ca:	mov	r0, r2

  resS = sd_Init();

  sdCardDesc.status = resS;
  sdCardDesc.address = 0;
  sdCardDesc.highCapacity = 0;
    70cc:	strb	r5, [r3, #1]
  sdCardDesc.version2 = 0;
    70ce:	strb	r5, [r3, #2]
  sdCardDesc.numBlocks = 0;
    70d0:	str	r5, [r3, #8]
  uint8_t resS;
  int resR;

  resS = sd_Init();

  sdCardDesc.status = resS;
    70d2:	strb	r2, [r3, #0]
    70d4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    70d8:	ldr	r6, [pc, #84]	; (7130 <sd_CardInit()+0x1cc>)
    // mixCtrl |= SDHC_MIX_CTRL_BCEN; // does not hurt
    // mixCtrl |= SDHC_MIX_CTRL_DTDSEL; // write/read (will be set later
    // mixCtrl |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    // mixCtrl |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    // mixCtrl |= SDHC_MIX_CTRL_AC23EN;
    SDHC_MIX_CTRL = mixCtrl;
    70da:	mov.w	r3, #2147483648	; 0x80000000
 * Convenience interfaces
 */
// ---------- sends CMD0 to put SDCARD to idle
#define SDHC_CMD0_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD0) | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_NO))
//
static int sd_CMD0_GoToIdle(void){ return sd_CMD(SDHC_CMD0_XFERTYP,0); }
    70de:	mov	r1, r5
    70e0:	mov	r0, r5
  uint8_t resS;
  int resR;

  resS = sd_Init();

  sdCardDesc.status = resS;
    70e2:	strb	r5, [r6, #0]
  sdCardDesc.address = 0;
  sdCardDesc.highCapacity = 0;
    70e4:	strb	r5, [r6, #1]
  sdCardDesc.version2 = 0;
    70e6:	strb	r5, [r6, #2]
  sdCardDesc.numBlocks = 0;
  
  if (resS)  return resS;

  SDHC_IRQSIGEN = 0;
    70e8:	str	r5, [r4, #56]	; 0x38
    // mixCtrl |= SDHC_MIX_CTRL_BCEN; // does not hurt
    // mixCtrl |= SDHC_MIX_CTRL_DTDSEL; // write/read (will be set later
    // mixCtrl |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    // mixCtrl |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    // mixCtrl |= SDHC_MIX_CTRL_AC23EN;
    SDHC_MIX_CTRL = mixCtrl;
    70ea:	str	r3, [r4, #72]	; 0x48
  int resR;

  resS = sd_Init();

  sdCardDesc.status = resS;
  sdCardDesc.address = 0;
    70ec:	str	r5, [r6, #4]
  sdCardDesc.highCapacity = 0;
  sdCardDesc.version2 = 0;
  sdCardDesc.numBlocks = 0;
    70ee:	str	r5, [r6, #8]
 * Convenience interfaces
 */
// ---------- sends CMD0 to put SDCARD to idle
#define SDHC_CMD0_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD0) | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_NO))
//
static int sd_CMD0_GoToIdle(void){ return sd_CMD(SDHC_CMD0_XFERTYP,0); }
    70f0:	bl	6ea4 <sd_CMD(unsigned long, unsigned long)>
    SDHC_MIX_CTRL = mixCtrl;
  #endif

  resR = sd_CMD0_GoToIdle();

  if (resR) { return sdCardDesc.status = SDHC_STATUS_NOINIT;}
    70f4:	cbz	r0, 7134 <sd_CardInit()+0x1d0>
    70f6:	movs	r0, #1
    70f8:	strb	r0, [r6, #0]
    70fa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    70fe:	nop
    7100:	.word	0x400d8000
    7104:	.word	0x400fc000
    7108:	.word	0x401f8000
    710c:	.word	0x01e30000
    7110:	.word	0x402c0000
    7114:	.word	0x01008000
    7118:	.word	0x2000f801
    711c:	.word	0x00080083
    7120:	.word	0x20001c00
    7124:	.word	0x00006e55
    7128:	.word	0xe000e46e
    712c:	.word	0xe000e10c
    7130:	.word	0x200045ac
             
// ---------- CMD8 to send interface condition
#define SDHC_CMD8_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD8) | SDHC_XFERTYP_CICEN | \
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48))
//
static int sd_CMD8_SetInterface(uint32_t cond){  return sd_CMD(SDHC_CMD8_XFERTYP, cond); }
    7134:	mov.w	r1, #426	; 0x1aa
    7138:	ldr	r0, [pc, #428]	; (72e8 <sd_CardInit()+0x384>)
    713a:	bl	6ea4 <sd_CMD(unsigned long, unsigned long)>

  resR = sd_CMD0_GoToIdle();

  if (resR) { return sdCardDesc.status = SDHC_STATUS_NOINIT;}
  resR = sd_CMD8_SetInterface(0x000001AA); // 3.3V and AA check pattern
  if (resR == SDHC_RESULT_OK) 
    713e:	cmp	r0, #0
    7140:	bne.w	72c2 <sd_CardInit()+0x35e>
  { if (!((SDHC_CMDRSP0 & 0x000001AA)== 0x000001AA)) return sdCardDesc.status = SDHC_STATUS_NOINIT;
    7144:	ldr	r3, [r4, #16]
    7146:	and.w	r3, r3, #426	; 0x1aa
    714a:	cmp.w	r3, #426	; 0x1aa
    714e:	bne.n	70f6 <sd_CardInit()+0x192>
    sdCardDesc.highCapacity = 1;
    7150:	movs	r3, #1
    7152:	strb	r3, [r6, #1]
static int sd_CMD16_SetBlockSize(uint32_t block_size){  return sd_CMD(SDHC_CMD16_XFERTYP, block_size);}

// ---------- ACMD 41 to send operation condition
#define SDHC_ACMD41_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_ACMD41) | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48))
//
static int sd_ACMD41_SendOperationCond(uint32_t cond){  return sd_ACMD(SDHC_ACMD41_XFERTYP,0, cond);}
    7154:	movs	r2, #0
    7156:	ldr	r0, [pc, #404]	; (72ec <sd_CardInit()+0x388>)
    7158:	mov	r1, r2
    715a:	bl	6f00 <sd_ACMD(unsigned long, unsigned long, unsigned long)>
  else if (resR == SDHC_RESULT_NO_RESPONSE) 
  { // version 1 cards do not respond to CMD8
  } 
  else return sdCardDesc.status = SDHC_STATUS_NOINIT;

  if (sd_ACMD41_SendOperationCond(0))  return sdCardDesc.status = SDHC_STATUS_NOINIT;
    715e:	cmp	r0, #0
    7160:	bne.n	70f6 <sd_CardInit()+0x192>

  if (SDHC_CMDRSP0 & 0x300000) {
    7162:	ldr	r3, [pc, #396]	; (72f0 <sd_CardInit()+0x38c>)
    7164:	ldr	r2, [r3, #16]
    7166:	tst.w	r2, #3145728	; 0x300000
    716a:	beq.n	71ae <sd_CardInit()+0x24a>
    uint32_t condition = 0x00300000;
    if (sdCardDesc.highCapacity) condition |= 0x40000000;
    716c:	ldrb	r2, [r6, #1]
    //
    uint32_t ii = 0;
    716e:	mov	r4, r0
  else return sdCardDesc.status = SDHC_STATUS_NOINIT;

  if (sd_ACMD41_SendOperationCond(0))  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  if (SDHC_CMDRSP0 & 0x300000) {
    uint32_t condition = 0x00300000;
    7170:	ldr	r7, [pc, #384]	; (72f4 <sd_CardInit()+0x390>)
      ii++;
      if (sd_ACMD41_SendOperationCond(condition)) {
        resS = SDHC_STATUS_NOINIT;
        break;
      }
    } while ((!(SDHC_CMDRSP0 & 0x80000000)) && (ii < SDHC_INITIALIZATION_MAX_CNT));
    7172:	mov	r5, r3
  else return sdCardDesc.status = SDHC_STATUS_NOINIT;

  if (sd_ACMD41_SendOperationCond(0))  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  if (SDHC_CMDRSP0 & 0x300000) {
    uint32_t condition = 0x00300000;
    7174:	cmp	r2, #0
      ii++;
      if (sd_ACMD41_SendOperationCond(condition)) {
        resS = SDHC_STATUS_NOINIT;
        break;
      }
    } while ((!(SDHC_CMDRSP0 & 0x80000000)) && (ii < SDHC_INITIALIZATION_MAX_CNT));
    7176:	ldr.w	r8, [pc, #384]	; 72f8 <sd_CardInit()+0x394>
  else return sdCardDesc.status = SDHC_STATUS_NOINIT;

  if (sd_ACMD41_SendOperationCond(0))  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  if (SDHC_CMDRSP0 & 0x300000) {
    uint32_t condition = 0x00300000;
    717a:	it	eq
    717c:	moveq.w	r7, #3145728	; 0x300000
static int sd_CMD16_SetBlockSize(uint32_t block_size){  return sd_CMD(SDHC_CMD16_XFERTYP, block_size);}

// ---------- ACMD 41 to send operation condition
#define SDHC_ACMD41_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_ACMD41) | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48))
//
static int sd_ACMD41_SendOperationCond(uint32_t cond){  return sd_ACMD(SDHC_ACMD41_XFERTYP,0, cond);}
    7180:	mov	r2, r7
    7182:	movs	r1, #0
    7184:	ldr	r0, [pc, #356]	; (72ec <sd_CardInit()+0x388>)
    uint32_t condition = 0x00300000;
    if (sdCardDesc.highCapacity) condition |= 0x40000000;
    //
    uint32_t ii = 0;
    do {
      ii++;
    7186:	adds	r4, #1
static int sd_CMD16_SetBlockSize(uint32_t block_size){  return sd_CMD(SDHC_CMD16_XFERTYP, block_size);}

// ---------- ACMD 41 to send operation condition
#define SDHC_ACMD41_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_ACMD41) | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48))
//
static int sd_ACMD41_SendOperationCond(uint32_t cond){  return sd_ACMD(SDHC_ACMD41_XFERTYP,0, cond);}
    7188:	bl	6f00 <sd_ACMD(unsigned long, unsigned long, unsigned long)>
    if (sdCardDesc.highCapacity) condition |= 0x40000000;
    //
    uint32_t ii = 0;
    do {
      ii++;
      if (sd_ACMD41_SendOperationCond(condition)) {
    718c:	cmp	r0, #0
    718e:	bne.w	72d0 <sd_CardInit()+0x36c>
        resS = SDHC_STATUS_NOINIT;
        break;
      }
    } while ((!(SDHC_CMDRSP0 & 0x80000000)) && (ii < SDHC_INITIALIZATION_MAX_CNT));
    7192:	cmp	r4, r8
    7194:	ldr	r3, [r5, #16]
    7196:	bhi.n	719c <sd_CardInit()+0x238>
    7198:	cmp	r3, #0
    719a:	bge.n	7180 <sd_CardInit()+0x21c>

    if (resS) return resS;

    if ((ii >= SDHC_INITIALIZATION_MAX_CNT) || (!(SDHC_CMDRSP0 & 0x40000000)))
    719c:	ldr	r3, [pc, #344]	; (72f8 <sd_CardInit()+0x394>)
    719e:	cmp	r4, r3
    71a0:	bhi.n	71aa <sd_CardInit()+0x246>
    71a2:	ldr	r3, [pc, #332]	; (72f0 <sd_CardInit()+0x38c>)
    71a4:	ldr	r3, [r3, #16]
    71a6:	lsls	r3, r3, #1
    71a8:	bmi.n	71ae <sd_CardInit()+0x24a>
      sdCardDesc.highCapacity = 0;
    71aa:	movs	r3, #0
    71ac:	strb	r3, [r6, #1]
  }

  // Card identify
  SDHC_CMDRSP0=SDHC_CMDRSP1=SDHC_CMDRSP2=SDHC_CMDRSP3=0;
    71ae:	movs	r3, #0
    71b0:	ldr	r7, [pc, #316]	; (72f0 <sd_CardInit()+0x38c>)

// ---------- sends CMD2 to identify card
#define SDHC_CMD2_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD2) | SDHC_XFERTYP_CCCEN \
                          | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_136))
//
static int sd_CMD2_Identify(void){  return sd_CMD(SDHC_CMD2_XFERTYP,0); }
    71b2:	ldr	r0, [pc, #328]	; (72fc <sd_CardInit()+0x398>)
    if ((ii >= SDHC_INITIALIZATION_MAX_CNT) || (!(SDHC_CMDRSP0 & 0x40000000)))
      sdCardDesc.highCapacity = 0;
  }

  // Card identify
  SDHC_CMDRSP0=SDHC_CMDRSP1=SDHC_CMDRSP2=SDHC_CMDRSP3=0;
    71b4:	str	r3, [r7, #28]

// ---------- sends CMD2 to identify card
#define SDHC_CMD2_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD2) | SDHC_XFERTYP_CCCEN \
                          | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_136))
//
static int sd_CMD2_Identify(void){  return sd_CMD(SDHC_CMD2_XFERTYP,0); }
    71b6:	mov	r1, r3
    if ((ii >= SDHC_INITIALIZATION_MAX_CNT) || (!(SDHC_CMDRSP0 & 0x40000000)))
      sdCardDesc.highCapacity = 0;
  }

  // Card identify
  SDHC_CMDRSP0=SDHC_CMDRSP1=SDHC_CMDRSP2=SDHC_CMDRSP3=0;
    71b8:	str	r3, [r7, #24]
    71ba:	str	r3, [r7, #20]
    71bc:	str	r3, [r7, #16]

// ---------- sends CMD2 to identify card
#define SDHC_CMD2_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD2) | SDHC_XFERTYP_CCCEN \
                          | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_136))
//
static int sd_CMD2_Identify(void){  return sd_CMD(SDHC_CMD2_XFERTYP,0); }
    71be:	bl	6ea4 <sd_CMD(unsigned long, unsigned long)>
      sdCardDesc.highCapacity = 0;
  }

  // Card identify
  SDHC_CMDRSP0=SDHC_CMDRSP1=SDHC_CMDRSP2=SDHC_CMDRSP3=0;
  if (sd_CMD2_Identify())  return sdCardDesc.status = SDHC_STATUS_NOINIT;
    71c2:	mov	r1, r0
    71c4:	cmp	r0, #0
    71c6:	bne.n	70f6 <sd_CardInit()+0x192>

// ---------- sends CMD 3 to get address
#define SDHC_CMD3_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD3) | SDHC_XFERTYP_CICEN | \
                         SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48))
//
static int sd_CMD3_GetAddress(void){  return sd_CMD(SDHC_CMD3_XFERTYP,0); }
    71c8:	ldr	r0, [pc, #308]	; (7300 <sd_CardInit()+0x39c>)
    71ca:	bl	6ea4 <sd_CMD(unsigned long, unsigned long)>
  // Card identify
  SDHC_CMDRSP0=SDHC_CMDRSP1=SDHC_CMDRSP2=SDHC_CMDRSP3=0;
  if (sd_CMD2_Identify())  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  // Get card address
  if (sd_CMD3_GetAddress())  return sdCardDesc.status = SDHC_STATUS_NOINIT;
    71ce:	cmp	r0, #0
    71d0:	bne.n	70f6 <sd_CardInit()+0x192>

  sdCardDesc.address = SDHC_CMDRSP0 & 0xFFFF0000;
    71d2:	ldr	r3, [r7, #16]
    71d4:	ldr	r4, [pc, #300]	; (7304 <sd_CardInit()+0x3a0>)
#define SDHC_CMD9_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD9) | SDHC_XFERTYP_CCCEN | \
             SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_136))
//
static int sd_CMD9_GetParameters(uint32_t address)
{
  int result = sd_CMD(SDHC_CMD9_XFERTYP, address);
    71d6:	ldr	r0, [pc, #304]	; (7308 <sd_CardInit()+0x3a4>)
  if (sd_CMD2_Identify())  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  // Get card address
  if (sd_CMD3_GetAddress())  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  sdCardDesc.address = SDHC_CMDRSP0 & 0xFFFF0000;
    71d8:	ands	r4, r3
    71da:	ldr	r5, [pc, #304]	; (730c <sd_CardInit()+0x3a8>)
#define SDHC_CMD9_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD9) | SDHC_XFERTYP_CCCEN | \
             SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_136))
//
static int sd_CMD9_GetParameters(uint32_t address)
{
  int result = sd_CMD(SDHC_CMD9_XFERTYP, address);
    71dc:	mov	r1, r4
  if (sd_CMD2_Identify())  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  // Get card address
  if (sd_CMD3_GetAddress())  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  sdCardDesc.address = SDHC_CMDRSP0 & 0xFFFF0000;
    71de:	str	r4, [r6, #4]
#define SDHC_CMD9_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD9) | SDHC_XFERTYP_CCCEN | \
             SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_136))
//
static int sd_CMD9_GetParameters(uint32_t address)
{
  int result = sd_CMD(SDHC_CMD9_XFERTYP, address);
    71e0:	bl	6ea4 <sd_CMD(unsigned long, unsigned long)>
  if (result == SDHC_RESULT_OK) { sdCardDesc.tranSpeed = SDHC_CMDRSP2 >> 24;}
    71e4:	cmp	r0, #0
    71e6:	bne.n	70f6 <sd_CardInit()+0x192>
    71e8:	ldr	r3, [r7, #24]
    71ea:	lsrs	r3, r3, #24
    71ec:	strb	r3, [r5, #3]
  sdCardDesc.address = SDHC_CMDRSP0 & 0xFFFF0000;

  // Get card parameters
  if (sd_CMD9_GetParameters(sdCardDesc.address))  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  if (!(SDHC_CMDRSP3 & 0x00C00000)) {
    71ee:	ldr	r3, [r7, #28]
    71f0:	tst.w	r3, #12582912	; 0xc00000
    71f4:	bne.n	72d6 <sd_CardInit()+0x372>
    uint32_t read_bl_len, c_size, c_size_mult;

    read_bl_len = (SDHC_CMDRSP2 >> 8) & 0x0F;
    71f6:	ldr	r1, [r7, #24]
    c_size = SDHC_CMDRSP2 & 0x03;
    71f8:	ldr	r3, [r7, #24]
    c_size = (c_size << 10) | (SDHC_CMDRSP1 >> 22);
    71fa:	ldr	r0, [r7, #20]
    c_size_mult = (SDHC_CMDRSP1 >> 7) & 0x07;
    sdCardDesc.numBlocks = (c_size + 1) * (1 << (c_size_mult + 2)) * (1 << (read_bl_len - 9));
    71fc:	ubfx	r1, r1, #8, #4
    7200:	lsls	r2, r3, #10
    uint32_t read_bl_len, c_size, c_size_mult;

    read_bl_len = (SDHC_CMDRSP2 >> 8) & 0x0F;
    c_size = SDHC_CMDRSP2 & 0x03;
    c_size = (c_size << 10) | (SDHC_CMDRSP1 >> 22);
    c_size_mult = (SDHC_CMDRSP1 >> 7) & 0x07;
    7202:	ldr	r3, [r7, #20]
    sdCardDesc.numBlocks = (c_size + 1) * (1 << (c_size_mult + 2)) * (1 << (read_bl_len - 9));
    7204:	subs	r1, #9
    7206:	and.w	r2, r2, #3072	; 0xc00
    720a:	ubfx	r3, r3, #7, #3
    720e:	orr.w	r2, r2, r0, lsr #22
    7212:	adds	r3, #2
    7214:	adds	r2, #1
    7216:	lsl.w	r3, r2, r3
    721a:	lsls	r3, r1
    721c:	str	r3, [r5, #8]
             
// ---------- sends CMD 7 to select card
#define SDHC_CMD7_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD7) | SDHC_XFERTYP_CICEN | \
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY))
//
static int sd_CMD7_SelectCard(uint32_t address){  return sd_CMD(SDHC_CMD7_XFERTYP, address);}
    721e:	mov	r1, r4
    7220:	ldr	r0, [pc, #236]	; (7310 <sd_CardInit()+0x3ac>)
    7222:	bl	6ea4 <sd_CMD(unsigned long, unsigned long)>
    c_size = (SDHC_CMDRSP1 >> 8) & 0x003FFFFF;
    sdCardDesc.numBlocks = (c_size + 1) << 10;
  }

  // Select card
  if (sd_CMD7_SelectCard(sdCardDesc.address)) return sdCardDesc.status = SDHC_STATUS_NOINIT;
    7226:	cmp	r0, #0
    7228:	bne.w	70f6 <sd_CardInit()+0x192>

// ---------- sends CMD16 to set block size
#define SDHC_CMD16_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD16) | SDHC_XFERTYP_CICEN | \
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48))
//
static int sd_CMD16_SetBlockSize(uint32_t block_size){  return sd_CMD(SDHC_CMD16_XFERTYP, block_size);}
    722c:	mov.w	r1, #512	; 0x200
    7230:	ldr	r0, [pc, #224]	; (7314 <sd_CardInit()+0x3b0>)
    7232:	bl	6ea4 <sd_CMD(unsigned long, unsigned long)>

  // Select card
  if (sd_CMD7_SelectCard(sdCardDesc.address)) return sdCardDesc.status = SDHC_STATUS_NOINIT;

  // Set 512 Block size in SD card
  if (sd_CMD16_SetBlockSize(SDHC_BLOCK_SIZE))  return sdCardDesc.status = SDHC_STATUS_NOINIT;
    7236:	cmp	r0, #0
    7238:	bne.w	70f6 <sd_CardInit()+0x192>
// ---------- sends ACMD6 to set bus width
#define SDHC_ACMD6_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_ACMD6) | SDHC_XFERTYP_CICEN | \
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48))
//
static int sd_ACMD6_SetBusWidth(uint32_t address, uint32_t width) 
{ return sd_ACMD(SDHC_ACMD6_XFERTYP,address, width); }
    723c:	mov	r1, r4
    723e:	movs	r2, #2
    7240:	ldr	r0, [pc, #212]	; (7318 <sd_CardInit()+0x3b4>)
    7242:	bl	6f00 <sd_ACMD(unsigned long, unsigned long, unsigned long)>

  // Set 512 Block size in SD card
  if (sd_CMD16_SetBlockSize(SDHC_BLOCK_SIZE))  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  // Set 4 bit data bus width
  if (sd_ACMD6_SetBusWidth(sdCardDesc.address, 2))  return sdCardDesc.status = SDHC_STATUS_NOINIT;
    7246:	mov	r5, r0
    7248:	cmp	r0, #0
    724a:	bne.w	70f6 <sd_CardInit()+0x192>

  // Set Data bus width also in SDHC controller
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    724e:	ldr	r2, [pc, #160]	; (72f0 <sd_CardInit()+0x38c>)
    }
  }
  
  static void sd_ReleaseGPIO(void)
  {
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 5; //GPIO3_IO16
    7250:	movs	r3, #5
    7252:	ldr	r4, [pc, #200]	; (731c <sd_CardInit()+0x3b8>)
  
  // De-Init GPIO
  sd_ReleaseGPIO();

  // Set the SDHC default baud rate
  setSdclk(60000);
    7254:	movw	r0, #60000	; 0xea60

  // Set 4 bit data bus width
  if (sd_ACMD6_SetBusWidth(sdCardDesc.address, 2))  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  // Set Data bus width also in SDHC controller
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    7258:	ldr	r1, [r2, #40]	; 0x28
    725a:	bic.w	r1, r1, #6
    725e:	str	r1, [r2, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    7260:	ldr	r1, [r2, #40]	; 0x28
    7262:	orr.w	r1, r1, #2
    7266:	str	r1, [r2, #40]	; 0x28
    }
  }
  
  static void sd_ReleaseGPIO(void)
  {
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 5; //GPIO3_IO16
    7268:	str.w	r3, [r4, #460]	; 0x1cc
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = 5; //GPIO3_IO17
    726c:	str.w	r3, [r4, #464]	; 0x1d0
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = 5; //GPIO3_IO12
    7270:	str.w	r3, [r4, #444]	; 0x1bc
    //3.3V
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = 5; //GPIO3_IO13
    7274:	str.w	r3, [r4, #448]	; 0x1c0
    //GND
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = 5; //GPIO3_IO14
    7278:	str.w	r3, [r4, #452]	; 0x1c4
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = 5; //GPIO3_IO15
    727c:	str.w	r3, [r4, #456]	; 0x1c8
  
  // De-Init GPIO
  sd_ReleaseGPIO();

  // Set the SDHC default baud rate
  setSdclk(60000);
    7280:	bl	6da0 <setSdclk(unsigned long)>
                                  IOMUXC_SW_PAD_CTL_PAD_SPEED(2);
  
      const uint32_t DATA_MASK = CLOCK_MASK |
                                 (IOMUXC_SW_PAD_CTL_PAD_PUE | IOMUXC_SW_PAD_CTL_PAD_PUS(1));
  
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;
    7284:	movw	r3, #28808	; 0x7088
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;
    7288:	movw	r2, #4232	; 0x1088
#else

  static void sd_InitGPIO(void)
  {
    { //T4                              // Inverted pins(T4)
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 0; //DAT2  
    728c:	str.w	r5, [r4, #460]	; 0x1cc
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = 0; //DAT3  
    7290:	str.w	r5, [r4, #464]	; 0x1d0
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = 0; //CMD   
    7294:	str.w	r5, [r4, #444]	; 0x1bc
      //3.3V                                           
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = 0; //CLK   
    7298:	str.w	r5, [r4, #448]	; 0x1c0
      //GND                                           
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = 0; //DAT0 
    729c:	str.w	r5, [r4, #452]	; 0x1c4
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = 0; //DAT1 
    72a0:	str.w	r5, [r4, #456]	; 0x1c8
                                  IOMUXC_SW_PAD_CTL_PAD_SPEED(2);
  
      const uint32_t DATA_MASK = CLOCK_MASK |
                                 (IOMUXC_SW_PAD_CTL_PAD_PUE | IOMUXC_SW_PAD_CTL_PAD_PUS(1));
  
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;
    72a4:	str.w	r3, [r4, #956]	; 0x3bc
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;
    72a8:	str.w	r3, [r4, #960]	; 0x3c0
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;
    72ac:	str.w	r3, [r4, #940]	; 0x3ac
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;
    72b0:	str.w	r2, [r4, #944]	; 0x3b0
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;
    72b4:	str.w	r3, [r4, #948]	; 0x3b4
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;
    72b8:	str.w	r3, [r4, #952]	; 0x3b8
  // and SDHC_SetClock() for 50 MHz config

  // Init GPIO
  sd_InitGPIO();

  return sdCardDesc.status;
    72bc:	ldrb	r0, [r6, #0]
    72be:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  resR = sd_CMD8_SetInterface(0x000001AA); // 3.3V and AA check pattern
  if (resR == SDHC_RESULT_OK) 
  { if (!((SDHC_CMDRSP0 & 0x000001AA)== 0x000001AA)) return sdCardDesc.status = SDHC_STATUS_NOINIT;
    sdCardDesc.highCapacity = 1;
  } 
  else if (resR == SDHC_RESULT_NO_RESPONSE) 
    72c2:	cmp	r0, #5
    72c4:	beq.w	7154 <sd_CardInit()+0x1f0>
    SDHC_MIX_CTRL = mixCtrl;
  #endif

  resR = sd_CMD0_GoToIdle();

  if (resR) { return sdCardDesc.status = SDHC_STATUS_NOINIT;}
    72c8:	movs	r0, #1
    72ca:	strb	r0, [r6, #0]
    72cc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    72d0:	movs	r0, #1
    72d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c_size = (c_size << 10) | (SDHC_CMDRSP1 >> 22);
    c_size_mult = (SDHC_CMDRSP1 >> 7) & 0x07;
    sdCardDesc.numBlocks = (c_size + 1) * (1 << (c_size_mult + 2)) * (1 << (read_bl_len - 9));
  } else {
    uint32_t c_size;
    sdCardDesc.version2 = 1;
    72d6:	movs	r3, #1
    72d8:	strb	r3, [r5, #2]
    c_size = (SDHC_CMDRSP1 >> 8) & 0x003FFFFF;
    72da:	ldr	r3, [r7, #20]
    sdCardDesc.numBlocks = (c_size + 1) << 10;
    72dc:	ubfx	r3, r3, #8, #22
    72e0:	adds	r3, #1
    72e2:	lsls	r3, r3, #10
    72e4:	str	r3, [r5, #8]
    72e6:	b.n	721e <sd_CardInit()+0x2ba>
    72e8:	.word	0x081a0000
    72ec:	.word	0x29020000
    72f0:	.word	0x402c0000
    72f4:	.word	0x40300000
    72f8:	.word	0x0001869f
    72fc:	.word	0x02090000
    7300:	.word	0x031a0000
    7304:	.word	0xffff0000
    7308:	.word	0x09090000
    730c:	.word	0x200045ac
    7310:	.word	0x071b0000
    7314:	.word	0x101a0000
    7318:	.word	0x061a0000
    731c:	.word	0x401f8000

00007320 <SDHC_disk_initialize>:
DSTATUS SDHC_disk_status()
{	return (DSTATUS) sdCardDesc.status;
}

DSTATUS SDHC_disk_initialize()
{	return (DSTATUS) sd_CardInit();
    7320:	b.w	6f64 <sd_CardInit()>

00007324 <sd_CardReadBlocks(void*, unsigned long, unsigned long)>:
  int result=0;
  // unused // uint32_t* pData = (uint32_t*)buff;

  
  // Convert LBA to BYTE address if needed
  if (!sdCardDesc.highCapacity)  sector *= 512;
    7324:	ldr	r3, [pc, #240]	; (7418 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0xf4>)
#define SDHC_CMD18_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD18) | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) \
                            | SDHC_XFERTYP_DPSEL | SDHC_XFERTYP_DMAEN | SDHC_XFERTYP_DTDSEL \
                            | SDHC_XFERTYP_AC12EN| SDHC_XFERTYP_BCEN | SDHC_XFERTYP_MSBSEL )
//
int sd_CardReadBlocks(void * buff, uint32_t sector, uint32_t count)
{
    7326:	push	{r4, r5, r6, r7, lr}
  int result=0;
  // unused // uint32_t* pData = (uint32_t*)buff;

  
  // Convert LBA to BYTE address if needed
  if (!sdCardDesc.highCapacity)  sector *= 512;
    7328:	ldrb	r4, [r3, #1]
    732a:	cbnz	r4, 732e <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0xa>
    732c:	lsls	r1, r1, #9

  // Check if this is ready
  if (sdCardDesc.status != 0) return SDHC_RESULT_NOT_READY;
    732e:	ldrb	r3, [r3, #0]
    7330:	cbz	r3, 7336 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0x12>
    7332:	movs	r0, #3
    7334:	pop	{r4, r5, r6, r7, pc}

	while(SDHC_PRSSTAT & (SDHC_PRSSTAT_CIHB | SDHC_PRSSTAT_CDIHB | SDHC_PRSSTAT_DLA)) ;
    7336:	ldr	r5, [pc, #228]	; (741c <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0xf8>)
    7338:	ldr	r3, [r5, #36]	; 0x24
    733a:	ldr	r4, [pc, #224]	; (741c <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0xf8>)
    733c:	ands.w	r3, r3, #7
    7340:	bne.n	7338 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0x14>

  // clear status
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    7342:	ldr	r5, [r4, #48]	; 0x30
    SDHC_MIX_CTRL |= SDHC_MIX_CTRL_DTDSEL ; // read
    SDHC_MIX_CTRL |= SDHC_MIX_CTRL_DMAEN ; // DMA
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_BCEN; // Block Count
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    if(count>1)
    7344:	cmp	r2, #1
  SDHC_IRQSTAT = SDHC_IRQSTAT;
  
  // use dma: disabling polling
  uint32_t irqstat = SDHC_IRQSTATEN;
  irqstat &= ~(SDHC_IRQSTATEN_BRRSEN | SDHC_IRQSTATEN_BWRSEN | SDHC_IRQSTATEN_CCSEN) ;
  irqstat &= ~(SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_CCESEN) ;
    7346:	ldr	r7, [pc, #216]	; (7420 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0xfc>)
  if (sdCardDesc.status != 0) return SDHC_RESULT_NOT_READY;

	while(SDHC_PRSSTAT & (SDHC_PRSSTAT_CIHB | SDHC_PRSSTAT_CDIHB | SDHC_PRSSTAT_DLA)) ;

  // clear status
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    7348:	str	r5, [r4, #48]	; 0x30
  
  // use dma: disabling polling
  uint32_t irqstat = SDHC_IRQSTATEN;
    734a:	ldr	r5, [r4, #52]	; 0x34
  irqstat &= ~(SDHC_IRQSTATEN_BRRSEN | SDHC_IRQSTATEN_BWRSEN | SDHC_IRQSTATEN_CCSEN) ;
  irqstat &= ~(SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_CCESEN) ;
  // enable status
  irqstat |= /*SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_CCESEN |*/ SDHC_IRQSTATEN_DMAESEN ; 
  irqstat |= SDHC_IRQSTATEN_DINTSEN | SDHC_IRQSTATEN_TCSEN ;//| SDHC_IRQSTATEN_CCSEN ; 
    734c:	ldr	r6, [pc, #212]	; (7424 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0x100>)
  SDHC_IRQSTAT = SDHC_IRQSTAT;
  
  // use dma: disabling polling
  uint32_t irqstat = SDHC_IRQSTATEN;
  irqstat &= ~(SDHC_IRQSTATEN_BRRSEN | SDHC_IRQSTATEN_BWRSEN | SDHC_IRQSTATEN_CCSEN) ;
  irqstat &= ~(SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_CCESEN) ;
    734e:	and.w	r7, r7, r5
  irqstat |= /*SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_CCESEN |*/ SDHC_IRQSTATEN_DMAESEN ; 
  irqstat |= SDHC_IRQSTATEN_DINTSEN | SDHC_IRQSTATEN_TCSEN ;//| SDHC_IRQSTATEN_CCSEN ; 
  SDHC_IRQSTATEN = irqstat;
  
  uint32_t sigen = SDHC_IRQSIGEN;
  sigen |= SDHC_IRQSIGEN_DMA_MASK ;
    7352:	mov	r5, r6
  uint32_t irqstat = SDHC_IRQSTATEN;
  irqstat &= ~(SDHC_IRQSTATEN_BRRSEN | SDHC_IRQSTATEN_BWRSEN | SDHC_IRQSTATEN_CCSEN) ;
  irqstat &= ~(SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_CCESEN) ;
  // enable status
  irqstat |= /*SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_CCESEN |*/ SDHC_IRQSTATEN_DMAESEN ; 
  irqstat |= SDHC_IRQSTATEN_DINTSEN | SDHC_IRQSTATEN_TCSEN ;//| SDHC_IRQSTATEN_CCSEN ; 
    7354:	orr.w	r6, r6, r7
  SDHC_IRQSTATEN = irqstat;
    7358:	str	r6, [r4, #52]	; 0x34
  
  uint32_t sigen = SDHC_IRQSIGEN;
    735a:	ldr	r6, [r4, #56]	; 0x38
  sigen |= SDHC_IRQSIGEN_DMA_MASK ;
    735c:	orr.w	r5, r5, r6
  SDHC_IRQSIGEN = sigen;
    7360:	str	r5, [r4, #56]	; 0x38
  
  SDHC_SYSCTL |= SDHC_SYSCTL_HCKEN;
    7362:	ldr	r5, [r4, #44]	; 0x2c
    7364:	orr.w	r5, r5, #2
    7368:	str	r5, [r4, #44]	; 0x2c
  #if defined(__IMXRT1052__) || defined(__IMXRT1062__)
    
    SDHC_MIX_CTRL |= SDHC_MIX_CTRL_DTDSEL ; // read
    736a:	ldr	r5, [r4, #72]	; 0x48
    736c:	orr.w	r5, r5, #16
    7370:	str	r5, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= SDHC_MIX_CTRL_DMAEN ; // DMA
    7372:	ldr	r5, [r4, #72]	; 0x48
    7374:	orr.w	r5, r5, #1
    7378:	str	r5, [r4, #72]	; 0x48
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_BCEN; // Block Count
    737a:	ldr	r5, [r4, #72]	; 0x48
    737c:	bic.w	r5, r5, #2
    7380:	str	r5, [r4, #72]	; 0x48
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    7382:	ldr	r5, [r4, #72]	; 0x48
    7384:	bic.w	r5, r5, #32
    7388:	str	r5, [r4, #72]	; 0x48
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    738a:	ldr	r5, [r4, #72]	; 0x48
    738c:	bic.w	r5, r5, #4
    7390:	str	r5, [r4, #72]	; 0x48
    if(count>1)
    7392:	bls.n	73f0 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0xcc>
    {
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
    7394:	ldr	r7, [r4, #72]	; 0x48
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    7396:	lsls	r5, r2, #16
    7398:	ldr	r6, [pc, #140]	; (7428 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0x104>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_BCEN; // Block Count
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    if(count>1)
    {
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
    739a:	orr.w	r7, r7, #2
  dmaDone=0;
  SDHC_DSADDR  = (uint32_t)buff;

  // send command
    SDHC_CMDARG = sector;
    SDHC_XFERTYP = count==1 ? SDHC_CMD17_XFERTYP: SDHC_CMD18_XFERTYP; 
    739e:	ldr.w	lr, [pc, #144]	; 7430 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0x10c>
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    73a2:	ands	r6, r5

  // enable DMA
  dmaDone=0;
    73a4:	ldr	r5, [pc, #132]	; (742c <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0x108>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_BCEN; // Block Count
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    if(count>1)
    {
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
    73a6:	str	r7, [r4, #72]	; 0x48
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    73a8:	ldr	r7, [r4, #72]	; 0x48
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    73aa:	orr.w	r6, r6, #512	; 0x200
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    if(count>1)
    {
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    73ae:	orr.w	r7, r7, #32
    73b2:	str	r7, [r4, #72]	; 0x48
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    73b4:	ldr	r7, [r4, #72]	; 0x48
    73b6:	orr.w	r7, r7, #4
    73ba:	str	r7, [r4, #72]	; 0x48
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    73bc:	str	r6, [r4, #4]

  // enable DMA
  dmaDone=0;
    73be:	str	r3, [r5, #0]
  SDHC_DSADDR  = (uint32_t)buff;
    73c0:	str	r0, [r4, #0]

  // send command
    SDHC_CMDARG = sector;
    73c2:	str	r1, [r4, #8]
    SDHC_XFERTYP = count==1 ? SDHC_CMD17_XFERTYP: SDHC_CMD18_XFERTYP; 
    73c4:	ldr	r3, [pc, #84]	; (741c <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0xf8>)
    73c6:	str.w	lr, [r3, #12]

  // wait for DMA
  while(!dmaDone);
    73ca:	ldr	r3, [r5, #0]
    73cc:	cmp	r3, #0
    73ce:	beq.n	73ca <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0xa6>
  SDHC_IRQSTAT &= (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_TC);
    73d0:	ldr	r3, [pc, #72]	; (741c <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0xf8>)

	// Auto CMD12 is enabled for DMA so call it if DMA error
	if((SDHC_DSADDR < (uint32_t)((uint8_t *)buff+(count*512))) && (count>1))
    73d2:	add.w	r0, r0, r2, lsl #9
    SDHC_CMDARG = sector;
    SDHC_XFERTYP = count==1 ? SDHC_CMD17_XFERTYP: SDHC_CMD18_XFERTYP; 

  // wait for DMA
  while(!dmaDone);
  SDHC_IRQSTAT &= (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_TC);
    73d6:	ldr	r1, [r3, #48]	; 0x30
    73d8:	and.w	r1, r1, #3
    73dc:	str	r1, [r3, #48]	; 0x30

	// Auto CMD12 is enabled for DMA so call it if DMA error
	if((SDHC_DSADDR < (uint32_t)((uint8_t *)buff+(count*512))) && (count>1))
    73de:	ldr	r3, [r3, #0]
    73e0:	cmp	r3, r0
    73e2:	bcs.n	7414 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0xf0>
    73e4:	cmp	r2, #1
    73e6:	bls.n	7414 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0xf0>
		result=sd_CMD12_StopTransferWaitForBusy();

  return result;
}
    73e8:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  while(!dmaDone);
  SDHC_IRQSTAT &= (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_TC);

	// Auto CMD12 is enabled for DMA so call it if DMA error
	if((SDHC_DSADDR < (uint32_t)((uint8_t *)buff+(count*512))) && (count>1))
		result=sd_CMD12_StopTransferWaitForBusy();
    73ec:	b.w	6f20 <sd_CMD12_StopTransferWaitForBusy()>
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    73f0:	mov.w	r7, r2, lsl #16
    73f4:	ldr	r6, [pc, #48]	; (7428 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0x104>)

  // enable DMA
  dmaDone=0;
    73f6:	ldr	r5, [pc, #52]	; (742c <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0x108>)
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    73f8:	and.w	r6, r6, r7
  dmaDone=0;
  SDHC_DSADDR  = (uint32_t)buff;

  // send command
    SDHC_CMDARG = sector;
    SDHC_XFERTYP = count==1 ? SDHC_CMD17_XFERTYP: SDHC_CMD18_XFERTYP; 
    73fc:	ite	ne
    73fe:	ldrne.w	lr, [pc, #48]	; 7430 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0x10c>
    7402:	ldreq.w	lr, [pc, #48]	; 7434 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0x110>
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    7406:	orr.w	r6, r6, #512	; 0x200
    740a:	str	r6, [r4, #4]

  // enable DMA
  dmaDone=0;
    740c:	str	r3, [r5, #0]
  SDHC_DSADDR  = (uint32_t)buff;
    740e:	str	r0, [r4, #0]

  // send command
    SDHC_CMDARG = sector;
    7410:	str	r1, [r4, #8]
    7412:	b.n	73c4 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0xa0>
                            | SDHC_XFERTYP_DPSEL | SDHC_XFERTYP_DMAEN | SDHC_XFERTYP_DTDSEL \
                            | SDHC_XFERTYP_AC12EN| SDHC_XFERTYP_BCEN | SDHC_XFERTYP_MSBSEL )
//
int sd_CardReadBlocks(void * buff, uint32_t sector, uint32_t count)
{
  int result=0;
    7414:	movs	r0, #0
    7416:	pop	{r4, r5, r6, r7, pc}
    7418:	.word	0x200045ac
    741c:	.word	0x402c0000
    7420:	.word	0xffddffce
    7424:	.word	0x1000000a
    7428:	.word	0x1fff0000
    742c:	.word	0x200045c8
    7430:	.word	0x12220037
    7434:	.word	0x11220013

00007438 <SDHC_disk_read>:
DSTATUS SDHC_disk_initialize()
{	return (DSTATUS) sd_CardInit();
}

DRESULT SDHC_disk_read(BYTE *buff, DWORD sector, UINT count)
{	return (DRESULT) sd_CardReadBlocks((void *) buff, (uint32_t) sector, (uint32_t) count);
    7438:	push	{r3, lr}
    743a:	bl	7324 <sd_CardReadBlocks(void*, unsigned long, unsigned long)>
}
    743e:	uxtb	r0, r0
    7440:	pop	{r3, pc}
    7442:	nop

00007444 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)>:
#define SDHC_CMD25_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD25) |SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) \
                            | SDHC_XFERTYP_DPSEL | SDHC_XFERTYP_DMAEN \
                            | SDHC_XFERTYP_AC12EN| SDHC_XFERTYP_BCEN | SDHC_XFERTYP_MSBSEL )
//
int sd_CardWriteBlocks(const void * buff, uint32_t sector, uint32_t count)
{
    7444:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int result=0;
  // unused // const uint32_t *pData = (const uint32_t *)buff;

  // Convert LBA to uint8_t address if needed
  if (!sdCardDesc.highCapacity) sector *= 512;
    7448:	ldr	r5, [pc, #312]	; (7584 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x140>)
#define SDHC_CMD25_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD25) |SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) \
                            | SDHC_XFERTYP_DPSEL | SDHC_XFERTYP_DMAEN \
                            | SDHC_XFERTYP_AC12EN| SDHC_XFERTYP_BCEN | SDHC_XFERTYP_MSBSEL )
//
int sd_CardWriteBlocks(const void * buff, uint32_t sector, uint32_t count)
{
    744a:	mov	r6, r2
  int result=0;
  // unused // const uint32_t *pData = (const uint32_t *)buff;

  // Convert LBA to uint8_t address if needed
  if (!sdCardDesc.highCapacity) sector *= 512;
    744c:	ldrb	r3, [r5, #1]
    744e:	cbnz	r3, 7452 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0xe>
    7450:	lsls	r1, r1, #9

  // Check if this is ready
  if (sdCardDesc.status != 0) return SDHC_RESULT_NOT_READY;
    7452:	ldrb	r3, [r5, #0]
    7454:	cbz	r3, 745c <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x18>
    7456:	movs	r0, #3
    7458:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	while(SDHC_PRSSTAT & (SDHC_PRSSTAT_CIHB | SDHC_PRSSTAT_CDIHB | SDHC_PRSSTAT_DLA)) ;
    745c:	ldr	r4, [pc, #296]	; (7588 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x144>)
    745e:	ldr	r3, [r4, #36]	; 0x24
    7460:	ldr	r2, [pc, #292]	; (7588 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x144>)
    7462:	ands.w	r3, r3, #7
    7466:	bne.n	745e <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x1a>

  // clear status
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    7468:	ldr	r4, [r2, #48]	; 0x30
    SDHC_MIX_CTRL &= ~ SDHC_MIX_CTRL_DTDSEL;  // write
    SDHC_MIX_CTRL |=  SDHC_MIX_CTRL_DMAEN ;   //DMA
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_BCEN; // Block Count
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    if(count>1)
    746a:	cmp	r6, #1
  SDHC_IRQSTAT = SDHC_IRQSTAT;

  uint32_t irqstat = SDHC_IRQSTATEN;
  // use dma: disabling polling
  irqstat &= ~(SDHC_IRQSTATEN_BRRSEN | SDHC_IRQSTATEN_BWRSEN | SDHC_IRQSTATEN_CCSEN) ;
  irqstat &= ~(SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_CCESEN) ;
    746c:	ldr.w	lr, [pc, #304]	; 75a0 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x15c>
  if (sdCardDesc.status != 0) return SDHC_RESULT_NOT_READY;

	while(SDHC_PRSSTAT & (SDHC_PRSSTAT_CIHB | SDHC_PRSSTAT_CDIHB | SDHC_PRSSTAT_DLA)) ;

  // clear status
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    7470:	str	r4, [r2, #48]	; 0x30

  uint32_t irqstat = SDHC_IRQSTATEN;
    7472:	ldr	r4, [r2, #52]	; 0x34
  // use dma: disabling polling
  irqstat &= ~(SDHC_IRQSTATEN_BRRSEN | SDHC_IRQSTATEN_BWRSEN | SDHC_IRQSTATEN_CCSEN) ;
  irqstat &= ~(SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_CCESEN) ;
  // enable status
  irqstat |= SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_CCESEN | SDHC_IRQSTATEN_DMAESEN ; 
  irqstat |= SDHC_IRQSTATEN_DINTSEN | SDHC_IRQSTATEN_TCSEN ;//| SDHC_IRQSTATEN_CCSEN ; 
    7474:	ldr	r7, [pc, #276]	; (758c <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x148>)
  SDHC_IRQSTAT = SDHC_IRQSTAT;

  uint32_t irqstat = SDHC_IRQSTATEN;
  // use dma: disabling polling
  irqstat &= ~(SDHC_IRQSTATEN_BRRSEN | SDHC_IRQSTATEN_BWRSEN | SDHC_IRQSTATEN_CCSEN) ;
  irqstat &= ~(SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_CCESEN) ;
    7476:	and.w	lr, r4, lr
  irqstat |= SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_CCESEN | SDHC_IRQSTATEN_DMAESEN ; 
  irqstat |= SDHC_IRQSTATEN_DINTSEN | SDHC_IRQSTATEN_TCSEN ;//| SDHC_IRQSTATEN_CCSEN ; 
  SDHC_IRQSTATEN = irqstat;
  
  uint32_t sigen = SDHC_IRQSIGEN;
  sigen |= SDHC_IRQSIGEN_DMA_MASK ;
    747a:	ldr	r4, [pc, #276]	; (7590 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x14c>)
  // use dma: disabling polling
  irqstat &= ~(SDHC_IRQSTATEN_BRRSEN | SDHC_IRQSTATEN_BWRSEN | SDHC_IRQSTATEN_CCSEN) ;
  irqstat &= ~(SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_CCESEN) ;
  // enable status
  irqstat |= SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_CCESEN | SDHC_IRQSTATEN_DMAESEN ; 
  irqstat |= SDHC_IRQSTATEN_DINTSEN | SDHC_IRQSTATEN_TCSEN ;//| SDHC_IRQSTATEN_CCSEN ; 
    747c:	orr.w	r7, lr, r7
  SDHC_IRQSTATEN = irqstat;
    7480:	str	r7, [r2, #52]	; 0x34
  
  uint32_t sigen = SDHC_IRQSIGEN;
    7482:	ldr	r7, [r2, #56]	; 0x38
  sigen |= SDHC_IRQSIGEN_DMA_MASK ;
    7484:	orr.w	r4, r4, r7
  SDHC_IRQSIGEN = sigen;
    7488:	str	r4, [r2, #56]	; 0x38
  
  SDHC_SYSCTL |= SDHC_SYSCTL_HCKEN;
    748a:	ldr	r4, [r2, #44]	; 0x2c
    748c:	orr.w	r4, r4, #2
    7490:	str	r4, [r2, #44]	; 0x2c
  #if defined(__IMXRT1052__) || defined(__IMXRT1062__)
    SDHC_MIX_CTRL &= ~ SDHC_MIX_CTRL_DTDSEL;  // write
    7492:	ldr	r4, [r2, #72]	; 0x48
    7494:	bic.w	r4, r4, #16
    7498:	str	r4, [r2, #72]	; 0x48
    SDHC_MIX_CTRL |=  SDHC_MIX_CTRL_DMAEN ;   //DMA
    749a:	ldr	r4, [r2, #72]	; 0x48
    749c:	orr.w	r4, r4, #1
    74a0:	str	r4, [r2, #72]	; 0x48
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_BCEN; // Block Count
    74a2:	ldr	r4, [r2, #72]	; 0x48
    74a4:	bic.w	r4, r4, #2
    74a8:	str	r4, [r2, #72]	; 0x48
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    74aa:	ldr	r4, [r2, #72]	; 0x48
    74ac:	bic.w	r4, r4, #32
    74b0:	str	r4, [r2, #72]	; 0x48
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    74b2:	ldr	r4, [r2, #72]	; 0x48
    74b4:	bic.w	r4, r4, #4
    74b8:	str	r4, [r2, #72]	; 0x48
    if(count>1)
    74ba:	bls.n	755e <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x11a>
    {
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
    74bc:	ldr	r4, [r2, #72]	; 0x48
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    74be:	mov.w	ip, r6, lsl #16
    74c2:	ldr	r7, [pc, #208]	; (7594 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x150>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_BCEN; // Block Count
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    if(count>1)
    {
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
    74c4:	orr.w	lr, r4, #2
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    74c8:	mov	r4, ip
  dmaDone=0;
  SDHC_DSADDR  = (uint32_t)buff;
  //
  // send write command
  SDHC_CMDARG = sector;
  SDHC_XFERTYP = count==1 ? SDHC_CMD24_XFERTYP: SDHC_CMD25_XFERTYP; 
    74ca:	ldr.w	ip, [pc, #216]	; 75a4 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x160>
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_BCEN; // Block Count
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    if(count>1)
    {
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
    74ce:	str.w	lr, [r2, #72]	; 0x48
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    74d2:	ands	r7, r4
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    if(count>1)
    {
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    74d4:	ldr.w	lr, [r2, #72]	; 0x48
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);

  // enable DMA
  dmaDone=0;
    74d8:	ldr	r4, [pc, #188]	; (7598 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x154>)
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    74da:	orr.w	r7, r7, #512	; 0x200
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    if(count>1)
    {
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    74de:	orr.w	lr, lr, #32
    74e2:	str.w	lr, [r2, #72]	; 0x48
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    74e6:	ldr.w	lr, [r2, #72]	; 0x48
    74ea:	orr.w	lr, lr, #4
    74ee:	str.w	lr, [r2, #72]	; 0x48
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    74f2:	str	r7, [r2, #4]

  // enable DMA
  dmaDone=0;
    74f4:	str	r3, [r4, #0]
  SDHC_DSADDR  = (uint32_t)buff;
    74f6:	str	r0, [r2, #0]
  //
  // send write command
  SDHC_CMDARG = sector;
    74f8:	str	r1, [r2, #8]
  SDHC_XFERTYP = count==1 ? SDHC_CMD24_XFERTYP: SDHC_CMD25_XFERTYP; 
    74fa:	ldr	r3, [pc, #140]	; (7588 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x144>)
    74fc:	str.w	ip, [r3, #12]
  //
  // wait for  DMA to finish
  while(!dmaDone);
    7500:	ldr	r3, [r4, #0]
    7502:	cmp	r3, #0
    7504:	beq.n	7500 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0xbc>

  SDHC_IRQSTAT &= (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_TC);
    7506:	ldr	r3, [pc, #128]	; (7588 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x144>)
    7508:	ldr	r1, [r3, #48]	; 0x30
  while(SDHC_PRSSTAT & SDHC_PRSSTAT_DLA);
    750a:	mov	r2, r3
  SDHC_XFERTYP = count==1 ? SDHC_CMD24_XFERTYP: SDHC_CMD25_XFERTYP; 
  //
  // wait for  DMA to finish
  while(!dmaDone);

  SDHC_IRQSTAT &= (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_TC);
    750c:	and.w	r1, r1, #3
    7510:	str	r1, [r3, #48]	; 0x30
  while(SDHC_PRSSTAT & SDHC_PRSSTAT_DLA);
    7512:	ldr	r3, [r2, #36]	; 0x24
    7514:	lsls	r0, r3, #29
    7516:	bmi.n	7512 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0xce>
#define CARD_STATUS_READY_FOR_DATA	(1UL << 8)
// ---------- sends CMD13 to check uSD status and wait for ready
static int sd_CMD13_WaitForReady(uint32_t address)
{ int result;
  do
  { while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) ;
    7518:	ldr	r4, [pc, #108]	; (7588 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x144>)
    751a:	ldr	r7, [r5, #4]
    751c:	mov	r8, r4
    751e:	mov	r5, r4
    7520:	ldr	r3, [r4, #36]	; 0x24
    7522:	lsls	r1, r3, #31
    7524:	bmi.n	7520 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0xdc>
    7526:	ldr.w	r3, [r8, #36]	; 0x24
    752a:	lsls	r2, r3, #30
    752c:	bmi.n	7520 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0xdc>
    SDHC_IRQSTATEN |= SDHC_IRQSTATEN_CCSEN;
    752e:	ldr	r3, [r5, #52]	; 0x34
}

// ---------- sends CMD13 to check uSD status
#define SDHC_CMD13_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD13) | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48))
//
static int sd_CMD13_Check_Status(uint32_t address){  return sd_CMD(SDHC_CMD13_XFERTYP, address);}
    7530:	mov	r1, r7
    7532:	ldr	r0, [pc, #104]	; (759c <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x158>)
// ---------- sends CMD13 to check uSD status and wait for ready
static int sd_CMD13_WaitForReady(uint32_t address)
{ int result;
  do
  { while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) ;
    SDHC_IRQSTATEN |= SDHC_IRQSTATEN_CCSEN;
    7534:	orr.w	r3, r3, #1
    7538:	str	r3, [r5, #52]	; 0x34
    SDHC_IRQSTAT=SDHC_IRQSTAT;
    753a:	ldr	r3, [r5, #48]	; 0x30
    753c:	str	r3, [r5, #48]	; 0x30
}

// ---------- sends CMD13 to check uSD status
#define SDHC_CMD13_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD13) | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48))
//
static int sd_CMD13_Check_Status(uint32_t address){  return sd_CMD(SDHC_CMD13_XFERTYP, address);}
    753e:	bl	6ea4 <sd_CMD(unsigned long, unsigned long)>
  { while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) ;
    SDHC_IRQSTATEN |= SDHC_IRQSTATEN_CCSEN;
    SDHC_IRQSTAT=SDHC_IRQSTAT;
    // CMD13 to check uSD status
    result = sd_CMD13_Check_Status(sdCardDesc.address);
    if (result != SDHC_RESULT_OK)  return result;
    7542:	cbnz	r0, 754e <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x10a>
  } while(!((SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA)==CARD_STATUS_READY_FOR_DATA)); // while data?
    7544:	ldr	r3, [r5, #16]

#define CARD_STATUS_READY_FOR_DATA	(1UL << 8)
// ---------- sends CMD13 to check uSD status and wait for ready
static int sd_CMD13_WaitForReady(uint32_t address)
{ int result;
  do
    7546:	lsls	r3, r3, #23
    7548:	bpl.n	7520 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0xdc>
    754a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  //check for SD status (if data are written?)
  result = sd_CMD13_WaitForReady(sdCardDesc.address);

	// Auto CMD12 is enabled for DMA so call it when transfer error
	if((result != SDHC_RESULT_OK) && (count>1))
    754e:	cmp	r6, #1
    7550:	bls.n	755a <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x116>
		result=sd_CMD12_StopTransferWaitForBusy();
  
  return result;
}
    7552:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  //check for SD status (if data are written?)
  result = sd_CMD13_WaitForReady(sdCardDesc.address);

	// Auto CMD12 is enabled for DMA so call it when transfer error
	if((result != SDHC_RESULT_OK) && (count>1))
		result=sd_CMD12_StopTransferWaitForBusy();
    7556:	b.w	6f20 <sd_CMD12_StopTransferWaitForBusy()>
  
  return result;
}
    755a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    755e:	mov.w	lr, r6, lsl #16
    7562:	ldr	r7, [pc, #48]	; (7594 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x150>)

  // enable DMA
  dmaDone=0;
    7564:	ldr	r4, [pc, #48]	; (7598 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x154>)
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    7566:	and.w	r7, lr, r7
  dmaDone=0;
  SDHC_DSADDR  = (uint32_t)buff;
  //
  // send write command
  SDHC_CMDARG = sector;
  SDHC_XFERTYP = count==1 ? SDHC_CMD24_XFERTYP: SDHC_CMD25_XFERTYP; 
    756a:	ite	eq
    756c:	ldreq.w	ip, [pc, #56]	; 75a8 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x164>
    7570:	ldrne.w	ip, [pc, #48]	; 75a4 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x160>
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    7574:	orr.w	r7, r7, #512	; 0x200
    7578:	str	r7, [r2, #4]

  // enable DMA
  dmaDone=0;
    757a:	str	r3, [r4, #0]
  SDHC_DSADDR  = (uint32_t)buff;
    757c:	str	r0, [r2, #0]
  //
  // send write command
  SDHC_CMDARG = sector;
    757e:	str	r1, [r2, #8]
    7580:	b.n	74fa <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0xb6>
    7582:	nop
    7584:	.word	0x200045ac
    7588:	.word	0x402c0000
    758c:	.word	0x1022000a
    7590:	.word	0x1000000a
    7594:	.word	0x1fff0000
    7598:	.word	0x200045c8
    759c:	.word	0x0d020000
    75a0:	.word	0xffddffce
    75a4:	.word	0x19220027
    75a8:	.word	0x18220003

000075ac <SDHC_disk_write>:
DRESULT SDHC_disk_read(BYTE *buff, DWORD sector, UINT count)
{	return (DRESULT) sd_CardReadBlocks((void *) buff, (uint32_t) sector, (uint32_t) count);
}

DRESULT SDHC_disk_write(const BYTE *buff, DWORD sector, UINT count)
{	return (DRESULT) sd_CardWriteBlocks((void *) buff, (uint32_t) sector, (uint32_t) count);
    75ac:	push	{r3, lr}
    75ae:	bl	7444 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)>
}
    75b2:	uxtb	r0, r0
    75b4:	pop	{r3, pc}
    75b6:	nop

000075b8 <sd_chipSelect(unsigned short) [clone .part.0]>:

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
	if(m_chipSelectPin<0) return;
//
  if(high_low==HIGH)
    75b8:	cmp	r0, #1
    75ba:	beq.n	75d0 <sd_chipSelect(unsigned short) [clone .part.0]+0x18>
    // insure MISO goes high impedance
    spi_send(0XFF); 
  }
  else
  {
    digitalWriteFast(m_chipSelectPin, LOW);
    75bc:	ldr	r3, [pc, #60]	; (75fc <sd_chipSelect(unsigned short) [clone .part.0]+0x44>)
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    75be:	ldr	r2, [pc, #64]	; (7600 <sd_chipSelect(unsigned short) [clone .part.0]+0x48>)
    75c0:	ldrb	r3, [r3, #0]
    75c2:	lsls	r3, r3, #4
    75c4:	adds	r1, r2, r3
    75c6:	ldr	r3, [r2, r3]
    75c8:	ldr	r2, [r1, #12]
    75ca:	str.w	r2, [r3, #136]	; 0x88
    75ce:	bx	lr
{ 	if(!m_enableChipSelect) return;
	if(m_chipSelectPin<0) return;
//
  if(high_low==HIGH)
  {
	digitalWriteFast(m_chipSelectPin, HIGH);
    75d0:	ldr	r3, [pc, #40]	; (75fc <sd_chipSelect(unsigned short) [clone .part.0]+0x44>)
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
    75d2:	ldr	r0, [pc, #44]	; (7600 <sd_chipSelect(unsigned short) [clone .part.0]+0x48>)
    75d4:	ldrb	r3, [r3, #0]
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    75d6:	ldr	r2, [pc, #44]	; (7604 <sd_chipSelect(unsigned short) [clone .part.0]+0x4c>)
    75d8:	lsls	r3, r3, #4
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    75da:	mov	r1, r2
  return TRUE;
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
    75dc:	push	{r4, r5}
    75de:	adds	r5, r0, r3
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    75e0:	movs	r4, #255	; 0xff
    75e2:	ldr	r3, [r0, r3]
    75e4:	ldr	r0, [r5, #12]
    75e6:	str.w	r0, [r3, #132]	; 0x84
    75ea:	str	r4, [r2, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    75ec:	ldr	r3, [r1, #92]	; 0x5c
    75ee:	ldr	r2, [pc, #20]	; (7604 <sd_chipSelect(unsigned short) [clone .part.0]+0x4c>)
		if (fifo > 0) return spi->RDR; 
    75f0:	tst.w	r3, #2031616	; 0x1f0000
    75f4:	beq.n	75ec <sd_chipSelect(unsigned short) [clone .part.0]+0x34>
    75f6:	ldr	r3, [r2, #116]	; 0x74
  }
  else
  {
    digitalWriteFast(m_chipSelectPin, LOW);
  }
}
    75f8:	pop	{r4, r5}
    75fa:	bx	lr
    75fc:	.word	0x20001958
    7600:	.word	0x20000774
    7604:	.word	0x403a0000

00007608 <spi_transfer(void const*, void*, unsigned int) [clone .part.4]>:
	  //spi->PUSHR = data; 
	  //while (!(spi->SR & SPI_SR_TCF)) ; // wait 
	  //return spi->POPR; 
	} 

	void spi_transfer(const void * buf, void * retbuf, size_t count)
    7608:	push	{r4, r5}
		uint8_t *p_read = (uint8_t*)retbuf;
		size_t count_read = count;

	  // Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	  // Lets clear the reader queue
	  spi->CR = LPSPI_CR_RRF | LPSPI_CR_MEN;  // clear the queue and make sure still enabled. 
    760a:	ldr	r3, [pc, #80]	; (765c <spi_transfer(void const*, void*, unsigned int) [clone .part.4]+0x54>)
    760c:	movw	r4, #513	; 0x201
    7610:	str	r4, [r3, #16]

	  while (count > 0) {
    7612:	cbz	r2, 7658 <spi_transfer(void const*, void*, unsigned int) [clone .part.4]+0x50>
    7614:	mov	r5, r2
		// Push out the next byte; 
		spi->TDR = p_write? *p_write++ : 0xff;
    7616:	cbz	r0, 7654 <spi_transfer(void const*, void*, unsigned int) [clone .part.4]+0x4c>
    7618:	ldrb	r4, [r0, #0]
    761a:	adds	r0, #1
		count--; // how many bytes left to output.
    761c:	subs	r5, #1
	  // Lets clear the reader queue
	  spi->CR = LPSPI_CR_RRF | LPSPI_CR_MEN;  // clear the queue and make sure still enabled. 

	  while (count > 0) {
		// Push out the next byte; 
		spi->TDR = p_write? *p_write++ : 0xff;
    761e:	str	r4, [r3, #100]	; 0x64
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
		  if ((spi->RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    7620:	ldr	r4, [r3, #112]	; 0x70
    7622:	lsls	r4, r4, #30
    7624:	bmi.n	7632 <spi_transfer(void const*, void*, unsigned int) [clone .part.4]+0x2a>
			uint8_t b = spi->RDR;  // Read any pending RX bytes in
    7626:	ldr	r4, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
			count_read--;
    7628:	subs	r2, #1
		spi->TDR = p_write? *p_write++ : 0xff;
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
		  if ((spi->RSR & LPSPI_RSR_RXEMPTY) == 0)  {
			uint8_t b = spi->RDR;  // Read any pending RX bytes in
    762a:	uxtb	r4, r4
			if (p_read) *p_read++ = b; 
    762c:	cbz	r1, 7632 <spi_transfer(void const*, void*, unsigned int) [clone .part.4]+0x2a>
    762e:	strb	r4, [r1, #0]
    7630:	adds	r1, #1
			count_read--;
		  }
		} while ((spi->SR & LPSPI_SR_TDF) == 0) ;
    7632:	ldr	r4, [r3, #20]
	  while (count > 0) {
		// Push out the next byte; 
		spi->TDR = p_write? *p_write++ : 0xff;
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
    7634:	lsls	r4, r4, #31
    7636:	bpl.n	7620 <spi_transfer(void const*, void*, unsigned int) [clone .part.4]+0x18>

	  // Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	  // Lets clear the reader queue
	  spi->CR = LPSPI_CR_RRF | LPSPI_CR_MEN;  // clear the queue and make sure still enabled. 

	  while (count > 0) {
    7638:	cmp	r5, #0
    763a:	bne.n	7616 <spi_transfer(void const*, void*, unsigned int) [clone .part.4]+0xe>

	  }

	  // now lets wait for all of the read bytes to be returned...
	  while (count_read) {
		if ((spi->RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    763c:	ldr	r0, [pc, #28]	; (765c <spi_transfer(void const*, void*, unsigned int) [clone .part.4]+0x54>)
		} while ((spi->SR & LPSPI_SR_TDF) == 0) ;

	  }

	  // now lets wait for all of the read bytes to be returned...
	  while (count_read) {
    763e:	cbz	r2, 7658 <spi_transfer(void const*, void*, unsigned int) [clone .part.4]+0x50>
		if ((spi->RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    7640:	ldr	r3, [r0, #112]	; 0x70
    7642:	lsls	r3, r3, #30
    7644:	bmi.n	7640 <spi_transfer(void const*, void*, unsigned int) [clone .part.4]+0x38>
		  uint8_t b = spi->RDR;  // Read any pending RX bytes in
    7646:	ldr	r3, [r0, #116]	; 0x74
    7648:	uxtb	r3, r3
		  if (p_read) *p_read++ = b; 
    764a:	cbz	r1, 7650 <spi_transfer(void const*, void*, unsigned int) [clone .part.4]+0x48>
    764c:	strb	r3, [r1, #0]
    764e:	adds	r1, #1
		  count_read--;
    7650:	subs	r2, #1
    7652:	b.n	763e <spi_transfer(void const*, void*, unsigned int) [clone .part.4]+0x36>
	  // Lets clear the reader queue
	  spi->CR = LPSPI_CR_RRF | LPSPI_CR_MEN;  // clear the queue and make sure still enabled. 

	  while (count > 0) {
		// Push out the next byte; 
		spi->TDR = p_write? *p_write++ : 0xff;
    7654:	movs	r4, #255	; 0xff
    7656:	b.n	761c <spi_transfer(void const*, void*, unsigned int) [clone .part.4]+0x14>
		  uint8_t b = spi->RDR;  // Read any pending RX bytes in
		  if (p_read) *p_read++ = b; 
		  count_read--;
		}
	  }
	}
    7658:	pop	{r4, r5}
    765a:	bx	lr
    765c:	.word	0x403a0000

00007660 <SPI_disk_ioctl(unsigned char, unsigned char*)>:
    return res;
}
void sd_setChipSelect(uint16_t pin);

DRESULT SPI_disk_ioctl(BYTE cmd, BYTE *buff)
{	if(cmd==1) sd_setChipSelect(*(uint16_t*) buff);
    7660:	cmp	r0, #1
    7662:	bne.n	766a <SPI_disk_ioctl(unsigned char, unsigned char*)+0xa>
    7664:	ldrh	r2, [r1, #0]
void sd_setType(uint16_t type) {m_sd_type=type;}
uint16_t sd_getType(void) {return m_sd_type;}

void sd_enableChipSelect(void) {m_enableChipSelect=true;}
void sd_disableChipSelect(void) {m_enableChipSelect=false;}
void sd_setChipSelect(uint16_t pin) {m_chipSelectPin=pin;}
    7666:	ldr	r3, [pc, #8]	; (7670 <SPI_disk_ioctl(unsigned char, unsigned char*)+0x10>)
    7668:	strh	r2, [r3, #0]
void sd_setChipSelect(uint16_t pin);

DRESULT SPI_disk_ioctl(BYTE cmd, BYTE *buff)
{	if(cmd==1) sd_setChipSelect(*(uint16_t*) buff);
    return RES_OK;
}
    766a:	movs	r0, #0
    766c:	bx	lr
    766e:	nop
    7670:	.word	0x20001958

00007674 <sd_cardCommand(unsigned char, unsigned long)>:
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7674:	ldr	r3, [pc, #268]	; (7784 <sd_cardCommand(unsigned char, unsigned long)+0x110>)
  }
}

// send command and return error code.  Return zero for OK
uint8_t sd_cardCommand(uint8_t cmd, uint32_t arg) 
{ uint8_t d[6], *pa, kk;
    7676:	push	{r4, r5, r6, r7, lr}
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7678:	ldrh	r3, [r3, #0]
  }
}

// send command and return error code.  Return zero for OK
uint8_t sd_cardCommand(uint8_t cmd, uint32_t arg) 
{ uint8_t d[6], *pa, kk;
    767a:	sub	sp, #20
    767c:	mov	r4, r0
    767e:	str	r1, [sp, #4]
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7680:	cmp	r3, #0
    7682:	bne.n	7768 <sd_cardCommand(unsigned char, unsigned long)+0xf4>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
    7684:	ldr	r0, [pc, #256]	; (7788 <sd_cardCommand(unsigned char, unsigned long)+0x114>)
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7686:	movs	r6, #255	; 0xff
    7688:	ldr	r2, [pc, #256]	; (778c <sd_cardCommand(unsigned char, unsigned long)+0x118>)
    768a:	ldr	r1, [r0, #0]
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    768c:	mov	r5, r2
{
  uint16_t t0;
  uint16_t ret;
  t0  = millis();
  while ((ret=spi_receive()) != 0XFF) 
  { if (((uint16_t)millis() - t0) >= timeoutMillis) return FALSE;
    768e:	uxth	r1, r1
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7690:	str	r6, [r2, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7692:	ldr	r3, [r2, #92]	; 0x5c
		if (fifo > 0) return spi->RDR; 
    7694:	tst.w	r3, #2031616	; 0x1f0000
    7698:	beq.n	7692 <sd_cardCommand(unsigned char, unsigned long)+0x1e>
    769a:	ldr	r3, [r5, #116]	; 0x74
uint16_t sd_waitNotBusy(uint16_t timeoutMillis) 
{
  uint16_t t0;
  uint16_t ret;
  t0  = millis();
  while ((ret=spi_receive()) != 0XFF) 
    769c:	uxtb	r3, r3
    769e:	cmp	r3, #255	; 0xff
    76a0:	beq.n	76ae <sd_cardCommand(unsigned char, unsigned long)+0x3a>
    76a2:	ldr	r3, [r0, #0]
  { if (((uint16_t)millis() - t0) >= timeoutMillis) return FALSE;
    76a4:	uxth	r3, r3
    76a6:	subs	r3, r3, r1
    76a8:	cmp.w	r3, #600	; 0x258
    76ac:	blt.n	7690 <sd_cardCommand(unsigned char, unsigned long)+0x1c>

  // wait if busy
 // unused // 
 uint16_t ret=sd_waitNotBusy(SD_WRITE_TIMEOUT);
// form message
  d[0]=cmd | 0x40;
    76ae:	orr.w	lr, r4, #64	; 0x40
  for(kk=1;kk<5;kk++) d[kk]=pa[4-kk];
    76b2:	ldrb.w	r1, [sp, #7]
    76b6:	ldrb.w	r2, [sp, #6]
    76ba:	add	r6, sp, #8
    76bc:	strb.w	r1, [sp, #9]
    76c0:	add.w	ip, sp, #12
    76c4:	strb.w	r2, [sp, #10]
    76c8:	mov	r5, lr
    76ca:	ldrb.w	r1, [sp, #5]
    76ce:	mov	r7, r6
    76d0:	ldrb.w	r2, [sp, #4]
    76d4:	movs	r3, #0

  // wait if busy
 // unused // 
 uint16_t ret=sd_waitNotBusy(SD_WRITE_TIMEOUT);
// form message
  d[0]=cmd | 0x40;
    76d6:	strb.w	lr, [sp, #8]
  for(kk=1;kk<5;kk++) d[kk]=pa[4-kk];
    76da:	strb.w	r1, [sp, #11]
    76de:	strb.w	r2, [sp, #12]
    76e2:	movs	r2, #8
    uint8_t ii,jj;
    for (ii = 0; ii < n; ii++) 
    {
    uint8_t d = data[ii];
    for (jj = 0; jj < 8; jj++) {
      crc <<= 1;
    76e4:	lsls	r3, r3, #1
    76e6:	subs	r2, #1
      if ((d & 0x80) ^ (crc & 0x80)) crc ^= 0x09;
      d <<= 1;
    76e8:	lsls	r0, r5, #1
    uint8_t ii,jj;
    for (ii = 0; ii < n; ii++) 
    {
    uint8_t d = data[ii];
    for (jj = 0; jj < 8; jj++) {
      crc <<= 1;
    76ea:	uxtb	r3, r3
      if ((d & 0x80) ^ (crc & 0x80)) crc ^= 0x09;
    76ec:	eor.w	r1, r3, r5
      d <<= 1;
    76f0:	uxtb	r5, r0
    for (ii = 0; ii < n; ii++) 
    {
    uint8_t d = data[ii];
    for (jj = 0; jj < 8; jj++) {
      crc <<= 1;
      if ((d & 0x80) ^ (crc & 0x80)) crc ^= 0x09;
    76f2:	lsls	r1, r1, #24
    76f4:	it	mi
    76f6:	eormi.w	r3, r3, #9
    uint8_t crc = 0;
    uint8_t ii,jj;
    for (ii = 0; ii < n; ii++) 
    {
    uint8_t d = data[ii];
    for (jj = 0; jj < 8; jj++) {
    76fa:	ands.w	r2, r2, #255	; 0xff
    76fe:	bne.n	76e4 <sd_cardCommand(unsigned char, unsigned long)+0x70>
  //------------------------------------------------------------------------------
  // CRC functions
  static uint8_t CRC7(const uint8_t* data, uint8_t n) {
    uint8_t crc = 0;
    uint8_t ii,jj;
    for (ii = 0; ii < n; ii++) 
    7700:	cmp	ip, r7
    7702:	beq.n	770a <sd_cardCommand(unsigned char, unsigned long)+0x96>
    7704:	ldrb.w	r5, [r7, #1]!
    7708:	b.n	76e2 <sd_cardCommand(unsigned char, unsigned long)+0x6e>
// form message
  d[0]=cmd | 0x40;
  for(kk=1;kk<5;kk++) d[kk]=pa[4-kk];
  
#ifdef USE_SD_CRC  // add crc
  d[5] = CRC7(d, 5);
    770a:	lsls	r3, r3, #1
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    770c:	ldr	r2, [pc, #124]	; (778c <sd_cardCommand(unsigned char, unsigned long)+0x118>)
// form message
  d[0]=cmd | 0x40;
  for(kk=1;kk<5;kk++) d[kk]=pa[4-kk];
  
#ifdef USE_SD_CRC  // add crc
  d[5] = CRC7(d, 5);
    770e:	add	r0, sp, #16
    7710:	orr.w	r3, r3, #1
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7714:	mov	r5, r2
// form message
  d[0]=cmd | 0x40;
  for(kk=1;kk<5;kk++) d[kk]=pa[4-kk];
  
#ifdef USE_SD_CRC  // add crc
  d[5] = CRC7(d, 5);
    7716:	strb.w	r3, [r0, #-3]!
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    771a:	str.w	lr, [r2, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    771e:	ldr	r3, [r2, #92]	; 0x5c
    7720:	ldr	r1, [pc, #104]	; (778c <sd_cardCommand(unsigned char, unsigned long)+0x118>)
		if (fifo > 0) return spi->RDR; 
    7722:	tst.w	r3, #2031616	; 0x1f0000
    7726:	beq.n	771e <sd_cardCommand(unsigned char, unsigned long)+0xaa>
#else
  d[5]=((cmd == CMD0) ? 0X95 : 0X87);
#endif  // USE_SD_CRC

  // send message
  for (kk = 0; kk < 6; kk++) spi_send(d[kk]);
    7728:	cmp	r6, r0
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
		if (fifo > 0) return spi->RDR; 
    772a:	ldr	r3, [r5, #116]	; 0x74
#else
  d[5]=((cmd == CMD0) ? 0X95 : 0X87);
#endif  // USE_SD_CRC

  // send message
  for (kk = 0; kk < 6; kk++) spi_send(d[kk]);
    772c:	beq.n	7734 <sd_cardCommand(unsigned char, unsigned long)+0xc0>
    772e:	ldrb.w	lr, [r6, #1]!
    7732:	b.n	771a <sd_cardCommand(unsigned char, unsigned long)+0xa6>

  // skip stuff byte for stop read
  if (cmd == CMD12) spi_receive();
    7734:	cmp	r4, #12
    7736:	beq.n	7770 <sd_cardCommand(unsigned char, unsigned long)+0xfc>
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7738:	ldr	r2, [pc, #80]	; (778c <sd_cardCommand(unsigned char, unsigned long)+0x118>)
  // wait if busy
 // unused // 
 uint16_t ret=sd_waitNotBusy(SD_WRITE_TIMEOUT);
// form message
  d[0]=cmd | 0x40;
  for(kk=1;kk<5;kk++) d[kk]=pa[4-kk];
    773a:	movs	r1, #0
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    773c:	movs	r6, #255	; 0xff
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    773e:	mov	r5, r2
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7740:	str	r6, [r2, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7742:	ldr	r3, [r2, #92]	; 0x5c
		if (fifo > 0) return spi->RDR; 
    7744:	tst.w	r3, #2031616	; 0x1f0000
    7748:	beq.n	7742 <sd_cardCommand(unsigned char, unsigned long)+0xce>

  // skip stuff byte for stop read
  if (cmd == CMD12) spi_receive();

  // wait for response
  for (kk = 0; ((m_sd_status = spi_receive()) & 0X80) && kk != 0XFF; kk++);
    774a:	uxtb	r3, r1
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
		if (fifo > 0) return spi->RDR; 
    774c:	ldr	r0, [r5, #116]	; 0x74

  // skip stuff byte for stop read
  if (cmd == CMD12) spi_receive();

  // wait for response
  for (kk = 0; ((m_sd_status = spi_receive()) & 0X80) && kk != 0XFF; kk++);
    774e:	adds	r1, #1
    7750:	subs	r3, #255	; 0xff
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
		if (fifo > 0) return spi->RDR; 
    7752:	uxtb	r0, r0

  // skip stuff byte for stop read
  if (cmd == CMD12) spi_receive();

  // wait for response
  for (kk = 0; ((m_sd_status = spi_receive()) & 0X80) && kk != 0XFF; kk++);
    7754:	it	ne
    7756:	movne	r3, #1
    7758:	uxth	r4, r0
    775a:	ands.w	r3, r3, r0, lsr #7
    775e:	bne.n	7740 <sd_cardCommand(unsigned char, unsigned long)+0xcc>
    7760:	ldr	r3, [pc, #44]	; (7790 <sd_cardCommand(unsigned char, unsigned long)+0x11c>)
    7762:	strh	r4, [r3, #0]
  return m_sd_status;
} 
    7764:	add	sp, #20
    7766:	pop	{r4, r5, r6, r7, pc}
    7768:	movs	r0, #0
    776a:	bl	75b8 <sd_chipSelect(unsigned short) [clone .part.0]>
    776e:	b.n	7684 <sd_cardCommand(unsigned char, unsigned long)+0x10>
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7770:	movs	r3, #255	; 0xff
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7772:	mov	r0, r1
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7774:	str	r3, [r1, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7776:	ldr	r3, [r0, #92]	; 0x5c
    7778:	ldr	r2, [pc, #16]	; (778c <sd_cardCommand(unsigned char, unsigned long)+0x118>)
		if (fifo > 0) return spi->RDR; 
    777a:	tst.w	r3, #2031616	; 0x1f0000
    777e:	beq.n	7776 <sd_cardCommand(unsigned char, unsigned long)+0x102>
    7780:	ldr	r3, [r2, #116]	; 0x74
    7782:	b.n	7738 <sd_cardCommand(unsigned char, unsigned long)+0xc4>
    7784:	.word	0x2000195a
    7788:	.word	0x2000c720
    778c:	.word	0x403a0000
    7790:	.word	0x2000f1aa

00007794 <sd_readData(unsigned char*, unsigned int)>:
  // wait for response
  for (kk = 0; ((m_sd_status = spi_receive()) & 0X80) && kk != 0XFF; kk++);
  return m_sd_status;
} 

uint16_t sd_readData(uint8_t* dst, size_t count) {
    7794:	push	{r3, r4, r5, r6, r7, lr}
    7796:	ldr	r6, [pc, #236]	; (7884 <sd_readData(unsigned char*, unsigned int)+0xf0>)
    7798:	mov	r5, r1
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    779a:	ldr	r2, [pc, #236]	; (7888 <sd_readData(unsigned char*, unsigned int)+0xf4>)
  // wait for response
  for (kk = 0; ((m_sd_status = spi_receive()) & 0X80) && kk != 0XFF; kk++);
  return m_sd_status;
} 

uint16_t sd_readData(uint8_t* dst, size_t count) {
    779c:	mov	r4, r0
    779e:	ldr	r1, [r6, #0]
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    77a0:	movs	r7, #255	; 0xff
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    77a2:	mov	r0, r2
  uint16_t crc;
#endif  // USE_SD_CRC
  // wait for start block token
  uint16_t t0 = millis();
  while ((m_sd_status = spi_receive()) == 0XFF) {
    if (((uint16_t)millis() - t0) > SD_READ_TIMEOUT) {
    77a4:	uxth	r1, r1
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    77a6:	str	r7, [r2, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    77a8:	ldr	r3, [r2, #92]	; 0x5c
		if (fifo > 0) return spi->RDR; 
    77aa:	tst.w	r3, #2031616	; 0x1f0000
    77ae:	beq.n	77a8 <sd_readData(unsigned char*, unsigned int)+0x14>
    77b0:	ldr	r3, [r0, #116]	; 0x74
    77b2:	uxtb	r3, r3
#ifdef USE_SD_CRC
  uint16_t crc;
#endif  // USE_SD_CRC
  // wait for start block token
  uint16_t t0 = millis();
  while ((m_sd_status = spi_receive()) == 0XFF) {
    77b4:	cmp	r3, #255	; 0xff
    77b6:	uxth.w	lr, r3
    77ba:	bne.n	77dc <sd_readData(unsigned char*, unsigned int)+0x48>
    77bc:	ldr	r3, [r6, #0]
    if (((uint16_t)millis() - t0) > SD_READ_TIMEOUT) {
    77be:	uxth	r3, r3
    77c0:	subs	r3, r3, r1
    77c2:	cmp.w	r3, #300	; 0x12c
    77c6:	ble.n	77a6 <sd_readData(unsigned char*, unsigned int)+0x12>
    77c8:	ldr	r1, [pc, #192]	; (788c <sd_readData(unsigned char*, unsigned int)+0xf8>)
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    77ca:	movs	r2, #17
    77cc:	ldr	r3, [pc, #192]	; (7890 <sd_readData(unsigned char*, unsigned int)+0xfc>)
    77ce:	strh.w	lr, [r1]
    77d2:	strh	r2, [r3, #0]
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    77d4:	ldr	r3, [pc, #188]	; (7894 <sd_readData(unsigned char*, unsigned int)+0x100>)
    77d6:	ldrh	r0, [r3, #0]
    77d8:	cbnz	r0, 77f6 <sd_readData(unsigned char*, unsigned int)+0x62>
  return TRUE;

 fail:
  sd_chipSelect(HIGH);
  return FALSE;
}
    77da:	pop	{r3, r4, r5, r6, r7, pc}
    77dc:	ldr	r6, [pc, #172]	; (788c <sd_readData(unsigned char*, unsigned int)+0xf8>)
    if (((uint16_t)millis() - t0) > SD_READ_TIMEOUT) {
      sd_setError(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  if (m_sd_status != DATA_START_BLOCK) {
    77de:	cmp.w	lr, #254	; 0xfe
    77e2:	strh.w	lr, [r6]
    77e6:	beq.n	7800 <sd_readData(unsigned char*, unsigned int)+0x6c>
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    77e8:	ldr	r3, [pc, #164]	; (7890 <sd_readData(unsigned char*, unsigned int)+0xfc>)
    77ea:	movs	r2, #15
    77ec:	strh	r2, [r3, #0]
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    77ee:	ldr	r3, [pc, #164]	; (7894 <sd_readData(unsigned char*, unsigned int)+0x100>)
    77f0:	ldrh	r0, [r3, #0]
    77f2:	cmp	r0, #0
    77f4:	beq.n	77da <sd_readData(unsigned char*, unsigned int)+0x46>
    77f6:	movs	r0, #1
    77f8:	bl	75b8 <sd_chipSelect(unsigned short) [clone .part.0]>
  sd_chipSelect(HIGH);
  return TRUE;

 fail:
  sd_chipSelect(HIGH);
  return FALSE;
    77fc:	movs	r0, #0
    77fe:	pop	{r3, r4, r5, r6, r7, pc}
	} 

	void spi_transfer(const void * buf, void * retbuf, size_t count)
	{

	  if (count == 0) return;
    7800:	cbnz	r5, 7860 <sd_readData(unsigned char*, unsigned int)+0xcc>
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7802:	ldr	r3, [pc, #132]	; (7888 <sd_readData(unsigned char*, unsigned int)+0xf4>)
  if (m_sd_status != DATA_START_BLOCK) {
    sd_setError(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_sd_status = spi_receiveBulk(dst, count))) {
    7804:	movs	r0, #0
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7806:	movs	r2, #255	; 0xff
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7808:	mov	r1, r3
  if (m_sd_status != DATA_START_BLOCK) {
    sd_setError(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_sd_status = spi_receiveBulk(dst, count))) {
    780a:	strh	r0, [r6, #0]
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    780c:	str	r2, [r3, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    780e:	ldr	r3, [r1, #92]	; 0x5c
    7810:	ldr	r2, [pc, #116]	; (7888 <sd_readData(unsigned char*, unsigned int)+0xf4>)
		if (fifo > 0) return spi->RDR; 
    7812:	tst.w	r3, #2031616	; 0x1f0000
    7816:	beq.n	780e <sd_readData(unsigned char*, unsigned int)+0x7a>
    7818:	ldr	r0, [r2, #116]	; 0x74
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    781a:	movs	r3, #255	; 0xff
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    781c:	mov	r1, r2
    goto fail;
  }

#ifdef USE_SD_CRC
  // get crc
  crc = (spi_receive() << 8) | spi_receive();
    781e:	lsls	r0, r0, #8
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7820:	str	r3, [r2, #100]	; 0x64
    goto fail;
  }

#ifdef USE_SD_CRC
  // get crc
  crc = (spi_receive() << 8) | spi_receive();
    7822:	sxth	r0, r0
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7824:	ldr	r3, [r1, #92]	; 0x5c
    7826:	ldr	r2, [pc, #96]	; (7888 <sd_readData(unsigned char*, unsigned int)+0xf4>)
		if (fifo > 0) return spi->RDR; 
    7828:	tst.w	r3, #2031616	; 0x1f0000
    782c:	beq.n	7824 <sd_readData(unsigned char*, unsigned int)+0x90>
    782e:	ldr	r3, [r2, #116]	; 0x74
    goto fail;
  }

#ifdef USE_SD_CRC
  // get crc
  crc = (spi_receive() << 8) | spi_receive();
    7830:	uxtb	r3, r3
    7832:	orrs	r0, r3
    7834:	uxth	r0, r0
    };

    static uint16_t CRC_CCITT(const uint8_t* data, size_t n) {
      uint16_t crc = 0;
      size_t ii;
      for (ii = 0; ii < n; ii++) {
    7836:	cbz	r5, 787e <sd_readData(unsigned char*, unsigned int)+0xea>
    7838:	movs	r3, #0
    783a:	ldr	r1, [pc, #92]	; (7898 <sd_readData(unsigned char*, unsigned int)+0x104>)
    783c:	add	r5, r4
      crc = crctab[(crc >> 8 ^ data[ii]) & 0XFF] ^ (crc << 8);
    783e:	ldrb.w	r2, [r4], #1
    7842:	eor.w	r2, r2, r3, asr #8
    };

    static uint16_t CRC_CCITT(const uint8_t* data, size_t n) {
      uint16_t crc = 0;
      size_t ii;
      for (ii = 0; ii < n; ii++) {
    7846:	cmp	r5, r4
      crc = crctab[(crc >> 8 ^ data[ii]) & 0XFF] ^ (crc << 8);
    7848:	ldrh.w	r2, [r1, r2, lsl #1]
    784c:	eor.w	r3, r2, r3, lsl #8
    7850:	uxth	r3, r3
    };

    static uint16_t CRC_CCITT(const uint8_t* data, size_t n) {
      uint16_t crc = 0;
      size_t ii;
      for (ii = 0; ii < n; ii++) {
    7852:	bne.n	783e <sd_readData(unsigned char*, unsigned int)+0xaa>
  }

#ifdef USE_SD_CRC
  // get crc
  crc = (spi_receive() << 8) | spi_receive();
  if (crc != CRC_CCITT(dst, count)) {
    7854:	cmp	r0, r3
    7856:	beq.n	786c <sd_readData(unsigned char*, unsigned int)+0xd8>
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    7858:	ldr	r3, [pc, #52]	; (7890 <sd_readData(unsigned char*, unsigned int)+0xfc>)
    785a:	movs	r2, #27
    785c:	strh	r2, [r3, #0]
    785e:	b.n	77d4 <sd_readData(unsigned char*, unsigned int)+0x40>
    7860:	mov	r2, r5
    7862:	mov	r1, r4
    7864:	movs	r0, #0
    7866:	bl	7608 <spi_transfer(void const*, void*, unsigned int) [clone .part.4]>
    786a:	b.n	7802 <sd_readData(unsigned char*, unsigned int)+0x6e>
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    786c:	ldr	r3, [pc, #36]	; (7894 <sd_readData(unsigned char*, unsigned int)+0x100>)
  spi_receive();
  spi_receive();
#endif  // USE_SD_CRC

  sd_chipSelect(HIGH);
  return TRUE;
    786e:	movs	r0, #1
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7870:	ldrh	r3, [r3, #0]
    7872:	cmp	r3, #0
    7874:	beq.n	77da <sd_readData(unsigned char*, unsigned int)+0x46>
    7876:	bl	75b8 <sd_chipSelect(unsigned short) [clone .part.0]>
  spi_receive();
  spi_receive();
#endif  // USE_SD_CRC

  sd_chipSelect(HIGH);
  return TRUE;
    787a:	movs	r0, #1
    787c:	pop	{r3, r4, r5, r6, r7, pc}
      0xEF1F, 0xFF3E, 0xCF5D, 0xDF7C, 0xAF9B, 0xBFBA, 0x8FD9, 0x9FF8,
      0x6E17, 0x7E36, 0x4E55, 0x5E74, 0x2E93, 0x3EB2, 0x0ED1, 0x1EF0
    };

    static uint16_t CRC_CCITT(const uint8_t* data, size_t n) {
      uint16_t crc = 0;
    787e:	mov	r3, r5
    7880:	b.n	7854 <sd_readData(unsigned char*, unsigned int)+0xc0>
    7882:	nop
    7884:	.word	0x2000c720
    7888:	.word	0x403a0000
    788c:	.word	0x2000f1aa
    7890:	.word	0x2000f1a8
    7894:	.word	0x2000195a
    7898:	.word	0x2000042c

0000789c <sd_readRegister(unsigned char, void*)>:
  return FALSE;
}

// read CID or CSR register
uint16_t sd_readRegister(uint8_t cmd, void* buf) 
{
    789c:	push	{r4, lr}
    789e:	mov	r4, r1
    uint8_t* dst = (uint8_t*)(buf);
  uint16_t ret=sd_cardCommand(cmd, 0);
    78a0:	movs	r1, #0
    78a2:	bl	7674 <sd_cardCommand(unsigned char, unsigned long)>
    if (ret) 
    78a6:	cbz	r0, 78b8 <sd_readRegister(unsigned char, void*)+0x1c>
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    78a8:	ldr	r3, [pc, #36]	; (78d0 <sd_readRegister(unsigned char, void*)+0x34>)
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    78aa:	movs	r1, #16
    78ac:	ldr	r2, [pc, #36]	; (78d4 <sd_readRegister(unsigned char, void*)+0x38>)
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    78ae:	ldrh	r3, [r3, #0]
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    78b0:	strh	r1, [r2, #0]
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    78b2:	cbnz	r3, 78c4 <sd_readRegister(unsigned char, void*)+0x28>
    sd_chipSelect(HIGH);
    return FALSE;
    }
  ret= sd_readData(dst, 16);
  return ret;
}
    78b4:	movs	r0, #0
    78b6:	pop	{r4, pc}
    if (ret) 
  {   sd_setError(SD_CARD_ERROR_READ_REG);
    sd_chipSelect(HIGH);
    return FALSE;
    }
  ret= sd_readData(dst, 16);
    78b8:	mov	r0, r4
    78ba:	movs	r1, #16
  return ret;
}
    78bc:	ldmia.w	sp!, {r4, lr}
    if (ret) 
  {   sd_setError(SD_CARD_ERROR_READ_REG);
    sd_chipSelect(HIGH);
    return FALSE;
    }
  ret= sd_readData(dst, 16);
    78c0:	b.w	7794 <sd_readData(unsigned char*, unsigned int)>
    78c4:	movs	r0, #1
    78c6:	bl	75b8 <sd_chipSelect(unsigned short) [clone .part.0]>
  return ret;
}
    78ca:	movs	r0, #0
    78cc:	pop	{r4, pc}
    78ce:	nop
    78d0:	.word	0x2000195a
    78d4:	.word	0x2000f1a8

000078d8 <sd_connect()>:
 * can be determined by calling errorCode() and errorData().
 */
 uint8_t sdCommandAndResponse(uint8_t cmd, uint32_t param);
 
int sd_connect()
{ int kk;
    78d8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    78dc:	ldr	r6, [pc, #384]	; (7a60 <sd_connect()+0x188>)
    78de:	ldr	r5, [pc, #388]	; (7a64 <sd_connect()+0x18c>)
    78e0:	ldrh	r3, [r6, #0]
    78e2:	ldr	r7, [r5, #0]
    78e4:	cmp	r3, #0
    78e6:	bne.n	7958 <sd_connect()+0x80>
  uint32_t arg;
  // uint8_t ret;
  // command to go idle in SPI mode
  sd_chipSelect(LOW);

  while (sd_cardCommand(CMD0, 0) != R1_IDLE_STATE) 
    78e8:	movs	r1, #0
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    78ea:	ldr	r4, [pc, #380]	; (7a68 <sd_connect()+0x190>)
  uint32_t arg;
  // uint8_t ret;
  // command to go idle in SPI mode
  sd_chipSelect(LOW);

  while (sd_cardCommand(CMD0, 0) != R1_IDLE_STATE) 
    78ec:	mov	r0, r1
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    78ee:	mov	r8, r4
  uint32_t arg;
  // uint8_t ret;
  // command to go idle in SPI mode
  sd_chipSelect(LOW);

  while (sd_cardCommand(CMD0, 0) != R1_IDLE_STATE) 
    78f0:	bl	7674 <sd_cardCommand(unsigned char, unsigned long)>
    78f4:	cmp	r0, #1
    78f6:	beq.n	7922 <sd_connect()+0x4a>
    78f8:	ldr	r2, [r5, #0]
  {
    t1=(uint16_t)millis();
    if ((t1- t0) > SD_INIT_TIMEOUT) {
    78fa:	uxth	r3, r7
    78fc:	uxth	r2, r2
    78fe:	subs	r3, r2, r3
    7900:	cmp.w	r3, #4000	; 0xfa0
    7904:	bgt.n	7944 <sd_connect()+0x6c>
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7906:	movs	r3, #255	; 0xff
    7908:	str	r3, [r4, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    790a:	ldr	r3, [r4, #92]	; 0x5c
		if (fifo > 0) return spi->RDR; 
    790c:	tst.w	r3, #2031616	; 0x1f0000
    7910:	beq.n	790a <sd_connect()+0x32>
  uint32_t arg;
  // uint8_t ret;
  // command to go idle in SPI mode
  sd_chipSelect(LOW);

  while (sd_cardCommand(CMD0, 0) != R1_IDLE_STATE) 
    7912:	movs	r1, #0
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
		if (fifo > 0) return spi->RDR; 
    7914:	ldr.w	r3, [r8, #116]	; 0x74
  uint32_t arg;
  // uint8_t ret;
  // command to go idle in SPI mode
  sd_chipSelect(LOW);

  while (sd_cardCommand(CMD0, 0) != R1_IDLE_STATE) 
    7918:	mov	r0, r1
    791a:	bl	7674 <sd_cardCommand(unsigned char, unsigned long)>
    791e:	cmp	r0, #1
    7920:	bne.n	78f8 <sd_connect()+0x20>
    }
   spi_send(0XFF);
  }
  
#ifdef USE_SD_CRC
  if (sd_cardCommand(CMD59, 1) != R1_IDLE_STATE) {
    7922:	mov	r1, r0
    7924:	movs	r0, #59	; 0x3b
    7926:	bl	7674 <sd_cardCommand(unsigned char, unsigned long)>
    792a:	cmp	r0, #1
    792c:	beq.n	7960 <sd_connect()+0x88>
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    792e:	ldr	r3, [pc, #316]	; (7a6c <sd_connect()+0x194>)
    7930:	movs	r2, #26
    7932:	strh	r2, [r3, #0]
  
  sd_chipSelect(HIGH);
  return TRUE;

  fail:
  Serial.printf("E connect %d\n", m_sd_errorCode);
    7934:	ldr	r1, [pc, #312]	; (7a70 <sd_connect()+0x198>)
    7936:	ldr	r0, [pc, #316]	; (7a74 <sd_connect()+0x19c>)
    7938:	bl	a3a0 <Print::printf(char const*, ...)>
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    793c:	ldrh	r0, [r6, #0]
    793e:	cbnz	r0, 794c <sd_connect()+0x74>

  fail:
  Serial.printf("E connect %d\n", m_sd_errorCode);
  sd_chipSelect(HIGH);
  return FALSE;
}
    7940:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    7944:	ldr	r3, [pc, #292]	; (7a6c <sd_connect()+0x194>)
    7946:	movs	r2, #1
    7948:	strh	r2, [r3, #0]
    794a:	b.n	7934 <sd_connect()+0x5c>
    794c:	movs	r0, #1
    794e:	bl	75b8 <sd_chipSelect(unsigned short) [clone .part.0]>
  return TRUE;

  fail:
  Serial.printf("E connect %d\n", m_sd_errorCode);
  sd_chipSelect(HIGH);
  return FALSE;
    7952:	movs	r0, #0
    7954:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7958:	movs	r0, #0
    795a:	bl	75b8 <sd_chipSelect(unsigned short) [clone .part.0]>
    795e:	b.n	78e8 <sd_connect()+0x10>
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7960:	ldr	r4, [pc, #260]	; (7a68 <sd_connect()+0x190>)
    7962:	ldr	r7, [r5, #0]
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7964:	mov	r8, r4

  // check SD version
  t0  = (uint16_t)millis();
  while (1) 
  {
    if (sd_cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) 
    7966:	mov.w	r1, #426	; 0x1aa
    796a:	movs	r0, #8
    796c:	bl	7674 <sd_cardCommand(unsigned char, unsigned long)>
    7970:	cmp	r0, #5
    7972:	beq.n	79ee <sd_connect()+0x116>
    7974:	movs	r2, #4
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7976:	movs	r1, #255	; 0xff
    7978:	str	r1, [r4, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    797a:	ldr	r3, [r4, #92]	; 0x5c
		if (fifo > 0) return spi->RDR; 
    797c:	tst.w	r3, #2031616	; 0x1f0000
    7980:	beq.n	797a <sd_connect()+0xa2>
    7982:	ldr.w	r3, [r8, #116]	; 0x74
    if (sd_cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) 
  	{
      sd_setType(SD_CARD_TYPE_SD1);
      break;
    }
    for (kk = 0; kk < 4; kk++) m_sd_status = spi_receive();
    7986:	subs	r2, #1
    7988:	uxtb	r3, r3
    798a:	bne.n	7978 <sd_connect()+0xa0>
    798c:	ldr	r2, [pc, #232]	; (7a78 <sd_connect()+0x1a0>)
    if (m_sd_status == 0XAA) 
    798e:	cmp	r3, #170	; 0xaa
    7990:	strh	r3, [r2, #0]
    7992:	beq.n	79aa <sd_connect()+0xd2>
    7994:	ldr	r2, [r5, #0]
	{
		sd_setType(SD_CARD_TYPE_SD2);
		break;
	}
	if (((uint16_t)millis() - t0) > SD_INIT_TIMEOUT) 
    7996:	uxth	r3, r7
    7998:	uxth	r2, r2
    799a:	subs	r3, r2, r3
    799c:	cmp.w	r3, #4000	; 0xfa0
    79a0:	ble.n	7966 <sd_connect()+0x8e>
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    79a2:	ldr	r3, [pc, #200]	; (7a6c <sd_connect()+0x194>)
    79a4:	movs	r2, #2
    79a6:	strh	r2, [r3, #0]
    79a8:	b.n	7934 <sd_connect()+0x5c>
uint16_t sd_getError(void) {return m_sd_errorCode;}

void sd_setType(uint16_t type) {m_sd_type=type;}
    79aa:	ldr.w	r8, [pc, #208]	; 7a7c <sd_connect()+0x1a4>
    79ae:	movs	r3, #2
      goto fail;
    }
  }
  
  // initialize card and send host supports SDHC if SD2
  arg = (sd_getType() == SD_CARD_TYPE_SD2) ? 0X40000000 : 0;
    79b0:	mov.w	r4, #1073741824	; 0x40000000

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
uint16_t sd_getError(void) {return m_sd_errorCode;}

void sd_setType(uint16_t type) {m_sd_type=type;}
    79b4:	strh.w	r3, [r8]
    79b8:	ldr	r7, [r5, #0]
    79ba:	b.n	79c8 <sd_connect()+0xf0>
    79bc:	ldr	r3, [r5, #0]
  t0  = (uint16_t)millis();
  while (sd_cardAcmd(ACMD41, arg) != R1_READY_STATE) 
  {
    // check for timeout
	t1  = (uint16_t)millis();
    if ((t1 - t0) > SD_INIT_TIMEOUT) 
    79be:	uxth	r3, r3
    79c0:	subs	r3, r3, r2
    79c2:	cmp.w	r3, #4000	; 0xfa0
    79c6:	bgt.n	79fc <sd_connect()+0x124>
  uint16_t sd_readCID(cid_t* cid) {  return sd_readRegister(CMD10, cid); }
  uint16_t sd_readCSD(csd_t* csd) {  return sd_readRegister(CMD9, csd); }

 
uint8_t sd_cardAcmd(uint8_t cmd, uint32_t arg) 
{   sd_cardCommand(CMD55, 0);
    79c8:	movs	r1, #0
    79ca:	movs	r0, #55	; 0x37
    79cc:	bl	7674 <sd_cardCommand(unsigned char, unsigned long)>
    return sd_cardCommand(cmd, arg);
    79d0:	mov	r1, r4
    79d2:	movs	r0, #41	; 0x29
    79d4:	bl	7674 <sd_cardCommand(unsigned char, unsigned long)>
  t0  = (uint16_t)millis();
  while (sd_cardAcmd(ACMD41, arg) != R1_READY_STATE) 
  {
    // check for timeout
	t1  = (uint16_t)millis();
    if ((t1 - t0) > SD_INIT_TIMEOUT) 
    79d8:	uxth	r2, r7
  
  // initialize card and send host supports SDHC if SD2
  arg = (sd_getType() == SD_CARD_TYPE_SD2) ? 0X40000000 : 0;

  t0  = (uint16_t)millis();
  while (sd_cardAcmd(ACMD41, arg) != R1_READY_STATE) 
    79da:	cmp	r0, #0
    79dc:	bne.n	79bc <sd_connect()+0xe4>
      goto fail;
    }
  }

  // if SD2 read OCR register to check for SDHC card
  if (sd_getType() == SD_CARD_TYPE_SD2) 
    79de:	ldrh.w	r3, [r8]
    79e2:	cmp	r3, #2
    79e4:	beq.n	7a04 <sd_connect()+0x12c>
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    79e6:	ldrh	r3, [r6, #0]
    79e8:	cbnz	r3, 7a16 <sd_connect()+0x13e>
    // Discard rest of ocr - contains allowed voltage range.
    for (kk = 0; kk < 3; kk++) spi_receive();
  }
  
  sd_chipSelect(HIGH);
  return TRUE;
    79ea:	movs	r0, #1
    79ec:	b.n	7940 <sd_connect()+0x68>

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
uint16_t sd_getError(void) {return m_sd_errorCode;}

void sd_setType(uint16_t type) {m_sd_type=type;}
    79ee:	ldr.w	r8, [pc, #140]	; 7a7c <sd_connect()+0x1a4>
    79f2:	movs	r3, #1
      goto fail;
    }
  }
  
  // initialize card and send host supports SDHC if SD2
  arg = (sd_getType() == SD_CARD_TYPE_SD2) ? 0X40000000 : 0;
    79f4:	movs	r4, #0

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
uint16_t sd_getError(void) {return m_sd_errorCode;}

void sd_setType(uint16_t type) {m_sd_type=type;}
    79f6:	strh.w	r3, [r8]
    79fa:	b.n	79b8 <sd_connect()+0xe0>
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    79fc:	ldr	r3, [pc, #108]	; (7a6c <sd_connect()+0x194>)
    79fe:	movs	r2, #10
    7a00:	strh	r2, [r3, #0]
    7a02:	b.n	7934 <sd_connect()+0x5c>
  }

  // if SD2 read OCR register to check for SDHC card
  if (sd_getType() == SD_CARD_TYPE_SD2) 
  {
    if (sd_cardCommand(CMD58, 0))
    7a04:	mov	r1, r0
    7a06:	movs	r0, #58	; 0x3a
    7a08:	bl	7674 <sd_cardCommand(unsigned char, unsigned long)>
    7a0c:	cbz	r0, 7a22 <sd_connect()+0x14a>
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    7a0e:	ldr	r3, [pc, #92]	; (7a6c <sd_connect()+0x194>)
    7a10:	movs	r2, #8
    7a12:	strh	r2, [r3, #0]
    7a14:	b.n	7934 <sd_connect()+0x5c>
    7a16:	movs	r0, #1
    7a18:	bl	75b8 <sd_chipSelect(unsigned short) [clone .part.0]>
    // Discard rest of ocr - contains allowed voltage range.
    for (kk = 0; kk < 3; kk++) spi_receive();
  }
  
  sd_chipSelect(HIGH);
  return TRUE;
    7a1c:	movs	r0, #1
    7a1e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7a22:	ldr	r3, [pc, #68]	; (7a68 <sd_connect()+0x190>)
    7a24:	movs	r2, #255	; 0xff
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7a26:	mov	r1, r3
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7a28:	str	r2, [r3, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7a2a:	ldr	r2, [r1, #92]	; 0x5c
    7a2c:	ldr	r3, [pc, #56]	; (7a68 <sd_connect()+0x190>)
		if (fifo > 0) return spi->RDR; 
    7a2e:	tst.w	r2, #2031616	; 0x1f0000
    7a32:	beq.n	7a2a <sd_connect()+0x152>
    7a34:	ldr	r3, [r3, #116]	; 0x74
    if (sd_cardCommand(CMD58, 0))
	{
      sd_setError(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spi_receive() & 0XC0) == 0XC0) sd_setType(SD_CARD_TYPE_SDHC);
    7a36:	and.w	r3, r3, #192	; 0xc0
    7a3a:	cmp	r3, #192	; 0xc0
    7a3c:	bne.n	7a44 <sd_connect()+0x16c>

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
uint16_t sd_getError(void) {return m_sd_errorCode;}

void sd_setType(uint16_t type) {m_sd_type=type;}
    7a3e:	movs	r3, #3
    7a40:	strh.w	r3, [r8]
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7a44:	ldr	r3, [pc, #32]	; (7a68 <sd_connect()+0x190>)
      goto fail;
    }
  }
  
  // initialize card and send host supports SDHC if SD2
  arg = (sd_getType() == SD_CARD_TYPE_SD2) ? 0X40000000 : 0;
    7a46:	movs	r2, #3
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7a48:	movs	r0, #255	; 0xff
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7a4a:	mov	r1, r3
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7a4c:	str	r0, [r3, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7a4e:	ldr	r4, [r3, #92]	; 0x5c
		if (fifo > 0) return spi->RDR; 
    7a50:	tst.w	r4, #2031616	; 0x1f0000
    7a54:	beq.n	7a4e <sd_connect()+0x176>
      sd_setError(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spi_receive() & 0XC0) == 0XC0) sd_setType(SD_CARD_TYPE_SDHC);
    // Discard rest of ocr - contains allowed voltage range.
    for (kk = 0; kk < 3; kk++) spi_receive();
    7a56:	subs	r2, #1
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
		if (fifo > 0) return spi->RDR; 
    7a58:	ldr	r4, [r1, #116]	; 0x74
      sd_setError(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spi_receive() & 0XC0) == 0XC0) sd_setType(SD_CARD_TYPE_SDHC);
    // Discard rest of ocr - contains allowed voltage range.
    for (kk = 0; kk < 3; kk++) spi_receive();
    7a5a:	bne.n	7a4c <sd_connect()+0x174>
    7a5c:	b.n	79e6 <sd_connect()+0x10e>
    7a5e:	nop
    7a60:	.word	0x2000195a
    7a64:	.word	0x2000c720
    7a68:	.word	0x403a0000
    7a6c:	.word	0x2000f1a8
    7a70:	.word	0x20000d70
    7a74:	.word	0x20001388
    7a78:	.word	0x2000f1aa
    7a7c:	.word	0x2000f1ac

00007a80 <sd_cardSize()>:
 *
 * \return The number of 512 byte data blocks in the card
 *         or zero if an error occurs.
 */
uint32_t sd_cardSize(void) 
{
    7a80:	push	{r4, r5, lr}
    7a82:	sub	sp, #20
  ret= sd_readData(dst, 16);
  return ret;
}

  uint16_t sd_readCID(cid_t* cid) {  return sd_readRegister(CMD10, cid); }
  uint16_t sd_readCSD(csd_t* csd) {  return sd_readRegister(CMD9, csd); }
    7a84:	movs	r0, #9
    7a86:	mov	r1, sp
    7a88:	bl	789c <sd_readRegister(unsigned char, void*)>
uint32_t sd_cardSize(void) 
{
  csd_t csd;
  uint16_t ret;
  //
  if (!(ret=sd_readCSD(&csd))) return 0;
    7a8c:	cbz	r0, 7aa4 <sd_cardSize()+0x24>
  //
  if (csd.v1.csd_ver == 0) 
    7a8e:	ldrb.w	r3, [sp]
    7a92:	ands.w	r3, r3, #192	; 0xc0
    7a96:	beq.n	7aa8 <sd_cardSize()+0x28>
                      | (csd.v1.c_size_mid << 2) | csd.v1.c_size_low;
    uint8_t c_size_mult = (csd.v1.c_size_mult_high << 1)
                          | csd.v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } 
  else if (csd.v2.csd_ver == 1) 
    7a98:	cmp	r3, #64	; 0x40
    7a9a:	beq.n	7aea <sd_cardSize()+0x6a>
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    7a9c:	ldr	r3, [pc, #104]	; (7b08 <sd_cardSize()+0x88>)
    7a9e:	movs	r2, #11
    return (c_size + 1) <<9;
  } 
  else 
  {
    sd_setError(SD_CARD_ERROR_BAD_CSD);
    return 0;
    7aa0:	movs	r0, #0
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    7aa2:	strh	r2, [r3, #0]
  else 
  {
    sd_setError(SD_CARD_ERROR_BAD_CSD);
    return 0;
  }
}
    7aa4:	add	sp, #20
    7aa6:	pop	{r4, r5, pc}
  if (csd.v1.csd_ver == 0) 
  {
    uint8_t read_bl_len = csd.v1.read_bl_len;
    uint16_t c_size = (csd.v1.c_size_high << 10)
                      | (csd.v1.c_size_mid << 2) | csd.v1.c_size_low;
    uint8_t c_size_mult = (csd.v1.c_size_mult_high << 1)
    7aa8:	ldrb.w	r4, [sp, #9]
  if (!(ret=sd_readCSD(&csd))) return 0;
  //
  if (csd.v1.csd_ver == 0) 
  {
    uint8_t read_bl_len = csd.v1.read_bl_len;
    uint16_t c_size = (csd.v1.c_size_high << 10)
    7aac:	ldrb.w	r3, [sp, #6]
                      | (csd.v1.c_size_mid << 2) | csd.v1.c_size_low;
    uint8_t c_size_mult = (csd.v1.c_size_mult_high << 1)
                          | csd.v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7ab0:	ldrb.w	r2, [sp, #7]
    7ab4:	and.w	r4, r4, #3
  {
    uint8_t read_bl_len = csd.v1.read_bl_len;
    uint16_t c_size = (csd.v1.c_size_high << 10)
                      | (csd.v1.c_size_mid << 2) | csd.v1.c_size_low;
    uint8_t c_size_mult = (csd.v1.c_size_mult_high << 1)
                          | csd.v1.c_size_mult_low;
    7ab8:	ldrb.w	r0, [sp, #10]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7abc:	and.w	r3, r3, #3
    7ac0:	lsls	r4, r4, #1
  //
  if (!(ret=sd_readCSD(&csd))) return 0;
  //
  if (csd.v1.csd_ver == 0) 
  {
    uint8_t read_bl_len = csd.v1.read_bl_len;
    7ac2:	ldrb.w	r1, [sp, #5]
    uint16_t c_size = (csd.v1.c_size_high << 10)
                      | (csd.v1.c_size_mid << 2) | csd.v1.c_size_low;
    uint8_t c_size_mult = (csd.v1.c_size_mult_high << 1)
                          | csd.v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7ac6:	lsls	r2, r2, #2
  //
  if (csd.v1.csd_ver == 0) 
  {
    uint8_t read_bl_len = csd.v1.read_bl_len;
    uint16_t c_size = (csd.v1.c_size_high << 10)
                      | (csd.v1.c_size_mid << 2) | csd.v1.c_size_low;
    7ac8:	ldrb.w	r5, [sp, #8]
    uint8_t c_size_mult = (csd.v1.c_size_mult_high << 1)
                          | csd.v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7acc:	orr.w	r0, r4, r0, lsr #7
    7ad0:	and.w	r1, r1, #15
    7ad4:	orr.w	r3, r2, r3, lsl #10
    7ad8:	add	r0, r1
    7ada:	orr.w	r3, r3, r5, lsr #6
    7ade:	subs	r0, #7
    7ae0:	adds	r3, #1
    7ae2:	lsl.w	r0, r3, r0
  else 
  {
    sd_setError(SD_CARD_ERROR_BAD_CSD);
    return 0;
  }
}
    7ae6:	add	sp, #20
    7ae8:	pop	{r4, r5, pc}
  } 
  else if (csd.v2.csd_ver == 1) 
  {
    uint32_t c_size = 0X10000L * csd.v2.c_size_high + 0X100L
                      * (uint32_t)csd.v2.c_size_mid + csd.v2.c_size_low;
    return (c_size + 1) <<9;
    7aea:	ldrb.w	r3, [sp, #9]
    7aee:	ldrb.w	r2, [sp, #8]
    7af2:	adds	r3, #1
                          | csd.v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } 
  else if (csd.v2.csd_ver == 1) 
  {
    uint32_t c_size = 0X10000L * csd.v2.c_size_high + 0X100L
    7af4:	ldrb.w	r0, [sp, #7]
                      * (uint32_t)csd.v2.c_size_mid + csd.v2.c_size_low;
    return (c_size + 1) <<9;
    7af8:	add.w	r3, r3, r2, lsl #8
    7afc:	and.w	r0, r0, #63	; 0x3f
    7b00:	add.w	r0, r3, r0, lsl #16
    7b04:	lsls	r0, r0, #9
    7b06:	b.n	7aa4 <sd_cardSize()+0x24>
    7b08:	.word	0x2000f1a8

00007b0c <sd_readBlock(unsigned long, unsigned char*)>:
// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
uint16_t sd_getError(void) {return m_sd_errorCode;}

void sd_setType(uint16_t type) {m_sd_type=type;}
uint16_t sd_getType(void) {return m_sd_type;}
    7b0c:	ldr	r3, [pc, #60]	; (7b4c <sd_readBlock(unsigned long, unsigned char*)+0x40>)
 
uint16_t sd_readBlock(uint32_t blockNumber, uint8_t* dst) 
{
//  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (sd_getType()!= SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    7b0e:	ldrh	r3, [r3, #0]
    7b10:	cmp	r3, #3
    7b12:	it	ne
    7b14:	lslne	r0, r0, #9
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
 
uint16_t sd_readBlock(uint32_t blockNumber, uint8_t* dst) 
{
    7b16:	push	{r4, lr}
    7b18:	mov	r4, r1
//  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (sd_getType()!= SD_CARD_TYPE_SDHC) blockNumber <<= 9;
  if (sd_cardCommand(CMD17, blockNumber)) {
    7b1a:	mov	r1, r0
    7b1c:	movs	r0, #17
    7b1e:	bl	7674 <sd_cardCommand(unsigned char, unsigned long)>
    7b22:	cbz	r0, 7b34 <sd_readBlock(unsigned long, unsigned char*)+0x28>
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7b24:	ldr	r3, [pc, #40]	; (7b50 <sd_readBlock(unsigned long, unsigned char*)+0x44>)
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    7b26:	movs	r1, #4
    7b28:	ldr	r2, [pc, #40]	; (7b54 <sd_readBlock(unsigned long, unsigned char*)+0x48>)
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7b2a:	ldrh	r3, [r3, #0]
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    7b2c:	strh	r1, [r2, #0]
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7b2e:	cbnz	r3, 7b42 <sd_readBlock(unsigned long, unsigned char*)+0x36>
  return sd_readData(dst, 512);

 fail:
  sd_chipSelect(HIGH);
  return FALSE;
}
    7b30:	movs	r0, #0
    7b32:	pop	{r4, pc}
  if (sd_getType()!= SD_CARD_TYPE_SDHC) blockNumber <<= 9;
  if (sd_cardCommand(CMD17, blockNumber)) {
    sd_setError(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  return sd_readData(dst, 512);
    7b34:	mov	r0, r4
    7b36:	mov.w	r1, #512	; 0x200

 fail:
  sd_chipSelect(HIGH);
  return FALSE;
}
    7b3a:	ldmia.w	sp!, {r4, lr}
  if (sd_getType()!= SD_CARD_TYPE_SDHC) blockNumber <<= 9;
  if (sd_cardCommand(CMD17, blockNumber)) {
    sd_setError(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  return sd_readData(dst, 512);
    7b3e:	b.w	7794 <sd_readData(unsigned char*, unsigned int)>
    7b42:	movs	r0, #1
    7b44:	bl	75b8 <sd_chipSelect(unsigned short) [clone .part.0]>

 fail:
  sd_chipSelect(HIGH);
  return FALSE;
}
    7b48:	movs	r0, #0
    7b4a:	pop	{r4, pc}
    7b4c:	.word	0x2000f1ac
    7b50:	.word	0x2000195a
    7b54:	.word	0x2000f1a8

00007b58 <sd_readData2(unsigned char*)>:
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7b58:	ldr	r3, [pc, #28]	; (7b78 <sd_readData2(unsigned char*)+0x20>)
    7b5a:	ldrh	r3, [r3, #0]
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint16_t sd_readData2(uint8_t *dst) 
{
    7b5c:	push	{r4, lr}
    7b5e:	mov	r4, r0
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7b60:	cbz	r3, 7b68 <sd_readData2(unsigned char*)+0x10>
    7b62:	movs	r0, #0
    7b64:	bl	75b8 <sd_chipSelect(unsigned short) [clone .part.0]>
 * the value zero, false, is returned for failure.
 */
uint16_t sd_readData2(uint8_t *dst) 
{
  sd_chipSelect(LOW);
  return sd_readData(dst, 512);
    7b68:	mov	r0, r4
    7b6a:	mov.w	r1, #512	; 0x200
}
    7b6e:	ldmia.w	sp!, {r4, lr}
 * the value zero, false, is returned for failure.
 */
uint16_t sd_readData2(uint8_t *dst) 
{
  sd_chipSelect(LOW);
  return sd_readData(dst, 512);
    7b72:	b.w	7794 <sd_readData(unsigned char*, unsigned int)>
    7b76:	nop
    7b78:	.word	0x2000195a

00007b7c <sd_readStart(unsigned long)>:
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint16_t sd_readStart(uint32_t blockNumber) 
{
    7b7c:	push	{r3, lr}
// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
uint16_t sd_getError(void) {return m_sd_errorCode;}

void sd_setType(uint16_t type) {m_sd_type=type;}
uint16_t sd_getType(void) {return m_sd_type;}
    7b7e:	ldr	r3, [pc, #60]	; (7bbc <sd_readStart(unsigned long)+0x40>)
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint16_t sd_readStart(uint32_t blockNumber) 
{
    7b80:	mov	r1, r0
  //SD_TRACE("RS", blockNumber);
  if (sd_getType()!= SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    7b82:	ldrh	r3, [r3, #0]
    7b84:	cmp	r3, #3
    7b86:	it	ne
    7b88:	lslne	r1, r0, #9
  if (sd_cardCommand(CMD18, blockNumber)) {
    7b8a:	movs	r0, #18
    7b8c:	bl	7674 <sd_cardCommand(unsigned char, unsigned long)>
    7b90:	cbz	r0, 7ba0 <sd_readStart(unsigned long)+0x24>
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7b92:	ldr	r1, [pc, #44]	; (7bc0 <sd_readStart(unsigned long)+0x44>)
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    7b94:	movs	r2, #5
    7b96:	ldr	r3, [pc, #44]	; (7bc4 <sd_readStart(unsigned long)+0x48>)
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7b98:	ldrh	r0, [r1, #0]
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    7b9a:	strh	r2, [r3, #0]
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7b9c:	cbnz	r0, 7bb2 <sd_readStart(unsigned long)+0x36>
  return TRUE;

 fail:
  sd_chipSelect(HIGH);
  return FALSE;
}
    7b9e:	pop	{r3, pc}
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7ba0:	ldr	r3, [pc, #28]	; (7bc0 <sd_readStart(unsigned long)+0x44>)
  if (sd_cardCommand(CMD18, blockNumber)) {
    sd_setError(SD_CARD_ERROR_CMD18);
    goto fail;
  }
  sd_chipSelect(HIGH);
  return TRUE;
    7ba2:	movs	r0, #1
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7ba4:	ldrh	r3, [r3, #0]
    7ba6:	cmp	r3, #0
    7ba8:	beq.n	7b9e <sd_readStart(unsigned long)+0x22>
    7baa:	bl	75b8 <sd_chipSelect(unsigned short) [clone .part.0]>
  if (sd_cardCommand(CMD18, blockNumber)) {
    sd_setError(SD_CARD_ERROR_CMD18);
    goto fail;
  }
  sd_chipSelect(HIGH);
  return TRUE;
    7bae:	movs	r0, #1
    7bb0:	pop	{r3, pc}
    7bb2:	movs	r0, #1
    7bb4:	bl	75b8 <sd_chipSelect(unsigned short) [clone .part.0]>
    7bb8:	movs	r0, #0
    7bba:	pop	{r3, pc}
    7bbc:	.word	0x2000f1ac
    7bc0:	.word	0x2000195a
    7bc4:	.word	0x2000f1a8

00007bc8 <sd_readStop()>:
* \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */

uint16_t sd_readStop() 
{
    7bc8:	push	{r3, lr}
  if (sd_cardCommand(CMD12, 0)) {
    7bca:	movs	r1, #0
    7bcc:	movs	r0, #12
    7bce:	bl	7674 <sd_cardCommand(unsigned char, unsigned long)>
    7bd2:	cbz	r0, 7be2 <sd_readStop()+0x1a>
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7bd4:	ldr	r1, [pc, #40]	; (7c00 <sd_readStop()+0x38>)
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    7bd6:	movs	r2, #3
    7bd8:	ldr	r3, [pc, #40]	; (7c04 <sd_readStop()+0x3c>)
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7bda:	ldrh	r0, [r1, #0]
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    7bdc:	strh	r2, [r3, #0]
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7bde:	cbnz	r0, 7bf4 <sd_readStop()+0x2c>
  return TRUE;

 fail:
  sd_chipSelect(HIGH);
  return FALSE;
}
    7be0:	pop	{r3, pc}
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7be2:	ldr	r3, [pc, #28]	; (7c00 <sd_readStop()+0x38>)
  if (sd_cardCommand(CMD12, 0)) {
    sd_setError(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  sd_chipSelect(HIGH);
  return TRUE;
    7be4:	movs	r0, #1
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7be6:	ldrh	r3, [r3, #0]
    7be8:	cmp	r3, #0
    7bea:	beq.n	7be0 <sd_readStop()+0x18>
    7bec:	bl	75b8 <sd_chipSelect(unsigned short) [clone .part.0]>
  if (sd_cardCommand(CMD12, 0)) {
    sd_setError(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  sd_chipSelect(HIGH);
  return TRUE;
    7bf0:	movs	r0, #1
    7bf2:	pop	{r3, pc}
    7bf4:	movs	r0, #1
    7bf6:	bl	75b8 <sd_chipSelect(unsigned short) [clone .part.0]>
    7bfa:	movs	r0, #0
    7bfc:	pop	{r3, pc}
    7bfe:	nop
    7c00:	.word	0x2000195a
    7c04:	.word	0x2000f1a8

00007c08 <SPI_disk_read(unsigned char*, unsigned long, unsigned int)>:
}

DRESULT SPI_disk_read(BYTE *buff, DWORD sector, UINT count)
{	
	DRESULT res = RES_OK;
	if(count==1)
    7c08:	cmp	r2, #1
    
    return 0;
}

DRESULT SPI_disk_read(BYTE *buff, DWORD sector, UINT count)
{	
    7c0a:	push	{r3, r4, r5, r6, r7, lr}
    7c0c:	mov	r4, r0
    7c0e:	mov	r0, r1
	DRESULT res = RES_OK;
	if(count==1)
    7c10:	beq.n	7c46 <SPI_disk_read(unsigned char*, unsigned long, unsigned int)+0x3e>
    7c12:	mov	r7, r2
	{
		if(!sd_readBlock(sector, buff)) res = RES_READERROR;
	}
	else
	{
		if(!sd_readStart(sector)) res = RES_READERROR;
    7c14:	bl	7b7c <sd_readStart(unsigned long)>
    7c18:	cmp	r0, #0
    7c1a:	ite	ne
    7c1c:	movne	r6, #0
    7c1e:	moveq	r6, #6
		for(UINT ii=0; ii<count;ii++)
    7c20:	cbz	r7, 7c3a <SPI_disk_read(unsigned char*, unsigned long, unsigned int)+0x32>
    7c22:	movs	r5, #0
		{
		if(!sd_readData2(buff)) res = RES_READERROR;
    7c24:	mov	r0, r4
		if(!sd_readBlock(sector, buff)) res = RES_READERROR;
	}
	else
	{
		if(!sd_readStart(sector)) res = RES_READERROR;
		for(UINT ii=0; ii<count;ii++)
    7c26:	adds	r5, #1
		{
		if(!sd_readData2(buff)) res = RES_READERROR;
    7c28:	bl	7b58 <sd_readData2(unsigned char*)>
    7c2c:	cmp	r0, #0
		sector++;
		buff += 512;    
    7c2e:	add.w	r4, r4, #512	; 0x200
	else
	{
		if(!sd_readStart(sector)) res = RES_READERROR;
		for(UINT ii=0; ii<count;ii++)
		{
		if(!sd_readData2(buff)) res = RES_READERROR;
    7c32:	it	eq
    7c34:	moveq	r6, #6
		if(!sd_readBlock(sector, buff)) res = RES_READERROR;
	}
	else
	{
		if(!sd_readStart(sector)) res = RES_READERROR;
		for(UINT ii=0; ii<count;ii++)
    7c36:	cmp	r7, r5
    7c38:	bne.n	7c24 <SPI_disk_read(unsigned char*, unsigned long, unsigned int)+0x1c>
		{
		if(!sd_readData2(buff)) res = RES_READERROR;
		sector++;
		buff += 512;    
		}
		if(!sd_readStop()) res = RES_READERROR;
    7c3a:	bl	7bc8 <sd_readStop()>
    7c3e:	cbnz	r0, 7c42 <SPI_disk_read(unsigned char*, unsigned long, unsigned int)+0x3a>
DRESULT SPI_disk_read(BYTE *buff, DWORD sector, UINT count)
{	
	DRESULT res = RES_OK;
	if(count==1)
	{
		if(!sd_readBlock(sector, buff)) res = RES_READERROR;
    7c40:	movs	r6, #6
		}
		if(!sd_readStop()) res = RES_READERROR;
	}

    return res;
}
    7c42:	mov	r0, r6
    7c44:	pop	{r3, r4, r5, r6, r7, pc}
DRESULT SPI_disk_read(BYTE *buff, DWORD sector, UINT count)
{	
	DRESULT res = RES_OK;
	if(count==1)
	{
		if(!sd_readBlock(sector, buff)) res = RES_READERROR;
    7c46:	mov	r1, r4
    7c48:	bl	7b0c <sd_readBlock(unsigned long, unsigned char*)>
    7c4c:	cmp	r0, #0
    7c4e:	beq.n	7c40 <SPI_disk_read(unsigned char*, unsigned long, unsigned int)+0x38>
    return 0;
}

DRESULT SPI_disk_read(BYTE *buff, DWORD sector, UINT count)
{	
	DRESULT res = RES_OK;
    7c50:	movs	r6, #0
    7c52:	b.n	7c42 <SPI_disk_read(unsigned char*, unsigned long, unsigned int)+0x3a>

00007c54 <sd_writeData(unsigned char, unsigned char const*)>:
}

//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
uint16_t sd_writeData(uint8_t token, const uint8_t* src) 
{
    7c54:	push	{r3, r4, r5, r6, r7, lr}
    7c56:	subs	r2, r1, #1
      0xEF1F, 0xFF3E, 0xCF5D, 0xDF7C, 0xAF9B, 0xBFBA, 0x8FD9, 0x9FF8,
      0x6E17, 0x7E36, 0x4E55, 0x5E74, 0x2E93, 0x3EB2, 0x0ED1, 0x1EF0
    };

    static uint16_t CRC_CCITT(const uint8_t* data, size_t n) {
      uint16_t crc = 0;
    7c58:	movs	r5, #0
    7c5a:	ldr	r7, [pc, #156]	; (7cf8 <sd_writeData(unsigned char, unsigned char const*)+0xa4>)
    7c5c:	addw	r6, r1, #511	; 0x1ff
      size_t ii;
      for (ii = 0; ii < n; ii++) {
      crc = crctab[(crc >> 8 ^ data[ii]) & 0XFF] ^ (crc << 8);
    7c60:	ldrb.w	r3, [r2, #1]!
    7c64:	eor.w	r3, r3, r5, lsr #8
    };

    static uint16_t CRC_CCITT(const uint8_t* data, size_t n) {
      uint16_t crc = 0;
      size_t ii;
      for (ii = 0; ii < n; ii++) {
    7c68:	cmp	r6, r2
      crc = crctab[(crc >> 8 ^ data[ii]) & 0XFF] ^ (crc << 8);
    7c6a:	ldrh.w	r3, [r7, r3, lsl #1]
    7c6e:	eor.w	r4, r3, r5, lsl #8
    7c72:	sxth	r4, r4
    7c74:	uxth	r5, r4
    };

    static uint16_t CRC_CCITT(const uint8_t* data, size_t n) {
      uint16_t crc = 0;
      size_t ii;
      for (ii = 0; ii < n; ii++) {
    7c76:	bne.n	7c60 <sd_writeData(unsigned char, unsigned char const*)+0xc>
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7c78:	ldr	r3, [pc, #128]	; (7cfc <sd_writeData(unsigned char, unsigned char const*)+0xa8>)
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7c7a:	mov	r2, r3
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7c7c:	str	r0, [r3, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7c7e:	ldr	r3, [r2, #92]	; 0x5c
    7c80:	ldr	r6, [pc, #120]	; (7cfc <sd_writeData(unsigned char, unsigned char const*)+0xa8>)
		if (fifo > 0) return spi->RDR; 
    7c82:	tst.w	r3, #2031616	; 0x1f0000
    7c86:	beq.n	7c7e <sd_writeData(unsigned char, unsigned char const*)+0x2a>
    7c88:	mov	r0, r1
    7c8a:	mov.w	r2, #512	; 0x200
    7c8e:	movs	r1, #0
    7c90:	ldr	r3, [r6, #116]	; 0x74
    7c92:	bl	7608 <spi_transfer(void const*, void*, unsigned int) [clone .part.4]>
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7c96:	mov	r1, r6
    7c98:	asrs	r3, r5, #8
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7c9a:	str	r3, [r6, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7c9c:	ldr	r3, [r1, #92]	; 0x5c
    7c9e:	ldr	r2, [pc, #92]	; (7cfc <sd_writeData(unsigned char, unsigned char const*)+0xa8>)
		if (fifo > 0) return spi->RDR; 
    7ca0:	tst.w	r3, #2031616	; 0x1f0000
    7ca4:	beq.n	7c9c <sd_writeData(unsigned char, unsigned char const*)+0x48>
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7ca6:	uxtb	r4, r4
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7ca8:	mov	r1, r2
		if (fifo > 0) return spi->RDR; 
    7caa:	ldr	r3, [r2, #116]	; 0x74
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7cac:	str	r4, [r2, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7cae:	ldr	r3, [r1, #92]	; 0x5c
    7cb0:	ldr	r2, [pc, #72]	; (7cfc <sd_writeData(unsigned char, unsigned char const*)+0xa8>)
		if (fifo > 0) return spi->RDR; 
    7cb2:	tst.w	r3, #2031616	; 0x1f0000
    7cb6:	beq.n	7cae <sd_writeData(unsigned char, unsigned char const*)+0x5a>
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7cb8:	movs	r3, #255	; 0xff
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7cba:	mov	r1, r2
		if (fifo > 0) return spi->RDR; 
    7cbc:	ldr	r0, [r2, #116]	; 0x74
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7cbe:	str	r3, [r2, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7cc0:	ldr	r3, [r1, #92]	; 0x5c
    7cc2:	ldr	r2, [pc, #56]	; (7cfc <sd_writeData(unsigned char, unsigned char const*)+0xa8>)
		if (fifo > 0) return spi->RDR; 
    7cc4:	tst.w	r3, #2031616	; 0x1f0000
    7cc8:	beq.n	7cc0 <sd_writeData(unsigned char, unsigned char const*)+0x6c>
    7cca:	ldr	r3, [r2, #116]	; 0x74

  spi_send(token);
  spi_sendBulk(src, 512);
  spi_send(crc >> 8);
  spi_send(crc & 0XFF);
  m_sd_status=spi_receive();
    7ccc:	ldr	r1, [pc, #48]	; (7d00 <sd_writeData(unsigned char, unsigned char const*)+0xac>)
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
		if (fifo > 0) return spi->RDR; 
    7cce:	uxtb	r3, r3
  spi_sendBulk(src, 512);
  spi_send(crc >> 8);
  spi_send(crc & 0XFF);
  m_sd_status=spi_receive();

  if ((m_sd_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    7cd0:	and.w	r2, r3, #31

  spi_send(token);
  spi_sendBulk(src, 512);
  spi_send(crc >> 8);
  spi_send(crc & 0XFF);
  m_sd_status=spi_receive();
    7cd4:	strh	r3, [r1, #0]

  if ((m_sd_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    7cd6:	cmp	r2, #5
    7cd8:	beq.n	7cf2 <sd_writeData(unsigned char, unsigned char const*)+0x9e>
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7cda:	ldr	r1, [pc, #40]	; (7d04 <sd_writeData(unsigned char, unsigned char const*)+0xb0>)
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    7cdc:	movs	r2, #19
    7cde:	ldr	r3, [pc, #40]	; (7d08 <sd_writeData(unsigned char, unsigned char const*)+0xb4>)
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7ce0:	ldrh	r0, [r1, #0]
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    7ce2:	strh	r2, [r3, #0]
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7ce4:	cbnz	r0, 7ce8 <sd_writeData(unsigned char, unsigned char const*)+0x94>
  return TRUE;

 fail:
  sd_chipSelect(HIGH);
  return FALSE;
}
    7ce6:	pop	{r3, r4, r5, r6, r7, pc}
    7ce8:	movs	r0, #1
    7cea:	bl	75b8 <sd_chipSelect(unsigned short) [clone .part.0]>
  }
  return TRUE;

 fail:
  sd_chipSelect(HIGH);
  return FALSE;
    7cee:	movs	r0, #0
    7cf0:	pop	{r3, r4, r5, r6, r7, pc}
  if ((m_sd_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    sd_setError(SD_CARD_ERROR_WRITE);
//  fprintf(stderr,"write error %x\r\n",m_sd_status & DATA_RES_MASK);
    goto fail;
  }
  return TRUE;
    7cf2:	movs	r0, #1

 fail:
  sd_chipSelect(HIGH);
  return FALSE;
}
    7cf4:	pop	{r3, r4, r5, r6, r7, pc}
    7cf6:	nop
    7cf8:	.word	0x2000042c
    7cfc:	.word	0x403a0000
    7d00:	.word	0x2000f1aa
    7d04:	.word	0x2000195a
    7d08:	.word	0x2000f1a8

00007d0c <sd_writeData2(unsigned char const*)>:
 * \param[in] src Pointer to the location of the data to be written.
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint16_t sd_writeData2(const uint8_t* src) 
{
    7d0c:	push	{r3, r4, r5, r6, r7, lr}
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7d0e:	ldr	r4, [pc, #108]	; (7d7c <sd_writeData2(unsigned char const*)+0x70>)
 * \param[in] src Pointer to the location of the data to be written.
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint16_t sd_writeData2(const uint8_t* src) 
{
    7d10:	mov	r5, r0
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7d12:	ldrh	r3, [r4, #0]
    7d14:	cbnz	r3, 7d6a <sd_writeData2(unsigned char const*)+0x5e>
    7d16:	ldr	r1, [pc, #104]	; (7d80 <sd_writeData2(unsigned char const*)+0x74>)
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7d18:	movs	r7, #255	; 0xff
    7d1a:	ldr	r2, [pc, #104]	; (7d84 <sd_writeData2(unsigned char const*)+0x78>)
    7d1c:	ldr	r0, [r1, #0]
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7d1e:	mov	r6, r2
{
  uint16_t t0;
  uint16_t ret;
  t0  = millis();
  while ((ret=spi_receive()) != 0XFF) 
  { if (((uint16_t)millis() - t0) >= timeoutMillis) return FALSE;
    7d20:	uxth	r0, r0
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7d22:	str	r7, [r2, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7d24:	ldr	r3, [r2, #92]	; 0x5c
		if (fifo > 0) return spi->RDR; 
    7d26:	tst.w	r3, #2031616	; 0x1f0000
    7d2a:	beq.n	7d24 <sd_writeData2(unsigned char const*)+0x18>
    7d2c:	ldr	r3, [r6, #116]	; 0x74
uint16_t sd_waitNotBusy(uint16_t timeoutMillis) 
{
  uint16_t t0;
  uint16_t ret;
  t0  = millis();
  while ((ret=spi_receive()) != 0XFF) 
    7d2e:	uxtb	r3, r3
    7d30:	cmp	r3, #255	; 0xff
    7d32:	beq.n	7d4c <sd_writeData2(unsigned char const*)+0x40>
    7d34:	ldr	r3, [r1, #0]
  { if (((uint16_t)millis() - t0) >= timeoutMillis) return FALSE;
    7d36:	uxth	r3, r3
    7d38:	subs	r3, r3, r0
    7d3a:	cmp.w	r3, #600	; 0x258
    7d3e:	blt.n	7d22 <sd_writeData2(unsigned char const*)+0x16>
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    7d40:	movs	r2, #21
    7d42:	ldr	r3, [pc, #68]	; (7d88 <sd_writeData2(unsigned char const*)+0x7c>)
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7d44:	ldrh	r0, [r4, #0]
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    7d46:	strh	r2, [r3, #0]
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7d48:	cbnz	r0, 7d60 <sd_writeData2(unsigned char const*)+0x54>

 fail:
  sd_setError(SD_CARD_ERROR_WRITE_MULTIPLE);
  sd_chipSelect(HIGH);
  return FALSE;
}
    7d4a:	pop	{r3, r4, r5, r6, r7, pc}
uint16_t sd_writeData2(const uint8_t* src) 
{
// unused // static long cnt=0;
  sd_chipSelect(LOW);
  if (!sd_waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
  if (!sd_writeData(WRITE_MULTIPLE_TOKEN, src)) goto fail;
    7d4c:	mov	r1, r5
    7d4e:	movs	r0, #252	; 0xfc
    7d50:	bl	7c54 <sd_writeData(unsigned char, unsigned char const*)>
    7d54:	cmp	r0, #0
    7d56:	beq.n	7d40 <sd_writeData2(unsigned char const*)+0x34>
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7d58:	ldrh	r3, [r4, #0]
    7d5a:	movs	r0, #1
    7d5c:	cbnz	r3, 7d72 <sd_writeData2(unsigned char const*)+0x66>
    7d5e:	pop	{r3, r4, r5, r6, r7, pc}
    7d60:	movs	r0, #1
    7d62:	bl	75b8 <sd_chipSelect(unsigned short) [clone .part.0]>
  return TRUE;

 fail:
  sd_setError(SD_CARD_ERROR_WRITE_MULTIPLE);
  sd_chipSelect(HIGH);
  return FALSE;
    7d66:	movs	r0, #0
    7d68:	pop	{r3, r4, r5, r6, r7, pc}
    7d6a:	movs	r0, #0
    7d6c:	bl	75b8 <sd_chipSelect(unsigned short) [clone .part.0]>
    7d70:	b.n	7d16 <sd_writeData2(unsigned char const*)+0xa>
    7d72:	bl	75b8 <sd_chipSelect(unsigned short) [clone .part.0]>
    7d76:	movs	r0, #1
    7d78:	pop	{r3, r4, r5, r6, r7, pc}
    7d7a:	nop
    7d7c:	.word	0x2000195a
    7d80:	.word	0x2000c720
    7d84:	.word	0x403a0000
    7d88:	.word	0x2000f1a8

00007d8c <sd_writeStart(unsigned long, unsigned long)>:
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint16_t sd_writeStart(uint32_t blockNumber, uint32_t eraseCount) 
{
    7d8c:	push	{r3, r4, r5, lr}
    7d8e:	mov	r4, r0
  // send pre-erase count
  if(eraseCount)
    7d90:	cbnz	r1, 7dc6 <sd_writeStart(unsigned long, unsigned long)+0x3a>
// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
uint16_t sd_getError(void) {return m_sd_errorCode;}

void sd_setType(uint16_t type) {m_sd_type=type;}
uint16_t sd_getType(void) {return m_sd_type;}
    7d92:	ldr	r3, [pc, #88]	; (7dec <sd_writeStart(unsigned long, unsigned long)+0x60>)
    goto fail;
    }
  }
  // use address if not SDHC card
  if (sd_getType() != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
  if (sd_cardCommand(CMD25, blockNumber)) {
    7d94:	movs	r0, #25
    sd_setError(SD_CARD_ERROR_ACMD23);
    goto fail;
    }
  }
  // use address if not SDHC card
  if (sd_getType() != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    7d96:	ldrh	r3, [r3, #0]
    7d98:	cmp	r3, #3
    7d9a:	it	ne
    7d9c:	lslne	r4, r4, #9
  if (sd_cardCommand(CMD25, blockNumber)) {
    7d9e:	mov	r1, r4
    7da0:	bl	7674 <sd_cardCommand(unsigned char, unsigned long)>
    7da4:	cbz	r0, 7dbc <sd_writeStart(unsigned long, unsigned long)+0x30>
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    7da6:	ldr	r3, [pc, #72]	; (7df0 <sd_writeStart(unsigned long, unsigned long)+0x64>)
    7da8:	movs	r2, #7
    7daa:	strh	r2, [r3, #0]
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7dac:	ldr	r3, [pc, #68]	; (7df4 <sd_writeStart(unsigned long, unsigned long)+0x68>)
    7dae:	ldrh	r0, [r3, #0]
    7db0:	cbz	r0, 7dc4 <sd_writeStart(unsigned long, unsigned long)+0x38>
    7db2:	movs	r0, #1
    7db4:	bl	75b8 <sd_chipSelect(unsigned short) [clone .part.0]>
  sd_chipSelect(HIGH);
  return TRUE;

 fail:
  sd_chipSelect(HIGH);
  return FALSE;
    7db8:	movs	r0, #0
    7dba:	pop	{r3, r4, r5, pc}
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7dbc:	ldr	r3, [pc, #52]	; (7df4 <sd_writeStart(unsigned long, unsigned long)+0x68>)
    7dbe:	movs	r0, #1
    7dc0:	ldrh	r3, [r3, #0]
    7dc2:	cbnz	r3, 7de4 <sd_writeStart(unsigned long, unsigned long)+0x58>
  return TRUE;

 fail:
  sd_chipSelect(HIGH);
  return FALSE;
}
    7dc4:	pop	{r3, r4, r5, pc}
    7dc6:	mov	r5, r1
  uint16_t sd_readCID(cid_t* cid) {  return sd_readRegister(CMD10, cid); }
  uint16_t sd_readCSD(csd_t* csd) {  return sd_readRegister(CMD9, csd); }

 
uint8_t sd_cardAcmd(uint8_t cmd, uint32_t arg) 
{   sd_cardCommand(CMD55, 0);
    7dc8:	movs	r0, #55	; 0x37
    7dca:	movs	r1, #0
    7dcc:	bl	7674 <sd_cardCommand(unsigned char, unsigned long)>
    return sd_cardCommand(cmd, arg);
    7dd0:	mov	r1, r5
    7dd2:	movs	r0, #23
    7dd4:	bl	7674 <sd_cardCommand(unsigned char, unsigned long)>
uint16_t sd_writeStart(uint32_t blockNumber, uint32_t eraseCount) 
{
  // send pre-erase count
  if(eraseCount)
  {
    if (sd_cardAcmd(ACMD23, eraseCount)) {
    7dd8:	cmp	r0, #0
    7dda:	beq.n	7d92 <sd_writeStart(unsigned long, unsigned long)+0x6>
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    7ddc:	ldr	r3, [pc, #16]	; (7df0 <sd_writeStart(unsigned long, unsigned long)+0x64>)
    7dde:	movs	r2, #9
    7de0:	strh	r2, [r3, #0]
    7de2:	b.n	7dac <sd_writeStart(unsigned long, unsigned long)+0x20>
    7de4:	bl	75b8 <sd_chipSelect(unsigned short) [clone .part.0]>
    7de8:	movs	r0, #1
    7dea:	pop	{r3, r4, r5, pc}
    7dec:	.word	0x2000f1ac
    7df0:	.word	0x2000f1a8
    7df4:	.word	0x2000195a

00007df8 <sd_writeStop()>:
 *
* \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint16_t sd_writeStop(void) 
{
    7df8:	push	{r3, r4, r5, r6, r7, lr}
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7dfa:	ldr	r4, [pc, #164]	; (7ea0 <sd_writeStop()+0xa8>)
    7dfc:	ldrh	r0, [r4, #0]
    7dfe:	cmp	r0, #0
    7e00:	bne.n	7e84 <sd_writeStop()+0x8c>
    7e02:	ldr	r4, [pc, #160]	; (7ea4 <sd_writeStop()+0xac>)
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7e04:	movs	r7, #255	; 0xff
    7e06:	ldr	r2, [pc, #160]	; (7ea8 <sd_writeStop()+0xb0>)
    7e08:	ldr	r5, [r4, #0]
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7e0a:	mov	r6, r2
{
  uint16_t t0;
  uint16_t ret;
  t0  = millis();
  while ((ret=spi_receive()) != 0XFF) 
  { if (((uint16_t)millis() - t0) >= timeoutMillis) return FALSE;
    7e0c:	uxth	r5, r5
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7e0e:	str	r7, [r2, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7e10:	ldr	r3, [r2, #92]	; 0x5c
    7e12:	ldr	r1, [pc, #148]	; (7ea8 <sd_writeStop()+0xb0>)
		if (fifo > 0) return spi->RDR; 
    7e14:	tst.w	r3, #2031616	; 0x1f0000
    7e18:	beq.n	7e10 <sd_writeStop()+0x18>
    7e1a:	ldr	r3, [r6, #116]	; 0x74
uint16_t sd_waitNotBusy(uint16_t timeoutMillis) 
{
  uint16_t t0;
  uint16_t ret;
  t0  = millis();
  while ((ret=spi_receive()) != 0XFF) 
    7e1c:	uxtb	r3, r3
    7e1e:	cmp	r3, #255	; 0xff
    7e20:	beq.n	7e38 <sd_writeStop()+0x40>
    7e22:	ldr	r3, [r4, #0]
  { if (((uint16_t)millis() - t0) >= timeoutMillis) return FALSE;
    7e24:	uxth	r3, r3
    7e26:	subs	r3, r3, r5
    7e28:	cmp.w	r3, #600	; 0x258
    7e2c:	blt.n	7e0e <sd_writeStop()+0x16>
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    7e2e:	ldr	r3, [pc, #124]	; (7eac <sd_writeStop()+0xb4>)
    7e30:	movs	r2, #18
    7e32:	strh	r2, [r3, #0]
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7e34:	cbnz	r0, 7e7a <sd_writeStop()+0x82>

 fail:
  sd_setError(SD_CARD_ERROR_STOP_TRAN);
  sd_chipSelect(HIGH);
  return FALSE;
}
    7e36:	pop	{r3, r4, r5, r6, r7, pc}
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7e38:	movs	r3, #253	; 0xfd
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7e3a:	mov	r5, r1
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7e3c:	str	r3, [r1, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7e3e:	ldr	r3, [r5, #92]	; 0x5c
    7e40:	ldr	r2, [pc, #100]	; (7ea8 <sd_writeStop()+0xb0>)
		if (fifo > 0) return spi->RDR; 
    7e42:	tst.w	r3, #2031616	; 0x1f0000
    7e46:	beq.n	7e3e <sd_writeStop()+0x46>
    7e48:	ldr	r3, [r2, #116]	; 0x74
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7e4a:	movs	r6, #255	; 0xff
    7e4c:	ldr	r1, [r4, #0]
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7e4e:	mov	r5, r2
{
  uint16_t t0;
  uint16_t ret;
  t0  = millis();
  while ((ret=spi_receive()) != 0XFF) 
  { if (((uint16_t)millis() - t0) >= timeoutMillis) return FALSE;
    7e50:	uxth	r1, r1
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7e52:	str	r6, [r2, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7e54:	ldr	r3, [r2, #92]	; 0x5c
		if (fifo > 0) return spi->RDR; 
    7e56:	tst.w	r3, #2031616	; 0x1f0000
    7e5a:	beq.n	7e54 <sd_writeStop()+0x5c>
    7e5c:	ldr	r3, [r5, #116]	; 0x74
uint16_t sd_waitNotBusy(uint16_t timeoutMillis) 
{
  uint16_t t0;
  uint16_t ret;
  t0  = millis();
  while ((ret=spi_receive()) != 0XFF) 
    7e5e:	uxtb	r3, r3
    7e60:	cmp	r3, #255	; 0xff
    7e62:	beq.n	7e8e <sd_writeStop()+0x96>
    7e64:	ldr	r3, [r4, #0]
  { if (((uint16_t)millis() - t0) >= timeoutMillis) return FALSE;
    7e66:	uxth	r3, r3
    7e68:	subs	r3, r3, r1
    7e6a:	cmp.w	r3, #600	; 0x258
    7e6e:	blt.n	7e52 <sd_writeStop()+0x5a>
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    7e70:	ldr	r3, [pc, #56]	; (7eac <sd_writeStop()+0xb4>)
    7e72:	movs	r2, #18
    7e74:	strh	r2, [r3, #0]
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7e76:	cmp	r0, #0
    7e78:	beq.n	7e36 <sd_writeStop()+0x3e>
    7e7a:	movs	r0, #1
    7e7c:	bl	75b8 <sd_chipSelect(unsigned short) [clone .part.0]>
  return TRUE;

 fail:
  sd_setError(SD_CARD_ERROR_STOP_TRAN);
  sd_chipSelect(HIGH);
  return FALSE;
    7e80:	movs	r0, #0
    7e82:	pop	{r3, r4, r5, r6, r7, pc}
    7e84:	movs	r0, #0
    7e86:	bl	75b8 <sd_chipSelect(unsigned short) [clone .part.0]>
    7e8a:	ldrh	r0, [r4, #0]
    7e8c:	b.n	7e02 <sd_writeStop()+0xa>
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7e8e:	cbnz	r0, 7e94 <sd_writeStop()+0x9c>
  sd_chipSelect(LOW);
  if (!sd_waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
  spi_send(STOP_TRAN_TOKEN);
  if (!sd_waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
  sd_chipSelect(HIGH);
  return TRUE;
    7e90:	movs	r0, #1
    7e92:	pop	{r3, r4, r5, r6, r7, pc}
    7e94:	movs	r0, #1
    7e96:	bl	75b8 <sd_chipSelect(unsigned short) [clone .part.0]>
    7e9a:	movs	r0, #1
    7e9c:	pop	{r3, r4, r5, r6, r7, pc}
    7e9e:	nop
    7ea0:	.word	0x2000195a
    7ea4:	.word	0x2000c720
    7ea8:	.word	0x403a0000
    7eac:	.word	0x2000f1a8

00007eb0 <SPI_disk_write(unsigned char const*, unsigned long, unsigned int)>:
	}

    return res;
}
DRESULT SPI_disk_write(const BYTE *buff, DWORD sector, UINT count)
{
    7eb0:	push	{r3, r4, r5, r6, r7, lr}
    7eb2:	mov	r3, r1
    7eb4:	mov	r4, r0
    DRESULT res = RES_OK;
    if(!sd_writeStart(sector,count)) res = RES_WRITEERROR;
    7eb6:	mov	r1, r2
	}

    return res;
}
DRESULT SPI_disk_write(const BYTE *buff, DWORD sector, UINT count)
{
    7eb8:	mov	r7, r2
    DRESULT res = RES_OK;
    if(!sd_writeStart(sector,count)) res = RES_WRITEERROR;
    7eba:	mov	r0, r3
    7ebc:	bl	7d8c <sd_writeStart(unsigned long, unsigned long)>
    7ec0:	cmp	r0, #0
    7ec2:	ite	ne
    7ec4:	movne	r6, #0
    7ec6:	moveq	r6, #7
	
    for(UINT ii=0; ii<count;ii++)
    7ec8:	cbz	r7, 7ee2 <SPI_disk_write(unsigned char const*, unsigned long, unsigned int)+0x32>
    7eca:	movs	r5, #0
    {
      if(!sd_writeData2(buff)) res = RES_WRITEERROR;
    7ecc:	mov	r0, r4
DRESULT SPI_disk_write(const BYTE *buff, DWORD sector, UINT count)
{
    DRESULT res = RES_OK;
    if(!sd_writeStart(sector,count)) res = RES_WRITEERROR;
	
    for(UINT ii=0; ii<count;ii++)
    7ece:	adds	r5, #1
    {
      if(!sd_writeData2(buff)) res = RES_WRITEERROR;
    7ed0:	bl	7d0c <sd_writeData2(unsigned char const*)>
    7ed4:	cmp	r0, #0
      sector++;
      buff += 512;    
    7ed6:	add.w	r4, r4, #512	; 0x200
    DRESULT res = RES_OK;
    if(!sd_writeStart(sector,count)) res = RES_WRITEERROR;
	
    for(UINT ii=0; ii<count;ii++)
    {
      if(!sd_writeData2(buff)) res = RES_WRITEERROR;
    7eda:	it	eq
    7edc:	moveq	r6, #7
DRESULT SPI_disk_write(const BYTE *buff, DWORD sector, UINT count)
{
    DRESULT res = RES_OK;
    if(!sd_writeStart(sector,count)) res = RES_WRITEERROR;
	
    for(UINT ii=0; ii<count;ii++)
    7ede:	cmp	r7, r5
    7ee0:	bne.n	7ecc <SPI_disk_write(unsigned char const*, unsigned long, unsigned int)+0x1c>
    {
      if(!sd_writeData2(buff)) res = RES_WRITEERROR;
      sector++;
      buff += 512;    
    }
	if(!sd_writeStop()) res = RES_WRITEERROR;
    7ee2:	bl	7df8 <sd_writeStop()>
    7ee6:	cmp	r0, #0

    return res;
}
    7ee8:	ite	ne
    7eea:	movne	r0, r6
    7eec:	moveq	r0, #7
    7eee:	pop	{r3, r4, r5, r6, r7, pc}

00007ef0 <spi_begin(unsigned long, unsigned char, unsigned char)>:

	  spi->CR = LPSPI_CR_RST; 
	} 

	void spi_begin(uint32_t clck, uint8_t bitOrder, uint8_t dataMode)
	{
    7ef0:	push	{r4, r5, r6, r7, lr}
		const uint32_t clk_sel[4] = {664615384,  // PLL3 PFD1
				   720000000,  // PLL3 PFD0
				   528000000,  // PLL2
				   396000000}; // PLL2 PFD2       
    7ef2:	ldr	r3, [pc, #148]	; (7f88 <spi_begin(unsigned long, unsigned char, unsigned char)+0x98>)

	  spi->CR = LPSPI_CR_RST; 
	} 

	void spi_begin(uint32_t clck, uint8_t bitOrder, uint8_t dataMode)
	{
    7ef4:	sub	sp, #20
    7ef6:	mov	r6, r0
				   396000000}; // PLL2 PFD2       
		uint32_t cbcmr = CCM_CBCMR;
		uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
		
		uint32_t d, div;    
		if (clck == 0) clck =1;
    7ef8:	cmp	r0, #0
	void spi_begin(uint32_t clck, uint8_t bitOrder, uint8_t dataMode)
	{
		const uint32_t clk_sel[4] = {664615384,  // PLL3 PFD1
				   720000000,  // PLL3 PFD0
				   528000000,  // PLL2
				   396000000}; // PLL2 PFD2       
    7efa:	add.w	lr, sp, #16

	  spi->CR = LPSPI_CR_RST; 
	} 

	void spi_begin(uint32_t clck, uint8_t bitOrder, uint8_t dataMode)
	{
    7efe:	mov	r5, r1
    7f00:	mov	r4, r2
		const uint32_t clk_sel[4] = {664615384,  // PLL3 PFD1
				   720000000,  // PLL3 PFD0
				   528000000,  // PLL2
				   396000000}; // PLL2 PFD2       
		uint32_t cbcmr = CCM_CBCMR;
    7f02:	ldr	r7, [pc, #136]	; (7f8c <spi_begin(unsigned long, unsigned char, unsigned char)+0x9c>)
		uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
		
		uint32_t d, div;    
		if (clck == 0) clck =1;
    7f04:	it	eq
    7f06:	moveq	r6, #1
	void spi_begin(uint32_t clck, uint8_t bitOrder, uint8_t dataMode)
	{
		const uint32_t clk_sel[4] = {664615384,  // PLL3 PFD1
				   720000000,  // PLL3 PFD0
				   528000000,  // PLL2
				   396000000}; // PLL2 PFD2       
    7f08:	ldmia	r3, {r0, r1, r2, r3}
    7f0a:	stmdb	lr, {r0, r1, r2, r3}
		uint32_t cbcmr = CCM_CBCMR;
    7f0e:	ldr	r3, [r7, #24]
		uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    7f10:	ubfx	r2, r3, #4, #2
    7f14:	ubfx	r3, r3, #26, #3
    7f18:	add.w	r2, lr, r2, lsl #2
    7f1c:	adds	r3, #1
    7f1e:	ldr.w	r2, [r2, #-16]
    7f22:	udiv	r3, r2, r3
		
		uint32_t d, div;    
		if (clck == 0) clck =1;
		d= clkhz/clck;
    7f26:	udiv	r2, r3, r6
		if (d && clkhz/d > clck) d++;
    7f2a:	cbz	r2, 7f40 <spi_begin(unsigned long, unsigned char, unsigned char)+0x50>
    7f2c:	udiv	r3, r3, r2
    7f30:	cmp	r6, r3
    7f32:	it	cc
    7f34:	addcc	r2, #1
		if (d > 257) d= 257;  // max div
    7f36:	cmp.w	r2, #258	; 0x102
    7f3a:	bcc.n	7f74 <spi_begin(unsigned long, unsigned char, unsigned char)+0x84>
    7f3c:	movw	r2, #32767	; 0x7fff
		  div = d-2;
		} else {
		  div =0;
		}
		uint32_t ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);
		uint32_t tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    7f40:	cmp	r5, #0
    7f42:	ldr	r3, [pc, #76]	; (7f90 <spi_begin(unsigned long, unsigned char, unsigned char)+0xa0>)

		// PCS to SCK Delay Prescaler into the After SCK Delay Prescaler  
		if (dataMode & 0x04) tcr |= LPSPI_TCR_CPHA; 


	  spi->CR = 0; 
    7f44:	mov.w	r5, #0
		  div = d-2;
		} else {
		  div =0;
		}
		uint32_t ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);
		uint32_t tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    7f48:	it	ne
    7f4a:	movne	r3, #7

		// handle LSB setup 
		if (bitOrder == LSBFIRST) tcr |= LPSPI_TCR_LSBF;

		// Handle Data Mode
		if (dataMode & 0x08) tcr |= LPSPI_TCR_CPOL;
    7f4c:	lsls	r0, r4, #28
	  spi->CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE; 
	//  spi->CCR = LPSPI_CCR_SCKDIV(4); 
	//  spi->TCR = LPSPI_TCR_FRAMESZ(7); 
	  spi->CCR = ccr; 
	  spi->TCR = tcr; 
	  spi->CR = LPSPI_CR_MEN; 
    7f4e:	mov.w	r0, #1

		// handle LSB setup 
		if (bitOrder == LSBFIRST) tcr |= LPSPI_TCR_LSBF;

		// Handle Data Mode
		if (dataMode & 0x08) tcr |= LPSPI_TCR_CPOL;
    7f52:	it	mi
    7f54:	orrmi.w	r3, r3, #2147483648	; 0x80000000

		// PCS to SCK Delay Prescaler into the After SCK Delay Prescaler  
		if (dataMode & 0x04) tcr |= LPSPI_TCR_CPHA; 
    7f58:	lsls	r1, r4, #29


	  spi->CR = 0; 
    7f5a:	ldr	r1, [pc, #56]	; (7f94 <spi_begin(unsigned long, unsigned char, unsigned char)+0xa4>)
	  spi->CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE; 
    7f5c:	mov.w	r4, #3

		// Handle Data Mode
		if (dataMode & 0x08) tcr |= LPSPI_TCR_CPOL;

		// PCS to SCK Delay Prescaler into the After SCK Delay Prescaler  
		if (dataMode & 0x04) tcr |= LPSPI_TCR_CPHA; 
    7f60:	it	mi
    7f62:	orrmi.w	r3, r3, #1073741824	; 0x40000000


	  spi->CR = 0; 
    7f66:	str	r5, [r1, #16]
	  spi->CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE; 
    7f68:	str	r4, [r1, #36]	; 0x24
	//  spi->CCR = LPSPI_CCR_SCKDIV(4); 
	//  spi->TCR = LPSPI_TCR_FRAMESZ(7); 
	  spi->CCR = ccr; 
    7f6a:	str	r2, [r1, #64]	; 0x40
	  spi->TCR = tcr; 
    7f6c:	str	r3, [r1, #96]	; 0x60
	  spi->CR = LPSPI_CR_MEN; 
    7f6e:	str	r0, [r1, #16]
	}
    7f70:	add	sp, #20
    7f72:	pop	{r4, r5, r6, r7, pc}
		uint32_t d, div;    
		if (clck == 0) clck =1;
		d= clkhz/clck;
		if (d && clkhz/d > clck) d++;
		if (d > 257) d= 257;  // max div
		if (d > 2) {
    7f74:	cmp	r2, #2
    7f76:	it	ls
    7f78:	movls	r2, #0
    7f7a:	bls.n	7f40 <spi_begin(unsigned long, unsigned char, unsigned char)+0x50>
    7f7c:	subs	r2, #2
    7f7e:	lsrs	r3, r2, #1
    7f80:	orr.w	r2, r2, r3, lsl #8
    7f84:	b.n	7f40 <spi_begin(unsigned long, unsigned char, unsigned char)+0x50>
    7f86:	nop
    7f88:	.word	0x200003f0
    7f8c:	.word	0x400fc000
    7f90:	.word	0x00800007
    7f94:	.word	0x403a0000

00007f98 <spi_setup(unsigned long)>:
	void spi_configPorts(int iconf) 
	{ return;
	}

	uint32_t spi_setup(uint32_t clk)
	{	spi_init() ;
    7f98:	push	{r3, r4, r5, r6, r7, lr}
	void spi_init(void) 
	{ 
	  // CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz 
	  // CBCMR[LPSPI_PODF] - div4 = 132 MHz 

	  CCM_CCGR1 &= ~CCM_CCGR1_LPSPIx(ISPI,CCM_CCGR_ON); 
    7f9a:	ldr	r3, [pc, #68]	; (7fe0 <spi_setup(unsigned long)+0x48>)

	  CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) | 
								 CCM_CBCMR_LPSPI_PODF(6) | CCM_CBCMR_LPSPI_CLK_SEL(2); // pg 714 

	  uint32_t fastio = IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(3); 
	  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_01 = fastio; 
    7f9c:	movs	r5, #249	; 0xf9
	  // CBCMR[LPSPI_PODF] - div4 = 132 MHz 

	  CCM_CCGR1 &= ~CCM_CCGR1_LPSPIx(ISPI,CCM_CCGR_ON); 

	  CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) | 
								 CCM_CBCMR_LPSPI_PODF(6) | CCM_CBCMR_LPSPI_CLK_SEL(2); // pg 714 
    7f9e:	ldr	r1, [pc, #68]	; (7fe4 <spi_setup(unsigned long)+0x4c>)
	  
//	  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_01 = 3 | 0x10; // SDI  //Pin12
//	  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_02 = 3 | 0x10; // SDO  //Pin11
//	  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 3 | 0x10; // SCK  //Pin13

	  spi->CR = LPSPI_CR_RST; 
    7fa0:	mov.w	lr, #2
	void spi_init(void) 
	{ 
	  // CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz 
	  // CBCMR[LPSPI_PODF] - div4 = 132 MHz 

	  CCM_CCGR1 &= ~CCM_CCGR1_LPSPIx(ISPI,CCM_CCGR_ON); 
    7fa4:	ldr	r7, [r3, #108]	; 0x6c
	{ return;
	}

	uint32_t spi_setup(uint32_t clk)
	{	spi_init() ;
		spi_begin(clk, MSBFIRST, SPI_MODE0);
    7fa6:	movs	r2, #0
	  // CBCMR[LPSPI_PODF] - div4 = 132 MHz 

	  CCM_CCGR1 &= ~CCM_CCGR1_LPSPIx(ISPI,CCM_CCGR_ON); 

	  CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) | 
								 CCM_CBCMR_LPSPI_PODF(6) | CCM_CBCMR_LPSPI_CLK_SEL(2); // pg 714 
    7fa8:	ldr	r6, [pc, #60]	; (7fe8 <spi_setup(unsigned long)+0x50>)
	void spi_init(void) 
	{ 
	  // CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz 
	  // CBCMR[LPSPI_PODF] - div4 = 132 MHz 

	  CCM_CCGR1 &= ~CCM_CCGR1_LPSPIx(ISPI,CCM_CCGR_ON); 
    7faa:	bic.w	r7, r7, #192	; 0xc0

	  CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) | 
								 CCM_CBCMR_LPSPI_PODF(6) | CCM_CBCMR_LPSPI_CLK_SEL(2); // pg 714 

	  uint32_t fastio = IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(3); 
	  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_01 = fastio; 
    7fae:	ldr	r4, [pc, #60]	; (7fec <spi_setup(unsigned long)+0x54>)
	void spi_init(void) 
	{ 
	  // CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz 
	  // CBCMR[LPSPI_PODF] - div4 = 132 MHz 

	  CCM_CCGR1 &= ~CCM_CCGR1_LPSPIx(ISPI,CCM_CCGR_ON); 
    7fb0:	str	r7, [r3, #108]	; 0x6c

	  CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) | 
    7fb2:	ldr	r7, [r3, #24]
								 CCM_CBCMR_LPSPI_PODF(6) | CCM_CBCMR_LPSPI_CLK_SEL(2); // pg 714 
    7fb4:	ands	r1, r7
	  
//	  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_01 = 3 | 0x10; // SDI  //Pin12
//	  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_02 = 3 | 0x10; // SDO  //Pin11
//	  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 3 | 0x10; // SCK  //Pin13

	  spi->CR = LPSPI_CR_RST; 
    7fb6:	ldr	r7, [pc, #56]	; (7ff0 <spi_setup(unsigned long)+0x58>)
	  // CBCMR[LPSPI_PODF] - div4 = 132 MHz 

	  CCM_CCGR1 &= ~CCM_CCGR1_LPSPIx(ISPI,CCM_CCGR_ON); 

	  CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) | 
								 CCM_CBCMR_LPSPI_PODF(6) | CCM_CBCMR_LPSPI_CLK_SEL(2); // pg 714 
    7fb8:	orrs	r6, r1
	{ return;
	}

	uint32_t spi_setup(uint32_t clk)
	{	spi_init() ;
		spi_begin(clk, MSBFIRST, SPI_MODE0);
    7fba:	movs	r1, #1
	  // CBCMR[LPSPI_PODF] - div4 = 132 MHz 

	  CCM_CCGR1 &= ~CCM_CCGR1_LPSPIx(ISPI,CCM_CCGR_ON); 

	  CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) | 
								 CCM_CBCMR_LPSPI_PODF(6) | CCM_CBCMR_LPSPI_CLK_SEL(2); // pg 714 
    7fbc:	str	r6, [r3, #24]

	  uint32_t fastio = IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(3); 
	  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_01 = fastio; 
    7fbe:	str.w	r5, [r4, #816]	; 0x330
	  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_02 = fastio; 
    7fc2:	str.w	r5, [r4, #820]	; 0x334
	  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = fastio; 
    7fc6:	str.w	r5, [r4, #824]	; 0x338

	  CCM_CCGR1 |= CCM_CCGR1_LPSPIx(ISPI, CCM_CCGR_ON); 
    7fca:	ldr	r4, [r3, #108]	; 0x6c
    7fcc:	orr.w	r4, r4, #192	; 0xc0
    7fd0:	str	r4, [r3, #108]	; 0x6c
	  
//	  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_01 = 3 | 0x10; // SDI  //Pin12
//	  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_02 = 3 | 0x10; // SDO  //Pin11
//	  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 3 | 0x10; // SCK  //Pin13

	  spi->CR = LPSPI_CR_RST; 
    7fd2:	str.w	lr, [r7, #16]
	{ return;
	}

	uint32_t spi_setup(uint32_t clk)
	{	spi_init() ;
		spi_begin(clk, MSBFIRST, SPI_MODE0);
    7fd6:	bl	7ef0 <spi_begin(unsigned long, unsigned char, unsigned char)>
		return 0;
	}
    7fda:	movs	r0, #0
    7fdc:	pop	{r3, r4, r5, r6, r7, pc}
    7fde:	nop
    7fe0:	.word	0x400fc000
    7fe4:	.word	0xe3ffffcf
    7fe8:	.word	0x18000020
    7fec:	.word	0x401f8000
    7ff0:	.word	0x403a0000

00007ff4 <sd_init()>:
  #endif  // USE_SD_CCITT
#endif  // USE_SD_SRC

//***************************************************************************/
uint16_t sd_init(void)
{  int ii;
    7ff4:	push	{r4, lr}
  pinMode(m_chipSelectPin, OUTPUT);
    7ff6:	ldr	r4, [pc, #124]	; (8074 <sd_init()+0x80>)
    7ff8:	movs	r1, #1
    7ffa:	ldrb	r0, [r4, #0]
    7ffc:	bl	9a78 <pinMode>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    8000:	ldrh	r1, [r4, #0]
    8002:	ldr	r0, [pc, #116]	; (8078 <sd_init()+0x84>)
    8004:	bl	a440 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    8008:	ldr	r0, [pc, #108]	; (8078 <sd_init()+0x84>)
    800a:	bl	a370 <Print::println()>
//  sd_setChipSelect(cs_pin);
  Serial.println(m_chipSelectPin);
  spi_configPorts(1); // 1 is PJRC Audio

  spi_setup(100);
    800e:	movs	r0, #100	; 0x64
    8010:	bl	7f98 <spi_setup(unsigned long)>
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    8014:	ldr	r3, [pc, #100]	; (807c <sd_init()+0x88>)
    8016:	ldrh	r3, [r3, #0]
    8018:	cbz	r3, 8020 <sd_init()+0x2c>
    801a:	movs	r0, #1
    801c:	bl	75b8 <sd_chipSelect(unsigned short) [clone .part.0]>
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    8020:	ldr	r2, [pc, #92]	; (8080 <sd_init()+0x8c>)
  #endif  // USE_SD_CCITT
#endif  // USE_SD_SRC

//***************************************************************************/
uint16_t sd_init(void)
{  int ii;
    8022:	mov.w	r4, #1000	; 0x3e8
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    8026:	movs	r0, #255	; 0xff
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    8028:	mov	r1, r2
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    802a:	str	r0, [r2, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    802c:	ldr	r3, [r2, #92]	; 0x5c
		if (fifo > 0) return spi->RDR; 
    802e:	tst.w	r3, #2031616	; 0x1f0000
    8032:	beq.n	802c <sd_init()+0x38>

  spi_setup(100);

  sd_chipSelect(HIGH);
  // must supply min of 74 clock cycles with CS high.
  for (ii = 0; ii < 1000; ii++) spi_send(0XFF);
    8034:	subs	r4, #1
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
		if (fifo > 0) return spi->RDR; 
    8036:	ldr	r3, [r1, #116]	; 0x74

  spi_setup(100);

  sd_chipSelect(HIGH);
  // must supply min of 74 clock cycles with CS high.
  for (ii = 0; ii < 1000; ii++) spi_send(0XFF);
    8038:	bne.n	802a <sd_init()+0x36>

  if(!sd_connect())
    803a:	bl	78d8 <sd_connect()>
    803e:	cbz	r0, 8064 <sd_init()+0x70>
// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
uint16_t sd_getError(void) {return m_sd_errorCode;}

void sd_setType(uint16_t type) {m_sd_type=type;}
uint16_t sd_getType(void) {return m_sd_type;}
    8040:	ldr	r3, [pc, #64]	; (8084 <sd_init()+0x90>)
  {  
#ifdef DO_DEBUG
     int32_t sd_size,sd_type, bb[4]; 
     bb[0]=bb[1]=bb[2]=bb[3]=0;
     sd_type=sd_getType();
     Serial.printf("Card Type: %d\n",sd_type);
    8042:	ldr	r1, [pc, #68]	; (8088 <sd_init()+0x94>)
    8044:	ldrh	r2, [r3, #0]
    8046:	ldr	r0, [pc, #48]	; (8078 <sd_init()+0x84>)
    8048:	bl	a3a0 <Print::printf(char const*, ...)>
     sd_size=sd_cardSize();
    804c:	bl	7a80 <sd_cardSize()>
     Serial.printf("Card Size: %d\n",sd_size);
    8050:	ldr	r1, [pc, #56]	; (808c <sd_init()+0x98>)
    8052:	mov	r2, r0
    8054:	ldr	r0, [pc, #32]	; (8078 <sd_init()+0x84>)
    8056:	bl	a3a0 <Print::printf(char const*, ...)>
#endif
  }
  
  #define MEG (1000*1000)
  spi_setup(30*MEG);
    805a:	ldr	r0, [pc, #52]	; (8090 <sd_init()+0x9c>)
    805c:	bl	7f98 <spi_setup(unsigned long)>
    8060:	movs	r0, #1

  return true;
}
    8062:	pop	{r4, pc}
  for (ii = 0; ii < 1000; ii++) spi_send(0XFF);

  if(!sd_connect())
  {  // uint32_t errorcode=sd_getError();
//     printDebug("connect:", errorcode);
	Serial.printf("Connect %d\n",2);
    8064:	movs	r2, #2
    8066:	ldr	r1, [pc, #44]	; (8094 <sd_init()+0xa0>)
    8068:	ldr	r0, [pc, #12]	; (8078 <sd_init()+0x84>)
    806a:	bl	a3a0 <Print::printf(char const*, ...)>
    return false;
    806e:	mov	r0, r4
    8070:	pop	{r4, pc}
    8072:	nop
    8074:	.word	0x20001958
    8078:	.word	0x20001388
    807c:	.word	0x2000195a
    8080:	.word	0x403a0000
    8084:	.word	0x2000f1ac
    8088:	.word	0x20000d8c
    808c:	.word	0x20000d9c
    8090:	.word	0x01c9c380
    8094:	.word	0x20000d80

00008098 <SPI_disk_initialize()>:
DSTATUS SPI_disk_status()
{
    return 0;
}
DSTATUS SPI_disk_initialize(void)
{
    8098:	push	{r3, lr}
    if(!sd_init()) return STA_NOINIT;
    809a:	bl	7ff4 <sd_init()>
    
    return 0;
}
    809e:	clz	r0, r0
    80a2:	lsrs	r0, r0, #5
    80a4:	pop	{r3, pc}
    80a6:	nop

000080a8 <MSC_disk_initialize>:
	}

	int MSC_ioctl(BYTE cmd, BYTE *buff) {return 0;}
#else
	int MSC_disk_status() {return STA_NOINIT;}
	int MSC_disk_initialize() {return STA_NOINIT;}
    80a8:	movs	r0, #1
    80aa:	bx	lr

000080ac <MSC_disk_read>:
    80ac:	movs	r0, #1
    80ae:	bx	lr

000080b0 <MSC_disk_write>:
	int MSC_disk_read(BYTE *buff, DWORD sector, UINT count) {return STA_NOINIT;}
	int MSC_disk_write(const BYTE *buff, DWORD sector, UINT count) {return STA_NOINIT;}
    80b0:	movs	r0, #1
    80b2:	bx	lr

000080b4 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    80b4:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    80b6:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    80ba:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    80be:	bne.n	819c <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    80c0:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    80c2:	bcc.n	8148 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    80c4:	ldr.w	r3, [r1], #4
    80c8:	str.w	r3, [r0], #4
    80cc:	ldr.w	r3, [r1], #4
    80d0:	str.w	r3, [r0], #4
    80d4:	ldr.w	r3, [r1], #4
    80d8:	str.w	r3, [r0], #4
    80dc:	ldr.w	r3, [r1], #4
    80e0:	str.w	r3, [r0], #4
    80e4:	ldr.w	r3, [r1], #4
    80e8:	str.w	r3, [r0], #4
    80ec:	ldr.w	r3, [r1], #4
    80f0:	str.w	r3, [r0], #4
    80f4:	ldr.w	r3, [r1], #4
    80f8:	str.w	r3, [r0], #4
    80fc:	ldr.w	r3, [r1], #4
    8100:	str.w	r3, [r0], #4
    8104:	ldr.w	r3, [r1], #4
    8108:	str.w	r3, [r0], #4
    810c:	ldr.w	r3, [r1], #4
    8110:	str.w	r3, [r0], #4
    8114:	ldr.w	r3, [r1], #4
    8118:	str.w	r3, [r0], #4
    811c:	ldr.w	r3, [r1], #4
    8120:	str.w	r3, [r0], #4
    8124:	ldr.w	r3, [r1], #4
    8128:	str.w	r3, [r0], #4
    812c:	ldr.w	r3, [r1], #4
    8130:	str.w	r3, [r0], #4
    8134:	ldr.w	r3, [r1], #4
    8138:	str.w	r3, [r0], #4
    813c:	ldr.w	r3, [r1], #4
    8140:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    8144:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    8146:	bcs.n	80c4 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    8148:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    814a:	bcc.n	8170 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    814c:	ldr.w	r3, [r1], #4
    8150:	str.w	r3, [r0], #4
    8154:	ldr.w	r3, [r1], #4
    8158:	str.w	r3, [r0], #4
    815c:	ldr.w	r3, [r1], #4
    8160:	str.w	r3, [r0], #4
    8164:	ldr.w	r3, [r1], #4
    8168:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    816c:	subs	r2, #16
	bhs	.Lmid_block_loop
    816e:	bcs.n	814c <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    8170:	adds	r2, #12
	blo	.Lcopy_less_than_4
    8172:	bcc.n	8180 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    8174:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    8178:	str.w	r3, [r0], #4
	subs	r2, #4
    817c:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    817e:	bcs.n	8174 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    8180:	adds	r2, #4
	beq	.Ldone
    8182:	beq.n	8196 <memcpy+0xe2>

	lsls	r2, r2, #31
    8184:	lsls	r2, r2, #31
	itt ne
    8186:	itt	ne
	ldrbne  r3, [r1], #1
    8188:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    818c:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    8190:	bcc.n	8196 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    8192:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    8194:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    8196:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    8198:	bx	lr
    819a:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    819c:	cmp	r2, #8
	blo	.Lbyte_copy
    819e:	bcc.n	81c8 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    81a0:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    81a2:	beq.n	80c0 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    81a4:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    81a8:	beq.n	80c0 <memcpy+0xc>

	rsb	r3, #4
    81aa:	rsb	r3, r3, #4
	subs	r2, r3
    81ae:	subs	r2, r2, r3

	lsls    r3, r3, #31
    81b0:	lsls	r3, r3, #31
	itt ne
    81b2:	itt	ne
	ldrbne  r3, [r1], #1
    81b4:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    81b8:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    81bc:	bcc.n	80c0 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    81be:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    81c2:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    81c6:	b.n	80c0 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    81c8:	subs	r2, #4
	blo	.Lcopy_less_than_4
    81ca:	bcc.n	8180 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    81cc:	subs	r2, #1
	ldrb    r3, [r1], #1
    81ce:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    81d2:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    81d6:	bcs.n	81cc <memcpy+0x118>

	ldrb	r3, [r1]
    81d8:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    81da:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    81dc:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    81de:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    81e0:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    81e2:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    81e4:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    81e6:	bx	lr

000081e8 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    81e8:	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    81ea:	ldr	r1, [pc, #80]	; (823c <rx_queue_transfer+0x54>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    81ec:	mov.w	r7, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    81f0:	ldr	r5, [pc, #76]	; (8240 <rx_queue_transfer+0x58>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    81f2:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    81f4:	add.w	r4, r1, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    81f8:	ldr	r6, [pc, #72]	; (8244 <rx_queue_transfer+0x5c>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    81fa:	ldr	r2, [pc, #76]	; (8248 <rx_queue_transfer+0x60>)
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    81fc:	add.w	r5, r5, r0, lsl #5
    8200:	mov	r1, r4
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    8202:	str	r7, [r2, #0]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    8204:	mov	r0, r5
    8206:	ldrh	r2, [r6, #0]
    8208:	bl	91d0 <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    820c:	ldrh	r1, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    820e:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    8212:	add	r1, r4
	asm volatile("": : :"memory");
	asm("dsb");
    8214:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    8218:	ldr	r2, [pc, #48]	; (824c <rx_queue_transfer+0x64>)
    821a:	str	r3, [r2, #0]
		location += 32;
    821c:	adds	r3, #32
	} while (location < end_addr);
    821e:	cmp	r1, r3
    8220:	bhi.n	821a <rx_queue_transfer+0x32>
	asm("dsb");
    8222:	dsb	sy
	asm("isb");
    8226:	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    822a:	movs	r0, #3
    822c:	mov	r1, r5
    822e:	bl	9228 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    8232:	ldr	r3, [pc, #28]	; (8250 <rx_queue_transfer+0x68>)
    8234:	mov.w	r2, #131072	; 0x20000
    8238:	str	r2, [r3, #0]
    823a:	pop	{r3, r4, r5, r6, r7, pc}
    823c:	.word	0x20200000
    8240:	.word	0x20004300
    8244:	.word	0x2000f1b4
    8248:	.word	0xe000e18c
    824c:	.word	0xe000ef5c
    8250:	.word	0xe000e10c

00008254 <rx_event>:
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    8254:	ldr	r2, [pc, #144]	; (82e8 <rx_event+0x94>)
    8256:	ldr	r3, [r0, #4]
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
    8258:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    825c:	ubfx	r3, r3, #16, #15
    8260:	ldrh	r4, [r2, #0]
	int i = t->callback_param;
    8262:	ldr	r5, [r0, #28]
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    8264:	subs	r4, r4, r3
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    8266:	cmp	r4, #0
    8268:	ble.n	82dc <rx_event+0x88>
		// received a packet with data
		uint32_t head = rx_head;
    826a:	ldr	r1, [pc, #128]	; (82ec <rx_event+0x98>)
		if (head != rx_tail) {
    826c:	ldr	r2, [pc, #128]	; (82f0 <rx_event+0x9c>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    826e:	ldrb	r3, [r1, #0]
		if (head != rx_tail) {
    8270:	ldrb	r2, [r2, #0]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    8272:	uxtb	r3, r3
		if (head != rx_tail) {
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    8274:	ldr	r0, [pc, #124]	; (82f4 <rx_event+0xa0>)
			uint32_t count = rx_count[ii];
    8276:	ldr	r6, [pc, #128]	; (82f8 <rx_event+0xa4>)
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
		if (head != rx_tail) {
    8278:	cmp	r3, r2
    827a:	beq.n	828c <rx_event+0x38>
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    827c:	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    8280:	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    8284:	rsb	r2, r7, #512	; 0x200
    8288:	cmp	r4, r2
    828a:	bls.n	82b2 <rx_event+0x5e>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    828c:	adds	r3, #1
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
    828e:	movs	r2, #0
    8290:	ldr	r7, [pc, #104]	; (82fc <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    8292:	cmp	r3, #8
				// TODO: trigger serialEvent
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
    8294:	strh.w	r4, [r6, r5, lsl #1]
		rx_index[i] = 0;
    8298:	strh.w	r2, [r7, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
    829c:	ldr	r6, [pc, #96]	; (8300 <rx_event+0xac>)
    829e:	ite	ls
    82a0:	uxtbls	r2, r3
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    82a2:	movhi	r3, r2
		rx_list[head] = i;
		rx_head = head;
    82a4:	strb	r2, [r1, #0]
		rx_available += len;
    82a6:	ldr	r2, [r6, #0]
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
    82a8:	strb	r5, [r0, r3]
		rx_head = head;
		rx_available += len;
    82aa:	add	r4, r2
    82ac:	str	r4, [r6, #0]
    82ae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    82b2:	ldr	r3, [pc, #80]	; (8304 <rx_event+0xb0>)
    82b4:	add.w	r0, r7, r8, lsl #9
    82b8:	mov	r2, r4
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    82ba:	add	r7, r4
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    82bc:	add.w	r1, r3, r5, lsl #9
    82c0:	add	r0, r3
    82c2:	bl	80b4 <memcpy>
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
    82c6:	ldr	r2, [pc, #56]	; (8300 <rx_event+0xac>)
				rx_queue_transfer(i);
    82c8:	mov	r0, r5
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    82ca:	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    82ce:	ldr	r3, [r2, #0]
    82d0:	add	r4, r3
    82d2:	str	r4, [r2, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    82d4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
				rx_queue_transfer(i);
    82d8:	b.w	81e8 <rx_queue_transfer>
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    82dc:	mov	r0, r5
	}
}
    82de:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    82e2:	b.w	81e8 <rx_queue_transfer>
    82e6:	nop
    82e8:	.word	0x2000f1b4
    82ec:	.word	0x2000f1c4
    82f0:	.word	0x2000f1c6
    82f4:	.word	0x2000c6dc
    82f8:	.word	0x2000c6bc
    82fc:	.word	0x2000c6cc
    8300:	.word	0x2000c6b8
    8304:	.word	0x20200000

00008308 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    8308:	ldr	r3, [pc, #120]	; (8384 <usb_serial_flush_callback+0x7c>)
    830a:	ldrb	r2, [r3, #0]
    830c:	cbnz	r2, 8326 <usb_serial_flush_callback+0x1e>
    830e:	and.w	r3, r2, #255	; 0xff
	if (!usb_configuration) return;
    8312:	ldr	r2, [pc, #116]	; (8388 <usb_serial_flush_callback+0x80>)
    8314:	ldrb	r2, [r2, #0]
    8316:	cbz	r2, 8326 <usb_serial_flush_callback+0x1e>
	asm("dsb" ::: "memory");
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
    8318:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
    831c:	ldr	r5, [pc, #108]	; (838c <usb_serial_flush_callback+0x84>)
    831e:	ldrh	r2, [r5, #0]
    8320:	cbnz	r2, 8328 <usb_serial_flush_callback+0x20>
    8322:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8326:	bx	lr
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    8328:	ldr	r6, [pc, #100]	; (8390 <usb_serial_flush_callback+0x88>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    832a:	rsb	r8, r2, #2048	; 0x800
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    832e:	ldr	r7, [pc, #100]	; (8394 <usb_serial_flush_callback+0x8c>)
    8330:	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    8332:	mov	r2, r8
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    8334:	ldr	r4, [pc, #96]	; (8398 <usb_serial_flush_callback+0x90>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    8336:	add.w	r7, r7, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    833a:	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    833e:	mov	r0, r7
    8340:	mov	r1, r4
    8342:	bl	91d0 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    8346:	add.w	r2, r8, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    834a:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    834e:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    8352:	ldr	r3, [pc, #72]	; (839c <usb_serial_flush_callback+0x94>)
    8354:	str	r1, [r3, #0]
		location += 32;
    8356:	adds	r1, #32
	} while (location < end_addr);
    8358:	cmp	r2, r1
    835a:	bhi.n	8354 <usb_serial_flush_callback+0x4c>
	asm("dsb");
    835c:	dsb	sy
	asm("isb");
    8360:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    8364:	movs	r0, #3
    8366:	mov	r1, r7
    8368:	bl	9200 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    836c:	ldrb	r3, [r6, #0]
    836e:	ldr	r2, [pc, #32]	; (8390 <usb_serial_flush_callback+0x88>)
    8370:	adds	r3, #1
    8372:	uxtb	r3, r3
    8374:	cmp	r3, #3
    8376:	it	hi
    8378:	movhi	r3, #0
    837a:	strb	r3, [r2, #0]
	tx_available = 0;
    837c:	movs	r3, #0
    837e:	strh	r3, [r5, #0]
    8380:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8384:	.word	0x2000f1cc
    8388:	.word	0x2000f1ce
    838c:	.word	0x2000f1b8
    8390:	.word	0x2000f1ca
    8394:	.word	0x20004480
    8398:	.word	0x20201000
    839c:	.word	0xe000ef70

000083a0 <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    83a0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    83a4:	sub	sp, #20
    83a6:	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    83a8:	str	r1, [sp, #0]
    83aa:	cmp	r1, #0
    83ac:	beq.w	8506 <usb_serial_write.part.1+0x166>
    83b0:	movs	r3, #0
    83b2:	ldr	r5, [pc, #344]	; (850c <usb_serial_write.part.1+0x16c>)
    83b4:	ldr.w	r8, [pc, #372]	; 852c <usb_serial_write.part.1+0x18c>
    83b8:	ldr.w	sl, [pc, #352]	; 851c <usb_serial_write.part.1+0x17c>
				break;
			}
			asm("dsb" ::: "memory");
			tx_noautoflush = 0;
			if (!waiting) {
				wait_begin_at = systick_millis_count;
    83bc:	ldr	r7, [pc, #336]	; (8510 <usb_serial_write.part.1+0x170>)
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    83be:	ldr.w	fp, [pc, #368]	; 8530 <usb_serial_write.part.1+0x190>
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    83c2:	str	r3, [sp, #4]
		tx_noautoflush = 1;
    83c4:	movs	r2, #1
		transfer_t *xfer = tx_transfer + tx_head;
    83c6:	ldr	r3, [pc, #332]	; (8514 <usb_serial_write.part.1+0x174>)
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		tx_noautoflush = 1;
    83c8:	strb	r2, [r5, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    83ca:	ldrb	r4, [r3, #0]
    83cc:	ldr	r2, [pc, #328]	; (8518 <usb_serial_write.part.1+0x178>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    83ce:	ldrh.w	r3, [r8]
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		tx_noautoflush = 1;
		transfer_t *xfer = tx_transfer + tx_head;
    83d2:	add.w	r9, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    83d6:	cbnz	r3, 8422 <usb_serial_write.part.1+0x82>
    83d8:	mov	r6, r3
    83da:	mov	r4, r3
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
    83dc:	mov	r0, r9
    83de:	bl	924c <usb_transfer_status>
			if (!(status & 0x80)) {
    83e2:	ands.w	r0, r0, #128	; 0x80
    83e6:	beq.n	84e6 <usb_serial_write.part.1+0x146>
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			asm("dsb" ::: "memory");
    83e8:	dsb	sy
			tx_noautoflush = 0;
    83ec:	movs	r2, #0
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    83ee:	ldrb.w	r3, [sl]
    83f2:	ldr	r1, [pc, #296]	; (851c <usb_serial_write.part.1+0x17c>)
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			asm("dsb" ::: "memory");
			tx_noautoflush = 0;
    83f4:	strb	r2, [r5, #0]
			if (!waiting) {
    83f6:	cbnz	r4, 83fa <usb_serial_write.part.1+0x5a>
				wait_begin_at = systick_millis_count;
    83f8:	ldr	r6, [r7, #0]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    83fa:	cmp	r3, #0
    83fc:	bne.n	84b4 <usb_serial_write.part.1+0x114>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    83fe:	ldr	r3, [r7, #0]
    8400:	subs	r3, r3, r6
    8402:	cmp	r3, #120	; 0x78
    8404:	bhi.n	84fa <usb_serial_write.part.1+0x15a>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    8406:	ldrb.w	r3, [fp]
    840a:	cmp	r3, #0
    840c:	beq.n	84b4 <usb_serial_write.part.1+0x114>
			yield();
    840e:	bl	a124 <yield>
			tx_noautoflush = 1;
    8412:	movs	r4, #1
	while (size > 0) {
		tx_noautoflush = 1;
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    8414:	ldrh.w	r3, [r8]
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
			yield();
			tx_noautoflush = 1;
    8418:	strb	r4, [r5, #0]
	while (size > 0) {
		tx_noautoflush = 1;
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    841a:	cmp	r3, #0
    841c:	beq.n	83dc <usb_serial_write.part.1+0x3c>
    841e:	ldr	r2, [pc, #244]	; (8514 <usb_serial_write.part.1+0x174>)
    8420:	ldrb	r4, [r2, #0]
    8422:	mov	r2, r3
    8424:	rsb	r0, r3, #2048	; 0x800
			if (!usb_configuration) return sent;
			yield();
			tx_noautoflush = 1;
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    8428:	lsls	r4, r4, #11
		if (size >= tx_available) {
    842a:	ldr	r6, [sp, #0]
			if (!usb_configuration) return sent;
			yield();
			tx_noautoflush = 1;
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    842c:	ldr	r1, [pc, #240]	; (8520 <usb_serial_write.part.1+0x180>)
    842e:	add	r0, r4
		if (size >= tx_available) {
    8430:	cmp	r6, r2
			if (!usb_configuration) return sent;
			yield();
			tx_noautoflush = 1;
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    8432:	add	r0, r1
		if (size >= tx_available) {
    8434:	bcc.n	84bc <usb_serial_write.part.1+0x11c>
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    8436:	add	r4, r1
			tx_noautoflush = 1;
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
    8438:	ldr	r1, [sp, #8]
    843a:	bl	80b4 <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    843e:	movs	r3, #0
    8440:	mov	r1, r4
    8442:	mov.w	r2, #2048	; 0x800
    8446:	mov	r0, r9
    8448:	bl	91d0 <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    844c:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    8450:	add.w	r4, r4, #2048	; 0x800
	asm volatile("": : :"memory");
	asm("dsb");
    8454:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    8458:	ldr	r2, [pc, #200]	; (8524 <usb_serial_write.part.1+0x184>)
    845a:	str	r3, [r2, #0]
		location += 32;
    845c:	adds	r3, #32
	} while (location < end_addr);
    845e:	cmp	r4, r3
    8460:	bhi.n	8458 <usb_serial_write.part.1+0xb8>
	asm("dsb");
    8462:	dsb	sy
	asm("isb");
    8466:	isb	sy
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    846a:	movs	r0, #3
    846c:	mov	r1, r9
    846e:	bl	9200 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    8472:	ldr	r3, [pc, #160]	; (8514 <usb_serial_write.part.1+0x174>)
    8474:	ldr	r2, [pc, #156]	; (8514 <usb_serial_write.part.1+0x174>)
    8476:	ldrb	r3, [r3, #0]
			size -= tx_available;
    8478:	ldr	r0, [sp, #0]
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    847a:	adds	r3, #1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    847c:	ldr	r1, [pc, #168]	; (8528 <usb_serial_write.part.1+0x188>)
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    847e:	uxtb	r3, r3
    8480:	cmp	r3, #3
    8482:	it	hi
    8484:	movhi	r3, #0
    8486:	strb	r3, [r2, #0]
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    8488:	movs	r2, #0
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
    848a:	ldrh.w	r3, [r8]
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    848e:	strh.w	r2, [r8]
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
    8492:	subs	r0, r0, r3
    8494:	str	r0, [sp, #0]
			sent += tx_available;
    8496:	ldr	r0, [sp, #4]
    8498:	add	r0, r3
    849a:	str	r0, [sp, #4]
			data += tx_available;
    849c:	ldr	r0, [sp, #8]
    849e:	add	r0, r3
    84a0:	str	r0, [sp, #8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    84a2:	str.w	r2, [r1, #132]	; 0x84
			tx_available -= size;
			sent += size;
			size = 0;
			timer_start_oneshot();
		}
		asm("dsb" ::: "memory");
    84a6:	dsb	sy
		tx_noautoflush = 0;
    84aa:	movs	r3, #0
    84ac:	strb	r3, [r5, #0]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    84ae:	ldr	r3, [sp, #0]
    84b0:	cmp	r3, #0
    84b2:	bne.n	83c4 <usb_serial_write.part.1+0x24>
    84b4:	ldr	r0, [sp, #4]
		}
		asm("dsb" ::: "memory");
		tx_noautoflush = 0;
	}
	return sent;
}
    84b6:	add	sp, #20
    84b8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    84bc:	ldr	r4, [sp, #0]
    84be:	str	r3, [sp, #12]
			tx_available -= size;
			sent += size;
    84c0:	ldr	r3, [sp, #4]
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    84c2:	mov	r2, r4
    84c4:	ldr	r1, [sp, #8]
			tx_available -= size;
			sent += size;
    84c6:	add	r3, r4
    84c8:	str	r3, [sp, #4]
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    84ca:	bl	80b4 <memcpy>
			tx_available -= size;
    84ce:	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    84d0:	mov.w	r1, #3221225472	; 0xc0000000
    84d4:	ldr	r2, [pc, #80]	; (8528 <usb_serial_write.part.1+0x188>)
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
			sent += size;
			size = 0;
    84d6:	movs	r0, #0
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    84d8:	subs	r3, r3, r4
			sent += size;
			size = 0;
    84da:	str	r0, [sp, #0]
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    84dc:	strh.w	r3, [r8]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    84e0:	str.w	r1, [r2, #132]	; 0x84
    84e4:	b.n	84a6 <usb_serial_write.part.1+0x106>
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    84e6:	mov.w	r3, #2048	; 0x800
    84ea:	ldr	r2, [pc, #40]	; (8514 <usb_serial_write.part.1+0x174>)
				transmit_previous_timeout = 0;
    84ec:	strb.w	r0, [sl]
    84f0:	ldrb	r4, [r2, #0]
    84f2:	mov	r2, r3
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    84f4:	strh.w	r3, [r8]
    84f8:	b.n	8428 <usb_serial_write.part.1+0x88>
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    84fa:	movs	r3, #1
				return sent;
    84fc:	ldr	r0, [sp, #4]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    84fe:	strb	r3, [r1, #0]
		}
		asm("dsb" ::: "memory");
		tx_noautoflush = 0;
	}
	return sent;
}
    8500:	add	sp, #20
    8502:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    8506:	ldr	r0, [sp, #0]
    8508:	b.n	84b6 <usb_serial_write.part.1+0x116>
    850a:	nop
    850c:	.word	0x2000f1cc
    8510:	.word	0x2000c720
    8514:	.word	0x2000f1ca
    8518:	.word	0x20004480
    851c:	.word	0x2000f1c9
    8520:	.word	0x20201000
    8524:	.word	0xe000ef70
    8528:	.word	0x402e0000
    852c:	.word	0x2000f1b8
    8530:	.word	0x2000f1ce

00008534 <usb_serial_reset>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_serial_reset(void)
{
    8534:	bx	lr
    8536:	nop

00008538 <usb_serial_configure>:
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    8538:	ldr	r3, [pc, #196]	; (8600 <usb_serial_configure+0xc8>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
    853a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    853e:	ldrb	r3, [r3, #0]
		tx_packet_size = CDC_TX_SIZE_480;
    8540:	ldr	r7, [pc, #192]	; (8604 <usb_serial_configure+0xcc>)
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    8542:	cmp	r3, #0
    8544:	beq.n	85f0 <usb_serial_configure+0xb8>
		tx_packet_size = CDC_TX_SIZE_480;
    8546:	mov.w	r3, #512	; 0x200
		rx_packet_size = CDC_RX_SIZE_480;
    854a:	ldr.w	r8, [pc, #236]	; 8638 <usb_serial_configure+0x100>
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
    854e:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    8550:	strh.w	r3, [r8]
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    8554:	movs	r1, #0
    8556:	movs	r2, #128	; 0x80
    8558:	ldr	r0, [pc, #172]	; (8608 <usb_serial_configure+0xd0>)
	tx_head = 0;
    855a:	mov	r5, r1
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    855c:	ldr	r6, [pc, #172]	; (860c <usb_serial_configure+0xd4>)
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    855e:	bl	b9ec <memset>
	tx_head = 0;
    8562:	ldr	r4, [pc, #172]	; (8610 <usb_serial_configure+0xd8>)
	tx_available = 0;
    8564:	ldr	r3, [pc, #172]	; (8614 <usb_serial_configure+0xdc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    8566:	mov	r1, r5
    8568:	mov.w	r2, #256	; 0x100
    856c:	ldr	r0, [pc, #168]	; (8618 <usb_serial_configure+0xe0>)
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    856e:	strb	r5, [r4, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    8570:	mov	r4, r5
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    8572:	strh	r5, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    8574:	bl	b9ec <memset>
	memset(rx_count, 0, sizeof(rx_count));
    8578:	str	r5, [r6, #0]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    857a:	mov	r3, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    857c:	str	r5, [r6, #4]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    857e:	mov	r2, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    8580:	str	r5, [r6, #8]
    8582:	str	r5, [r6, #12]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    8584:	ldr	r1, [pc, #148]	; (861c <usb_serial_configure+0xe4>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    8586:	ldr	r6, [pc, #152]	; (8620 <usb_serial_configure+0xe8>)
	rx_head = 0;
	rx_tail = 0;
    8588:	ldr	r0, [pc, #152]	; (8624 <usb_serial_configure+0xec>)
	rx_available = 0;
    858a:	ldr.w	lr, [pc, #176]	; 863c <usb_serial_configure+0x104>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    858e:	strb	r5, [r1, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    8590:	movs	r1, #16
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
    8592:	strb	r5, [r0, #0]
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    8594:	movs	r0, #2
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    8596:	str	r5, [r6, #0]
    8598:	str	r5, [r6, #4]
    859a:	str	r5, [r6, #8]
    859c:	str	r5, [r6, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
    859e:	str.w	r5, [lr]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    85a2:	bl	9168 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    85a6:	ldrh.w	r1, [r8]
    85aa:	mov	r2, r5
    85ac:	ldr	r3, [pc, #120]	; (8628 <usb_serial_configure+0xf0>)
    85ae:	movs	r0, #3
    85b0:	bl	9104 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    85b4:	mov	r3, r5
    85b6:	ldrh	r1, [r7, #0]
    85b8:	movs	r2, #1
    85ba:	movs	r0, #3
    85bc:	bl	9168 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    85c0:	mov	r0, r4
    85c2:	adds	r4, #1
    85c4:	bl	81e8 <rx_queue_transfer>
    85c8:	cmp	r4, #8
    85ca:	bne.n	85c0 <usb_serial_configure+0x88>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    85cc:	ldr	r3, [pc, #92]	; (862c <usb_serial_configure+0xf4>)
	USB1_GPTIMER0LD = microseconds - 1;
    85ce:	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    85d0:	ldr	r0, [pc, #92]	; (8630 <usb_serial_configure+0xf8>)
	USB1_GPTIMER0CTRL = 0;
    85d2:	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    85d4:	ldr	r4, [pc, #92]	; (8634 <usb_serial_configure+0xfc>)
    85d6:	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    85d8:	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    85dc:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    85e0:	ldr.w	r2, [r3, #328]	; 0x148
    85e4:	orr.w	r2, r2, #16777216	; 0x1000000
    85e8:	str.w	r2, [r3, #328]	; 0x148
    85ec:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    85f0:	movs	r3, #64	; 0x40
		rx_packet_size = CDC_RX_SIZE_12;
    85f2:	ldr.w	r8, [pc, #68]	; 8638 <usb_serial_configure+0x100>
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    85f6:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_12;
    85f8:	strh.w	r3, [r8]
    85fc:	b.n	8554 <usb_serial_configure+0x1c>
    85fe:	nop
    8600:	.word	0x2000f1cf
    8604:	.word	0x2000f1ba
    8608:	.word	0x20004480
    860c:	.word	0x2000c6bc
    8610:	.word	0x2000f1ca
    8614:	.word	0x2000f1b8
    8618:	.word	0x20004300
    861c:	.word	0x2000f1c4
    8620:	.word	0x2000c6cc
    8624:	.word	0x2000f1c6
    8628:	.word	0x00008255
    862c:	.word	0x402e0000
    8630:	.word	0x2000c730
    8634:	.word	0x00008309
    8638:	.word	0x2000f1b4
    863c:	.word	0x2000c6b8

00008640 <usb_serial_read>:
int usb_serial_read(void *buffer, uint32_t size)
{
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    8640:	ldr	r3, [pc, #196]	; (8708 <usb_serial_read+0xc8>)
    8642:	mov.w	r2, #131072	; 0x20000

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    8646:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    864a:	str	r2, [r3, #0]

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    864c:	sub	sp, #12
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    864e:	ldr	r3, [pc, #188]	; (870c <usb_serial_read+0xcc>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    8650:	mov	r9, r1
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    8652:	ldrb	r4, [r3, #0]
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    8654:	cmp	r1, #0
    8656:	beq.n	8700 <usb_serial_read+0xc0>
    8658:	ldr	r3, [pc, #180]	; (8710 <usb_serial_read+0xd0>)
    865a:	uxtb	r4, r4
    865c:	ldrb	r3, [r3, #0]
    865e:	cmp	r4, r3
    8660:	beq.n	8704 <usb_serial_read+0xc4>
    8662:	mov	sl, r0
    8664:	movs	r7, #0
    8666:	ldr.w	fp, [pc, #192]	; 8728 <usb_serial_read+0xe8>
		if (++tail > RX_NUM) tail = 0;
    866a:	adds	r4, #1
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    866c:	ldr	r3, [pc, #164]	; (8714 <usb_serial_read+0xd4>)
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
    866e:	rsb	r8, r7, r9
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    8672:	mov	r0, sl
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    8674:	cmp	r4, #9
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    8676:	str	r3, [sp, #4]
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
    8678:	ldr	r3, [pc, #156]	; (8718 <usb_serial_read+0xd8>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    867a:	it	cs
    867c:	movcs	r4, #0
		uint32_t i = rx_list[tail];
    867e:	ldrb	r5, [r3, r4]
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    8680:	ldr	r3, [pc, #144]	; (8714 <usb_serial_read+0xd4>)
    8682:	ldrh.w	lr, [r3, r5, lsl #1]
    8686:	ldr	r3, [pc, #148]	; (871c <usb_serial_read+0xdc>)
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    8688:	add.w	r1, lr, r5, lsl #9
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    868c:	ldrh.w	r6, [r3, r5, lsl #1]
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    8690:	ldr	r3, [pc, #140]	; (8720 <usb_serial_read+0xe0>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    8692:	rsb	r6, lr, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    8696:	add	r1, r3
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    8698:	cmp	r8, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    869a:	mov	r2, r6
			p += avail;
			rx_available -= avail;
			count += avail;
    869c:	add	r7, r6
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    869e:	bcs.n	86d4 <usb_serial_read+0x94>
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    86a0:	add.w	r1, lr, r5, lsl #9
    86a4:	mov	r2, r8
    86a6:	add	r1, r3
    86a8:	bl	80b4 <memcpy>
			rx_available -= len;
			rx_index[i] += len;
    86ac:	ldr	r3, [sp, #4]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    86ae:	ldr.w	r1, [fp]
    86b2:	mov	r0, r9
			rx_index[i] += len;
    86b4:	ldrh.w	r2, [r3, r5, lsl #1]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    86b8:	rsb	r1, r8, r1
			rx_index[i] += len;
    86bc:	add	r8, r2
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    86be:	str.w	r1, [fp]
			rx_index[i] += len;
    86c2:	strh.w	r8, [r3, r5, lsl #1]
			count += avail;
			rx_tail = tail;
			rx_queue_transfer(i);
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
    86c6:	ldr	r3, [pc, #92]	; (8724 <usb_serial_read+0xe4>)
    86c8:	mov.w	r2, #131072	; 0x20000
    86cc:	str	r2, [r3, #0]
	return count;
}
    86ce:	add	sp, #12
    86d0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    86d4:	bl	80b4 <memcpy>
			p += avail;
			rx_available -= avail;
    86d8:	ldr.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    86dc:	uxtb	r3, r4
			rx_queue_transfer(i);
    86de:	mov	r0, r5
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
			rx_available -= avail;
    86e0:	subs	r2, r2, r6
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
    86e2:	add	sl, r6
			rx_available -= avail;
    86e4:	str.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    86e8:	ldr	r2, [pc, #32]	; (870c <usb_serial_read+0xcc>)
    86ea:	strb	r3, [r2, #0]
			rx_queue_transfer(i);
    86ec:	bl	81e8 <rx_queue_transfer>

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    86f0:	cmp	r9, r7
    86f2:	bls.n	86fc <usb_serial_read+0xbc>
    86f4:	ldr	r3, [pc, #24]	; (8710 <usb_serial_read+0xd0>)
    86f6:	ldrb	r3, [r3, #0]
    86f8:	cmp	r4, r3
    86fa:	bne.n	866a <usb_serial_read+0x2a>
    86fc:	mov	r0, r7
    86fe:	b.n	86c6 <usb_serial_read+0x86>
    8700:	mov	r0, r1
    8702:	b.n	86c6 <usb_serial_read+0x86>
    8704:	movs	r0, #0
    8706:	b.n	86c6 <usb_serial_read+0x86>
    8708:	.word	0xe000e18c
    870c:	.word	0x2000f1c6
    8710:	.word	0x2000f1c4
    8714:	.word	0x2000c6cc
    8718:	.word	0x2000c6dc
    871c:	.word	0x2000c6bc
    8720:	.word	0x20200000
    8724:	.word	0xe000e10c
    8728:	.word	0x2000c6b8

0000872c <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    872c:	ldr	r3, [pc, #44]	; (875c <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
    872e:	ldr	r2, [pc, #48]	; (8760 <usb_serial_peekchar+0x34>)
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    8730:	ldrb	r3, [r3, #0]
	if (tail == rx_head) return -1;
    8732:	ldrb	r2, [r2, #0]
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    8734:	uxtb	r3, r3
	if (tail == rx_head) return -1;
    8736:	cmp	r3, r2
    8738:	beq.n	8756 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    873a:	adds	r3, #1
	uint32_t i = rx_list[tail];
    873c:	ldr	r0, [pc, #36]	; (8764 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    873e:	ldr	r2, [pc, #40]	; (8768 <usb_serial_peekchar+0x3c>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    8740:	cmp	r3, #9
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    8742:	ldr	r1, [pc, #40]	; (876c <usb_serial_peekchar+0x40>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    8744:	it	cs
    8746:	movcs	r3, #0
	uint32_t i = rx_list[tail];
    8748:	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    874a:	ldrh.w	r1, [r1, r3, lsl #1]
    874e:	add.w	r3, r2, r3, lsl #9
    8752:	ldrb	r0, [r3, r1]
    8754:	bx	lr

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
    8756:	mov.w	r0, #4294967295
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
}
    875a:	bx	lr
    875c:	.word	0x2000f1c6
    8760:	.word	0x2000f1c4
    8764:	.word	0x2000c6dc
    8768:	.word	0x20200000
    876c:	.word	0x2000c6cc

00008770 <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_available;
    8770:	ldr	r3, [pc, #4]	; (8778 <usb_serial_available+0x8>)
    8772:	ldr	r0, [r3, #0]
}
    8774:	bx	lr
    8776:	nop
    8778:	.word	0x2000c6b8

0000877c <usb_serial_flush_input>:

// discard any buffered input
void usb_serial_flush_input(void)
{
    877c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    8780:	ldr	r6, [pc, #84]	; (87d8 <usb_serial_flush_input+0x5c>)
	while (tail != rx_head) {
    8782:	ldr	r5, [pc, #88]	; (87dc <usb_serial_flush_input+0x60>)
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    8784:	ldrb	r4, [r6, #0]
	while (tail != rx_head) {
    8786:	ldrb	r3, [r5, #0]
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    8788:	uxtb	r4, r4
	while (tail != rx_head) {
    878a:	cmp	r4, r3
    878c:	beq.n	87d2 <usb_serial_flush_input+0x56>
    878e:	ldr.w	r9, [pc, #84]	; 87e4 <usb_serial_flush_input+0x68>
    8792:	ldr.w	fp, [pc, #84]	; 87e8 <usb_serial_flush_input+0x6c>
    8796:	ldr.w	r8, [pc, #84]	; 87ec <usb_serial_flush_input+0x70>
    879a:	ldr	r7, [pc, #68]	; (87e0 <usb_serial_flush_input+0x64>)
		if (++tail > RX_NUM) tail = 0;
    879c:	adds	r4, #1
    879e:	cmp	r4, #8
    87a0:	uxtb.w	sl, r4
    87a4:	bls.n	87aa <usb_serial_flush_input+0x2e>
    87a6:	movs	r4, #0
    87a8:	mov	sl, r4
		uint32_t i = rx_list[tail];
    87aa:	ldrb.w	r1, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    87ae:	ldr.w	r2, [fp]
    87b2:	ldrh.w	r3, [r8, r1, lsl #1]
		rx_queue_transfer(i);
    87b6:	mov	r0, r1
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
    87b8:	ldrh.w	r1, [r7, r1, lsl #1]
    87bc:	subs	r3, r3, r1
    87be:	subs	r3, r2, r3
    87c0:	str.w	r3, [fp]
		rx_queue_transfer(i);
    87c4:	bl	81e8 <rx_queue_transfer>
		rx_tail = tail;
    87c8:	strb.w	sl, [r6]

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
    87cc:	ldrb	r3, [r5, #0]
    87ce:	cmp	r4, r3
    87d0:	bne.n	879c <usb_serial_flush_input+0x20>
    87d2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    87d6:	nop
    87d8:	.word	0x2000f1c6
    87dc:	.word	0x2000f1c4
    87e0:	.word	0x2000c6cc
    87e4:	.word	0x2000c6dc
    87e8:	.word	0x2000c6b8
    87ec:	.word	0x2000c6bc

000087f0 <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    87f0:	push	{lr}
    87f2:	sub	sp, #12
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
    87f4:	movs	r1, #1
    87f6:	add.w	r0, sp, #7
    87fa:	bl	8640 <usb_serial_read>
    87fe:	cbz	r0, 880a <usb_serial_getchar+0x1a>
    8800:	ldrb.w	r0, [sp, #7]
	return -1;
}
    8804:	add	sp, #12
    8806:	ldr.w	pc, [sp], #4
// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
	return -1;
    880a:	mov.w	r0, #4294967295
    880e:	b.n	8804 <usb_serial_getchar+0x14>

00008810 <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    8810:	ldr	r3, [pc, #36]	; (8838 <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    8812:	push	{lr}
    8814:	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    8816:	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    8818:	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    881c:	cbnz	r3, 8828 <usb_serial_putchar+0x18>
    881e:	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
    8822:	add	sp, #12
    8824:	ldr.w	pc, [sp], #4
    8828:	movs	r1, #1
    882a:	add.w	r0, sp, #7
    882e:	bl	83a0 <usb_serial_write.part.1>
    8832:	add	sp, #12
    8834:	ldr.w	pc, [sp], #4
    8838:	.word	0x2000f1ce

0000883c <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    883c:	ldr	r3, [pc, #16]	; (8850 <usb_serial_write+0x14>)
    883e:	ldrb	r3, [r3, #0]
    8840:	and.w	r2, r3, #255	; 0xff
    8844:	cbz	r3, 884a <usb_serial_write+0xe>
    8846:	b.w	83a0 <usb_serial_write.part.1>
		}
		asm("dsb" ::: "memory");
		tx_noautoflush = 0;
	}
	return sent;
}
    884a:	mov	r0, r2
    884c:	bx	lr
    884e:	nop
    8850:	.word	0x2000f1ce

00008854 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    8854:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    8858:	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
    885a:	ldr.w	r8, [pc, #68]	; 88a0 <usb_serial_write_buffer_free+0x4c>
    885e:	movs	r3, #1
    8860:	ldr	r5, [pc, #52]	; (8898 <usb_serial_write_buffer_free+0x44>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
    8862:	mov	r7, r4
    8864:	ldr	r6, [pc, #52]	; (889c <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    8866:	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    886a:	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    886c:	mov	r0, r5
    886e:	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    8870:	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    8872:	add.w	r4, r4, #1
		if (i == tx_head) continue;
    8876:	beq.n	8884 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    8878:	bl	924c <usb_transfer_status>
    887c:	lsls	r3, r0, #24
    887e:	it	pl
    8880:	addpl.w	r7, r7, #2048	; 0x800

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    8884:	cmp	r4, #4
    8886:	bne.n	886a <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	asm("dsb" ::: "memory");
    8888:	dsb	sy
	tx_noautoflush = 0;
    888c:	movs	r3, #0
	return sum;
}
    888e:	mov	r0, r7
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	asm("dsb" ::: "memory");
	tx_noautoflush = 0;
    8890:	strb.w	r3, [r8]
	return sum;
}
    8894:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8898:	.word	0x20004480
    889c:	.word	0x2000f1ca
    88a0:	.word	0x2000f1cc

000088a4 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    88a4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	if (!usb_configuration) return;
    88a8:	ldr	r3, [pc, #128]	; (892c <usb_serial_flush_output+0x88>)
    88aa:	ldrb	r3, [r3, #0]
    88ac:	cbz	r3, 88b4 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    88ae:	ldr	r5, [pc, #128]	; (8930 <usb_serial_flush_output+0x8c>)
    88b0:	ldrh	r2, [r5, #0]
    88b2:	cbnz	r2, 88b8 <usb_serial_flush_output+0x14>
    88b4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    88b8:	ldr.w	r8, [pc, #136]	; 8944 <usb_serial_flush_output+0xa0>
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    88bc:	rsb	r9, r2, #2048	; 0x800
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    88c0:	ldr	r6, [pc, #112]	; (8934 <usb_serial_flush_output+0x90>)
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    88c2:	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
    88c6:	ldrb.w	r1, [r8]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    88ca:	mov	r2, r9

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    88cc:	ldr	r4, [pc, #104]	; (8938 <usb_serial_flush_output+0x94>)
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    88ce:	movs	r3, #0
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    88d0:	add.w	r6, r6, r1, lsl #5
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    88d4:	ldr	r7, [pc, #100]	; (893c <usb_serial_flush_output+0x98>)
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    88d6:	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    88da:	mov	r0, r6
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    88dc:	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    88e0:	mov	r1, r4
    88e2:	bl	91d0 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    88e6:	add.w	r2, r9, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    88ea:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    88ee:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    88f2:	ldr	r3, [pc, #76]	; (8940 <usb_serial_flush_output+0x9c>)
    88f4:	str	r1, [r3, #0]
		location += 32;
    88f6:	adds	r1, #32
	} while (location < end_addr);
    88f8:	cmp	r2, r1
    88fa:	bhi.n	88f4 <usb_serial_flush_output+0x50>
	asm("dsb");
    88fc:	dsb	sy
	asm("isb");
    8900:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    8904:	movs	r0, #3
    8906:	mov	r1, r6
    8908:	bl	9200 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    890c:	ldrb.w	r3, [r8]
    8910:	ldr	r2, [pc, #48]	; (8944 <usb_serial_flush_output+0xa0>)
    8912:	adds	r3, #1
    8914:	uxtb	r3, r3
    8916:	cmp	r3, #3
    8918:	it	hi
    891a:	movhi	r3, #0
    891c:	strb	r3, [r2, #0]
	tx_available = 0;
    891e:	movs	r3, #0
    8920:	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    8922:	dsb	sy
	tx_noautoflush = 0;
    8926:	strb	r3, [r7, #0]
    8928:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    892c:	.word	0x2000f1ce
    8930:	.word	0x2000f1b8
    8934:	.word	0x20004480
    8938:	.word	0x20201000
    893c:	.word	0x2000f1cc
    8940:	.word	0xe000ef70
    8944:	.word	0x2000f1ca

00008948 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    8948:	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    894a:	push	{r4, r5, r6, r7}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    894c:	cbz	r3, 8956 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    894e:	ldr	r3, [r2, #4]
    8950:	orr.w	r3, r3, #32768	; 0x8000
    8954:	str	r3, [r2, #4]
	}
	__disable_irq();
    8956:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    8958:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    895a:	cbz	r4, 89b4 <schedule_transfer+0x6c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    895c:	ldr	r3, [pc, #112]	; (89d0 <schedule_transfer+0x88>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    895e:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    8960:	ldr.w	r4, [r3, #432]	; 0x1b0
    8964:	tst	r4, r1
    8966:	bne.n	8994 <schedule_transfer+0x4c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    8968:	ldr	r6, [pc, #104]	; (89d4 <schedule_transfer+0x8c>)
    896a:	ldr	r7, [r6, #0]
    896c:	b.n	8978 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    896e:	ldr	r4, [r6, #0]
    8970:	subs	r4, r4, r7
    8972:	cmp.w	r4, #2400	; 0x960
    8976:	bcs.n	8990 <schedule_transfer+0x48>
		if (USB1_ENDPTPRIME & epmask) goto end;
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    8978:	ldr.w	r4, [r3, #320]	; 0x140
    897c:	orr.w	r4, r4, #16384	; 0x4000
    8980:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    8984:	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    8988:	ldr.w	r4, [r3, #320]	; 0x140
    898c:	lsls	r4, r4, #17
    898e:	bpl.n	896e <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    8990:	ands	r5, r1
    8992:	beq.n	899c <schedule_transfer+0x54>
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    8994:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    8996:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    8998:	pop	{r4, r5, r6, r7}
    899a:	bx	lr
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    899c:	ldr	r4, [pc, #48]	; (89d0 <schedule_transfer+0x88>)
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
    899e:	str	r2, [r0, #8]
		endpoint->status = 0;
    89a0:	str	r5, [r0, #12]
		USB1_ENDPTPRIME |= epmask;
    89a2:	ldr.w	r3, [r4, #432]	; 0x1b0
    89a6:	orrs	r1, r3
    89a8:	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    89ac:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    89ae:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    89b0:	pop	{r4, r5, r6, r7}
    89b2:	bx	lr
		goto end;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
    89b4:	ldr	r5, [pc, #24]	; (89d0 <schedule_transfer+0x88>)
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
		goto end;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    89b6:	str	r2, [r0, #8]
	endpoint->status = 0;
    89b8:	str	r4, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    89ba:	ldr.w	r3, [r5, #432]	; 0x1b0
    89be:	orrs	r1, r3
    89c0:	str.w	r1, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    89c4:	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    89c6:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    89c8:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    89ca:	pop	{r4, r5, r6, r7}
    89cc:	bx	lr
    89ce:	nop
    89d0:	.word	0x402e0000
    89d4:	.word	0xe0001004

000089d8 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    89d8:	push	{r4, r5, r6, lr}
    89da:	mov	r6, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    89dc:	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
    89de:	cbz	r0, 8a06 <run_callbacks+0x2e>
    89e0:	mov	r2, r0
    89e2:	movs	r4, #0
    89e4:	b.n	89ee <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    89e6:	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    89e8:	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
    89ea:	cmp	r2, #1
    89ec:	beq.n	8a08 <run_callbacks+0x30>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    89ee:	ldr	r3, [r2, #4]
    89f0:	ands.w	r3, r3, #128	; 0x80
    89f4:	beq.n	89e6 <run_callbacks+0xe>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    89f6:	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    89f8:	cbz	r4, 8a06 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
    89fa:	ldr	r3, [r6, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
    89fc:	ldr	r5, [r0, #0]
		ep->callback_function(first);
    89fe:	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    8a00:	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
    8a02:	mov	r0, r5
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    8a04:	bne.n	89fa <run_callbacks+0x22>
    8a06:	pop	{r4, r5, r6, pc}
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    8a08:	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
    8a0a:	str	r3, [r6, #52]	; 0x34
			break;
    8a0c:	b.n	89f8 <run_callbacks+0x20>
    8a0e:	nop

00008a10 <endpoint0_transmit.constprop.1>:
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    8a10:	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    8a12:	cbnz	r1, 8a4e <endpoint0_transmit.constprop.1+0x3e>
    8a14:	ldr	r4, [pc, #132]	; (8a9c <endpoint0_transmit.constprop.1+0x8c>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8a16:	ldr	r1, [pc, #136]	; (8aa0 <endpoint0_transmit.constprop.1+0x90>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    8a18:	movs	r0, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8a1a:	ldr	r3, [pc, #136]	; (8aa4 <endpoint0_transmit.constprop.1+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8a1c:	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8a1e:	mov.w	r5, #65537	; 0x10001
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8a22:	movs	r6, #128	; 0x80
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8a24:	str	r2, [r1, #0]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    8a26:	mov	r2, r3
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    8a28:	str	r1, [r4, #8]
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8a2a:	str	r6, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    8a2c:	str	r0, [r4, #12]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8a2e:	str.w	r5, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    8a32:	ldr.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    8a36:	ldr	r5, [pc, #112]	; (8aa8 <endpoint0_transmit.constprop.1+0x98>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    8a38:	orr.w	r4, r4, #1
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    8a3c:	str	r0, [r1, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    8a3e:	str.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    8a42:	str	r0, [r5, #0]
	while (USB1_ENDPTPRIME) ;
    8a44:	ldr.w	r3, [r2, #432]	; 0x1b0
    8a48:	cmp	r3, #0
    8a4a:	bne.n	8a44 <endpoint0_transmit.constprop.1+0x34>
}
    8a4c:	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8a4e:	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    8a50:	ldr	r3, [pc, #88]	; (8aac <endpoint0_transmit.constprop.1+0x9c>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    8a52:	ldr	r5, [pc, #80]	; (8aa4 <endpoint0_transmit.constprop.1+0x94>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    8a54:	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    8a56:	ldr	r4, [pc, #68]	; (8a9c <endpoint0_transmit.constprop.1+0x8c>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8a58:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    8a5c:	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    8a5e:	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8a60:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    8a62:	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    8a66:	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    8a68:	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    8a6c:	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    8a6e:	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    8a72:	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    8a76:	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    8a7a:	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    8a7c:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    8a7e:	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    8a82:	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    8a86:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    8a8a:	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    8a8c:	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    8a8e:	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    8a92:	ldr.w	r3, [r2, #432]	; 0x1b0
    8a96:	cmp	r3, #0
    8a98:	bne.n	8a92 <endpoint0_transmit.constprop.1+0x82>
    8a9a:	b.n	8a16 <endpoint0_transmit.constprop.1+0x6>
    8a9c:	.word	0x20000000
    8aa0:	.word	0x2000f200
    8aa4:	.word	0x402e0000
    8aa8:	.word	0x2000c644
    8aac:	.word	0x2000f1e0

00008ab0 <usb_isr>:
	__builtin_unreachable();
}


void usb_isr(void)
{
    8ab0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    8ab4:	ldr	r4, [pc, #752]	; (8da8 <usb_isr+0x2f8>)
	__builtin_unreachable();
}


void usb_isr(void)
{
    8ab6:	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    8ab8:	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    8abc:	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    8ac0:	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    8ac4:	beq.n	8b84 <usb_isr+0xd4>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    8ac6:	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    8aca:	cmp	r3, #0
    8acc:	beq.n	8b7a <usb_isr+0xca>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    8ace:	mov.w	fp, #65537	; 0x10001
    8ad2:	ldr.w	r9, [pc, #760]	; 8dcc <usb_isr+0x31c>
    8ad6:	ldr	r6, [pc, #724]	; (8dac <usb_isr+0x2fc>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    8ad8:	mov	r5, r4
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    8ada:	mov	sl, fp
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    8adc:	str.w	r3, [r4, #428]	; 0x1ac
    8ae0:	ldr	r0, [r6, #40]	; 0x28
    8ae2:	ldr	r2, [r6, #44]	; 0x2c
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    8ae4:	ldr.w	r3, [r4, #320]	; 0x140
    8ae8:	orr.w	r3, r3, #8192	; 0x2000
    8aec:	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    8af0:	ldr.w	r3, [r4, #320]	; 0x140
    8af4:	lsls	r7, r3, #18
    8af6:	bpl.n	8ae4 <usb_isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    8af8:	ldr.w	r3, [r5, #320]	; 0x140
    8afc:	bic.w	r3, r3, #8192	; 0x2000
    8b00:	str.w	r3, [r5, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    8b04:	str.w	sl, [r5, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    8b08:	ldr.w	r3, [r4, #436]	; 0x1b4
    8b0c:	ands.w	r3, r3, #65537	; 0x10001
    8b10:	bne.n	8b08 <usb_isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    8b12:	uxth	r1, r0
    8b14:	movw	r7, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    8b18:	str.w	r3, [r9]
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    8b1c:	cmp	r1, r7
    8b1e:	bhi.w	8c7c <usb_isr+0x1cc>
    8b22:	cmp.w	r1, #1664	; 0x680
    8b26:	bcs.w	8ee8 <usb_isr+0x438>
    8b2a:	cmp.w	r1, #258	; 0x102
    8b2e:	beq.w	8df6 <usb_isr+0x346>
    8b32:	bhi.w	8d12 <usb_isr+0x262>
    8b36:	cmp	r1, #128	; 0x80
    8b38:	beq.w	8ddc <usb_isr+0x32c>
    8b3c:	cmp	r1, #130	; 0x82
    8b3e:	bne.w	8d02 <usb_isr+0x252>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    8b42:	uxth	r2, r2
    8b44:	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
    8b48:	cmp	r1, #7
    8b4a:	bhi.w	8d02 <usb_isr+0x252>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    8b4e:	lsls	r1, r1, #2
    8b50:	ldr	r0, [pc, #604]	; (8db0 <usb_isr+0x300>)
		reply_buffer[0] = 0;
    8b52:	ldr	r7, [pc, #608]	; (8db4 <usb_isr+0x304>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    8b54:	add	r0, r1
    8b56:	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    8b58:	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
    8b5a:	strb	r3, [r7, #0]
		reply_buffer[1] = 0;
    8b5c:	strb	r3, [r7, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    8b5e:	bpl.w	8f66 <usb_isr+0x4b6>
    8b62:	lsls	r2, r1, #15
    8b64:	bpl.n	8b6a <usb_isr+0xba>
			reply_buffer[0] = 1;
    8b66:	movs	r3, #1
    8b68:	strb	r3, [r7, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    8b6a:	movs	r1, #2
    8b6c:	ldr	r0, [pc, #580]	; (8db4 <usb_isr+0x304>)
    8b6e:	bl	8a10 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    8b72:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    8b76:	cmp	r3, #0
    8b78:	bne.n	8adc <usb_isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    8b7a:	ldr	r2, [pc, #556]	; (8da8 <usb_isr+0x2f8>)
    8b7c:	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    8b80:	cmp	r3, #0
    8b82:	bne.n	8c18 <usb_isr+0x168>
			}
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    8b84:	tst.w	r8, #64	; 0x40
    8b88:	beq.n	8bbc <usb_isr+0x10c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    8b8a:	ldr	r3, [pc, #540]	; (8da8 <usb_isr+0x2f8>)
    8b8c:	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    8b90:	mov	r2, r3
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    8b92:	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    8b96:	ldr.w	r1, [r3, #444]	; 0x1bc
    8b9a:	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    8b9e:	ldr.w	r4, [r2, #432]	; 0x1b0
    8ba2:	ldr	r3, [pc, #516]	; (8da8 <usb_isr+0x2f8>)
    8ba4:	cmp	r4, #0
    8ba6:	bne.n	8b9e <usb_isr+0xee>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    8ba8:	mov.w	r2, #4294967295
    8bac:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    8bb0:	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    8bb4:	bl	8534 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    8bb8:	ldr	r3, [pc, #508]	; (8db8 <usb_isr+0x308>)
    8bba:	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    8bbc:	tst.w	r8, #16777216	; 0x1000000
    8bc0:	beq.n	8bca <usb_isr+0x11a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    8bc2:	ldr	r3, [pc, #504]	; (8dbc <usb_isr+0x30c>)
    8bc4:	ldr	r3, [r3, #0]
    8bc6:	cbz	r3, 8bca <usb_isr+0x11a>
    8bc8:	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    8bca:	tst.w	r8, #33554432	; 0x2000000
    8bce:	beq.n	8bd8 <usb_isr+0x128>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    8bd0:	ldr	r3, [pc, #492]	; (8dc0 <usb_isr+0x310>)
    8bd2:	ldr	r3, [r3, #0]
    8bd4:	cbz	r3, 8bd8 <usb_isr+0x128>
    8bd6:	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    8bd8:	tst.w	r8, #4
    8bdc:	beq.n	8bf0 <usb_isr+0x140>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    8bde:	ldr	r3, [pc, #456]	; (8da8 <usb_isr+0x2f8>)
    8be0:	ldr.w	r3, [r3, #388]	; 0x184
    8be4:	ands.w	r3, r3, #512	; 0x200
    8be8:	beq.n	8c76 <usb_isr+0x1c6>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
    8bea:	ldr	r3, [pc, #472]	; (8dc4 <usb_isr+0x314>)
    8bec:	movs	r2, #1
    8bee:	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    8bf0:	ldr	r3, [pc, #436]	; (8da8 <usb_isr+0x2f8>)
    8bf2:	ldr.w	r2, [r3, #328]	; 0x148
    8bf6:	lsls	r2, r2, #24
    8bf8:	bpl.n	8c12 <usb_isr+0x162>
    8bfa:	tst.w	r8, #128	; 0x80
    8bfe:	beq.n	8c12 <usb_isr+0x162>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    8c00:	ldr	r1, [pc, #452]	; (8dc8 <usb_isr+0x318>)
    8c02:	ldrb	r2, [r1, #0]
    8c04:	cbz	r2, 8c12 <usb_isr+0x162>
			if (--usb_reboot_timer == 0) {
    8c06:	subs	r2, #1
    8c08:	uxtb	r2, r2
    8c0a:	strb	r2, [r1, #0]
    8c0c:	cmp	r2, #0
    8c0e:	beq.w	9098 <usb_isr+0x5e8>
		#endif
		#ifdef FLIGHTSIM_INTERFACE
		usb_flightsim_flush_output();
		#endif
	}
}
    8c12:	add	sp, #12
    8c14:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    8c18:	ldr	r1, [pc, #432]	; (8dcc <usb_isr+0x31c>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    8c1a:	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    8c1e:	ldr	r0, [r1, #0]
    8c20:	tst	r3, r0
    8c22:	bne.w	8fec <usb_isr+0x53c>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    8c26:	ldr	r2, [pc, #400]	; (8db8 <usb_isr+0x308>)
    8c28:	ldr	r5, [r2, #0]
#if 1
			if (completestatus) {
    8c2a:	ands	r5, r3
    8c2c:	beq.n	8b84 <usb_isr+0xd4>

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    8c2e:	lsrs	r7, r5, #16
    8c30:	beq.n	8c52 <usb_isr+0x1a2>
    8c32:	ldr	r6, [pc, #376]	; (8dac <usb_isr+0x2fc>)
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
    8c34:	mov.w	r9, #1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
    8c38:	rbit	r4, r7
    8c3c:	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    8c40:	add.w	r0, r6, r4, lsl #7
					tx &= ~(1<<p);
    8c44:	lsl.w	r4, r9, r4

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    8c48:	adds	r0, #64	; 0x40
    8c4a:	bl	89d8 <run_callbacks>
#if 1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    8c4e:	bics	r7, r4
    8c50:	bne.n	8c38 <usb_isr+0x188>
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
    8c52:	uxth	r5, r5
				while(rx) {
    8c54:	cmp	r5, #0
    8c56:	beq.n	8b84 <usb_isr+0xd4>
    8c58:	ldr	r6, [pc, #336]	; (8dac <usb_isr+0x2fc>)
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
					rx &= ~(1<<p);
    8c5a:	movs	r7, #1
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
    8c5c:	rbit	r4, r5
    8c60:	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2);
    8c64:	add.w	r0, r6, r4, lsl #7
					rx &= ~(1<<p);
    8c68:	lsl.w	r4, r7, r4

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
    8c6c:	bl	89d8 <run_callbacks>
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
    8c70:	bics	r5, r4
    8c72:	bne.n	8c5c <usb_isr+0x1ac>
    8c74:	b.n	8b84 <usb_isr+0xd4>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
    8c76:	ldr	r2, [pc, #332]	; (8dc4 <usb_isr+0x314>)
    8c78:	strb	r3, [r2, #0]
    8c7a:	b.n	8bf0 <usb_isr+0x140>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    8c7c:	movw	r7, #8225	; 0x2021
    8c80:	cmp	r1, r7
    8c82:	beq.n	8cfa <usb_isr+0x24a>
    8c84:	bhi.n	8d62 <usb_isr+0x2b2>
    8c86:	cmp.w	r1, #2176	; 0x880
    8c8a:	beq.w	8ecc <usb_isr+0x41c>
    8c8e:	cmp.w	r1, #2304	; 0x900
    8c92:	bne.n	8d02 <usb_isr+0x252>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    8c94:	ubfx	r0, r0, #16, #8
    8c98:	ldr	r1, [pc, #308]	; (8dd0 <usb_isr+0x320>)
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    8c9a:	mov.w	r2, #13107400	; 0xc800c8
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    8c9e:	ldr	r7, [pc, #308]	; (8dd4 <usb_isr+0x324>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    8ca0:	strb	r0, [r1, #0]
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
		#endif
		#if defined(ENDPOINT5_CONFIG)
		USB1_ENDPTCTRL5 = ENDPOINT5_CONFIG;
    8ca2:	mov.w	r1, #13369548	; 0xcc00cc
    8ca6:	str	r3, [sp, #4]
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    8ca8:	str.w	r7, [r5, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    8cac:	str.w	r2, [r5, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    8cb0:	str.w	r2, [r5, #464]	; 0x1d0
		#endif
		#if defined(ENDPOINT5_CONFIG)
		USB1_ENDPTCTRL5 = ENDPOINT5_CONFIG;
    8cb4:	str.w	r1, [r5, #468]	; 0x1d4
		#endif
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    8cb8:	bl	8538 <usb_serial_configure>
		#endif
		#if defined(AUDIO_INTERFACE)
		usb_audio_configure();
		#endif
		#if defined(MTP_INTERFACE)
		usb_mtp_configure();
    8cbc:	bl	9e6c <usb_mtp_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8cc0:	ldr	r2, [pc, #276]	; (8dd8 <usb_isr+0x328>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    8cc2:	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8cc4:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8cc6:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    8cc8:	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8cca:	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8ccc:	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    8cce:	str	r3, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8cd0:	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    8cd4:	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    8cd8:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    8cda:	orr.w	r2, r1, #65536	; 0x10000
    8cde:	str.w	r2, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    8ce2:	ldr	r2, [pc, #232]	; (8dcc <usb_isr+0x31c>)
    8ce4:	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    8ce6:	ldr.w	r3, [r4, #432]	; 0x1b0
    8cea:	cmp	r3, #0
    8cec:	bne.n	8ce6 <usb_isr+0x236>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    8cee:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    8cf2:	cmp	r3, #0
    8cf4:	bne.w	8adc <usb_isr+0x2c>
    8cf8:	b.n	8b7a <usb_isr+0xca>
		// fall through to next case, to always send ZLP ACK
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    8cfa:	lsrs	r1, r2, #16
    8cfc:	cmp	r1, #7
    8cfe:	beq.w	8f6e <usb_isr+0x4be>
			return;
		}
		break;
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    8d02:	str.w	fp, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    8d06:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    8d0a:	cmp	r3, #0
    8d0c:	bne.w	8adc <usb_isr+0x2c>
    8d10:	b.n	8b7a <usb_isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    8d12:	movw	r7, #770	; 0x302
    8d16:	cmp	r1, r7
    8d18:	beq.w	8e6c <usb_isr+0x3bc>
    8d1c:	cmp.w	r1, #1280	; 0x500
    8d20:	bne.n	8d02 <usb_isr+0x252>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8d22:	ldr	r2, [pc, #180]	; (8dd8 <usb_isr+0x328>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8d24:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8d26:	movs	r7, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    8d28:	str	r3, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    8d2a:	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8d2c:	str	r7, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8d2e:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8d30:	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    8d34:	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    8d38:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    8d3a:	orr.w	r3, r1, #65536	; 0x10000
    8d3e:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    8d42:	ldr.w	r3, [r4, #432]	; 0x1b0
    8d46:	cmp	r3, #0
    8d48:	bne.n	8d42 <usb_isr+0x292>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    8d4a:	lsrs	r3, r0, #16
    8d4c:	lsls	r3, r3, #25
    8d4e:	orr.w	r3, r3, #16777216	; 0x1000000
    8d52:	str.w	r3, [r5, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    8d56:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    8d5a:	cmp	r3, #0
    8d5c:	bne.w	8adc <usb_isr+0x2c>
    8d60:	b.n	8b7a <usb_isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    8d62:	movw	r3, #8737	; 0x2221
    8d66:	cmp	r1, r3
    8d68:	beq.n	8e54 <usb_isr+0x3a4>
    8d6a:	movw	r3, #8993	; 0x2321
    8d6e:	cmp	r1, r3
    8d70:	bne.n	8d02 <usb_isr+0x252>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8d72:	ldr	r3, [pc, #100]	; (8dd8 <usb_isr+0x328>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8d74:	movs	r2, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    8d76:	movs	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8d78:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    8d7a:	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8d7c:	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8d7e:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    8d80:	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8d82:	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    8d86:	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    8d8a:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    8d8c:	orr.w	r3, r2, #65536	; 0x10000
    8d90:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    8d94:	ldr.w	r3, [r4, #432]	; 0x1b0
    8d98:	cmp	r3, #0
    8d9a:	bne.n	8d94 <usb_isr+0x2e4>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    8d9c:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    8da0:	cmp	r3, #0
    8da2:	bne.w	8adc <usb_isr+0x2c>
    8da6:	b.n	8b7a <usb_isr+0xca>
    8da8:	.word	0x402e0000
    8dac:	.word	0x20000000
    8db0:	.word	0x402e01c0
    8db4:	.word	0x2000c6b0
    8db8:	.word	0x2000c648
    8dbc:	.word	0x2000c730
    8dc0:	.word	0x2000c734
    8dc4:	.word	0x2000f1cf
    8dc8:	.word	0x2000f1d0
    8dcc:	.word	0x2000c644
    8dd0:	.word	0x2000f1ce
    8dd4:	.word	0x00cc0002
    8dd8:	.word	0x2000f200
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    8ddc:	ldr	r2, [pc, #724]	; (90b4 <usb_isr+0x604>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    8dde:	movs	r1, #2
    8de0:	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    8de2:	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    8de4:	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    8de6:	bl	8a10 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    8dea:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    8dee:	cmp	r3, #0
    8df0:	bne.w	8adc <usb_isr+0x2c>
    8df4:	b.n	8b7a <usb_isr+0xca>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    8df6:	uxth	r2, r2
    8df8:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    8dfc:	cmp	r3, #7
    8dfe:	bhi.n	8d02 <usb_isr+0x252>
		dir = setup.wIndex & 0x80;
		if (dir) {
    8e00:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    8e04:	mov.w	r3, r3, lsl #2
    8e08:	ldr	r2, [pc, #684]	; (90b8 <usb_isr+0x608>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    8e0a:	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8e0e:	mov.w	r0, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    8e12:	add	r2, r3
    8e14:	ldr	r3, [r2, #0]
    8e16:	ite	ne
    8e18:	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    8e1c:	biceq.w	r3, r3, #1
    8e20:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8e22:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8e24:	ldr	r3, [pc, #660]	; (90bc <usb_isr+0x60c>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    8e26:	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    8e28:	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8e2a:	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8e2c:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8e2e:	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    8e32:	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    8e36:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    8e38:	orr.w	r3, r2, #65536	; 0x10000
    8e3c:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    8e40:	ldr.w	r3, [r4, #432]	; 0x1b0
    8e44:	cmp	r3, #0
    8e46:	bne.n	8e40 <usb_isr+0x390>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    8e48:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    8e4c:	cmp	r3, #0
    8e4e:	bne.w	8adc <usb_isr+0x2c>
    8e52:	b.n	8b7a <usb_isr+0xca>
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    8e54:	uxth	r2, r2
    8e56:	cmp	r2, #1
    8e58:	bne.n	8d72 <usb_isr+0x2c2>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    8e5a:	ldr	r3, [pc, #612]	; (90c0 <usb_isr+0x610>)
			usb_cdc_line_rtsdtr = setup.wValue;
    8e5c:	ubfx	r0, r0, #16, #8
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    8e60:	ldr	r2, [pc, #608]	; (90c4 <usb_isr+0x614>)
    8e62:	ldr	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    8e64:	ldr	r3, [pc, #608]	; (90c8 <usb_isr+0x618>)
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    8e66:	str	r1, [r2, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    8e68:	strb	r0, [r3, #0]
    8e6a:	b.n	8d72 <usb_isr+0x2c2>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    8e6c:	uxth	r2, r2
    8e6e:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    8e72:	cmp	r3, #7
    8e74:	bhi.w	8d02 <usb_isr+0x252>
		dir = setup.wIndex & 0x80;
		if (dir) {
    8e78:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    8e7c:	mov.w	r3, r3, lsl #2
    8e80:	ldr	r2, [pc, #564]	; (90b8 <usb_isr+0x608>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    8e82:	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8e86:	mov.w	r0, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    8e8a:	add	r2, r3
    8e8c:	ldr	r3, [r2, #0]
    8e8e:	ite	ne
    8e90:	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    8e94:	orreq.w	r3, r3, #1
    8e98:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8e9a:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8e9c:	ldr	r3, [pc, #540]	; (90bc <usb_isr+0x60c>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    8e9e:	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    8ea0:	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8ea2:	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8ea4:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8ea6:	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    8eaa:	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    8eae:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    8eb0:	orr.w	r3, r2, #65536	; 0x10000
    8eb4:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    8eb8:	ldr.w	r3, [r4, #432]	; 0x1b0
    8ebc:	cmp	r3, #0
    8ebe:	bne.n	8eb8 <usb_isr+0x408>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    8ec0:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    8ec4:	cmp	r3, #0
    8ec6:	bne.w	8adc <usb_isr+0x2c>
    8eca:	b.n	8b7a <usb_isr+0xca>
		endpoint_queue_head[2].unused1 = (uint32_t)experimental_buffer;
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    8ecc:	ldr	r2, [pc, #508]	; (90cc <usb_isr+0x61c>)
		endpoint0_transmit(reply_buffer, 1, 0);
    8ece:	movs	r1, #1
		endpoint_queue_head[2].unused1 = (uint32_t)experimental_buffer;
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    8ed0:	ldr	r3, [pc, #480]	; (90b4 <usb_isr+0x604>)
    8ed2:	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    8ed4:	mov	r0, r3
		endpoint_queue_head[2].unused1 = (uint32_t)experimental_buffer;
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    8ed6:	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    8ed8:	bl	8a10 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    8edc:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    8ee0:	cmp	r3, #0
    8ee2:	bne.w	8adc <usb_isr+0x2c>
    8ee6:	b.n	8b7a <usb_isr+0xca>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    8ee8:	ldr	r3, [pc, #484]	; (90d0 <usb_isr+0x620>)
    8eea:	ldr	r1, [r3, #4]
    8eec:	cmp	r1, #0
    8eee:	beq.w	8d02 <usb_isr+0x252>
    8ef2:	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    8ef4:	uxth.w	lr, r2
    8ef8:	b.n	8f04 <usb_isr+0x454>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    8efa:	adds	r3, #12
    8efc:	ldr	r1, [r3, #4]
    8efe:	cmp	r1, #0
    8f00:	beq.w	8d02 <usb_isr+0x252>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    8f04:	ldrh	r7, [r3, #0]
    8f06:	cmp	r7, r0
    8f08:	bne.n	8efa <usb_isr+0x44a>
    8f0a:	ldrh	r7, [r3, #2]
    8f0c:	cmp	r7, lr
    8f0e:	bne.n	8efa <usb_isr+0x44a>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
    8f10:	lsrs	r7, r0, #8
    8f12:	cmp	r7, #3
    8f14:	beq.w	908c <usb_isr+0x5dc>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
    8f18:	ldrh	r3, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    8f1a:	lsrs	r2, r2, #16
    8f1c:	cmp	r3, r2
    8f1e:	it	cs
    8f20:	movcs	r3, r2

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
    8f22:	cmp.w	r0, #512	; 0x200
    8f26:	beq.w	906e <usb_isr+0x5be>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
    8f2a:	cmp.w	r0, #1792	; 0x700
    8f2e:	beq.w	9048 <usb_isr+0x598>
    8f32:	ldr	r7, [pc, #416]	; (90d4 <usb_isr+0x624>)
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    8f34:	mov	r2, r3
    8f36:	str	r3, [sp, #4]
    8f38:	mov	r0, r7
    8f3a:	bl	80b4 <memcpy>
    8f3e:	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    8f40:	bic.w	r2, r7, #31
	uint32_t end_addr = (uint32_t)addr + size;
    8f44:	add	r7, r3
	asm volatile("": : :"memory");
	asm("dsb");
    8f46:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    8f4a:	ldr	r1, [pc, #396]	; (90d8 <usb_isr+0x628>)
    8f4c:	str	r2, [r1, #0]
		location += 32;
    8f4e:	adds	r2, #32
	} while (location < end_addr);
    8f50:	cmp	r7, r2
    8f52:	bhi.n	8f4a <usb_isr+0x49a>
	asm("dsb");
    8f54:	dsb	sy
	asm("isb");
    8f58:	isb	sy
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    8f5c:	ldr	r0, [pc, #372]	; (90d4 <usb_isr+0x624>)
    8f5e:	mov	r1, r3
    8f60:	bl	8a10 <endpoint0_transmit.constprop.1>
    8f64:	b.n	8b72 <usb_isr+0xc2>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    8f66:	lsls	r3, r1, #31
    8f68:	bpl.w	8b6a <usb_isr+0xba>
    8f6c:	b.n	8b66 <usb_isr+0xb6>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    8f6e:	ldr	r7, [pc, #364]	; (90dc <usb_isr+0x62c>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    8f70:	mov.w	lr, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    8f74:	str	r3, [r6, #12]
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8f76:	ldr	r1, [pc, #360]	; (90e0 <usb_isr+0x630>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    8f78:	ldr	r3, [pc, #360]	; (90e4 <usb_isr+0x634>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    8f7a:	str	r0, [r7, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    8f7c:	str.w	lr, [r3]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8f80:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    8f82:	str	r3, [r6, #8]
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
    8f84:	ldr	r1, [pc, #352]	; (90e8 <usb_isr+0x638>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    8f86:	ldr.w	r0, [r5, #432]	; 0x1b0
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    8f8a:	str	r2, [r7, #4]
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    8f8c:	add.w	r7, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    8f90:	orr.w	r2, r0, lr
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    8f94:	str	r1, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    8f96:	add.w	lr, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    8f9a:	add.w	r0, r1, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    8f9e:	add.w	r1, r1, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    8fa2:	str.w	r2, [r5, #432]	; 0x1b0
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    8fa6:	str	r7, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    8fa8:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    8fac:	str	r0, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    8fae:	str	r1, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    8fb0:	ldr.w	r3, [r4, #432]	; 0x1b0
    8fb4:	cmp	r3, #0
    8fb6:	bne.n	8fb0 <usb_isr+0x500>
	}
	endpoint0_transfer_ack.next = 1;
    8fb8:	ldr	r2, [pc, #256]	; (90bc <usb_isr+0x60c>)
    8fba:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8fbc:	movw	r1, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    8fc0:	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8fc2:	str	r0, [r2, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    8fc4:	mov.w	r0, #65536	; 0x10000
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    8fc8:	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8fca:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8fcc:	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    8fd0:	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    8fd4:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    8fd6:	orr.w	r3, r1, r0
    8fda:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    8fde:	str.w	r0, [r9]
	while (USB1_ENDPTPRIME) ;
    8fe2:	ldr.w	r3, [r4, #432]	; 0x1b0
    8fe6:	cmp	r3, #0
    8fe8:	bne.n	8fe2 <usb_isr+0x532>
    8fea:	b.n	8b72 <usb_isr+0xc2>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    8fec:	ldr	r0, [pc, #236]	; (90dc <usb_isr+0x62c>)
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    8fee:	movw	r4, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    8ff2:	movs	r6, #0

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    8ff4:	ldrh	r5, [r0, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    8ff6:	str	r6, [r1, #0]

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    8ff8:	cmp	r5, r4

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    8ffa:	ldr	r0, [r0, #4]
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    8ffc:	bne.w	8c26 <usb_isr+0x176>
    9000:	uxth	r1, r0
    9002:	cmp	r1, #1
    9004:	bne.w	8c26 <usb_isr+0x176>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    9008:	ldr	r1, [pc, #220]	; (90e8 <usb_isr+0x638>)
    900a:	ldr	r4, [pc, #224]	; (90ec <usb_isr+0x63c>)
    900c:	ldmia	r1, {r0, r1}
    900e:	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    9010:	cmp	r0, #134	; 0x86
	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    9012:	str	r0, [r4, #0]
    9014:	strh	r1, [r4, #4]
    9016:	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    9018:	bne.w	8c26 <usb_isr+0x176>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
    901c:	cpsid	i
	sof_usage |= (1 << interface);
    901e:	ldr	r0, [pc, #208]	; (90f0 <usb_isr+0x640>)
    9020:	ldrb	r1, [r0, #0]
    9022:	orr.w	r1, r1, #8
    9026:	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    9028:	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    902c:	lsls	r0, r1, #24
    902e:	bmi.n	903e <usb_isr+0x58e>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    9030:	orr.w	r1, r1, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    9034:	movs	r0, #128	; 0x80
    9036:	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    903a:	str.w	r1, [r2, #328]	; 0x148
	}
	__enable_irq();
    903e:	cpsie	i
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    9040:	ldr	r2, [pc, #176]	; (90f4 <usb_isr+0x644>)
    9042:	movs	r1, #80	; 0x50
    9044:	strb	r1, [r2, #0]
    9046:	b.n	8c26 <usb_isr+0x176>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    9048:	ldr	r0, [pc, #172]	; (90f8 <usb_isr+0x648>)
					memcpy(usb_descriptor_buffer, src, datalen);
    904a:	mov	r2, r3
    904c:	ldr	r7, [pc, #132]	; (90d4 <usb_isr+0x624>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    904e:	ldrb.w	lr, [r0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
    9052:	ldr	r1, [pc, #168]	; (90fc <usb_isr+0x64c>)
    9054:	ldr	r0, [pc, #168]	; (9100 <usb_isr+0x650>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
    9056:	str	r3, [sp, #4]
    9058:	cmp.w	lr, #0
    905c:	it	eq
    905e:	moveq	r1, r0
    9060:	mov	r0, r7
    9062:	bl	80b4 <memcpy>
					usb_descriptor_buffer[1] = 7;
    9066:	movs	r2, #7
    9068:	ldr	r3, [sp, #4]
    906a:	strb	r2, [r7, #1]
    906c:	b.n	8f40 <usb_isr+0x490>

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    906e:	ldr	r0, [pc, #136]	; (90f8 <usb_isr+0x648>)
					memcpy(usb_descriptor_buffer, src, datalen);
    9070:	mov	r2, r3
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    9072:	ldr	r1, [pc, #140]	; (9100 <usb_isr+0x650>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    9074:	ldrb	r7, [r0, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    9076:	ldr	r0, [pc, #132]	; (90fc <usb_isr+0x64c>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
    9078:	str	r3, [sp, #4]
    907a:	cmp	r7, #0
    907c:	it	eq
    907e:	moveq	r1, r0
    9080:	ldr	r0, [pc, #80]	; (90d4 <usb_isr+0x624>)
    9082:	bl	80b4 <memcpy>
    9086:	ldr	r7, [pc, #76]	; (90d4 <usb_isr+0x624>)
    9088:	ldr	r3, [sp, #4]
    908a:	b.n	8f40 <usb_isr+0x490>
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    908c:	lsrs	r2, r2, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    908e:	ldrb	r3, [r1, #0]
    9090:	cmp	r3, r2
    9092:	it	cs
    9094:	movcs	r3, r2
    9096:	b.n	8f2a <usb_isr+0x47a>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
    9098:	ldr	r1, [pc, #84]	; (90f0 <usb_isr+0x640>)
    909a:	ldrb	r2, [r1, #0]
    909c:	and.w	r2, r2, #247	; 0xf7
    90a0:	strb	r2, [r1, #0]
	if (sof_usage == 0) {
    90a2:	cbnz	r2, 90b0 <usb_isr+0x600>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    90a4:	ldr.w	r2, [r3, #328]	; 0x148
    90a8:	bic.w	r2, r2, #128	; 0x80
    90ac:	str.w	r2, [r3, #328]	; 0x148
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				_reboot_Teensyduino_();
    90b0:	bl	f478 <___reboot_Teensyduino__veneer>
    90b4:	.word	0x2000c6b0
    90b8:	.word	0x402e01c0
    90bc:	.word	0x2000f200
    90c0:	.word	0x2000c720
    90c4:	.word	0x2000f228
    90c8:	.word	0x2000f1cd
    90cc:	.word	0x2000f1ce
    90d0:	.word	0x20000e10
    90d4:	.word	0x20204000
    90d8:	.word	0xe000ef70
    90dc:	.word	0x20004580
    90e0:	.word	0x00070080
    90e4:	.word	0x2000f1e0
    90e8:	.word	0x2000c63c
    90ec:	.word	0x2000f220
    90f0:	.word	0x2000f1c8
    90f4:	.word	0x2000f1d0
    90f8:	.word	0x2000f1cf
    90fc:	.word	0x60001ec4
    9100:	.word	0x60001f30

00009104 <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    9104:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    9106:	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    910a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    910e:	ite	ne
    9110:	movne	r7, #0
    9112:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    9116:	cmp	r2, #3
    9118:	bls.n	911e <usb_config_rx+0x1a>
    911a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    911e:	mov.w	r9, r0, lsl #7
    9122:	ldr.w	sl, [pc, #64]	; 9164 <usb_config_rx+0x60>
    9126:	mov	r5, r1
    9128:	mov	r4, r0
    912a:	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    912e:	movs	r1, #0
    9130:	movs	r2, #64	; 0x40
    9132:	mov	r8, r3
    9134:	mov	r0, r6
    9136:	bl	b9ec <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    913a:	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    913c:	orr.w	r1, r7, r5, lsl #16
    9140:	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    9144:	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    9148:	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    914a:	cmp.w	r8, #0
    914e:	beq.n	911a <usb_config_rx+0x16>
    9150:	ldr	r3, [pc, #12]	; (9160 <usb_config_rx+0x5c>)
    9152:	lsls	r0, r4
    9154:	ldr	r4, [r3, #0]
    9156:	orrs	r0, r4
    9158:	str	r0, [r3, #0]
    915a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    915e:	nop
    9160:	.word	0x2000c648
    9164:	.word	0x20000000

00009168 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    9168:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    916a:	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    916e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    9172:	ite	ne
    9174:	movne	r7, #0
    9176:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    917a:	cmp	r2, #3
    917c:	bls.n	9182 <usb_config_tx+0x1a>
    917e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    9182:	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    9184:	lsls	r5, r0, #7
    9186:	ldr.w	r9, [pc, #68]	; 91cc <usb_config_tx+0x64>
    918a:	mov	r8, r1
    918c:	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    918e:	movs	r1, #0
    9190:	mov	r4, r0
    9192:	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    9194:	add.w	sl, r9, r5
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    9198:	mov	r0, sl
    919a:	bl	b9ec <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    919e:	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    91a0:	orr.w	r1, r7, r8, lsl #16
    91a4:	str.w	r1, [r9, r5]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    91a8:	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    91ac:	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    91b0:	cmp	r6, #0
    91b2:	beq.n	917e <usb_config_tx+0x16>
    91b4:	add.w	r0, r4, #16
    91b8:	ldr	r3, [pc, #12]	; (91c8 <usb_config_tx+0x60>)
    91ba:	lsls	r2, r0
    91bc:	ldr	r0, [r3, #0]
    91be:	orrs	r2, r0
    91c0:	str	r2, [r3, #0]
    91c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    91c6:	nop
    91c8:	.word	0x2000c648
    91cc:	.word	0x20000000

000091d0 <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    91d0:	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    91d2:	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    91d4:	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    91d6:	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    91da:	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    91dc:	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    91de:	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    91e0:	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    91e4:	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    91e8:	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    91ec:	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    91f0:	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    91f2:	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    91f4:	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    91f6:	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    91f8:	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    91fa:	pop	{r4, r5, r6, r7}
    91fc:	bx	lr
    91fe:	nop

00009200 <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    9200:	subs	r3, r0, #2
    9202:	cmp	r3, #3
    9204:	bls.n	9208 <usb_transmit+0x8>
    9206:	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    9208:	ldr	r3, [pc, #24]	; (9224 <usb_transmit+0x24>)
    920a:	mov	r2, r1
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    920c:	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    920e:	add.w	r4, r0, #16
    9212:	movs	r5, #1
    9214:	add.w	r0, r3, r0, lsl #7
    9218:	lsl.w	r1, r5, r4
    921c:	adds	r0, #64	; 0x40
}
    921e:	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    9220:	b.w	8948 <schedule_transfer>
    9224:	.word	0x20000000

00009228 <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    9228:	subs	r3, r0, #2
    922a:	cmp	r3, #3
    922c:	bls.n	9230 <usb_receive+0x8>
    922e:	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    9230:	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    9232:	ldr	r3, [pc, #20]	; (9248 <usb_receive+0x20>)
    9234:	movs	r4, #1
    9236:	mov	r2, r1
    9238:	lsl.w	r1, r4, r0
    923c:	add.w	r0, r3, r0, lsl #7
}
    9240:	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    9244:	b.w	8948 <schedule_transfer>
    9248:	.word	0x20000000

0000924c <usb_transfer_status>:
uint32_t usb_transfer_status(const transfer_t *transfer)
{
#if defined(USB_MTPDISK) || defined(USB_MTPDISK_SERIAL)
	uint32_t status, cmd;
	//int count=0;
	cmd = USB1_USBCMD;
    924c:	ldr	r2, [pc, #32]	; (9270 <usb_transfer_status+0x24>)
    924e:	ldr.w	r3, [r2, #320]	; 0x140
	while (1) {
		__disable_irq();
    9252:	cpsid	i
		USB1_USBCMD = cmd | USB_USBCMD_ATDTW;
    9254:	orr.w	r3, r3, #16384	; 0x4000
    9258:	str.w	r3, [r2, #320]	; 0x140
		status = transfer->status;
    925c:	ldr	r1, [r0, #4]
		cmd = USB1_USBCMD;
    925e:	ldr.w	r3, [r2, #320]	; 0x140
		__enable_irq();
    9262:	cpsie	i
		if (cmd & USB_USBCMD_ATDTW) return status;
    9264:	tst.w	r3, #16384	; 0x4000
    9268:	beq.n	9252 <usb_transfer_status+0x6>
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
#endif
}
    926a:	mov	r0, r1
    926c:	bx	lr
    926e:	nop
    9270:	.word	0x402e0000

00009274 <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    9274:	cmp	r0, #0
    9276:	beq.n	9328 <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    9278:	movs	r2, #1
{

}*/

void delay(uint32_t msec)
{
    927a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    927e:	sub	sp, #20
    9280:	mov	fp, r0
    9282:	ldr	r4, [pc, #168]	; (932c <delay+0xb8>)
    9284:	ldr	r5, [pc, #168]	; (9330 <delay+0xbc>)
    9286:	ldr	r6, [pc, #172]	; (9334 <delay+0xc0>)
    9288:	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    928c:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    9290:	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    9292:	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    9294:	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    9298:	cmp	r1, #0
    929a:	bne.n	928c <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    929c:	ldr	r7, [pc, #152]	; (9338 <delay+0xc4>)
    929e:	strd	r8, r9, [sp, #8]
    92a2:	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    92a4:	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    92a6:	ldr	r2, [pc, #148]	; (933c <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    92a8:	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    92ac:	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    92ae:	ldr	r2, [r2, #0]
    92b0:	movs	r7, #1
    92b2:	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
    92b6:	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    92ba:	mov	r8, r3
	if (frac > 1000) frac = 1000;
    92bc:	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    92be:	cmp	r3, r1
    92c0:	it	eq
    92c2:	cmpeq	r2, r8
    92c4:	ite	cs
    92c6:	movcs	sl, r8
    92c8:	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    92ca:	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    92ce:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    92d2:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    92d4:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    92d6:	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    92da:	cmp	r3, #0
    92dc:	bne.n	92ce <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    92de:	ldr	r0, [sp, #4]
    92e0:	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    92e2:	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    92e4:	ldr	r0, [pc, #84]	; (933c <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    92e6:	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    92ea:	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    92ec:	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    92f0:	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
    92f4:	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    92f8:	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    92fc:	mov	r8, r1
	if (frac > 1000) frac = 1000;
    92fe:	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    9300:	cmp	r1, r3
    9302:	it	eq
    9304:	cmpeq	r0, r8
    9306:	ite	cs
    9308:	movcs	r3, r8
    930a:	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    930c:	add	r2, r3
    930e:	cmp	r2, lr
    9310:	bcc.n	9322 <delay+0xae>
			if (--msec == 0) return;
    9312:	subs.w	fp, fp, #1
			start += 1000;
    9316:	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
    931a:	bne.n	92ce <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
    931c:	add	sp, #20
    931e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
    9322:	bl	a124 <yield>
	}
    9326:	b.n	92ce <delay+0x5a>
    9328:	bx	lr
    932a:	nop
    932c:	.word	0x2000f22c
    9330:	.word	0x2000c720
    9334:	.word	0x2000c71c
    9338:	.word	0xe0001004
    933c:	.word	0x2000c714

00009340 <micros>:
	// TODO...
}

uint32_t micros(void)
{
    9340:	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
    9344:	ldr	r2, [pc, #72]	; (9390 <micros+0x50>)
    9346:	movs	r6, #1
    9348:	ldr	r5, [pc, #72]	; (9394 <micros+0x54>)
    934a:	ldr	r4, [pc, #76]	; (9398 <micros+0x58>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    934c:	ldrex	r3, [r2]
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    9350:	ldr	r1, [r5, #0]
		scc = systick_cycle_count;
    9352:	ldr	r0, [r4, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    9354:	strex	r3, r6, [r2]
	} while ( __STREXW(1, &systick_safe_read));
    9358:	cmp	r3, #0
    935a:	bne.n	934c <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    935c:	ldr	r2, [pc, #60]	; (939c <micros+0x5c>)
    935e:	ldr	r6, [r2, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    9360:	ldr	r7, [pc, #60]	; (93a0 <micros+0x60>)
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    9362:	subs	r2, r6, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
    9364:	mov.w	r9, #0
    9368:	mov.w	r8, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    936c:	ldr	r6, [r7, #0]
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
    936e:	mov.w	r0, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    9372:	cmp	r9, r3
    9374:	umull	r6, r7, r2, r6
    9378:	it	eq
    937a:	cmpeq	r8, r7
    937c:	mov	r4, r7
    937e:	ite	cs
    9380:	movcs	r4, r7
    9382:	movcc	r4, r0
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
}
    9384:	mla	r0, r0, r1, r4
    9388:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    938c:	bx	lr
    938e:	nop
    9390:	.word	0x2000f22c
    9394:	.word	0x2000c720
    9398:	.word	0x2000c71c
    939c:	.word	0xe0001004
    93a0:	.word	0x2000c714

000093a4 <unused_interrupt_vector>:
	const uint32_t *stack;
	struct arm_fault_info_struct *info;
	const uint32_t *p, *end;

	// disallow any nested interrupts
	__disable_irq();
    93a4:	cpsid	i
	// store crash report info
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    93a6:	mrs	r3, IPSR
	info = (struct arm_fault_info_struct *)0x2027FF80;
	info->ipsr = ipsr;
    93aa:	ldr	r5, [pc, #292]	; (94d0 <unused_interrupt_vector+0x12c>)
    93ac:	str	r3, [r5, #4]
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
    93ae:	mrs	r3, MSP
	info->cfsr = SCB_CFSR;
    93b2:	ldr	r4, [pc, #288]	; (94d4 <unused_interrupt_vector+0x130>)
	info->bfar = SCB_BFAR;
	info->ret = stack[6];
	info->xpsr = stack[7];
	info->temp = tempmonGetTemp();
	info->time = rtc_get();
	info->len = sizeof(*info) / 4;
    93b4:	mov	r6, r5
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
	info = (struct arm_fault_info_struct *)0x2027FF80;
	info->ipsr = ipsr;
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
	info->cfsr = SCB_CFSR;
	info->hfsr = SCB_HFSR;
    93b6:	ldr	r0, [pc, #288]	; (94d8 <unused_interrupt_vector+0x134>)
	info->mmfar = SCB_MMFAR;
    93b8:	ldr	r1, [pc, #288]	; (94dc <unused_interrupt_vector+0x138>)
	info->bfar = SCB_BFAR;
    93ba:	ldr	r2, [pc, #292]	; (94e0 <unused_interrupt_vector+0x13c>)
	// store crash report info
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
	info = (struct arm_fault_info_struct *)0x2027FF80;
	info->ipsr = ipsr;
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
	info->cfsr = SCB_CFSR;
    93bc:	ldr	r4, [r4, #0]
	info->hfsr = SCB_HFSR;
    93be:	ldr	r0, [r0, #0]
	info->mmfar = SCB_MMFAR;
    93c0:	ldr	r1, [r1, #0]
	info->bfar = SCB_BFAR;
    93c2:	ldr	r2, [r2, #0]
	info = (struct arm_fault_info_struct *)0x2027FF80;
	info->ipsr = ipsr;
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
	info->cfsr = SCB_CFSR;
	info->hfsr = SCB_HFSR;
	info->mmfar = SCB_MMFAR;
    93c4:	str	r1, [r5, #16]
	// store crash report info
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
	info = (struct arm_fault_info_struct *)0x2027FF80;
	info->ipsr = ipsr;
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
	info->cfsr = SCB_CFSR;
    93c6:	str	r4, [r5, #8]
	info->hfsr = SCB_HFSR;
    93c8:	str	r0, [r5, #12]
	info->mmfar = SCB_MMFAR;
	info->bfar = SCB_BFAR;
    93ca:	str	r2, [r5, #20]
	info->ret = stack[6];
    93cc:	ldr	r2, [r3, #24]
	crc = 0xFFFFFFFF;
	p = (uint32_t *)info;
	end = p + (sizeof(*info) / 4 - 1);
	while (p < end) {
		crc ^= *p++;
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    93ce:	ldr	r4, [pc, #276]	; (94e4 <unused_interrupt_vector+0x140>)
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
	info->cfsr = SCB_CFSR;
	info->hfsr = SCB_HFSR;
	info->mmfar = SCB_MMFAR;
	info->bfar = SCB_BFAR;
	info->ret = stack[6];
    93d0:	str	r2, [r5, #24]
	info->xpsr = stack[7];
    93d2:	ldr	r3, [r3, #28]
	info->len = sizeof(*info) / 4;
	// add CRC to crash report
	crc = 0xFFFFFFFF;
	p = (uint32_t *)info;
	end = p + (sizeof(*info) / 4 - 1);
	while (p < end) {
    93d4:	ldr	r7, [pc, #272]	; (94e8 <unused_interrupt_vector+0x144>)
	info->cfsr = SCB_CFSR;
	info->hfsr = SCB_HFSR;
	info->mmfar = SCB_MMFAR;
	info->bfar = SCB_BFAR;
	info->ret = stack[6];
	info->xpsr = stack[7];
    93d6:	str	r3, [r5, #28]
	info->temp = tempmonGetTemp();
    93d8:	bl	9a18 <tempmonGetTemp>
    93dc:	vstr	s0, [r5, #32]
	info->time = rtc_get();
    93e0:	bl	9564 <rtc_get>
	info->len = sizeof(*info) / 4;
    93e4:	movs	r3, #11
	// add CRC to crash report
	crc = 0xFFFFFFFF;
    93e6:	mov.w	r2, #4294967295
	info->mmfar = SCB_MMFAR;
	info->bfar = SCB_BFAR;
	info->ret = stack[6];
	info->xpsr = stack[7];
	info->temp = tempmonGetTemp();
	info->time = rtc_get();
    93ea:	str	r0, [r5, #36]	; 0x24
	info->len = sizeof(*info) / 4;
    93ec:	mov	r1, r3
    93ee:	str	r3, [r5, #0]
	// add CRC to crash report
	crc = 0xFFFFFFFF;
	p = (uint32_t *)info;
	end = p + (sizeof(*info) / 4 - 1);
	while (p < end) {
		crc ^= *p++;
    93f0:	eors	r2, r1
    93f2:	movs	r1, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    93f4:	and.w	r3, r2, #1
    93f8:	subs	r1, #1
    93fa:	mul.w	r3, r4, r3
    93fe:	eor.w	r2, r3, r2, lsr #1
    9402:	bne.n	93f4 <unused_interrupt_vector+0x50>
	info->len = sizeof(*info) / 4;
	// add CRC to crash report
	crc = 0xFFFFFFFF;
	p = (uint32_t *)info;
	end = p + (sizeof(*info) / 4 - 1);
	while (p < end) {
    9404:	cmp	r6, r7
    9406:	beq.n	940e <unused_interrupt_vector+0x6a>
    9408:	ldr.w	r1, [r6, #4]!
    940c:	b.n	93f0 <unused_interrupt_vector+0x4c>
		crc ^= *p++;
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
	}
	info->crc = crc;
    940e:	ldr	r1, [pc, #192]	; (94d0 <unused_interrupt_vector+0x12c>)
    9410:	str	r2, [r1, #40]	; 0x28
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    9412:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    9416:	ldr	r3, [pc, #212]	; (94ec <unused_interrupt_vector+0x148>)
    9418:	ldr	r2, [pc, #212]	; (94f0 <unused_interrupt_vector+0x14c>)
    941a:	str	r1, [r3, #0]
    941c:	str	r2, [r3, #0]
		location += 32;
	} while (location < end_addr);
	asm("dsb");
    941e:	dsb	sy
	asm("isb");
    9422:	isb	sy
	//IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
	//IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
	//GPIO7_GDIR |= (1 << 3);

	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    9426:	ldr	r2, [pc, #204]	; (94f4 <unused_interrupt_vector+0x150>)
	PIT_MCR = PIT_MCR_MDIS;
    9428:	movs	r5, #2
    942a:	ldr	r4, [pc, #204]	; (94f8 <unused_interrupt_vector+0x154>)
	//IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
	//IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
	//GPIO7_GDIR |= (1 << 3);

	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    942c:	ldr	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    942e:	ldr	r1, [pc, #204]	; (94fc <unused_interrupt_vector+0x158>)
	//IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
	//IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
	//GPIO7_GDIR |= (1 << 3);

	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    9430:	orr.w	r3, r3, #12288	; 0x3000
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    9434:	ldr	r0, [pc, #200]	; (9500 <unused_interrupt_vector+0x15c>)
	//IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
	//IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
	//GPIO7_GDIR |= (1 << 3);

	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    9436:	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    9438:	str	r5, [r4, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    943a:	ldr	r3, [r2, #28]
    943c:	bic.w	r3, r3, #127	; 0x7f
    9440:	orr.w	r3, r3, #64	; 0x40
    9444:	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    9446:	ldr	r3, [r1, #0]
    9448:	cmp	r3, r0
    944a:	bhi.n	94ca <unused_interrupt_vector+0x126>
	PIT_MCR = 0;
    944c:	ldr	r2, [pc, #168]	; (94f8 <unused_interrupt_vector+0x154>)
    944e:	movs	r1, #0
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    9450:	movs	r0, #1
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    9452:	ldr	r6, [pc, #176]	; (9504 <unused_interrupt_vector+0x160>)
	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
	PIT_MCR = 0;
    9454:	str	r1, [r2, #0]
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
	PIT_TCTRL0 = PIT_TCTRL_TEN;
	// disable all NVIC interrupts, as usb_isr() might use __enable_irq()
	NVIC_ICER0 = 0xFFFFFFFF;
    9456:	mov.w	r3, #4294967295
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
    945a:	str.w	r1, [r2, #264]	; 0x108
	NVIC_ICER4 = 0xFFFFFFFF;

	// keep USB running, so any unsent Serial.print() actually arrives in
	// the Arduino Serial Monitor, and we remain responsive to Upload
	// without requiring manual press of Teensy's pushbutton
	count = 0;
    945e:	mov	r4, r1
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    9460:	str.w	r6, [r2, #256]	; 0x100
	// keep USB running, so any unsent Serial.print() actually arrives in
	// the Arduino Serial Monitor, and we remain responsive to Upload
	// without requiring manual press of Teensy's pushbutton
	count = 0;
	while (1) {
		if (PIT_TFLG0) {
    9464:	mov	r5, r2
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    9466:	str.w	r0, [r2, #264]	; 0x108
	// without requiring manual press of Teensy's pushbutton
	count = 0;
	while (1) {
		if (PIT_TFLG0) {
			//GPIO7_DR_TOGGLE = (1 << 3); // blink LED
			PIT_TFLG0 = 1;
    946a:	mov	r7, r0
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
	PIT_TCTRL0 = PIT_TCTRL_TEN;
	// disable all NVIC interrupts, as usb_isr() might use __enable_irq()
	NVIC_ICER0 = 0xFFFFFFFF;
    946c:	ldr.w	lr, [pc, #192]	; 9530 <unused_interrupt_vector+0x18c>
	NVIC_ICER1 = 0xFFFFFFFF;
    9470:	ldr	r6, [pc, #148]	; (9508 <unused_interrupt_vector+0x164>)
	NVIC_ICER2 = 0xFFFFFFFF;
    9472:	ldr	r0, [pc, #152]	; (950c <unused_interrupt_vector+0x168>)
	NVIC_ICER3 = 0xFFFFFFFF;
    9474:	ldr	r1, [pc, #152]	; (9510 <unused_interrupt_vector+0x16c>)
	NVIC_ICER4 = 0xFFFFFFFF;
    9476:	ldr	r2, [pc, #156]	; (9514 <unused_interrupt_vector+0x170>)
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
	PIT_TCTRL0 = PIT_TCTRL_TEN;
	// disable all NVIC interrupts, as usb_isr() might use __enable_irq()
	NVIC_ICER0 = 0xFFFFFFFF;
    9478:	str.w	r3, [lr]
	NVIC_ICER1 = 0xFFFFFFFF;
    947c:	str	r3, [r6, #0]
	NVIC_ICER2 = 0xFFFFFFFF;
    947e:	str	r3, [r0, #0]
	NVIC_ICER3 = 0xFFFFFFFF;
    9480:	str	r3, [r1, #0]
	NVIC_ICER4 = 0xFFFFFFFF;
    9482:	str	r3, [r2, #0]
    9484:	b.n	948a <unused_interrupt_vector+0xe6>
		if (PIT_TFLG0) {
			//GPIO7_DR_TOGGLE = (1 << 3); // blink LED
			PIT_TFLG0 = 1;
			if (++count >= 80) break;  // reboot after 8 seconds
		}
		usb_isr();
    9486:	bl	8ab0 <usb_isr>
	// keep USB running, so any unsent Serial.print() actually arrives in
	// the Arduino Serial Monitor, and we remain responsive to Upload
	// without requiring manual press of Teensy's pushbutton
	count = 0;
	while (1) {
		if (PIT_TFLG0) {
    948a:	ldr.w	r2, [r5, #268]	; 0x10c
    948e:	ldr	r3, [pc, #104]	; (94f8 <unused_interrupt_vector+0x154>)
    9490:	cmp	r2, #0
    9492:	beq.n	9486 <unused_interrupt_vector+0xe2>
			//GPIO7_DR_TOGGLE = (1 << 3); // blink LED
			PIT_TFLG0 = 1;
			if (++count >= 80) break;  // reboot after 8 seconds
    9494:	adds	r4, #1
	// without requiring manual press of Teensy's pushbutton
	count = 0;
	while (1) {
		if (PIT_TFLG0) {
			//GPIO7_DR_TOGGLE = (1 << 3); // blink LED
			PIT_TFLG0 = 1;
    9496:	str.w	r7, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    949a:	cmp	r4, #79	; 0x4f
    949c:	bls.n	9486 <unused_interrupt_vector+0xe2>
		//   Complete writes to SD card
		//   Flush/sync LittleFS
	}
	// turn off USB
	USB1_USBCMD = USB_USBCMD_RST;
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    949e:	ldr	r2, [pc, #120]	; (9518 <unused_interrupt_vector+0x174>)
		//   Transmit Serial1 - Serial8 data
		//   Complete writes to SD card
		//   Flush/sync LittleFS
	}
	// turn off USB
	USB1_USBCMD = USB_USBCMD_RST;
    94a0:	movs	r4, #2
    94a2:	ldr	r0, [pc, #120]	; (951c <unused_interrupt_vector+0x178>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    94a4:	mov.w	r1, #2147483648	; 0x80000000
		//   Transmit Serial1 - Serial8 data
		//   Complete writes to SD card
		//   Flush/sync LittleFS
	}
	// turn off USB
	USB1_USBCMD = USB_USBCMD_RST;
    94a8:	str.w	r4, [r0, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    94ac:	str	r1, [r2, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    94ae:	ldr.w	r2, [r3, #268]	; 0x10c
    94b2:	cbnz	r2, 94c2 <unused_interrupt_vector+0x11e>
	// reboot
	SRC_GPR5 = 0x0BAD00F1;
    94b4:	ldr	r1, [pc, #104]	; (9520 <unused_interrupt_vector+0x17c>)
    94b6:	ldr	r2, [pc, #108]	; (9524 <unused_interrupt_vector+0x180>)
    94b8:	str	r2, [r1, #48]	; 0x30
		//   Flush/sync LittleFS
	}
	// turn off USB
	USB1_USBCMD = USB_USBCMD_RST;
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    94ba:	ldr.w	r0, [r3, #268]	; 0x10c
    94be:	cmp	r0, #0
    94c0:	beq.n	94b8 <unused_interrupt_vector+0x114>
	// reboot
	SRC_GPR5 = 0x0BAD00F1;
	SCB_AIRCR = 0x05FA0004;
    94c2:	ldr	r3, [pc, #100]	; (9528 <unused_interrupt_vector+0x184>)
    94c4:	ldr	r2, [pc, #100]	; (952c <unused_interrupt_vector+0x188>)
    94c6:	str	r2, [r3, #0]
    94c8:	b.n	94c8 <unused_interrupt_vector+0x124>

	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    94ca:	bl	a45c <set_arm_clock>
    94ce:	b.n	944c <unused_interrupt_vector+0xa8>
    94d0:	.word	0x2027ff80
    94d4:	.word	0xe000ed28
    94d8:	.word	0xe000ed2c
    94dc:	.word	0xe000ed34
    94e0:	.word	0xe000ed38
    94e4:	.word	0xedb88320
    94e8:	.word	0x2027ffa4
    94ec:	.word	0xe000ef70
    94f0:	.word	0x2027ffa0
    94f4:	.word	0x400fc000
    94f8:	.word	0x40084000
    94fc:	.word	0x20001384
    9500:	.word	0x0bcd3d80
    9504:	.word	0x00249f00
    9508:	.word	0xe000e184
    950c:	.word	0xe000e188
    9510:	.word	0xe000e18c
    9514:	.word	0xe000e190
    9518:	.word	0x400d9000
    951c:	.word	0x402e0000
    9520:	.word	0x400f8000
    9524:	.word	0x0bad00f1
    9528:	.word	0xe000ed0c
    952c:	.word	0x05fa0004
    9530:	.word	0xe000e180

00009534 <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
    9534:	ldr	r2, [pc, #36]	; (955c <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
    9536:	push	{r3, lr}
        char *prev = __brkval;
    9538:	ldr	r3, [r2, #0]
        if (incr != 0) {
    953a:	cbz	r0, 9546 <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
    953c:	add	r0, r3
    953e:	ldr	r1, [pc, #32]	; (9560 <_sbrk+0x2c>)
    9540:	cmp	r0, r1
    9542:	bhi.n	954a <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
    9544:	str	r0, [r2, #0]
        }
        return prev;
}
    9546:	mov	r0, r3
    9548:	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    954a:	bl	b32c <__errno>
    954e:	movs	r2, #12
                        return (void *)-1;
    9550:	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    9554:	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    9556:	mov	r0, r3
    9558:	pop	{r3, pc}
    955a:	nop
    955c:	.word	0x2000139c
    9560:	.word	0x20280000

00009564 <rtc_get>:
#include "debug/printf.h"


unsigned long rtc_get(void)
{
	uint32_t hi1 = SNVS_HPRTCMR;
    9564:	ldr	r3, [pc, #40]	; (9590 <rtc_get+0x2c>)
#include "imxrt.h"
#include "debug/printf.h"


unsigned long rtc_get(void)
{
    9566:	push	{r4, r5}
	uint32_t hi1 = SNVS_HPRTCMR;
    9568:	ldr	r0, [r3, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;
    956a:	mov	r4, r3


unsigned long rtc_get(void)
{
	uint32_t hi1 = SNVS_HPRTCMR;
	uint32_t lo1 = SNVS_HPRTCLR;
    956c:	ldr	r1, [r3, #40]	; 0x28
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;
    956e:	ldr	r2, [r4, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    9570:	ldr	r3, [r4, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    9572:	cmp	r1, r3
    9574:	it	eq
    9576:	cmpeq	r0, r2
unsigned long rtc_get(void)
{
	uint32_t hi1 = SNVS_HPRTCMR;
	uint32_t lo1 = SNVS_HPRTCLR;
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;
    9578:	mov	r0, r2
		uint32_t lo2 = SNVS_HPRTCLR;
    957a:	mov	r1, r3
		if (lo1 == lo2 && hi1 == hi2) {
    957c:	ite	eq
    957e:	moveq	r5, #1
    9580:	movne	r5, #0
    9582:	cmp	r5, #0
    9584:	beq.n	956e <rtc_get+0xa>
			return (hi2 << 17) | (lo2 >> 15);
    9586:	lsrs	r1, r3, #15
		}
		hi1 = hi2;
		lo1 = lo2;
	}
}
    9588:	pop	{r4, r5}
    958a:	orr.w	r0, r1, r2, lsl #17
    958e:	bx	lr
    9590:	.word	0x400d4000

00009594 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    9594:	push	{r4, r5, r6, r7}
    9596:	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    9598:	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    959a:	mov	r7, r6
    959c:	b.n	95a0 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    959e:	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    95a0:	udiv	r3, r0, r2
    95a4:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    95a8:	add.w	r4, r0, #55	; 0x37
    95ac:	cmp	r0, #9
    95ae:	add.w	r0, r0, #48	; 0x30
    95b2:	uxtb	r4, r4
    95b4:	it	ls
    95b6:	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    95b8:	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    95ba:	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    95be:	cmp	r3, #0
    95c0:	bne.n	959e <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    95c2:	adds	r2, r1, r5
    95c4:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    95c6:	cbz	r5, 95dc <ultoa+0x48>
    95c8:	adds	r3, #1
		t = buf[j];
    95ca:	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    95ce:	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    95d0:	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    95d2:	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    95d4:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    95d6:	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    95da:	blt.n	95c8 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    95dc:	mov	r0, r1
    95de:	pop	{r4, r5, r6, r7}
    95e0:	bx	lr
    95e2:	nop

000095e4 <dtostrf>:
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
    95e4:	vcmp.f32	s0, s0
{
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
    95e8:	eor.w	r3, r0, r0, asr #31
char * fcvtf(float, int, int *, int *);
int isnanf (float x);
int isinff (float x);

char * dtostrf(float val, int width, unsigned int precision, char *buf)
{
    95ec:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
    95f0:	vmrs	APSR_nzcv, fpscr
char * fcvtf(float, int, int *, int *);
int isnanf (float x);
int isinff (float x);

char * dtostrf(float val, int width, unsigned int precision, char *buf)
{
    95f4:	mov	r5, r0
    95f6:	mov	r4, r2
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
    95f8:	sub.w	r3, r3, r0, asr #31
char * fcvtf(float, int, int *, int *);
int isnanf (float x);
int isinff (float x);

char * dtostrf(float val, int width, unsigned int precision, char *buf)
{
    95fc:	vpush	{d8}
    9600:	vmov.f32	s16, s0
    9604:	sub	sp, #16
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
    9606:	bvs.w	9850 <dtostrf+0x26c>
			awidth--;
		}
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
    960a:	vabs.f32	s15, s0
    960e:	vldr	s14, [pc, #792]	; 9928 <dtostrf+0x344>
    9612:	vcmp.f32	s15, s14
    9616:	vmrs	APSR_nzcv, fpscr
    961a:	ble.n	96a2 <dtostrf+0xbe>
		int ndigs = (val<0) ? 4 : 3;
    961c:	vcmpe.f32	s0, #0.0
    9620:	vmrs	APSR_nzcv, fpscr
    9624:	ite	mi
    9626:	movmi	r2, #4
    9628:	movpl	r2, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    962a:	cmp	r2, r3
    962c:	blt.n	9672 <dtostrf+0x8e>
		if (width<0) {
    962e:	cmp	r0, #0
    9630:	blt.w	9914 <dtostrf+0x330>
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    9634:	movs	r2, #0
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
    9636:	vcmpe.f32	s16, #0.0
    963a:	vmrs	APSR_nzcv, fpscr
    963e:	bmi.w	98d6 <dtostrf+0x2f2>
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    9642:	movs	r5, #73	; 0x49
    9644:	movs	r0, #78	; 0x4e
    9646:	movs	r1, #70	; 0x46
    9648:	adds	r3, r4, #3
    964a:	strb	r5, [r4, #0]
    964c:	strb	r0, [r4, #1]
    964e:	strb	r1, [r4, #2]
		} else {
			*buf++ = 'i';  *buf++ = 'n';  *buf++ = 'f';
		}
		while (awidth) {
    9650:	cmp	r2, #0
    9652:	beq.w	9924 <dtostrf+0x340>
    9656:	add	r2, r3
			*buf++ = ' ';
    9658:	movs	r1, #32
    965a:	strb.w	r1, [r3], #1
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
		} else {
			*buf++ = 'i';  *buf++ = 'n';  *buf++ = 'f';
		}
		while (awidth) {
    965e:	cmp	r2, r3
    9660:	bne.n	965a <dtostrf+0x76>
			*buf++ = ' ';
			awidth--;
		}
		*buf = 0;
    9662:	movs	r3, #0
		return buf;
    9664:	mov	r0, r2
		}
		while (awidth) {
			*buf++ = ' ';
			awidth--;
		}
		*buf = 0;
    9666:	strb	r3, [r2, #0]

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
    9668:	add	sp, #16
    966a:	vpop	{d8}
    966e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return buf;
	}
	if (isinff(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
    9672:	cmp	r0, #0
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    9674:	sub.w	r2, r3, r2
		if (width<0) {
    9678:	bge.n	9636 <dtostrf+0x52>
			while (awidth) {
    967a:	cmp	r2, #0
    967c:	beq.w	9914 <dtostrf+0x330>
    9680:	adds	r3, r4, r2
				*buf++ = ' ';
    9682:	movs	r2, #32
    9684:	strb.w	r2, [r4], #1
	}
	if (isinff(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
			while (awidth) {
    9688:	cmp	r4, r3
    968a:	bne.n	9684 <dtostrf+0xa0>
				*buf++ = ' ';
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
    968c:	vcmpe.f32	s16, #0.0
    9690:	vmrs	APSR_nzcv, fpscr
    9694:	bpl.w	98c6 <dtostrf+0x2e2>
    9698:	movs	r2, #0
    969a:	movs	r1, #45	; 0x2d
    969c:	adds	r4, r3, #1
    969e:	strb	r1, [r3, #0]
    96a0:	b.n	9642 <dtostrf+0x5e>
    96a2:	mov	r7, r1
		}
		*buf = 0;
		return buf;
	}

	s = fcvtf(val, precision, &decpt, &sign);
    96a4:	add	r2, sp, #8
    96a6:	add	r1, sp, #4
    96a8:	mov	r0, r7
    96aa:	mov	sl, r7
    96ac:	bl	b308 <fcvtf>

	// if only 1 digit in output
	if (precision == 0 && decpt == 0) {
    96b0:	ldr.w	r9, [sp, #4]
		}
		*buf = 0;
		return buf;
	}

	s = fcvtf(val, precision, &decpt, &sign);
    96b4:	mov	r8, r0

	// if only 1 digit in output
	if (precision == 0 && decpt == 0) {
    96b6:	cmp	r7, #0
    96b8:	beq.w	97ca <dtostrf+0x1e6>
    96bc:	rsb	r3, r9, #0
		s = (*s < '5') ? "0" : "1";
		decpt++;
	}

	// if all zeros, limit to precision
	if (-decpt  > (int)precision) {
    96c0:	cmp	r3, r7
    96c2:	bgt.w	983e <dtostrf+0x25a>
    96c6:	mov	r0, r8
    96c8:	bl	c040 <strlen>
    96cc:	mov	r6, r0
	}

	reqd = strlen(s);

	// add 1 for decimal point
	if (reqd > decpt) reqd++;
    96ce:	cmp	r9, r6
    96d0:	it	lt
    96d2:	addlt	r6, #1

	// add 1 for zero in front of decimal point
	if (decpt == 0) reqd++;
    96d4:	cmp.w	r9, #0
    96d8:	beq.w	983a <dtostrf+0x256>

	// if leading zeros after decimal point
	if (decpt < 0 && precision > 0) {
    96dc:	cmp.w	r9, #0
    96e0:	bge.n	9728 <dtostrf+0x144>
    96e2:	cbz	r7, 9728 <dtostrf+0x144>
		// ensure enough trailing zeros, add 2 for '0.'
		reqd = precision + 2;

		if (strlen(s) > precision + decpt) {
    96e4:	add.w	r3, r9, r7
	if (decpt == 0) reqd++;

	// if leading zeros after decimal point
	if (decpt < 0 && precision > 0) {
		// ensure enough trailing zeros, add 2 for '0.'
		reqd = precision + 2;
    96e8:	adds	r6, r7, #2

		if (strlen(s) > precision + decpt) {
    96ea:	cmp	r3, r0
    96ec:	bcs.n	9728 <dtostrf+0x144>

			int newPrecision = precision;
			int newDecimalPoint;

			// shift decimal point
			while (newPrecision > 0) {
    96ee:	cmp	r7, #0
    96f0:	ble.n	9700 <dtostrf+0x11c>
				val *= 10.0f;
    96f2:	vmov.f32	s15, #36	; 0x41200000  10.0

			int newPrecision = precision;
			int newDecimalPoint;

			// shift decimal point
			while (newPrecision > 0) {
    96f6:	subs.w	sl, sl, #1
				val *= 10.0f;
    96fa:	vmul.f32	s16, s16, s15

			int newPrecision = precision;
			int newDecimalPoint;

			// shift decimal point
			while (newPrecision > 0) {
    96fe:	bne.n	96f6 <dtostrf+0x112>
				val *= 10.0f;
				newPrecision--;
			}

			// round after accounting for leading 0's
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    9700:	add	r2, sp, #8
    9702:	mov	r0, sl
    9704:	vmov.f32	s0, s16
    9708:	add	r1, sp, #12
    970a:	bl	b308 <fcvtf>

			// if rounded up to new digit (e.g. 0.09 to 0.1), move decimal point
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    970e:	ldr.w	r9, [sp, #4]
    9712:	ldr	r2, [sp, #12]
    9714:	adds	r3, r7, #1
				val *= 10.0f;
				newPrecision--;
			}

			// round after accounting for leading 0's
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    9716:	mov	r8, r0

			// if rounded up to new digit (e.g. 0.09 to 0.1), move decimal point
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    9718:	rsb	r2, r9, r2
    971c:	cmp	r2, r3
    971e:	bne.n	9728 <dtostrf+0x144>
    9720:	add.w	r9, r9, #1
    9724:	str.w	r9, [sp, #4]
		}
	}

	// add 1 for sign if negative
	if (sign) reqd++;
    9728:	ldr.w	lr, [sp, #8]
    972c:	cmp.w	lr, #0
    9730:	beq.n	97f0 <dtostrf+0x20c>
    9732:	adds	r6, #1

	p = buf;
	e = p + reqd;
	pad = width - reqd;
    9734:	subs	r0, r5, r6

	// add 1 for sign if negative
	if (sign) reqd++;

	p = buf;
	e = p + reqd;
    9736:	adds	r1, r4, r6
	pad = width - reqd;
	if (pad > 0) {
    9738:	cmp	r0, #0
    973a:	bgt.n	97fa <dtostrf+0x216>
	}

	// add 1 for sign if negative
	if (sign) reqd++;

	p = buf;
    973c:	mov	r2, r4
	pad = width - reqd;
	if (pad > 0) {
		e += pad;
		while (pad-- > 0) *p++ = ' ';
	}
	if (sign) *p++ = '-';
    973e:	movs	r0, #45	; 0x2d
    9740:	adds	r3, r2, #1
    9742:	strb	r0, [r2, #0]
	if (decpt == 0 && precision > 0) {
    9744:	cmp.w	r9, #0
    9748:	beq.n	9826 <dtostrf+0x242>
		*p++ = '0';
		*p++ = '.';
	}
	else if (decpt < 0 && precision > 0) {
    974a:	cbz	r7, 976e <dtostrf+0x18a>
    974c:	cmp.w	r9, #0
    9750:	bge.n	976e <dtostrf+0x18a>
		*p++ = '0';
    9752:	mov	r2, r3
    9754:	movs	r0, #48	; 0x30
		*p++ = '.';
    9756:	movs	r7, #46	; 0x2e
	if (decpt == 0 && precision > 0) {
		*p++ = '0';
		*p++ = '.';
	}
	else if (decpt < 0 && precision > 0) {
		*p++ = '0';
    9758:	strb.w	r0, [r2], #2
		*p++ = '.';
    975c:	strb	r7, [r3, #1]
    975e:	rsb	r3, r9, r2
		// print leading zeros
		while ( decpt < 0 ) {
			decpt++;
			*p++ = '0';
    9762:	strb.w	r0, [r2], #1
	}
	else if (decpt < 0 && precision > 0) {
		*p++ = '0';
		*p++ = '.';
		// print leading zeros
		while ( decpt < 0 ) {
    9766:	cmp	r2, r3
    9768:	bne.n	9762 <dtostrf+0x17e>
    976a:	movs	r2, #0
    976c:	str	r2, [sp, #4]
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
    976e:	cmp	r3, r1
    9770:	bcs.n	97b4 <dtostrf+0x1d0>
		*p++ = *s++;
    9772:	adds	r7, r3, #1
    9774:	ldrb.w	r2, [r8]
    9778:	add.w	r8, r8, #1
		if (p == e) break;
    977c:	cmp	r7, r1
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
		*p++ = *s++;
    977e:	strb	r2, [r3, #0]
		if (p == e) break;
    9780:	beq.n	97b6 <dtostrf+0x1d2>
    9782:	ldr	r2, [sp, #4]
		if (--decpt == 0) *p++ = '.';
    9784:	mov.w	lr, #46	; 0x2e
    9788:	b.n	97a2 <dtostrf+0x1be>
    978a:	strb.w	lr, [r3, #1]
    978e:	adds	r3, #2
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
    9790:	cmp	r3, r1
		*p++ = *s++;
    9792:	add.w	r7, r3, #1
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
    9796:	bcs.n	97b4 <dtostrf+0x1d0>
		*p++ = *s++;
    9798:	ldrb.w	r0, [r8], #1
		if (p == e) break;
    979c:	cmp	r7, r1
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
		*p++ = *s++;
    979e:	strb	r0, [r3, #0]
		if (p == e) break;
    97a0:	beq.n	97b6 <dtostrf+0x1d2>
		if (--decpt == 0) *p++ = '.';
    97a2:	subs	r2, #1
    97a4:	str	r2, [sp, #4]
    97a6:	cmp	r2, #0
    97a8:	beq.n	978a <dtostrf+0x1a6>
    97aa:	mov	r3, r7
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
    97ac:	cmp	r3, r1
		*p++ = *s++;
    97ae:	add.w	r7, r3, #1
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
    97b2:	bcc.n	9798 <dtostrf+0x1b4>
    97b4:	mov	r1, r3
		*p++ = *s++;
		if (p == e) break;
		if (--decpt == 0) *p++ = '.';
	}
	if (width < 0) {
    97b6:	cmp	r5, #0
    97b8:	blt.n	989e <dtostrf+0x2ba>
		pad = (reqd + width) * -1;
		while (pad-- > 0) *p++ = ' ';
	}
	*p = 0;
    97ba:	movs	r3, #0

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
    97bc:	mov	r0, r4
	}
	if (width < 0) {
		pad = (reqd + width) * -1;
		while (pad-- > 0) *p++ = ' ';
	}
	*p = 0;
    97be:	strb	r3, [r1, #0]

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
    97c0:	add	sp, #16
    97c2:	vpop	{d8}
    97c6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}

	s = fcvtf(val, precision, &decpt, &sign);

	// if only 1 digit in output
	if (precision == 0 && decpt == 0) {
    97ca:	cmp.w	r9, #0
    97ce:	bne.w	96bc <dtostrf+0xd8>
		// round and move decimal point
		s = (*s < '5') ? "0" : "1";
		decpt++;
    97d2:	movs	r3, #1
	s = fcvtf(val, precision, &decpt, &sign);

	// if only 1 digit in output
	if (precision == 0 && decpt == 0) {
		// round and move decimal point
		s = (*s < '5') ? "0" : "1";
    97d4:	ldrb.w	r8, [r0]
    97d8:	ldr	r1, [pc, #336]	; (992c <dtostrf+0x348>)
    97da:	ldr	r2, [pc, #340]	; (9930 <dtostrf+0x34c>)
		decpt++;
    97dc:	mov	r9, r3
    97de:	str	r3, [sp, #4]
    97e0:	mov.w	r3, #4294967295
	s = fcvtf(val, precision, &decpt, &sign);

	// if only 1 digit in output
	if (precision == 0 && decpt == 0) {
		// round and move decimal point
		s = (*s < '5') ? "0" : "1";
    97e4:	cmp.w	r8, #52	; 0x34
    97e8:	ite	hi
    97ea:	movhi	r8, r1
    97ec:	movls	r8, r2
    97ee:	b.n	96c0 <dtostrf+0xdc>
	// add 1 for sign if negative
	if (sign) reqd++;

	p = buf;
	e = p + reqd;
	pad = width - reqd;
    97f0:	subs	r0, r5, r6

	// add 1 for sign if negative
	if (sign) reqd++;

	p = buf;
	e = p + reqd;
    97f2:	adds	r1, r4, r6
	pad = width - reqd;
	if (pad > 0) {
    97f4:	cmp	r0, #0
    97f6:	ble.w	9920 <dtostrf+0x33c>
		e += pad;
    97fa:	add	r1, r0
		decpt++;
	}

	// if all zeros, limit to precision
	if (-decpt  > (int)precision) {
		s = "0";
    97fc:	mov	r2, r4
	p = buf;
	e = p + reqd;
	pad = width - reqd;
	if (pad > 0) {
		e += pad;
		while (pad-- > 0) *p++ = ' ';
    97fe:	subs	r0, #1
    9800:	mov.w	ip, #32
    9804:	strb.w	ip, [r2], #1
    9808:	rsb	r3, r2, #1
    980c:	add	r3, r0
    980e:	add	r3, r4
    9810:	cmp	r3, #0
    9812:	bgt.n	9804 <dtostrf+0x220>
    9814:	bic.w	r3, r0, r0, asr #31
    9818:	adds	r3, #1
    981a:	add	r3, r4
	}
	if (sign) *p++ = '-';
    981c:	cmp.w	lr, #0
    9820:	beq.n	9744 <dtostrf+0x160>
	p = buf;
	e = p + reqd;
	pad = width - reqd;
	if (pad > 0) {
		e += pad;
		while (pad-- > 0) *p++ = ' ';
    9822:	mov	r2, r3
    9824:	b.n	973e <dtostrf+0x15a>
	}
	if (sign) *p++ = '-';
	if (decpt == 0 && precision > 0) {
    9826:	cmp	r7, #0
    9828:	beq.n	976e <dtostrf+0x18a>
		*p++ = '0';
    982a:	mov	r2, r3
    982c:	movs	r7, #48	; 0x30
		*p++ = '.';
    982e:	movs	r0, #46	; 0x2e
		e += pad;
		while (pad-- > 0) *p++ = ' ';
	}
	if (sign) *p++ = '-';
	if (decpt == 0 && precision > 0) {
		*p++ = '0';
    9830:	strb.w	r7, [r2], #2
		*p++ = '.';
    9834:	strb	r0, [r3, #1]
    9836:	mov	r3, r2
    9838:	b.n	976e <dtostrf+0x18a>

	// add 1 for decimal point
	if (reqd > decpt) reqd++;

	// add 1 for zero in front of decimal point
	if (decpt == 0) reqd++;
    983a:	adds	r6, #1
    983c:	b.n	9728 <dtostrf+0x144>
	}

	// if all zeros, limit to precision
	if (-decpt  > (int)precision) {
		s = "0";
		decpt = -precision;
    983e:	movs	r6, #1
    9840:	rsb	r9, r7, #0
		decpt++;
	}

	// if all zeros, limit to precision
	if (-decpt  > (int)precision) {
		s = "0";
    9844:	ldr.w	r8, [pc, #232]	; 9930 <dtostrf+0x34c>
		decpt = -precision;
    9848:	mov	r0, r6
    984a:	str.w	r9, [sp, #4]
    984e:	b.n	96ce <dtostrf+0xea>
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
    9850:	vcmpe.f32	s0, #0.0
    9854:	vmrs	APSR_nzcv, fpscr
    9858:	ite	mi
    985a:	movmi	r2, #4
    985c:	movpl	r2, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    985e:	cmp	r2, r3
    9860:	bge.n	98da <dtostrf+0x2f6>
		if (width<0) {
    9862:	cmp	r0, #0
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    9864:	sub.w	r3, r3, r2
		if (width<0) {
    9868:	blt.n	98ec <dtostrf+0x308>
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    986a:	vmov	r2, s16
    986e:	cmp	r2, #0
    9870:	blt.n	98e2 <dtostrf+0x2fe>
		if (DTOA_UPPER) {
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    9872:	movs	r1, #78	; 0x4e
    9874:	movs	r0, #65	; 0x41
    9876:	adds	r2, r4, #3
    9878:	strb	r1, [r4, #0]
    987a:	strb	r1, [r4, #2]
    987c:	strb	r0, [r4, #1]
		} else {
			*buf++ = 'n';  *buf++ = 'a';  *buf++ = 'n';
		}
		while (awidth) {
    987e:	cmp	r3, #0
    9880:	beq.n	991c <dtostrf+0x338>
    9882:	add	r3, r2
			*buf++ = ' ';
    9884:	movs	r1, #32
    9886:	strb.w	r1, [r2], #1
		if (DTOA_UPPER) {
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
		} else {
			*buf++ = 'n';  *buf++ = 'a';  *buf++ = 'n';
		}
		while (awidth) {
    988a:	cmp	r2, r3
    988c:	bne.n	9886 <dtostrf+0x2a2>
			*buf++ = ' ';
			awidth--;
		}
		*buf = 0;
    988e:	movs	r2, #0
		return buf;
    9890:	mov	r0, r3
		}
		while (awidth) {
			*buf++ = ' ';
			awidth--;
		}
		*buf = 0;
    9892:	strb	r2, [r3, #0]

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
    9894:	add	sp, #16
    9896:	vpop	{d8}
    989a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		*p++ = *s++;
		if (p == e) break;
		if (--decpt == 0) *p++ = '.';
	}
	if (width < 0) {
		pad = (reqd + width) * -1;
    989e:	adds	r0, r5, r6
		while (pad-- > 0) *p++ = ' ';
    98a0:	negs	r3, r0
    98a2:	mvns	r0, r0
    98a4:	cmp	r3, #0
    98a6:	ble.n	97ba <dtostrf+0x1d6>
    98a8:	mov	r2, r1
    98aa:	movs	r5, #32
    98ac:	strb.w	r5, [r2], #1
    98b0:	rsb	r3, r2, #1
    98b4:	add	r3, r0
    98b6:	add	r3, r1
    98b8:	cmp	r3, #0
    98ba:	bgt.n	98ac <dtostrf+0x2c8>
    98bc:	bic.w	r3, r0, r0, asr #31
    98c0:	adds	r3, #1
    98c2:	add	r1, r3
    98c4:	b.n	97ba <dtostrf+0x1d6>
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    98c6:	movs	r4, #73	; 0x49
    98c8:	movs	r0, #78	; 0x4e
    98ca:	movs	r1, #70	; 0x46
    98cc:	adds	r2, r3, #3
    98ce:	strb	r4, [r3, #0]
    98d0:	strb	r0, [r3, #1]
    98d2:	strb	r1, [r3, #2]
    98d4:	b.n	9662 <dtostrf+0x7e>
    98d6:	mov	r3, r4
    98d8:	b.n	969a <dtostrf+0xb6>

	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
    98da:	cmp	r0, #0
    98dc:	blt.n	9910 <dtostrf+0x32c>
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    98de:	movs	r3, #0
    98e0:	b.n	986a <dtostrf+0x286>
    98e2:	mov	r2, r4
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    98e4:	movs	r1, #45	; 0x2d
    98e6:	adds	r4, r2, #1
    98e8:	strb	r1, [r2, #0]
    98ea:	b.n	9872 <dtostrf+0x28e>
	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
			while (awidth) {
    98ec:	cbz	r3, 9910 <dtostrf+0x32c>
    98ee:	adds	r2, r4, r3
				*buf++ = ' ';
    98f0:	movs	r3, #32
    98f2:	strb.w	r3, [r4], #1
	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
			while (awidth) {
    98f6:	cmp	r4, r2
    98f8:	bne.n	98f2 <dtostrf+0x30e>
				*buf++ = ' ';
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    98fa:	vmov	r3, s16
    98fe:	cmp	r3, #0
    9900:	blt.n	9918 <dtostrf+0x334>
		if (DTOA_UPPER) {
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    9902:	movs	r1, #78	; 0x4e
    9904:	movs	r0, #65	; 0x41
    9906:	adds	r3, r2, #3
    9908:	strb	r1, [r2, #0]
    990a:	strb	r1, [r2, #2]
    990c:	strb	r0, [r2, #1]
    990e:	b.n	988e <dtostrf+0x2aa>

	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
    9910:	mov	r2, r4
    9912:	b.n	98fa <dtostrf+0x316>
		return buf;
	}
	if (isinff(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
    9914:	mov	r3, r4
    9916:	b.n	968c <dtostrf+0xa8>
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    9918:	movs	r3, #0
    991a:	b.n	98e4 <dtostrf+0x300>
		if (DTOA_UPPER) {
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    991c:	mov	r3, r2
    991e:	b.n	988e <dtostrf+0x2aa>
	}

	// add 1 for sign if negative
	if (sign) reqd++;

	p = buf;
    9920:	mov	r3, r4
    9922:	b.n	9744 <dtostrf+0x160>
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    9924:	mov	r2, r3
    9926:	b.n	9662 <dtostrf+0x7e>
    9928:	.word	0x7f7fffff
    992c:	.word	0x20000c94
    9930:	.word	0x20000dac

00009934 <sm_align_pool>:
	if (spool->pool_size % HEADER_SZ) return 0;
	return 1;
}

int sm_align_pool(struct smalloc_pool *spool)
{
    9934:	push	{r3, lr}

struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
    9936:	ldr	r3, [r0, #0]
{
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
    9938:	ldr	r2, [r0, #4]

struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
    993a:	cbz	r3, 996c <sm_align_pool+0x38>
    993c:	cbz	r2, 995e <sm_align_pool+0x2a>
	if (spool->pool_size % HEADER_SZ) return 0;
    993e:	ldr	r3, [pc, #64]	; (9980 <sm_align_pool+0x4c>)
    9940:	umull	r1, r3, r3, r2
    9944:	lsrs	r3, r3, #3
    9946:	add.w	r3, r3, r3, lsl #1
    994a:	subs.w	r3, r2, r3, lsl #2
    994e:	beq.n	9958 <sm_align_pool+0x24>
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
	if (x) spool->pool_size -= x;
    9950:	subs	r2, r2, r3
    9952:	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    9954:	cmp	r2, #240	; 0xf0
    9956:	bls.n	995e <sm_align_pool+0x2a>

int sm_align_pool(struct smalloc_pool *spool)
{
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;
    9958:	movs	r3, #1
		errno = ENOSPC;
		return 0;
	}

	return 1;
}
    995a:	mov	r0, r3
    995c:	pop	{r3, pc}
	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
	if (x) spool->pool_size -= x;
	if (spool->pool_size <= MIN_POOL_SZ) {
		errno = ENOSPC;
    995e:	bl	b32c <__errno>
    9962:	movs	r2, #28
    9964:	movs	r3, #0
    9966:	str	r2, [r0, #0]
		return 0;
	}

	return 1;
}
    9968:	mov	r0, r3
    996a:	pop	{r3, pc}
{
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
    996c:	ldr	r3, [pc, #16]	; (9980 <sm_align_pool+0x4c>)
    996e:	umull	r1, r3, r3, r2
    9972:	lsrs	r3, r3, #3
    9974:	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    9978:	subs.w	r3, r2, r3, lsl #2
    997c:	bne.n	9950 <sm_align_pool+0x1c>
    997e:	b.n	9954 <sm_align_pool+0x20>
    9980:	.word	0xaaaaaaab

00009984 <sm_set_pool>:

	return 1;
}

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
    9984:	push	{r4, r5, r6, lr}
	if (!spool) {
    9986:	mov	r4, r0
    9988:	cmp	r0, #0
    998a:	beq.n	9a02 <sm_set_pool+0x7e>
		errno = EINVAL;
		return 0;
	}

	if (!new_pool || !new_pool_size) {
    998c:	cbz	r1, 9996 <sm_set_pool+0x12>
    998e:	clz	r5, r2
    9992:	lsrs	r5, r5, #5
    9994:	cbz	r5, 99d6 <sm_set_pool+0x52>

struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
    9996:	ldr	r0, [r4, #0]
    9998:	cbz	r0, 999e <sm_set_pool+0x1a>
    999a:	ldr	r2, [r4, #4]
    999c:	cbnz	r2, 99ac <sm_set_pool+0x28>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
			memset(spool, 0, sizeof(struct smalloc_pool));
			return 1;
		}

		errno = EINVAL;
    999e:	bl	b32c <__errno>
    99a2:	movs	r3, #22
		return 0;
    99a4:	movs	r2, #0
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
			memset(spool, 0, sizeof(struct smalloc_pool));
			return 1;
		}

		errno = EINVAL;
    99a6:	str	r3, [r0, #0]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    99a8:	mov	r0, r2
    99aa:	pop	{r4, r5, r6, pc}
struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
	if (spool->pool_size % HEADER_SZ) return 0;
    99ac:	ldr	r1, [pc, #96]	; (9a10 <sm_set_pool+0x8c>)
    99ae:	umull	r3, r1, r1, r2
    99b2:	lsrs	r1, r1, #3
    99b4:	add.w	r1, r1, r1, lsl #1
    99b8:	subs.w	r1, r2, r1, lsl #2
    99bc:	bne.n	999e <sm_set_pool+0x1a>
		return 0;
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    99be:	ldr	r3, [r4, #8]
    99c0:	cbz	r3, 99c6 <sm_set_pool+0x42>
    99c2:	bl	b9ec <memset>
			memset(spool, 0, sizeof(struct smalloc_pool));
    99c6:	movs	r3, #0
			return 1;
    99c8:	movs	r2, #1
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
			memset(spool, 0, sizeof(struct smalloc_pool));
    99ca:	str	r3, [r4, #0]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    99cc:	mov	r0, r2
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
			memset(spool, 0, sizeof(struct smalloc_pool));
    99ce:	str	r3, [r4, #4]
    99d0:	str	r3, [r4, #8]
    99d2:	str	r3, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    99d4:	pop	{r4, r5, r6, pc}
    99d6:	mov	r6, r3
		return 0;
	}

	spool->pool = new_pool;
	spool->pool_size = new_pool_size;
	spool->oomfn = oom_handler;
    99d8:	ldr	r3, [sp, #16]
		errno = EINVAL;
		return 0;
	}

	spool->pool = new_pool;
	spool->pool_size = new_pool_size;
    99da:	stmia.w	r0, {r1, r2}
	spool->oomfn = oom_handler;
    99de:	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    99e0:	bl	9934 <sm_align_pool>
    99e4:	mov	r2, r0
    99e6:	cmp	r0, #0
    99e8:	beq.n	99a8 <sm_set_pool+0x24>

	if (do_zero) {
    99ea:	cbnz	r6, 99f2 <sm_set_pool+0x6e>
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
    99ec:	movs	r2, #1
}
    99ee:	mov	r0, r2
    99f0:	pop	{r4, r5, r6, pc}
	spool->oomfn = oom_handler;
	if (!sm_align_pool(spool)) return 0;

	if (do_zero) {
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
    99f2:	ldmia.w	r4, {r0, r2}
	spool->pool_size = new_pool_size;
	spool->oomfn = oom_handler;
	if (!sm_align_pool(spool)) return 0;

	if (do_zero) {
		spool->do_zero = do_zero;
    99f6:	str	r6, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    99f8:	mov	r1, r5
    99fa:	bl	b9ec <memset>
	}

	return 1;
    99fe:	movs	r2, #1
    9a00:	b.n	99a8 <sm_set_pool+0x24>
}

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
	if (!spool) {
		errno = EINVAL;
    9a02:	bl	b32c <__errno>
    9a06:	movs	r3, #22
		return 0;
    9a08:	mov	r2, r4
}

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
	if (!spool) {
		errno = EINVAL;
    9a0a:	str	r3, [r0, #0]
		return 0;
    9a0c:	b.n	99a8 <sm_set_pool+0x24>
    9a0e:	nop
    9a10:	.word	0xaaaaaaab

00009a14 <Panic_Temp_isr>:
static float s_hot_ROOM, s_roomC_hotC;

extern void unused_interrupt_vector(void); // startup.c

void Panic_Temp_isr(void) {
  unused_interrupt_vector();
    9a14:	b.w	93a4 <unused_interrupt_vector>

00009a18 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    9a18:	ldr	r1, [pc, #72]	; (9a64 <tempmonGetTemp+0x4c>)
    9a1a:	ldr	r3, [r1, #0]
    9a1c:	ldr	r2, [pc, #68]	; (9a64 <tempmonGetTemp+0x4c>)
    9a1e:	lsls	r3, r3, #29
    9a20:	bpl.n	9a1a <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    9a22:	ldr	r3, [r2, #0]
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    9a24:	ldr	r1, [pc, #64]	; (9a68 <tempmonGetTemp+0x50>)

    return tmeas;
    9a26:	ubfx	r3, r3, #8, #12
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    9a2a:	ldr	r2, [pc, #64]	; (9a6c <tempmonGetTemp+0x54>)

    return tmeas;
    9a2c:	vmov	s15, r3
    9a30:	ldr	r3, [r1, #0]
    9a32:	vldr	s12, [r2]
    9a36:	vcvt.f32.s32	s14, s15
    9a3a:	vmov	s15, r3
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    9a3e:	ldr	r2, [pc, #48]	; (9a70 <tempmonGetTemp+0x58>)

    return tmeas;
    9a40:	vcvt.f32.u32	s15, s15
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    9a44:	ldr	r3, [pc, #44]	; (9a74 <tempmonGetTemp+0x5c>)

    return tmeas;
    9a46:	vldr	s13, [r2]
    9a4a:	vsub.f32	s15, s14, s15
    9a4e:	vldr	s14, [r3]
    9a52:	vcvt.f32.u32	s14, s14
    9a56:	vmul.f32	s15, s15, s12
    9a5a:	vdiv.f32	s0, s15, s13
}
    9a5e:	vsub.f32	s0, s14, s0
    9a62:	bx	lr
    9a64:	.word	0x400d8180
    9a68:	.word	0x2000c704
    9a6c:	.word	0x2000c70c
    9a70:	.word	0x2000c710
    9a74:	.word	0x2000c708

00009a78 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    9a78:	cmp	r0, #54	; 0x36
    9a7a:	bhi.n	9ab6 <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
    9a7c:	lsls	r0, r0, #4
    9a7e:	ldr	r2, [pc, #104]	; (9ae8 <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    9a80:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    9a82:	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    9a86:	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
    9a88:	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    9a8a:	beq.n	9ab8 <pinMode+0x40>
    9a8c:	cmp	r1, #4
    9a8e:	beq.n	9ab8 <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    9a90:	ldr	r4, [r3, #12]
    9a92:	ldr	r2, [r0, #4]
    9a94:	bic.w	r2, r2, r4
    9a98:	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    9a9a:	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
    9a9c:	cbz	r1, 9ada <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
    9a9e:	cmp	r1, #2
    9aa0:	beq.n	9ae0 <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    9aa2:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    9aa4:	ldr	r3, [r3, #4]
}
    9aa6:	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    9aaa:	ite	eq
    9aac:	ldreq	r1, [pc, #60]	; (9aec <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    9aae:	ldrne	r1, [pc, #64]	; (9af0 <pinMode+0x78>)
    9ab0:	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    9ab2:	movs	r2, #21
    9ab4:	str	r2, [r3, #0]
}
    9ab6:	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    9ab8:	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
    9aba:	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    9abc:	ldr	r4, [r0, #4]
    9abe:	orr.w	r2, r2, r4
    9ac2:	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    9ac4:	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
    9ac6:	beq.n	9ada <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    9ac8:	movw	r1, #2104	; 0x838
    9acc:	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    9ace:	ldr	r3, [r3, #4]
    9ad0:	movs	r2, #21
}
    9ad2:	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    9ad6:	str	r2, [r3, #0]
}
    9ad8:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    9ada:	movs	r1, #56	; 0x38
    9adc:	str	r1, [r2, #0]
    9ade:	b.n	9ace <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    9ae0:	ldr	r1, [pc, #16]	; (9af4 <pinMode+0x7c>)
    9ae2:	str	r1, [r2, #0]
    9ae4:	b.n	9ace <pinMode+0x56>
    9ae6:	nop
    9ae8:	.word	0x20000774
    9aec:	.word	0x00013038
    9af0:	.word	0x00010038
    9af4:	.word	0x0001f038

00009af8 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    9af8:	ldr	r0, [pc, #656]	; (9d8c <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    9afa:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    9afe:	ldr	r3, [pc, #656]	; (9d90 <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    9b00:	ldr	r2, [r0, #120]	; 0x78
    9b02:	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    9b06:	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    9b08:	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    9b0a:	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    9b0c:	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    9b10:	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    9b14:	ldr	r4, [pc, #636]	; (9d94 <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    9b16:	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9b1a:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    9b1c:	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    9b20:	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    9b22:	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    9b24:	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    9b28:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    9b2c:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    9b30:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    9b34:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    9b38:	ldrh.w	r0, [r3, #392]	; 0x188
    9b3c:	uxth	r0, r0
    9b3e:	orr.w	r0, r0, #240	; 0xf0
    9b42:	strh.w	r0, [r3, #392]	; 0x188
    9b46:	add.w	r0, r1, r1, lsl #1
    9b4a:	ldr	r3, [pc, #580]	; (9d90 <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    9b4c:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    9b4e:	movs	r5, #0
    9b50:	lsls	r0, r0, #5
    9b52:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9b54:	cmp	r1, #4
    9b56:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    9b58:	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    9b5c:	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    9b5e:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    9b60:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    9b62:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    9b64:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    9b66:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    9b68:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    9b6a:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    9b6c:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    9b6e:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9b70:	bne.n	9b46 <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9b72:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    9b76:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    9b7a:	ldr	r3, [pc, #540]	; (9d98 <pwm_init+0x2a0>)
    9b7c:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9b80:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9b82:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    9b84:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    9b88:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9b8a:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    9b8e:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9b92:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    9b96:	ldrh.w	r0, [r4, #392]	; 0x188
    9b9a:	uxth	r0, r0
    9b9c:	orr.w	r0, r0, #3840	; 0xf00
    9ba0:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    9ba4:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    9ba8:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    9bac:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    9bb0:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    9bb4:	ldrh.w	r0, [r3, #392]	; 0x188
    9bb8:	uxth	r0, r0
    9bba:	orr.w	r0, r0, #240	; 0xf0
    9bbe:	strh.w	r0, [r3, #392]	; 0x188
    9bc2:	add.w	r0, r1, r1, lsl #1
    9bc6:	ldr	r3, [pc, #464]	; (9d98 <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    9bc8:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    9bca:	movs	r5, #0
    9bcc:	lsls	r0, r0, #5
    9bce:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9bd0:	cmp	r1, #4
    9bd2:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    9bd4:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    9bd6:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    9bda:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    9bdc:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    9bde:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    9be0:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    9be2:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    9be4:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    9be6:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    9be8:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    9bea:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9bec:	bne.n	9bc2 <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9bee:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    9bf2:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    9bf6:	ldr	r3, [pc, #420]	; (9d9c <pwm_init+0x2a4>)
    9bf8:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9bfc:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9bfe:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    9c00:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    9c04:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9c06:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    9c0a:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9c0e:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    9c12:	ldrh.w	r0, [r4, #392]	; 0x188
    9c16:	uxth	r0, r0
    9c18:	orr.w	r0, r0, #3840	; 0xf00
    9c1c:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    9c20:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    9c24:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    9c28:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    9c2c:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    9c30:	ldrh.w	r0, [r3, #392]	; 0x188
    9c34:	uxth	r0, r0
    9c36:	orr.w	r0, r0, #240	; 0xf0
    9c3a:	strh.w	r0, [r3, #392]	; 0x188
    9c3e:	add.w	r0, r1, r1, lsl #1
    9c42:	ldr	r3, [pc, #344]	; (9d9c <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    9c44:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    9c46:	movs	r5, #0
    9c48:	lsls	r0, r0, #5
    9c4a:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9c4c:	cmp	r1, #4
    9c4e:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    9c50:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    9c52:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    9c56:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    9c58:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    9c5a:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    9c5c:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    9c5e:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    9c60:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    9c62:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    9c64:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    9c66:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9c68:	bne.n	9c3e <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9c6a:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    9c6e:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    9c72:	ldr	r3, [pc, #300]	; (9da0 <pwm_init+0x2a8>)
    9c74:	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9c78:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9c7a:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    9c7c:	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    9c80:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9c82:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    9c86:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9c8a:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    9c8e:	ldrh.w	r0, [r4, #392]	; 0x188
    9c92:	uxth	r0, r0
    9c94:	orr.w	r0, r0, #3840	; 0xf00
    9c98:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    9c9c:	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    9ca0:	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    9ca4:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    9ca8:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    9cac:	ldrh.w	r0, [r3, #392]	; 0x188
    9cb0:	uxth	r0, r0
    9cb2:	orr.w	r0, r0, #240	; 0xf0
    9cb6:	strh.w	r0, [r3, #392]	; 0x188
    9cba:	add.w	r0, r1, r1, lsl #1
    9cbe:	ldr	r3, [pc, #224]	; (9da0 <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    9cc0:	adds	r1, #1
    9cc2:	lsls	r0, r0, #5
    9cc4:	mov	r4, r3
    9cc6:	cmp	r1, #4
    9cc8:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    9cca:	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    9ccc:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    9cd0:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    9cd2:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    9cd4:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    9cd6:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    9cd8:	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    9cda:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    9cdc:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    9cde:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    9ce0:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9ce2:	bne.n	9cba <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9ce4:	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9ce8:	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9cea:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    9cec:	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9cf0:	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    9cf2:	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    9cf6:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    9cf8:	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9cfc:	orrs	r3, r7
    9cfe:	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    9d02:	ldrh.w	r3, [r4, #392]	; 0x188
    9d06:	uxth	r3, r3
    9d08:	orr.w	r3, r3, #3840	; 0xf00
    9d0c:	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    9d10:	lsls	r0, r2, #5
    9d12:	ldr	r3, [pc, #144]	; (9da4 <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9d14:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    9d16:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9d18:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    9d1a:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    9d1c:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9d1e:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    9d20:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    9d22:	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    9d26:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    9d28:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    9d2a:	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9d2c:	bne.n	9d10 <pwm_init+0x218>
    9d2e:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9d30:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    9d32:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    9d36:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    9d3a:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    9d3c:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    9d40:	lsls	r0, r2, #5
    9d42:	ldr	r3, [pc, #100]	; (9da8 <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9d44:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    9d46:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9d48:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    9d4a:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    9d4c:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9d4e:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    9d50:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    9d52:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    9d54:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    9d56:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    9d58:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9d5a:	bne.n	9d40 <pwm_init+0x248>
    9d5c:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9d5e:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    9d60:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    9d64:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    9d68:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    9d6a:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    9d6e:	lsls	r0, r2, #5
    9d70:	ldr	r3, [pc, #56]	; (9dac <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9d72:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    9d74:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9d76:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    9d78:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    9d7a:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9d7c:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    9d7e:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    9d80:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    9d82:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    9d84:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    9d86:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9d88:	bne.n	9d6e <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    9d8a:	pop	{r4, r5, r6, r7, pc}
    9d8c:	.word	0x400fc000
    9d90:	.word	0x403dc000
    9d94:	.word	0xfc030000
    9d98:	.word	0x403e0000
    9d9c:	.word	0x403e4000
    9da0:	.word	0x403e8000
    9da4:	.word	0x401dc000
    9da8:	.word	0x401e0000
    9dac:	.word	0x401e4000

00009db0 <txEvent_event>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);
extern volatile uint8_t usb_configuration;

uint32_t mtp_txEventCount = 0;
static void txEvent_event(transfer_t *t) { mtp_txEventCount++;}
    9db0:	ldr	r2, [pc, #8]	; (9dbc <txEvent_event+0xc>)
    9db2:	ldr	r3, [r2, #0]
    9db4:	adds	r3, #1
    9db6:	str	r3, [r2, #0]
    9db8:	bx	lr
    9dba:	nop
    9dbc:	.word	0x2000c6a8

00009dc0 <rx_event>:
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

static void rx_event(transfer_t *t)
{
    9dc0:	push	{r4, r5, r6, r7}
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
    9dc2:	ldr	r4, [pc, #48]	; (9df4 <rx_event+0x34>)
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

static void rx_event(transfer_t *t)
{
	int i = t->callback_param;
    9dc4:	ldr	r7, [r0, #28]
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
    9dc6:	ldrb	r3, [r4, #0]
	if (++head > RX_NUM) head = 0;
    9dc8:	adds	r3, #1
    9dca:	cmp	r3, #4
    9dcc:	bls.n	9dee <rx_event+0x2e>
    9dce:	movs	r5, #0
    9dd0:	mov	r3, r5
	rx_list[head] = i;
	// remember how many bytes were actually sent by host...
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    9dd2:	ldr	r2, [r0, #4]
    9dd4:	ldr	r6, [pc, #32]	; (9df8 <rx_event+0x38>)
	rx_list_transfer_len[head] = len;
    9dd6:	ubfx	r1, r2, #16, #15
    9dda:	ldr	r0, [pc, #32]	; (9dfc <rx_event+0x3c>)
    9ddc:	ldrh	r2, [r6, #0]
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
	if (++head > RX_NUM) head = 0;
	rx_list[head] = i;
    9dde:	ldr	r6, [pc, #32]	; (9e00 <rx_event+0x40>)
	// remember how many bytes were actually sent by host...
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	rx_list_transfer_len[head] = len;
    9de0:	subs	r2, r2, r1
	rx_head = head;
    9de2:	strb	r5, [r4, #0]
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
	if (++head > RX_NUM) head = 0;
	rx_list[head] = i;
    9de4:	strb	r7, [r6, r3]
	// remember how many bytes were actually sent by host...
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	rx_list_transfer_len[head] = len;
    9de6:	str.w	r2, [r0, r3, lsl #2]
	rx_head = head;
}
    9dea:	pop	{r4, r5, r6, r7}
    9dec:	bx	lr
    9dee:	uxtb	r5, r3
    9df0:	b.n	9dd2 <rx_event+0x12>
    9df2:	nop
    9df4:	.word	0x2000f1c5
    9df8:	.word	0x2000f1b6
    9dfc:	.word	0x2000c6f0
    9e00:	.word	0x2000c6e8

00009e04 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    9e04:	push	{r3, r4, r5, r6, r7, lr}
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
    9e06:	ldr	r1, [pc, #76]	; (9e54 <rx_queue_transfer+0x50>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    9e08:	mov	r3, r0
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
	arm_dcache_delete(buffer, rx_packet_size);
    9e0a:	ldr	r6, [pc, #76]	; (9e58 <rx_queue_transfer+0x54>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
    9e0c:	add.w	r1, r1, r0, lsl #9
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    9e10:	ldrh	r4, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    9e12:	bic.w	r2, r1, #31
	uint32_t end_addr = (uint32_t)addr + size;
    9e16:	add	r4, r1
	asm volatile("": : :"memory");
	asm("dsb");
    9e18:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    9e1c:	ldr	r5, [pc, #60]	; (9e5c <rx_queue_transfer+0x58>)
    9e1e:	str	r2, [r5, #0]
		location += 32;
    9e20:	adds	r2, #32
	} while (location < end_addr);
    9e22:	cmp	r4, r2
    9e24:	bhi.n	9e1e <rx_queue_transfer+0x1a>
	asm("dsb");
    9e26:	dsb	sy
	asm("isb");
    9e2a:	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	//memset(buffer, )
	NVIC_DISABLE_IRQ(IRQ_USB1);
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    9e2e:	ldr	r4, [pc, #48]	; (9e60 <rx_queue_transfer+0x5c>)
static void rx_queue_transfer(int i)
{
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
	arm_dcache_delete(buffer, rx_packet_size);
	//memset(buffer, )
	NVIC_DISABLE_IRQ(IRQ_USB1);
    9e30:	mov.w	r5, #131072	; 0x20000
    9e34:	ldr	r7, [pc, #44]	; (9e64 <rx_queue_transfer+0x60>)
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    9e36:	add.w	r4, r4, r3, lsl #5
    9e3a:	ldrh	r2, [r6, #0]
static void rx_queue_transfer(int i)
{
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
	arm_dcache_delete(buffer, rx_packet_size);
	//memset(buffer, )
	NVIC_DISABLE_IRQ(IRQ_USB1);
    9e3c:	str	r5, [r7, #0]
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    9e3e:	mov	r0, r4
    9e40:	bl	91d0 <usb_prepare_transfer>
	NVIC_DISABLE_IRQ(IRQ_USB1);
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
    9e44:	mov	r1, r4
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
	arm_dcache_delete(buffer, rx_packet_size);
	//memset(buffer, )
	NVIC_DISABLE_IRQ(IRQ_USB1);
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
	NVIC_DISABLE_IRQ(IRQ_USB1);
    9e46:	str	r5, [r7, #0]
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
    9e48:	movs	r0, #4
    9e4a:	bl	9228 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    9e4e:	ldr	r3, [pc, #24]	; (9e68 <rx_queue_transfer+0x64>)
    9e50:	str	r5, [r3, #0]
    9e52:	pop	{r3, r4, r5, r6, r7, pc}
    9e54:	.word	0x20203000
    9e58:	.word	0x2000f1b6
    9e5c:	.word	0xe000ef5c
    9e60:	.word	0x20004400
    9e64:	.word	0xe000e18c
    9e68:	.word	0xe000e10c

00009e6c <usb_mtp_configure>:

uint32_t mtp_txEventCount = 0;
static void txEvent_event(transfer_t *t) { mtp_txEventCount++;}

void usb_mtp_configure(void)
{
    9e6c:	push	{r3, r4, r5, r6, r7, lr}
	if (usb_high_speed) {
    9e6e:	ldr	r3, [pc, #132]	; (9ef4 <usb_mtp_configure+0x88>)
    9e70:	ldrb	r3, [r3, #0]
    9e72:	cmp	r3, #0
    9e74:	beq.n	9ee6 <usb_mtp_configure+0x7a>
		tx_packet_size = MTP_TX_SIZE_480;
    9e76:	mov.w	r3, #512	; 0x200
    9e7a:	ldr	r2, [pc, #124]	; (9ef8 <usb_mtp_configure+0x8c>)
		rx_packet_size = MTP_RX_SIZE_480;
    9e7c:	ldr	r5, [pc, #124]	; (9efc <usb_mtp_configure+0x90>)
    9e7e:	mov	r6, r3
static void txEvent_event(transfer_t *t) { mtp_txEventCount++;}

void usb_mtp_configure(void)
{
	if (usb_high_speed) {
		tx_packet_size = MTP_TX_SIZE_480;
    9e80:	strh	r3, [r2, #0]
		rx_packet_size = MTP_RX_SIZE_480;
    9e82:	strh	r3, [r5, #0]
	} else {
		tx_packet_size = MTP_TX_SIZE_12;
		rx_packet_size = MTP_RX_SIZE_12;
	}
	printf("usb_mtp_configure: TX:%u RX:%u\n", tx_packet_size, rx_packet_size);
	memset(tx_transfer, 0, sizeof(tx_transfer));
    9e84:	movs	r1, #0
    9e86:	movs	r2, #128	; 0x80
    9e88:	ldr	r0, [pc, #116]	; (9f00 <usb_mtp_configure+0x94>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
	tx_head = 0;
    9e8a:	mov	r4, r1
	} else {
		tx_packet_size = MTP_TX_SIZE_12;
		rx_packet_size = MTP_RX_SIZE_12;
	}
	printf("usb_mtp_configure: TX:%u RX:%u\n", tx_packet_size, rx_packet_size);
	memset(tx_transfer, 0, sizeof(tx_transfer));
    9e8c:	bl	b9ec <memset>
	memset(rx_transfer, 0, sizeof(rx_transfer));
    9e90:	movs	r2, #128	; 0x80
    9e92:	ldr	r0, [pc, #112]	; (9f04 <usb_mtp_configure+0x98>)
    9e94:	mov	r1, r4
	tx_head = 0;
    9e96:	ldr	r7, [pc, #112]	; (9f08 <usb_mtp_configure+0x9c>)
		tx_packet_size = MTP_TX_SIZE_12;
		rx_packet_size = MTP_RX_SIZE_12;
	}
	printf("usb_mtp_configure: TX:%u RX:%u\n", tx_packet_size, rx_packet_size);
	memset(tx_transfer, 0, sizeof(tx_transfer));
	memset(rx_transfer, 0, sizeof(rx_transfer));
    9e98:	bl	b9ec <memset>
	tx_head = 0;
	rx_head = 0;
    9e9c:	ldr	r0, [pc, #108]	; (9f0c <usb_mtp_configure+0xa0>)
	rx_tail = 0;
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    9e9e:	mov	r1, r6
	printf("usb_mtp_configure: TX:%u RX:%u\n", tx_packet_size, rx_packet_size);
	memset(tx_transfer, 0, sizeof(tx_transfer));
	memset(rx_transfer, 0, sizeof(rx_transfer));
	tx_head = 0;
	rx_head = 0;
	rx_tail = 0;
    9ea0:	ldr	r6, [pc, #108]	; (9f10 <usb_mtp_configure+0xa4>)
	}
	printf("usb_mtp_configure: TX:%u RX:%u\n", tx_packet_size, rx_packet_size);
	memset(tx_transfer, 0, sizeof(tx_transfer));
	memset(rx_transfer, 0, sizeof(rx_transfer));
	tx_head = 0;
	rx_head = 0;
    9ea2:	strb	r4, [r0, #0]
	rx_tail = 0;
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    9ea4:	mov	r3, r4
    9ea6:	mov	r2, r4
    9ea8:	movs	r0, #4
		rx_packet_size = MTP_RX_SIZE_12;
	}
	printf("usb_mtp_configure: TX:%u RX:%u\n", tx_packet_size, rx_packet_size);
	memset(tx_transfer, 0, sizeof(tx_transfer));
	memset(rx_transfer, 0, sizeof(rx_transfer));
	tx_head = 0;
    9eaa:	strb	r4, [r7, #0]
	rx_head = 0;
	rx_tail = 0;
    9eac:	strb	r4, [r6, #0]
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    9eae:	bl	9168 <usb_config_tx>
	usb_config_rx(MTP_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    9eb2:	ldrh	r1, [r5, #0]
    9eb4:	mov	r2, r4
    9eb6:	ldr	r3, [pc, #92]	; (9f14 <usb_mtp_configure+0xa8>)
    9eb8:	movs	r0, #4
    9eba:	bl	9104 <usb_config_rx>
	usb_config_tx(MTP_EVENT_ENDPOINT, MTP_EVENT_SIZE, 0, txEvent_event);
    9ebe:	mov	r2, r4
    9ec0:	ldr	r3, [pc, #84]	; (9f18 <usb_mtp_configure+0xac>)
    9ec2:	movs	r1, #32
    9ec4:	movs	r0, #5
    9ec6:	bl	9168 <usb_config_tx>
	int i;
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    9eca:	mov	r0, r4
    9ecc:	bl	9e04 <rx_queue_transfer>
    9ed0:	movs	r0, #1
    9ed2:	bl	9e04 <rx_queue_transfer>
    9ed6:	movs	r0, #2
    9ed8:	bl	9e04 <rx_queue_transfer>
    9edc:	movs	r0, #3
}
    9ede:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	rx_tail = 0;
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
	usb_config_rx(MTP_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(MTP_EVENT_ENDPOINT, MTP_EVENT_SIZE, 0, txEvent_event);
	int i;
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    9ee2:	b.w	9e04 <rx_queue_transfer>
{
	if (usb_high_speed) {
		tx_packet_size = MTP_TX_SIZE_480;
		rx_packet_size = MTP_RX_SIZE_480;
	} else {
		tx_packet_size = MTP_TX_SIZE_12;
    9ee6:	movs	r3, #64	; 0x40
    9ee8:	ldr	r2, [pc, #12]	; (9ef8 <usb_mtp_configure+0x8c>)
		rx_packet_size = MTP_RX_SIZE_12;
    9eea:	ldr	r5, [pc, #16]	; (9efc <usb_mtp_configure+0x90>)
    9eec:	mov	r6, r3
{
	if (usb_high_speed) {
		tx_packet_size = MTP_TX_SIZE_480;
		rx_packet_size = MTP_RX_SIZE_480;
	} else {
		tx_packet_size = MTP_TX_SIZE_12;
    9eee:	strh	r3, [r2, #0]
		rx_packet_size = MTP_RX_SIZE_12;
    9ef0:	strh	r3, [r5, #0]
    9ef2:	b.n	9e84 <usb_mtp_configure+0x18>
    9ef4:	.word	0x2000f1cf
    9ef8:	.word	0x2000f1bc
    9efc:	.word	0x2000f1b6
    9f00:	.word	0x20004500
    9f04:	.word	0x20004400
    9f08:	.word	0x2000f1cb
    9f0c:	.word	0x2000f1c5
    9f10:	.word	0x2000f1c7
    9f14:	.word	0x00009dc1
    9f18:	.word	0x00009db1

00009f1c <usb_mtp_recv>:
	rx_head = head;
}


int usb_mtp_recv(void *buffer, uint32_t timeout)
{
    9f1c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t wait_begin_at = systick_millis_count;
    9f20:	ldr	r6, [pc, #144]	; (9fb4 <usb_mtp_recv+0x98>)
	uint32_t tail = rx_tail;
    9f22:	ldr.w	fp, [pc, #164]	; 9fc8 <usb_mtp_recv+0xac>
	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    9f26:	ldr	r7, [pc, #144]	; (9fb8 <usb_mtp_recv+0x9c>)
}


int usb_mtp_recv(void *buffer, uint32_t timeout)
{
	uint32_t wait_begin_at = systick_millis_count;
    9f28:	ldr.w	r9, [r6]
	uint32_t tail = rx_tail;
    9f2c:	ldrb.w	r4, [fp]
	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    9f30:	ldrb	r3, [r7, #0]
    9f32:	cbz	r3, 9f6e <usb_mtp_recv+0x52>
		if (tail != rx_head) break;
    9f34:	ldr.w	r8, [pc, #148]	; 9fcc <usb_mtp_recv+0xb0>
    9f38:	uxtb	r4, r4
    9f3a:	mov	r5, r1
    9f3c:	mov	sl, r0
    9f3e:	ldrb.w	r3, [r8]
    9f42:	cmp	r4, r3
    9f44:	bne.n	9f76 <usb_mtp_recv+0x5a>
		if (systick_millis_count - wait_begin_at > timeout)  {
    9f46:	ldr	r3, [r6, #0]
    9f48:	rsb	r3, r9, r3
    9f4c:	cmp	r1, r3
    9f4e:	bcs.n	9f64 <usb_mtp_recv+0x48>
    9f50:	b.n	9fa6 <usb_mtp_recv+0x8a>
{
	uint32_t wait_begin_at = systick_millis_count;
	uint32_t tail = rx_tail;
	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
		if (tail != rx_head) break;
    9f52:	ldrb.w	r3, [r8]
    9f56:	cmp	r4, r3
    9f58:	bne.n	9f76 <usb_mtp_recv+0x5a>
		if (systick_millis_count - wait_begin_at > timeout)  {
    9f5a:	ldr	r3, [r6, #0]
    9f5c:	rsb	r3, r9, r3
    9f60:	cmp	r3, r5
    9f62:	bhi.n	9fa6 <usb_mtp_recv+0x8a>
			return 0;
		}
		yield();
    9f64:	bl	a124 <yield>
int usb_mtp_recv(void *buffer, uint32_t timeout)
{
	uint32_t wait_begin_at = systick_millis_count;
	uint32_t tail = rx_tail;
	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    9f68:	ldrb	r3, [r7, #0]
    9f6a:	cmp	r3, #0
    9f6c:	bne.n	9f52 <usb_mtp_recv+0x36>
    9f6e:	mov.w	r0, #4294967295
    9f72:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (systick_millis_count - wait_begin_at > timeout)  {
			return 0;
		}
		yield();
	}
	if (++tail > RX_NUM) tail = 0;
    9f76:	adds	r4, #1
    9f78:	cmp	r4, #4
    9f7a:	bhi.n	9fac <usb_mtp_recv+0x90>
    9f7c:	uxtb	r3, r4
	uint32_t i = rx_list[tail];
    9f7e:	ldr	r1, [pc, #60]	; (9fbc <usb_mtp_recv+0xa0>)
	int len = rx_list_transfer_len[tail];
	rx_tail = tail;

	uint8_t *rx_item_buffer = rx_buffer + i * MTP_RX_SIZE_480;
	// BUGBUG Should we use the 
	memcpy(buffer,  rx_item_buffer, len);
    9f80:	mov	r0, sl
		}
		yield();
	}
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	int len = rx_list_transfer_len[tail];
    9f82:	ldr	r2, [pc, #60]	; (9fc0 <usb_mtp_recv+0xa4>)
			return 0;
		}
		yield();
	}
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
    9f84:	ldrb	r5, [r1, r4]
	int len = rx_list_transfer_len[tail];
    9f86:	ldr.w	r4, [r2, r4, lsl #2]
	rx_tail = tail;

	uint8_t *rx_item_buffer = rx_buffer + i * MTP_RX_SIZE_480;
	// BUGBUG Should we use the 
	memcpy(buffer,  rx_item_buffer, len);
    9f8a:	ldr	r1, [pc, #56]	; (9fc4 <usb_mtp_recv+0xa8>)
    9f8c:	mov	r2, r4
		yield();
	}
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	int len = rx_list_transfer_len[tail];
	rx_tail = tail;
    9f8e:	strb.w	r3, [fp]

	uint8_t *rx_item_buffer = rx_buffer + i * MTP_RX_SIZE_480;
	// BUGBUG Should we use the 
	memcpy(buffer,  rx_item_buffer, len);
    9f92:	add.w	r1, r1, r5, lsl #9
    9f96:	bl	80b4 <memcpy>
	rx_queue_transfer(i);
    9f9a:	mov	r0, r5
    9f9c:	bl	9e04 <rx_queue_transfer>
	//memset(rx_transfer, 0, sizeof(rx_transfer));
	//usb_prepare_transfer(rx_transfer + 0, rx_buffer, rx_packet_size, 0);
	//usb_receive(MTP_RX_ENDPOINT, rx_transfer + 0);
	return len;
    9fa0:	mov	r0, r4
}
    9fa2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t tail = rx_tail;
	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
		if (tail != rx_head) break;
		if (systick_millis_count - wait_begin_at > timeout)  {
			return 0;
    9fa6:	movs	r0, #0
    9fa8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9fac:	movs	r3, #0
		}
		yield();
	}
	if (++tail > RX_NUM) tail = 0;
    9fae:	mov	r4, r3
    9fb0:	b.n	9f7e <usb_mtp_recv+0x62>
    9fb2:	nop
    9fb4:	.word	0x2000c720
    9fb8:	.word	0x2000f1ce
    9fbc:	.word	0x2000c6e8
    9fc0:	.word	0x2000c6f0
    9fc4:	.word	0x20203000
    9fc8:	.word	0x2000f1c7
    9fcc:	.word	0x2000f1c5

00009fd0 <usb_mtp_available>:
	return len;
}

int usb_mtp_available(void)
{
	if (!usb_configuration) return 0;
    9fd0:	ldr	r3, [pc, #28]	; (9ff0 <usb_mtp_available+0x20>)
    9fd2:	ldrb	r3, [r3, #0]
    9fd4:	and.w	r0, r3, #255	; 0xff
    9fd8:	cbz	r3, 9fee <usb_mtp_available+0x1e>
	if (rx_head != rx_tail) return rx_packet_size;
    9fda:	ldr	r2, [pc, #24]	; (9ff4 <usb_mtp_available+0x24>)
    9fdc:	ldr	r3, [pc, #24]	; (9ff8 <usb_mtp_available+0x28>)
    9fde:	ldrb	r2, [r2, #0]
    9fe0:	ldrb	r3, [r3, #0]
    9fe2:	cmp	r2, r3
    9fe4:	beq.n	9fec <usb_mtp_available+0x1c>
    9fe6:	ldr	r3, [pc, #20]	; (9ffc <usb_mtp_available+0x2c>)
    9fe8:	ldrh	r0, [r3, #0]
    9fea:	bx	lr
	return len;
}

int usb_mtp_available(void)
{
	if (!usb_configuration) return 0;
    9fec:	movs	r0, #0
	if (rx_head != rx_tail) return rx_packet_size;
	//if (!(usb_transfer_status(rx_transfer) & 0x80)) return MTP_RX_SIZE;
	return 0;
}
    9fee:	bx	lr
    9ff0:	.word	0x2000f1ce
    9ff4:	.word	0x2000f1c5
    9ff8:	.word	0x2000f1c7
    9ffc:	.word	0x2000f1b6

0000a000 <usb_mtp_send>:

/*************************************************************************/
/**                             Send                                    **/
/*************************************************************************/
int usb_mtp_send(const void *buffer, uint32_t len, uint32_t timeout)
{
    a000:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	transfer_t *xfer = tx_transfer + tx_head;
    a004:	ldr.w	sl, [pc, #192]	; a0c8 <usb_mtp_send+0xc8>

/*************************************************************************/
/**                             Send                                    **/
/*************************************************************************/
int usb_mtp_send(const void *buffer, uint32_t len, uint32_t timeout)
{
    a008:	mov	r8, r2
	transfer_t *xfer = tx_transfer + tx_head;
	uint32_t wait_begin_at = systick_millis_count;
    a00a:	ldr	r5, [pc, #164]	; (a0b0 <usb_mtp_send+0xb0>)

	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    a00c:	ldr	r6, [pc, #164]	; (a0b4 <usb_mtp_send+0xb4>)
/*************************************************************************/
/**                             Send                                    **/
/*************************************************************************/
int usb_mtp_send(const void *buffer, uint32_t len, uint32_t timeout)
{
	transfer_t *xfer = tx_transfer + tx_head;
    a00e:	ldrb.w	r4, [sl]
    a012:	ldr	r2, [pc, #164]	; (a0b8 <usb_mtp_send+0xb8>)
	uint32_t wait_begin_at = systick_millis_count;
    a014:	ldr	r7, [r5, #0]

	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    a016:	ldrb	r3, [r6, #0]
/*************************************************************************/
/**                             Send                                    **/
/*************************************************************************/
int usb_mtp_send(const void *buffer, uint32_t len, uint32_t timeout)
{
	transfer_t *xfer = tx_transfer + tx_head;
    a018:	add.w	r4, r2, r4, lsl #5
	uint32_t wait_begin_at = systick_millis_count;

	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    a01c:	cmp	r3, #0
    a01e:	beq.n	a0a0 <usb_mtp_send+0xa0>
    a020:	mov	fp, r0
    a022:	mov	r9, r1
    a024:	b.n	a036 <usb_mtp_send+0x36>
		uint32_t status = usb_transfer_status(xfer);
		if (!(status & 0x80)) break; // transfer descriptor ready
		if (systick_millis_count - wait_begin_at > timeout) return 0;
    a026:	ldr	r3, [r5, #0]
    a028:	subs	r3, r3, r7
    a02a:	cmp	r3, r8
    a02c:	bhi.n	a0a8 <usb_mtp_send+0xa8>
		yield();
    a02e:	bl	a124 <yield>
{
	transfer_t *xfer = tx_transfer + tx_head;
	uint32_t wait_begin_at = systick_millis_count;

	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    a032:	ldrb	r3, [r6, #0]
    a034:	cbz	r3, a0a0 <usb_mtp_send+0xa0>
		uint32_t status = usb_transfer_status(xfer);
    a036:	mov	r0, r4
    a038:	bl	924c <usb_transfer_status>
		if (!(status & 0x80)) break; // transfer descriptor ready
    a03c:	lsls	r3, r0, #24
    a03e:	bmi.n	a026 <usb_mtp_send+0x26>
		if (systick_millis_count - wait_begin_at > timeout) return 0;
		yield();
	}
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    a040:	ldr	r3, [pc, #120]	; (a0bc <usb_mtp_send+0xbc>)
	memcpy(txdata, buffer, len);
    a042:	mov	r2, r9
		uint32_t status = usb_transfer_status(xfer);
		if (!(status & 0x80)) break; // transfer descriptor ready
		if (systick_millis_count - wait_begin_at > timeout) return 0;
		yield();
	}
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    a044:	ldrb.w	r5, [sl]
	memcpy(txdata, buffer, len);
    a048:	mov	r1, fp
		uint32_t status = usb_transfer_status(xfer);
		if (!(status & 0x80)) break; // transfer descriptor ready
		if (systick_millis_count - wait_begin_at > timeout) return 0;
		yield();
	}
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    a04a:	add.w	r5, r3, r5, lsl #9
	memcpy(txdata, buffer, len);
    a04e:	mov	r0, r5
    a050:	bl	80b4 <memcpy>
	arm_dcache_flush_delete(txdata, tx_packet_size );
    a054:	ldr	r2, [pc, #104]	; (a0c0 <usb_mtp_send+0xc0>)
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    a056:	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    a05a:	ldrh	r2, [r2, #0]
    a05c:	add	r2, r5
	asm volatile("": : :"memory");
	asm("dsb");
    a05e:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    a062:	ldr	r1, [pc, #96]	; (a0c4 <usb_mtp_send+0xc4>)
    a064:	str	r3, [r1, #0]
		location += 32;
    a066:	adds	r3, #32
	} while (location < end_addr);
    a068:	cmp	r2, r3
    a06a:	bhi.n	a064 <usb_mtp_send+0x64>
	asm("dsb");
    a06c:	dsb	sy
	asm("isb");
    a070:	isb	sy
	usb_prepare_transfer(xfer, txdata, len, 0);
    a074:	movs	r3, #0
    a076:	mov	r2, r9
    a078:	mov	r1, r5
    a07a:	mov	r0, r4
    a07c:	bl	91d0 <usb_prepare_transfer>
	usb_transmit(MTP_TX_ENDPOINT, xfer);
    a080:	mov	r1, r4
    a082:	movs	r0, #4
    a084:	bl	9200 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    a088:	ldrb.w	r3, [sl]
    a08c:	ldr	r2, [pc, #56]	; (a0c8 <usb_mtp_send+0xc8>)
	return len;
    a08e:	mov	r0, r9
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
	memcpy(txdata, buffer, len);
	arm_dcache_flush_delete(txdata, tx_packet_size );
	usb_prepare_transfer(xfer, txdata, len, 0);
	usb_transmit(MTP_TX_ENDPOINT, xfer);
	if (++tx_head >= TX_NUM) tx_head = 0;
    a090:	adds	r3, #1
    a092:	uxtb	r3, r3
    a094:	cmp	r3, #3
    a096:	it	hi
    a098:	movhi	r3, #0
    a09a:	strb	r3, [r2, #0]
	return len;
    a09c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	transfer_t *xfer = tx_transfer + tx_head;
	uint32_t wait_begin_at = systick_millis_count;

	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    a0a0:	mov.w	r0, #4294967295
    a0a4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint32_t status = usb_transfer_status(xfer);
		if (!(status & 0x80)) break; // transfer descriptor ready
		if (systick_millis_count - wait_begin_at > timeout) return 0;
    a0a8:	movs	r0, #0
	arm_dcache_flush_delete(txdata, tx_packet_size );
	usb_prepare_transfer(xfer, txdata, len, 0);
	usb_transmit(MTP_TX_ENDPOINT, xfer);
	if (++tx_head >= TX_NUM) tx_head = 0;
	return len;
}
    a0aa:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a0ae:	nop
    a0b0:	.word	0x2000c720
    a0b4:	.word	0x2000f1ce
    a0b8:	.word	0x20004500
    a0bc:	.word	0x20203800
    a0c0:	.word	0x2000f1bc
    a0c4:	.word	0xe000ef70
    a0c8:	.word	0x2000f1cb

0000a0cc <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    a0cc:	ldr	r2, [pc, #72]	; (a118 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    a0ce:	ldr	r3, [pc, #76]	; (a11c <usb_init_serialnumber+0x50>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    a0d0:	ldr.w	r0, [r2, #544]	; 0x220
    a0d4:	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    a0d8:	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    a0da:	push	{r4, lr}
    a0dc:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    a0de:	bhi.n	a0e6 <usb_init_serialnumber+0x1a>
    a0e0:	add.w	r0, r0, r0, lsl #2
    a0e4:	lsls	r0, r0, #1
    a0e6:	ldr	r4, [pc, #56]	; (a120 <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    a0e8:	add	r1, sp, #4
    a0ea:	movs	r2, #10
    a0ec:	bl	9594 <ultoa>
    a0f0:	add	r1, sp, #4
	for (i=0; i<10; i++) {
    a0f2:	movs	r3, #0
    a0f4:	mov	r0, r4
		char c = buf[i];
    a0f6:	ldrb.w	r2, [r1], #1
    a0fa:	adds	r3, #1
		if (!c) break;
    a0fc:	cbz	r2, a10e <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    a0fe:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    a100:	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    a104:	bne.n	a0f6 <usb_init_serialnumber+0x2a>
    a106:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    a108:	strb	r3, [r4, #0]
}
    a10a:	add	sp, #16
    a10c:	pop	{r4, pc}
    a10e:	lsls	r3, r3, #1
    a110:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    a112:	strb	r3, [r4, #0]
}
    a114:	add	sp, #16
    a116:	pop	{r4, pc}
    a118:	.word	0x401f4400
    a11c:	.word	0x0098967f
    a120:	.word	0x2000193c

0000a124 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    a124:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    a128:	ldr	r6, [pc, #200]	; (a1f4 <yield+0xd0>)
    a12a:	ldrb	r3, [r6, #0]
    a12c:	cbz	r3, a154 <yield+0x30>
	if (running) return; // TODO: does this need to be atomic?
    a12e:	ldr	r7, [pc, #200]	; (a1f8 <yield+0xd4>)
    a130:	ldrb	r2, [r7, #0]
    a132:	cbnz	r2, a154 <yield+0x30>
	running = 1;
    a134:	movs	r2, #1


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    a136:	lsls	r1, r3, #31
void yield(void)
{
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    a138:	strb	r2, [r7, #0]


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    a13a:	bmi.n	a1ac <yield+0x88>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    a13c:	lsls	r2, r3, #30
    a13e:	bmi.n	a174 <yield+0x50>

	running = 0;
    a140:	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    a142:	lsls	r3, r3, #29
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();

	running = 0;
    a144:	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    a146:	bpl.n	a154 <yield+0x30>
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    a148:	ldr	r3, [pc, #176]	; (a1fc <yield+0xd8>)
    a14a:	ldr	r2, [r3, #0]
    a14c:	cbz	r2, a154 <yield+0x30>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    a14e:	mrs	r2, IPSR
		if (ipsr != 0) return;
    a152:	cbz	r2, a158 <yield+0x34>
    a154:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a158:	mrs	r0, PRIMASK
		__disable_irq();
    a15c:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    a15e:	ldr	r2, [r3, #0]
		if (first == nullptr) {
    a160:	cbz	r2, a16a <yield+0x46>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    a162:	ldr	r4, [pc, #156]	; (a200 <yield+0xdc>)
    a164:	ldrb	r1, [r4, #0]
    a166:	cmp	r1, #0
    a168:	beq.n	a1ca <yield+0xa6>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a16a:	cmp	r0, #0
    a16c:	bne.n	a154 <yield+0x30>
    a16e:	cpsie	i
    a170:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    a174:	ldr.w	r8, [pc, #148]	; a20c <yield+0xe8>
    a178:	ldrb.w	r2, [r8]
    a17c:	cmp	r2, #0
    a17e:	beq.n	a140 <yield+0x1c>
    a180:	movs	r4, #0
    a182:	ldr.w	r9, [pc, #140]	; a210 <yield+0xec>
    a186:	b.n	a194 <yield+0x70>
    a188:	adds	r4, #1
    a18a:	ldrb.w	r3, [r8]
    a18e:	uxtb	r4, r4
    a190:	cmp	r3, r4
    a192:	bls.n	a1bc <yield+0x98>
			s_serials_with_serial_events[i]->doYieldCode();
    a194:	ldr.w	r5, [r9, r4, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    a198:	ldr	r3, [r5, #0]
    a19a:	mov	r0, r5
    a19c:	ldr	r3, [r3, #16]
    a19e:	blx	r3
    a1a0:	cmp	r0, #0
    a1a2:	beq.n	a188 <yield+0x64>
    a1a4:	ldr	r3, [r5, #20]
    a1a6:	ldr	r3, [r3, #8]
    a1a8:	blx	r3
    a1aa:	b.n	a188 <yield+0x64>
				if (elapsed > 750) break;
			}
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    a1ac:	bl	8770 <usb_serial_available>
	running = 1;


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    a1b0:	cbnz	r0, a1e8 <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    a1b2:	ldr	r3, [pc, #80]	; (a204 <yield+0xe0>)
    a1b4:	ldrb	r3, [r3, #0]
    a1b6:	cbnz	r3, a1c0 <yield+0x9c>
    a1b8:	ldrb	r3, [r6, #0]
    a1ba:	b.n	a13c <yield+0x18>
    a1bc:	ldrb	r3, [r6, #0]
    a1be:	b.n	a140 <yield+0x1c>
    a1c0:	ldrb	r3, [r6, #0]
    a1c2:	and.w	r3, r3, #254	; 0xfe
    a1c6:	strb	r3, [r6, #0]
    a1c8:	b.n	a13c <yield+0x18>
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    a1ca:	movs	r6, #1
		firstYield = first->_next;
    a1cc:	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    a1ce:	strb	r6, [r4, #0]
		firstYield = first->_next;
    a1d0:	str	r5, [r3, #0]
		if (firstYield) {
    a1d2:	cbz	r5, a1ee <yield+0xca>
			firstYield->_prev = nullptr;
    a1d4:	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a1d6:	cbnz	r0, a1da <yield+0xb6>
    a1d8:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    a1da:	movs	r5, #0
		(*(first->_function))(*first);
    a1dc:	ldr	r3, [r2, #8]
    a1de:	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    a1e0:	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    a1e2:	blx	r3
		runningFromYield = false;
    a1e4:	strb	r5, [r4, #0]
    a1e6:	b.n	a154 <yield+0x30>
	running = 1;


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    a1e8:	bl	a458 <serialEvent()>
    a1ec:	b.n	a1b2 <yield+0x8e>
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    a1ee:	ldr	r3, [pc, #24]	; (a208 <yield+0xe4>)
    a1f0:	str	r5, [r3, #0]
    a1f2:	b.n	a1d6 <yield+0xb2>
    a1f4:	.word	0x2000195e
    a1f8:	.word	0x2000f1c1
    a1fc:	.word	0x200045d4
    a200:	.word	0x2000f1bf
    a204:	.word	0x60001fa6
    a208:	.word	0x200045e0
    a20c:	.word	0x2000f1c0
    a210:	.word	0x200045e4

0000a214 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    a214:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a216:	mrs	r1, PRIMASK
		__disable_irq();
    a21a:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    a21c:	ldr	r4, [pc, #48]	; (a250 <EventResponder::runFromInterrupt()+0x3c>)
    a21e:	ldr	r3, [r4, #0]
		if (first) {
    a220:	cbz	r3, a246 <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    a222:	ldr	r6, [pc, #48]	; (a254 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    a224:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    a226:	ldr	r2, [r3, #20]
    a228:	str	r2, [r4, #0]
			if (firstInterrupt) {
    a22a:	cbz	r2, a24c <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    a22c:	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a22e:	cbnz	r1, a232 <EventResponder::runFromInterrupt()+0x1e>
    a230:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    a232:	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    a234:	mov	r0, r3
    a236:	ldr	r3, [r3, #8]
    a238:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a23a:	mrs	r1, PRIMASK
		__disable_irq();
    a23e:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    a240:	ldr	r3, [r4, #0]
		if (first) {
    a242:	cmp	r3, #0
    a244:	bne.n	a226 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a246:	cbnz	r1, a24a <EventResponder::runFromInterrupt()+0x36>
    a248:	cpsie	i
    a24a:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    a24c:	str	r2, [r6, #0]
    a24e:	b.n	a22e <EventResponder::runFromInterrupt()+0x1a>
    a250:	.word	0x200045dc
    a254:	.word	0x200045d8

0000a258 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    a258:	b.w	a214 <EventResponder::runFromInterrupt()>

0000a25c <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    a25c:	ldr	r2, [pc, #16]	; (a270 <systick_isr+0x14>)
    a25e:	ldr	r3, [pc, #20]	; (a274 <systick_isr+0x18>)
    a260:	ldr	r1, [r2, #0]
	systick_millis_count++;
    a262:	ldr	r2, [pc, #20]	; (a278 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    a264:	str	r1, [r3, #0]
	systick_millis_count++;
    a266:	ldr	r3, [r2, #0]
    a268:	adds	r3, #1
    a26a:	str	r3, [r2, #0]
    a26c:	bx	lr
    a26e:	nop
    a270:	.word	0xe0001004
    a274:	.word	0x2000c71c
    a278:	.word	0x2000c720

0000a27c <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    a27c:	b.w	877c <usb_serial_flush_input>

0000a280 <usb_serial_class::peek()>:
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    a280:	b.w	872c <usb_serial_peekchar>

0000a284 <usb_serial_class::read()>:
			}
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    a284:	b.w	87f0 <usb_serial_getchar>

0000a288 <usb_serial_class::available()>:
				if (elapsed > 750) break;
			}
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    a288:	b.w	8770 <usb_serial_available>

0000a28c <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    a28c:	b.w	88a4 <usb_serial_flush_output>

0000a290 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    a290:	b.w	8854 <usb_serial_write_buffer_free>

0000a294 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    a294:	mov	r0, r1
    a296:	mov	r1, r2
    a298:	b.w	883c <usb_serial_write>

0000a29c <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    a29c:	mov	r0, r1
    a29e:	b.w	8810 <usb_serial_putchar>
    a2a2:	nop

0000a2a4 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    a2a4:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    a2a6:	bl	124 <setup>
	while (1) {
		loop();
    a2aa:	bl	61dc <loop>
		yield();
    a2ae:	bl	a124 <yield>
    a2b2:	b.n	a2aa <main+0x6>

0000a2b4 <Stream::timedPeek()>:
  return -1;     // -1 indicates timeout
}

// private method to peek stream with timeout
int Stream::timedPeek()
{
    a2b4:	push	{r4, r5, r6, lr}
    a2b6:	ldr	r5, [pc, #40]	; (a2e0 <Stream::timedPeek()+0x2c>)
    a2b8:	mov	r4, r0
    a2ba:	ldr	r6, [r5, #0]
    a2bc:	b.n	a2cc <Stream::timedPeek()+0x18>
  int c;
  unsigned long startMillis = millis();
  do {
    c = peek();
    if (c >= 0) return c;
    yield();
    a2be:	bl	a124 <yield>
    a2c2:	ldr	r3, [r5, #0]
// private method to peek stream with timeout
int Stream::timedPeek()
{
  int c;
  unsigned long startMillis = millis();
  do {
    a2c4:	ldr	r2, [r4, #8]
    a2c6:	subs	r3, r3, r6
    a2c8:	cmp	r3, r2
    a2ca:	bcs.n	a2da <Stream::timedPeek()+0x26>
    c = peek();
    a2cc:	ldr	r3, [r4, #0]
    a2ce:	mov	r0, r4
    a2d0:	ldr	r3, [r3, #24]
    a2d2:	blx	r3
    if (c >= 0) return c;
    a2d4:	cmp	r0, #0
    a2d6:	blt.n	a2be <Stream::timedPeek()+0xa>
    yield();
  } while(millis() - startMillis < _timeout);
  return -1;     // -1 indicates timeout
}
    a2d8:	pop	{r4, r5, r6, pc}
  do {
    c = peek();
    if (c >= 0) return c;
    yield();
  } while(millis() - startMillis < _timeout);
  return -1;     // -1 indicates timeout
    a2da:	mov.w	r0, #4294967295
}
    a2de:	pop	{r4, r5, r6, pc}
    a2e0:	.word	0x2000c720

0000a2e4 <Stream::peekNextDigit()>:

// returns peek of the next digit in the stream or -1 if timeout
// discards non-numeric characters
int Stream::peekNextDigit()
{
    a2e4:	push	{r4, lr}
    a2e6:	mov	r4, r0
    a2e8:	b.n	a2f8 <Stream::peekNextDigit()+0x14>
  int c;
  while (1) {
    c = timedPeek();
    if (c < 0) return c;  // timeout
    if (c == '-') return c;
    a2ea:	cmp	r3, #45	; 0x2d
    a2ec:	beq.n	a308 <Stream::peekNextDigit()+0x24>
    if (c >= '0' && c <= '9') return c;
    a2ee:	cmp	r2, #9
    a2f0:	bls.n	a308 <Stream::peekNextDigit()+0x24>
    read();  // discard non-numeric
    a2f2:	ldr	r3, [r4, #0]
    a2f4:	ldr	r3, [r3, #20]
    a2f6:	blx	r3
// discards non-numeric characters
int Stream::peekNextDigit()
{
  int c;
  while (1) {
    c = timedPeek();
    a2f8:	mov	r0, r4
    a2fa:	bl	a2b4 <Stream::timedPeek()>
    if (c < 0) return c;  // timeout
    a2fe:	subs	r3, r0, #0
    if (c == '-') return c;
    if (c >= '0' && c <= '9') return c;
    read();  // discard non-numeric
    a300:	mov	r0, r4
  int c;
  while (1) {
    c = timedPeek();
    if (c < 0) return c;  // timeout
    if (c == '-') return c;
    if (c >= '0' && c <= '9') return c;
    a302:	sub.w	r2, r3, #48	; 0x30
int Stream::peekNextDigit()
{
  int c;
  while (1) {
    c = timedPeek();
    if (c < 0) return c;  // timeout
    a306:	bge.n	a2ea <Stream::peekNextDigit()+0x6>
    if (c == '-') return c;
    if (c >= '0' && c <= '9') return c;
    read();  // discard non-numeric
  }
}
    a308:	mov	r0, r3
    a30a:	pop	{r4, pc}

0000a30c <Stream::parseInt(char)>:
}

// as above but a given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
long Stream::parseInt(char skipChar)
{
    a30c:	push	{r3, r4, r5, r6, r7, lr}
    a30e:	mov	r5, r1
    a310:	mov	r4, r0
  boolean isNegative = false;
  long value = 0;
  int c;

  c = peekNextDigit();
    a312:	bl	a2e4 <Stream::peekNextDigit()>
  // ignore non numeric leading characters
  if(c < 0)
    a316:	cmp	r0, #0
    a318:	blt.n	a362 <Stream::parseInt(char)+0x56>
    a31a:	movs	r6, #0
    a31c:	mov	r7, r6
    return 0; // zero returned if timeout

  do{
    if(c == skipChar)
    a31e:	cmp	r0, r5
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
    a320:	sub.w	r2, r0, #48	; 0x30
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout

  do{
    if(c == skipChar)
    a324:	beq.n	a33a <Stream::parseInt(char)+0x2e>
      ; // ignore this charactor
    else if(c == '-')
    a326:	cmp	r0, #45	; 0x2d
    a328:	beq.n	a35a <Stream::parseInt(char)+0x4e>
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
      value = value * 10 + c - '0';
    a32a:	add.w	r3, r6, r6, lsl #2
  do{
    if(c == skipChar)
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
    a32e:	cmp	r2, #9
      value = value * 10 + c - '0';
    a330:	add.w	r0, r0, r3, lsl #1
  do{
    if(c == skipChar)
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
    a334:	bhi.n	a33a <Stream::parseInt(char)+0x2e>
      value = value * 10 + c - '0';
    a336:	sub.w	r6, r0, #48	; 0x30
    read();  // consume the character we got with peek
    a33a:	ldr	r3, [r4, #0]
    a33c:	mov	r0, r4
    a33e:	ldr	r3, [r3, #20]
    a340:	blx	r3
    c = timedPeek();
    a342:	mov	r0, r4
    a344:	bl	a2b4 <Stream::timedPeek()>
  }
  while( (c >= '0' && c <= '9') || c == skipChar );
    a348:	sub.w	r3, r0, #48	; 0x30
    a34c:	cmp	r3, #9
    a34e:	bls.n	a31e <Stream::parseInt(char)+0x12>
    a350:	cmp	r0, r5
    a352:	beq.n	a31e <Stream::parseInt(char)+0x12>

  if(isNegative)
    a354:	cbz	r7, a35e <Stream::parseInt(char)+0x52>
    value = -value;
    a356:	negs	r0, r6
    a358:	pop	{r3, r4, r5, r6, r7, pc}

  do{
    if(c == skipChar)
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    a35a:	movs	r7, #1
    a35c:	b.n	a33a <Stream::parseInt(char)+0x2e>
    a35e:	mov	r0, r6
  while( (c >= '0' && c <= '9') || c == skipChar );

  if(isNegative)
    value = -value;
  return value;
}
    a360:	pop	{r3, r4, r5, r6, r7, pc}
  int c;

  c = peekNextDigit();
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout
    a362:	movs	r0, #0
    a364:	pop	{r3, r4, r5, r6, r7, pc}
    a366:	nop

0000a368 <Stream::parseInt()>:
// returns the first valid (long) integer value from the current position.
// initial characters that are not digits (or the minus sign) are skipped
// function is terminated by the first character that is not a digit.
long Stream::parseInt()
{
  return parseInt(NO_SKIP_CHAR); // terminate on first non-digit character (or timeout)
    a368:	movs	r1, #1
    a36a:	b.w	a30c <Stream::parseInt(char)>
    a36e:	nop

0000a370 <Print::println()>:
	if (n < 0) return printNumber64(-n, 10, 1);
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
    a370:	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
    a372:	ldr	r4, [pc, #24]	; (a38c <Print::println()+0x1c>)
	if (n < 0) return printNumber64(-n, 10, 1);
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
    a374:	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    a376:	ldr	r3, [r0, #0]
    a378:	movs	r2, #2
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    a37a:	ldrh	r4, [r4, #0]
	return write(buf, 2);
    a37c:	add	r1, sp, #4
    a37e:	ldr	r3, [r3, #4]
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    a380:	strh.w	r4, [sp, #4]
	return write(buf, 2);
    a384:	blx	r3
}
    a386:	add	sp, #8
    a388:	pop	{r4, pc}
    a38a:	nop
    a38c:	.word	0x20000400

0000a390 <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
	((class Print *)file)->write((uint8_t *)ptr, len);
    a390:	ldr	r3, [r0, #0]
}

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    a392:	push	{r4, lr}
    a394:	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
    a396:	ldr	r3, [r3, #4]
    a398:	blx	r3
	return len;
}
    a39a:	mov	r0, r4
    a39c:	pop	{r4, pc}
    a39e:	nop

0000a3a0 <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
    a3a0:	push	{r1, r2, r3}
    a3a2:	push	{lr}
    a3a4:	sub	sp, #8
    a3a6:	add	r3, sp, #12
    a3a8:	ldr.w	r1, [r3], #4
	va_start(ap, format);
#ifdef __STRICT_ANSI__
	va_end(ap);
	return 0;  // TODO: make this work with -std=c++0x
#else
	int retval = vdprintf((int)this, format, ap);
    a3ac:	mov	r2, r3
}

int Print::printf(const char *format, ...)
{
	va_list ap;
	va_start(ap, format);
    a3ae:	str	r3, [sp, #4]
#ifdef __STRICT_ANSI__
	va_end(ap);
	return 0;  // TODO: make this work with -std=c++0x
#else
	int retval = vdprintf((int)this, format, ap);
    a3b0:	bl	d850 <vdprintf>
	va_end(ap);
	return retval;
#endif
}
    a3b4:	add	sp, #8
    a3b6:	ldr.w	lr, [sp], #4
    a3ba:	add	sp, #12
    a3bc:	bx	lr
    a3be:	nop

0000a3c0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	return retval;
#endif
}

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    a3c0:	push	{r4, r5, r6, r7, lr}
    a3c2:	mov	r6, r0
    a3c4:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    a3c6:	cmp	r2, #0
    a3c8:	beq.n	a432 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    a3ca:	cmp	r2, #1
    a3cc:	it	eq
    a3ce:	moveq	r2, #10
	}


	if (n == 0) {
    a3d0:	cbz	r1, a428 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    a3d2:	movs	r5, #33	; 0x21
    a3d4:	b.n	a3d8 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    a3d6:	uxtb	r5, r7
    a3d8:	subs	r7, r5, #1
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    a3da:	udiv	r4, r1, r2
    a3de:	mls	r1, r2, r4, r1
    a3e2:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    a3e4:	cmp	r1, #9
    a3e6:	add.w	r1, r0, #55	; 0x37
    a3ea:	add.w	r0, r0, #48	; 0x30
    a3ee:	it	hi
    a3f0:	uxtbhi	r0, r1
			n /= base;
			if (n == 0) break;
    a3f2:	mov	r1, r4
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    a3f4:	add	r4, sp, #40	; 0x28
    a3f6:	it	ls
    a3f8:	uxtbls	r0, r0
    a3fa:	add	r4, r5
    a3fc:	strb.w	r0, [r4, #-36]
			n /= base;
			if (n == 0) break;
    a400:	cmp	r1, #0
    a402:	bne.n	a3d6 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    a404:	cbz	r3, a414 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    a406:	subs	r5, #1
		buf[i] = '-';
    a408:	add	r3, sp, #40	; 0x28
    a40a:	movs	r2, #45	; 0x2d
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
		i--;
    a40c:	uxtb	r5, r5
		buf[i] = '-';
    a40e:	add	r3, r5
    a410:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    a414:	ldr	r3, [r6, #0]
    a416:	add	r1, sp, #4
    a418:	rsb	r2, r5, #34	; 0x22
    a41c:	mov	r0, r6
    a41e:	add	r1, r5
    a420:	ldr	r3, [r3, #4]
    a422:	blx	r3
}
    a424:	add	sp, #44	; 0x2c
    a426:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    a428:	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    a42a:	movs	r5, #33	; 0x21
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    a42c:	strb.w	r2, [sp, #37]	; 0x25
    a430:	b.n	a404 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    a432:	ldr	r3, [r0, #0]
    a434:	uxtb	r1, r1
    a436:	ldr	r3, [r3, #0]
    a438:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    a43a:	add	sp, #44	; 0x2c
    a43c:	pop	{r4, r5, r6, r7, pc}
    a43e:	nop

0000a440 <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    a440:	cmp	r1, #0
    a442:	blt.n	a44c <Print::print(long)+0xc>
	return count;
}

size_t Print::print(long n)
{
	uint8_t sign=0;
    a444:	movs	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    a446:	movs	r2, #10
    a448:	b.w	a3c0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
		n = -n;
    a44c:	negs	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    a44e:	movs	r3, #45	; 0x2d
		n = -n;
	}
	return printNumber(n, 10, sign);
    a450:	movs	r2, #10
    a452:	b.w	a3c0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    a456:	nop

0000a458 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
    a458:	bx	lr
    a45a:	nop

0000a45c <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    a45c:	ldr	r2, [pc, #600]	; (a6b8 <set_arm_clock+0x25c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    a45e:	ldr	r3, [pc, #604]	; (a6bc <set_arm_clock+0x260>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    a460:	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    a462:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
    a466:	ldr	r4, [pc, #600]	; (a6c0 <set_arm_clock+0x264>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    a468:	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    a46c:	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    a46e:	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    a470:	bls.n	a4ac <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    a472:	ldr	r3, [pc, #592]	; (a6c4 <set_arm_clock+0x268>)
    a474:	cmp	r0, r3
    a476:	bls.w	a6a4 <set_arm_clock+0x248>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    a47a:	ldr	r3, [pc, #588]	; (a6c8 <set_arm_clock+0x26c>)
    a47c:	movw	r5, #1575	; 0x627
    a480:	ldr	r7, [pc, #584]	; (a6cc <set_arm_clock+0x270>)
    a482:	add	r3, r0
    a484:	ldr	r4, [pc, #584]	; (a6d0 <set_arm_clock+0x274>)
    a486:	lsrs	r2, r3, #8
    a488:	umull	r3, r2, r7, r2
    a48c:	lsrs	r3, r2, #7
    a48e:	add.w	r3, r3, r3, lsl #2
    a492:	add.w	r2, r3, r3, lsl #2
    a496:	addw	r3, r2, #1250	; 0x4e2
    a49a:	cmp	r3, r5
    a49c:	it	cs
    a49e:	movcs	r3, r5
    a4a0:	sub.w	r3, r3, #800	; 0x320
    a4a4:	umull	r3, r5, r4, r3
    a4a8:	lsrs	r5, r5, #3
    a4aa:	b.n	a4b6 <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
    a4ac:	ldr	r5, [pc, #548]	; (a6d4 <set_arm_clock+0x278>)
    a4ae:	cmp	r0, r5
    a4b0:	ite	ls
    a4b2:	movls	r5, #6
    a4b4:	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a4b6:	ldr	r2, [pc, #516]	; (a6bc <set_arm_clock+0x260>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a4b8:	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a4bc:	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a4c0:	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a4c2:	orr.w	r3, r3, #192	; 0xc0
    a4c6:	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a4ca:	bcs.n	a4e2 <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    a4cc:	ldr	r3, [pc, #496]	; (a6c0 <set_arm_clock+0x264>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    a4ce:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a4d2:	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    a4d4:	orrs	r6, r5
		DCDC_REG3 = dcdc;
    a4d6:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a4d8:	ldr	r3, [r2, #0]
    a4da:	cmp	r3, #0
    a4dc:	bge.n	a4d8 <set_arm_clock+0x7c>
    a4de:	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    a4e2:	ands.w	r3, lr, #33554432	; 0x2000000
    a4e6:	bne.n	a54c <set_arm_clock+0xf0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    a4e8:	ldr	r4, [pc, #492]	; (a6d8 <set_arm_clock+0x27c>)
    a4ea:	ldr	r2, [pc, #496]	; (a6dc <set_arm_clock+0x280>)
    a4ec:	ldr.w	ip, [r4, #16]
    a4f0:	mov	r4, r2
    a4f2:	and.w	r2, ip, r2
    a4f6:	cmp	r2, r4
    a4f8:	itet	eq
    a4fa:	moveq.w	r3, #402653184	; 0x18000000
    a4fe:	movne.w	r2, #4096	; 0x1000
    a502:	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    a504:	eor.w	r4, lr, r3
    a508:	tst.w	r4, #939524096	; 0x38000000
    a50c:	beq.n	a520 <set_arm_clock+0xc4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    a50e:	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    a512:	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
    a516:	ldr	r4, [pc, #420]	; (a6bc <set_arm_clock+0x260>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    a518:	orr.w	lr, r3, lr
			CCM_CBCDR = cbcdr;
    a51c:	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    a520:	eor.w	r3, r1, r2
    a524:	tst.w	r3, #12288	; 0x3000
    a528:	beq.n	a53c <set_arm_clock+0xe0>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    a52a:	ldr	r3, [pc, #400]	; (a6bc <set_arm_clock+0x260>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    a52c:	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    a530:	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    a532:	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    a534:	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    a536:	ldr	r3, [r2, #72]	; 0x48
    a538:	lsls	r4, r3, #28
    a53a:	bmi.n	a536 <set_arm_clock+0xda>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    a53c:	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    a540:	ldr	r2, [pc, #376]	; (a6bc <set_arm_clock+0x260>)
    a542:	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    a546:	ldr	r3, [r2, #72]	; 0x48
    a548:	lsls	r1, r3, #26
    a54a:	bmi.n	a546 <set_arm_clock+0xea>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    a54c:	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    a54e:	ldr	r4, [pc, #400]	; (a6e0 <set_arm_clock+0x284>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    a550:	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    a552:	mul.w	r3, r1, r2
    a556:	mul.w	r3, r0, r3
    a55a:	cmp	r3, r4
    a55c:	bhi.n	a572 <set_arm_clock+0x116>
		if (div_arm < 8) {
    a55e:	cmp	r2, #7
    a560:	bhi.w	a68e <set_arm_clock+0x232>
			div_arm = div_arm + 1;
    a564:	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    a566:	mul.w	r3, r1, r2
    a56a:	mul.w	r3, r0, r3
    a56e:	cmp	r3, r4
    a570:	bls.n	a55e <set_arm_clock+0x102>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    a572:	ldr	r0, [pc, #368]	; (a6e4 <set_arm_clock+0x288>)
    a574:	ldr	r4, [pc, #368]	; (a6e8 <set_arm_clock+0x28c>)
    a576:	add	r0, r3
    a578:	umull	r0, r3, r4, r0
    a57c:	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
    a57e:	cmp	r3, #108	; 0x6c
    a580:	bhi.w	a69a <set_arm_clock+0x23e>
	if (mult < 54) mult = 54;
    a584:	cmp	r3, #53	; 0x35
    a586:	bhi.w	a6a8 <set_arm_clock+0x24c>
    a58a:	ldr.w	r8, [pc, #392]	; a714 <set_arm_clock+0x2b8>
    a58e:	movs	r3, #54	; 0x36
    a590:	ldr	r0, [pc, #344]	; (a6ec <set_arm_clock+0x290>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a592:	ldr.w	ip, [pc, #324]	; a6d8 <set_arm_clock+0x27c>
    a596:	ldr	r4, [pc, #344]	; (a6f0 <set_arm_clock+0x294>)
    a598:	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    a59c:	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a5a0:	and.w	r4, r9, r4
    a5a4:	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    a5a6:	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a5aa:	beq.n	a5c4 <set_arm_clock+0x168>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    a5ac:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    a5b0:	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    a5b4:	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    a5b6:	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    a5ba:	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    a5be:	ldr	r3, [r4, #0]
    a5c0:	cmp	r3, #0
    a5c2:	bge.n	a5be <set_arm_clock+0x162>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    a5c4:	ldr.w	ip, [pc, #244]	; a6bc <set_arm_clock+0x260>
    a5c8:	subs	r2, #1
    a5ca:	ldr.w	r3, [ip, #16]
    a5ce:	and.w	r3, r3, #7
    a5d2:	cmp	r3, r2
    a5d4:	beq.n	a5e6 <set_arm_clock+0x18a>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    a5d6:	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    a5da:	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    a5dc:	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    a5e0:	ldr	r3, [r4, #72]	; 0x48
    a5e2:	lsls	r3, r3, #15
    a5e4:	bmi.n	a5e0 <set_arm_clock+0x184>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    a5e6:	subs	r1, #1
    a5e8:	lsls	r1, r1, #10
    a5ea:	eor.w	r3, lr, r1
    a5ee:	tst.w	r3, #7168	; 0x1c00
    a5f2:	beq.n	a60e <set_arm_clock+0x1b2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
    a5f4:	ldr	r3, [pc, #196]	; (a6bc <set_arm_clock+0x260>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    a5f6:	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    a5fa:	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    a5fe:	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    a600:	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
    a604:	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    a608:	ldr	r3, [r2, #72]	; 0x48
    a60a:	lsls	r1, r3, #30
    a60c:	bmi.n	a608 <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    a60e:	ldr	r3, [pc, #228]	; (a6f4 <set_arm_clock+0x298>)
    a610:	ldr	r1, [pc, #228]	; (a6f8 <set_arm_clock+0x29c>)
    a612:	add	r3, r0
    a614:	lsrs	r3, r3, #7
    a616:	umull	r3, r1, r1, r3
    a61a:	lsrs	r1, r1, #12
    a61c:	cmp	r1, #4
    a61e:	it	cs
    a620:	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    a622:	subs	r3, r1, #1
    a624:	lsls	r3, r3, #8
    a626:	eor.w	r2, lr, r3
    a62a:	tst.w	r2, #768	; 0x300
    a62e:	beq.n	a640 <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    a630:	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    a634:	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    a638:	ldr	r2, [pc, #128]	; (a6bc <set_arm_clock+0x260>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    a63a:	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    a63e:	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    a640:	ldr	r3, [pc, #120]	; (a6bc <set_arm_clock+0x260>)
    a642:	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    a644:	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    a646:	bic.w	r4, r4, #33554432	; 0x2000000
    a64a:	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    a64c:	ldr	r3, [r2, #72]	; 0x48
    a64e:	lsls	r3, r3, #26
    a650:	bmi.n	a64c <set_arm_clock+0x1f0>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a652:	ldr	r3, [pc, #168]	; (a6fc <set_arm_clock+0x2a0>)
    a654:	mov.w	r2, #4294967295
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    a658:	ldr	r4, [pc, #164]	; (a700 <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    a65a:	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a65c:	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    a660:	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a662:	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    a666:	ldr	r4, [pc, #156]	; (a704 <set_arm_clock+0x2a8>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a668:	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    a66c:	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a670:	ldr	r2, [pc, #148]	; (a708 <set_arm_clock+0x2ac>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    a672:	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a674:	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    a676:	bcs.n	a68a <set_arm_clock+0x22e>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    a678:	ldr	r3, [pc, #68]	; (a6c0 <set_arm_clock+0x264>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    a67a:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a67e:	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    a680:	orrs	r6, r5
		DCDC_REG3 = dcdc;
    a682:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a684:	ldr	r3, [r2, #0]
    a686:	cmp	r3, #0
    a688:	bge.n	a684 <set_arm_clock+0x228>
	}

	return frequency;
}
    a68a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    a68e:	cmp	r1, #4
    a690:	bhi.w	a572 <set_arm_clock+0x116>
				div_ahb = div_ahb + 1;
    a694:	adds	r1, #1
				div_arm = 1;
    a696:	movs	r2, #1
    a698:	b.n	a552 <set_arm_clock+0xf6>
    a69a:	ldr.w	r8, [pc, #124]	; a718 <set_arm_clock+0x2bc>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    a69e:	movs	r3, #108	; 0x6c
    a6a0:	ldr	r0, [pc, #104]	; (a70c <set_arm_clock+0x2b0>)
    a6a2:	b.n	a592 <set_arm_clock+0x136>
    a6a4:	movs	r5, #18
    a6a6:	b.n	a4b6 <set_arm_clock+0x5a>
    a6a8:	ldr	r0, [pc, #100]	; (a710 <set_arm_clock+0x2b4>)
    a6aa:	ldr.w	r8, [pc, #112]	; a71c <set_arm_clock+0x2c0>
    a6ae:	mul.w	r0, r0, r3
    a6b2:	orr.w	r8, r3, r8
    a6b6:	b.n	a592 <set_arm_clock+0x136>
    a6b8:	.word	0x1f78a400
    a6bc:	.word	0x400fc000
    a6c0:	.word	0x40080000
    a6c4:	.word	0x23c34600
    a6c8:	.word	0xdc3cba00
    a6cc:	.word	0x004cb223
    a6d0:	.word	0x51eb851f
    a6d4:	.word	0x016e3600
    a6d8:	.word	0x400d8000
    a6dc:	.word	0x80003040
    a6e0:	.word	0x269fb1ff
    a6e4:	.word	0x005b8d80
    a6e8:	.word	0x165e9f81
    a6ec:	.word	0x269fb200
    a6f0:	.word	0x8001307f
    a6f4:	.word	0x08f0d17f
    a6f8:	.word	0x00e5109f
    a6fc:	.word	0x431bde83
    a700:	.word	0x20001384
    a704:	.word	0x20001380
    a708:	.word	0x2000c714
    a70c:	.word	0x4d3f6400
    a710:	.word	0x00b71b00
    a714:	.word	0x80002036
    a718:	.word	0x8000206c
    a71c:	.word	0x80002000

0000a720 <__aeabi_drsub>:
    a720:	eor.w	r1, r1, #2147483648	; 0x80000000
    a724:	b.n	a72c <__adddf3>
    a726:	nop

0000a728 <__aeabi_dsub>:
    a728:	eor.w	r3, r3, #2147483648	; 0x80000000

0000a72c <__adddf3>:
    a72c:	push	{r4, r5, lr}
    a72e:	mov.w	r4, r1, lsl #1
    a732:	mov.w	r5, r3, lsl #1
    a736:	teq	r4, r5
    a73a:	it	eq
    a73c:	teqeq	r0, r2
    a740:	itttt	ne
    a742:	orrsne.w	ip, r4, r0
    a746:	orrsne.w	ip, r5, r2
    a74a:	mvnsne.w	ip, r4, asr #21
    a74e:	mvnsne.w	ip, r5, asr #21
    a752:	beq.w	a91a <__adddf3+0x1ee>
    a756:	mov.w	r4, r4, lsr #21
    a75a:	rsbs	r5, r4, r5, lsr #21
    a75e:	it	lt
    a760:	neglt	r5, r5
    a762:	ble.n	a77e <__adddf3+0x52>
    a764:	add	r4, r5
    a766:	eor.w	r2, r0, r2
    a76a:	eor.w	r3, r1, r3
    a76e:	eor.w	r0, r2, r0
    a772:	eor.w	r1, r3, r1
    a776:	eor.w	r2, r0, r2
    a77a:	eor.w	r3, r1, r3
    a77e:	cmp	r5, #54	; 0x36
    a780:	it	hi
    a782:	pophi	{r4, r5, pc}
    a784:	tst.w	r1, #2147483648	; 0x80000000
    a788:	mov.w	r1, r1, lsl #12
    a78c:	mov.w	ip, #1048576	; 0x100000
    a790:	orr.w	r1, ip, r1, lsr #12
    a794:	beq.n	a79c <__adddf3+0x70>
    a796:	negs	r0, r0
    a798:	sbc.w	r1, r1, r1, lsl #1
    a79c:	tst.w	r3, #2147483648	; 0x80000000
    a7a0:	mov.w	r3, r3, lsl #12
    a7a4:	orr.w	r3, ip, r3, lsr #12
    a7a8:	beq.n	a7b0 <__adddf3+0x84>
    a7aa:	negs	r2, r2
    a7ac:	sbc.w	r3, r3, r3, lsl #1
    a7b0:	teq	r4, r5
    a7b4:	beq.w	a906 <__adddf3+0x1da>
    a7b8:	sub.w	r4, r4, #1
    a7bc:	rsbs	lr, r5, #32
    a7c0:	blt.n	a7de <__adddf3+0xb2>
    a7c2:	lsl.w	ip, r2, lr
    a7c6:	lsr.w	r2, r2, r5
    a7ca:	adds	r0, r0, r2
    a7cc:	adc.w	r1, r1, #0
    a7d0:	lsl.w	r2, r3, lr
    a7d4:	adds	r0, r0, r2
    a7d6:	asr.w	r3, r3, r5
    a7da:	adcs	r1, r3
    a7dc:	b.n	a7fc <__adddf3+0xd0>
    a7de:	sub.w	r5, r5, #32
    a7e2:	add.w	lr, lr, #32
    a7e6:	cmp	r2, #1
    a7e8:	lsl.w	ip, r3, lr
    a7ec:	it	cs
    a7ee:	orrcs.w	ip, ip, #2
    a7f2:	asr.w	r3, r3, r5
    a7f6:	adds	r0, r0, r3
    a7f8:	adcs.w	r1, r1, r3, asr #31
    a7fc:	and.w	r5, r1, #2147483648	; 0x80000000
    a800:	bpl.n	a812 <__adddf3+0xe6>
    a802:	mov.w	lr, #0
    a806:	rsbs	ip, ip, #0
    a80a:	sbcs.w	r0, lr, r0
    a80e:	sbc.w	r1, lr, r1
    a812:	cmp.w	r1, #1048576	; 0x100000
    a816:	bcc.n	a850 <__adddf3+0x124>
    a818:	cmp.w	r1, #2097152	; 0x200000
    a81c:	bcc.n	a838 <__adddf3+0x10c>
    a81e:	lsrs	r1, r1, #1
    a820:	movs.w	r0, r0, rrx
    a824:	mov.w	ip, ip, rrx
    a828:	add.w	r4, r4, #1
    a82c:	mov.w	r2, r4, lsl #21
    a830:	cmn.w	r2, #4194304	; 0x400000
    a834:	bcs.w	a96c <__adddf3+0x240>
    a838:	cmp.w	ip, #2147483648	; 0x80000000
    a83c:	it	eq
    a83e:	movseq.w	ip, r0, lsr #1
    a842:	adcs.w	r0, r0, #0
    a846:	adc.w	r1, r1, r4, lsl #20
    a84a:	orr.w	r1, r1, r5
    a84e:	pop	{r4, r5, pc}
    a850:	movs.w	ip, ip, lsl #1
    a854:	adcs	r0, r0
    a856:	adc.w	r1, r1, r1
    a85a:	tst.w	r1, #1048576	; 0x100000
    a85e:	sub.w	r4, r4, #1
    a862:	bne.n	a838 <__adddf3+0x10c>
    a864:	teq	r1, #0
    a868:	itt	eq
    a86a:	moveq	r1, r0
    a86c:	moveq	r0, #0
    a86e:	clz	r3, r1
    a872:	it	eq
    a874:	addeq	r3, #32
    a876:	sub.w	r3, r3, #11
    a87a:	subs.w	r2, r3, #32
    a87e:	bge.n	a89a <__adddf3+0x16e>
    a880:	adds	r2, #12
    a882:	ble.n	a896 <__adddf3+0x16a>
    a884:	add.w	ip, r2, #20
    a888:	rsb	r2, r2, #12
    a88c:	lsl.w	r0, r1, ip
    a890:	lsr.w	r1, r1, r2
    a894:	b.n	a8b0 <__adddf3+0x184>
    a896:	add.w	r2, r2, #20
    a89a:	it	le
    a89c:	rsble	ip, r2, #32
    a8a0:	lsl.w	r1, r1, r2
    a8a4:	lsr.w	ip, r0, ip
    a8a8:	itt	le
    a8aa:	orrle.w	r1, r1, ip
    a8ae:	lslle	r0, r2
    a8b0:	subs	r4, r4, r3
    a8b2:	ittt	ge
    a8b4:	addge.w	r1, r1, r4, lsl #20
    a8b8:	orrge	r1, r5
    a8ba:	popge	{r4, r5, pc}
    a8bc:	mvn.w	r4, r4
    a8c0:	subs	r4, #31
    a8c2:	bge.n	a8fe <__adddf3+0x1d2>
    a8c4:	adds	r4, #12
    a8c6:	bgt.n	a8e6 <__adddf3+0x1ba>
    a8c8:	add.w	r4, r4, #20
    a8cc:	rsb	r2, r4, #32
    a8d0:	lsr.w	r0, r0, r4
    a8d4:	lsl.w	r3, r1, r2
    a8d8:	orr.w	r0, r0, r3
    a8dc:	lsr.w	r3, r1, r4
    a8e0:	orr.w	r1, r5, r3
    a8e4:	pop	{r4, r5, pc}
    a8e6:	rsb	r4, r4, #12
    a8ea:	rsb	r2, r4, #32
    a8ee:	lsr.w	r0, r0, r2
    a8f2:	lsl.w	r3, r1, r4
    a8f6:	orr.w	r0, r0, r3
    a8fa:	mov	r1, r5
    a8fc:	pop	{r4, r5, pc}
    a8fe:	lsr.w	r0, r1, r4
    a902:	mov	r1, r5
    a904:	pop	{r4, r5, pc}
    a906:	teq	r4, #0
    a90a:	eor.w	r3, r3, #1048576	; 0x100000
    a90e:	itte	eq
    a910:	eoreq.w	r1, r1, #1048576	; 0x100000
    a914:	addeq	r4, #1
    a916:	subne	r5, #1
    a918:	b.n	a7b8 <__adddf3+0x8c>
    a91a:	mvns.w	ip, r4, asr #21
    a91e:	it	ne
    a920:	mvnsne.w	ip, r5, asr #21
    a924:	beq.n	a97a <__adddf3+0x24e>
    a926:	teq	r4, r5
    a92a:	it	eq
    a92c:	teqeq	r0, r2
    a930:	beq.n	a93e <__adddf3+0x212>
    a932:	orrs.w	ip, r4, r0
    a936:	itt	eq
    a938:	moveq	r1, r3
    a93a:	moveq	r0, r2
    a93c:	pop	{r4, r5, pc}
    a93e:	teq	r1, r3
    a942:	ittt	ne
    a944:	movne	r1, #0
    a946:	movne	r0, #0
    a948:	popne	{r4, r5, pc}
    a94a:	movs.w	ip, r4, lsr #21
    a94e:	bne.n	a95c <__adddf3+0x230>
    a950:	lsls	r0, r0, #1
    a952:	adcs	r1, r1
    a954:	it	cs
    a956:	orrcs.w	r1, r1, #2147483648	; 0x80000000
    a95a:	pop	{r4, r5, pc}
    a95c:	adds.w	r4, r4, #4194304	; 0x400000
    a960:	itt	cc
    a962:	addcc.w	r1, r1, #1048576	; 0x100000
    a966:	popcc	{r4, r5, pc}
    a968:	and.w	r5, r1, #2147483648	; 0x80000000
    a96c:	orr.w	r1, r5, #2130706432	; 0x7f000000
    a970:	orr.w	r1, r1, #15728640	; 0xf00000
    a974:	mov.w	r0, #0
    a978:	pop	{r4, r5, pc}
    a97a:	mvns.w	ip, r4, asr #21
    a97e:	itte	ne
    a980:	movne	r1, r3
    a982:	movne	r0, r2
    a984:	mvnseq.w	ip, r5, asr #21
    a988:	itt	ne
    a98a:	movne	r3, r1
    a98c:	movne	r2, r0
    a98e:	orrs.w	r4, r0, r1, lsl #12
    a992:	itte	eq
    a994:	orrseq.w	r5, r2, r3, lsl #12
    a998:	teqeq	r1, r3
    a99c:	orrne.w	r1, r1, #524288	; 0x80000
    a9a0:	pop	{r4, r5, pc}
    a9a2:	nop

0000a9a4 <__aeabi_ui2d>:
    a9a4:	teq	r0, #0
    a9a8:	itt	eq
    a9aa:	moveq	r1, #0
    a9ac:	bxeq	lr
    a9ae:	push	{r4, r5, lr}
    a9b0:	mov.w	r4, #1024	; 0x400
    a9b4:	add.w	r4, r4, #50	; 0x32
    a9b8:	mov.w	r5, #0
    a9bc:	mov.w	r1, #0
    a9c0:	b.n	a864 <__adddf3+0x138>
    a9c2:	nop

0000a9c4 <__aeabi_i2d>:
    a9c4:	teq	r0, #0
    a9c8:	itt	eq
    a9ca:	moveq	r1, #0
    a9cc:	bxeq	lr
    a9ce:	push	{r4, r5, lr}
    a9d0:	mov.w	r4, #1024	; 0x400
    a9d4:	add.w	r4, r4, #50	; 0x32
    a9d8:	ands.w	r5, r0, #2147483648	; 0x80000000
    a9dc:	it	mi
    a9de:	negmi	r0, r0
    a9e0:	mov.w	r1, #0
    a9e4:	b.n	a864 <__adddf3+0x138>
    a9e6:	nop

0000a9e8 <__aeabi_f2d>:
    a9e8:	lsls	r2, r0, #1
    a9ea:	mov.w	r1, r2, asr #3
    a9ee:	mov.w	r1, r1, rrx
    a9f2:	mov.w	r0, r2, lsl #28
    a9f6:	itttt	ne
    a9f8:	andsne.w	r3, r2, #4278190080	; 0xff000000
    a9fc:	teqne	r3, #4278190080	; 0xff000000
    aa00:	eorne.w	r1, r1, #939524096	; 0x38000000
    aa04:	bxne	lr
    aa06:	teq	r2, #0
    aa0a:	ite	ne
    aa0c:	teqne	r3, #4278190080	; 0xff000000
    aa10:	bxeq	lr
    aa12:	push	{r4, r5, lr}
    aa14:	mov.w	r4, #896	; 0x380
    aa18:	and.w	r5, r1, #2147483648	; 0x80000000
    aa1c:	bic.w	r1, r1, #2147483648	; 0x80000000
    aa20:	b.n	a864 <__adddf3+0x138>
    aa22:	nop

0000aa24 <__aeabi_ul2d>:
    aa24:	orrs.w	r2, r0, r1
    aa28:	it	eq
    aa2a:	bxeq	lr
    aa2c:	push	{r4, r5, lr}
    aa2e:	mov.w	r5, #0
    aa32:	b.n	aa4a <__aeabi_l2d+0x16>

0000aa34 <__aeabi_l2d>:
    aa34:	orrs.w	r2, r0, r1
    aa38:	it	eq
    aa3a:	bxeq	lr
    aa3c:	push	{r4, r5, lr}
    aa3e:	ands.w	r5, r1, #2147483648	; 0x80000000
    aa42:	bpl.n	aa4a <__aeabi_l2d+0x16>
    aa44:	negs	r0, r0
    aa46:	sbc.w	r1, r1, r1, lsl #1
    aa4a:	mov.w	r4, #1024	; 0x400
    aa4e:	add.w	r4, r4, #50	; 0x32
    aa52:	movs.w	ip, r1, lsr #22
    aa56:	beq.w	a812 <__adddf3+0xe6>
    aa5a:	mov.w	r2, #3
    aa5e:	movs.w	ip, ip, lsr #3
    aa62:	it	ne
    aa64:	addne	r2, #3
    aa66:	movs.w	ip, ip, lsr #3
    aa6a:	it	ne
    aa6c:	addne	r2, #3
    aa6e:	add.w	r2, r2, ip, lsr #3
    aa72:	rsb	r3, r2, #32
    aa76:	lsl.w	ip, r0, r3
    aa7a:	lsr.w	r0, r0, r2
    aa7e:	lsl.w	lr, r1, r3
    aa82:	orr.w	r0, r0, lr
    aa86:	lsr.w	r1, r1, r2
    aa8a:	add	r4, r2
    aa8c:	b.n	a812 <__adddf3+0xe6>
    aa8e:	nop

0000aa90 <__aeabi_dmul>:
    aa90:	push	{r4, r5, r6, lr}
    aa92:	mov.w	ip, #255	; 0xff
    aa96:	orr.w	ip, ip, #1792	; 0x700
    aa9a:	ands.w	r4, ip, r1, lsr #20
    aa9e:	ittte	ne
    aaa0:	andsne.w	r5, ip, r3, lsr #20
    aaa4:	teqne	r4, ip
    aaa8:	teqne	r5, ip
    aaac:	bleq	ac6c <__aeabi_dmul+0x1dc>
    aab0:	add	r4, r5
    aab2:	eor.w	r6, r1, r3
    aab6:	bic.w	r1, r1, ip, lsl #21
    aaba:	bic.w	r3, r3, ip, lsl #21
    aabe:	orrs.w	r5, r0, r1, lsl #12
    aac2:	it	ne
    aac4:	orrsne.w	r5, r2, r3, lsl #12
    aac8:	orr.w	r1, r1, #1048576	; 0x100000
    aacc:	orr.w	r3, r3, #1048576	; 0x100000
    aad0:	beq.n	ab44 <__aeabi_dmul+0xb4>
    aad2:	umull	ip, lr, r0, r2
    aad6:	mov.w	r5, #0
    aada:	umlal	lr, r5, r1, r2
    aade:	and.w	r2, r6, #2147483648	; 0x80000000
    aae2:	umlal	lr, r5, r0, r3
    aae6:	mov.w	r6, #0
    aaea:	umlal	r5, r6, r1, r3
    aaee:	teq	ip, #0
    aaf2:	it	ne
    aaf4:	orrne.w	lr, lr, #1
    aaf8:	sub.w	r4, r4, #255	; 0xff
    aafc:	cmp.w	r6, #512	; 0x200
    ab00:	sbc.w	r4, r4, #768	; 0x300
    ab04:	bcs.n	ab10 <__aeabi_dmul+0x80>
    ab06:	movs.w	lr, lr, lsl #1
    ab0a:	adcs	r5, r5
    ab0c:	adc.w	r6, r6, r6
    ab10:	orr.w	r1, r2, r6, lsl #11
    ab14:	orr.w	r1, r1, r5, lsr #21
    ab18:	mov.w	r0, r5, lsl #11
    ab1c:	orr.w	r0, r0, lr, lsr #21
    ab20:	mov.w	lr, lr, lsl #11
    ab24:	subs.w	ip, r4, #253	; 0xfd
    ab28:	it	hi
    ab2a:	cmphi.w	ip, #1792	; 0x700
    ab2e:	bhi.n	ab6e <__aeabi_dmul+0xde>
    ab30:	cmp.w	lr, #2147483648	; 0x80000000
    ab34:	it	eq
    ab36:	movseq.w	lr, r0, lsr #1
    ab3a:	adcs.w	r0, r0, #0
    ab3e:	adc.w	r1, r1, r4, lsl #20
    ab42:	pop	{r4, r5, r6, pc}
    ab44:	and.w	r6, r6, #2147483648	; 0x80000000
    ab48:	orr.w	r1, r6, r1
    ab4c:	orr.w	r0, r0, r2
    ab50:	eor.w	r1, r1, r3
    ab54:	subs.w	r4, r4, ip, lsr #1
    ab58:	ittt	gt
    ab5a:	rsbsgt	r5, r4, ip
    ab5e:	orrgt.w	r1, r1, r4, lsl #20
    ab62:	popgt	{r4, r5, r6, pc}
    ab64:	orr.w	r1, r1, #1048576	; 0x100000
    ab68:	mov.w	lr, #0
    ab6c:	subs	r4, #1
    ab6e:	bgt.w	acc8 <__aeabi_dmul+0x238>
    ab72:	cmn.w	r4, #54	; 0x36
    ab76:	ittt	le
    ab78:	movle	r0, #0
    ab7a:	andle.w	r1, r1, #2147483648	; 0x80000000
    ab7e:	pople	{r4, r5, r6, pc}
    ab80:	rsb	r4, r4, #0
    ab84:	subs	r4, #32
    ab86:	bge.n	abf4 <__aeabi_dmul+0x164>
    ab88:	adds	r4, #12
    ab8a:	bgt.n	abc4 <__aeabi_dmul+0x134>
    ab8c:	add.w	r4, r4, #20
    ab90:	rsb	r5, r4, #32
    ab94:	lsl.w	r3, r0, r5
    ab98:	lsr.w	r0, r0, r4
    ab9c:	lsl.w	r2, r1, r5
    aba0:	orr.w	r0, r0, r2
    aba4:	and.w	r2, r1, #2147483648	; 0x80000000
    aba8:	bic.w	r1, r1, #2147483648	; 0x80000000
    abac:	adds.w	r0, r0, r3, lsr #31
    abb0:	lsr.w	r6, r1, r4
    abb4:	adc.w	r1, r2, r6
    abb8:	orrs.w	lr, lr, r3, lsl #1
    abbc:	it	eq
    abbe:	biceq.w	r0, r0, r3, lsr #31
    abc2:	pop	{r4, r5, r6, pc}
    abc4:	rsb	r4, r4, #12
    abc8:	rsb	r5, r4, #32
    abcc:	lsl.w	r3, r0, r4
    abd0:	lsr.w	r0, r0, r5
    abd4:	lsl.w	r2, r1, r4
    abd8:	orr.w	r0, r0, r2
    abdc:	and.w	r1, r1, #2147483648	; 0x80000000
    abe0:	adds.w	r0, r0, r3, lsr #31
    abe4:	adc.w	r1, r1, #0
    abe8:	orrs.w	lr, lr, r3, lsl #1
    abec:	it	eq
    abee:	biceq.w	r0, r0, r3, lsr #31
    abf2:	pop	{r4, r5, r6, pc}
    abf4:	rsb	r5, r4, #32
    abf8:	lsl.w	r2, r0, r5
    abfc:	orr.w	lr, lr, r2
    ac00:	lsr.w	r3, r0, r4
    ac04:	lsl.w	r2, r1, r5
    ac08:	orr.w	r3, r3, r2
    ac0c:	lsr.w	r0, r1, r4
    ac10:	and.w	r1, r1, #2147483648	; 0x80000000
    ac14:	lsr.w	r2, r1, r4
    ac18:	bic.w	r0, r0, r2
    ac1c:	add.w	r0, r0, r3, lsr #31
    ac20:	orrs.w	lr, lr, r3, lsl #1
    ac24:	it	eq
    ac26:	biceq.w	r0, r0, r3, lsr #31
    ac2a:	pop	{r4, r5, r6, pc}
    ac2c:	teq	r4, #0
    ac30:	bne.n	ac52 <__aeabi_dmul+0x1c2>
    ac32:	and.w	r6, r1, #2147483648	; 0x80000000
    ac36:	lsls	r0, r0, #1
    ac38:	adc.w	r1, r1, r1
    ac3c:	tst.w	r1, #1048576	; 0x100000
    ac40:	it	eq
    ac42:	subeq	r4, #1
    ac44:	beq.n	ac36 <__aeabi_dmul+0x1a6>
    ac46:	orr.w	r1, r1, r6
    ac4a:	teq	r5, #0
    ac4e:	it	ne
    ac50:	bxne	lr
    ac52:	and.w	r6, r3, #2147483648	; 0x80000000
    ac56:	lsls	r2, r2, #1
    ac58:	adc.w	r3, r3, r3
    ac5c:	tst.w	r3, #1048576	; 0x100000
    ac60:	it	eq
    ac62:	subeq	r5, #1
    ac64:	beq.n	ac56 <__aeabi_dmul+0x1c6>
    ac66:	orr.w	r3, r3, r6
    ac6a:	bx	lr
    ac6c:	teq	r4, ip
    ac70:	and.w	r5, ip, r3, lsr #20
    ac74:	it	ne
    ac76:	teqne	r5, ip
    ac7a:	beq.n	ac96 <__aeabi_dmul+0x206>
    ac7c:	orrs.w	r6, r0, r1, lsl #1
    ac80:	it	ne
    ac82:	orrsne.w	r6, r2, r3, lsl #1
    ac86:	bne.n	ac2c <__aeabi_dmul+0x19c>
    ac88:	eor.w	r1, r1, r3
    ac8c:	and.w	r1, r1, #2147483648	; 0x80000000
    ac90:	mov.w	r0, #0
    ac94:	pop	{r4, r5, r6, pc}
    ac96:	orrs.w	r6, r0, r1, lsl #1
    ac9a:	itte	eq
    ac9c:	moveq	r0, r2
    ac9e:	moveq	r1, r3
    aca0:	orrsne.w	r6, r2, r3, lsl #1
    aca4:	beq.n	acda <__aeabi_dmul+0x24a>
    aca6:	teq	r4, ip
    acaa:	bne.n	acb2 <__aeabi_dmul+0x222>
    acac:	orrs.w	r6, r0, r1, lsl #12
    acb0:	bne.n	acda <__aeabi_dmul+0x24a>
    acb2:	teq	r5, ip
    acb6:	bne.n	acc4 <__aeabi_dmul+0x234>
    acb8:	orrs.w	r6, r2, r3, lsl #12
    acbc:	itt	ne
    acbe:	movne	r0, r2
    acc0:	movne	r1, r3
    acc2:	bne.n	acda <__aeabi_dmul+0x24a>
    acc4:	eor.w	r1, r1, r3
    acc8:	and.w	r1, r1, #2147483648	; 0x80000000
    accc:	orr.w	r1, r1, #2130706432	; 0x7f000000
    acd0:	orr.w	r1, r1, #15728640	; 0xf00000
    acd4:	mov.w	r0, #0
    acd8:	pop	{r4, r5, r6, pc}
    acda:	orr.w	r1, r1, #2130706432	; 0x7f000000
    acde:	orr.w	r1, r1, #16252928	; 0xf80000
    ace2:	pop	{r4, r5, r6, pc}

0000ace4 <__aeabi_ddiv>:
    ace4:	push	{r4, r5, r6, lr}
    ace6:	mov.w	ip, #255	; 0xff
    acea:	orr.w	ip, ip, #1792	; 0x700
    acee:	ands.w	r4, ip, r1, lsr #20
    acf2:	ittte	ne
    acf4:	andsne.w	r5, ip, r3, lsr #20
    acf8:	teqne	r4, ip
    acfc:	teqne	r5, ip
    ad00:	bleq	ae52 <__aeabi_ddiv+0x16e>
    ad04:	sub.w	r4, r4, r5
    ad08:	eor.w	lr, r1, r3
    ad0c:	orrs.w	r5, r2, r3, lsl #12
    ad10:	mov.w	r1, r1, lsl #12
    ad14:	beq.w	ae28 <__aeabi_ddiv+0x144>
    ad18:	mov.w	r3, r3, lsl #12
    ad1c:	mov.w	r5, #268435456	; 0x10000000
    ad20:	orr.w	r3, r5, r3, lsr #4
    ad24:	orr.w	r3, r3, r2, lsr #24
    ad28:	mov.w	r2, r2, lsl #8
    ad2c:	orr.w	r5, r5, r1, lsr #4
    ad30:	orr.w	r5, r5, r0, lsr #24
    ad34:	mov.w	r6, r0, lsl #8
    ad38:	and.w	r1, lr, #2147483648	; 0x80000000
    ad3c:	cmp	r5, r3
    ad3e:	it	eq
    ad40:	cmpeq	r6, r2
    ad42:	adc.w	r4, r4, #253	; 0xfd
    ad46:	add.w	r4, r4, #768	; 0x300
    ad4a:	bcs.n	ad52 <__aeabi_ddiv+0x6e>
    ad4c:	lsrs	r3, r3, #1
    ad4e:	mov.w	r2, r2, rrx
    ad52:	subs	r6, r6, r2
    ad54:	sbc.w	r5, r5, r3
    ad58:	lsrs	r3, r3, #1
    ad5a:	mov.w	r2, r2, rrx
    ad5e:	mov.w	r0, #1048576	; 0x100000
    ad62:	mov.w	ip, #524288	; 0x80000
    ad66:	subs.w	lr, r6, r2
    ad6a:	sbcs.w	lr, r5, r3
    ad6e:	ittt	cs
    ad70:	subcs	r6, r6, r2
    ad72:	movcs	r5, lr
    ad74:	orrcs.w	r0, r0, ip
    ad78:	lsrs	r3, r3, #1
    ad7a:	mov.w	r2, r2, rrx
    ad7e:	subs.w	lr, r6, r2
    ad82:	sbcs.w	lr, r5, r3
    ad86:	ittt	cs
    ad88:	subcs	r6, r6, r2
    ad8a:	movcs	r5, lr
    ad8c:	orrcs.w	r0, r0, ip, lsr #1
    ad90:	lsrs	r3, r3, #1
    ad92:	mov.w	r2, r2, rrx
    ad96:	subs.w	lr, r6, r2
    ad9a:	sbcs.w	lr, r5, r3
    ad9e:	ittt	cs
    ada0:	subcs	r6, r6, r2
    ada2:	movcs	r5, lr
    ada4:	orrcs.w	r0, r0, ip, lsr #2
    ada8:	lsrs	r3, r3, #1
    adaa:	mov.w	r2, r2, rrx
    adae:	subs.w	lr, r6, r2
    adb2:	sbcs.w	lr, r5, r3
    adb6:	ittt	cs
    adb8:	subcs	r6, r6, r2
    adba:	movcs	r5, lr
    adbc:	orrcs.w	r0, r0, ip, lsr #3
    adc0:	orrs.w	lr, r5, r6
    adc4:	beq.n	adf8 <__aeabi_ddiv+0x114>
    adc6:	mov.w	r5, r5, lsl #4
    adca:	orr.w	r5, r5, r6, lsr #28
    adce:	mov.w	r6, r6, lsl #4
    add2:	mov.w	r3, r3, lsl #3
    add6:	orr.w	r3, r3, r2, lsr #29
    adda:	mov.w	r2, r2, lsl #3
    adde:	movs.w	ip, ip, lsr #4
    ade2:	bne.n	ad66 <__aeabi_ddiv+0x82>
    ade4:	tst.w	r1, #1048576	; 0x100000
    ade8:	bne.n	ae02 <__aeabi_ddiv+0x11e>
    adea:	orr.w	r1, r1, r0
    adee:	mov.w	r0, #0
    adf2:	mov.w	ip, #2147483648	; 0x80000000
    adf6:	b.n	ad66 <__aeabi_ddiv+0x82>
    adf8:	tst.w	r1, #1048576	; 0x100000
    adfc:	itt	eq
    adfe:	orreq	r1, r0
    ae00:	moveq	r0, #0
    ae02:	subs.w	ip, r4, #253	; 0xfd
    ae06:	it	hi
    ae08:	cmphi.w	ip, #1792	; 0x700
    ae0c:	bhi.w	ab6e <__aeabi_dmul+0xde>
    ae10:	subs.w	ip, r5, r3
    ae14:	itt	eq
    ae16:	subseq.w	ip, r6, r2
    ae1a:	movseq.w	ip, r0, lsr #1
    ae1e:	adcs.w	r0, r0, #0
    ae22:	adc.w	r1, r1, r4, lsl #20
    ae26:	pop	{r4, r5, r6, pc}
    ae28:	and.w	lr, lr, #2147483648	; 0x80000000
    ae2c:	orr.w	r1, lr, r1, lsr #12
    ae30:	adds.w	r4, r4, ip, lsr #1
    ae34:	ittt	gt
    ae36:	rsbsgt	r5, r4, ip
    ae3a:	orrgt.w	r1, r1, r4, lsl #20
    ae3e:	popgt	{r4, r5, r6, pc}
    ae40:	orr.w	r1, r1, #1048576	; 0x100000
    ae44:	mov.w	lr, #0
    ae48:	subs	r4, #1
    ae4a:	b.n	ab6e <__aeabi_dmul+0xde>
    ae4c:	orr.w	lr, r5, r6
    ae50:	b.n	ab6e <__aeabi_dmul+0xde>
    ae52:	and.w	r5, ip, r3, lsr #20
    ae56:	teq	r4, ip
    ae5a:	it	eq
    ae5c:	teqeq	r5, ip
    ae60:	beq.w	acda <__aeabi_dmul+0x24a>
    ae64:	teq	r4, ip
    ae68:	bne.n	ae80 <__aeabi_ddiv+0x19c>
    ae6a:	orrs.w	r4, r0, r1, lsl #12
    ae6e:	bne.w	acda <__aeabi_dmul+0x24a>
    ae72:	teq	r5, ip
    ae76:	bne.w	acc4 <__aeabi_dmul+0x234>
    ae7a:	mov	r0, r2
    ae7c:	mov	r1, r3
    ae7e:	b.n	acda <__aeabi_dmul+0x24a>
    ae80:	teq	r5, ip
    ae84:	bne.n	ae94 <__aeabi_ddiv+0x1b0>
    ae86:	orrs.w	r5, r2, r3, lsl #12
    ae8a:	beq.w	ac88 <__aeabi_dmul+0x1f8>
    ae8e:	mov	r0, r2
    ae90:	mov	r1, r3
    ae92:	b.n	acda <__aeabi_dmul+0x24a>
    ae94:	orrs.w	r6, r0, r1, lsl #1
    ae98:	it	ne
    ae9a:	orrsne.w	r6, r2, r3, lsl #1
    ae9e:	bne.w	ac2c <__aeabi_dmul+0x19c>
    aea2:	orrs.w	r4, r0, r1, lsl #1
    aea6:	bne.w	acc4 <__aeabi_dmul+0x234>
    aeaa:	orrs.w	r5, r2, r3, lsl #1
    aeae:	bne.w	ac88 <__aeabi_dmul+0x1f8>
    aeb2:	b.n	acda <__aeabi_dmul+0x24a>

0000aeb4 <__gedf2>:
    aeb4:	mov.w	ip, #4294967295
    aeb8:	b.n	aec8 <__cmpdf2+0x4>
    aeba:	nop

0000aebc <__ledf2>:
    aebc:	mov.w	ip, #1
    aec0:	b.n	aec8 <__cmpdf2+0x4>
    aec2:	nop

0000aec4 <__cmpdf2>:
    aec4:	mov.w	ip, #1
    aec8:	str.w	ip, [sp, #-4]!
    aecc:	mov.w	ip, r1, lsl #1
    aed0:	mvns.w	ip, ip, asr #21
    aed4:	mov.w	ip, r3, lsl #1
    aed8:	it	ne
    aeda:	mvnsne.w	ip, ip, asr #21
    aede:	beq.n	af18 <__cmpdf2+0x54>
    aee0:	add	sp, #4
    aee2:	orrs.w	ip, r0, r1, lsl #1
    aee6:	ite	eq
    aee8:	orrseq.w	ip, r2, r3, lsl #1
    aeec:	teqne	r1, r3
    aef0:	ittt	eq
    aef2:	teqeq	r0, r2
    aef6:	moveq	r0, #0
    aef8:	bxeq	lr
    aefa:	cmn.w	r0, #0
    aefe:	teq	r1, r3
    af02:	it	pl
    af04:	cmppl	r1, r3
    af06:	it	eq
    af08:	cmpeq	r0, r2
    af0a:	ite	cs
    af0c:	asrcs	r0, r3, #31
    af0e:	mvncc.w	r0, r3, asr #31
    af12:	orr.w	r0, r0, #1
    af16:	bx	lr
    af18:	mov.w	ip, r1, lsl #1
    af1c:	mvns.w	ip, ip, asr #21
    af20:	bne.n	af28 <__cmpdf2+0x64>
    af22:	orrs.w	ip, r0, r1, lsl #12
    af26:	bne.n	af38 <__cmpdf2+0x74>
    af28:	mov.w	ip, r3, lsl #1
    af2c:	mvns.w	ip, ip, asr #21
    af30:	bne.n	aee0 <__cmpdf2+0x1c>
    af32:	orrs.w	ip, r2, r3, lsl #12
    af36:	beq.n	aee0 <__cmpdf2+0x1c>
    af38:	ldr.w	r0, [sp], #4
    af3c:	bx	lr
    af3e:	nop

0000af40 <__aeabi_cdrcmple>:
    af40:	mov	ip, r0
    af42:	mov	r0, r2
    af44:	mov	r2, ip
    af46:	mov	ip, r1
    af48:	mov	r1, r3
    af4a:	mov	r3, ip
    af4c:	b.n	af50 <__aeabi_cdcmpeq>
    af4e:	nop

0000af50 <__aeabi_cdcmpeq>:
    af50:	push	{r0, lr}
    af52:	bl	aec4 <__cmpdf2>
    af56:	cmp	r0, #0
    af58:	it	mi
    af5a:	cmnmi.w	r0, #0
    af5e:	pop	{r0, pc}

0000af60 <__aeabi_dcmpeq>:
    af60:	str.w	lr, [sp, #-8]!
    af64:	bl	af50 <__aeabi_cdcmpeq>
    af68:	ite	eq
    af6a:	moveq	r0, #1
    af6c:	movne	r0, #0
    af6e:	ldr.w	pc, [sp], #8
    af72:	nop

0000af74 <__aeabi_dcmplt>:
    af74:	str.w	lr, [sp, #-8]!
    af78:	bl	af50 <__aeabi_cdcmpeq>
    af7c:	ite	cc
    af7e:	movcc	r0, #1
    af80:	movcs	r0, #0
    af82:	ldr.w	pc, [sp], #8
    af86:	nop

0000af88 <__aeabi_dcmple>:
    af88:	str.w	lr, [sp, #-8]!
    af8c:	bl	af50 <__aeabi_cdcmpeq>
    af90:	ite	ls
    af92:	movls	r0, #1
    af94:	movhi	r0, #0
    af96:	ldr.w	pc, [sp], #8
    af9a:	nop

0000af9c <__aeabi_dcmpge>:
    af9c:	str.w	lr, [sp, #-8]!
    afa0:	bl	af40 <__aeabi_cdrcmple>
    afa4:	ite	ls
    afa6:	movls	r0, #1
    afa8:	movhi	r0, #0
    afaa:	ldr.w	pc, [sp], #8
    afae:	nop

0000afb0 <__aeabi_dcmpgt>:
    afb0:	str.w	lr, [sp, #-8]!
    afb4:	bl	af40 <__aeabi_cdrcmple>
    afb8:	ite	cc
    afba:	movcc	r0, #1
    afbc:	movcs	r0, #0
    afbe:	ldr.w	pc, [sp], #8
    afc2:	nop

0000afc4 <__aeabi_dcmpun>:
    afc4:	mov.w	ip, r1, lsl #1
    afc8:	mvns.w	ip, ip, asr #21
    afcc:	bne.n	afd4 <__aeabi_dcmpun+0x10>
    afce:	orrs.w	ip, r0, r1, lsl #12
    afd2:	bne.n	afea <__aeabi_dcmpun+0x26>
    afd4:	mov.w	ip, r3, lsl #1
    afd8:	mvns.w	ip, ip, asr #21
    afdc:	bne.n	afe4 <__aeabi_dcmpun+0x20>
    afde:	orrs.w	ip, r2, r3, lsl #12
    afe2:	bne.n	afea <__aeabi_dcmpun+0x26>
    afe4:	mov.w	r0, #0
    afe8:	bx	lr
    afea:	mov.w	r0, #1
    afee:	bx	lr

0000aff0 <__aeabi_uldivmod>:
    aff0:	cbnz	r3, b008 <__aeabi_uldivmod+0x18>
    aff2:	cbnz	r2, b008 <__aeabi_uldivmod+0x18>
    aff4:	cmp	r1, #0
    aff6:	it	eq
    aff8:	cmpeq	r0, #0
    affa:	itt	ne
    affc:	movne.w	r1, #4294967295
    b000:	movne.w	r0, #4294967295
    b004:	b.w	b304 <__aeabi_idiv0>
    b008:	sub.w	ip, sp, #8
    b00c:	strd	ip, lr, [sp, #-16]!
    b010:	bl	b020 <__udivmoddi4>
    b014:	ldr.w	lr, [sp, #4]
    b018:	ldrd	r2, r3, [sp, #8]
    b01c:	add	sp, #16
    b01e:	bx	lr

0000b020 <__udivmoddi4>:
    b020:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b024:	mov	ip, r1
    b026:	mov	r6, r1
    b028:	mov	r4, r0
    b02a:	ldr	r5, [sp, #32]
    b02c:	cmp	r3, #0
    b02e:	bne.n	b0d2 <__udivmoddi4+0xb2>
    b030:	cmp	r2, r1
    b032:	mov	r7, r2
    b034:	bls.n	b110 <__udivmoddi4+0xf0>
    b036:	clz	lr, r2
    b03a:	cmp.w	lr, #0
    b03e:	beq.n	b058 <__udivmoddi4+0x38>
    b040:	rsb	r4, lr, #32
    b044:	lsr.w	r4, r0, r4
    b048:	lsl.w	r6, r1, lr
    b04c:	orr.w	ip, r4, r6
    b050:	lsl.w	r7, r2, lr
    b054:	lsl.w	r4, r0, lr
    b058:	mov.w	r9, r7, lsr #16
    b05c:	lsrs	r2, r4, #16
    b05e:	udiv	r0, ip, r9
    b062:	uxth.w	r8, r7
    b066:	mls	r6, r9, r0, ip
    b06a:	orr.w	r6, r2, r6, lsl #16
    b06e:	mul.w	r3, r0, r8
    b072:	cmp	r3, r6
    b074:	bls.n	b08a <__udivmoddi4+0x6a>
    b076:	adds	r6, r6, r7
    b078:	add.w	r2, r0, #4294967295
    b07c:	bcs.w	b2c4 <__udivmoddi4+0x2a4>
    b080:	cmp	r3, r6
    b082:	bls.w	b2c4 <__udivmoddi4+0x2a4>
    b086:	subs	r0, #2
    b088:	add	r6, r7
    b08a:	subs	r6, r6, r3
    b08c:	uxth	r2, r4
    b08e:	udiv	r3, r6, r9
    b092:	mls	r6, r9, r3, r6
    b096:	orr.w	r4, r2, r6, lsl #16
    b09a:	mul.w	r8, r3, r8
    b09e:	cmp	r8, r4
    b0a0:	bls.n	b0b6 <__udivmoddi4+0x96>
    b0a2:	adds	r4, r4, r7
    b0a4:	add.w	r2, r3, #4294967295
    b0a8:	bcs.w	b2c0 <__udivmoddi4+0x2a0>
    b0ac:	cmp	r8, r4
    b0ae:	bls.w	b2c0 <__udivmoddi4+0x2a0>
    b0b2:	subs	r3, #2
    b0b4:	add	r4, r7
    b0b6:	rsb	r4, r8, r4
    b0ba:	orr.w	r0, r3, r0, lsl #16
    b0be:	movs	r1, #0
    b0c0:	cmp	r5, #0
    b0c2:	beq.n	b18a <__udivmoddi4+0x16a>
    b0c4:	lsr.w	r4, r4, lr
    b0c8:	movs	r3, #0
    b0ca:	str	r4, [r5, #0]
    b0cc:	str	r3, [r5, #4]
    b0ce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b0d2:	cmp	r3, r1
    b0d4:	bls.n	b0e6 <__udivmoddi4+0xc6>
    b0d6:	cmp	r5, #0
    b0d8:	beq.n	b186 <__udivmoddi4+0x166>
    b0da:	movs	r1, #0
    b0dc:	stmia.w	r5, {r0, r6}
    b0e0:	mov	r0, r1
    b0e2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b0e6:	clz	r1, r3
    b0ea:	cmp	r1, #0
    b0ec:	bne.w	b210 <__udivmoddi4+0x1f0>
    b0f0:	cmp	r3, r6
    b0f2:	bcc.n	b0fa <__udivmoddi4+0xda>
    b0f4:	cmp	r2, r0
    b0f6:	bhi.w	b2ea <__udivmoddi4+0x2ca>
    b0fa:	subs	r4, r0, r2
    b0fc:	sbc.w	r6, r6, r3
    b100:	movs	r0, #1
    b102:	mov	ip, r6
    b104:	cmp	r5, #0
    b106:	beq.n	b18a <__udivmoddi4+0x16a>
    b108:	stmia.w	r5, {r4, ip}
    b10c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b110:	cbnz	r2, b118 <__udivmoddi4+0xf8>
    b112:	movs	r7, #1
    b114:	udiv	r7, r7, r2
    b118:	clz	lr, r7
    b11c:	cmp.w	lr, #0
    b120:	bne.n	b18e <__udivmoddi4+0x16e>
    b122:	subs	r3, r6, r7
    b124:	mov.w	r8, r7, lsr #16
    b128:	uxth.w	ip, r7
    b12c:	movs	r1, #1
    b12e:	udiv	r0, r3, r8
    b132:	lsrs	r2, r4, #16
    b134:	mls	r6, r8, r0, r3
    b138:	orr.w	r6, r2, r6, lsl #16
    b13c:	mul.w	r3, ip, r0
    b140:	cmp	r3, r6
    b142:	bls.n	b154 <__udivmoddi4+0x134>
    b144:	adds	r6, r6, r7
    b146:	add.w	r2, r0, #4294967295
    b14a:	bcs.n	b152 <__udivmoddi4+0x132>
    b14c:	cmp	r3, r6
    b14e:	bhi.w	b2ee <__udivmoddi4+0x2ce>
    b152:	mov	r0, r2
    b154:	subs	r6, r6, r3
    b156:	uxth	r2, r4
    b158:	udiv	r3, r6, r8
    b15c:	mls	r6, r8, r3, r6
    b160:	orr.w	r4, r2, r6, lsl #16
    b164:	mul.w	ip, ip, r3
    b168:	cmp	ip, r4
    b16a:	bls.n	b17c <__udivmoddi4+0x15c>
    b16c:	adds	r4, r4, r7
    b16e:	add.w	r2, r3, #4294967295
    b172:	bcs.n	b17a <__udivmoddi4+0x15a>
    b174:	cmp	ip, r4
    b176:	bhi.w	b2e4 <__udivmoddi4+0x2c4>
    b17a:	mov	r3, r2
    b17c:	rsb	r4, ip, r4
    b180:	orr.w	r0, r3, r0, lsl #16
    b184:	b.n	b0c0 <__udivmoddi4+0xa0>
    b186:	mov	r1, r5
    b188:	mov	r0, r5
    b18a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b18e:	rsb	r1, lr, #32
    b192:	lsl.w	r3, r6, lr
    b196:	lsl.w	r7, r7, lr
    b19a:	lsr.w	r9, r0, r1
    b19e:	mov.w	r8, r7, lsr #16
    b1a2:	lsrs	r6, r1
    b1a4:	orr.w	r9, r9, r3
    b1a8:	udiv	sl, r6, r8
    b1ac:	mov.w	r4, r9, lsr #16
    b1b0:	mls	r6, r8, sl, r6
    b1b4:	uxth.w	ip, r7
    b1b8:	orr.w	r3, r4, r6, lsl #16
    b1bc:	mul.w	r2, sl, ip
    b1c0:	cmp	r2, r3
    b1c2:	lsl.w	r4, r0, lr
    b1c6:	bls.n	b1de <__udivmoddi4+0x1be>
    b1c8:	adds	r3, r3, r7
    b1ca:	add.w	r1, sl, #4294967295
    b1ce:	bcs.w	b2e0 <__udivmoddi4+0x2c0>
    b1d2:	cmp	r2, r3
    b1d4:	bls.w	b2e0 <__udivmoddi4+0x2c0>
    b1d8:	sub.w	sl, sl, #2
    b1dc:	add	r3, r7
    b1de:	subs	r3, r3, r2
    b1e0:	uxth.w	r9, r9
    b1e4:	udiv	r1, r3, r8
    b1e8:	mls	r3, r8, r1, r3
    b1ec:	orr.w	r3, r9, r3, lsl #16
    b1f0:	mul.w	r6, r1, ip
    b1f4:	cmp	r6, r3
    b1f6:	bls.n	b208 <__udivmoddi4+0x1e8>
    b1f8:	adds	r3, r3, r7
    b1fa:	add.w	r2, r1, #4294967295
    b1fe:	bcs.n	b2d8 <__udivmoddi4+0x2b8>
    b200:	cmp	r6, r3
    b202:	bls.n	b2d8 <__udivmoddi4+0x2b8>
    b204:	subs	r1, #2
    b206:	add	r3, r7
    b208:	subs	r3, r3, r6
    b20a:	orr.w	r1, r1, sl, lsl #16
    b20e:	b.n	b12e <__udivmoddi4+0x10e>
    b210:	rsb	lr, r1, #32
    b214:	lsr.w	r4, r2, lr
    b218:	lsls	r3, r1
    b21a:	orrs	r3, r4
    b21c:	lsr.w	r7, r0, lr
    b220:	lsl.w	r4, r6, r1
    b224:	mov.w	ip, r3, lsr #16
    b228:	lsr.w	r6, r6, lr
    b22c:	orrs	r4, r7
    b22e:	udiv	r9, r6, ip
    b232:	lsrs	r7, r4, #16
    b234:	mls	r6, ip, r9, r6
    b238:	uxth.w	r8, r3
    b23c:	orr.w	r6, r7, r6, lsl #16
    b240:	mul.w	r7, r9, r8
    b244:	cmp	r7, r6
    b246:	lsl.w	r2, r2, r1
    b24a:	lsl.w	sl, r0, r1
    b24e:	bls.n	b262 <__udivmoddi4+0x242>
    b250:	adds	r6, r6, r3
    b252:	add.w	r0, r9, #4294967295
    b256:	bcs.n	b2dc <__udivmoddi4+0x2bc>
    b258:	cmp	r7, r6
    b25a:	bls.n	b2dc <__udivmoddi4+0x2bc>
    b25c:	sub.w	r9, r9, #2
    b260:	add	r6, r3
    b262:	subs	r6, r6, r7
    b264:	uxth	r0, r4
    b266:	udiv	r4, r6, ip
    b26a:	mls	r6, ip, r4, r6
    b26e:	orr.w	r7, r0, r6, lsl #16
    b272:	mul.w	r8, r4, r8
    b276:	cmp	r8, r7
    b278:	bls.n	b28a <__udivmoddi4+0x26a>
    b27a:	adds	r7, r7, r3
    b27c:	add.w	r0, r4, #4294967295
    b280:	bcs.n	b2d4 <__udivmoddi4+0x2b4>
    b282:	cmp	r8, r7
    b284:	bls.n	b2d4 <__udivmoddi4+0x2b4>
    b286:	subs	r4, #2
    b288:	add	r7, r3
    b28a:	orr.w	r0, r4, r9, lsl #16
    b28e:	rsb	r7, r8, r7
    b292:	umull	r8, r9, r0, r2
    b296:	cmp	r7, r9
    b298:	mov	r4, r8
    b29a:	mov	r6, r9
    b29c:	bcc.n	b2c8 <__udivmoddi4+0x2a8>
    b29e:	beq.n	b2f4 <__udivmoddi4+0x2d4>
    b2a0:	cbz	r5, b2fc <__udivmoddi4+0x2dc>
    b2a2:	subs.w	r3, sl, r4
    b2a6:	sbc.w	r7, r7, r6
    b2aa:	lsl.w	lr, r7, lr
    b2ae:	lsrs	r3, r1
    b2b0:	lsrs	r7, r1
    b2b2:	orr.w	r3, lr, r3
    b2b6:	stmia.w	r5, {r3, r7}
    b2ba:	movs	r1, #0
    b2bc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b2c0:	mov	r3, r2
    b2c2:	b.n	b0b6 <__udivmoddi4+0x96>
    b2c4:	mov	r0, r2
    b2c6:	b.n	b08a <__udivmoddi4+0x6a>
    b2c8:	subs.w	r4, r8, r2
    b2cc:	sbc.w	r6, r9, r3
    b2d0:	subs	r0, #1
    b2d2:	b.n	b2a0 <__udivmoddi4+0x280>
    b2d4:	mov	r4, r0
    b2d6:	b.n	b28a <__udivmoddi4+0x26a>
    b2d8:	mov	r1, r2
    b2da:	b.n	b208 <__udivmoddi4+0x1e8>
    b2dc:	mov	r9, r0
    b2de:	b.n	b262 <__udivmoddi4+0x242>
    b2e0:	mov	sl, r1
    b2e2:	b.n	b1de <__udivmoddi4+0x1be>
    b2e4:	subs	r3, #2
    b2e6:	add	r4, r7
    b2e8:	b.n	b17c <__udivmoddi4+0x15c>
    b2ea:	mov	r0, r1
    b2ec:	b.n	b104 <__udivmoddi4+0xe4>
    b2ee:	subs	r0, #2
    b2f0:	add	r6, r7
    b2f2:	b.n	b154 <__udivmoddi4+0x134>
    b2f4:	cmp	sl, r8
    b2f6:	bcc.n	b2c8 <__udivmoddi4+0x2a8>
    b2f8:	mov	r6, r7
    b2fa:	b.n	b2a0 <__udivmoddi4+0x280>
    b2fc:	mov	r1, r5
    b2fe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b302:	nop

0000b304 <__aeabi_idiv0>:
    b304:	bx	lr
    b306:	nop

0000b308 <fcvtf>:
    b308:	push	{r4, r5, r6, lr}
    b30a:	mov	r4, r0
    b30c:	vmov	r0, s0
    b310:	mov	r5, r1
    b312:	mov	r6, r2
    b314:	bl	a9e8 <__aeabi_f2d>
    b318:	mov	r2, r6
    b31a:	vmov	d0, r0, r1
    b31e:	movs	r3, #0
    b320:	mov	r1, r5
    b322:	mov	r0, r4
    b324:	ldmia.w	sp!, {r4, r5, r6, lr}
    b328:	b.w	e80c <fcvtbuf>

0000b32c <__errno>:
    b32c:	ldr	r3, [pc, #4]	; (b334 <__errno+0x8>)
    b32e:	ldr	r0, [r3, #0]
    b330:	bx	lr
    b332:	nop
    b334:	.word	0x2000191c

0000b338 <__libc_init_array>:
    b338:	push	{r4, r5, r6, lr}
    b33a:	ldr	r6, [pc, #60]	; (b378 <__libc_init_array+0x40>)
    b33c:	ldr	r5, [pc, #60]	; (b37c <__libc_init_array+0x44>)
    b33e:	subs	r6, r6, r5
    b340:	asrs	r6, r6, #2
    b342:	it	ne
    b344:	movne	r4, #0
    b346:	beq.n	b354 <__libc_init_array+0x1c>
    b348:	adds	r4, #1
    b34a:	ldr.w	r3, [r5], #4
    b34e:	blx	r3
    b350:	cmp	r6, r4
    b352:	bne.n	b348 <__libc_init_array+0x10>
    b354:	ldr	r6, [pc, #40]	; (b380 <__libc_init_array+0x48>)
    b356:	ldr	r5, [pc, #44]	; (b384 <__libc_init_array+0x4c>)
    b358:	subs	r6, r6, r5
    b35a:	bl	f480 <___init_veneer>
    b35e:	asrs	r6, r6, #2
    b360:	it	ne
    b362:	movne	r4, #0
    b364:	beq.n	b374 <__libc_init_array+0x3c>
    b366:	adds	r4, #1
    b368:	ldr.w	r3, [r5], #4
    b36c:	blx	r3
    b36e:	cmp	r6, r4
    b370:	bne.n	b366 <__libc_init_array+0x2e>
    b372:	pop	{r4, r5, r6, pc}
    b374:	pop	{r4, r5, r6, pc}
    b376:	nop
    b378:	.word	0x60001e68
    b37c:	.word	0x60001e68
    b380:	.word	0x60001e70
    b384:	.word	0x60001e68

0000b388 <_malloc_r>:
    b388:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b38c:	add.w	r5, r1, #11
    b390:	cmp	r5, #22
    b392:	sub	sp, #12
    b394:	mov	r6, r0
    b396:	bls.w	b4d8 <_malloc_r+0x150>
    b39a:	bics.w	r5, r5, #7
    b39e:	bmi.w	b520 <_malloc_r+0x198>
    b3a2:	cmp	r1, r5
    b3a4:	bhi.w	b520 <_malloc_r+0x198>
    b3a8:	bl	ba88 <__malloc_lock>
    b3ac:	cmp.w	r5, #504	; 0x1f8
    b3b0:	bcc.w	b8ec <_malloc_r+0x564>
    b3b4:	lsrs	r3, r5, #9
    b3b6:	beq.w	b52e <_malloc_r+0x1a6>
    b3ba:	cmp	r3, #4
    b3bc:	bhi.w	b6c6 <_malloc_r+0x33e>
    b3c0:	lsrs	r0, r5, #6
    b3c2:	add.w	lr, r0, #57	; 0x39
    b3c6:	mov.w	r3, lr, lsl #1
    b3ca:	adds	r0, #56	; 0x38
    b3cc:	ldr	r7, [pc, #784]	; (b6e0 <_malloc_r+0x358>)
    b3ce:	add.w	r3, r7, r3, lsl #2
    b3d2:	sub.w	r1, r3, #8
    b3d6:	ldr	r4, [r3, #4]
    b3d8:	cmp	r1, r4
    b3da:	bne.n	b3ec <_malloc_r+0x64>
    b3dc:	b.n	b538 <_malloc_r+0x1b0>
    b3de:	cmp	r2, #0
    b3e0:	bge.w	b53c <_malloc_r+0x1b4>
    b3e4:	ldr	r4, [r4, #12]
    b3e6:	cmp	r1, r4
    b3e8:	beq.w	b538 <_malloc_r+0x1b0>
    b3ec:	ldr	r3, [r4, #4]
    b3ee:	bic.w	r3, r3, #3
    b3f2:	subs	r2, r3, r5
    b3f4:	cmp	r2, #15
    b3f6:	ble.n	b3de <_malloc_r+0x56>
    b3f8:	ldr	r1, [pc, #740]	; (b6e0 <_malloc_r+0x358>)
    b3fa:	ldr	r4, [r7, #16]
    b3fc:	add.w	lr, r1, #8
    b400:	cmp	r4, lr
    b402:	beq.w	b76c <_malloc_r+0x3e4>
    b406:	ldr	r3, [r4, #4]
    b408:	bic.w	r3, r3, #3
    b40c:	subs	r2, r3, r5
    b40e:	cmp	r2, #15
    b410:	bgt.w	b746 <_malloc_r+0x3be>
    b414:	cmp	r2, #0
    b416:	str.w	lr, [r1, #20]
    b41a:	str.w	lr, [r1, #16]
    b41e:	bge.w	b55e <_malloc_r+0x1d6>
    b422:	cmp.w	r3, #512	; 0x200
    b426:	bcs.w	b6f8 <_malloc_r+0x370>
    b42a:	lsrs	r3, r3, #3
    b42c:	add.w	ip, r3, #1
    b430:	movs	r2, #1
    b432:	asrs	r3, r3, #2
    b434:	lsl.w	r3, r2, r3
    b438:	ldr	r2, [r1, #4]
    b43a:	ldr.w	r8, [r1, ip, lsl #3]
    b43e:	str.w	r8, [r4, #8]
    b442:	add.w	r9, r1, ip, lsl #3
    b446:	orrs	r2, r3
    b448:	sub.w	r3, r9, #8
    b44c:	str	r3, [r4, #12]
    b44e:	str	r2, [r1, #4]
    b450:	str.w	r4, [r1, ip, lsl #3]
    b454:	str.w	r4, [r8, #12]
    b458:	asrs	r3, r0, #2
    b45a:	movs	r4, #1
    b45c:	lsls	r4, r3
    b45e:	cmp	r4, r2
    b460:	bhi.w	b578 <_malloc_r+0x1f0>
    b464:	tst	r4, r2
    b466:	bne.n	b476 <_malloc_r+0xee>
    b468:	bic.w	r0, r0, #3
    b46c:	lsls	r4, r4, #1
    b46e:	tst	r4, r2
    b470:	add.w	r0, r0, #4
    b474:	beq.n	b46c <_malloc_r+0xe4>
    b476:	add.w	r9, r7, r0, lsl #3
    b47a:	mov	ip, r9
    b47c:	mov	r8, r0
    b47e:	ldr.w	r1, [ip, #12]
    b482:	cmp	ip, r1
    b484:	bne.n	b496 <_malloc_r+0x10e>
    b486:	b.n	b770 <_malloc_r+0x3e8>
    b488:	cmp	r2, #0
    b48a:	bge.w	b790 <_malloc_r+0x408>
    b48e:	ldr	r1, [r1, #12]
    b490:	cmp	ip, r1
    b492:	beq.w	b770 <_malloc_r+0x3e8>
    b496:	ldr	r3, [r1, #4]
    b498:	bic.w	r3, r3, #3
    b49c:	subs	r2, r3, r5
    b49e:	cmp	r2, #15
    b4a0:	ble.n	b488 <_malloc_r+0x100>
    b4a2:	mov	r4, r1
    b4a4:	ldr.w	ip, [r1, #12]
    b4a8:	ldr.w	r8, [r4, #8]!
    b4ac:	adds	r3, r1, r5
    b4ae:	orr.w	r5, r5, #1
    b4b2:	str	r5, [r1, #4]
    b4b4:	orr.w	r1, r2, #1
    b4b8:	str.w	ip, [r8, #12]
    b4bc:	mov	r0, r6
    b4be:	str.w	r8, [ip, #8]
    b4c2:	str	r3, [r7, #20]
    b4c4:	str	r3, [r7, #16]
    b4c6:	str.w	lr, [r3, #12]
    b4ca:	str.w	lr, [r3, #8]
    b4ce:	str	r1, [r3, #4]
    b4d0:	str	r2, [r3, r2]
    b4d2:	bl	ba8c <__malloc_unlock>
    b4d6:	b.n	b518 <_malloc_r+0x190>
    b4d8:	cmp	r1, #16
    b4da:	bhi.n	b520 <_malloc_r+0x198>
    b4dc:	bl	ba88 <__malloc_lock>
    b4e0:	movs	r5, #16
    b4e2:	movs	r3, #6
    b4e4:	movs	r0, #2
    b4e6:	ldr	r7, [pc, #504]	; (b6e0 <_malloc_r+0x358>)
    b4e8:	add.w	r3, r7, r3, lsl #2
    b4ec:	sub.w	r2, r3, #8
    b4f0:	ldr	r4, [r3, #4]
    b4f2:	cmp	r4, r2
    b4f4:	beq.w	b782 <_malloc_r+0x3fa>
    b4f8:	ldr	r3, [r4, #4]
    b4fa:	ldr	r1, [r4, #12]
    b4fc:	ldr	r5, [r4, #8]
    b4fe:	bic.w	r3, r3, #3
    b502:	add	r3, r4
    b504:	mov	r0, r6
    b506:	ldr	r2, [r3, #4]
    b508:	str	r1, [r5, #12]
    b50a:	orr.w	r2, r2, #1
    b50e:	str	r5, [r1, #8]
    b510:	str	r2, [r3, #4]
    b512:	bl	ba8c <__malloc_unlock>
    b516:	adds	r4, #8
    b518:	mov	r0, r4
    b51a:	add	sp, #12
    b51c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b520:	movs	r4, #0
    b522:	movs	r3, #12
    b524:	mov	r0, r4
    b526:	str	r3, [r6, #0]
    b528:	add	sp, #12
    b52a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b52e:	movs	r3, #128	; 0x80
    b530:	mov.w	lr, #64	; 0x40
    b534:	movs	r0, #63	; 0x3f
    b536:	b.n	b3cc <_malloc_r+0x44>
    b538:	mov	r0, lr
    b53a:	b.n	b3f8 <_malloc_r+0x70>
    b53c:	add	r3, r4
    b53e:	ldr	r1, [r4, #12]
    b540:	ldr	r2, [r3, #4]
    b542:	ldr	r5, [r4, #8]
    b544:	orr.w	r2, r2, #1
    b548:	str	r1, [r5, #12]
    b54a:	mov	r0, r6
    b54c:	str	r5, [r1, #8]
    b54e:	str	r2, [r3, #4]
    b550:	bl	ba8c <__malloc_unlock>
    b554:	adds	r4, #8
    b556:	mov	r0, r4
    b558:	add	sp, #12
    b55a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b55e:	add	r3, r4
    b560:	mov	r0, r6
    b562:	ldr	r2, [r3, #4]
    b564:	orr.w	r2, r2, #1
    b568:	str	r2, [r3, #4]
    b56a:	bl	ba8c <__malloc_unlock>
    b56e:	adds	r4, #8
    b570:	mov	r0, r4
    b572:	add	sp, #12
    b574:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b578:	ldr	r4, [r7, #8]
    b57a:	ldr	r3, [r4, #4]
    b57c:	bic.w	r8, r3, #3
    b580:	cmp	r8, r5
    b582:	bcc.n	b58e <_malloc_r+0x206>
    b584:	rsb	r3, r5, r8
    b588:	cmp	r3, #15
    b58a:	bgt.w	b6a6 <_malloc_r+0x31e>
    b58e:	ldr	r3, [pc, #340]	; (b6e4 <_malloc_r+0x35c>)
    b590:	ldr.w	r9, [pc, #352]	; b6f4 <_malloc_r+0x36c>
    b594:	ldr	r2, [r3, #0]
    b596:	ldr.w	r3, [r9]
    b59a:	adds	r3, #1
    b59c:	add	r2, r5
    b59e:	add.w	sl, r4, r8
    b5a2:	beq.w	b866 <_malloc_r+0x4de>
    b5a6:	add.w	r2, r2, #4096	; 0x1000
    b5aa:	adds	r2, #15
    b5ac:	bic.w	r2, r2, #4080	; 0xff0
    b5b0:	bic.w	r2, r2, #15
    b5b4:	mov	r1, r2
    b5b6:	mov	r0, r6
    b5b8:	str	r2, [sp, #4]
    b5ba:	bl	be70 <_sbrk_r>
    b5be:	cmp.w	r0, #4294967295
    b5c2:	mov	fp, r0
    b5c4:	ldr	r2, [sp, #4]
    b5c6:	beq.w	b87a <_malloc_r+0x4f2>
    b5ca:	cmp	sl, r0
    b5cc:	bhi.w	b7c8 <_malloc_r+0x440>
    b5d0:	ldr	r3, [pc, #276]	; (b6e8 <_malloc_r+0x360>)
    b5d2:	ldr	r1, [r3, #0]
    b5d4:	cmp	sl, fp
    b5d6:	add	r1, r2
    b5d8:	str	r1, [r3, #0]
    b5da:	beq.w	b884 <_malloc_r+0x4fc>
    b5de:	ldr.w	r0, [r9]
    b5e2:	ldr.w	lr, [pc, #272]	; b6f4 <_malloc_r+0x36c>
    b5e6:	adds	r0, #1
    b5e8:	ittet	ne
    b5ea:	rsbne	sl, sl, fp
    b5ee:	addne	r1, sl
    b5f0:	streq.w	fp, [lr]
    b5f4:	strne	r1, [r3, #0]
    b5f6:	ands.w	r1, fp, #7
    b5fa:	beq.w	b82c <_malloc_r+0x4a4>
    b5fe:	rsb	r0, r1, #8
    b602:	rsb	r1, r1, #4096	; 0x1000
    b606:	add	fp, r0
    b608:	adds	r1, #8
    b60a:	add	r2, fp
    b60c:	ubfx	r2, r2, #0, #12
    b610:	rsb	r9, r2, r1
    b614:	mov	r1, r9
    b616:	mov	r0, r6
    b618:	str	r3, [sp, #4]
    b61a:	bl	be70 <_sbrk_r>
    b61e:	adds	r3, r0, #1
    b620:	ldr	r3, [sp, #4]
    b622:	beq.w	b8a4 <_malloc_r+0x51c>
    b626:	rsb	r2, fp, r0
    b62a:	add	r2, r9
    b62c:	orr.w	r2, r2, #1
    b630:	ldr	r1, [r3, #0]
    b632:	str.w	fp, [r7, #8]
    b636:	add	r1, r9
    b638:	cmp	r4, r7
    b63a:	str.w	r2, [fp, #4]
    b63e:	str	r1, [r3, #0]
    b640:	ldr.w	r9, [pc, #164]	; b6e8 <_malloc_r+0x360>
    b644:	beq.n	b674 <_malloc_r+0x2ec>
    b646:	cmp.w	r8, #15
    b64a:	bls.w	b848 <_malloc_r+0x4c0>
    b64e:	ldr	r2, [r4, #4]
    b650:	sub.w	r3, r8, #12
    b654:	bic.w	r3, r3, #7
    b658:	adds	r0, r4, r3
    b65a:	and.w	r2, r2, #1
    b65e:	mov.w	lr, #5
    b662:	orrs	r2, r3
    b664:	cmp	r3, #15
    b666:	str	r2, [r4, #4]
    b668:	str.w	lr, [r0, #4]
    b66c:	str.w	lr, [r0, #8]
    b670:	bhi.w	b8ac <_malloc_r+0x524>
    b674:	ldr	r3, [pc, #116]	; (b6ec <_malloc_r+0x364>)
    b676:	ldr	r4, [r7, #8]
    b678:	ldr	r2, [r3, #0]
    b67a:	cmp	r1, r2
    b67c:	it	hi
    b67e:	strhi	r1, [r3, #0]
    b680:	ldr	r3, [pc, #108]	; (b6f0 <_malloc_r+0x368>)
    b682:	ldr	r2, [r3, #0]
    b684:	cmp	r1, r2
    b686:	ldr	r2, [r4, #4]
    b688:	it	hi
    b68a:	strhi	r1, [r3, #0]
    b68c:	bic.w	r2, r2, #3
    b690:	cmp	r5, r2
    b692:	sub.w	r3, r2, r5
    b696:	bhi.n	b69c <_malloc_r+0x314>
    b698:	cmp	r3, #15
    b69a:	bgt.n	b6a6 <_malloc_r+0x31e>
    b69c:	mov	r0, r6
    b69e:	bl	ba8c <__malloc_unlock>
    b6a2:	movs	r4, #0
    b6a4:	b.n	b518 <_malloc_r+0x190>
    b6a6:	adds	r2, r4, r5
    b6a8:	orr.w	r3, r3, #1
    b6ac:	orr.w	r5, r5, #1
    b6b0:	str	r5, [r4, #4]
    b6b2:	mov	r0, r6
    b6b4:	str	r2, [r7, #8]
    b6b6:	str	r3, [r2, #4]
    b6b8:	bl	ba8c <__malloc_unlock>
    b6bc:	adds	r4, #8
    b6be:	mov	r0, r4
    b6c0:	add	sp, #12
    b6c2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b6c6:	cmp	r3, #20
    b6c8:	bls.n	b7ae <_malloc_r+0x426>
    b6ca:	cmp	r3, #84	; 0x54
    b6cc:	bhi.w	b818 <_malloc_r+0x490>
    b6d0:	lsrs	r0, r5, #12
    b6d2:	add.w	lr, r0, #111	; 0x6f
    b6d6:	mov.w	r3, lr, lsl #1
    b6da:	adds	r0, #110	; 0x6e
    b6dc:	b.n	b3cc <_malloc_r+0x44>
    b6de:	nop
    b6e0:	.word	0x2000150c
    b6e4:	.word	0x20004638
    b6e8:	.word	0x20004608
    b6ec:	.word	0x20004630
    b6f0:	.word	0x20004634
    b6f4:	.word	0x20001914
    b6f8:	lsrs	r2, r3, #9
    b6fa:	cmp	r2, #4
    b6fc:	bls.n	b7bc <_malloc_r+0x434>
    b6fe:	cmp	r2, #20
    b700:	bhi.w	b86a <_malloc_r+0x4e2>
    b704:	add.w	r1, r2, #92	; 0x5c
    b708:	lsls	r1, r1, #1
    b70a:	adds	r2, #91	; 0x5b
    b70c:	add.w	ip, r7, r1, lsl #2
    b710:	ldr.w	r1, [r7, r1, lsl #2]
    b714:	ldr.w	r8, [pc, #476]	; b8f4 <_malloc_r+0x56c>
    b718:	sub.w	ip, ip, #8
    b71c:	cmp	ip, r1
    b71e:	beq.w	b832 <_malloc_r+0x4aa>
    b722:	ldr	r2, [r1, #4]
    b724:	bic.w	r2, r2, #3
    b728:	cmp	r3, r2
    b72a:	bcs.n	b732 <_malloc_r+0x3aa>
    b72c:	ldr	r1, [r1, #8]
    b72e:	cmp	ip, r1
    b730:	bne.n	b722 <_malloc_r+0x39a>
    b732:	ldr.w	ip, [r1, #12]
    b736:	ldr	r2, [r7, #4]
    b738:	str.w	ip, [r4, #12]
    b73c:	str	r1, [r4, #8]
    b73e:	str.w	r4, [ip, #8]
    b742:	str	r4, [r1, #12]
    b744:	b.n	b458 <_malloc_r+0xd0>
    b746:	adds	r3, r4, r5
    b748:	orr.w	r7, r2, #1
    b74c:	orr.w	r5, r5, #1
    b750:	str	r5, [r4, #4]
    b752:	mov	r0, r6
    b754:	str	r3, [r1, #20]
    b756:	str	r3, [r1, #16]
    b758:	str.w	lr, [r3, #12]
    b75c:	str.w	lr, [r3, #8]
    b760:	str	r7, [r3, #4]
    b762:	str	r2, [r3, r2]
    b764:	adds	r4, #8
    b766:	bl	ba8c <__malloc_unlock>
    b76a:	b.n	b518 <_malloc_r+0x190>
    b76c:	ldr	r2, [r1, #4]
    b76e:	b.n	b458 <_malloc_r+0xd0>
    b770:	add.w	r8, r8, #1
    b774:	tst.w	r8, #3
    b778:	add.w	ip, ip, #8
    b77c:	bne.w	b47e <_malloc_r+0xf6>
    b780:	b.n	b7e4 <_malloc_r+0x45c>
    b782:	ldr	r4, [r3, #12]
    b784:	cmp	r3, r4
    b786:	it	eq
    b788:	addeq	r0, #2
    b78a:	beq.w	b3f8 <_malloc_r+0x70>
    b78e:	b.n	b4f8 <_malloc_r+0x170>
    b790:	add	r3, r1
    b792:	mov	r4, r1
    b794:	ldr	r2, [r3, #4]
    b796:	ldr	r1, [r1, #12]
    b798:	ldr.w	r5, [r4, #8]!
    b79c:	orr.w	r2, r2, #1
    b7a0:	str	r2, [r3, #4]
    b7a2:	mov	r0, r6
    b7a4:	str	r1, [r5, #12]
    b7a6:	str	r5, [r1, #8]
    b7a8:	bl	ba8c <__malloc_unlock>
    b7ac:	b.n	b518 <_malloc_r+0x190>
    b7ae:	add.w	lr, r3, #92	; 0x5c
    b7b2:	add.w	r0, r3, #91	; 0x5b
    b7b6:	mov.w	r3, lr, lsl #1
    b7ba:	b.n	b3cc <_malloc_r+0x44>
    b7bc:	lsrs	r2, r3, #6
    b7be:	add.w	r1, r2, #57	; 0x39
    b7c2:	lsls	r1, r1, #1
    b7c4:	adds	r2, #56	; 0x38
    b7c6:	b.n	b70c <_malloc_r+0x384>
    b7c8:	cmp	r4, r7
    b7ca:	ldr	r3, [pc, #296]	; (b8f4 <_malloc_r+0x56c>)
    b7cc:	beq.w	b5d0 <_malloc_r+0x248>
    b7d0:	ldr	r4, [r3, #8]
    b7d2:	ldr	r2, [r4, #4]
    b7d4:	bic.w	r2, r2, #3
    b7d8:	b.n	b690 <_malloc_r+0x308>
    b7da:	ldr.w	r3, [r9], #-8
    b7de:	cmp	r9, r3
    b7e0:	bne.w	b8e8 <_malloc_r+0x560>
    b7e4:	tst.w	r0, #3
    b7e8:	add.w	r0, r0, #4294967295
    b7ec:	bne.n	b7da <_malloc_r+0x452>
    b7ee:	ldr	r3, [r7, #4]
    b7f0:	bic.w	r3, r3, r4
    b7f4:	str	r3, [r7, #4]
    b7f6:	lsls	r4, r4, #1
    b7f8:	cmp	r4, r3
    b7fa:	bhi.w	b578 <_malloc_r+0x1f0>
    b7fe:	cmp	r4, #0
    b800:	beq.w	b578 <_malloc_r+0x1f0>
    b804:	tst	r4, r3
    b806:	mov	r0, r8
    b808:	bne.w	b476 <_malloc_r+0xee>
    b80c:	lsls	r4, r4, #1
    b80e:	tst	r4, r3
    b810:	add.w	r0, r0, #4
    b814:	beq.n	b80c <_malloc_r+0x484>
    b816:	b.n	b476 <_malloc_r+0xee>
    b818:	cmp.w	r3, #340	; 0x154
    b81c:	bhi.n	b850 <_malloc_r+0x4c8>
    b81e:	lsrs	r0, r5, #15
    b820:	add.w	lr, r0, #120	; 0x78
    b824:	mov.w	r3, lr, lsl #1
    b828:	adds	r0, #119	; 0x77
    b82a:	b.n	b3cc <_malloc_r+0x44>
    b82c:	mov.w	r1, #4096	; 0x1000
    b830:	b.n	b60a <_malloc_r+0x282>
    b832:	movs	r1, #1
    b834:	ldr.w	r3, [r8, #4]
    b838:	asrs	r2, r2, #2
    b83a:	lsl.w	r2, r1, r2
    b83e:	orrs	r2, r3
    b840:	str.w	r2, [r8, #4]
    b844:	mov	r1, ip
    b846:	b.n	b738 <_malloc_r+0x3b0>
    b848:	movs	r3, #1
    b84a:	str.w	r3, [fp, #4]
    b84e:	b.n	b69c <_malloc_r+0x314>
    b850:	movw	r2, #1364	; 0x554
    b854:	cmp	r3, r2
    b856:	bhi.n	b89a <_malloc_r+0x512>
    b858:	lsrs	r0, r5, #18
    b85a:	add.w	lr, r0, #125	; 0x7d
    b85e:	mov.w	r3, lr, lsl #1
    b862:	adds	r0, #124	; 0x7c
    b864:	b.n	b3cc <_malloc_r+0x44>
    b866:	adds	r2, #16
    b868:	b.n	b5b4 <_malloc_r+0x22c>
    b86a:	cmp	r2, #84	; 0x54
    b86c:	bhi.n	b8bc <_malloc_r+0x534>
    b86e:	lsrs	r2, r3, #12
    b870:	add.w	r1, r2, #111	; 0x6f
    b874:	lsls	r1, r1, #1
    b876:	adds	r2, #110	; 0x6e
    b878:	b.n	b70c <_malloc_r+0x384>
    b87a:	ldr	r4, [r7, #8]
    b87c:	ldr	r2, [r4, #4]
    b87e:	bic.w	r2, r2, #3
    b882:	b.n	b690 <_malloc_r+0x308>
    b884:	ubfx	r0, sl, #0, #12
    b888:	cmp	r0, #0
    b88a:	bne.w	b5de <_malloc_r+0x256>
    b88e:	add	r2, r8
    b890:	ldr	r3, [r7, #8]
    b892:	orr.w	r2, r2, #1
    b896:	str	r2, [r3, #4]
    b898:	b.n	b674 <_malloc_r+0x2ec>
    b89a:	movs	r3, #254	; 0xfe
    b89c:	mov.w	lr, #127	; 0x7f
    b8a0:	movs	r0, #126	; 0x7e
    b8a2:	b.n	b3cc <_malloc_r+0x44>
    b8a4:	movs	r2, #1
    b8a6:	mov.w	r9, #0
    b8aa:	b.n	b630 <_malloc_r+0x2a8>
    b8ac:	add.w	r1, r4, #8
    b8b0:	mov	r0, r6
    b8b2:	bl	e9a8 <_free_r>
    b8b6:	ldr.w	r1, [r9]
    b8ba:	b.n	b674 <_malloc_r+0x2ec>
    b8bc:	cmp.w	r2, #340	; 0x154
    b8c0:	bhi.n	b8ce <_malloc_r+0x546>
    b8c2:	lsrs	r2, r3, #15
    b8c4:	add.w	r1, r2, #120	; 0x78
    b8c8:	lsls	r1, r1, #1
    b8ca:	adds	r2, #119	; 0x77
    b8cc:	b.n	b70c <_malloc_r+0x384>
    b8ce:	movw	r1, #1364	; 0x554
    b8d2:	cmp	r2, r1
    b8d4:	bhi.n	b8e2 <_malloc_r+0x55a>
    b8d6:	lsrs	r2, r3, #18
    b8d8:	add.w	r1, r2, #125	; 0x7d
    b8dc:	lsls	r1, r1, #1
    b8de:	adds	r2, #124	; 0x7c
    b8e0:	b.n	b70c <_malloc_r+0x384>
    b8e2:	movs	r1, #254	; 0xfe
    b8e4:	movs	r2, #126	; 0x7e
    b8e6:	b.n	b70c <_malloc_r+0x384>
    b8e8:	ldr	r3, [r7, #4]
    b8ea:	b.n	b7f6 <_malloc_r+0x46e>
    b8ec:	lsrs	r0, r5, #3
    b8ee:	adds	r3, r0, #1
    b8f0:	lsls	r3, r3, #1
    b8f2:	b.n	b4e6 <_malloc_r+0x15e>
    b8f4:	.word	0x2000150c

0000b8f8 <__ascii_mbtowc>:
    b8f8:	sub	sp, #8
    b8fa:	cbz	r1, b910 <__ascii_mbtowc+0x18>
    b8fc:	cbz	r2, b916 <__ascii_mbtowc+0x1e>
    b8fe:	cbz	r3, b91c <__ascii_mbtowc+0x24>
    b900:	ldrb	r3, [r2, #0]
    b902:	str	r3, [r1, #0]
    b904:	ldrb	r2, [r2, #0]
    b906:	adds	r0, r2, #0
    b908:	it	ne
    b90a:	movne	r0, #1
    b90c:	add	sp, #8
    b90e:	bx	lr
    b910:	add	r1, sp, #4
    b912:	cmp	r2, #0
    b914:	bne.n	b8fe <__ascii_mbtowc+0x6>
    b916:	mov	r0, r2
    b918:	add	sp, #8
    b91a:	bx	lr
    b91c:	mvn.w	r0, #1
    b920:	b.n	b90c <__ascii_mbtowc+0x14>
    b922:	nop

0000b924 <memmove>:
    b924:	cmp	r0, r1
    b926:	push	{r4, r5, r6, r7, lr}
    b928:	bls.n	b946 <memmove+0x22>
    b92a:	adds	r3, r1, r2
    b92c:	cmp	r0, r3
    b92e:	bcs.n	b946 <memmove+0x22>
    b930:	adds	r1, r0, r2
    b932:	cmp	r2, #0
    b934:	beq.n	b9da <memmove+0xb6>
    b936:	subs	r2, r3, r2
    b938:	ldrb.w	r4, [r3, #-1]!
    b93c:	strb.w	r4, [r1, #-1]!
    b940:	cmp	r3, r2
    b942:	bne.n	b938 <memmove+0x14>
    b944:	pop	{r4, r5, r6, r7, pc}
    b946:	cmp	r2, #15
    b948:	bls.n	b9dc <memmove+0xb8>
    b94a:	orr.w	r3, r1, r0
    b94e:	lsls	r3, r3, #30
    b950:	bne.n	b9e0 <memmove+0xbc>
    b952:	add.w	r4, r0, #16
    b956:	add.w	r3, r1, #16
    b95a:	mov	r5, r2
    b95c:	ldr.w	r6, [r3, #-16]
    b960:	str.w	r6, [r4, #-16]
    b964:	ldr.w	r6, [r3, #-12]
    b968:	str.w	r6, [r4, #-12]
    b96c:	ldr.w	r6, [r3, #-8]
    b970:	str.w	r6, [r4, #-8]
    b974:	subs	r5, #16
    b976:	ldr.w	r6, [r3, #-4]
    b97a:	str.w	r6, [r4, #-4]
    b97e:	cmp	r5, #15
    b980:	add.w	r3, r3, #16
    b984:	add.w	r4, r4, #16
    b988:	bhi.n	b95c <memmove+0x38>
    b98a:	sub.w	r3, r2, #16
    b98e:	bic.w	r3, r3, #15
    b992:	and.w	lr, r2, #15
    b996:	adds	r3, #16
    b998:	cmp.w	lr, #3
    b99c:	add	r1, r3
    b99e:	add	r3, r0
    b9a0:	bls.n	b9e6 <memmove+0xc2>
    b9a2:	subs	r6, r3, #4
    b9a4:	mov	r5, r1
    b9a6:	mov	r4, lr
    b9a8:	subs	r4, #4
    b9aa:	ldr.w	r7, [r5], #4
    b9ae:	str.w	r7, [r6, #4]!
    b9b2:	cmp	r4, #3
    b9b4:	bhi.n	b9a8 <memmove+0x84>
    b9b6:	sub.w	r4, lr, #4
    b9ba:	bic.w	r4, r4, #3
    b9be:	adds	r4, #4
    b9c0:	add	r3, r4
    b9c2:	add	r1, r4
    b9c4:	and.w	r2, r2, #3
    b9c8:	cbz	r2, b9e4 <memmove+0xc0>
    b9ca:	subs	r3, #1
    b9cc:	add	r2, r1
    b9ce:	ldrb.w	r4, [r1], #1
    b9d2:	strb.w	r4, [r3, #1]!
    b9d6:	cmp	r2, r1
    b9d8:	bne.n	b9ce <memmove+0xaa>
    b9da:	pop	{r4, r5, r6, r7, pc}
    b9dc:	mov	r3, r0
    b9de:	b.n	b9c8 <memmove+0xa4>
    b9e0:	mov	r3, r0
    b9e2:	b.n	b9ca <memmove+0xa6>
    b9e4:	pop	{r4, r5, r6, r7, pc}
    b9e6:	mov	r2, lr
    b9e8:	b.n	b9c8 <memmove+0xa4>
    b9ea:	nop

0000b9ec <memset>:
    b9ec:	push	{r4, r5, r6}
    b9ee:	lsls	r4, r0, #30
    b9f0:	beq.n	ba80 <memset+0x94>
    b9f2:	subs	r4, r2, #1
    b9f4:	cmp	r2, #0
    b9f6:	beq.n	ba7c <memset+0x90>
    b9f8:	uxtb	r5, r1
    b9fa:	mov	r3, r0
    b9fc:	b.n	ba04 <memset+0x18>
    b9fe:	subs	r2, r4, #1
    ba00:	cbz	r4, ba7c <memset+0x90>
    ba02:	mov	r4, r2
    ba04:	strb.w	r5, [r3], #1
    ba08:	lsls	r2, r3, #30
    ba0a:	bne.n	b9fe <memset+0x12>
    ba0c:	cmp	r4, #3
    ba0e:	bls.n	ba6e <memset+0x82>
    ba10:	uxtb	r5, r1
    ba12:	orr.w	r5, r5, r5, lsl #8
    ba16:	cmp	r4, #15
    ba18:	orr.w	r5, r5, r5, lsl #16
    ba1c:	bls.n	ba52 <memset+0x66>
    ba1e:	add.w	r2, r3, #16
    ba22:	mov	r6, r4
    ba24:	subs	r6, #16
    ba26:	cmp	r6, #15
    ba28:	str.w	r5, [r2, #-16]
    ba2c:	str.w	r5, [r2, #-12]
    ba30:	str.w	r5, [r2, #-8]
    ba34:	str.w	r5, [r2, #-4]
    ba38:	add.w	r2, r2, #16
    ba3c:	bhi.n	ba24 <memset+0x38>
    ba3e:	sub.w	r2, r4, #16
    ba42:	bic.w	r2, r2, #15
    ba46:	and.w	r4, r4, #15
    ba4a:	adds	r2, #16
    ba4c:	cmp	r4, #3
    ba4e:	add	r3, r2
    ba50:	bls.n	ba6e <memset+0x82>
    ba52:	mov	r6, r3
    ba54:	mov	r2, r4
    ba56:	subs	r2, #4
    ba58:	cmp	r2, #3
    ba5a:	str.w	r5, [r6], #4
    ba5e:	bhi.n	ba56 <memset+0x6a>
    ba60:	subs	r2, r4, #4
    ba62:	bic.w	r2, r2, #3
    ba66:	adds	r2, #4
    ba68:	add	r3, r2
    ba6a:	and.w	r4, r4, #3
    ba6e:	cbz	r4, ba7c <memset+0x90>
    ba70:	uxtb	r1, r1
    ba72:	add	r4, r3
    ba74:	strb.w	r1, [r3], #1
    ba78:	cmp	r3, r4
    ba7a:	bne.n	ba74 <memset+0x88>
    ba7c:	pop	{r4, r5, r6}
    ba7e:	bx	lr
    ba80:	mov	r4, r2
    ba82:	mov	r3, r0
    ba84:	b.n	ba0c <memset+0x20>
    ba86:	nop

0000ba88 <__malloc_lock>:
    ba88:	bx	lr
    ba8a:	nop

0000ba8c <__malloc_unlock>:
    ba8c:	bx	lr
    ba8e:	nop

0000ba90 <_realloc_r>:
    ba90:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ba94:	mov	r7, r2
    ba96:	sub	sp, #12
    ba98:	cmp	r1, #0
    ba9a:	beq.w	bc20 <_realloc_r+0x190>
    ba9e:	mov	r6, r1
    baa0:	mov	r9, r0
    baa2:	add.w	r5, r7, #11
    baa6:	bl	ba88 <__malloc_lock>
    baaa:	ldr.w	lr, [r6, #-4]
    baae:	cmp	r5, #22
    bab0:	bic.w	r4, lr, #3
    bab4:	sub.w	r8, r6, #8
    bab8:	bhi.n	bb3c <_realloc_r+0xac>
    baba:	movs	r2, #16
    babc:	mov	r5, r2
    babe:	cmp	r7, r5
    bac0:	bhi.n	bb46 <_realloc_r+0xb6>
    bac2:	cmp	r4, r2
    bac4:	bge.n	bbb2 <_realloc_r+0x122>
    bac6:	ldr	r3, [pc, #804]	; (bdec <_realloc_r+0x35c>)
    bac8:	ldr	r1, [r3, #8]
    baca:	add.w	r0, r8, r4
    bace:	cmp	r0, r1
    bad0:	ldr	r1, [r0, #4]
    bad2:	beq.w	bc88 <_realloc_r+0x1f8>
    bad6:	bic.w	r3, r1, #1
    bada:	add	r3, r0
    badc:	ldr	r3, [r3, #4]
    bade:	lsls	r3, r3, #31
    bae0:	bpl.n	bbde <_realloc_r+0x14e>
    bae2:	tst.w	lr, #1
    bae6:	beq.n	bb54 <_realloc_r+0xc4>
    bae8:	mov	r1, r7
    baea:	mov	r0, r9
    baec:	bl	b388 <_malloc_r>
    baf0:	mov	r7, r0
    baf2:	cbz	r0, bb2e <_realloc_r+0x9e>
    baf4:	ldr.w	r3, [r6, #-4]
    baf8:	bic.w	r3, r3, #1
    bafc:	add	r3, r8
    bafe:	sub.w	r2, r0, #8
    bb02:	cmp	r2, r3
    bb04:	beq.w	bd90 <_realloc_r+0x300>
    bb08:	subs	r2, r4, #4
    bb0a:	cmp	r2, #36	; 0x24
    bb0c:	bhi.w	bd72 <_realloc_r+0x2e2>
    bb10:	cmp	r2, #19
    bb12:	bhi.w	bd1e <_realloc_r+0x28e>
    bb16:	mov	r3, r0
    bb18:	mov	r2, r6
    bb1a:	ldr	r1, [r2, #0]
    bb1c:	str	r1, [r3, #0]
    bb1e:	ldr	r1, [r2, #4]
    bb20:	str	r1, [r3, #4]
    bb22:	ldr	r2, [r2, #8]
    bb24:	str	r2, [r3, #8]
    bb26:	mov	r1, r6
    bb28:	mov	r0, r9
    bb2a:	bl	e9a8 <_free_r>
    bb2e:	mov	r0, r9
    bb30:	bl	ba8c <__malloc_unlock>
    bb34:	mov	r0, r7
    bb36:	add	sp, #12
    bb38:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bb3c:	bic.w	r5, r5, #7
    bb40:	cmp	r5, #0
    bb42:	mov	r2, r5
    bb44:	bge.n	babe <_realloc_r+0x2e>
    bb46:	movs	r3, #12
    bb48:	movs	r0, #0
    bb4a:	str.w	r3, [r9]
    bb4e:	add	sp, #12
    bb50:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bb54:	ldr.w	r3, [r6, #-8]
    bb58:	rsb	sl, r3, r8
    bb5c:	ldr.w	r3, [sl, #4]
    bb60:	bic.w	ip, r3, #3
    bb64:	add.w	r3, r4, ip
    bb68:	cmp	r3, r2
    bb6a:	blt.n	bae8 <_realloc_r+0x58>
    bb6c:	mov	r7, sl
    bb6e:	ldr.w	r1, [sl, #12]
    bb72:	ldr.w	r0, [r7, #8]!
    bb76:	subs	r2, r4, #4
    bb78:	cmp	r2, #36	; 0x24
    bb7a:	str	r1, [r0, #12]
    bb7c:	str	r0, [r1, #8]
    bb7e:	bhi.w	bdb0 <_realloc_r+0x320>
    bb82:	cmp	r2, #19
    bb84:	bls.w	bdac <_realloc_r+0x31c>
    bb88:	ldr	r1, [r6, #0]
    bb8a:	str.w	r1, [sl, #8]
    bb8e:	ldr	r1, [r6, #4]
    bb90:	str.w	r1, [sl, #12]
    bb94:	cmp	r2, #27
    bb96:	bhi.w	bdf0 <_realloc_r+0x360>
    bb9a:	adds	r6, #8
    bb9c:	add.w	r2, sl, #16
    bba0:	ldr	r1, [r6, #0]
    bba2:	str	r1, [r2, #0]
    bba4:	ldr	r1, [r6, #4]
    bba6:	str	r1, [r2, #4]
    bba8:	ldr	r1, [r6, #8]
    bbaa:	str	r1, [r2, #8]
    bbac:	mov	r6, r7
    bbae:	mov	r4, r3
    bbb0:	mov	r8, sl
    bbb2:	subs	r3, r4, r5
    bbb4:	cmp	r3, #15
    bbb6:	bhi.n	bbf4 <_realloc_r+0x164>
    bbb8:	ldr.w	r3, [r8, #4]
    bbbc:	and.w	r3, r3, #1
    bbc0:	orrs	r3, r4
    bbc2:	add	r4, r8
    bbc4:	str.w	r3, [r8, #4]
    bbc8:	ldr	r3, [r4, #4]
    bbca:	orr.w	r3, r3, #1
    bbce:	str	r3, [r4, #4]
    bbd0:	mov	r0, r9
    bbd2:	bl	ba8c <__malloc_unlock>
    bbd6:	mov	r0, r6
    bbd8:	add	sp, #12
    bbda:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bbde:	bic.w	r1, r1, #3
    bbe2:	add	r1, r4
    bbe4:	cmp	r1, r2
    bbe6:	blt.n	bc2c <_realloc_r+0x19c>
    bbe8:	ldr	r3, [r0, #12]
    bbea:	ldr	r2, [r0, #8]
    bbec:	mov	r4, r1
    bbee:	str	r3, [r2, #12]
    bbf0:	str	r2, [r3, #8]
    bbf2:	b.n	bbb2 <_realloc_r+0x122>
    bbf4:	ldr.w	r2, [r8, #4]
    bbf8:	add.w	r1, r8, r5
    bbfc:	and.w	r2, r2, #1
    bc00:	orrs	r5, r2
    bc02:	orr.w	r2, r3, #1
    bc06:	add	r3, r1
    bc08:	str.w	r5, [r8, #4]
    bc0c:	str	r2, [r1, #4]
    bc0e:	ldr	r2, [r3, #4]
    bc10:	orr.w	r2, r2, #1
    bc14:	adds	r1, #8
    bc16:	str	r2, [r3, #4]
    bc18:	mov	r0, r9
    bc1a:	bl	e9a8 <_free_r>
    bc1e:	b.n	bbd0 <_realloc_r+0x140>
    bc20:	mov	r1, r2
    bc22:	add	sp, #12
    bc24:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bc28:	b.w	b388 <_malloc_r>
    bc2c:	tst.w	lr, #1
    bc30:	bne.w	bae8 <_realloc_r+0x58>
    bc34:	ldr.w	r3, [r6, #-8]
    bc38:	rsb	sl, r3, r8
    bc3c:	ldr.w	r3, [sl, #4]
    bc40:	bic.w	ip, r3, #3
    bc44:	add.w	lr, r1, ip
    bc48:	cmp	lr, r2
    bc4a:	blt.n	bb64 <_realloc_r+0xd4>
    bc4c:	ldr	r3, [r0, #12]
    bc4e:	ldr	r2, [r0, #8]
    bc50:	mov	r7, sl
    bc52:	str	r3, [r2, #12]
    bc54:	str	r2, [r3, #8]
    bc56:	ldr.w	r1, [r7, #8]!
    bc5a:	ldr.w	r3, [sl, #12]
    bc5e:	str	r3, [r1, #12]
    bc60:	subs	r2, r4, #4
    bc62:	cmp	r2, #36	; 0x24
    bc64:	str	r1, [r3, #8]
    bc66:	bhi.w	bd9c <_realloc_r+0x30c>
    bc6a:	cmp	r2, #19
    bc6c:	bls.n	bd34 <_realloc_r+0x2a4>
    bc6e:	ldr	r3, [r6, #0]
    bc70:	str.w	r3, [sl, #8]
    bc74:	ldr	r3, [r6, #4]
    bc76:	str.w	r3, [sl, #12]
    bc7a:	cmp	r2, #27
    bc7c:	bhi.w	bdc0 <_realloc_r+0x330>
    bc80:	adds	r6, #8
    bc82:	add.w	r3, sl, #16
    bc86:	b.n	bd36 <_realloc_r+0x2a6>
    bc88:	bic.w	fp, r1, #3
    bc8c:	add	fp, r4
    bc8e:	add.w	r0, r5, #16
    bc92:	cmp	fp, r0
    bc94:	bge.n	bd4a <_realloc_r+0x2ba>
    bc96:	tst.w	lr, #1
    bc9a:	bne.w	bae8 <_realloc_r+0x58>
    bc9e:	ldr.w	r1, [r6, #-8]
    bca2:	rsb	sl, r1, r8
    bca6:	ldr.w	r1, [sl, #4]
    bcaa:	bic.w	ip, r1, #3
    bcae:	add	fp, ip
    bcb0:	cmp	r0, fp
    bcb2:	bgt.w	bb64 <_realloc_r+0xd4>
    bcb6:	mov	r7, sl
    bcb8:	ldr.w	r1, [sl, #12]
    bcbc:	ldr.w	r0, [r7, #8]!
    bcc0:	subs	r2, r4, #4
    bcc2:	cmp	r2, #36	; 0x24
    bcc4:	str	r1, [r0, #12]
    bcc6:	str	r0, [r1, #8]
    bcc8:	bhi.w	be34 <_realloc_r+0x3a4>
    bccc:	cmp	r2, #19
    bcce:	bls.w	be1c <_realloc_r+0x38c>
    bcd2:	ldr	r1, [r6, #0]
    bcd4:	str.w	r1, [sl, #8]
    bcd8:	ldr	r1, [r6, #4]
    bcda:	str.w	r1, [sl, #12]
    bcde:	cmp	r2, #27
    bce0:	bhi.w	be42 <_realloc_r+0x3b2>
    bce4:	adds	r6, #8
    bce6:	add.w	r2, sl, #16
    bcea:	ldr	r1, [r6, #0]
    bcec:	str	r1, [r2, #0]
    bcee:	ldr	r1, [r6, #4]
    bcf0:	str	r1, [r2, #4]
    bcf2:	ldr	r1, [r6, #8]
    bcf4:	str	r1, [r2, #8]
    bcf6:	add.w	r1, sl, r5
    bcfa:	rsb	r2, r5, fp
    bcfe:	orr.w	r2, r2, #1
    bd02:	str	r1, [r3, #8]
    bd04:	str	r2, [r1, #4]
    bd06:	ldr.w	r3, [sl, #4]
    bd0a:	and.w	r3, r3, #1
    bd0e:	orrs	r5, r3
    bd10:	mov	r0, r9
    bd12:	str.w	r5, [sl, #4]
    bd16:	bl	ba8c <__malloc_unlock>
    bd1a:	mov	r0, r7
    bd1c:	b.n	bbd8 <_realloc_r+0x148>
    bd1e:	ldr	r3, [r6, #0]
    bd20:	str	r3, [r0, #0]
    bd22:	ldr	r3, [r6, #4]
    bd24:	str	r3, [r0, #4]
    bd26:	cmp	r2, #27
    bd28:	bhi.n	bd7a <_realloc_r+0x2ea>
    bd2a:	add.w	r3, r0, #8
    bd2e:	add.w	r2, r6, #8
    bd32:	b.n	bb1a <_realloc_r+0x8a>
    bd34:	mov	r3, r7
    bd36:	ldr	r2, [r6, #0]
    bd38:	str	r2, [r3, #0]
    bd3a:	ldr	r2, [r6, #4]
    bd3c:	str	r2, [r3, #4]
    bd3e:	ldr	r2, [r6, #8]
    bd40:	str	r2, [r3, #8]
    bd42:	mov	r6, r7
    bd44:	mov	r4, lr
    bd46:	mov	r8, sl
    bd48:	b.n	bbb2 <_realloc_r+0x122>
    bd4a:	add.w	r1, r8, r5
    bd4e:	rsb	fp, r5, fp
    bd52:	orr.w	r2, fp, #1
    bd56:	str	r1, [r3, #8]
    bd58:	str	r2, [r1, #4]
    bd5a:	ldr.w	r3, [r6, #-4]
    bd5e:	and.w	r3, r3, #1
    bd62:	orrs	r5, r3
    bd64:	mov	r0, r9
    bd66:	str.w	r5, [r6, #-4]
    bd6a:	bl	ba8c <__malloc_unlock>
    bd6e:	mov	r0, r6
    bd70:	b.n	bbd8 <_realloc_r+0x148>
    bd72:	mov	r1, r6
    bd74:	bl	b924 <memmove>
    bd78:	b.n	bb26 <_realloc_r+0x96>
    bd7a:	ldr	r3, [r6, #8]
    bd7c:	str	r3, [r0, #8]
    bd7e:	ldr	r3, [r6, #12]
    bd80:	str	r3, [r0, #12]
    bd82:	cmp	r2, #36	; 0x24
    bd84:	beq.n	bdd8 <_realloc_r+0x348>
    bd86:	add.w	r3, r0, #16
    bd8a:	add.w	r2, r6, #16
    bd8e:	b.n	bb1a <_realloc_r+0x8a>
    bd90:	ldr.w	r3, [r0, #-4]
    bd94:	bic.w	r3, r3, #3
    bd98:	add	r4, r3
    bd9a:	b.n	bbb2 <_realloc_r+0x122>
    bd9c:	mov	r1, r6
    bd9e:	mov	r0, r7
    bda0:	mov	r4, lr
    bda2:	mov	r8, sl
    bda4:	bl	b924 <memmove>
    bda8:	mov	r6, r7
    bdaa:	b.n	bbb2 <_realloc_r+0x122>
    bdac:	mov	r2, r7
    bdae:	b.n	bba0 <_realloc_r+0x110>
    bdb0:	mov	r1, r6
    bdb2:	mov	r0, r7
    bdb4:	mov	r4, r3
    bdb6:	mov	r8, sl
    bdb8:	bl	b924 <memmove>
    bdbc:	mov	r6, r7
    bdbe:	b.n	bbb2 <_realloc_r+0x122>
    bdc0:	ldr	r3, [r6, #8]
    bdc2:	str.w	r3, [sl, #16]
    bdc6:	ldr	r3, [r6, #12]
    bdc8:	str.w	r3, [sl, #20]
    bdcc:	cmp	r2, #36	; 0x24
    bdce:	beq.n	be08 <_realloc_r+0x378>
    bdd0:	adds	r6, #16
    bdd2:	add.w	r3, sl, #24
    bdd6:	b.n	bd36 <_realloc_r+0x2a6>
    bdd8:	ldr	r3, [r6, #16]
    bdda:	str	r3, [r0, #16]
    bddc:	ldr	r3, [r6, #20]
    bdde:	str	r3, [r0, #20]
    bde0:	add.w	r2, r6, #24
    bde4:	add.w	r3, r0, #24
    bde8:	b.n	bb1a <_realloc_r+0x8a>
    bdea:	nop
    bdec:	.word	0x2000150c
    bdf0:	ldr	r1, [r6, #8]
    bdf2:	str.w	r1, [sl, #16]
    bdf6:	ldr	r1, [r6, #12]
    bdf8:	str.w	r1, [sl, #20]
    bdfc:	cmp	r2, #36	; 0x24
    bdfe:	beq.n	be20 <_realloc_r+0x390>
    be00:	adds	r6, #16
    be02:	add.w	r2, sl, #24
    be06:	b.n	bba0 <_realloc_r+0x110>
    be08:	ldr	r3, [r6, #16]
    be0a:	str.w	r3, [sl, #24]
    be0e:	ldr	r3, [r6, #20]
    be10:	str.w	r3, [sl, #28]
    be14:	adds	r6, #24
    be16:	add.w	r3, sl, #32
    be1a:	b.n	bd36 <_realloc_r+0x2a6>
    be1c:	mov	r2, r7
    be1e:	b.n	bcea <_realloc_r+0x25a>
    be20:	ldr	r2, [r6, #16]
    be22:	str.w	r2, [sl, #24]
    be26:	ldr	r2, [r6, #20]
    be28:	str.w	r2, [sl, #28]
    be2c:	adds	r6, #24
    be2e:	add.w	r2, sl, #32
    be32:	b.n	bba0 <_realloc_r+0x110>
    be34:	mov	r1, r6
    be36:	mov	r0, r7
    be38:	str	r3, [sp, #4]
    be3a:	bl	b924 <memmove>
    be3e:	ldr	r3, [sp, #4]
    be40:	b.n	bcf6 <_realloc_r+0x266>
    be42:	ldr	r1, [r6, #8]
    be44:	str.w	r1, [sl, #16]
    be48:	ldr	r1, [r6, #12]
    be4a:	str.w	r1, [sl, #20]
    be4e:	cmp	r2, #36	; 0x24
    be50:	beq.n	be5a <_realloc_r+0x3ca>
    be52:	adds	r6, #16
    be54:	add.w	r2, sl, #24
    be58:	b.n	bcea <_realloc_r+0x25a>
    be5a:	ldr	r2, [r6, #16]
    be5c:	str.w	r2, [sl, #24]
    be60:	ldr	r2, [r6, #20]
    be62:	str.w	r2, [sl, #28]
    be66:	adds	r6, #24
    be68:	add.w	r2, sl, #32
    be6c:	b.n	bcea <_realloc_r+0x25a>
    be6e:	nop

0000be70 <_sbrk_r>:
    be70:	push	{r3, r4, r5, lr}
    be72:	ldr	r4, [pc, #28]	; (be90 <_sbrk_r+0x20>)
    be74:	movs	r3, #0
    be76:	mov	r5, r0
    be78:	mov	r0, r1
    be7a:	str	r3, [r4, #0]
    be7c:	bl	9534 <_sbrk>
    be80:	adds	r3, r0, #1
    be82:	beq.n	be86 <_sbrk_r+0x16>
    be84:	pop	{r3, r4, r5, pc}
    be86:	ldr	r3, [r4, #0]
    be88:	cmp	r3, #0
    be8a:	beq.n	be84 <_sbrk_r+0x14>
    be8c:	str	r3, [r5, #0]
    be8e:	pop	{r3, r4, r5, pc}
    be90:	.word	0x2000f240

0000be94 <sprintf>:
    be94:	push	{r1, r2, r3}
    be96:	push	{r4, r5, r6, r7, lr}
    be98:	sub	sp, #112	; 0x70
    be9a:	add	r3, sp, #132	; 0x84
    be9c:	ldr	r1, [pc, #60]	; (bedc <sprintf+0x48>)
    be9e:	ldr.w	r2, [r3], #4
    bea2:	str	r3, [sp, #4]
    bea4:	mov	r5, r0
    bea6:	mvn.w	r4, #2147483648	; 0x80000000
    beaa:	ldr	r0, [r1, #0]
    beac:	str	r5, [sp, #8]
    beae:	mov.w	r7, #520	; 0x208
    beb2:	movw	r6, #65535	; 0xffff
    beb6:	add	r1, sp, #8
    beb8:	str	r5, [sp, #24]
    beba:	strh.w	r7, [sp, #20]
    bebe:	str	r4, [sp, #16]
    bec0:	str	r4, [sp, #28]
    bec2:	strh.w	r6, [sp, #22]
    bec6:	bl	c120 <_svfprintf_r>
    beca:	ldr	r3, [sp, #8]
    becc:	movs	r2, #0
    bece:	strb	r2, [r3, #0]
    bed0:	add	sp, #112	; 0x70
    bed2:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    bed6:	add	sp, #12
    bed8:	bx	lr
    beda:	nop
    bedc:	.word	0x2000191c

0000bee0 <strcpy>:
    bee0:	eor.w	r2, r0, r1
    bee4:	mov	ip, r0
    bee6:	tst.w	r2, #3
    beea:	bne.n	bf8c <strcpy+0xac>
    beec:	tst.w	r1, #3
    bef0:	bne.n	bf58 <strcpy+0x78>
    bef2:	str.w	r4, [sp, #-4]!
    bef6:	tst.w	r1, #4
    befa:	ldr.w	r3, [r1], #4
    befe:	beq.n	bf18 <strcpy+0x38>
    bf00:	sub.w	r2, r3, #16843009	; 0x1010101
    bf04:	bics	r2, r3
    bf06:	tst.w	r2, #2155905152	; 0x80808080
    bf0a:	itt	eq
    bf0c:	streq.w	r3, [ip], #4
    bf10:	ldreq.w	r3, [r1], #4
    bf14:	bne.n	bf44 <strcpy+0x64>
    bf16:	nop
    bf18:	ldr.w	r4, [r1], #4
    bf1c:	sub.w	r2, r3, #16843009	; 0x1010101
    bf20:	bics	r2, r3
    bf22:	tst.w	r2, #2155905152	; 0x80808080
    bf26:	sub.w	r2, r4, #16843009	; 0x1010101
    bf2a:	bne.n	bf44 <strcpy+0x64>
    bf2c:	str.w	r3, [ip], #4
    bf30:	bics	r2, r4
    bf32:	tst.w	r2, #2155905152	; 0x80808080
    bf36:	itt	eq
    bf38:	ldreq.w	r3, [r1], #4
    bf3c:	streq.w	r4, [ip], #4
    bf40:	beq.n	bf18 <strcpy+0x38>
    bf42:	mov	r3, r4
    bf44:	strb.w	r3, [ip], #1
    bf48:	tst.w	r3, #255	; 0xff
    bf4c:	mov.w	r3, r3, ror #8
    bf50:	bne.n	bf44 <strcpy+0x64>
    bf52:	ldr.w	r4, [sp], #4
    bf56:	bx	lr
    bf58:	tst.w	r1, #1
    bf5c:	beq.n	bf6c <strcpy+0x8c>
    bf5e:	ldrb.w	r2, [r1], #1
    bf62:	strb.w	r2, [ip], #1
    bf66:	cmp	r2, #0
    bf68:	it	eq
    bf6a:	bxeq	lr
    bf6c:	tst.w	r1, #2
    bf70:	beq.n	bef2 <strcpy+0x12>
    bf72:	ldrh.w	r2, [r1], #2
    bf76:	tst.w	r2, #255	; 0xff
    bf7a:	itet	ne
    bf7c:	strhne.w	r2, [ip], #2
    bf80:	strbeq.w	r2, [ip]
    bf84:	tstne.w	r2, #65280	; 0xff00
    bf88:	bne.n	bef2 <strcpy+0x12>
    bf8a:	bx	lr
    bf8c:	ldrb.w	r2, [r1], #1
    bf90:	strb.w	r2, [ip], #1
    bf94:	cmp	r2, #0
    bf96:	bne.n	bf8c <strcpy+0xac>
    bf98:	bx	lr
    bf9a:	nop

0000bf9c <strlcat>:
    bf9c:	push	{r4, r5, r6, lr}
    bf9e:	cbz	r2, bfde <strlcat+0x42>
    bfa0:	ldrb	r6, [r0, #0]
    bfa2:	cbz	r6, bfea <strlcat+0x4e>
    bfa4:	adds	r3, r0, #1
    bfa6:	adds	r6, r0, r2
    bfa8:	b.n	bfb0 <strlcat+0x14>
    bfaa:	ldrb	r5, [r3, #0]
    bfac:	adds	r3, #1
    bfae:	cbz	r5, bfb6 <strlcat+0x1a>
    bfb0:	cmp	r6, r3
    bfb2:	mov	r4, r3
    bfb4:	bne.n	bfaa <strlcat+0xe>
    bfb6:	subs	r6, r4, r0
    bfb8:	subs	r2, r2, r6
    bfba:	beq.n	bfe0 <strlcat+0x44>
    bfbc:	ldrb	r3, [r1, #0]
    bfbe:	mov	r5, r1
    bfc0:	cbz	r3, bfd6 <strlcat+0x3a>
    bfc2:	cmp	r2, #1
    bfc4:	beq.n	bfcc <strlcat+0x30>
    bfc6:	strb	r3, [r4, #0]
    bfc8:	subs	r2, #1
    bfca:	adds	r4, #1
    bfcc:	ldrb.w	r3, [r5, #1]!
    bfd0:	cmp	r3, #0
    bfd2:	bne.n	bfc2 <strlcat+0x26>
    bfd4:	subs	r3, r5, r1
    bfd6:	movs	r2, #0
    bfd8:	strb	r2, [r4, #0]
    bfda:	adds	r0, r6, r3
    bfdc:	pop	{r4, r5, r6, pc}
    bfde:	mov	r6, r2
    bfe0:	mov	r0, r1
    bfe2:	bl	c040 <strlen>
    bfe6:	add	r0, r6
    bfe8:	pop	{r4, r5, r6, pc}
    bfea:	mov	r4, r0
    bfec:	b.n	bfbc <strlcat+0x20>
    bfee:	nop

0000bff0 <strlcpy>:
    bff0:	push	{r4}
    bff2:	mov	r3, r1
    bff4:	cbz	r2, c00a <strlcpy+0x1a>
    bff6:	b.n	c002 <strlcpy+0x12>
    bff8:	ldrb.w	r4, [r3], #1
    bffc:	strb.w	r4, [r0], #1
    c000:	cbz	r4, c012 <strlcpy+0x22>
    c002:	subs	r2, #1
    c004:	bne.n	bff8 <strlcpy+0x8>
    c006:	movs	r2, #0
    c008:	strb	r2, [r0, #0]
    c00a:	ldrb.w	r2, [r3], #1
    c00e:	cmp	r2, #0
    c010:	bne.n	c00a <strlcpy+0x1a>
    c012:	subs	r0, r3, r1
    c014:	subs	r0, #1
    c016:	ldr.w	r4, [sp], #4
    c01a:	bx	lr
	...

0000c040 <strlen>:
    c040:	pld	[r0]
    c044:	strd	r4, r5, [sp, #-8]!
    c048:	bic.w	r1, r0, #7
    c04c:	mvn.w	ip, #0
    c050:	ands.w	r4, r0, #7
    c054:	pld	[r1, #32]
    c058:	bne.w	c0ee <strlen+0xae>
    c05c:	mov.w	r4, #0
    c060:	mvn.w	r0, #7
    c064:	ldrd	r2, r3, [r1]
    c068:	pld	[r1, #64]	; 0x40
    c06c:	add.w	r0, r0, #8
    c070:	uadd8	r2, r2, ip
    c074:	sel	r2, r4, ip
    c078:	uadd8	r3, r3, ip
    c07c:	sel	r3, r2, ip
    c080:	cbnz	r3, c0d6 <strlen+0x96>
    c082:	ldrd	r2, r3, [r1, #8]
    c086:	uadd8	r2, r2, ip
    c08a:	add.w	r0, r0, #8
    c08e:	sel	r2, r4, ip
    c092:	uadd8	r3, r3, ip
    c096:	sel	r3, r2, ip
    c09a:	cbnz	r3, c0d6 <strlen+0x96>
    c09c:	ldrd	r2, r3, [r1, #16]
    c0a0:	uadd8	r2, r2, ip
    c0a4:	add.w	r0, r0, #8
    c0a8:	sel	r2, r4, ip
    c0ac:	uadd8	r3, r3, ip
    c0b0:	sel	r3, r2, ip
    c0b4:	cbnz	r3, c0d6 <strlen+0x96>
    c0b6:	ldrd	r2, r3, [r1, #24]
    c0ba:	add.w	r1, r1, #32
    c0be:	uadd8	r2, r2, ip
    c0c2:	add.w	r0, r0, #8
    c0c6:	sel	r2, r4, ip
    c0ca:	uadd8	r3, r3, ip
    c0ce:	sel	r3, r2, ip
    c0d2:	cmp	r3, #0
    c0d4:	beq.n	c064 <strlen+0x24>
    c0d6:	cmp	r2, #0
    c0d8:	itt	eq
    c0da:	addeq	r0, #4
    c0dc:	moveq	r2, r3
    c0de:	rev	r2, r2
    c0e0:	clz	r2, r2
    c0e4:	ldrd	r4, r5, [sp], #8
    c0e8:	add.w	r0, r0, r2, lsr #3
    c0ec:	bx	lr
    c0ee:	ldrd	r2, r3, [r1]
    c0f2:	and.w	r5, r4, #3
    c0f6:	rsb	r0, r4, #0
    c0fa:	mov.w	r5, r5, lsl #3
    c0fe:	tst.w	r4, #4
    c102:	pld	[r1, #64]	; 0x40
    c106:	lsl.w	r5, ip, r5
    c10a:	orn	r2, r2, r5
    c10e:	itt	ne
    c110:	ornne	r3, r3, r5
    c114:	movne	r2, ip
    c116:	mov.w	r4, #0
    c11a:	b.n	c070 <strlen+0x30>
    c11c:	movs	r0, r0
	...

0000c120 <_svfprintf_r>:
    c120:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c124:	sub	sp, #260	; 0x104
    c126:	mov	r4, r1
    c128:	str	r1, [sp, #20]
    c12a:	mov	r5, r2
    c12c:	str	r3, [sp, #40]	; 0x28
    c12e:	str	r0, [sp, #24]
    c130:	bl	eb78 <_localeconv_r>
    c134:	ldr	r3, [r0, #0]
    c136:	str	r3, [sp, #76]	; 0x4c
    c138:	mov	r0, r3
    c13a:	bl	c040 <strlen>
    c13e:	ldrh	r3, [r4, #12]
    c140:	str	r0, [sp, #72]	; 0x48
    c142:	lsls	r6, r3, #24
    c144:	bpl.n	c14e <_svfprintf_r+0x2e>
    c146:	ldr	r3, [r4, #16]
    c148:	cmp	r3, #0
    c14a:	beq.w	d3b0 <_svfprintf_r+0x1290>
    c14e:	vldr	d7, [pc, #664]	; c3e8 <_svfprintf_r+0x2c8>
    c152:	movs	r3, #0
    c154:	vstr	d7, [sp, #64]	; 0x40
    c158:	str	r3, [sp, #56]	; 0x38
    c15a:	str	r3, [sp, #148]	; 0x94
    c15c:	str	r3, [sp, #144]	; 0x90
    c15e:	str	r3, [sp, #84]	; 0x54
    c160:	str	r3, [sp, #28]
    c162:	ldr.w	sl, [pc, #656]	; c3f4 <_svfprintf_r+0x2d4>
    c166:	add	r3, sp, #192	; 0xc0
    c168:	str	r3, [sp, #140]	; 0x8c
    c16a:	mov	r9, r3
    c16c:	mov	r8, r5
    c16e:	ldrb.w	r3, [r8]
    c172:	mov	r4, r8
    c174:	cbz	r3, c1b2 <_svfprintf_r+0x92>
    c176:	cmp	r3, #37	; 0x25
    c178:	bne.n	c180 <_svfprintf_r+0x60>
    c17a:	b.n	c1b2 <_svfprintf_r+0x92>
    c17c:	cmp	r3, #37	; 0x25
    c17e:	beq.n	c188 <_svfprintf_r+0x68>
    c180:	ldrb.w	r3, [r4, #1]!
    c184:	cmp	r3, #0
    c186:	bne.n	c17c <_svfprintf_r+0x5c>
    c188:	rsb	r5, r8, r4
    c18c:	cbz	r5, c1b2 <_svfprintf_r+0x92>
    c18e:	ldr	r3, [sp, #144]	; 0x90
    c190:	ldr	r2, [sp, #148]	; 0x94
    c192:	str.w	r8, [r9]
    c196:	adds	r3, #1
    c198:	add	r2, r5
    c19a:	cmp	r3, #7
    c19c:	str.w	r5, [r9, #4]
    c1a0:	str	r2, [sp, #148]	; 0x94
    c1a2:	str	r3, [sp, #144]	; 0x90
    c1a4:	bgt.w	c2f4 <_svfprintf_r+0x1d4>
    c1a8:	add.w	r9, r9, #8
    c1ac:	ldr	r3, [sp, #28]
    c1ae:	add	r3, r5
    c1b0:	str	r3, [sp, #28]
    c1b2:	ldrb	r3, [r4, #0]
    c1b4:	cmp	r3, #0
    c1b6:	beq.w	c306 <_svfprintf_r+0x1e6>
    c1ba:	movs	r3, #0
    c1bc:	mov	r2, r3
    c1be:	strb.w	r3, [sp, #111]	; 0x6f
    c1c2:	mov	r1, r3
    c1c4:	str	r3, [sp, #32]
    c1c6:	str	r3, [sp, #12]
    c1c8:	mov.w	fp, #4294967295
    c1cc:	ldrb	r3, [r4, #1]
    c1ce:	add.w	r8, r4, #1
    c1d2:	mov	r5, fp
    c1d4:	add.w	r8, r8, #1
    c1d8:	sub.w	r0, r3, #32
    c1dc:	cmp	r0, #88	; 0x58
    c1de:	bhi.w	ca4a <_svfprintf_r+0x92a>
    c1e2:	tbh	[pc, r0, lsl #1]
    c1e6:	.short	0x03a0
    c1e8:	.word	0x04320432
    c1ec:	.word	0x043203a8
    c1f0:	.word	0x04320432
    c1f4:	.word	0x04320432
    c1f8:	.word	0x03af0432
    c1fc:	.word	0x043203bd
    c200:	.word	0x00e2005d
    c204:	.word	0x01090432
    c208:	.word	0x01100110
    c20c:	.word	0x01100110
    c210:	.word	0x01100110
    c214:	.word	0x01100110
    c218:	.word	0x04320110
    c21c:	.word	0x04320432
    c220:	.word	0x04320432
    c224:	.word	0x04320432
    c228:	.word	0x04320432
    c22c:	.word	0x01200432
    c230:	.word	0x04320286
    c234:	.word	0x04320286
    c238:	.word	0x04320432
    c23c:	.word	0x02d40432
    c240:	.word	0x04320432
    c244:	.word	0x043202e5
    c248:	.word	0x04320432
    c24c:	.word	0x04320432
    c250:	.word	0x0432030f
    c254:	.word	0x033d0432
    c258:	.word	0x04320432
    c25c:	.word	0x04320432
    c260:	.word	0x04320432
    c264:	.word	0x04320432
    c268:	.word	0x04320432
    c26c:	.word	0x0391037e
    c270:	.word	0x02860286
    c274:	.word	0x03990286
    c278:	.word	0x04320391
    c27c:	.word	0x04070432
    c280:	.word	0x04120432
    c284:	.word	0x006400a3
    c288:	.word	0x043203c2
    c28c:	.word	0x043203c9
    c290:	.word	0x043203ea
    c294:	.word	0x03f20432
    c298:	ldr	r0, [sp, #32]
    c29a:	str	r3, [sp, #40]	; 0x28
    c29c:	negs	r0, r0
    c29e:	str	r0, [sp, #32]
    c2a0:	ldr	r3, [sp, #12]
    c2a2:	orr.w	r3, r3, #4
    c2a6:	str	r3, [sp, #12]
    c2a8:	ldrb.w	r3, [r8]
    c2ac:	b.n	c1d4 <_svfprintf_r+0xb4>
    c2ae:	ldr	r0, [sp, #40]	; 0x28
    c2b0:	mov	fp, r5
    c2b2:	movs	r1, #0
    c2b4:	ldr	r4, [r0, #0]
    c2b6:	strb.w	r1, [sp, #111]	; 0x6f
    c2ba:	adds	r7, r0, #4
    c2bc:	ldr	r0, [sp, #12]
    c2be:	movs	r3, #48	; 0x30
    c2c0:	movs	r2, #120	; 0x78
    c2c2:	cmp	fp, r1
    c2c4:	strb.w	r3, [sp, #112]	; 0x70
    c2c8:	mov.w	r5, #0
    c2cc:	strb.w	r2, [sp, #113]	; 0x71
    c2d0:	orr.w	r3, r0, #2
    c2d4:	blt.w	ca84 <_svfprintf_r+0x964>
    c2d8:	bic.w	r3, r0, #128	; 0x80
    c2dc:	orr.w	r3, r3, #2
    c2e0:	str	r3, [sp, #12]
    c2e2:	orrs.w	r3, r4, r5
    c2e6:	str	r7, [sp, #40]	; 0x28
    c2e8:	beq.w	ca30 <_svfprintf_r+0x910>
    c2ec:	mov	r7, r1
    c2ee:	str	r2, [sp, #52]	; 0x34
    c2f0:	ldr	r0, [pc, #252]	; (c3f0 <_svfprintf_r+0x2d0>)
    c2f2:	b.n	c8c2 <_svfprintf_r+0x7a2>
    c2f4:	add	r2, sp, #140	; 0x8c
    c2f6:	ldr	r1, [sp, #20]
    c2f8:	ldr	r0, [sp, #24]
    c2fa:	bl	f264 <__ssprint_r>
    c2fe:	cbnz	r0, c314 <_svfprintf_r+0x1f4>
    c300:	add.w	r9, sp, #192	; 0xc0
    c304:	b.n	c1ac <_svfprintf_r+0x8c>
    c306:	ldr	r3, [sp, #148]	; 0x94
    c308:	cbz	r3, c314 <_svfprintf_r+0x1f4>
    c30a:	ldr	r0, [sp, #24]
    c30c:	ldr	r1, [sp, #20]
    c30e:	add	r2, sp, #140	; 0x8c
    c310:	bl	f264 <__ssprint_r>
    c314:	ldr	r3, [sp, #20]
    c316:	ldrh	r3, [r3, #12]
    c318:	tst.w	r3, #64	; 0x40
    c31c:	ldr	r3, [sp, #28]
    c31e:	it	ne
    c320:	movne.w	r3, #4294967295
    c324:	mov	r0, r3
    c326:	add	sp, #260	; 0x104
    c328:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c32c:	str	r3, [sp, #52]	; 0x34
    c32e:	mov	fp, r5
    c330:	cmp	r2, #0
    c332:	bne.w	d79c <_svfprintf_r+0x167c>
    c336:	ldr	r2, [sp, #12]
    c338:	ands.w	r3, r2, #32
    c33c:	beq.w	c7cc <_svfprintf_r+0x6ac>
    c340:	ldr	r7, [sp, #40]	; 0x28
    c342:	adds	r7, #7
    c344:	bic.w	r3, r7, #7
    c348:	movs	r7, #0
    c34a:	add.w	r1, r3, #8
    c34e:	cmp	fp, r7
    c350:	str	r1, [sp, #40]	; 0x28
    c352:	ldrd	r4, r5, [r3]
    c356:	strb.w	r7, [sp, #111]	; 0x6f
    c35a:	blt.w	d222 <_svfprintf_r+0x1102>
    c35e:	bic.w	r3, r2, #128	; 0x80
    c362:	str	r3, [sp, #12]
    c364:	orrs.w	r3, r4, r5
    c368:	beq.w	ca74 <_svfprintf_r+0x954>
    c36c:	add	r6, sp, #192	; 0xc0
    c36e:	lsrs	r2, r4, #3
    c370:	orr.w	r2, r2, r5, lsl #29
    c374:	lsrs	r1, r5, #3
    c376:	and.w	r3, r4, #7
    c37a:	mov	r5, r1
    c37c:	mov	r4, r2
    c37e:	adds	r3, #48	; 0x30
    c380:	orrs.w	r2, r4, r5
    c384:	strb.w	r3, [r6, #-1]!
    c388:	bne.n	c36e <_svfprintf_r+0x24e>
    c38a:	ldr	r2, [sp, #12]
    c38c:	lsls	r1, r2, #31
    c38e:	bpl.w	c4b0 <_svfprintf_r+0x390>
    c392:	cmp	r3, #48	; 0x30
    c394:	beq.w	c4b0 <_svfprintf_r+0x390>
    c398:	movs	r2, #48	; 0x30
    c39a:	subs	r3, r6, #1
    c39c:	strb.w	r2, [r6, #-1]
    c3a0:	add	r2, sp, #192	; 0xc0
    c3a2:	subs	r2, r2, r3
    c3a4:	str	r2, [sp, #36]	; 0x24
    c3a6:	mov	r6, r3
    c3a8:	b.n	c4b6 <_svfprintf_r+0x396>
    c3aa:	ldrb.w	r3, [r8]
    c3ae:	cmp	r3, #42	; 0x2a
    c3b0:	add.w	r4, r8, #1
    c3b4:	beq.w	d780 <_svfprintf_r+0x1660>
    c3b8:	sub.w	r0, r3, #48	; 0x30
    c3bc:	cmp	r0, #9
    c3be:	it	ls
    c3c0:	movls	r5, #0
    c3c2:	bhi.w	d6d2 <_svfprintf_r+0x15b2>
    c3c6:	ldrb.w	r3, [r4], #1
    c3ca:	add.w	r5, r5, r5, lsl #2
    c3ce:	add.w	r5, r0, r5, lsl #1
    c3d2:	sub.w	r0, r3, #48	; 0x30
    c3d6:	cmp	r0, #9
    c3d8:	bls.n	c3c6 <_svfprintf_r+0x2a6>
    c3da:	orr.w	r5, r5, r5, asr #31
    c3de:	mov	r8, r4
    c3e0:	b.n	c1d8 <_svfprintf_r+0xb8>
    c3e2:	nop
    c3e4:	nop.w
	...
    c3f0:	.word	0x20000de4
    c3f4:	.word	0x20000e88
    c3f8:	ldr	r3, [sp, #12]
    c3fa:	orr.w	r3, r3, #128	; 0x80
    c3fe:	str	r3, [sp, #12]
    c400:	ldrb.w	r3, [r8]
    c404:	b.n	c1d4 <_svfprintf_r+0xb4>
    c406:	sub.w	r0, r3, #48	; 0x30
    c40a:	movs	r3, #0
    c40c:	mov	r4, r3
    c40e:	ldrb.w	r3, [r8], #1
    c412:	add.w	r4, r4, r4, lsl #2
    c416:	add.w	r4, r0, r4, lsl #1
    c41a:	sub.w	r0, r3, #48	; 0x30
    c41e:	cmp	r0, #9
    c420:	bls.n	c40e <_svfprintf_r+0x2ee>
    c422:	str	r4, [sp, #32]
    c424:	b.n	c1d8 <_svfprintf_r+0xb8>
    c426:	str	r3, [sp, #52]	; 0x34
    c428:	mov	fp, r5
    c42a:	cmp	r2, #0
    c42c:	bne.w	d7b8 <_svfprintf_r+0x1698>
    c430:	ldr	r3, [sp, #12]
    c432:	orr.w	r3, r3, #16
    c436:	str	r3, [sp, #12]
    c438:	ldr	r3, [sp, #12]
    c43a:	lsls	r4, r3, #26
    c43c:	bpl.w	ceae <_svfprintf_r+0xd8e>
    c440:	ldr	r7, [sp, #40]	; 0x28
    c442:	adds	r7, #7
    c444:	bic.w	r7, r7, #7
    c448:	ldrd	r2, r3, [r7]
    c44c:	add.w	r1, r7, #8
    c450:	str	r1, [sp, #40]	; 0x28
    c452:	mov	r4, r2
    c454:	mov	r5, r3
    c456:	cmp	r2, #0
    c458:	sbcs.w	r3, r3, #0
    c45c:	blt.w	cf24 <_svfprintf_r+0xe04>
    c460:	cmp.w	fp, #0
    c464:	ldrb.w	r7, [sp, #111]	; 0x6f
    c468:	blt.w	ceea <_svfprintf_r+0xdca>
    c46c:	ldr	r3, [sp, #12]
    c46e:	bic.w	r3, r3, #128	; 0x80
    c472:	str	r3, [sp, #12]
    c474:	orrs.w	r3, r4, r5
    c478:	beq.w	c84c <_svfprintf_r+0x72c>
    c47c:	cmp	r5, #0
    c47e:	it	eq
    c480:	cmpeq	r4, #10
    c482:	bcc.w	c856 <_svfprintf_r+0x736>
    c486:	add	r6, sp, #192	; 0xc0
    c488:	mov	r0, r4
    c48a:	mov	r1, r5
    c48c:	movs	r2, #10
    c48e:	movs	r3, #0
    c490:	bl	aff0 <__aeabi_uldivmod>
    c494:	adds	r2, #48	; 0x30
    c496:	strb.w	r2, [r6, #-1]!
    c49a:	mov	r0, r4
    c49c:	mov	r1, r5
    c49e:	movs	r3, #0
    c4a0:	movs	r2, #10
    c4a2:	bl	aff0 <__aeabi_uldivmod>
    c4a6:	mov	r4, r0
    c4a8:	mov	r5, r1
    c4aa:	orrs.w	r3, r4, r5
    c4ae:	bne.n	c488 <_svfprintf_r+0x368>
    c4b0:	add	r3, sp, #192	; 0xc0
    c4b2:	subs	r3, r3, r6
    c4b4:	str	r3, [sp, #36]	; 0x24
    c4b6:	ldr	r3, [sp, #36]	; 0x24
    c4b8:	cmp	r3, fp
    c4ba:	it	lt
    c4bc:	movlt	r3, fp
    c4be:	str	r3, [sp, #16]
    c4c0:	movs	r3, #0
    c4c2:	str	r3, [sp, #60]	; 0x3c
    c4c4:	cbz	r7, c4cc <_svfprintf_r+0x3ac>
    c4c6:	ldr	r3, [sp, #16]
    c4c8:	adds	r3, #1
    c4ca:	str	r3, [sp, #16]
    c4cc:	ldr	r3, [sp, #12]
    c4ce:	ands.w	r3, r3, #2
    c4d2:	str	r3, [sp, #44]	; 0x2c
    c4d4:	beq.n	c4dc <_svfprintf_r+0x3bc>
    c4d6:	ldr	r3, [sp, #16]
    c4d8:	adds	r3, #2
    c4da:	str	r3, [sp, #16]
    c4dc:	ldr	r3, [sp, #12]
    c4de:	ands.w	r3, r3, #132	; 0x84
    c4e2:	str	r3, [sp, #48]	; 0x30
    c4e4:	bne.w	ca9e <_svfprintf_r+0x97e>
    c4e8:	ldr	r3, [sp, #32]
    c4ea:	ldr	r2, [sp, #16]
    c4ec:	subs	r5, r3, r2
    c4ee:	cmp	r5, #0
    c4f0:	ble.w	ca9e <_svfprintf_r+0x97e>
    c4f4:	cmp	r5, #16
    c4f6:	ldr	r1, [sp, #148]	; 0x94
    c4f8:	ldr	r2, [sp, #144]	; 0x90
    c4fa:	ldr	r7, [pc, #672]	; (c79c <_svfprintf_r+0x67c>)
    c4fc:	ble.n	c54e <_svfprintf_r+0x42e>
    c4fe:	str	r6, [sp, #80]	; 0x50
    c500:	mov	r0, r9
    c502:	movs	r4, #16
    c504:	mov	r9, r7
    c506:	ldr	r6, [sp, #20]
    c508:	mov	r7, r5
    c50a:	ldr	r5, [sp, #24]
    c50c:	b.n	c518 <_svfprintf_r+0x3f8>
    c50e:	subs	r7, #16
    c510:	cmp	r7, #16
    c512:	add.w	r0, r0, #8
    c516:	ble.n	c546 <_svfprintf_r+0x426>
    c518:	adds	r2, #1
    c51a:	ldr	r3, [pc, #640]	; (c79c <_svfprintf_r+0x67c>)
    c51c:	str	r2, [sp, #144]	; 0x90
    c51e:	adds	r1, #16
    c520:	cmp	r2, #7
    c522:	str	r1, [sp, #148]	; 0x94
    c524:	stmia.w	r0, {r3, r4}
    c528:	ble.n	c50e <_svfprintf_r+0x3ee>
    c52a:	add	r2, sp, #140	; 0x8c
    c52c:	mov	r1, r6
    c52e:	mov	r0, r5
    c530:	bl	f264 <__ssprint_r>
    c534:	cmp	r0, #0
    c536:	bne.w	c314 <_svfprintf_r+0x1f4>
    c53a:	subs	r7, #16
    c53c:	cmp	r7, #16
    c53e:	ldr	r1, [sp, #148]	; 0x94
    c540:	ldr	r2, [sp, #144]	; 0x90
    c542:	add	r0, sp, #192	; 0xc0
    c544:	bgt.n	c518 <_svfprintf_r+0x3f8>
    c546:	ldr	r6, [sp, #80]	; 0x50
    c548:	mov	r5, r7
    c54a:	mov	r7, r9
    c54c:	mov	r9, r0
    c54e:	adds	r2, #1
    c550:	adds	r4, r5, r1
    c552:	cmp	r2, #7
    c554:	str	r4, [sp, #148]	; 0x94
    c556:	str	r2, [sp, #144]	; 0x90
    c558:	str.w	r7, [r9]
    c55c:	str.w	r5, [r9, #4]
    c560:	bgt.w	cdbe <_svfprintf_r+0xc9e>
    c564:	ldrb.w	r7, [sp, #111]	; 0x6f
    c568:	add.w	r9, r9, #8
    c56c:	cbz	r7, c58c <_svfprintf_r+0x46c>
    c56e:	ldr	r3, [sp, #144]	; 0x90
    c570:	adds	r3, #1
    c572:	adds	r4, #1
    c574:	add.w	r1, sp, #111	; 0x6f
    c578:	movs	r2, #1
    c57a:	cmp	r3, #7
    c57c:	str	r4, [sp, #148]	; 0x94
    c57e:	str	r3, [sp, #144]	; 0x90
    c580:	stmia.w	r9, {r1, r2}
    c584:	bgt.w	ccd2 <_svfprintf_r+0xbb2>
    c588:	add.w	r9, r9, #8
    c58c:	ldr	r3, [sp, #44]	; 0x2c
    c58e:	cbz	r3, c5ac <_svfprintf_r+0x48c>
    c590:	ldr	r3, [sp, #144]	; 0x90
    c592:	adds	r3, #1
    c594:	adds	r4, #2
    c596:	add	r1, sp, #112	; 0x70
    c598:	movs	r2, #2
    c59a:	cmp	r3, #7
    c59c:	str	r4, [sp, #148]	; 0x94
    c59e:	str	r3, [sp, #144]	; 0x90
    c5a0:	stmia.w	r9, {r1, r2}
    c5a4:	bgt.w	ccea <_svfprintf_r+0xbca>
    c5a8:	add.w	r9, r9, #8
    c5ac:	ldr	r3, [sp, #48]	; 0x30
    c5ae:	cmp	r3, #128	; 0x80
    c5b0:	beq.w	cb76 <_svfprintf_r+0xa56>
    c5b4:	ldr	r3, [sp, #36]	; 0x24
    c5b6:	rsb	r7, r3, fp
    c5ba:	cmp	r7, #0
    c5bc:	ble.n	c626 <_svfprintf_r+0x506>
    c5be:	ldr	r2, [pc, #480]	; (c7a0 <_svfprintf_r+0x680>)
    c5c0:	ldr	r3, [sp, #144]	; 0x90
    c5c2:	str	r2, [sp, #44]	; 0x2c
    c5c4:	cmp	r7, #16
    c5c6:	ble.n	c60e <_svfprintf_r+0x4ee>
    c5c8:	mov	r2, r4
    c5ca:	mov.w	fp, #16
    c5ce:	ldr	r5, [sp, #24]
    c5d0:	ldr	r4, [sp, #20]
    c5d2:	b.n	c5de <_svfprintf_r+0x4be>
    c5d4:	subs	r7, #16
    c5d6:	cmp	r7, #16
    c5d8:	add.w	r9, r9, #8
    c5dc:	ble.n	c60c <_svfprintf_r+0x4ec>
    c5de:	adds	r3, #1
    c5e0:	adds	r2, #16
    c5e2:	cmp	r3, #7
    c5e4:	str	r2, [sp, #148]	; 0x94
    c5e6:	str	r3, [sp, #144]	; 0x90
    c5e8:	stmia.w	r9, {sl, fp}
    c5ec:	ble.n	c5d4 <_svfprintf_r+0x4b4>
    c5ee:	add	r2, sp, #140	; 0x8c
    c5f0:	mov	r1, r4
    c5f2:	mov	r0, r5
    c5f4:	bl	f264 <__ssprint_r>
    c5f8:	cmp	r0, #0
    c5fa:	bne.w	c314 <_svfprintf_r+0x1f4>
    c5fe:	subs	r7, #16
    c600:	cmp	r7, #16
    c602:	ldr	r2, [sp, #148]	; 0x94
    c604:	ldr	r3, [sp, #144]	; 0x90
    c606:	add.w	r9, sp, #192	; 0xc0
    c60a:	bgt.n	c5de <_svfprintf_r+0x4be>
    c60c:	mov	r4, r2
    c60e:	adds	r3, #1
    c610:	ldr	r2, [sp, #44]	; 0x2c
    c612:	str	r3, [sp, #144]	; 0x90
    c614:	add	r4, r7
    c616:	cmp	r3, #7
    c618:	str	r4, [sp, #148]	; 0x94
    c61a:	stmia.w	r9, {r2, r7}
    c61e:	bgt.w	ccba <_svfprintf_r+0xb9a>
    c622:	add.w	r9, r9, #8
    c626:	ldr	r3, [sp, #12]
    c628:	lsls	r2, r3, #23
    c62a:	bmi.w	caa2 <_svfprintf_r+0x982>
    c62e:	ldr	r3, [sp, #144]	; 0x90
    c630:	ldr	r1, [sp, #36]	; 0x24
    c632:	str.w	r6, [r9]
    c636:	adds	r3, #1
    c638:	add	r4, r1
    c63a:	cmp	r3, #7
    c63c:	str	r4, [sp, #148]	; 0x94
    c63e:	str.w	r1, [r9, #4]
    c642:	str	r3, [sp, #144]	; 0x90
    c644:	bgt.w	cc8e <_svfprintf_r+0xb6e>
    c648:	add.w	r9, r9, #8
    c64c:	ldr	r3, [sp, #12]
    c64e:	lsls	r1, r3, #29
    c650:	bpl.n	c6d2 <_svfprintf_r+0x5b2>
    c652:	ldr	r3, [sp, #32]
    c654:	ldr	r2, [sp, #16]
    c656:	subs	r5, r3, r2
    c658:	cmp	r5, #0
    c65a:	ble.n	c6d2 <_svfprintf_r+0x5b2>
    c65c:	cmp	r5, #16
    c65e:	ldr	r3, [sp, #144]	; 0x90
    c660:	ldr	r7, [pc, #312]	; (c79c <_svfprintf_r+0x67c>)
    c662:	ble.n	c6ac <_svfprintf_r+0x58c>
    c664:	mov	r2, r4
    c666:	movs	r6, #16
    c668:	ldr.w	fp, [sp, #24]
    c66c:	ldr	r4, [sp, #20]
    c66e:	b.n	c67a <_svfprintf_r+0x55a>
    c670:	subs	r5, #16
    c672:	cmp	r5, #16
    c674:	add.w	r9, r9, #8
    c678:	ble.n	c6aa <_svfprintf_r+0x58a>
    c67a:	adds	r3, #1
    c67c:	ldr	r1, [pc, #284]	; (c79c <_svfprintf_r+0x67c>)
    c67e:	str	r3, [sp, #144]	; 0x90
    c680:	adds	r2, #16
    c682:	cmp	r3, #7
    c684:	str	r2, [sp, #148]	; 0x94
    c686:	stmia.w	r9, {r1, r6}
    c68a:	ble.n	c670 <_svfprintf_r+0x550>
    c68c:	add	r2, sp, #140	; 0x8c
    c68e:	mov	r1, r4
    c690:	mov	r0, fp
    c692:	bl	f264 <__ssprint_r>
    c696:	cmp	r0, #0
    c698:	bne.w	c314 <_svfprintf_r+0x1f4>
    c69c:	subs	r5, #16
    c69e:	cmp	r5, #16
    c6a0:	ldr	r2, [sp, #148]	; 0x94
    c6a2:	ldr	r3, [sp, #144]	; 0x90
    c6a4:	add.w	r9, sp, #192	; 0xc0
    c6a8:	bgt.n	c67a <_svfprintf_r+0x55a>
    c6aa:	mov	r4, r2
    c6ac:	adds	r3, #1
    c6ae:	add	r4, r5
    c6b0:	cmp	r3, #7
    c6b2:	str	r4, [sp, #148]	; 0x94
    c6b4:	str	r3, [sp, #144]	; 0x90
    c6b6:	str.w	r7, [r9]
    c6ba:	str.w	r5, [r9, #4]
    c6be:	ble.n	c6d2 <_svfprintf_r+0x5b2>
    c6c0:	add	r2, sp, #140	; 0x8c
    c6c2:	ldr	r1, [sp, #20]
    c6c4:	ldr	r0, [sp, #24]
    c6c6:	bl	f264 <__ssprint_r>
    c6ca:	cmp	r0, #0
    c6cc:	bne.w	c314 <_svfprintf_r+0x1f4>
    c6d0:	ldr	r4, [sp, #148]	; 0x94
    c6d2:	ldr	r3, [sp, #28]
    c6d4:	ldr	r2, [sp, #32]
    c6d6:	ldr	r1, [sp, #16]
    c6d8:	cmp	r2, r1
    c6da:	ite	ge
    c6dc:	addge	r3, r3, r2
    c6de:	addlt	r3, r3, r1
    c6e0:	str	r3, [sp, #28]
    c6e2:	cmp	r4, #0
    c6e4:	bne.w	cca6 <_svfprintf_r+0xb86>
    c6e8:	movs	r3, #0
    c6ea:	str	r3, [sp, #144]	; 0x90
    c6ec:	add.w	r9, sp, #192	; 0xc0
    c6f0:	b.n	c16e <_svfprintf_r+0x4e>
    c6f2:	str	r3, [sp, #52]	; 0x34
    c6f4:	mov	fp, r5
    c6f6:	cmp	r2, #0
    c6f8:	bne.w	d7c0 <_svfprintf_r+0x16a0>
    c6fc:	ldr	r3, [sp, #12]
    c6fe:	ldr	r7, [sp, #40]	; 0x28
    c700:	lsls	r2, r3, #28
    c702:	add.w	r7, r7, #7
    c706:	bpl.w	d1f2 <_svfprintf_r+0x10d2>
    c70a:	bic.w	r3, r7, #7
    c70e:	vldr	d7, [r3]
    c712:	vstr	d7, [sp, #64]	; 0x40
    c716:	add.w	r2, r3, #8
    c71a:	str	r2, [sp, #40]	; 0x28
    c71c:	ldrd	r1, r2, [sp, #64]	; 0x40
    c720:	bic.w	r3, r2, #2147483648	; 0x80000000
    c724:	str	r1, [sp, #88]	; 0x58
    c726:	str	r3, [sp, #92]	; 0x5c
    c728:	ldrd	r4, r5, [sp, #88]	; 0x58
    c72c:	mov.w	r2, #4294967295
    c730:	mov	r0, r4
    c732:	mov	r1, r5
    c734:	ldr	r3, [pc, #108]	; (c7a4 <_svfprintf_r+0x684>)
    c736:	bl	afc4 <__aeabi_dcmpun>
    c73a:	cmp	r0, #0
    c73c:	bne.w	d0f4 <_svfprintf_r+0xfd4>
    c740:	mov.w	r2, #4294967295
    c744:	ldr	r3, [pc, #92]	; (c7a4 <_svfprintf_r+0x684>)
    c746:	mov	r0, r4
    c748:	mov	r1, r5
    c74a:	bl	af88 <__aeabi_dcmple>
    c74e:	cmp	r0, #0
    c750:	bne.w	d0f4 <_svfprintf_r+0xfd4>
    c754:	movs	r2, #0
    c756:	movs	r3, #0
    c758:	ldrd	r0, r1, [sp, #64]	; 0x40
    c75c:	bl	af74 <__aeabi_dcmplt>
    c760:	cmp	r0, #0
    c762:	bne.w	d60a <_svfprintf_r+0x14ea>
    c766:	ldrb.w	r7, [sp, #111]	; 0x6f
    c76a:	ldr	r6, [pc, #60]	; (c7a8 <_svfprintf_r+0x688>)
    c76c:	ldr	r3, [pc, #60]	; (c7ac <_svfprintf_r+0x68c>)
    c76e:	ldr	r1, [sp, #12]
    c770:	bic.w	r1, r1, #128	; 0x80
    c774:	str	r1, [sp, #12]
    c776:	ldr	r1, [sp, #52]	; 0x34
    c778:	movs	r2, #3
    c77a:	mov.w	fp, #0
    c77e:	str	r2, [sp, #16]
    c780:	cmp	r1, #71	; 0x47
    c782:	it	le
    c784:	movle	r6, r3
    c786:	str	r2, [sp, #36]	; 0x24
    c788:	str.w	fp, [sp, #60]	; 0x3c
    c78c:	b.n	c4c4 <_svfprintf_r+0x3a4>
    c78e:	ldr	r3, [sp, #12]
    c790:	orr.w	r3, r3, #8
    c794:	str	r3, [sp, #12]
    c796:	ldrb.w	r3, [r8]
    c79a:	b.n	c1d4 <_svfprintf_r+0xb4>
    c79c:	.word	0x20000764
    c7a0:	.word	0x20000e88
    c7a4:	.word	0x7fefffff
    c7a8:	.word	0x20000dc4
    c7ac:	.word	0x20000dc0
    c7b0:	str	r3, [sp, #52]	; 0x34
    c7b2:	mov	fp, r5
    c7b4:	cmp	r2, #0
    c7b6:	bne.w	d7d8 <_svfprintf_r+0x16b8>
    c7ba:	ldr	r3, [sp, #12]
    c7bc:	orr.w	r3, r3, #16
    c7c0:	str	r3, [sp, #12]
    c7c2:	ldr	r2, [sp, #12]
    c7c4:	ands.w	r3, r2, #32
    c7c8:	bne.w	c340 <_svfprintf_r+0x220>
    c7cc:	ldr	r1, [sp, #12]
    c7ce:	ands.w	r2, r1, #16
    c7d2:	beq.w	d08c <_svfprintf_r+0xf6c>
    c7d6:	ldr	r0, [sp, #40]	; 0x28
    c7d8:	strb.w	r3, [sp, #111]	; 0x6f
    c7dc:	cmp.w	fp, #0
    c7e0:	ldr	r4, [r0, #0]
    c7e2:	add.w	r7, r0, #4
    c7e6:	mov.w	r5, #0
    c7ea:	blt.w	d220 <_svfprintf_r+0x1100>
    c7ee:	mov	r2, r1
    c7f0:	bic.w	r2, r2, #128	; 0x80
    c7f4:	str	r2, [sp, #12]
    c7f6:	orrs.w	r2, r4, r5
    c7fa:	str	r7, [sp, #40]	; 0x28
    c7fc:	beq.w	ca74 <_svfprintf_r+0x954>
    c800:	mov	r7, r3
    c802:	b.n	c36c <_svfprintf_r+0x24c>
    c804:	str	r3, [sp, #52]	; 0x34
    c806:	mov	fp, r5
    c808:	cmp	r2, #0
    c80a:	bne.w	d7d0 <_svfprintf_r+0x16b0>
    c80e:	ldr	r3, [sp, #12]
    c810:	orr.w	r3, r3, #16
    c814:	str	r3, [sp, #12]
    c816:	ldr	r2, [sp, #12]
    c818:	ands.w	r3, r2, #32
    c81c:	beq.w	ce78 <_svfprintf_r+0xd58>
    c820:	ldr	r7, [sp, #40]	; 0x28
    c822:	adds	r7, #7
    c824:	bic.w	r3, r7, #7
    c828:	movs	r7, #0
    c82a:	add.w	r1, r3, #8
    c82e:	cmp	fp, r7
    c830:	str	r1, [sp, #40]	; 0x28
    c832:	ldrd	r4, r5, [r3]
    c836:	strb.w	r7, [sp, #111]	; 0x6f
    c83a:	blt.w	ceea <_svfprintf_r+0xdca>
    c83e:	bic.w	r3, r2, #128	; 0x80
    c842:	str	r3, [sp, #12]
    c844:	orrs.w	r3, r4, r5
    c848:	bne.w	c47c <_svfprintf_r+0x35c>
    c84c:	cmp.w	fp, #0
    c850:	beq.w	ca3e <_svfprintf_r+0x91e>
    c854:	movs	r4, #0
    c856:	add	r6, sp, #256	; 0x100
    c858:	adds	r4, #48	; 0x30
    c85a:	strb.w	r4, [r6, #-65]!
    c85e:	b.n	c4b0 <_svfprintf_r+0x390>
    c860:	str	r3, [sp, #52]	; 0x34
    c862:	mov	fp, r5
    c864:	cmp	r2, #0
    c866:	bne.w	d7c8 <_svfprintf_r+0x16a8>
    c86a:	ldr	r3, [sp, #12]
    c86c:	ldr	r0, [pc, #700]	; (cb2c <_svfprintf_r+0xa0c>)
    c86e:	lsls	r5, r3, #26
    c870:	bpl.w	c9de <_svfprintf_r+0x8be>
    c874:	ldr	r7, [sp, #40]	; 0x28
    c876:	adds	r7, #7
    c878:	bic.w	r3, r7, #7
    c87c:	ldrd	r4, r5, [r3]
    c880:	add.w	r2, r3, #8
    c884:	str	r2, [sp, #40]	; 0x28
    c886:	ldr	r2, [sp, #12]
    c888:	ands.w	r7, r2, #1
    c88c:	beq.w	cd02 <_svfprintf_r+0xbe2>
    c890:	orrs.w	r3, r4, r5
    c894:	beq.w	d29c <_svfprintf_r+0x117c>
    c898:	ldrb.w	r2, [sp, #52]	; 0x34
    c89c:	strb.w	r2, [sp, #113]	; 0x71
    c8a0:	movs	r7, #0
    c8a2:	ldr	r2, [sp, #12]
    c8a4:	strb.w	r7, [sp, #111]	; 0x6f
    c8a8:	movs	r3, #48	; 0x30
    c8aa:	cmp	fp, r7
    c8ac:	strb.w	r3, [sp, #112]	; 0x70
    c8b0:	orr.w	r3, r2, #2
    c8b4:	blt.w	d614 <_svfprintf_r+0x14f4>
    c8b8:	bic.w	r3, r2, #128	; 0x80
    c8bc:	orr.w	r3, r3, #2
    c8c0:	str	r3, [sp, #12]
    c8c2:	add	r6, sp, #192	; 0xc0
    c8c4:	lsrs	r3, r4, #4
    c8c6:	and.w	r1, r4, #15
    c8ca:	orr.w	r3, r3, r5, lsl #28
    c8ce:	lsrs	r2, r5, #4
    c8d0:	mov	r4, r3
    c8d2:	mov	r5, r2
    c8d4:	ldrb	r3, [r0, r1]
    c8d6:	strb.w	r3, [r6, #-1]!
    c8da:	orrs.w	r3, r4, r5
    c8de:	bne.n	c8c4 <_svfprintf_r+0x7a4>
    c8e0:	b.n	c4b0 <_svfprintf_r+0x390>
    c8e2:	ldr	r1, [sp, #40]	; 0x28
    c8e4:	str	r3, [sp, #52]	; 0x34
    c8e6:	ldr	r2, [r1, #0]
    c8e8:	strb.w	r2, [sp, #152]	; 0x98
    c8ec:	movs	r3, #0
    c8ee:	mov	r2, r1
    c8f0:	mov	r7, r3
    c8f2:	strb.w	r3, [sp, #111]	; 0x6f
    c8f6:	adds	r2, #4
    c8f8:	movs	r3, #1
    c8fa:	str	r3, [sp, #16]
    c8fc:	mov	fp, r7
    c8fe:	str	r7, [sp, #60]	; 0x3c
    c900:	str	r2, [sp, #40]	; 0x28
    c902:	str	r3, [sp, #36]	; 0x24
    c904:	add	r6, sp, #152	; 0x98
    c906:	b.n	c4cc <_svfprintf_r+0x3ac>
    c908:	str	r3, [sp, #52]	; 0x34
    c90a:	mov	fp, r5
    c90c:	cmp	r2, #0
    c90e:	beq.w	c438 <_svfprintf_r+0x318>
    c912:	strb.w	r1, [sp, #111]	; 0x6f
    c916:	b.n	c438 <_svfprintf_r+0x318>
    c918:	ldr	r3, [sp, #12]
    c91a:	orr.w	r3, r3, #64	; 0x40
    c91e:	str	r3, [sp, #12]
    c920:	ldrb.w	r3, [r8]
    c924:	b.n	c1d4 <_svfprintf_r+0xb4>
    c926:	ldrb.w	r3, [r8]
    c92a:	cmp	r1, #0
    c92c:	bne.w	c1d4 <_svfprintf_r+0xb4>
    c930:	movs	r2, #1
    c932:	movs	r1, #32
    c934:	b.n	c1d4 <_svfprintf_r+0xb4>
    c936:	ldr	r3, [sp, #12]
    c938:	orr.w	r3, r3, #1
    c93c:	str	r3, [sp, #12]
    c93e:	ldrb.w	r3, [r8]
    c942:	b.n	c1d4 <_svfprintf_r+0xb4>
    c944:	ldr	r4, [sp, #40]	; 0x28
    c946:	ldr	r3, [r4, #0]
    c948:	str	r3, [sp, #32]
    c94a:	mov	r0, r3
    c94c:	cmp	r0, #0
    c94e:	mov	r3, r4
    c950:	add.w	r3, r3, #4
    c954:	blt.w	c298 <_svfprintf_r+0x178>
    c958:	str	r3, [sp, #40]	; 0x28
    c95a:	ldrb.w	r3, [r8]
    c95e:	b.n	c1d4 <_svfprintf_r+0xb4>
    c960:	ldrb.w	r3, [r8]
    c964:	movs	r2, #1
    c966:	movs	r1, #43	; 0x2b
    c968:	b.n	c1d4 <_svfprintf_r+0xb4>
    c96a:	ldr	r3, [sp, #12]
    c96c:	orr.w	r3, r3, #32
    c970:	str	r3, [sp, #12]
    c972:	ldrb.w	r3, [r8]
    c976:	b.n	c1d4 <_svfprintf_r+0xb4>
    c978:	ldr	r2, [sp, #40]	; 0x28
    c97a:	str	r3, [sp, #52]	; 0x34
    c97c:	ldr	r6, [r2, #0]
    c97e:	movs	r4, #0
    c980:	strb.w	r4, [sp, #111]	; 0x6f
    c984:	adds	r7, r2, #4
    c986:	cmp	r6, #0
    c988:	beq.w	d5c4 <_svfprintf_r+0x14a4>
    c98c:	cmp	r5, #0
    c98e:	blt.w	d454 <_svfprintf_r+0x1334>
    c992:	mov	r2, r5
    c994:	mov	r1, r4
    c996:	mov	r0, r6
    c998:	bl	eba0 <memchr>
    c99c:	cmp	r0, #0
    c99e:	beq.w	d668 <_svfprintf_r+0x1548>
    c9a2:	subs	r3, r0, r6
    c9a4:	str	r3, [sp, #36]	; 0x24
    c9a6:	mov	fp, r4
    c9a8:	bic.w	r3, r3, r3, asr #31
    c9ac:	str	r7, [sp, #40]	; 0x28
    c9ae:	str	r3, [sp, #16]
    c9b0:	str.w	fp, [sp, #60]	; 0x3c
    c9b4:	ldrb.w	r7, [sp, #111]	; 0x6f
    c9b8:	b.n	c4c4 <_svfprintf_r+0x3a4>
    c9ba:	str	r3, [sp, #52]	; 0x34
    c9bc:	mov	fp, r5
    c9be:	cmp	r2, #0
    c9c0:	beq.w	c816 <_svfprintf_r+0x6f6>
    c9c4:	strb.w	r1, [sp, #111]	; 0x6f
    c9c8:	b.n	c816 <_svfprintf_r+0x6f6>
    c9ca:	str	r3, [sp, #52]	; 0x34
    c9cc:	mov	fp, r5
    c9ce:	cmp	r2, #0
    c9d0:	bne.w	d7f0 <_svfprintf_r+0x16d0>
    c9d4:	ldr	r3, [sp, #12]
    c9d6:	ldr	r0, [pc, #344]	; (cb30 <_svfprintf_r+0xa10>)
    c9d8:	lsls	r5, r3, #26
    c9da:	bmi.w	c874 <_svfprintf_r+0x754>
    c9de:	ldr	r3, [sp, #12]
    c9e0:	lsls	r4, r3, #27
    c9e2:	bpl.w	d262 <_svfprintf_r+0x1142>
    c9e6:	ldr	r2, [sp, #40]	; 0x28
    c9e8:	mov	r3, r2
    c9ea:	adds	r3, #4
    c9ec:	ldr	r4, [r2, #0]
    c9ee:	str	r3, [sp, #40]	; 0x28
    c9f0:	movs	r5, #0
    c9f2:	b.n	c886 <_svfprintf_r+0x766>
    c9f4:	ldrb.w	r3, [r8]
    c9f8:	cmp	r3, #108	; 0x6c
    c9fa:	beq.w	d382 <_svfprintf_r+0x1262>
    c9fe:	ldr	r0, [sp, #12]
    ca00:	orr.w	r0, r0, #16
    ca04:	str	r0, [sp, #12]
    ca06:	b.w	c1d4 <_svfprintf_r+0xb4>
    ca0a:	cmp	r2, #0
    ca0c:	bne.w	d7e8 <_svfprintf_r+0x16c8>
    ca10:	ldr	r3, [sp, #12]
    ca12:	lsls	r3, r3, #26
    ca14:	bpl.w	d0c6 <_svfprintf_r+0xfa6>
    ca18:	ldr	r2, [sp, #40]	; 0x28
    ca1a:	ldr	r1, [sp, #28]
    ca1c:	ldr	r3, [r2, #0]
    ca1e:	asrs	r5, r1, #31
    ca20:	mov	r0, r1
    ca22:	adds	r2, #4
    ca24:	mov	r1, r5
    ca26:	str	r2, [sp, #40]	; 0x28
    ca28:	strd	r0, r1, [r3]
    ca2c:	b.w	c16e <_svfprintf_r+0x4e>
    ca30:	ldr	r0, [pc, #252]	; (cb30 <_svfprintf_r+0xa10>)
    ca32:	str	r2, [sp, #52]	; 0x34
    ca34:	cmp.w	fp, #0
    ca38:	bne.w	cd24 <_svfprintf_r+0xc04>
    ca3c:	mov	r7, fp
    ca3e:	mov.w	fp, #0
    ca42:	str.w	fp, [sp, #36]	; 0x24
    ca46:	add	r6, sp, #192	; 0xc0
    ca48:	b.n	c4b6 <_svfprintf_r+0x396>
    ca4a:	str	r3, [sp, #52]	; 0x34
    ca4c:	cmp	r2, #0
    ca4e:	bne.w	d7e0 <_svfprintf_r+0x16c0>
    ca52:	ldr	r2, [sp, #52]	; 0x34
    ca54:	cmp	r2, #0
    ca56:	beq.w	c306 <_svfprintf_r+0x1e6>
    ca5a:	movs	r3, #0
    ca5c:	movs	r1, #1
    ca5e:	mov	r7, r3
    ca60:	str	r1, [sp, #16]
    ca62:	strb.w	r2, [sp, #152]	; 0x98
    ca66:	strb.w	r3, [sp, #111]	; 0x6f
    ca6a:	mov	fp, r3
    ca6c:	str	r3, [sp, #60]	; 0x3c
    ca6e:	str	r1, [sp, #36]	; 0x24
    ca70:	add	r6, sp, #152	; 0x98
    ca72:	b.n	c4cc <_svfprintf_r+0x3ac>
    ca74:	cmp.w	fp, #0
    ca78:	beq.w	d698 <_svfprintf_r+0x1578>
    ca7c:	movs	r7, #0
    ca7e:	movs	r4, #0
    ca80:	movs	r5, #0
    ca82:	b.n	c36c <_svfprintf_r+0x24c>
    ca84:	ldr	r0, [pc, #168]	; (cb30 <_svfprintf_r+0xa10>)
    ca86:	str	r3, [sp, #12]
    ca88:	str	r2, [sp, #52]	; 0x34
    ca8a:	orrs.w	r3, r4, r5
    ca8e:	str	r7, [sp, #40]	; 0x28
    ca90:	mov.w	r7, #0
    ca94:	bne.w	c8c2 <_svfprintf_r+0x7a2>
    ca98:	movs	r4, #0
    ca9a:	movs	r5, #0
    ca9c:	b.n	c8c2 <_svfprintf_r+0x7a2>
    ca9e:	ldr	r4, [sp, #148]	; 0x94
    caa0:	b.n	c56c <_svfprintf_r+0x44c>
    caa2:	ldr	r3, [sp, #52]	; 0x34
    caa4:	cmp	r3, #101	; 0x65
    caa6:	ble.w	cbfe <_svfprintf_r+0xade>
    caaa:	movs	r2, #0
    caac:	movs	r3, #0
    caae:	ldrd	r0, r1, [sp, #64]	; 0x40
    cab2:	bl	af60 <__aeabi_dcmpeq>
    cab6:	cmp	r0, #0
    cab8:	beq.w	cd28 <_svfprintf_r+0xc08>
    cabc:	ldr	r3, [sp, #144]	; 0x90
    cabe:	ldr	r2, [pc, #116]	; (cb34 <_svfprintf_r+0xa14>)
    cac0:	str.w	r2, [r9]
    cac4:	adds	r3, #1
    cac6:	adds	r4, #1
    cac8:	movs	r2, #1
    caca:	cmp	r3, #7
    cacc:	str	r4, [sp, #148]	; 0x94
    cace:	str	r3, [sp, #144]	; 0x90
    cad0:	str.w	r2, [r9, #4]
    cad4:	bgt.w	d2b4 <_svfprintf_r+0x1194>
    cad8:	add.w	r9, r9, #8
    cadc:	ldr	r3, [sp, #116]	; 0x74
    cade:	ldr	r2, [sp, #56]	; 0x38
    cae0:	cmp	r3, r2
    cae2:	blt.n	caec <_svfprintf_r+0x9cc>
    cae4:	ldr	r3, [sp, #12]
    cae6:	lsls	r3, r3, #31
    cae8:	bpl.w	c64c <_svfprintf_r+0x52c>
    caec:	ldr	r3, [sp, #144]	; 0x90
    caee:	ldr	r1, [sp, #72]	; 0x48
    caf0:	ldr	r2, [sp, #76]	; 0x4c
    caf2:	str.w	r2, [r9]
    caf6:	adds	r3, #1
    caf8:	add	r4, r1
    cafa:	cmp	r3, #7
    cafc:	str	r4, [sp, #148]	; 0x94
    cafe:	str.w	r1, [r9, #4]
    cb02:	str	r3, [sp, #144]	; 0x90
    cb04:	bgt.w	d396 <_svfprintf_r+0x1276>
    cb08:	add.w	r9, r9, #8
    cb0c:	ldr	r3, [sp, #56]	; 0x38
    cb0e:	subs	r5, r3, #1
    cb10:	cmp	r5, #0
    cb12:	ble.w	c64c <_svfprintf_r+0x52c>
    cb16:	ldr	r2, [pc, #32]	; (cb38 <_svfprintf_r+0xa18>)
    cb18:	ldr	r3, [sp, #144]	; 0x90
    cb1a:	str	r2, [sp, #44]	; 0x2c
    cb1c:	cmp	r5, #16
    cb1e:	ble.w	cef4 <_svfprintf_r+0xdd4>
    cb22:	movs	r6, #16
    cb24:	ldr	r7, [sp, #24]
    cb26:	ldr.w	fp, [sp, #20]
    cb2a:	b.n	cb48 <_svfprintf_r+0xa28>
    cb2c:	.word	0x20000dd0
    cb30:	.word	0x20000de4
    cb34:	.word	0x20000dac
    cb38:	.word	0x20000e88
    cb3c:	add.w	r9, r9, #8
    cb40:	subs	r5, #16
    cb42:	cmp	r5, #16
    cb44:	ble.w	cef4 <_svfprintf_r+0xdd4>
    cb48:	adds	r3, #1
    cb4a:	adds	r4, #16
    cb4c:	cmp	r3, #7
    cb4e:	str	r4, [sp, #148]	; 0x94
    cb50:	str	r3, [sp, #144]	; 0x90
    cb52:	str.w	sl, [r9]
    cb56:	str.w	r6, [r9, #4]
    cb5a:	ble.n	cb3c <_svfprintf_r+0xa1c>
    cb5c:	add	r2, sp, #140	; 0x8c
    cb5e:	mov	r1, fp
    cb60:	mov	r0, r7
    cb62:	bl	f264 <__ssprint_r>
    cb66:	cmp	r0, #0
    cb68:	bne.w	c314 <_svfprintf_r+0x1f4>
    cb6c:	ldr	r4, [sp, #148]	; 0x94
    cb6e:	ldr	r3, [sp, #144]	; 0x90
    cb70:	add.w	r9, sp, #192	; 0xc0
    cb74:	b.n	cb40 <_svfprintf_r+0xa20>
    cb76:	ldr	r3, [sp, #32]
    cb78:	ldr	r2, [sp, #16]
    cb7a:	subs	r7, r3, r2
    cb7c:	cmp	r7, #0
    cb7e:	ble.w	c5b4 <_svfprintf_r+0x494>
    cb82:	ldr	r2, [pc, #752]	; (ce74 <_svfprintf_r+0xd54>)
    cb84:	ldr	r3, [sp, #144]	; 0x90
    cb86:	str	r2, [sp, #44]	; 0x2c
    cb88:	cmp	r7, #16
    cb8a:	ble.n	cbe4 <_svfprintf_r+0xac4>
    cb8c:	mov	r2, r9
    cb8e:	mov	r1, r4
    cb90:	mov	r9, r7
    cb92:	movs	r5, #16
    cb94:	mov	r7, r6
    cb96:	ldr	r4, [sp, #24]
    cb98:	ldr	r6, [sp, #20]
    cb9a:	b.n	cbaa <_svfprintf_r+0xa8a>
    cb9c:	sub.w	r9, r9, #16
    cba0:	cmp.w	r9, #16
    cba4:	add.w	r2, r2, #8
    cba8:	ble.n	cbdc <_svfprintf_r+0xabc>
    cbaa:	adds	r3, #1
    cbac:	adds	r1, #16
    cbae:	cmp	r3, #7
    cbb0:	str	r1, [sp, #148]	; 0x94
    cbb2:	str	r3, [sp, #144]	; 0x90
    cbb4:	str.w	sl, [r2]
    cbb8:	str	r5, [r2, #4]
    cbba:	ble.n	cb9c <_svfprintf_r+0xa7c>
    cbbc:	add	r2, sp, #140	; 0x8c
    cbbe:	mov	r1, r6
    cbc0:	mov	r0, r4
    cbc2:	bl	f264 <__ssprint_r>
    cbc6:	cmp	r0, #0
    cbc8:	bne.w	c314 <_svfprintf_r+0x1f4>
    cbcc:	sub.w	r9, r9, #16
    cbd0:	cmp.w	r9, #16
    cbd4:	ldr	r1, [sp, #148]	; 0x94
    cbd6:	ldr	r3, [sp, #144]	; 0x90
    cbd8:	add	r2, sp, #192	; 0xc0
    cbda:	bgt.n	cbaa <_svfprintf_r+0xa8a>
    cbdc:	mov	r6, r7
    cbde:	mov	r4, r1
    cbe0:	mov	r7, r9
    cbe2:	mov	r9, r2
    cbe4:	adds	r3, #1
    cbe6:	ldr	r2, [sp, #44]	; 0x2c
    cbe8:	str	r3, [sp, #144]	; 0x90
    cbea:	add	r4, r7
    cbec:	cmp	r3, #7
    cbee:	str	r4, [sp, #148]	; 0x94
    cbf0:	stmia.w	r9, {r2, r7}
    cbf4:	bgt.w	d072 <_svfprintf_r+0xf52>
    cbf8:	add.w	r9, r9, #8
    cbfc:	b.n	c5b4 <_svfprintf_r+0x494>
    cbfe:	ldr	r3, [sp, #56]	; 0x38
    cc00:	ldr	r5, [sp, #144]	; 0x90
    cc02:	cmp	r3, #1
    cc04:	ble.w	d01c <_svfprintf_r+0xefc>
    cc08:	adds	r5, #1
    cc0a:	adds	r4, #1
    cc0c:	movs	r3, #1
    cc0e:	cmp	r5, #7
    cc10:	str	r4, [sp, #148]	; 0x94
    cc12:	str	r5, [sp, #144]	; 0x90
    cc14:	str.w	r6, [r9]
    cc18:	str.w	r3, [r9, #4]
    cc1c:	bgt.w	d03e <_svfprintf_r+0xf1e>
    cc20:	add.w	r9, r9, #8
    cc24:	ldr	r2, [sp, #72]	; 0x48
    cc26:	ldr	r3, [sp, #76]	; 0x4c
    cc28:	str.w	r3, [r9]
    cc2c:	adds	r5, #1
    cc2e:	add	r4, r2
    cc30:	cmp	r5, #7
    cc32:	str	r4, [sp, #148]	; 0x94
    cc34:	str	r5, [sp, #144]	; 0x90
    cc36:	str.w	r2, [r9, #4]
    cc3a:	bgt.w	d058 <_svfprintf_r+0xf38>
    cc3e:	add.w	r9, r9, #8
    cc42:	movs	r3, #0
    cc44:	movs	r2, #0
    cc46:	ldrd	r0, r1, [sp, #64]	; 0x40
    cc4a:	bl	af60 <__aeabi_dcmpeq>
    cc4e:	ldr	r3, [sp, #56]	; 0x38
    cc50:	cmp	r0, #0
    cc52:	bne.w	cddc <_svfprintf_r+0xcbc>
    cc56:	subs	r3, #1
    cc58:	adds	r5, #1
    cc5a:	adds	r6, #1
    cc5c:	add	r4, r3
    cc5e:	cmp	r5, #7
    cc60:	str	r5, [sp, #144]	; 0x90
    cc62:	str	r4, [sp, #148]	; 0x94
    cc64:	str.w	r6, [r9]
    cc68:	str.w	r3, [r9, #4]
    cc6c:	bgt.w	ce5a <_svfprintf_r+0xd3a>
    cc70:	add.w	r9, r9, #8
    cc74:	ldr	r2, [sp, #84]	; 0x54
    cc76:	str.w	r2, [r9, #4]
    cc7a:	adds	r5, #1
    cc7c:	add	r4, r2
    cc7e:	add	r3, sp, #124	; 0x7c
    cc80:	cmp	r5, #7
    cc82:	str	r4, [sp, #148]	; 0x94
    cc84:	str	r5, [sp, #144]	; 0x90
    cc86:	str.w	r3, [r9]
    cc8a:	ble.w	c648 <_svfprintf_r+0x528>
    cc8e:	add	r2, sp, #140	; 0x8c
    cc90:	ldr	r1, [sp, #20]
    cc92:	ldr	r0, [sp, #24]
    cc94:	bl	f264 <__ssprint_r>
    cc98:	cmp	r0, #0
    cc9a:	bne.w	c314 <_svfprintf_r+0x1f4>
    cc9e:	ldr	r4, [sp, #148]	; 0x94
    cca0:	add.w	r9, sp, #192	; 0xc0
    cca4:	b.n	c64c <_svfprintf_r+0x52c>
    cca6:	add	r2, sp, #140	; 0x8c
    cca8:	ldr	r1, [sp, #20]
    ccaa:	ldr	r0, [sp, #24]
    ccac:	bl	f264 <__ssprint_r>
    ccb0:	cmp	r0, #0
    ccb2:	beq.w	c6e8 <_svfprintf_r+0x5c8>
    ccb6:	b.w	c314 <_svfprintf_r+0x1f4>
    ccba:	add	r2, sp, #140	; 0x8c
    ccbc:	ldr	r1, [sp, #20]
    ccbe:	ldr	r0, [sp, #24]
    ccc0:	bl	f264 <__ssprint_r>
    ccc4:	cmp	r0, #0
    ccc6:	bne.w	c314 <_svfprintf_r+0x1f4>
    ccca:	ldr	r4, [sp, #148]	; 0x94
    cccc:	add.w	r9, sp, #192	; 0xc0
    ccd0:	b.n	c626 <_svfprintf_r+0x506>
    ccd2:	add	r2, sp, #140	; 0x8c
    ccd4:	ldr	r1, [sp, #20]
    ccd6:	ldr	r0, [sp, #24]
    ccd8:	bl	f264 <__ssprint_r>
    ccdc:	cmp	r0, #0
    ccde:	bne.w	c314 <_svfprintf_r+0x1f4>
    cce2:	ldr	r4, [sp, #148]	; 0x94
    cce4:	add.w	r9, sp, #192	; 0xc0
    cce8:	b.n	c58c <_svfprintf_r+0x46c>
    ccea:	add	r2, sp, #140	; 0x8c
    ccec:	ldr	r1, [sp, #20]
    ccee:	ldr	r0, [sp, #24]
    ccf0:	bl	f264 <__ssprint_r>
    ccf4:	cmp	r0, #0
    ccf6:	bne.w	c314 <_svfprintf_r+0x1f4>
    ccfa:	ldr	r4, [sp, #148]	; 0x94
    ccfc:	add.w	r9, sp, #192	; 0xc0
    cd00:	b.n	c5ac <_svfprintf_r+0x48c>
    cd02:	cmp.w	fp, #0
    cd06:	strb.w	r7, [sp, #111]	; 0x6f
    cd0a:	blt.w	d2cc <_svfprintf_r+0x11ac>
    cd0e:	bic.w	r3, r2, #128	; 0x80
    cd12:	str	r3, [sp, #12]
    cd14:	orrs.w	r3, r4, r5
    cd18:	bne.w	c8c2 <_svfprintf_r+0x7a2>
    cd1c:	cmp.w	fp, #0
    cd20:	beq.w	ca3c <_svfprintf_r+0x91c>
    cd24:	movs	r7, #0
    cd26:	b.n	ca98 <_svfprintf_r+0x978>
    cd28:	ldr	r5, [sp, #116]	; 0x74
    cd2a:	cmp	r5, #0
    cd2c:	ble.w	d2d2 <_svfprintf_r+0x11b2>
    cd30:	ldr	r3, [sp, #60]	; 0x3c
    cd32:	ldr	r2, [sp, #56]	; 0x38
    cd34:	cmp	r3, r2
    cd36:	it	ge
    cd38:	movge	r3, r2
    cd3a:	cmp	r3, #0
    cd3c:	mov	r5, r3
    cd3e:	ble.n	cd5c <_svfprintf_r+0xc3c>
    cd40:	ldr	r3, [sp, #144]	; 0x90
    cd42:	str.w	r6, [r9]
    cd46:	adds	r3, #1
    cd48:	add	r4, r5
    cd4a:	cmp	r3, #7
    cd4c:	str	r4, [sp, #148]	; 0x94
    cd4e:	str.w	r5, [r9, #4]
    cd52:	str	r3, [sp, #144]	; 0x90
    cd54:	bgt.w	d4aa <_svfprintf_r+0x138a>
    cd58:	add.w	r9, r9, #8
    cd5c:	ldr	r3, [sp, #60]	; 0x3c
    cd5e:	cmp	r5, #0
    cd60:	it	ge
    cd62:	subge	r3, r3, r5
    cd64:	cmp	r3, #0
    cd66:	mov	r5, r3
    cd68:	ble.w	cf5c <_svfprintf_r+0xe3c>
    cd6c:	ldr	r2, [pc, #260]	; (ce74 <_svfprintf_r+0xd54>)
    cd6e:	ldr	r3, [sp, #144]	; 0x90
    cd70:	str	r2, [sp, #44]	; 0x2c
    cd72:	cmp	r5, #16
    cd74:	ble.w	d27e <_svfprintf_r+0x115e>
    cd78:	mov	r2, r4
    cd7a:	movs	r7, #16
    cd7c:	ldr.w	fp, [sp, #24]
    cd80:	ldr	r4, [sp, #20]
    cd82:	b.n	cd90 <_svfprintf_r+0xc70>
    cd84:	add.w	r9, r9, #8
    cd88:	subs	r5, #16
    cd8a:	cmp	r5, #16
    cd8c:	ble.w	d27c <_svfprintf_r+0x115c>
    cd90:	adds	r3, #1
    cd92:	adds	r2, #16
    cd94:	cmp	r3, #7
    cd96:	str	r2, [sp, #148]	; 0x94
    cd98:	str	r3, [sp, #144]	; 0x90
    cd9a:	str.w	sl, [r9]
    cd9e:	str.w	r7, [r9, #4]
    cda2:	ble.n	cd84 <_svfprintf_r+0xc64>
    cda4:	add	r2, sp, #140	; 0x8c
    cda6:	mov	r1, r4
    cda8:	mov	r0, fp
    cdaa:	bl	f264 <__ssprint_r>
    cdae:	cmp	r0, #0
    cdb0:	bne.w	c314 <_svfprintf_r+0x1f4>
    cdb4:	ldr	r2, [sp, #148]	; 0x94
    cdb6:	ldr	r3, [sp, #144]	; 0x90
    cdb8:	add.w	r9, sp, #192	; 0xc0
    cdbc:	b.n	cd88 <_svfprintf_r+0xc68>
    cdbe:	add	r2, sp, #140	; 0x8c
    cdc0:	ldr	r1, [sp, #20]
    cdc2:	ldr	r0, [sp, #24]
    cdc4:	bl	f264 <__ssprint_r>
    cdc8:	cmp	r0, #0
    cdca:	bne.w	c314 <_svfprintf_r+0x1f4>
    cdce:	ldrb.w	r7, [sp, #111]	; 0x6f
    cdd2:	ldr	r4, [sp, #148]	; 0x94
    cdd4:	add.w	r9, sp, #192	; 0xc0
    cdd8:	b.w	c56c <_svfprintf_r+0x44c>
    cddc:	subs	r6, r3, #1
    cdde:	cmp	r6, #0
    cde0:	ble.w	cc74 <_svfprintf_r+0xb54>
    cde4:	ldr	r3, [pc, #140]	; (ce74 <_svfprintf_r+0xd54>)
    cde6:	str	r3, [sp, #44]	; 0x2c
    cde8:	cmp	r6, #16
    cdea:	ble.n	ce46 <_svfprintf_r+0xd26>
    cdec:	str.w	r8, [sp, #36]	; 0x24
    cdf0:	movs	r7, #16
    cdf2:	mov	r8, r6
    cdf4:	ldr.w	fp, [sp, #24]
    cdf8:	ldr	r6, [sp, #20]
    cdfa:	b.n	ce0a <_svfprintf_r+0xcea>
    cdfc:	sub.w	r8, r8, #16
    ce00:	cmp.w	r8, #16
    ce04:	add.w	r9, r9, #8
    ce08:	ble.n	ce40 <_svfprintf_r+0xd20>
    ce0a:	adds	r5, #1
    ce0c:	adds	r4, #16
    ce0e:	cmp	r5, #7
    ce10:	str	r4, [sp, #148]	; 0x94
    ce12:	str	r5, [sp, #144]	; 0x90
    ce14:	str.w	sl, [r9]
    ce18:	str.w	r7, [r9, #4]
    ce1c:	ble.n	cdfc <_svfprintf_r+0xcdc>
    ce1e:	add	r2, sp, #140	; 0x8c
    ce20:	mov	r1, r6
    ce22:	mov	r0, fp
    ce24:	bl	f264 <__ssprint_r>
    ce28:	cmp	r0, #0
    ce2a:	bne.w	c314 <_svfprintf_r+0x1f4>
    ce2e:	sub.w	r8, r8, #16
    ce32:	cmp.w	r8, #16
    ce36:	ldr	r4, [sp, #148]	; 0x94
    ce38:	ldr	r5, [sp, #144]	; 0x90
    ce3a:	add.w	r9, sp, #192	; 0xc0
    ce3e:	bgt.n	ce0a <_svfprintf_r+0xcea>
    ce40:	mov	r6, r8
    ce42:	ldr.w	r8, [sp, #36]	; 0x24
    ce46:	ldr	r3, [sp, #44]	; 0x2c
    ce48:	adds	r5, #1
    ce4a:	add	r4, r6
    ce4c:	cmp	r5, #7
    ce4e:	str	r4, [sp, #148]	; 0x94
    ce50:	str	r5, [sp, #144]	; 0x90
    ce52:	stmia.w	r9, {r3, r6}
    ce56:	ble.w	cc70 <_svfprintf_r+0xb50>
    ce5a:	add	r2, sp, #140	; 0x8c
    ce5c:	ldr	r1, [sp, #20]
    ce5e:	ldr	r0, [sp, #24]
    ce60:	bl	f264 <__ssprint_r>
    ce64:	cmp	r0, #0
    ce66:	bne.w	c314 <_svfprintf_r+0x1f4>
    ce6a:	ldr	r4, [sp, #148]	; 0x94
    ce6c:	ldr	r5, [sp, #144]	; 0x90
    ce6e:	add.w	r9, sp, #192	; 0xc0
    ce72:	b.n	cc74 <_svfprintf_r+0xb54>
    ce74:	.word	0x20000e88
    ce78:	ldr	r1, [sp, #12]
    ce7a:	ands.w	r2, r1, #16
    ce7e:	beq.w	d228 <_svfprintf_r+0x1108>
    ce82:	ldr	r0, [sp, #40]	; 0x28
    ce84:	strb.w	r3, [sp, #111]	; 0x6f
    ce88:	cmp.w	fp, #0
    ce8c:	ldr	r4, [r0, #0]
    ce8e:	add.w	r7, r0, #4
    ce92:	mov.w	r5, #0
    ce96:	blt.n	cee6 <_svfprintf_r+0xdc6>
    ce98:	mov	r2, r1
    ce9a:	bic.w	r2, r2, #128	; 0x80
    ce9e:	str	r2, [sp, #12]
    cea0:	orrs.w	r2, r4, r5
    cea4:	str	r7, [sp, #40]	; 0x28
    cea6:	mov	r7, r3
    cea8:	bne.w	c47c <_svfprintf_r+0x35c>
    ceac:	b.n	c84c <_svfprintf_r+0x72c>
    ceae:	ldr	r3, [sp, #12]
    ceb0:	lsls	r0, r3, #27
    ceb2:	bmi.n	cf0a <_svfprintf_r+0xdea>
    ceb4:	ldr	r3, [sp, #12]
    ceb6:	lsls	r1, r3, #25
    ceb8:	bpl.n	cf0a <_svfprintf_r+0xdea>
    ceba:	ldr	r1, [sp, #40]	; 0x28
    cebc:	ldrsh.w	r4, [r1]
    cec0:	adds	r1, #4
    cec2:	asrs	r5, r4, #31
    cec4:	mov	r2, r4
    cec6:	mov	r3, r5
    cec8:	str	r1, [sp, #40]	; 0x28
    ceca:	b.w	c456 <_svfprintf_r+0x336>
    cece:	ldr	r1, [sp, #40]	; 0x28
    ced0:	strb.w	r3, [sp, #111]	; 0x6f
    ced4:	cmp.w	fp, #0
    ced8:	ldr	r4, [r1, #0]
    ceda:	add.w	r7, r1, #4
    cede:	mov.w	r5, #0
    cee2:	bge.w	d37e <_svfprintf_r+0x125e>
    cee6:	str	r7, [sp, #40]	; 0x28
    cee8:	mov	r7, r3
    ceea:	orrs.w	r3, r4, r5
    ceee:	bne.w	c47c <_svfprintf_r+0x35c>
    cef2:	b.n	c856 <_svfprintf_r+0x736>
    cef4:	adds	r3, #1
    cef6:	ldr	r2, [sp, #44]	; 0x2c
    cef8:	str	r3, [sp, #144]	; 0x90
    cefa:	add	r4, r5
    cefc:	cmp	r3, #7
    cefe:	str	r4, [sp, #148]	; 0x94
    cf00:	stmia.w	r9, {r2, r5}
    cf04:	ble.w	c648 <_svfprintf_r+0x528>
    cf08:	b.n	cc8e <_svfprintf_r+0xb6e>
    cf0a:	ldr	r2, [sp, #40]	; 0x28
    cf0c:	ldr	r4, [r2, #0]
    cf0e:	mov	r3, r2
    cf10:	adds	r3, #4
    cf12:	asrs	r5, r4, #31
    cf14:	mov	r2, r4
    cf16:	str	r3, [sp, #40]	; 0x28
    cf18:	cmp	r2, #0
    cf1a:	mov	r3, r5
    cf1c:	sbcs.w	r3, r3, #0
    cf20:	bge.w	c460 <_svfprintf_r+0x340>
    cf24:	negs	r4, r4
    cf26:	mov.w	r7, #45	; 0x2d
    cf2a:	sbc.w	r5, r5, r5, lsl #1
    cf2e:	cmp.w	fp, #0
    cf32:	strb.w	r7, [sp, #111]	; 0x6f
    cf36:	blt.w	c47c <_svfprintf_r+0x35c>
    cf3a:	ldr	r3, [sp, #12]
    cf3c:	bic.w	r3, r3, #128	; 0x80
    cf40:	str	r3, [sp, #12]
    cf42:	b.w	c47c <_svfprintf_r+0x35c>
    cf46:	add	r2, sp, #140	; 0x8c
    cf48:	ldr	r1, [sp, #20]
    cf4a:	ldr	r0, [sp, #24]
    cf4c:	bl	f264 <__ssprint_r>
    cf50:	cmp	r0, #0
    cf52:	bne.w	c314 <_svfprintf_r+0x1f4>
    cf56:	ldr	r4, [sp, #148]	; 0x94
    cf58:	add.w	r9, sp, #192	; 0xc0
    cf5c:	ldr	r2, [sp, #60]	; 0x3c
    cf5e:	ldr	r3, [sp, #116]	; 0x74
    cf60:	add	r2, r6
    cf62:	mov	r7, r2
    cf64:	ldr	r2, [sp, #56]	; 0x38
    cf66:	cmp	r3, r2
    cf68:	blt.n	cffa <_svfprintf_r+0xeda>
    cf6a:	ldr	r2, [sp, #12]
    cf6c:	lsls	r5, r2, #31
    cf6e:	bmi.n	cffa <_svfprintf_r+0xeda>
    cf70:	ldr	r1, [sp, #56]	; 0x38
    cf72:	add	r6, r1
    cf74:	subs	r5, r6, r7
    cf76:	subs	r3, r1, r3
    cf78:	cmp	r5, r3
    cf7a:	it	ge
    cf7c:	movge	r5, r3
    cf7e:	cmp	r5, #0
    cf80:	mov	r6, r5
    cf82:	ble.n	cfa0 <_svfprintf_r+0xe80>
    cf84:	ldr	r2, [sp, #144]	; 0x90
    cf86:	str.w	r7, [r9]
    cf8a:	adds	r2, #1
    cf8c:	add	r4, r5
    cf8e:	cmp	r2, #7
    cf90:	str	r4, [sp, #148]	; 0x94
    cf92:	str.w	r5, [r9, #4]
    cf96:	str	r2, [sp, #144]	; 0x90
    cf98:	bgt.w	d598 <_svfprintf_r+0x1478>
    cf9c:	add.w	r9, r9, #8
    cfa0:	cmp	r6, #0
    cfa2:	ite	ge
    cfa4:	subge	r5, r3, r6
    cfa6:	movlt	r5, r3
    cfa8:	cmp	r5, #0
    cfaa:	ble.w	c64c <_svfprintf_r+0x52c>
    cfae:	ldr	r2, [pc, #744]	; (d298 <_svfprintf_r+0x1178>)
    cfb0:	ldr	r3, [sp, #144]	; 0x90
    cfb2:	str	r2, [sp, #44]	; 0x2c
    cfb4:	cmp	r5, #16
    cfb6:	ble.n	cef4 <_svfprintf_r+0xdd4>
    cfb8:	movs	r6, #16
    cfba:	ldr	r7, [sp, #24]
    cfbc:	ldr.w	fp, [sp, #20]
    cfc0:	b.n	cfcc <_svfprintf_r+0xeac>
    cfc2:	add.w	r9, r9, #8
    cfc6:	subs	r5, #16
    cfc8:	cmp	r5, #16
    cfca:	ble.n	cef4 <_svfprintf_r+0xdd4>
    cfcc:	adds	r3, #1
    cfce:	adds	r4, #16
    cfd0:	cmp	r3, #7
    cfd2:	str	r4, [sp, #148]	; 0x94
    cfd4:	str	r3, [sp, #144]	; 0x90
    cfd6:	str.w	sl, [r9]
    cfda:	str.w	r6, [r9, #4]
    cfde:	ble.n	cfc2 <_svfprintf_r+0xea2>
    cfe0:	add	r2, sp, #140	; 0x8c
    cfe2:	mov	r1, fp
    cfe4:	mov	r0, r7
    cfe6:	bl	f264 <__ssprint_r>
    cfea:	cmp	r0, #0
    cfec:	bne.w	c314 <_svfprintf_r+0x1f4>
    cff0:	ldr	r4, [sp, #148]	; 0x94
    cff2:	ldr	r3, [sp, #144]	; 0x90
    cff4:	add.w	r9, sp, #192	; 0xc0
    cff8:	b.n	cfc6 <_svfprintf_r+0xea6>
    cffa:	ldr	r2, [sp, #144]	; 0x90
    cffc:	ldr	r0, [sp, #72]	; 0x48
    cffe:	ldr	r1, [sp, #76]	; 0x4c
    d000:	str.w	r1, [r9]
    d004:	adds	r2, #1
    d006:	add	r4, r0
    d008:	cmp	r2, #7
    d00a:	str	r4, [sp, #148]	; 0x94
    d00c:	str.w	r0, [r9, #4]
    d010:	str	r2, [sp, #144]	; 0x90
    d012:	bgt.w	d57e <_svfprintf_r+0x145e>
    d016:	add.w	r9, r9, #8
    d01a:	b.n	cf70 <_svfprintf_r+0xe50>
    d01c:	ldr	r3, [sp, #12]
    d01e:	lsls	r0, r3, #31
    d020:	bmi.w	cc08 <_svfprintf_r+0xae8>
    d024:	adds	r5, #1
    d026:	adds	r4, #1
    d028:	movs	r3, #1
    d02a:	cmp	r5, #7
    d02c:	str	r4, [sp, #148]	; 0x94
    d02e:	str	r5, [sp, #144]	; 0x90
    d030:	str.w	r6, [r9]
    d034:	str.w	r3, [r9, #4]
    d038:	ble.w	cc70 <_svfprintf_r+0xb50>
    d03c:	b.n	ce5a <_svfprintf_r+0xd3a>
    d03e:	add	r2, sp, #140	; 0x8c
    d040:	ldr	r1, [sp, #20]
    d042:	ldr	r0, [sp, #24]
    d044:	bl	f264 <__ssprint_r>
    d048:	cmp	r0, #0
    d04a:	bne.w	c314 <_svfprintf_r+0x1f4>
    d04e:	ldr	r4, [sp, #148]	; 0x94
    d050:	ldr	r5, [sp, #144]	; 0x90
    d052:	add.w	r9, sp, #192	; 0xc0
    d056:	b.n	cc24 <_svfprintf_r+0xb04>
    d058:	add	r2, sp, #140	; 0x8c
    d05a:	ldr	r1, [sp, #20]
    d05c:	ldr	r0, [sp, #24]
    d05e:	bl	f264 <__ssprint_r>
    d062:	cmp	r0, #0
    d064:	bne.w	c314 <_svfprintf_r+0x1f4>
    d068:	ldr	r4, [sp, #148]	; 0x94
    d06a:	ldr	r5, [sp, #144]	; 0x90
    d06c:	add.w	r9, sp, #192	; 0xc0
    d070:	b.n	cc42 <_svfprintf_r+0xb22>
    d072:	add	r2, sp, #140	; 0x8c
    d074:	ldr	r1, [sp, #20]
    d076:	ldr	r0, [sp, #24]
    d078:	bl	f264 <__ssprint_r>
    d07c:	cmp	r0, #0
    d07e:	bne.w	c314 <_svfprintf_r+0x1f4>
    d082:	ldr	r4, [sp, #148]	; 0x94
    d084:	add.w	r9, sp, #192	; 0xc0
    d088:	b.w	c5b4 <_svfprintf_r+0x494>
    d08c:	ldr	r1, [sp, #12]
    d08e:	ands.w	r3, r1, #64	; 0x40
    d092:	beq.w	d208 <_svfprintf_r+0x10e8>
    d096:	ldr	r0, [sp, #40]	; 0x28
    d098:	strb.w	r2, [sp, #111]	; 0x6f
    d09c:	mov	r3, r0
    d09e:	cmp.w	fp, #0
    d0a2:	add.w	r3, r3, #4
    d0a6:	ldrh	r4, [r0, #0]
    d0a8:	mov.w	r5, #0
    d0ac:	blt.w	d430 <_svfprintf_r+0x1310>
    d0b0:	bic.w	r1, r1, #128	; 0x80
    d0b4:	str	r1, [sp, #12]
    d0b6:	orrs.w	r1, r4, r5
    d0ba:	str	r3, [sp, #40]	; 0x28
    d0bc:	beq.w	ca74 <_svfprintf_r+0x954>
    d0c0:	mov	r7, r2
    d0c2:	b.w	c36c <_svfprintf_r+0x24c>
    d0c6:	ldr	r3, [sp, #12]
    d0c8:	lsls	r7, r3, #27
    d0ca:	bmi.n	d0e4 <_svfprintf_r+0xfc4>
    d0cc:	ldr	r3, [sp, #12]
    d0ce:	lsls	r6, r3, #25
    d0d0:	bpl.n	d0e4 <_svfprintf_r+0xfc4>
    d0d2:	ldr	r2, [sp, #40]	; 0x28
    d0d4:	ldr	r3, [r2, #0]
    d0d6:	adds	r2, #4
    d0d8:	str	r2, [sp, #40]	; 0x28
    d0da:	ldrh.w	r2, [sp, #28]
    d0de:	strh	r2, [r3, #0]
    d0e0:	b.w	c16e <_svfprintf_r+0x4e>
    d0e4:	ldr	r2, [sp, #40]	; 0x28
    d0e6:	ldr	r3, [r2, #0]
    d0e8:	adds	r2, #4
    d0ea:	str	r2, [sp, #40]	; 0x28
    d0ec:	ldr	r2, [sp, #28]
    d0ee:	str	r2, [r3, #0]
    d0f0:	b.w	c16e <_svfprintf_r+0x4e>
    d0f4:	ldrd	r0, r1, [sp, #64]	; 0x40
    d0f8:	mov	r2, r0
    d0fa:	mov	r3, r1
    d0fc:	bl	afc4 <__aeabi_dcmpun>
    d100:	cmp	r0, #0
    d102:	bne.w	d700 <_svfprintf_r+0x15e0>
    d106:	ldr	r3, [sp, #52]	; 0x34
    d108:	cmp.w	fp, #4294967295
    d10c:	bic.w	r7, r3, #32
    d110:	beq.w	d5e2 <_svfprintf_r+0x14c2>
    d114:	cmp	r7, #71	; 0x47
    d116:	beq.w	d41e <_svfprintf_r+0x12fe>
    d11a:	ldr	r3, [sp, #68]	; 0x44
    d11c:	ldr	r2, [sp, #12]
    d11e:	cmp	r3, #0
    d120:	orr.w	r2, r2, #256	; 0x100
    d124:	str	r2, [sp, #44]	; 0x2c
    d126:	blt.w	d61a <_svfprintf_r+0x14fa>
    d12a:	vldr	d7, [sp, #64]	; 0x40
    d12e:	vstr	d7, [sp, #96]	; 0x60
    d132:	movs	r3, #0
    d134:	str	r3, [sp, #16]
    d136:	ldr	r3, [sp, #52]	; 0x34
    d138:	cmp	r3, #102	; 0x66
    d13a:	beq.w	d5e8 <_svfprintf_r+0x14c8>
    d13e:	cmp	r3, #70	; 0x46
    d140:	beq.w	d3ce <_svfprintf_r+0x12ae>
    d144:	cmp	r7, #69	; 0x45
    d146:	ite	eq
    d148:	addeq.w	r5, fp, #1
    d14c:	movne	r5, fp
    d14e:	add	r2, sp, #132	; 0x84
    d150:	add	r3, sp, #120	; 0x78
    d152:	str	r2, [sp, #4]
    d154:	str	r3, [sp, #0]
    d156:	mov	r2, r5
    d158:	add	r3, sp, #116	; 0x74
    d15a:	movs	r1, #2
    d15c:	vldr	d0, [sp, #96]	; 0x60
    d160:	ldr	r0, [sp, #24]
    d162:	bl	d9d8 <_dtoa_r>
    d166:	ldr	r3, [sp, #52]	; 0x34
    d168:	cmp	r3, #103	; 0x67
    d16a:	mov	r6, r0
    d16c:	bne.w	d646 <_svfprintf_r+0x1526>
    d170:	ldr	r3, [sp, #12]
    d172:	lsls	r2, r3, #31
    d174:	bpl.w	d6ea <_svfprintf_r+0x15ca>
    d178:	adds	r4, r6, r5
    d17a:	movs	r2, #0
    d17c:	movs	r3, #0
    d17e:	ldrd	r0, r1, [sp, #96]	; 0x60
    d182:	bl	af60 <__aeabi_dcmpeq>
    d186:	cmp	r0, #0
    d188:	bne.w	d4a6 <_svfprintf_r+0x1386>
    d18c:	ldr	r3, [sp, #132]	; 0x84
    d18e:	cmp	r4, r3
    d190:	bls.n	d1a0 <_svfprintf_r+0x1080>
    d192:	movs	r1, #48	; 0x30
    d194:	adds	r2, r3, #1
    d196:	str	r2, [sp, #132]	; 0x84
    d198:	strb	r1, [r3, #0]
    d19a:	ldr	r3, [sp, #132]	; 0x84
    d19c:	cmp	r4, r3
    d19e:	bhi.n	d194 <_svfprintf_r+0x1074>
    d1a0:	subs	r3, r3, r6
    d1a2:	cmp	r7, #71	; 0x47
    d1a4:	str	r3, [sp, #56]	; 0x38
    d1a6:	beq.w	d498 <_svfprintf_r+0x1378>
    d1aa:	ldr	r3, [sp, #52]	; 0x34
    d1ac:	cmp	r3, #101	; 0x65
    d1ae:	ble.w	d664 <_svfprintf_r+0x1544>
    d1b2:	ldr	r3, [sp, #52]	; 0x34
    d1b4:	cmp	r3, #102	; 0x66
    d1b6:	ldr	r3, [sp, #116]	; 0x74
    d1b8:	str	r3, [sp, #60]	; 0x3c
    d1ba:	beq.w	d67e <_svfprintf_r+0x155e>
    d1be:	ldr	r2, [sp, #60]	; 0x3c
    d1c0:	ldr	r1, [sp, #56]	; 0x38
    d1c2:	cmp	r2, r1
    d1c4:	blt.w	d62c <_svfprintf_r+0x150c>
    d1c8:	ldr	r3, [sp, #12]
    d1ca:	lsls	r1, r3, #31
    d1cc:	bmi.w	d6ee <_svfprintf_r+0x15ce>
    d1d0:	bic.w	r3, r2, r2, asr #31
    d1d4:	str	r2, [sp, #36]	; 0x24
    d1d6:	movs	r2, #103	; 0x67
    d1d8:	str	r2, [sp, #52]	; 0x34
    d1da:	ldr	r2, [sp, #16]
    d1dc:	cmp	r2, #0
    d1de:	bne.w	d440 <_svfprintf_r+0x1320>
    d1e2:	str	r3, [sp, #16]
    d1e4:	ldr	r3, [sp, #44]	; 0x2c
    d1e6:	str	r3, [sp, #12]
    d1e8:	mov	fp, r2
    d1ea:	ldrb.w	r7, [sp, #111]	; 0x6f
    d1ee:	b.w	c4c4 <_svfprintf_r+0x3a4>
    d1f2:	bic.w	r7, r7, #7
    d1f6:	vldr	d7, [r7]
    d1fa:	add.w	r3, r7, #8
    d1fe:	vstr	d7, [sp, #64]	; 0x40
    d202:	str	r3, [sp, #40]	; 0x28
    d204:	b.w	c71c <_svfprintf_r+0x5fc>
    d208:	ldr	r1, [sp, #40]	; 0x28
    d20a:	strb.w	r3, [sp, #111]	; 0x6f
    d20e:	cmp.w	fp, #0
    d212:	ldr	r4, [r1, #0]
    d214:	add.w	r7, r1, #4
    d218:	mov.w	r5, #0
    d21c:	bge.w	d378 <_svfprintf_r+0x1258>
    d220:	str	r7, [sp, #40]	; 0x28
    d222:	movs	r7, #0
    d224:	b.w	c36c <_svfprintf_r+0x24c>
    d228:	ldr	r1, [sp, #12]
    d22a:	ands.w	r3, r1, #64	; 0x40
    d22e:	beq.w	cece <_svfprintf_r+0xdae>
    d232:	ldr	r0, [sp, #40]	; 0x28
    d234:	strb.w	r2, [sp, #111]	; 0x6f
    d238:	mov	r3, r0
    d23a:	cmp.w	fp, #0
    d23e:	add.w	r3, r3, #4
    d242:	ldrh	r4, [r0, #0]
    d244:	mov.w	r5, #0
    d248:	blt.w	d42a <_svfprintf_r+0x130a>
    d24c:	bic.w	r1, r1, #128	; 0x80
    d250:	str	r1, [sp, #12]
    d252:	orrs.w	r1, r4, r5
    d256:	str	r3, [sp, #40]	; 0x28
    d258:	mov	r7, r2
    d25a:	bne.w	c47c <_svfprintf_r+0x35c>
    d25e:	b.w	c84c <_svfprintf_r+0x72c>
    d262:	ldr	r3, [sp, #12]
    d264:	ldr	r2, [sp, #40]	; 0x28
    d266:	tst.w	r3, #64	; 0x40
    d26a:	mov	r3, r2
    d26c:	beq.w	d434 <_svfprintf_r+0x1314>
    d270:	adds	r3, #4
    d272:	ldrh	r4, [r2, #0]
    d274:	str	r3, [sp, #40]	; 0x28
    d276:	movs	r5, #0
    d278:	b.w	c886 <_svfprintf_r+0x766>
    d27c:	mov	r4, r2
    d27e:	adds	r3, #1
    d280:	ldr	r2, [sp, #44]	; 0x2c
    d282:	str	r3, [sp, #144]	; 0x90
    d284:	add	r4, r5
    d286:	cmp	r3, #7
    d288:	str	r4, [sp, #148]	; 0x94
    d28a:	stmia.w	r9, {r2, r5}
    d28e:	bgt.w	cf46 <_svfprintf_r+0xe26>
    d292:	add.w	r9, r9, #8
    d296:	b.n	cf5c <_svfprintf_r+0xe3c>
    d298:	.word	0x20000e88
    d29c:	movs	r7, #0
    d29e:	cmp	fp, r7
    d2a0:	strb.w	r7, [sp, #111]	; 0x6f
    d2a4:	blt.w	ca98 <_svfprintf_r+0x978>
    d2a8:	ldr	r3, [sp, #12]
    d2aa:	bic.w	r3, r3, #128	; 0x80
    d2ae:	str	r3, [sp, #12]
    d2b0:	b.w	ca34 <_svfprintf_r+0x914>
    d2b4:	add	r2, sp, #140	; 0x8c
    d2b6:	ldr	r1, [sp, #20]
    d2b8:	ldr	r0, [sp, #24]
    d2ba:	bl	f264 <__ssprint_r>
    d2be:	cmp	r0, #0
    d2c0:	bne.w	c314 <_svfprintf_r+0x1f4>
    d2c4:	ldr	r4, [sp, #148]	; 0x94
    d2c6:	add.w	r9, sp, #192	; 0xc0
    d2ca:	b.n	cadc <_svfprintf_r+0x9bc>
    d2cc:	ldr	r7, [sp, #40]	; 0x28
    d2ce:	b.w	ca8a <_svfprintf_r+0x96a>
    d2d2:	ldr	r3, [sp, #144]	; 0x90
    d2d4:	ldr	r2, [pc, #736]	; (d5b8 <_svfprintf_r+0x1498>)
    d2d6:	str.w	r2, [r9]
    d2da:	adds	r3, #1
    d2dc:	adds	r4, #1
    d2de:	movs	r2, #1
    d2e0:	cmp	r3, #7
    d2e2:	str	r4, [sp, #148]	; 0x94
    d2e4:	str	r3, [sp, #144]	; 0x90
    d2e6:	str.w	r2, [r9, #4]
    d2ea:	bgt.w	d404 <_svfprintf_r+0x12e4>
    d2ee:	add.w	r9, r9, #8
    d2f2:	cbnz	r5, d300 <_svfprintf_r+0x11e0>
    d2f4:	ldr	r3, [sp, #56]	; 0x38
    d2f6:	cbnz	r3, d300 <_svfprintf_r+0x11e0>
    d2f8:	ldr	r3, [sp, #12]
    d2fa:	lsls	r7, r3, #31
    d2fc:	bpl.w	c64c <_svfprintf_r+0x52c>
    d300:	ldr	r3, [sp, #144]	; 0x90
    d302:	ldr	r1, [sp, #72]	; 0x48
    d304:	ldr	r2, [sp, #76]	; 0x4c
    d306:	str.w	r2, [r9]
    d30a:	adds	r3, #1
    d30c:	add	r4, r1
    d30e:	cmp	r3, #7
    d310:	str	r4, [sp, #148]	; 0x94
    d312:	str.w	r1, [r9, #4]
    d316:	str	r3, [sp, #144]	; 0x90
    d318:	bgt.w	d6b6 <_svfprintf_r+0x1596>
    d31c:	add.w	r9, r9, #8
    d320:	negs	r5, r5
    d322:	cmp	r5, #0
    d324:	ble.w	d47c <_svfprintf_r+0x135c>
    d328:	ldr	r2, [pc, #656]	; (d5bc <_svfprintf_r+0x149c>)
    d32a:	str	r2, [sp, #44]	; 0x2c
    d32c:	cmp	r5, #16
    d32e:	ble.w	d4c4 <_svfprintf_r+0x13a4>
    d332:	mov	r2, r4
    d334:	movs	r7, #16
    d336:	ldr.w	fp, [sp, #24]
    d33a:	ldr	r4, [sp, #20]
    d33c:	b.n	d34a <_svfprintf_r+0x122a>
    d33e:	add.w	r9, r9, #8
    d342:	subs	r5, #16
    d344:	cmp	r5, #16
    d346:	ble.w	d4c2 <_svfprintf_r+0x13a2>
    d34a:	adds	r3, #1
    d34c:	adds	r2, #16
    d34e:	cmp	r3, #7
    d350:	str	r2, [sp, #148]	; 0x94
    d352:	str	r3, [sp, #144]	; 0x90
    d354:	str.w	sl, [r9]
    d358:	str.w	r7, [r9, #4]
    d35c:	ble.n	d33e <_svfprintf_r+0x121e>
    d35e:	add	r2, sp, #140	; 0x8c
    d360:	mov	r1, r4
    d362:	mov	r0, fp
    d364:	bl	f264 <__ssprint_r>
    d368:	cmp	r0, #0
    d36a:	bne.w	c314 <_svfprintf_r+0x1f4>
    d36e:	ldr	r2, [sp, #148]	; 0x94
    d370:	ldr	r3, [sp, #144]	; 0x90
    d372:	add.w	r9, sp, #192	; 0xc0
    d376:	b.n	d342 <_svfprintf_r+0x1222>
    d378:	ldr	r2, [sp, #12]
    d37a:	b.w	c7f0 <_svfprintf_r+0x6d0>
    d37e:	ldr	r2, [sp, #12]
    d380:	b.n	ce9a <_svfprintf_r+0xd7a>
    d382:	ldr	r3, [sp, #12]
    d384:	orr.w	r3, r3, #32
    d388:	str	r3, [sp, #12]
    d38a:	add.w	r8, r8, #1
    d38e:	ldrb.w	r3, [r8]
    d392:	b.w	c1d4 <_svfprintf_r+0xb4>
    d396:	add	r2, sp, #140	; 0x8c
    d398:	ldr	r1, [sp, #20]
    d39a:	ldr	r0, [sp, #24]
    d39c:	bl	f264 <__ssprint_r>
    d3a0:	cmp	r0, #0
    d3a2:	bne.w	c314 <_svfprintf_r+0x1f4>
    d3a6:	ldr	r4, [sp, #148]	; 0x94
    d3a8:	add.w	r9, sp, #192	; 0xc0
    d3ac:	b.w	cb0c <_svfprintf_r+0x9ec>
    d3b0:	movs	r1, #64	; 0x40
    d3b2:	ldr	r0, [sp, #24]
    d3b4:	bl	b388 <_malloc_r>
    d3b8:	ldr	r2, [sp, #20]
    d3ba:	str	r0, [r2, #0]
    d3bc:	str	r0, [r2, #16]
    d3be:	cmp	r0, #0
    d3c0:	beq.w	d7aa <_svfprintf_r+0x168a>
    d3c4:	ldr	r2, [sp, #20]
    d3c6:	movs	r3, #64	; 0x40
    d3c8:	str	r3, [r2, #20]
    d3ca:	b.w	c14e <_svfprintf_r+0x2e>
    d3ce:	add	r2, sp, #132	; 0x84
    d3d0:	add	r3, sp, #120	; 0x78
    d3d2:	str	r2, [sp, #4]
    d3d4:	str	r3, [sp, #0]
    d3d6:	mov	r2, fp
    d3d8:	add	r3, sp, #116	; 0x74
    d3da:	movs	r1, #3
    d3dc:	vldr	d0, [sp, #96]	; 0x60
    d3e0:	ldr	r0, [sp, #24]
    d3e2:	bl	d9d8 <_dtoa_r>
    d3e6:	mov	r5, fp
    d3e8:	mov	r6, r0
    d3ea:	ldr	r3, [sp, #52]	; 0x34
    d3ec:	cmp	r3, #70	; 0x46
    d3ee:	add.w	r4, r6, r5
    d3f2:	bne.w	d17a <_svfprintf_r+0x105a>
    d3f6:	ldrb	r3, [r6, #0]
    d3f8:	cmp	r3, #48	; 0x30
    d3fa:	beq.w	d70c <_svfprintf_r+0x15ec>
    d3fe:	ldr	r5, [sp, #116]	; 0x74
    d400:	add	r4, r5
    d402:	b.n	d17a <_svfprintf_r+0x105a>
    d404:	add	r2, sp, #140	; 0x8c
    d406:	ldr	r1, [sp, #20]
    d408:	ldr	r0, [sp, #24]
    d40a:	bl	f264 <__ssprint_r>
    d40e:	cmp	r0, #0
    d410:	bne.w	c314 <_svfprintf_r+0x1f4>
    d414:	ldr	r5, [sp, #116]	; 0x74
    d416:	ldr	r4, [sp, #148]	; 0x94
    d418:	add.w	r9, sp, #192	; 0xc0
    d41c:	b.n	d2f2 <_svfprintf_r+0x11d2>
    d41e:	cmp.w	fp, #0
    d422:	it	eq
    d424:	moveq.w	fp, #1
    d428:	b.n	d11a <_svfprintf_r+0xffa>
    d42a:	str	r3, [sp, #40]	; 0x28
    d42c:	mov	r7, r2
    d42e:	b.n	ceea <_svfprintf_r+0xdca>
    d430:	str	r3, [sp, #40]	; 0x28
    d432:	b.n	d222 <_svfprintf_r+0x1102>
    d434:	adds	r3, #4
    d436:	ldr	r4, [r2, #0]
    d438:	str	r3, [sp, #40]	; 0x28
    d43a:	movs	r5, #0
    d43c:	b.w	c886 <_svfprintf_r+0x766>
    d440:	movs	r7, #45	; 0x2d
    d442:	str	r3, [sp, #16]
    d444:	ldr	r3, [sp, #44]	; 0x2c
    d446:	str	r3, [sp, #12]
    d448:	strb.w	r7, [sp, #111]	; 0x6f
    d44c:	mov.w	fp, #0
    d450:	b.w	c4c6 <_svfprintf_r+0x3a6>
    d454:	mov	r0, r6
    d456:	bl	c040 <strlen>
    d45a:	mov	fp, r4
    d45c:	mov	r3, r0
    d45e:	str	r0, [sp, #36]	; 0x24
    d460:	b.w	c9a8 <_svfprintf_r+0x888>
    d464:	add	r2, sp, #140	; 0x8c
    d466:	ldr	r1, [sp, #20]
    d468:	ldr	r0, [sp, #24]
    d46a:	bl	f264 <__ssprint_r>
    d46e:	cmp	r0, #0
    d470:	bne.w	c314 <_svfprintf_r+0x1f4>
    d474:	ldr	r4, [sp, #148]	; 0x94
    d476:	ldr	r3, [sp, #144]	; 0x90
    d478:	add.w	r9, sp, #192	; 0xc0
    d47c:	ldr	r1, [sp, #56]	; 0x38
    d47e:	str.w	r6, [r9]
    d482:	adds	r3, #1
    d484:	add	r4, r1
    d486:	cmp	r3, #7
    d488:	str	r4, [sp, #148]	; 0x94
    d48a:	str	r3, [sp, #144]	; 0x90
    d48c:	str.w	r1, [r9, #4]
    d490:	ble.w	c648 <_svfprintf_r+0x528>
    d494:	b.w	cc8e <_svfprintf_r+0xb6e>
    d498:	ldr	r3, [sp, #116]	; 0x74
    d49a:	adds	r5, r3, #3
    d49c:	blt.n	d4dc <_svfprintf_r+0x13bc>
    d49e:	cmp	fp, r3
    d4a0:	blt.n	d4dc <_svfprintf_r+0x13bc>
    d4a2:	str	r3, [sp, #60]	; 0x3c
    d4a4:	b.n	d1be <_svfprintf_r+0x109e>
    d4a6:	mov	r3, r4
    d4a8:	b.n	d1a0 <_svfprintf_r+0x1080>
    d4aa:	add	r2, sp, #140	; 0x8c
    d4ac:	ldr	r1, [sp, #20]
    d4ae:	ldr	r0, [sp, #24]
    d4b0:	bl	f264 <__ssprint_r>
    d4b4:	cmp	r0, #0
    d4b6:	bne.w	c314 <_svfprintf_r+0x1f4>
    d4ba:	ldr	r4, [sp, #148]	; 0x94
    d4bc:	add.w	r9, sp, #192	; 0xc0
    d4c0:	b.n	cd5c <_svfprintf_r+0xc3c>
    d4c2:	mov	r4, r2
    d4c4:	adds	r3, #1
    d4c6:	ldr	r2, [sp, #44]	; 0x2c
    d4c8:	str	r3, [sp, #144]	; 0x90
    d4ca:	add	r4, r5
    d4cc:	cmp	r3, #7
    d4ce:	str	r4, [sp, #148]	; 0x94
    d4d0:	stmia.w	r9, {r2, r5}
    d4d4:	bgt.n	d464 <_svfprintf_r+0x1344>
    d4d6:	add.w	r9, r9, #8
    d4da:	b.n	d47c <_svfprintf_r+0x135c>
    d4dc:	ldr	r2, [sp, #52]	; 0x34
    d4de:	subs	r2, #2
    d4e0:	str	r2, [sp, #52]	; 0x34
    d4e2:	subs	r3, #1
    d4e4:	cmp	r3, #0
    d4e6:	ldrb.w	r2, [sp, #52]	; 0x34
    d4ea:	str	r3, [sp, #116]	; 0x74
    d4ec:	it	lt
    d4ee:	neglt	r3, r3
    d4f0:	strb.w	r2, [sp, #124]	; 0x7c
    d4f4:	ite	lt
    d4f6:	movlt	r2, #45	; 0x2d
    d4f8:	movge	r2, #43	; 0x2b
    d4fa:	cmp	r3, #9
    d4fc:	strb.w	r2, [sp, #125]	; 0x7d
    d500:	ble.w	d6da <_svfprintf_r+0x15ba>
    d504:	add.w	r0, sp, #139	; 0x8b
    d508:	mov	r4, r0
    d50a:	ldr	r2, [pc, #180]	; (d5c0 <_svfprintf_r+0x14a0>)
    d50c:	smull	r2, r1, r2, r3
    d510:	asrs	r2, r3, #31
    d512:	rsb	r2, r2, r1, asr #2
    d516:	add.w	r1, r2, r2, lsl #2
    d51a:	sub.w	r3, r3, r1, lsl #1
    d51e:	add.w	r1, r3, #48	; 0x30
    d522:	cmp	r2, #9
    d524:	mov	r3, r2
    d526:	strb.w	r1, [r4, #-1]!
    d52a:	bgt.n	d50a <_svfprintf_r+0x13ea>
    d52c:	mov	r1, r4
    d52e:	adds	r3, #48	; 0x30
    d530:	uxtb	r2, r3
    d532:	strb.w	r2, [r1, #-1]!
    d536:	cmp	r0, r1
    d538:	bls.w	d7a4 <_svfprintf_r+0x1684>
    d53c:	add.w	r1, sp, #126	; 0x7e
    d540:	mov	r3, r4
    d542:	b.n	d548 <_svfprintf_r+0x1428>
    d544:	ldrb.w	r2, [r3], #1
    d548:	strb.w	r2, [r1], #1
    d54c:	cmp	r0, r3
    d54e:	bne.n	d544 <_svfprintf_r+0x1424>
    d550:	adds	r3, r0, #1
    d552:	subs	r3, r3, r4
    d554:	add.w	r2, sp, #126	; 0x7e
    d558:	add	r3, r2
    d55a:	add	r2, sp, #124	; 0x7c
    d55c:	subs	r3, r3, r2
    d55e:	ldr	r2, [sp, #56]	; 0x38
    d560:	str	r3, [sp, #84]	; 0x54
    d562:	cmp	r2, #1
    d564:	add	r3, r2
    d566:	str	r3, [sp, #36]	; 0x24
    d568:	ble.w	d73a <_svfprintf_r+0x161a>
    d56c:	ldr	r3, [sp, #36]	; 0x24
    d56e:	ldr	r2, [sp, #72]	; 0x48
    d570:	add	r3, r2
    d572:	movs	r2, #0
    d574:	str	r3, [sp, #36]	; 0x24
    d576:	str	r2, [sp, #60]	; 0x3c
    d578:	bic.w	r3, r3, r3, asr #31
    d57c:	b.n	d1da <_svfprintf_r+0x10ba>
    d57e:	add	r2, sp, #140	; 0x8c
    d580:	ldr	r1, [sp, #20]
    d582:	ldr	r0, [sp, #24]
    d584:	bl	f264 <__ssprint_r>
    d588:	cmp	r0, #0
    d58a:	bne.w	c314 <_svfprintf_r+0x1f4>
    d58e:	ldr	r3, [sp, #116]	; 0x74
    d590:	ldr	r4, [sp, #148]	; 0x94
    d592:	add.w	r9, sp, #192	; 0xc0
    d596:	b.n	cf70 <_svfprintf_r+0xe50>
    d598:	add	r2, sp, #140	; 0x8c
    d59a:	ldr	r1, [sp, #20]
    d59c:	ldr	r0, [sp, #24]
    d59e:	bl	f264 <__ssprint_r>
    d5a2:	cmp	r0, #0
    d5a4:	bne.w	c314 <_svfprintf_r+0x1f4>
    d5a8:	ldr	r3, [sp, #116]	; 0x74
    d5aa:	ldr	r2, [sp, #56]	; 0x38
    d5ac:	ldr	r4, [sp, #148]	; 0x94
    d5ae:	subs	r3, r2, r3
    d5b0:	add.w	r9, sp, #192	; 0xc0
    d5b4:	b.n	cfa0 <_svfprintf_r+0xe80>
    d5b6:	nop
    d5b8:	.word	0x20000dac
    d5bc:	.word	0x20000e88
    d5c0:	.word	0x66666667
    d5c4:	cmp	r5, #6
    d5c6:	mov	r3, r5
    d5c8:	it	cs
    d5ca:	movcs	r3, #6
    d5cc:	str	r3, [sp, #36]	; 0x24
    d5ce:	bic.w	r3, r3, r3, asr #31
    d5d2:	mov	fp, r6
    d5d4:	str	r7, [sp, #40]	; 0x28
    d5d6:	str	r6, [sp, #60]	; 0x3c
    d5d8:	mov	r7, r6
    d5da:	str	r3, [sp, #16]
    d5dc:	ldr	r6, [pc, #536]	; (d7f8 <_svfprintf_r+0x16d8>)
    d5de:	b.w	c4c4 <_svfprintf_r+0x3a4>
    d5e2:	mov.w	fp, #6
    d5e6:	b.n	d11a <_svfprintf_r+0xffa>
    d5e8:	add	r2, sp, #132	; 0x84
    d5ea:	add	r3, sp, #120	; 0x78
    d5ec:	str	r2, [sp, #4]
    d5ee:	str	r3, [sp, #0]
    d5f0:	mov	r2, fp
    d5f2:	add	r3, sp, #116	; 0x74
    d5f4:	movs	r1, #3
    d5f6:	vldr	d0, [sp, #96]	; 0x60
    d5fa:	ldr	r0, [sp, #24]
    d5fc:	bl	d9d8 <_dtoa_r>
    d600:	mov	r5, fp
    d602:	mov	r6, r0
    d604:	add.w	r4, r0, fp
    d608:	b.n	d3f6 <_svfprintf_r+0x12d6>
    d60a:	movs	r7, #45	; 0x2d
    d60c:	strb.w	r7, [sp, #111]	; 0x6f
    d610:	b.w	c76a <_svfprintf_r+0x64a>
    d614:	str	r3, [sp, #12]
    d616:	b.w	c8c2 <_svfprintf_r+0x7a2>
    d61a:	ldrd	r1, r2, [sp, #64]	; 0x40
    d61e:	add.w	r3, r2, #2147483648	; 0x80000000
    d622:	str	r3, [sp, #100]	; 0x64
    d624:	movs	r3, #45	; 0x2d
    d626:	str	r1, [sp, #96]	; 0x60
    d628:	str	r3, [sp, #16]
    d62a:	b.n	d136 <_svfprintf_r+0x1016>
    d62c:	ldr	r2, [sp, #72]	; 0x48
    d62e:	ldr	r3, [sp, #56]	; 0x38
    d630:	add	r3, r2
    d632:	ldr	r2, [sp, #60]	; 0x3c
    d634:	str	r3, [sp, #36]	; 0x24
    d636:	cmp	r2, #0
    d638:	ble.w	d74e <_svfprintf_r+0x162e>
    d63c:	movs	r2, #103	; 0x67
    d63e:	bic.w	r3, r3, r3, asr #31
    d642:	str	r2, [sp, #52]	; 0x34
    d644:	b.n	d1da <_svfprintf_r+0x10ba>
    d646:	ldr	r3, [sp, #52]	; 0x34
    d648:	cmp	r3, #71	; 0x47
    d64a:	bne.w	d178 <_svfprintf_r+0x1058>
    d64e:	ldr	r3, [sp, #12]
    d650:	lsls	r3, r3, #31
    d652:	bmi.w	d3ea <_svfprintf_r+0x12ca>
    d656:	ldr	r3, [sp, #132]	; 0x84
    d658:	cmp	r7, #71	; 0x47
    d65a:	sub.w	r3, r3, r6
    d65e:	str	r3, [sp, #56]	; 0x38
    d660:	beq.w	d498 <_svfprintf_r+0x1378>
    d664:	ldr	r3, [sp, #116]	; 0x74
    d666:	b.n	d4e2 <_svfprintf_r+0x13c2>
    d668:	bic.w	r3, r5, r5, asr #31
    d66c:	str	r7, [sp, #40]	; 0x28
    d66e:	str	r3, [sp, #16]
    d670:	str	r5, [sp, #36]	; 0x24
    d672:	mov	fp, r0
    d674:	str	r0, [sp, #60]	; 0x3c
    d676:	ldrb.w	r7, [sp, #111]	; 0x6f
    d67a:	b.w	c4c4 <_svfprintf_r+0x3a4>
    d67e:	cmp	r3, #0
    d680:	ble.n	d75e <_svfprintf_r+0x163e>
    d682:	cmp.w	fp, #0
    d686:	bne.n	d728 <_svfprintf_r+0x1608>
    d688:	ldr	r2, [sp, #12]
    d68a:	lsls	r4, r2, #31
    d68c:	bmi.n	d728 <_svfprintf_r+0x1608>
    d68e:	mov	r2, r3
    d690:	str	r2, [sp, #36]	; 0x24
    d692:	bic.w	r3, r3, r3, asr #31
    d696:	b.n	d1da <_svfprintf_r+0x10ba>
    d698:	ldr	r3, [sp, #12]
    d69a:	lsls	r3, r3, #31
    d69c:	mov	r7, fp
    d69e:	bpl.n	d6ac <_svfprintf_r+0x158c>
    d6a0:	add	r6, sp, #256	; 0x100
    d6a2:	movs	r3, #48	; 0x30
    d6a4:	strb.w	r3, [r6, #-65]!
    d6a8:	b.w	c4b0 <_svfprintf_r+0x390>
    d6ac:	str.w	fp, [sp, #36]	; 0x24
    d6b0:	add	r6, sp, #192	; 0xc0
    d6b2:	b.w	c4b6 <_svfprintf_r+0x396>
    d6b6:	add	r2, sp, #140	; 0x8c
    d6b8:	ldr	r1, [sp, #20]
    d6ba:	ldr	r0, [sp, #24]
    d6bc:	bl	f264 <__ssprint_r>
    d6c0:	cmp	r0, #0
    d6c2:	bne.w	c314 <_svfprintf_r+0x1f4>
    d6c6:	ldr	r5, [sp, #116]	; 0x74
    d6c8:	ldr	r4, [sp, #148]	; 0x94
    d6ca:	ldr	r3, [sp, #144]	; 0x90
    d6cc:	add.w	r9, sp, #192	; 0xc0
    d6d0:	b.n	d320 <_svfprintf_r+0x1200>
    d6d2:	mov	r8, r4
    d6d4:	movs	r5, #0
    d6d6:	b.w	c1d8 <_svfprintf_r+0xb8>
    d6da:	adds	r3, #48	; 0x30
    d6dc:	movs	r2, #48	; 0x30
    d6de:	strb.w	r3, [sp, #127]	; 0x7f
    d6e2:	strb.w	r2, [sp, #126]	; 0x7e
    d6e6:	add	r3, sp, #128	; 0x80
    d6e8:	b.n	d55a <_svfprintf_r+0x143a>
    d6ea:	ldr	r3, [sp, #132]	; 0x84
    d6ec:	b.n	d1a0 <_svfprintf_r+0x1080>
    d6ee:	ldr	r2, [sp, #72]	; 0x48
    d6f0:	ldr	r3, [sp, #60]	; 0x3c
    d6f2:	add	r3, r2
    d6f4:	movs	r2, #103	; 0x67
    d6f6:	str	r3, [sp, #36]	; 0x24
    d6f8:	str	r2, [sp, #52]	; 0x34
    d6fa:	bic.w	r3, r3, r3, asr #31
    d6fe:	b.n	d1da <_svfprintf_r+0x10ba>
    d700:	ldr	r6, [pc, #248]	; (d7fc <_svfprintf_r+0x16dc>)
    d702:	ldr	r3, [pc, #252]	; (d800 <_svfprintf_r+0x16e0>)
    d704:	ldrb.w	r7, [sp, #111]	; 0x6f
    d708:	b.w	c76e <_svfprintf_r+0x64e>
    d70c:	movs	r2, #0
    d70e:	movs	r3, #0
    d710:	ldrd	r0, r1, [sp, #96]	; 0x60
    d714:	bl	af60 <__aeabi_dcmpeq>
    d718:	cmp	r0, #0
    d71a:	bne.w	d3fe <_svfprintf_r+0x12de>
    d71e:	rsb	r5, r5, #1
    d722:	str	r5, [sp, #116]	; 0x74
    d724:	add	r4, r5
    d726:	b.n	d17a <_svfprintf_r+0x105a>
    d728:	ldr	r3, [sp, #60]	; 0x3c
    d72a:	ldr	r2, [sp, #72]	; 0x48
    d72c:	adds	r5, r3, r2
    d72e:	add.w	r3, r5, fp
    d732:	str	r3, [sp, #36]	; 0x24
    d734:	bic.w	r3, r3, r3, asr #31
    d738:	b.n	d1da <_svfprintf_r+0x10ba>
    d73a:	ldr	r3, [sp, #12]
    d73c:	ands.w	r3, r3, #1
    d740:	bne.w	d56c <_svfprintf_r+0x144c>
    d744:	str	r3, [sp, #60]	; 0x3c
    d746:	ldr	r3, [sp, #36]	; 0x24
    d748:	bic.w	r3, r3, r3, asr #31
    d74c:	b.n	d1da <_svfprintf_r+0x10ba>
    d74e:	ldr	r3, [sp, #60]	; 0x3c
    d750:	ldr	r2, [sp, #36]	; 0x24
    d752:	rsb	r3, r3, #1
    d756:	add	r2, r3
    d758:	mov	r3, r2
    d75a:	str	r2, [sp, #36]	; 0x24
    d75c:	b.n	d63c <_svfprintf_r+0x151c>
    d75e:	cmp.w	fp, #0
    d762:	bne.n	d76a <_svfprintf_r+0x164a>
    d764:	ldr	r3, [sp, #12]
    d766:	lsls	r0, r3, #31
    d768:	bpl.n	d77a <_svfprintf_r+0x165a>
    d76a:	ldr	r3, [sp, #72]	; 0x48
    d76c:	adds	r5, r3, #1
    d76e:	add.w	r3, r5, fp
    d772:	str	r3, [sp, #36]	; 0x24
    d774:	bic.w	r3, r3, r3, asr #31
    d778:	b.n	d1da <_svfprintf_r+0x10ba>
    d77a:	movs	r3, #1
    d77c:	str	r3, [sp, #36]	; 0x24
    d77e:	b.n	d1da <_svfprintf_r+0x10ba>
    d780:	ldr	r0, [sp, #40]	; 0x28
    d782:	ldrb.w	r3, [r8, #1]
    d786:	ldr	r5, [r0, #0]
    d788:	adds	r0, #4
    d78a:	cmp	r5, #0
    d78c:	str	r0, [sp, #40]	; 0x28
    d78e:	mov	r8, r4
    d790:	bge.w	c1d4 <_svfprintf_r+0xb4>
    d794:	mov.w	r5, #4294967295
    d798:	b.w	c1d4 <_svfprintf_r+0xb4>
    d79c:	strb.w	r1, [sp, #111]	; 0x6f
    d7a0:	b.w	c336 <_svfprintf_r+0x216>
    d7a4:	add.w	r3, sp, #126	; 0x7e
    d7a8:	b.n	d55a <_svfprintf_r+0x143a>
    d7aa:	ldr	r2, [sp, #24]
    d7ac:	movs	r3, #12
    d7ae:	str	r3, [r2, #0]
    d7b0:	mov.w	r0, #4294967295
    d7b4:	b.w	c326 <_svfprintf_r+0x206>
    d7b8:	strb.w	r1, [sp, #111]	; 0x6f
    d7bc:	b.w	c430 <_svfprintf_r+0x310>
    d7c0:	strb.w	r1, [sp, #111]	; 0x6f
    d7c4:	b.w	c6fc <_svfprintf_r+0x5dc>
    d7c8:	strb.w	r1, [sp, #111]	; 0x6f
    d7cc:	b.w	c86a <_svfprintf_r+0x74a>
    d7d0:	strb.w	r1, [sp, #111]	; 0x6f
    d7d4:	b.w	c80e <_svfprintf_r+0x6ee>
    d7d8:	strb.w	r1, [sp, #111]	; 0x6f
    d7dc:	b.w	c7ba <_svfprintf_r+0x69a>
    d7e0:	strb.w	r1, [sp, #111]	; 0x6f
    d7e4:	b.w	ca52 <_svfprintf_r+0x932>
    d7e8:	strb.w	r1, [sp, #111]	; 0x6f
    d7ec:	b.w	ca10 <_svfprintf_r+0x8f0>
    d7f0:	strb.w	r1, [sp, #111]	; 0x6f
    d7f4:	b.w	c9d4 <_svfprintf_r+0x8b4>
    d7f8:	.word	0x20000df8
    d7fc:	.word	0x20000dcc
    d800:	.word	0x20000dc8

0000d804 <_vdprintf_r>:
    d804:	push	{r4, r5, r6, r7, lr}
    d806:	sub.w	sp, sp, #532	; 0x214
    d80a:	add	r5, sp, #16
    d80c:	str	r3, [sp, #0]
    d80e:	mov	r7, r1
    d810:	mov	r3, r2
    d812:	mov.w	r4, #512	; 0x200
    d816:	add	r2, sp, #12
    d818:	mov	r1, r5
    d81a:	str	r4, [sp, #12]
    d81c:	mov	r6, r0
    d81e:	bl	f364 <_vasnprintf_r>
    d822:	cbz	r0, d848 <_vdprintf_r+0x44>
    d824:	mov	r4, r0
    d826:	mov	r2, r0
    d828:	mov	r1, r7
    d82a:	ldr	r3, [sp, #12]
    d82c:	mov	r0, r6
    d82e:	bl	d884 <_write_r>
    d832:	cmp	r4, r5
    d834:	str	r0, [sp, #12]
    d836:	beq.n	d842 <_vdprintf_r+0x3e>
    d838:	mov	r0, r6
    d83a:	mov	r1, r4
    d83c:	bl	e9a8 <_free_r>
    d840:	ldr	r0, [sp, #12]
    d842:	add.w	sp, sp, #532	; 0x214
    d846:	pop	{r4, r5, r6, r7, pc}
    d848:	mov.w	r0, #4294967295
    d84c:	b.n	d842 <_vdprintf_r+0x3e>
    d84e:	nop

0000d850 <vdprintf>:
    d850:	push	{r4}
    d852:	ldr	r4, [pc, #16]	; (d864 <vdprintf+0x14>)
    d854:	mov	r3, r2
    d856:	mov	r2, r1
    d858:	mov	r1, r0
    d85a:	ldr	r0, [r4, #0]
    d85c:	ldr.w	r4, [sp], #4
    d860:	b.w	d804 <_vdprintf_r>
    d864:	.word	0x2000191c

0000d868 <__ascii_wctomb>:
    d868:	cbz	r1, d874 <__ascii_wctomb+0xc>
    d86a:	cmp	r2, #255	; 0xff
    d86c:	bhi.n	d878 <__ascii_wctomb+0x10>
    d86e:	strb	r2, [r1, #0]
    d870:	movs	r0, #1
    d872:	bx	lr
    d874:	mov	r0, r1
    d876:	bx	lr
    d878:	movs	r3, #138	; 0x8a
    d87a:	str	r3, [r0, #0]
    d87c:	mov.w	r0, #4294967295
    d880:	bx	lr
    d882:	nop

0000d884 <_write_r>:
    d884:	push	{r4, r5, r6, lr}
    d886:	mov	r5, r1
    d888:	ldr	r4, [pc, #32]	; (d8ac <_write_r+0x28>)
    d88a:	mov	r1, r2
    d88c:	mov	r6, r0
    d88e:	mov	r2, r3
    d890:	mov	r0, r5
    d892:	movs	r3, #0
    d894:	str	r3, [r4, #0]
    d896:	bl	a390 <_write>
    d89a:	adds	r3, r0, #1
    d89c:	beq.n	d8a0 <_write_r+0x1c>
    d89e:	pop	{r4, r5, r6, pc}
    d8a0:	ldr	r3, [r4, #0]
    d8a2:	cmp	r3, #0
    d8a4:	beq.n	d89e <_write_r+0x1a>
    d8a6:	str	r3, [r6, #0]
    d8a8:	pop	{r4, r5, r6, pc}
    d8aa:	nop
    d8ac:	.word	0x2000f240

0000d8b0 <quorem>:
    d8b0:	ldr	r2, [r0, #16]
    d8b2:	ldr	r3, [r1, #16]
    d8b4:	cmp	r3, r2
    d8b6:	bgt.w	d9d4 <quorem+0x124>
    d8ba:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d8be:	add.w	r8, r3, #4294967295
    d8c2:	add.w	r7, r1, #20
    d8c6:	add.w	fp, r0, #20
    d8ca:	ldr.w	r2, [r7, r8, lsl #2]
    d8ce:	ldr.w	r3, [fp, r8, lsl #2]
    d8d2:	mov.w	r4, r8, lsl #2
    d8d6:	sub	sp, #12
    d8d8:	adds	r2, #1
    d8da:	udiv	r9, r3, r2
    d8de:	add.w	r3, fp, r4
    d8e2:	str	r4, [sp, #0]
    d8e4:	add.w	sl, r7, r4
    d8e8:	str	r3, [sp, #4]
    d8ea:	cmp.w	r9, #0
    d8ee:	beq.n	d964 <quorem+0xb4>
    d8f0:	movs	r5, #0
    d8f2:	mov	ip, r7
    d8f4:	mov	lr, fp
    d8f6:	mov	r3, r5
    d8f8:	ldr.w	r6, [ip], #4
    d8fc:	ldr.w	r2, [lr]
    d900:	uxth	r4, r6
    d902:	mla	r5, r9, r4, r5
    d906:	lsrs	r6, r6, #16
    d908:	lsrs	r4, r5, #16
    d90a:	mla	r4, r9, r6, r4
    d90e:	uxth	r5, r5
    d910:	subs	r3, r3, r5
    d912:	uxth	r6, r4
    d914:	uxtah	r3, r3, r2
    d918:	rsb	r6, r6, r2, lsr #16
    d91c:	add.w	r6, r6, r3, asr #16
    d920:	uxth	r3, r3
    d922:	orr.w	r3, r3, r6, lsl #16
    d926:	cmp	sl, ip
    d928:	str.w	r3, [lr], #4
    d92c:	mov.w	r5, r4, lsr #16
    d930:	mov.w	r3, r6, asr #16
    d934:	bcs.n	d8f8 <quorem+0x48>
    d936:	ldr	r3, [sp, #0]
    d938:	ldr.w	r3, [fp, r3]
    d93c:	cbnz	r3, d964 <quorem+0xb4>
    d93e:	ldr	r4, [sp, #4]
    d940:	subs	r3, r4, #4
    d942:	cmp	fp, r3
    d944:	bcs.n	d960 <quorem+0xb0>
    d946:	ldr.w	r3, [r4, #-4]
    d94a:	cbnz	r3, d960 <quorem+0xb0>
    d94c:	sub.w	r3, r4, #8
    d950:	b.n	d958 <quorem+0xa8>
    d952:	ldr	r2, [r3, #0]
    d954:	subs	r3, #4
    d956:	cbnz	r2, d960 <quorem+0xb0>
    d958:	cmp	fp, r3
    d95a:	add.w	r8, r8, #4294967295
    d95e:	bcc.n	d952 <quorem+0xa2>
    d960:	str.w	r8, [r0, #16]
    d964:	mov	r4, r0
    d966:	bl	f050 <__mcmp>
    d96a:	cmp	r0, #0
    d96c:	blt.n	d9cc <quorem+0x11c>
    d96e:	add.w	r9, r9, #1
    d972:	mov	r5, fp
    d974:	movs	r3, #0
    d976:	ldr.w	r1, [r7], #4
    d97a:	ldr	r0, [r5, #0]
    d97c:	uxth	r2, r1
    d97e:	subs	r2, r3, r2
    d980:	lsrs	r1, r1, #16
    d982:	uxtah	r2, r2, r0
    d986:	rsb	r3, r1, r0, lsr #16
    d98a:	add.w	r3, r3, r2, asr #16
    d98e:	uxth	r1, r2
    d990:	orr.w	r1, r1, r3, lsl #16
    d994:	cmp	sl, r7
    d996:	str.w	r1, [r5], #4
    d99a:	mov.w	r3, r3, asr #16
    d99e:	bcs.n	d976 <quorem+0xc6>
    d9a0:	ldr.w	r2, [fp, r8, lsl #2]
    d9a4:	add.w	r3, fp, r8, lsl #2
    d9a8:	cbnz	r2, d9cc <quorem+0x11c>
    d9aa:	subs	r2, r3, #4
    d9ac:	cmp	fp, r2
    d9ae:	bcs.n	d9c8 <quorem+0x118>
    d9b0:	ldr.w	r2, [r3, #-4]
    d9b4:	cbnz	r2, d9c8 <quorem+0x118>
    d9b6:	subs	r3, #8
    d9b8:	b.n	d9c0 <quorem+0x110>
    d9ba:	ldr	r2, [r3, #0]
    d9bc:	subs	r3, #4
    d9be:	cbnz	r2, d9c8 <quorem+0x118>
    d9c0:	cmp	fp, r3
    d9c2:	add.w	r8, r8, #4294967295
    d9c6:	bcc.n	d9ba <quorem+0x10a>
    d9c8:	str.w	r8, [r4, #16]
    d9cc:	mov	r0, r9
    d9ce:	add	sp, #12
    d9d0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d9d4:	movs	r0, #0
    d9d6:	bx	lr

0000d9d8 <_dtoa_r>:
    d9d8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d9dc:	vmov	r6, r7, d0
    d9e0:	sub	sp, #108	; 0x6c
    d9e2:	ldr	r4, [r0, #64]	; 0x40
    d9e4:	ldr	r5, [sp, #144]	; 0x90
    d9e6:	str	r1, [sp, #0]
    d9e8:	mov	r9, r0
    d9ea:	str	r2, [sp, #20]
    d9ec:	str	r3, [sp, #12]
    d9ee:	vmov	sl, s0
    d9f2:	mov	fp, r7
    d9f4:	cbz	r4, da0c <_dtoa_r+0x34>
    d9f6:	ldr	r2, [r0, #68]	; 0x44
    d9f8:	str	r2, [r4, #4]
    d9fa:	movs	r3, #1
    d9fc:	lsls	r3, r2
    d9fe:	str	r3, [r4, #8]
    da00:	mov	r1, r4
    da02:	bl	ec8c <_Bfree>
    da06:	movs	r3, #0
    da08:	str.w	r3, [r9, #64]	; 0x40
    da0c:	cmp.w	fp, #0
    da10:	mov	r4, fp
    da12:	blt.n	da7e <_dtoa_r+0xa6>
    da14:	movs	r3, #0
    da16:	str	r3, [r5, #0]
    da18:	ldr	r3, [pc, #644]	; (dca0 <_dtoa_r+0x2c8>)
    da1a:	mov	r2, r3
    da1c:	ands	r3, r4
    da1e:	cmp	r3, r2
    da20:	beq.n	da50 <_dtoa_r+0x78>
    da22:	movs	r2, #0
    da24:	movs	r3, #0
    da26:	mov	r0, sl
    da28:	mov	r1, fp
    da2a:	bl	af60 <__aeabi_dcmpeq>
    da2e:	mov	r6, sl
    da30:	mov	r7, fp
    da32:	mov	r8, r0
    da34:	cbz	r0, da8a <_dtoa_r+0xb2>
    da36:	ldr	r2, [sp, #12]
    da38:	movs	r3, #1
    da3a:	str	r3, [r2, #0]
    da3c:	ldr	r3, [sp, #148]	; 0x94
    da3e:	cmp	r3, #0
    da40:	beq.w	dbc0 <_dtoa_r+0x1e8>
    da44:	ldr	r0, [pc, #604]	; (dca4 <_dtoa_r+0x2cc>)
    da46:	str	r0, [r3, #0]
    da48:	subs	r0, #1
    da4a:	add	sp, #108	; 0x6c
    da4c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    da50:	ldr	r2, [sp, #12]
    da52:	movw	r3, #9999	; 0x270f
    da56:	str	r3, [r2, #0]
    da58:	cmp.w	sl, #0
    da5c:	beq.w	db94 <_dtoa_r+0x1bc>
    da60:	ldr	r0, [pc, #580]	; (dca8 <_dtoa_r+0x2d0>)
    da62:	ldr	r3, [sp, #148]	; 0x94
    da64:	cmp	r3, #0
    da66:	beq.n	da4a <_dtoa_r+0x72>
    da68:	ldrb	r3, [r0, #3]
    da6a:	cmp	r3, #0
    da6c:	beq.w	dbc4 <_dtoa_r+0x1ec>
    da70:	add.w	r3, r0, #8
    da74:	ldr	r2, [sp, #148]	; 0x94
    da76:	str	r3, [r2, #0]
    da78:	add	sp, #108	; 0x6c
    da7a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    da7e:	movs	r3, #1
    da80:	bic.w	r4, fp, #2147483648	; 0x80000000
    da84:	str	r3, [r5, #0]
    da86:	mov	fp, r4
    da88:	b.n	da18 <_dtoa_r+0x40>
    da8a:	add	r2, sp, #96	; 0x60
    da8c:	add	r1, sp, #100	; 0x64
    da8e:	vmov	d0, r6, r7
    da92:	mov	r0, r9
    da94:	bl	f1a8 <__d2b>
    da98:	lsrs	r5, r4, #20
    da9a:	str	r0, [sp, #40]	; 0x28
    da9c:	bne.w	dba6 <_dtoa_r+0x1ce>
    daa0:	ldr	r5, [sp, #96]	; 0x60
    daa2:	ldr	r6, [sp, #100]	; 0x64
    daa4:	add	r6, r5
    daa6:	addw	r3, r6, #1074	; 0x432
    daaa:	cmp	r3, #32
    daac:	ble.w	dfc0 <_dtoa_r+0x5e8>
    dab0:	rsb	r3, r3, #64	; 0x40
    dab4:	addw	r0, r6, #1042	; 0x412
    dab8:	lsls	r4, r3
    daba:	lsr.w	r0, sl, r0
    dabe:	orrs	r0, r4
    dac0:	bl	a9a4 <__aeabi_ui2d>
    dac4:	movs	r3, #1
    dac6:	subs	r4, r6, #1
    dac8:	sub.w	r1, r1, #32505856	; 0x1f00000
    dacc:	str	r3, [sp, #60]	; 0x3c
    dace:	movs	r2, #0
    dad0:	ldr	r3, [pc, #472]	; (dcac <_dtoa_r+0x2d4>)
    dad2:	bl	a728 <__aeabi_dsub>
    dad6:	add	r3, pc, #432	; (adr r3, dc88 <_dtoa_r+0x2b0>)
    dad8:	ldrd	r2, r3, [r3]
    dadc:	bl	aa90 <__aeabi_dmul>
    dae0:	add	r3, pc, #428	; (adr r3, dc90 <_dtoa_r+0x2b8>)
    dae2:	ldrd	r2, r3, [r3]
    dae6:	bl	a72c <__adddf3>
    daea:	mov	r6, r0
    daec:	mov	r0, r4
    daee:	mov	r7, r1
    daf0:	bl	a9c4 <__aeabi_i2d>
    daf4:	add	r3, pc, #416	; (adr r3, dc98 <_dtoa_r+0x2c0>)
    daf6:	ldrd	r2, r3, [r3]
    dafa:	bl	aa90 <__aeabi_dmul>
    dafe:	mov	r2, r0
    db00:	mov	r3, r1
    db02:	mov	r0, r6
    db04:	mov	r1, r7
    db06:	bl	a72c <__adddf3>
    db0a:	mov	r6, r0
    db0c:	mov	r7, r1
    db0e:	bl	f424 <__aeabi_d2iz>
    db12:	movs	r2, #0
    db14:	str	r0, [sp, #16]
    db16:	movs	r3, #0
    db18:	mov	r0, r6
    db1a:	mov	r1, r7
    db1c:	bl	af74 <__aeabi_dcmplt>
    db20:	cmp	r0, #0
    db22:	bne.w	df76 <_dtoa_r+0x59e>
    db26:	ldr	r6, [sp, #16]
    db28:	cmp	r6, #22
    db2a:	bhi.w	df70 <_dtoa_r+0x598>
    db2e:	ldr	r3, [pc, #384]	; (dcb0 <_dtoa_r+0x2d8>)
    db30:	add.w	r3, r3, r6, lsl #3
    db34:	ldrd	r0, r1, [r3]
    db38:	mov	r2, sl
    db3a:	mov	r3, fp
    db3c:	bl	afb0 <__aeabi_dcmpgt>
    db40:	cmp	r0, #0
    db42:	beq.w	dfca <_dtoa_r+0x5f2>
    db46:	subs	r3, r6, #1
    db48:	str	r3, [sp, #16]
    db4a:	movs	r3, #0
    db4c:	str	r3, [sp, #52]	; 0x34
    db4e:	subs	r5, r5, r4
    db50:	subs.w	r8, r5, #1
    db54:	bmi.w	dfac <_dtoa_r+0x5d4>
    db58:	movs	r3, #0
    db5a:	str	r3, [sp, #28]
    db5c:	ldr	r3, [sp, #16]
    db5e:	cmp	r3, #0
    db60:	blt.w	df9a <_dtoa_r+0x5c2>
    db64:	add	r8, r3
    db66:	str	r3, [sp, #48]	; 0x30
    db68:	movs	r3, #0
    db6a:	str	r3, [sp, #24]
    db6c:	ldr	r3, [sp, #0]
    db6e:	cmp	r3, #9
    db70:	bhi.n	dbc8 <_dtoa_r+0x1f0>
    db72:	cmp	r3, #5
    db74:	ble.w	e800 <_dtoa_r+0xe28>
    db78:	subs	r3, #4
    db7a:	str	r3, [sp, #0]
    db7c:	movs	r6, #0
    db7e:	ldr	r3, [sp, #0]
    db80:	subs	r3, #2
    db82:	cmp	r3, #3
    db84:	bhi.w	e7ce <_dtoa_r+0xdf6>
    db88:	tbh	[pc, r3, lsl #1]
    db8c:	.word	0x0224032b
    db90:	.word	0x04500336
    db94:	ldr	r3, [pc, #272]	; (dca8 <_dtoa_r+0x2d0>)
    db96:	ldr	r2, [pc, #284]	; (dcb4 <_dtoa_r+0x2dc>)
    db98:	ubfx	r0, r4, #0, #20
    db9c:	cmp	r0, #0
    db9e:	ite	ne
    dba0:	movne	r0, r3
    dba2:	moveq	r0, r2
    dba4:	b.n	da62 <_dtoa_r+0x8a>
    dba6:	ubfx	r3, fp, #0, #20
    dbaa:	orr.w	r1, r3, #1069547520	; 0x3fc00000
    dbae:	subw	r4, r5, #1023	; 0x3ff
    dbb2:	mov	r0, sl
    dbb4:	str.w	r8, [sp, #60]	; 0x3c
    dbb8:	orr.w	r1, r1, #3145728	; 0x300000
    dbbc:	ldr	r5, [sp, #96]	; 0x60
    dbbe:	b.n	dace <_dtoa_r+0xf6>
    dbc0:	ldr	r0, [pc, #244]	; (dcb8 <_dtoa_r+0x2e0>)
    dbc2:	b.n	da4a <_dtoa_r+0x72>
    dbc4:	adds	r3, r0, #3
    dbc6:	b.n	da74 <_dtoa_r+0x9c>
    dbc8:	movs	r1, #0
    dbca:	str.w	r1, [r9, #68]	; 0x44
    dbce:	mov	r0, r9
    dbd0:	mov	r4, r1
    dbd2:	str	r1, [sp, #0]
    dbd4:	bl	ec40 <_Balloc>
    dbd8:	mov.w	r3, #4294967295
    dbdc:	str	r3, [sp, #32]
    dbde:	str	r3, [sp, #56]	; 0x38
    dbe0:	movs	r3, #1
    dbe2:	str	r0, [sp, #36]	; 0x24
    dbe4:	str.w	r0, [r9, #64]	; 0x40
    dbe8:	str	r4, [sp, #20]
    dbea:	str	r3, [sp, #44]	; 0x2c
    dbec:	ldr	r3, [sp, #100]	; 0x64
    dbee:	cmp	r3, #0
    dbf0:	blt.w	dd94 <_dtoa_r+0x3bc>
    dbf4:	ldr	r2, [sp, #16]
    dbf6:	cmp	r2, #14
    dbf8:	bgt.w	dd94 <_dtoa_r+0x3bc>
    dbfc:	ldr	r3, [pc, #176]	; (dcb0 <_dtoa_r+0x2d8>)
    dbfe:	add.w	r3, r3, r2, lsl #3
    dc02:	vldr	d7, [r3]
    dc06:	ldr	r3, [sp, #20]
    dc08:	cmp	r3, #0
    dc0a:	vstr	d7, [sp]
    dc0e:	blt.w	e20e <_dtoa_r+0x836>
    dc12:	mov	r6, sl
    dc14:	mov	r7, fp
    dc16:	ldrd	sl, fp, [sp]
    dc1a:	mov	r0, r6
    dc1c:	mov	r2, sl
    dc1e:	mov	r3, fp
    dc20:	mov	r1, r7
    dc22:	bl	ace4 <__aeabi_ddiv>
    dc26:	bl	f424 <__aeabi_d2iz>
    dc2a:	mov	r4, r0
    dc2c:	bl	a9c4 <__aeabi_i2d>
    dc30:	mov	r2, sl
    dc32:	mov	r3, fp
    dc34:	bl	aa90 <__aeabi_dmul>
    dc38:	mov	r3, r1
    dc3a:	mov	r2, r0
    dc3c:	mov	r1, r7
    dc3e:	mov	r0, r6
    dc40:	bl	a728 <__aeabi_dsub>
    dc44:	ldr	r5, [sp, #36]	; 0x24
    dc46:	add.w	r3, r4, #48	; 0x30
    dc4a:	strb	r3, [r5, #0]
    dc4c:	ldr	r3, [sp, #32]
    dc4e:	cmp	r3, #1
    dc50:	mov	r6, r0
    dc52:	mov	r7, r1
    dc54:	add.w	r5, r5, #1
    dc58:	beq.n	dd1e <_dtoa_r+0x346>
    dc5a:	movs	r2, #0
    dc5c:	ldr	r3, [pc, #92]	; (dcbc <_dtoa_r+0x2e4>)
    dc5e:	bl	aa90 <__aeabi_dmul>
    dc62:	movs	r2, #0
    dc64:	movs	r3, #0
    dc66:	mov	r6, r0
    dc68:	mov	r7, r1
    dc6a:	bl	af60 <__aeabi_dcmpeq>
    dc6e:	cmp	r0, #0
    dc70:	bne.n	dd6e <_dtoa_r+0x396>
    dc72:	str.w	r9, [sp, #20]
    dc76:	ldr.w	sl, [sp, #32]
    dc7a:	ldr.w	fp, [sp, #36]	; 0x24
    dc7e:	ldrd	r8, r9, [sp]
    dc82:	b.n	dcd6 <_dtoa_r+0x2fe>
    dc84:	nop.w
    dc88:	.word	0x636f4361
    dc8c:	.word	0x3fd287a7
    dc90:	.word	0x8b60c8b3
    dc94:	.word	0x3fc68a28
    dc98:	.word	0x509f79fb
    dc9c:	.word	0x3fd34413
    dca0:	.word	0x7ff00000
    dca4:	.word	0x20000dad
    dca8:	.word	0x20000e0c
    dcac:	.word	0x3ff80000
    dcb0:	.word	0x20000328
    dcb4:	.word	0x20000e00
    dcb8:	.word	0x20000dac
    dcbc:	.word	0x40240000
    dcc0:	bl	aa90 <__aeabi_dmul>
    dcc4:	movs	r2, #0
    dcc6:	movs	r3, #0
    dcc8:	mov	r6, r0
    dcca:	mov	r7, r1
    dccc:	bl	af60 <__aeabi_dcmpeq>
    dcd0:	cmp	r0, #0
    dcd2:	bne.w	e432 <_dtoa_r+0xa5a>
    dcd6:	mov	r2, r8
    dcd8:	mov	r3, r9
    dcda:	mov	r0, r6
    dcdc:	mov	r1, r7
    dcde:	bl	ace4 <__aeabi_ddiv>
    dce2:	bl	f424 <__aeabi_d2iz>
    dce6:	mov	r4, r0
    dce8:	bl	a9c4 <__aeabi_i2d>
    dcec:	mov	r2, r8
    dcee:	mov	r3, r9
    dcf0:	bl	aa90 <__aeabi_dmul>
    dcf4:	mov	r2, r0
    dcf6:	mov	r3, r1
    dcf8:	mov	r0, r6
    dcfa:	mov	r1, r7
    dcfc:	bl	a728 <__aeabi_dsub>
    dd00:	add.w	lr, r4, #48	; 0x30
    dd04:	strb.w	lr, [r5], #1
    dd08:	rsb	lr, fp, r5
    dd0c:	cmp	lr, sl
    dd0e:	mov	r6, r0
    dd10:	mov	r7, r1
    dd12:	mov.w	r2, #0
    dd16:	ldr	r3, [pc, #696]	; (dfd0 <_dtoa_r+0x5f8>)
    dd18:	bne.n	dcc0 <_dtoa_r+0x2e8>
    dd1a:	ldr.w	r9, [sp, #20]
    dd1e:	mov	r2, r6
    dd20:	mov	r3, r7
    dd22:	mov	r0, r6
    dd24:	mov	r1, r7
    dd26:	bl	a72c <__adddf3>
    dd2a:	mov	r6, r0
    dd2c:	mov	r7, r1
    dd2e:	mov	r2, r0
    dd30:	mov	r3, r1
    dd32:	ldrd	r0, r1, [sp]
    dd36:	bl	af74 <__aeabi_dcmplt>
    dd3a:	cbnz	r0, dd4e <_dtoa_r+0x376>
    dd3c:	mov	r2, r6
    dd3e:	mov	r3, r7
    dd40:	ldrd	r0, r1, [sp]
    dd44:	bl	af60 <__aeabi_dcmpeq>
    dd48:	cbz	r0, dd6e <_dtoa_r+0x396>
    dd4a:	lsls	r3, r4, #31
    dd4c:	bpl.n	dd6e <_dtoa_r+0x396>
    dd4e:	ldrb.w	r4, [r5, #-1]
    dd52:	ldr	r2, [sp, #36]	; 0x24
    dd54:	subs	r3, r5, #1
    dd56:	b.n	dd62 <_dtoa_r+0x38a>
    dd58:	cmp	r2, r3
    dd5a:	beq.w	e556 <_dtoa_r+0xb7e>
    dd5e:	ldrb.w	r4, [r3, #-1]!
    dd62:	cmp	r4, #57	; 0x39
    dd64:	add.w	r5, r3, #1
    dd68:	beq.n	dd58 <_dtoa_r+0x380>
    dd6a:	adds	r4, #1
    dd6c:	strb	r4, [r3, #0]
    dd6e:	ldr	r1, [sp, #40]	; 0x28
    dd70:	mov	r0, r9
    dd72:	bl	ec8c <_Bfree>
    dd76:	movs	r2, #0
    dd78:	ldr	r3, [sp, #16]
    dd7a:	strb	r2, [r5, #0]
    dd7c:	ldr	r2, [sp, #12]
    dd7e:	adds	r3, #1
    dd80:	str	r3, [r2, #0]
    dd82:	ldr	r3, [sp, #148]	; 0x94
    dd84:	cmp	r3, #0
    dd86:	beq.w	e4c0 <_dtoa_r+0xae8>
    dd8a:	ldr	r0, [sp, #36]	; 0x24
    dd8c:	str	r5, [r3, #0]
    dd8e:	add	sp, #108	; 0x6c
    dd90:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dd94:	ldr	r2, [sp, #44]	; 0x2c
    dd96:	cmp	r2, #0
    dd98:	beq.w	dfb8 <_dtoa_r+0x5e0>
    dd9c:	ldr	r2, [sp, #0]
    dd9e:	cmp	r2, #1
    dda0:	ble.w	e252 <_dtoa_r+0x87a>
    dda4:	ldr	r3, [sp, #32]
    dda6:	ldr	r2, [sp, #24]
    dda8:	subs	r7, r3, #1
    ddaa:	cmp	r2, r7
    ddac:	blt.w	e4c6 <_dtoa_r+0xaee>
    ddb0:	subs	r7, r2, r7
    ddb2:	ldr	r3, [sp, #32]
    ddb4:	cmp	r3, #0
    ddb6:	blt.w	e6ba <_dtoa_r+0xce2>
    ddba:	ldr	r5, [sp, #28]
    ddbc:	ldr	r3, [sp, #32]
    ddbe:	ldr	r2, [sp, #28]
    ddc0:	movs	r1, #1
    ddc2:	add	r2, r3
    ddc4:	mov	r0, r9
    ddc6:	str	r2, [sp, #28]
    ddc8:	add	r8, r3
    ddca:	bl	edbc <__i2b>
    ddce:	mov	r6, r0
    ddd0:	cbz	r5, ddec <_dtoa_r+0x414>
    ddd2:	cmp.w	r8, #0
    ddd6:	ble.n	ddec <_dtoa_r+0x414>
    ddd8:	cmp	r5, r8
    ddda:	ldr	r2, [sp, #28]
    dddc:	mov	r3, r5
    ddde:	it	ge
    dde0:	movge	r3, r8
    dde2:	subs	r2, r2, r3
    dde4:	str	r2, [sp, #28]
    dde6:	subs	r5, r5, r3
    dde8:	rsb	r8, r3, r8
    ddec:	ldr	r3, [sp, #24]
    ddee:	cmp	r3, #0
    ddf0:	ble.w	e3de <_dtoa_r+0xa06>
    ddf4:	ldr	r2, [sp, #44]	; 0x2c
    ddf6:	cmp	r2, #0
    ddf8:	beq.w	e200 <_dtoa_r+0x828>
    ddfc:	cmp	r7, #0
    ddfe:	beq.w	e200 <_dtoa_r+0x828>
    de02:	mov	r1, r6
    de04:	mov	r2, r7
    de06:	mov	r0, r9
    de08:	bl	ef00 <__pow5mult>
    de0c:	ldr	r2, [sp, #40]	; 0x28
    de0e:	mov	r1, r0
    de10:	mov	r6, r0
    de12:	mov	r0, r9
    de14:	bl	edd0 <__multiply>
    de18:	ldr	r1, [sp, #40]	; 0x28
    de1a:	mov	r4, r0
    de1c:	mov	r0, r9
    de1e:	bl	ec8c <_Bfree>
    de22:	ldr	r3, [sp, #24]
    de24:	subs	r3, r3, r7
    de26:	str	r3, [sp, #24]
    de28:	bne.w	e1fe <_dtoa_r+0x826>
    de2c:	movs	r1, #1
    de2e:	mov	r0, r9
    de30:	bl	edbc <__i2b>
    de34:	ldr	r3, [sp, #48]	; 0x30
    de36:	str	r0, [sp, #24]
    de38:	cmp	r3, #0
    de3a:	beq.w	e268 <_dtoa_r+0x890>
    de3e:	mov	r1, r0
    de40:	mov	r2, r3
    de42:	mov	r0, r9
    de44:	bl	ef00 <__pow5mult>
    de48:	ldr	r3, [sp, #0]
    de4a:	str	r0, [sp, #24]
    de4c:	cmp	r3, #1
    de4e:	ble.w	e438 <_dtoa_r+0xa60>
    de52:	movs	r7, #0
    de54:	ldr	r2, [sp, #24]
    de56:	ldr	r3, [r2, #16]
    de58:	add.w	r3, r2, r3, lsl #2
    de5c:	ldr	r0, [r3, #16]
    de5e:	bl	ed20 <__hi0bits>
    de62:	rsb	r0, r0, #32
    de66:	add	r0, r8
    de68:	ands.w	r0, r0, #31
    de6c:	beq.w	e264 <_dtoa_r+0x88c>
    de70:	rsb	r3, r0, #32
    de74:	cmp	r3, #4
    de76:	ble.w	e7f4 <_dtoa_r+0xe1c>
    de7a:	rsb	r0, r0, #28
    de7e:	ldr	r3, [sp, #28]
    de80:	add	r3, r0
    de82:	str	r3, [sp, #28]
    de84:	add	r5, r0
    de86:	add	r8, r0
    de88:	ldr	r3, [sp, #28]
    de8a:	cmp	r3, #0
    de8c:	ble.n	de9a <_dtoa_r+0x4c2>
    de8e:	mov	r1, r4
    de90:	mov	r2, r3
    de92:	mov	r0, r9
    de94:	bl	efa0 <__lshift>
    de98:	mov	r4, r0
    de9a:	cmp.w	r8, #0
    de9e:	ble.n	deac <_dtoa_r+0x4d4>
    dea0:	mov	r2, r8
    dea2:	ldr	r1, [sp, #24]
    dea4:	mov	r0, r9
    dea6:	bl	efa0 <__lshift>
    deaa:	str	r0, [sp, #24]
    deac:	ldr	r3, [sp, #52]	; 0x34
    deae:	cmp	r3, #0
    deb0:	bne.w	e3a8 <_dtoa_r+0x9d0>
    deb4:	ldr	r3, [sp, #32]
    deb6:	cmp	r3, #0
    deb8:	ble.w	e3e2 <_dtoa_r+0xa0a>
    debc:	ldr	r3, [sp, #44]	; 0x2c
    debe:	cmp	r3, #0
    dec0:	bne.w	e2ac <_dtoa_r+0x8d4>
    dec4:	ldr.w	fp, [sp, #36]	; 0x24
    dec8:	ldr	r7, [sp, #32]
    deca:	ldr.w	r8, [sp, #24]
    dece:	mov	r5, fp
    ded0:	b.n	ded8 <_dtoa_r+0x500>
    ded2:	bl	eca0 <__multadd>
    ded6:	mov	r4, r0
    ded8:	mov	r1, r8
    deda:	mov	r0, r4
    dedc:	bl	d8b0 <quorem>
    dee0:	add.w	sl, r0, #48	; 0x30
    dee4:	strb.w	sl, [r5], #1
    dee8:	rsb	r3, fp, r5
    deec:	cmp	r3, r7
    deee:	mov.w	r2, #10
    def2:	mov.w	r3, #0
    def6:	mov	r1, r4
    def8:	mov	r0, r9
    defa:	blt.n	ded2 <_dtoa_r+0x4fa>
    defc:	ldr	r3, [sp, #36]	; 0x24
    defe:	ldr	r2, [sp, #32]
    df00:	cmp	r2, #1
    df02:	ite	ge
    df04:	addge	r3, r3, r2
    df06:	addlt	r3, #1
    df08:	mov	r5, r3
    df0a:	mov.w	fp, #0
    df0e:	mov	r1, r4
    df10:	movs	r2, #1
    df12:	mov	r0, r9
    df14:	bl	efa0 <__lshift>
    df18:	ldr	r1, [sp, #24]
    df1a:	str	r0, [sp, #40]	; 0x28
    df1c:	bl	f050 <__mcmp>
    df20:	cmp	r0, #0
    df22:	ble.w	e530 <_dtoa_r+0xb58>
    df26:	ldrb.w	r2, [r5, #-1]
    df2a:	ldr	r1, [sp, #36]	; 0x24
    df2c:	subs	r3, r5, #1
    df2e:	b.n	df3a <_dtoa_r+0x562>
    df30:	cmp	r3, r1
    df32:	beq.w	e41e <_dtoa_r+0xa46>
    df36:	ldrb.w	r2, [r3, #-1]!
    df3a:	cmp	r2, #57	; 0x39
    df3c:	add.w	r5, r3, #1
    df40:	beq.n	df30 <_dtoa_r+0x558>
    df42:	adds	r2, #1
    df44:	strb	r2, [r3, #0]
    df46:	ldr	r1, [sp, #24]
    df48:	mov	r0, r9
    df4a:	bl	ec8c <_Bfree>
    df4e:	cmp	r6, #0
    df50:	beq.w	dd6e <_dtoa_r+0x396>
    df54:	cmp.w	fp, #0
    df58:	beq.n	df66 <_dtoa_r+0x58e>
    df5a:	cmp	fp, r6
    df5c:	beq.n	df66 <_dtoa_r+0x58e>
    df5e:	mov	r1, fp
    df60:	mov	r0, r9
    df62:	bl	ec8c <_Bfree>
    df66:	mov	r1, r6
    df68:	mov	r0, r9
    df6a:	bl	ec8c <_Bfree>
    df6e:	b.n	dd6e <_dtoa_r+0x396>
    df70:	movs	r3, #1
    df72:	str	r3, [sp, #52]	; 0x34
    df74:	b.n	db4e <_dtoa_r+0x176>
    df76:	ldr.w	r8, [sp, #16]
    df7a:	mov	r0, r8
    df7c:	bl	a9c4 <__aeabi_i2d>
    df80:	mov	r2, r0
    df82:	mov	r3, r1
    df84:	mov	r0, r6
    df86:	mov	r1, r7
    df88:	bl	af60 <__aeabi_dcmpeq>
    df8c:	cmp	r0, #0
    df8e:	bne.w	db26 <_dtoa_r+0x14e>
    df92:	add.w	r3, r8, #4294967295
    df96:	str	r3, [sp, #16]
    df98:	b.n	db26 <_dtoa_r+0x14e>
    df9a:	ldr	r2, [sp, #28]
    df9c:	ldr	r3, [sp, #16]
    df9e:	subs	r2, r2, r3
    dfa0:	negs	r3, r3
    dfa2:	str	r3, [sp, #24]
    dfa4:	movs	r3, #0
    dfa6:	str	r2, [sp, #28]
    dfa8:	str	r3, [sp, #48]	; 0x30
    dfaa:	b.n	db6c <_dtoa_r+0x194>
    dfac:	rsb	r3, r8, #0
    dfb0:	str	r3, [sp, #28]
    dfb2:	mov.w	r8, #0
    dfb6:	b.n	db5c <_dtoa_r+0x184>
    dfb8:	ldr	r7, [sp, #24]
    dfba:	ldr	r5, [sp, #28]
    dfbc:	ldr	r6, [sp, #44]	; 0x2c
    dfbe:	b.n	ddd0 <_dtoa_r+0x3f8>
    dfc0:	rsb	r4, r3, #32
    dfc4:	lsl.w	r0, sl, r4
    dfc8:	b.n	dac0 <_dtoa_r+0xe8>
    dfca:	str	r0, [sp, #52]	; 0x34
    dfcc:	b.n	db4e <_dtoa_r+0x176>
    dfce:	nop
    dfd0:	.word	0x40240000
    dfd4:	movs	r3, #0
    dfd6:	str	r3, [sp, #44]	; 0x2c
    dfd8:	ldr	r3, [sp, #16]
    dfda:	ldr	r2, [sp, #20]
    dfdc:	add	r3, r2
    dfde:	str	r3, [sp, #56]	; 0x38
    dfe0:	adds	r3, #1
    dfe2:	cmp	r3, #0
    dfe4:	str	r3, [sp, #32]
    dfe6:	ble.w	e4e4 <_dtoa_r+0xb0c>
    dfea:	ldr	r4, [sp, #32]
    dfec:	mov	r5, r4
    dfee:	movs	r1, #0
    dff0:	cmp	r5, #23
    dff2:	str.w	r1, [r9, #68]	; 0x44
    dff6:	bls.n	e010 <_dtoa_r+0x638>
    dff8:	movs	r2, #1
    dffa:	movs	r3, #4
    dffc:	lsls	r3, r3, #1
    dffe:	add.w	r0, r3, #20
    e002:	cmp	r0, r5
    e004:	mov	r1, r2
    e006:	add.w	r2, r2, #1
    e00a:	bls.n	dffc <_dtoa_r+0x624>
    e00c:	str.w	r1, [r9, #68]	; 0x44
    e010:	mov	r0, r9
    e012:	bl	ec40 <_Balloc>
    e016:	cmp	r4, #14
    e018:	str	r0, [sp, #36]	; 0x24
    e01a:	str.w	r0, [r9, #64]	; 0x40
    e01e:	bhi.w	dbec <_dtoa_r+0x214>
    e022:	cmp	r6, #0
    e024:	beq.w	dbec <_dtoa_r+0x214>
    e028:	ldr	r1, [sp, #16]
    e02a:	cmp	r1, #0
    e02c:	strd	sl, fp, [sp, #64]	; 0x40
    e030:	ble.w	e568 <_dtoa_r+0xb90>
    e034:	ldr	r3, [pc, #576]	; (e278 <_dtoa_r+0x8a0>)
    e036:	and.w	r2, r1, #15
    e03a:	asrs	r6, r1, #4
    e03c:	add.w	r3, r3, r2, lsl #3
    e040:	lsls	r0, r6, #27
    e042:	ldrd	r4, r5, [r3]
    e046:	bpl.w	e4d6 <_dtoa_r+0xafe>
    e04a:	ldr	r3, [pc, #560]	; (e27c <_dtoa_r+0x8a4>)
    e04c:	mov	r0, sl
    e04e:	mov	r1, fp
    e050:	ldrd	r2, r3, [r3, #32]
    e054:	bl	ace4 <__aeabi_ddiv>
    e058:	strd	r0, r1, [sp, #72]	; 0x48
    e05c:	and.w	r6, r6, #15
    e060:	mov.w	sl, #3
    e064:	cbz	r6, e088 <_dtoa_r+0x6b0>
    e066:	ldr	r7, [pc, #532]	; (e27c <_dtoa_r+0x8a4>)
    e068:	lsls	r1, r6, #31
    e06a:	bpl.n	e080 <_dtoa_r+0x6a8>
    e06c:	mov	r0, r4
    e06e:	mov	r1, r5
    e070:	ldrd	r2, r3, [r7]
    e074:	bl	aa90 <__aeabi_dmul>
    e078:	add.w	sl, sl, #1
    e07c:	mov	r4, r0
    e07e:	mov	r5, r1
    e080:	asrs	r6, r6, #1
    e082:	add.w	r7, r7, #8
    e086:	bne.n	e068 <_dtoa_r+0x690>
    e088:	mov	r2, r4
    e08a:	mov	r3, r5
    e08c:	ldrd	r0, r1, [sp, #72]	; 0x48
    e090:	bl	ace4 <__aeabi_ddiv>
    e094:	mov	r6, r0
    e096:	mov	r7, r1
    e098:	ldr	r3, [sp, #52]	; 0x34
    e09a:	cbz	r3, e0ae <_dtoa_r+0x6d6>
    e09c:	movs	r2, #0
    e09e:	ldr	r3, [pc, #480]	; (e280 <_dtoa_r+0x8a8>)
    e0a0:	mov	r0, r6
    e0a2:	mov	r1, r7
    e0a4:	bl	af74 <__aeabi_dcmplt>
    e0a8:	cmp	r0, #0
    e0aa:	bne.w	e6e2 <_dtoa_r+0xd0a>
    e0ae:	mov	r0, sl
    e0b0:	bl	a9c4 <__aeabi_i2d>
    e0b4:	mov	r2, r6
    e0b6:	mov	r3, r7
    e0b8:	bl	aa90 <__aeabi_dmul>
    e0bc:	ldr	r3, [pc, #452]	; (e284 <_dtoa_r+0x8ac>)
    e0be:	movs	r2, #0
    e0c0:	bl	a72c <__adddf3>
    e0c4:	ldr	r3, [sp, #32]
    e0c6:	mov	r4, r0
    e0c8:	sub.w	r5, r1, #54525952	; 0x3400000
    e0cc:	cmp	r3, #0
    e0ce:	beq.w	e488 <_dtoa_r+0xab0>
    e0d2:	ldr	r3, [sp, #16]
    e0d4:	str	r3, [sp, #88]	; 0x58
    e0d6:	ldr	r3, [sp, #32]
    e0d8:	str	r3, [sp, #72]	; 0x48
    e0da:	ldr	r3, [sp, #44]	; 0x2c
    e0dc:	cmp	r3, #0
    e0de:	beq.w	e60a <_dtoa_r+0xc32>
    e0e2:	ldr	r2, [sp, #72]	; 0x48
    e0e4:	ldr	r3, [pc, #400]	; (e278 <_dtoa_r+0x8a0>)
    e0e6:	ldr	r1, [pc, #416]	; (e288 <_dtoa_r+0x8b0>)
    e0e8:	add.w	r3, r3, r2, lsl #3
    e0ec:	ldrd	r2, r3, [r3, #-8]
    e0f0:	movs	r0, #0
    e0f2:	bl	ace4 <__aeabi_ddiv>
    e0f6:	mov	r2, r4
    e0f8:	mov	r3, r5
    e0fa:	bl	a728 <__aeabi_dsub>
    e0fe:	mov	sl, r0
    e100:	mov	fp, r1
    e102:	mov	r0, r6
    e104:	mov	r1, r7
    e106:	bl	f424 <__aeabi_d2iz>
    e10a:	mov	r4, r0
    e10c:	bl	a9c4 <__aeabi_i2d>
    e110:	mov	r2, r0
    e112:	mov	r3, r1
    e114:	mov	r0, r6
    e116:	mov	r1, r7
    e118:	bl	a728 <__aeabi_dsub>
    e11c:	adds	r4, #48	; 0x30
    e11e:	ldr	r5, [sp, #36]	; 0x24
    e120:	uxtb	r4, r4
    e122:	mov	r6, r0
    e124:	mov	r7, r1
    e126:	strb	r4, [r5, #0]
    e128:	mov	r2, r0
    e12a:	mov	r3, r1
    e12c:	mov	r0, sl
    e12e:	mov	r1, fp
    e130:	adds	r5, #1
    e132:	bl	afb0 <__aeabi_dcmpgt>
    e136:	cmp	r0, #0
    e138:	bne.n	e1dc <_dtoa_r+0x804>
    e13a:	mov	r2, r6
    e13c:	mov	r3, r7
    e13e:	movs	r0, #0
    e140:	ldr	r1, [pc, #316]	; (e280 <_dtoa_r+0x8a8>)
    e142:	bl	a728 <__aeabi_dsub>
    e146:	mov	r2, r0
    e148:	mov	r3, r1
    e14a:	mov	r0, sl
    e14c:	mov	r1, fp
    e14e:	bl	afb0 <__aeabi_dcmpgt>
    e152:	cmp	r0, #0
    e154:	bne.w	e768 <_dtoa_r+0xd90>
    e158:	ldr	r2, [sp, #72]	; 0x48
    e15a:	cmp	r2, #1
    e15c:	ble.w	e54e <_dtoa_r+0xb76>
    e160:	ldr	r3, [sp, #72]	; 0x48
    e162:	ldr	r2, [sp, #36]	; 0x24
    e164:	str.w	r8, [sp, #72]	; 0x48
    e168:	add	r3, r2
    e16a:	mov	r8, r3
    e16c:	b.n	e18a <_dtoa_r+0x7b2>
    e16e:	movs	r0, #0
    e170:	ldr	r1, [pc, #268]	; (e280 <_dtoa_r+0x8a8>)
    e172:	bl	a728 <__aeabi_dsub>
    e176:	mov	r2, sl
    e178:	mov	r3, fp
    e17a:	bl	af74 <__aeabi_dcmplt>
    e17e:	cmp	r0, #0
    e180:	bne.w	e768 <_dtoa_r+0xd90>
    e184:	cmp	r5, r8
    e186:	beq.w	e54a <_dtoa_r+0xb72>
    e18a:	mov	r0, sl
    e18c:	mov	r1, fp
    e18e:	movs	r2, #0
    e190:	ldr	r3, [pc, #248]	; (e28c <_dtoa_r+0x8b4>)
    e192:	bl	aa90 <__aeabi_dmul>
    e196:	movs	r2, #0
    e198:	ldr	r3, [pc, #240]	; (e28c <_dtoa_r+0x8b4>)
    e19a:	mov	sl, r0
    e19c:	mov	fp, r1
    e19e:	mov	r0, r6
    e1a0:	mov	r1, r7
    e1a2:	bl	aa90 <__aeabi_dmul>
    e1a6:	mov	r7, r1
    e1a8:	mov	r6, r0
    e1aa:	bl	f424 <__aeabi_d2iz>
    e1ae:	mov	r4, r0
    e1b0:	bl	a9c4 <__aeabi_i2d>
    e1b4:	mov	r2, r0
    e1b6:	mov	r3, r1
    e1b8:	mov	r0, r6
    e1ba:	mov	r1, r7
    e1bc:	bl	a728 <__aeabi_dsub>
    e1c0:	adds	r4, #48	; 0x30
    e1c2:	uxtb	r4, r4
    e1c4:	mov	r2, sl
    e1c6:	mov	r3, fp
    e1c8:	strb.w	r4, [r5], #1
    e1cc:	mov	r6, r0
    e1ce:	mov	r7, r1
    e1d0:	bl	af74 <__aeabi_dcmplt>
    e1d4:	mov	r2, r6
    e1d6:	mov	r3, r7
    e1d8:	cmp	r0, #0
    e1da:	beq.n	e16e <_dtoa_r+0x796>
    e1dc:	ldr	r3, [sp, #88]	; 0x58
    e1de:	str	r3, [sp, #16]
    e1e0:	b.n	dd6e <_dtoa_r+0x396>
    e1e2:	movs	r3, #0
    e1e4:	str	r3, [sp, #44]	; 0x2c
    e1e6:	ldr	r3, [sp, #20]
    e1e8:	cmp	r3, #0
    e1ea:	ble.w	e4ee <_dtoa_r+0xb16>
    e1ee:	mov	r5, r3
    e1f0:	mov	r4, r3
    e1f2:	str	r3, [sp, #56]	; 0x38
    e1f4:	str	r3, [sp, #32]
    e1f6:	b.n	dfee <_dtoa_r+0x616>
    e1f8:	movs	r3, #1
    e1fa:	str	r3, [sp, #44]	; 0x2c
    e1fc:	b.n	e1e6 <_dtoa_r+0x80e>
    e1fe:	str	r4, [sp, #40]	; 0x28
    e200:	ldr	r2, [sp, #24]
    e202:	ldr	r1, [sp, #40]	; 0x28
    e204:	mov	r0, r9
    e206:	bl	ef00 <__pow5mult>
    e20a:	mov	r4, r0
    e20c:	b.n	de2c <_dtoa_r+0x454>
    e20e:	ldr	r3, [sp, #32]
    e210:	cmp	r3, #0
    e212:	bgt.w	dc12 <_dtoa_r+0x23a>
    e216:	bne.w	e4b8 <_dtoa_r+0xae0>
    e21a:	movs	r2, #0
    e21c:	ldr	r3, [pc, #112]	; (e290 <_dtoa_r+0x8b8>)
    e21e:	ldrd	r0, r1, [sp]
    e222:	bl	aa90 <__aeabi_dmul>
    e226:	mov	r3, fp
    e228:	mov	r2, sl
    e22a:	bl	af9c <__aeabi_dcmpge>
    e22e:	ldr	r3, [sp, #32]
    e230:	str	r3, [sp, #24]
    e232:	mov	r6, r3
    e234:	cmp	r0, #0
    e236:	beq.w	e40e <_dtoa_r+0xa36>
    e23a:	ldr	r3, [sp, #20]
    e23c:	ldr	r5, [sp, #36]	; 0x24
    e23e:	mvns	r3, r3
    e240:	str	r3, [sp, #16]
    e242:	ldr	r1, [sp, #24]
    e244:	mov	r0, r9
    e246:	bl	ec8c <_Bfree>
    e24a:	cmp	r6, #0
    e24c:	beq.w	dd6e <_dtoa_r+0x396>
    e250:	b.n	df66 <_dtoa_r+0x58e>
    e252:	ldr	r2, [sp, #60]	; 0x3c
    e254:	cmp	r2, #0
    e256:	beq.w	e6ca <_dtoa_r+0xcf2>
    e25a:	addw	r3, r3, #1075	; 0x433
    e25e:	ldr	r7, [sp, #24]
    e260:	ldr	r5, [sp, #28]
    e262:	b.n	ddbe <_dtoa_r+0x3e6>
    e264:	movs	r0, #28
    e266:	b.n	de7e <_dtoa_r+0x4a6>
    e268:	ldr	r3, [sp, #0]
    e26a:	cmp	r3, #1
    e26c:	ble.w	e770 <_dtoa_r+0xd98>
    e270:	ldr	r7, [sp, #48]	; 0x30
    e272:	movs	r0, #1
    e274:	b.n	de66 <_dtoa_r+0x48e>
    e276:	nop
    e278:	.word	0x20000328
    e27c:	.word	0x20000300
    e280:	.word	0x3ff00000
    e284:	.word	0x401c0000
    e288:	.word	0x3fe00000
    e28c:	.word	0x40240000
    e290:	.word	0x40140000
    e294:	mov	r1, r6
    e296:	movs	r3, #0
    e298:	movs	r2, #10
    e29a:	mov	r0, r9
    e29c:	bl	eca0 <__multadd>
    e2a0:	ldr	r3, [sp, #56]	; 0x38
    e2a2:	cmp	r3, #0
    e2a4:	mov	r6, r0
    e2a6:	ble.w	e7c4 <_dtoa_r+0xdec>
    e2aa:	str	r3, [sp, #32]
    e2ac:	cmp	r5, #0
    e2ae:	ble.n	e2bc <_dtoa_r+0x8e4>
    e2b0:	mov	r1, r6
    e2b2:	mov	r2, r5
    e2b4:	mov	r0, r9
    e2b6:	bl	efa0 <__lshift>
    e2ba:	mov	r6, r0
    e2bc:	cmp	r7, #0
    e2be:	bne.w	e5ba <_dtoa_r+0xbe2>
    e2c2:	mov	r8, r6
    e2c4:	ldr	r3, [sp, #32]
    e2c6:	ldr	r2, [sp, #36]	; 0x24
    e2c8:	subs	r3, #1
    e2ca:	adds	r3, r2, r3
    e2cc:	str	r3, [sp, #32]
    e2ce:	and.w	r3, sl, #1
    e2d2:	str	r3, [sp, #40]	; 0x28
    e2d4:	mov	r7, r2
    e2d6:	ldr.w	fp, [sp, #24]
    e2da:	mov	r0, r4
    e2dc:	mov	r1, fp
    e2de:	bl	d8b0 <quorem>
    e2e2:	mov	r1, r6
    e2e4:	mov	r5, r0
    e2e6:	mov	r0, r4
    e2e8:	bl	f050 <__mcmp>
    e2ec:	mov	r2, r8
    e2ee:	mov	r1, fp
    e2f0:	mov	sl, r0
    e2f2:	mov	r0, r9
    e2f4:	bl	f094 <__mdiff>
    e2f8:	ldr	r2, [r0, #12]
    e2fa:	mov	fp, r0
    e2fc:	add.w	r3, r5, #48	; 0x30
    e300:	cmp	r2, #0
    e302:	bne.n	e398 <_dtoa_r+0x9c0>
    e304:	mov	r1, r0
    e306:	mov	r0, r4
    e308:	str	r3, [sp, #28]
    e30a:	bl	f050 <__mcmp>
    e30e:	mov	r1, fp
    e310:	str	r0, [sp, #20]
    e312:	mov	r0, r9
    e314:	bl	ec8c <_Bfree>
    e318:	ldr	r2, [sp, #20]
    e31a:	ldr	r3, [sp, #28]
    e31c:	cbnz	r2, e32a <_dtoa_r+0x952>
    e31e:	ldr	r1, [sp, #0]
    e320:	cbnz	r1, e32a <_dtoa_r+0x952>
    e322:	ldr	r1, [sp, #40]	; 0x28
    e324:	cmp	r1, #0
    e326:	beq.w	e794 <_dtoa_r+0xdbc>
    e32a:	cmp.w	sl, #0
    e32e:	blt.w	e4f8 <_dtoa_r+0xb20>
    e332:	bne.n	e340 <_dtoa_r+0x968>
    e334:	ldr	r1, [sp, #0]
    e336:	cbnz	r1, e340 <_dtoa_r+0x968>
    e338:	ldr	r1, [sp, #40]	; 0x28
    e33a:	cmp	r1, #0
    e33c:	beq.w	e4f8 <_dtoa_r+0xb20>
    e340:	cmp	r2, #0
    e342:	bgt.w	e5e2 <_dtoa_r+0xc0a>
    e346:	ldr	r2, [sp, #32]
    e348:	strb	r3, [r7, #0]
    e34a:	add.w	sl, r7, #1
    e34e:	cmp	r7, r2
    e350:	mov	r5, sl
    e352:	beq.w	e5fa <_dtoa_r+0xc22>
    e356:	mov	r1, r4
    e358:	movs	r3, #0
    e35a:	movs	r2, #10
    e35c:	mov	r0, r9
    e35e:	bl	eca0 <__multadd>
    e362:	cmp	r6, r8
    e364:	mov	r4, r0
    e366:	mov	r1, r6
    e368:	mov.w	r3, #0
    e36c:	mov.w	r2, #10
    e370:	mov	r0, r9
    e372:	beq.n	e38c <_dtoa_r+0x9b4>
    e374:	bl	eca0 <__multadd>
    e378:	mov	r1, r8
    e37a:	mov	r6, r0
    e37c:	movs	r3, #0
    e37e:	movs	r2, #10
    e380:	mov	r0, r9
    e382:	bl	eca0 <__multadd>
    e386:	mov	r7, sl
    e388:	mov	r8, r0
    e38a:	b.n	e2d6 <_dtoa_r+0x8fe>
    e38c:	bl	eca0 <__multadd>
    e390:	mov	r7, sl
    e392:	mov	r6, r0
    e394:	mov	r8, r0
    e396:	b.n	e2d6 <_dtoa_r+0x8fe>
    e398:	mov	r1, r0
    e39a:	mov	r0, r9
    e39c:	str	r3, [sp, #20]
    e39e:	bl	ec8c <_Bfree>
    e3a2:	movs	r2, #1
    e3a4:	ldr	r3, [sp, #20]
    e3a6:	b.n	e32a <_dtoa_r+0x952>
    e3a8:	ldr	r1, [sp, #24]
    e3aa:	mov	r0, r4
    e3ac:	bl	f050 <__mcmp>
    e3b0:	cmp	r0, #0
    e3b2:	bge.w	deb4 <_dtoa_r+0x4dc>
    e3b6:	mov	r1, r4
    e3b8:	ldr	r4, [sp, #16]
    e3ba:	movs	r3, #0
    e3bc:	subs	r4, #1
    e3be:	movs	r2, #10
    e3c0:	mov	r0, r9
    e3c2:	str	r4, [sp, #16]
    e3c4:	bl	eca0 <__multadd>
    e3c8:	ldr	r3, [sp, #44]	; 0x2c
    e3ca:	mov	r4, r0
    e3cc:	cmp	r3, #0
    e3ce:	bne.w	e294 <_dtoa_r+0x8bc>
    e3d2:	ldr	r3, [sp, #56]	; 0x38
    e3d4:	cmp	r3, #0
    e3d6:	ble.w	e7b4 <_dtoa_r+0xddc>
    e3da:	str	r3, [sp, #32]
    e3dc:	b.n	dec4 <_dtoa_r+0x4ec>
    e3de:	ldr	r4, [sp, #40]	; 0x28
    e3e0:	b.n	de2c <_dtoa_r+0x454>
    e3e2:	ldr	r3, [sp, #0]
    e3e4:	cmp	r3, #2
    e3e6:	ble.w	debc <_dtoa_r+0x4e4>
    e3ea:	ldr	r3, [sp, #32]
    e3ec:	cmp	r3, #0
    e3ee:	bne.w	e72c <_dtoa_r+0xd54>
    e3f2:	ldr	r1, [sp, #24]
    e3f4:	movs	r2, #5
    e3f6:	mov	r0, r9
    e3f8:	bl	eca0 <__multadd>
    e3fc:	mov	r1, r0
    e3fe:	str	r0, [sp, #24]
    e400:	mov	r0, r4
    e402:	bl	f050 <__mcmp>
    e406:	cmp	r0, #0
    e408:	str	r4, [sp, #40]	; 0x28
    e40a:	ble.w	e23a <_dtoa_r+0x862>
    e40e:	ldr	r2, [sp, #16]
    e410:	ldr	r1, [sp, #36]	; 0x24
    e412:	movs	r3, #49	; 0x31
    e414:	adds	r2, #1
    e416:	str	r2, [sp, #16]
    e418:	strb	r3, [r1, #0]
    e41a:	adds	r5, r1, #1
    e41c:	b.n	e242 <_dtoa_r+0x86a>
    e41e:	ldr	r2, [sp, #16]
    e420:	adds	r2, #1
    e422:	str	r2, [sp, #16]
    e424:	ldr	r2, [sp, #36]	; 0x24
    e426:	movs	r3, #49	; 0x31
    e428:	strb	r3, [r2, #0]
    e42a:	b.n	df46 <_dtoa_r+0x56e>
    e42c:	movs	r3, #1
    e42e:	str	r3, [sp, #44]	; 0x2c
    e430:	b.n	dfd8 <_dtoa_r+0x600>
    e432:	ldr.w	r9, [sp, #20]
    e436:	b.n	dd6e <_dtoa_r+0x396>
    e438:	cmp.w	sl, #0
    e43c:	bne.w	de52 <_dtoa_r+0x47a>
    e440:	ubfx	r3, fp, #0, #20
    e444:	cmp	r3, #0
    e446:	bne.w	e6c6 <_dtoa_r+0xcee>
    e44a:	bic.w	r7, fp, #2147483648	; 0x80000000
    e44e:	lsrs	r7, r7, #20
    e450:	lsls	r7, r7, #20
    e452:	cbz	r7, e460 <_dtoa_r+0xa88>
    e454:	ldr	r3, [sp, #28]
    e456:	adds	r3, #1
    e458:	str	r3, [sp, #28]
    e45a:	add.w	r8, r8, #1
    e45e:	movs	r7, #1
    e460:	ldr	r3, [sp, #48]	; 0x30
    e462:	movs	r0, #1
    e464:	cmp	r3, #0
    e466:	beq.w	de66 <_dtoa_r+0x48e>
    e46a:	b.n	de54 <_dtoa_r+0x47c>
    e46c:	mov	r0, sl
    e46e:	bl	a9c4 <__aeabi_i2d>
    e472:	mov	r2, r6
    e474:	mov	r3, r7
    e476:	bl	aa90 <__aeabi_dmul>
    e47a:	movs	r2, #0
    e47c:	ldr	r3, [pc, #764]	; (e77c <_dtoa_r+0xda4>)
    e47e:	bl	a72c <__adddf3>
    e482:	mov	r4, r0
    e484:	sub.w	r5, r1, #54525952	; 0x3400000
    e488:	mov	r0, r6
    e48a:	mov	r1, r7
    e48c:	movs	r2, #0
    e48e:	ldr	r3, [pc, #752]	; (e780 <_dtoa_r+0xda8>)
    e490:	bl	a728 <__aeabi_dsub>
    e494:	mov	r2, r4
    e496:	mov	r3, r5
    e498:	mov	r6, r0
    e49a:	mov	r7, r1
    e49c:	bl	afb0 <__aeabi_dcmpgt>
    e4a0:	cmp	r0, #0
    e4a2:	bne.w	e602 <_dtoa_r+0xc2a>
    e4a6:	mov	r2, r4
    e4a8:	add.w	r3, r5, #2147483648	; 0x80000000
    e4ac:	mov	r0, r6
    e4ae:	mov	r1, r7
    e4b0:	bl	af74 <__aeabi_dcmplt>
    e4b4:	cmp	r0, #0
    e4b6:	beq.n	e54e <_dtoa_r+0xb76>
    e4b8:	movs	r3, #0
    e4ba:	str	r3, [sp, #24]
    e4bc:	mov	r6, r3
    e4be:	b.n	e23a <_dtoa_r+0x862>
    e4c0:	ldr	r0, [sp, #36]	; 0x24
    e4c2:	b.w	da4a <_dtoa_r+0x72>
    e4c6:	ldr	r3, [sp, #24]
    e4c8:	ldr	r2, [sp, #48]	; 0x30
    e4ca:	str	r7, [sp, #24]
    e4cc:	subs	r3, r7, r3
    e4ce:	add	r2, r3
    e4d0:	str	r2, [sp, #48]	; 0x30
    e4d2:	movs	r7, #0
    e4d4:	b.n	ddb2 <_dtoa_r+0x3da>
    e4d6:	vldr	d7, [sp, #64]	; 0x40
    e4da:	mov.w	sl, #2
    e4de:	vstr	d7, [sp, #72]	; 0x48
    e4e2:	b.n	e064 <_dtoa_r+0x68c>
    e4e4:	mov	r4, r3
    e4e6:	movs	r1, #0
    e4e8:	str.w	r1, [r9, #68]	; 0x44
    e4ec:	b.n	e010 <_dtoa_r+0x638>
    e4ee:	movs	r4, #1
    e4f0:	str	r4, [sp, #56]	; 0x38
    e4f2:	str	r4, [sp, #32]
    e4f4:	str	r4, [sp, #20]
    e4f6:	b.n	e4e6 <_dtoa_r+0xb0e>
    e4f8:	cmp	r2, #0
    e4fa:	mov	sl, r3
    e4fc:	ble.n	e522 <_dtoa_r+0xb4a>
    e4fe:	mov	r1, r4
    e500:	movs	r2, #1
    e502:	mov	r0, r9
    e504:	bl	efa0 <__lshift>
    e508:	ldr	r1, [sp, #24]
    e50a:	mov	r4, r0
    e50c:	bl	f050 <__mcmp>
    e510:	cmp	r0, #0
    e512:	ble.w	e7a6 <_dtoa_r+0xdce>
    e516:	cmp.w	sl, #57	; 0x39
    e51a:	beq.w	e730 <_dtoa_r+0xd58>
    e51e:	add.w	sl, r5, #49	; 0x31
    e522:	mov	fp, r6
    e524:	strb.w	sl, [r7]
    e528:	adds	r5, r7, #1
    e52a:	mov	r6, r8
    e52c:	str	r4, [sp, #40]	; 0x28
    e52e:	b.n	df46 <_dtoa_r+0x56e>
    e530:	bne.n	e53c <_dtoa_r+0xb64>
    e532:	tst.w	sl, #1
    e536:	beq.n	e53c <_dtoa_r+0xb64>
    e538:	b.n	df26 <_dtoa_r+0x54e>
    e53a:	mov	r5, r2
    e53c:	ldrb.w	r3, [r5, #-1]
    e540:	cmp	r3, #48	; 0x30
    e542:	add.w	r2, r5, #4294967295
    e546:	beq.n	e53a <_dtoa_r+0xb62>
    e548:	b.n	df46 <_dtoa_r+0x56e>
    e54a:	ldr.w	r8, [sp, #72]	; 0x48
    e54e:	ldrd	sl, fp, [sp, #64]	; 0x40
    e552:	b.w	dbec <_dtoa_r+0x214>
    e556:	ldr	r1, [sp, #36]	; 0x24
    e558:	movs	r2, #48	; 0x30
    e55a:	strb	r2, [r1, #0]
    e55c:	ldr	r2, [sp, #16]
    e55e:	ldrb.w	r4, [r5, #-1]
    e562:	adds	r2, #1
    e564:	str	r2, [sp, #16]
    e566:	b.n	dd6a <_dtoa_r+0x392>
    e568:	ldr	r3, [sp, #16]
    e56a:	negs	r4, r3
    e56c:	cmp	r4, #0
    e56e:	beq.w	e6d8 <_dtoa_r+0xd00>
    e572:	ldr	r3, [pc, #528]	; (e784 <_dtoa_r+0xdac>)
    e574:	and.w	r2, r4, #15
    e578:	add.w	r3, r3, r2, lsl #3
    e57c:	ldrd	r2, r3, [r3]
    e580:	ldrd	r0, r1, [sp, #64]	; 0x40
    e584:	bl	aa90 <__aeabi_dmul>
    e588:	asrs	r4, r4, #4
    e58a:	mov	r6, r0
    e58c:	mov	r7, r1
    e58e:	beq.w	e7be <_dtoa_r+0xde6>
    e592:	ldr	r5, [pc, #500]	; (e788 <_dtoa_r+0xdb0>)
    e594:	mov.w	sl, #2
    e598:	lsls	r2, r4, #31
    e59a:	bpl.n	e5b0 <_dtoa_r+0xbd8>
    e59c:	mov	r0, r6
    e59e:	mov	r1, r7
    e5a0:	ldrd	r2, r3, [r5]
    e5a4:	bl	aa90 <__aeabi_dmul>
    e5a8:	add.w	sl, sl, #1
    e5ac:	mov	r6, r0
    e5ae:	mov	r7, r1
    e5b0:	asrs	r4, r4, #1
    e5b2:	add.w	r5, r5, #8
    e5b6:	bne.n	e598 <_dtoa_r+0xbc0>
    e5b8:	b.n	e098 <_dtoa_r+0x6c0>
    e5ba:	ldr	r1, [r6, #4]
    e5bc:	mov	r0, r9
    e5be:	bl	ec40 <_Balloc>
    e5c2:	ldr	r3, [r6, #16]
    e5c4:	adds	r2, r3, #2
    e5c6:	mov	r5, r0
    e5c8:	lsls	r2, r2, #2
    e5ca:	add.w	r1, r6, #12
    e5ce:	adds	r0, #12
    e5d0:	bl	80b4 <memcpy>
    e5d4:	mov	r1, r5
    e5d6:	movs	r2, #1
    e5d8:	mov	r0, r9
    e5da:	bl	efa0 <__lshift>
    e5de:	mov	r8, r0
    e5e0:	b.n	e2c4 <_dtoa_r+0x8ec>
    e5e2:	cmp	r3, #57	; 0x39
    e5e4:	beq.w	e730 <_dtoa_r+0xd58>
    e5e8:	add.w	sl, r3, #1
    e5ec:	mov	fp, r6
    e5ee:	strb.w	sl, [r7]
    e5f2:	adds	r5, r7, #1
    e5f4:	mov	r6, r8
    e5f6:	str	r4, [sp, #40]	; 0x28
    e5f8:	b.n	df46 <_dtoa_r+0x56e>
    e5fa:	mov	fp, r6
    e5fc:	mov	sl, r3
    e5fe:	mov	r6, r8
    e600:	b.n	df0e <_dtoa_r+0x536>
    e602:	movs	r3, #0
    e604:	str	r3, [sp, #24]
    e606:	mov	r6, r3
    e608:	b.n	e40e <_dtoa_r+0xa36>
    e60a:	ldr	r3, [sp, #72]	; 0x48
    e60c:	ldr	r1, [pc, #372]	; (e784 <_dtoa_r+0xdac>)
    e60e:	subs	r2, r3, #1
    e610:	add.w	r1, r1, r2, lsl #3
    e614:	mov	r3, r5
    e616:	str	r2, [sp, #92]	; 0x5c
    e618:	ldrd	r0, r1, [r1]
    e61c:	mov	r2, r4
    e61e:	bl	aa90 <__aeabi_dmul>
    e622:	strd	r0, r1, [sp, #80]	; 0x50
    e626:	mov	r1, r7
    e628:	mov	r0, r6
    e62a:	bl	f424 <__aeabi_d2iz>
    e62e:	mov	r4, r0
    e630:	bl	a9c4 <__aeabi_i2d>
    e634:	mov	r3, r1
    e636:	mov	r2, r0
    e638:	mov	r1, r7
    e63a:	mov	r0, r6
    e63c:	bl	a728 <__aeabi_dsub>
    e640:	ldr	r3, [sp, #72]	; 0x48
    e642:	mov	r7, r1
    e644:	ldr	r1, [sp, #36]	; 0x24
    e646:	adds	r4, #48	; 0x30
    e648:	cmp	r3, #1
    e64a:	mov	r6, r0
    e64c:	strb	r4, [r1, #0]
    e64e:	add.w	r5, r1, #1
    e652:	beq.n	e696 <_dtoa_r+0xcbe>
    e654:	ldr	r3, [sp, #72]	; 0x48
    e656:	ldr	r2, [sp, #36]	; 0x24
    e658:	add	r3, r2
    e65a:	mov	sl, r3
    e65c:	mov	fp, r5
    e65e:	movs	r2, #0
    e660:	ldr	r3, [pc, #296]	; (e78c <_dtoa_r+0xdb4>)
    e662:	mov	r0, r6
    e664:	mov	r1, r7
    e666:	bl	aa90 <__aeabi_dmul>
    e66a:	mov	r7, r1
    e66c:	mov	r6, r0
    e66e:	bl	f424 <__aeabi_d2iz>
    e672:	mov	r4, r0
    e674:	bl	a9c4 <__aeabi_i2d>
    e678:	adds	r4, #48	; 0x30
    e67a:	mov	r2, r0
    e67c:	mov	r3, r1
    e67e:	mov	r0, r6
    e680:	mov	r1, r7
    e682:	bl	a728 <__aeabi_dsub>
    e686:	strb.w	r4, [fp], #1
    e68a:	cmp	sl, fp
    e68c:	mov	r6, r0
    e68e:	mov	r7, r1
    e690:	bne.n	e65e <_dtoa_r+0xc86>
    e692:	ldr	r3, [sp, #92]	; 0x5c
    e694:	add	r5, r3
    e696:	movs	r2, #0
    e698:	ldr	r3, [pc, #244]	; (e790 <_dtoa_r+0xdb8>)
    e69a:	ldrd	r0, r1, [sp, #80]	; 0x50
    e69e:	bl	a72c <__adddf3>
    e6a2:	mov	r2, r6
    e6a4:	mov	r3, r7
    e6a6:	bl	af74 <__aeabi_dcmplt>
    e6aa:	cmp	r0, #0
    e6ac:	beq.n	e740 <_dtoa_r+0xd68>
    e6ae:	ldr	r3, [sp, #88]	; 0x58
    e6b0:	str	r3, [sp, #16]
    e6b2:	ldrb.w	r4, [r5, #-1]
    e6b6:	b.w	dd52 <_dtoa_r+0x37a>
    e6ba:	ldr	r3, [sp, #28]
    e6bc:	ldr	r2, [sp, #32]
    e6be:	subs	r5, r3, r2
    e6c0:	movs	r3, #0
    e6c2:	b.w	ddbe <_dtoa_r+0x3e6>
    e6c6:	movs	r7, #0
    e6c8:	b.n	e460 <_dtoa_r+0xa88>
    e6ca:	ldr	r3, [sp, #96]	; 0x60
    e6cc:	ldr	r7, [sp, #24]
    e6ce:	ldr	r5, [sp, #28]
    e6d0:	rsb	r3, r3, #54	; 0x36
    e6d4:	b.w	ddbe <_dtoa_r+0x3e6>
    e6d8:	ldrd	r6, r7, [sp, #64]	; 0x40
    e6dc:	mov.w	sl, #2
    e6e0:	b.n	e098 <_dtoa_r+0x6c0>
    e6e2:	ldr	r3, [sp, #32]
    e6e4:	cmp	r3, #0
    e6e6:	beq.w	e46c <_dtoa_r+0xa94>
    e6ea:	ldr	r3, [sp, #56]	; 0x38
    e6ec:	cmp	r3, #0
    e6ee:	ble.w	e54e <_dtoa_r+0xb76>
    e6f2:	movs	r2, #0
    e6f4:	ldr	r3, [pc, #148]	; (e78c <_dtoa_r+0xdb4>)
    e6f6:	mov	r0, r6
    e6f8:	mov	r1, r7
    e6fa:	bl	aa90 <__aeabi_dmul>
    e6fe:	mov	r6, r0
    e700:	mov	r7, r1
    e702:	add.w	r0, sl, #1
    e706:	bl	a9c4 <__aeabi_i2d>
    e70a:	mov	r2, r6
    e70c:	mov	r3, r7
    e70e:	bl	aa90 <__aeabi_dmul>
    e712:	movs	r2, #0
    e714:	ldr	r3, [pc, #100]	; (e77c <_dtoa_r+0xda4>)
    e716:	bl	a72c <__adddf3>
    e71a:	ldr	r2, [sp, #16]
    e71c:	ldr	r3, [sp, #56]	; 0x38
    e71e:	str	r3, [sp, #72]	; 0x48
    e720:	subs	r2, #1
    e722:	mov	r4, r0
    e724:	sub.w	r5, r1, #54525952	; 0x3400000
    e728:	str	r2, [sp, #88]	; 0x58
    e72a:	b.n	e0da <_dtoa_r+0x702>
    e72c:	str	r4, [sp, #40]	; 0x28
    e72e:	b.n	e23a <_dtoa_r+0x862>
    e730:	movs	r2, #57	; 0x39
    e732:	mov	fp, r6
    e734:	str	r4, [sp, #40]	; 0x28
    e736:	mov	r6, r8
    e738:	strb	r2, [r7, #0]
    e73a:	adds	r5, r7, #1
    e73c:	b.w	df2a <_dtoa_r+0x552>
    e740:	ldrd	r2, r3, [sp, #80]	; 0x50
    e744:	movs	r0, #0
    e746:	ldr	r1, [pc, #72]	; (e790 <_dtoa_r+0xdb8>)
    e748:	bl	a728 <__aeabi_dsub>
    e74c:	mov	r2, r6
    e74e:	mov	r3, r7
    e750:	bl	afb0 <__aeabi_dcmpgt>
    e754:	cbnz	r0, e75a <_dtoa_r+0xd82>
    e756:	b.n	e54e <_dtoa_r+0xb76>
    e758:	mov	r5, r2
    e75a:	ldrb.w	r3, [r5, #-1]
    e75e:	cmp	r3, #48	; 0x30
    e760:	add.w	r2, r5, #4294967295
    e764:	beq.n	e758 <_dtoa_r+0xd80>
    e766:	b.n	e1dc <_dtoa_r+0x804>
    e768:	ldr	r3, [sp, #88]	; 0x58
    e76a:	str	r3, [sp, #16]
    e76c:	b.w	dd52 <_dtoa_r+0x37a>
    e770:	cmp.w	sl, #0
    e774:	bne.w	e270 <_dtoa_r+0x898>
    e778:	b.n	e440 <_dtoa_r+0xa68>
    e77a:	nop
    e77c:	.word	0x401c0000
    e780:	.word	0x40140000
    e784:	.word	0x20000328
    e788:	.word	0x20000300
    e78c:	.word	0x40240000
    e790:	.word	0x3fe00000
    e794:	cmp	r3, #57	; 0x39
    e796:	mov	fp, sl
    e798:	mov	sl, r3
    e79a:	beq.n	e730 <_dtoa_r+0xd58>
    e79c:	cmp.w	fp, #0
    e7a0:	bgt.w	e51e <_dtoa_r+0xb46>
    e7a4:	b.n	e522 <_dtoa_r+0xb4a>
    e7a6:	bne.w	e522 <_dtoa_r+0xb4a>
    e7aa:	tst.w	sl, #1
    e7ae:	beq.w	e522 <_dtoa_r+0xb4a>
    e7b2:	b.n	e516 <_dtoa_r+0xb3e>
    e7b4:	ldr	r3, [sp, #0]
    e7b6:	cmp	r3, #2
    e7b8:	bgt.n	e806 <_dtoa_r+0xe2e>
    e7ba:	ldr	r3, [sp, #56]	; 0x38
    e7bc:	b.n	e3da <_dtoa_r+0xa02>
    e7be:	mov.w	sl, #2
    e7c2:	b.n	e098 <_dtoa_r+0x6c0>
    e7c4:	ldr	r3, [sp, #0]
    e7c6:	cmp	r3, #2
    e7c8:	bgt.n	e806 <_dtoa_r+0xe2e>
    e7ca:	ldr	r3, [sp, #56]	; 0x38
    e7cc:	b.n	e2aa <_dtoa_r+0x8d2>
    e7ce:	movs	r4, #0
    e7d0:	str.w	r4, [r9, #68]	; 0x44
    e7d4:	mov	r1, r4
    e7d6:	mov	r0, r9
    e7d8:	bl	ec40 <_Balloc>
    e7dc:	mov.w	r3, #4294967295
    e7e0:	str	r3, [sp, #32]
    e7e2:	str	r3, [sp, #56]	; 0x38
    e7e4:	movs	r3, #1
    e7e6:	str	r0, [sp, #36]	; 0x24
    e7e8:	str	r4, [sp, #20]
    e7ea:	str.w	r0, [r9, #64]	; 0x40
    e7ee:	str	r3, [sp, #44]	; 0x2c
    e7f0:	b.w	dbec <_dtoa_r+0x214>
    e7f4:	beq.w	de88 <_dtoa_r+0x4b0>
    e7f8:	rsb	r0, r0, #60	; 0x3c
    e7fc:	b.w	de7e <_dtoa_r+0x4a6>
    e800:	movs	r6, #1
    e802:	b.w	db7e <_dtoa_r+0x1a6>
    e806:	ldr	r3, [sp, #56]	; 0x38
    e808:	str	r3, [sp, #32]
    e80a:	b.n	e3ea <_dtoa_r+0xa12>

0000e80c <fcvtbuf>:
    e80c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e810:	vpush	{d8}
    e814:	vmov.f32	s16, s0
    e818:	vmov.f32	s17, s1
    e81c:	ldr	r5, [pc, #224]	; (e900 <fcvtbuf+0xf4>)
    e81e:	sub	sp, #20
    e820:	ldr	r7, [r5, #0]
    e822:	mov	r4, r0
    e824:	mov	r6, r1
    e826:	mov	r8, r2
    e828:	mov	r5, r3
    e82a:	cmp	r3, #0
    e82c:	beq.n	e8ca <fcvtbuf+0xbe>
    e82e:	movs	r2, #0
    e830:	ldr	r3, [pc, #208]	; (e904 <fcvtbuf+0xf8>)
    e832:	vmov	r0, r1, d8
    e836:	bl	af74 <__aeabi_dcmplt>
    e83a:	cbnz	r0, e89c <fcvtbuf+0x90>
    e83c:	vmov.f32	s0, s16
    e840:	vmov.f32	s1, s17
    e844:	add	r3, sp, #12
    e846:	str	r3, [sp, #4]
    e848:	str.w	r8, [sp]
    e84c:	mov	r0, r7
    e84e:	mov	r3, r6
    e850:	mov	r2, r4
    e852:	movs	r1, #3
    e854:	bl	d9d8 <_dtoa_r>
    e858:	ldr	r3, [sp, #12]
    e85a:	ldr	r1, [r6, #0]
    e85c:	cmp	r0, r3
    e85e:	rsb	r1, r1, #0
    e862:	bcs.n	e8d8 <fcvtbuf+0xcc>
    e864:	subs	r1, r1, r5
    e866:	mov	r3, r5
    e868:	ldrb.w	r2, [r0], #1
    e86c:	strb.w	r2, [r3], #1
    e870:	ldr	r2, [sp, #12]
    e872:	cmp	r2, r0
    e874:	add.w	r6, r3, r1
    e878:	bhi.n	e868 <fcvtbuf+0x5c>
    e87a:	cmp	r4, r6
    e87c:	ble.n	e8de <fcvtbuf+0xd2>
    e87e:	subs	r2, r4, r6
    e880:	add	r2, r3
    e882:	movs	r1, #48	; 0x30
    e884:	strb.w	r1, [r3], #1
    e888:	cmp	r2, r3
    e88a:	bne.n	e884 <fcvtbuf+0x78>
    e88c:	movs	r3, #0
    e88e:	strb	r3, [r2, #0]
    e890:	mov	r0, r5
    e892:	add	sp, #20
    e894:	vpop	{d8}
    e898:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e89c:	movs	r2, #0
    e89e:	ldr	r3, [pc, #104]	; (e908 <fcvtbuf+0xfc>)
    e8a0:	vmov	r0, r1, d8
    e8a4:	bl	afb0 <__aeabi_dcmpgt>
    e8a8:	cmp	r0, #0
    e8aa:	beq.n	e83c <fcvtbuf+0x30>
    e8ac:	vmov.f32	s0, s16
    e8b0:	vmov.f32	s1, s17
    e8b4:	add	r3, sp, #12
    e8b6:	str	r3, [sp, #4]
    e8b8:	str.w	r8, [sp]
    e8bc:	mov	r0, r7
    e8be:	mov	r3, r6
    e8c0:	mov	r2, r4
    e8c2:	movs	r1, #2
    e8c4:	bl	d9d8 <_dtoa_r>
    e8c8:	b.n	e858 <fcvtbuf+0x4c>
    e8ca:	ldr	r2, [r7, #80]	; 0x50
    e8cc:	add.w	r3, r0, #35	; 0x23
    e8d0:	cmp	r2, r3
    e8d2:	ble.n	e8e2 <fcvtbuf+0xd6>
    e8d4:	ldr	r5, [r7, #84]	; 0x54
    e8d6:	b.n	e82e <fcvtbuf+0x22>
    e8d8:	mov	r6, r1
    e8da:	mov	r3, r5
    e8dc:	b.n	e87a <fcvtbuf+0x6e>
    e8de:	mov	r2, r3
    e8e0:	b.n	e88c <fcvtbuf+0x80>
    e8e2:	add.w	r9, r0, #36	; 0x24
    e8e6:	mov	r2, r9
    e8e8:	ldr	r1, [r7, #84]	; 0x54
    e8ea:	mov	r0, r7
    e8ec:	bl	ba90 <_realloc_r>
    e8f0:	mov	r5, r0
    e8f2:	cmp	r0, #0
    e8f4:	beq.n	e890 <fcvtbuf+0x84>
    e8f6:	str.w	r9, [r7, #80]	; 0x50
    e8fa:	str	r0, [r7, #84]	; 0x54
    e8fc:	b.n	e82e <fcvtbuf+0x22>
    e8fe:	nop
    e900:	.word	0x2000191c
    e904:	.word	0x3ff00000
    e908:	.word	0xbff00000

0000e90c <_malloc_trim_r>:
    e90c:	push	{r3, r4, r5, r6, r7, lr}
    e90e:	ldr	r7, [pc, #140]	; (e99c <_malloc_trim_r+0x90>)
    e910:	mov	r4, r1
    e912:	mov	r6, r0
    e914:	bl	ba88 <__malloc_lock>
    e918:	ldr	r3, [r7, #8]
    e91a:	ldr	r5, [r3, #4]
    e91c:	bic.w	r5, r5, #3
    e920:	subs	r1, r5, r4
    e922:	addw	r1, r1, #4079	; 0xfef
    e926:	bic.w	r1, r1, #4080	; 0xff0
    e92a:	bic.w	r1, r1, #15
    e92e:	sub.w	r4, r1, #4096	; 0x1000
    e932:	cmp.w	r4, #4096	; 0x1000
    e936:	blt.n	e948 <_malloc_trim_r+0x3c>
    e938:	movs	r1, #0
    e93a:	mov	r0, r6
    e93c:	bl	be70 <_sbrk_r>
    e940:	ldr	r3, [r7, #8]
    e942:	add	r3, r5
    e944:	cmp	r0, r3
    e946:	beq.n	e952 <_malloc_trim_r+0x46>
    e948:	mov	r0, r6
    e94a:	bl	ba8c <__malloc_unlock>
    e94e:	movs	r0, #0
    e950:	pop	{r3, r4, r5, r6, r7, pc}
    e952:	negs	r1, r4
    e954:	mov	r0, r6
    e956:	bl	be70 <_sbrk_r>
    e95a:	adds	r0, #1
    e95c:	beq.n	e97a <_malloc_trim_r+0x6e>
    e95e:	ldr	r3, [pc, #64]	; (e9a0 <_malloc_trim_r+0x94>)
    e960:	ldr	r2, [r7, #8]
    e962:	ldr	r1, [r3, #0]
    e964:	subs	r5, r5, r4
    e966:	orr.w	r5, r5, #1
    e96a:	mov	r0, r6
    e96c:	subs	r1, r1, r4
    e96e:	str	r5, [r2, #4]
    e970:	str	r1, [r3, #0]
    e972:	bl	ba8c <__malloc_unlock>
    e976:	movs	r0, #1
    e978:	pop	{r3, r4, r5, r6, r7, pc}
    e97a:	movs	r1, #0
    e97c:	mov	r0, r6
    e97e:	bl	be70 <_sbrk_r>
    e982:	ldr	r2, [r7, #8]
    e984:	subs	r3, r0, r2
    e986:	cmp	r3, #15
    e988:	ble.n	e948 <_malloc_trim_r+0x3c>
    e98a:	ldr	r4, [pc, #24]	; (e9a4 <_malloc_trim_r+0x98>)
    e98c:	ldr	r1, [pc, #16]	; (e9a0 <_malloc_trim_r+0x94>)
    e98e:	ldr	r4, [r4, #0]
    e990:	orr.w	r3, r3, #1
    e994:	subs	r0, r0, r4
    e996:	str	r3, [r2, #4]
    e998:	str	r0, [r1, #0]
    e99a:	b.n	e948 <_malloc_trim_r+0x3c>
    e99c:	.word	0x2000150c
    e9a0:	.word	0x20004608
    e9a4:	.word	0x20001914

0000e9a8 <_free_r>:
    e9a8:	cmp	r1, #0
    e9aa:	beq.n	ea38 <_free_r+0x90>
    e9ac:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e9b0:	mov	r5, r1
    e9b2:	mov	r8, r0
    e9b4:	bl	ba88 <__malloc_lock>
    e9b8:	ldr.w	r7, [r5, #-4]
    e9bc:	ldr	r1, [pc, #424]	; (eb68 <_free_r+0x1c0>)
    e9be:	bic.w	r3, r7, #1
    e9c2:	sub.w	r4, r5, #8
    e9c6:	adds	r2, r4, r3
    e9c8:	ldr	r6, [r1, #8]
    e9ca:	ldr	r0, [r2, #4]
    e9cc:	cmp	r2, r6
    e9ce:	bic.w	r0, r0, #3
    e9d2:	beq.n	ea9a <_free_r+0xf2>
    e9d4:	lsls	r6, r7, #31
    e9d6:	str	r0, [r2, #4]
    e9d8:	bmi.n	e9f2 <_free_r+0x4a>
    e9da:	ldr.w	r7, [r5, #-8]
    e9de:	subs	r4, r4, r7
    e9e0:	add.w	lr, r1, #8
    e9e4:	ldr	r5, [r4, #8]
    e9e6:	cmp	r5, lr
    e9e8:	add	r3, r7
    e9ea:	beq.n	eacc <_free_r+0x124>
    e9ec:	ldr	r7, [r4, #12]
    e9ee:	str	r7, [r5, #12]
    e9f0:	str	r5, [r7, #8]
    e9f2:	adds	r5, r2, r0
    e9f4:	ldr	r5, [r5, #4]
    e9f6:	lsls	r5, r5, #31
    e9f8:	bpl.n	ea80 <_free_r+0xd8>
    e9fa:	orr.w	r2, r3, #1
    e9fe:	str	r2, [r4, #4]
    ea00:	str	r3, [r4, r3]
    ea02:	cmp.w	r3, #512	; 0x200
    ea06:	bcs.n	ea3a <_free_r+0x92>
    ea08:	lsrs	r3, r3, #3
    ea0a:	adds	r2, r3, #1
    ea0c:	ldr	r5, [r1, #4]
    ea0e:	ldr.w	r7, [r1, r2, lsl #3]
    ea12:	str	r7, [r4, #8]
    ea14:	movs	r0, #1
    ea16:	asrs	r3, r3, #2
    ea18:	lsl.w	r3, r0, r3
    ea1c:	add.w	r0, r1, r2, lsl #3
    ea20:	orrs	r5, r3
    ea22:	subs	r0, #8
    ea24:	str	r0, [r4, #12]
    ea26:	str	r5, [r1, #4]
    ea28:	str.w	r4, [r1, r2, lsl #3]
    ea2c:	str	r4, [r7, #12]
    ea2e:	mov	r0, r8
    ea30:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ea34:	b.w	ba8c <__malloc_unlock>
    ea38:	bx	lr
    ea3a:	lsrs	r2, r3, #9
    ea3c:	cmp	r2, #4
    ea3e:	bhi.n	eae8 <_free_r+0x140>
    ea40:	lsrs	r2, r3, #6
    ea42:	add.w	r7, r2, #57	; 0x39
    ea46:	lsls	r7, r7, #1
    ea48:	add.w	r5, r2, #56	; 0x38
    ea4c:	add.w	r0, r1, r7, lsl #2
    ea50:	ldr.w	r2, [r1, r7, lsl #2]
    ea54:	ldr	r1, [pc, #272]	; (eb68 <_free_r+0x1c0>)
    ea56:	subs	r0, #8
    ea58:	cmp	r0, r2
    ea5a:	beq.n	eaf8 <_free_r+0x150>
    ea5c:	ldr	r1, [r2, #4]
    ea5e:	bic.w	r1, r1, #3
    ea62:	cmp	r3, r1
    ea64:	bcs.n	ea6c <_free_r+0xc4>
    ea66:	ldr	r2, [r2, #8]
    ea68:	cmp	r0, r2
    ea6a:	bne.n	ea5c <_free_r+0xb4>
    ea6c:	ldr	r0, [r2, #12]
    ea6e:	str	r0, [r4, #12]
    ea70:	str	r2, [r4, #8]
    ea72:	str	r4, [r0, #8]
    ea74:	str	r4, [r2, #12]
    ea76:	mov	r0, r8
    ea78:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ea7c:	b.w	ba8c <__malloc_unlock>
    ea80:	ldr	r5, [r2, #8]
    ea82:	ldr	r7, [pc, #232]	; (eb6c <_free_r+0x1c4>)
    ea84:	cmp	r5, r7
    ea86:	add	r3, r0
    ea88:	beq.n	eb0a <_free_r+0x162>
    ea8a:	ldr	r0, [r2, #12]
    ea8c:	str	r0, [r5, #12]
    ea8e:	orr.w	r2, r3, #1
    ea92:	str	r5, [r0, #8]
    ea94:	str	r2, [r4, #4]
    ea96:	str	r3, [r4, r3]
    ea98:	b.n	ea02 <_free_r+0x5a>
    ea9a:	lsls	r7, r7, #31
    ea9c:	add	r3, r0
    ea9e:	bmi.n	eab0 <_free_r+0x108>
    eaa0:	ldr.w	r2, [r5, #-8]
    eaa4:	subs	r4, r4, r2
    eaa6:	add	r3, r2
    eaa8:	ldr	r0, [r4, #8]
    eaaa:	ldr	r2, [r4, #12]
    eaac:	str	r2, [r0, #12]
    eaae:	str	r0, [r2, #8]
    eab0:	ldr	r2, [pc, #188]	; (eb70 <_free_r+0x1c8>)
    eab2:	ldr	r2, [r2, #0]
    eab4:	orr.w	r0, r3, #1
    eab8:	cmp	r3, r2
    eaba:	str	r0, [r4, #4]
    eabc:	str	r4, [r1, #8]
    eabe:	bcc.n	ea2e <_free_r+0x86>
    eac0:	ldr	r3, [pc, #176]	; (eb74 <_free_r+0x1cc>)
    eac2:	mov	r0, r8
    eac4:	ldr	r1, [r3, #0]
    eac6:	bl	e90c <_malloc_trim_r>
    eaca:	b.n	ea2e <_free_r+0x86>
    eacc:	adds	r1, r2, r0
    eace:	ldr	r1, [r1, #4]
    ead0:	lsls	r1, r1, #31
    ead2:	bmi.n	eb5e <_free_r+0x1b6>
    ead4:	ldr	r1, [r2, #8]
    ead6:	ldr	r2, [r2, #12]
    ead8:	str	r2, [r1, #12]
    eada:	add	r3, r0
    eadc:	orr.w	r0, r3, #1
    eae0:	str	r1, [r2, #8]
    eae2:	str	r0, [r4, #4]
    eae4:	str	r3, [r4, r3]
    eae6:	b.n	ea2e <_free_r+0x86>
    eae8:	cmp	r2, #20
    eaea:	bhi.n	eb1c <_free_r+0x174>
    eaec:	add.w	r7, r2, #92	; 0x5c
    eaf0:	lsls	r7, r7, #1
    eaf2:	add.w	r5, r2, #91	; 0x5b
    eaf6:	b.n	ea4c <_free_r+0xa4>
    eaf8:	asrs	r2, r5, #2
    eafa:	ldr	r3, [r1, #4]
    eafc:	movs	r5, #1
    eafe:	lsl.w	r2, r5, r2
    eb02:	orrs	r3, r2
    eb04:	str	r3, [r1, #4]
    eb06:	mov	r2, r0
    eb08:	b.n	ea6e <_free_r+0xc6>
    eb0a:	orr.w	r2, r3, #1
    eb0e:	str	r4, [r1, #20]
    eb10:	str	r4, [r1, #16]
    eb12:	str	r5, [r4, #12]
    eb14:	str	r5, [r4, #8]
    eb16:	str	r2, [r4, #4]
    eb18:	str	r3, [r4, r3]
    eb1a:	b.n	ea2e <_free_r+0x86>
    eb1c:	cmp	r2, #84	; 0x54
    eb1e:	bhi.n	eb2e <_free_r+0x186>
    eb20:	lsrs	r2, r3, #12
    eb22:	add.w	r7, r2, #111	; 0x6f
    eb26:	lsls	r7, r7, #1
    eb28:	add.w	r5, r2, #110	; 0x6e
    eb2c:	b.n	ea4c <_free_r+0xa4>
    eb2e:	cmp.w	r2, #340	; 0x154
    eb32:	bhi.n	eb42 <_free_r+0x19a>
    eb34:	lsrs	r2, r3, #15
    eb36:	add.w	r7, r2, #120	; 0x78
    eb3a:	lsls	r7, r7, #1
    eb3c:	add.w	r5, r2, #119	; 0x77
    eb40:	b.n	ea4c <_free_r+0xa4>
    eb42:	movw	r0, #1364	; 0x554
    eb46:	cmp	r2, r0
    eb48:	bhi.n	eb58 <_free_r+0x1b0>
    eb4a:	lsrs	r2, r3, #18
    eb4c:	add.w	r7, r2, #125	; 0x7d
    eb50:	lsls	r7, r7, #1
    eb52:	add.w	r5, r2, #124	; 0x7c
    eb56:	b.n	ea4c <_free_r+0xa4>
    eb58:	movs	r7, #254	; 0xfe
    eb5a:	movs	r5, #126	; 0x7e
    eb5c:	b.n	ea4c <_free_r+0xa4>
    eb5e:	orr.w	r2, r3, #1
    eb62:	str	r2, [r4, #4]
    eb64:	str	r3, [r4, r3]
    eb66:	b.n	ea2e <_free_r+0x86>
    eb68:	.word	0x2000150c
    eb6c:	.word	0x20001514
    eb70:	.word	0x20001918
    eb74:	.word	0x20004638

0000eb78 <_localeconv_r>:
    eb78:	ldr	r2, [pc, #16]	; (eb8c <_localeconv_r+0x14>)
    eb7a:	ldr	r3, [pc, #20]	; (eb90 <_localeconv_r+0x18>)
    eb7c:	ldr	r2, [r2, #0]
    eb7e:	ldr	r0, [r2, #52]	; 0x34
    eb80:	cmp	r0, #0
    eb82:	it	eq
    eb84:	moveq	r0, r3
    eb86:	adds	r0, #240	; 0xf0
    eb88:	bx	lr
    eb8a:	nop
    eb8c:	.word	0x2000191c
    eb90:	.word	0x200013a0
	...

0000eba0 <memchr>:
    eba0:	and.w	r1, r1, #255	; 0xff
    eba4:	cmp	r2, #16
    eba6:	blt.n	ec00 <memchr+0x60>
    eba8:	tst.w	r0, #7
    ebac:	beq.n	ebc0 <memchr+0x20>
    ebae:	ldrb.w	r3, [r0], #1
    ebb2:	subs	r2, #1
    ebb4:	cmp	r3, r1
    ebb6:	beq.n	ec14 <memchr+0x74>
    ebb8:	tst.w	r0, #7
    ebbc:	cbz	r2, ec10 <memchr+0x70>
    ebbe:	bne.n	ebae <memchr+0xe>
    ebc0:	push	{r4, r5, r6, r7}
    ebc2:	orr.w	r1, r1, r1, lsl #8
    ebc6:	orr.w	r1, r1, r1, lsl #16
    ebca:	bic.w	r4, r2, #7
    ebce:	mvns.w	r7, #0
    ebd2:	movs	r3, #0
    ebd4:	ldrd	r5, r6, [r0], #8
    ebd8:	subs	r4, #8
    ebda:	eor.w	r5, r5, r1
    ebde:	eor.w	r6, r6, r1
    ebe2:	uadd8	r5, r5, r7
    ebe6:	sel	r5, r3, r7
    ebea:	uadd8	r6, r6, r7
    ebee:	sel	r6, r5, r7
    ebf2:	cbnz	r6, ec18 <memchr+0x78>
    ebf4:	bne.n	ebd4 <memchr+0x34>
    ebf6:	pop	{r4, r5, r6, r7}
    ebf8:	and.w	r1, r1, #255	; 0xff
    ebfc:	and.w	r2, r2, #7
    ec00:	cbz	r2, ec10 <memchr+0x70>
    ec02:	ldrb.w	r3, [r0], #1
    ec06:	subs	r2, #1
    ec08:	eor.w	r3, r3, r1
    ec0c:	cbz	r3, ec14 <memchr+0x74>
    ec0e:	bne.n	ec02 <memchr+0x62>
    ec10:	movs	r0, #0
    ec12:	bx	lr
    ec14:	subs	r0, #1
    ec16:	bx	lr
    ec18:	cmp	r5, #0
    ec1a:	itte	eq
    ec1c:	moveq	r5, r6
    ec1e:	subeq	r0, #3
    ec20:	subne	r0, #7
    ec22:	tst.w	r5, #1
    ec26:	bne.n	ec38 <memchr+0x98>
    ec28:	adds	r0, #1
    ec2a:	tst.w	r5, #256	; 0x100
    ec2e:	ittt	eq
    ec30:	addeq	r0, #1
    ec32:	tsteq.w	r5, #98304	; 0x18000
    ec36:	addeq	r0, #1
    ec38:	pop	{r4, r5, r6, r7}
    ec3a:	subs	r0, #1
    ec3c:	bx	lr
    ec3e:	nop

0000ec40 <_Balloc>:
    ec40:	ldr	r3, [r0, #76]	; 0x4c
    ec42:	push	{r4, r5, r6, lr}
    ec44:	mov	r5, r0
    ec46:	mov	r4, r1
    ec48:	cbz	r3, ec5e <_Balloc+0x1e>
    ec4a:	ldr.w	r0, [r3, r4, lsl #2]
    ec4e:	cbz	r0, ec72 <_Balloc+0x32>
    ec50:	ldr	r2, [r0, #0]
    ec52:	str.w	r2, [r3, r4, lsl #2]
    ec56:	movs	r3, #0
    ec58:	str	r3, [r0, #16]
    ec5a:	str	r3, [r0, #12]
    ec5c:	pop	{r4, r5, r6, pc}
    ec5e:	movs	r2, #33	; 0x21
    ec60:	movs	r1, #4
    ec62:	bl	f3c4 <_calloc_r>
    ec66:	str	r0, [r5, #76]	; 0x4c
    ec68:	mov	r3, r0
    ec6a:	cmp	r0, #0
    ec6c:	bne.n	ec4a <_Balloc+0xa>
    ec6e:	movs	r0, #0
    ec70:	pop	{r4, r5, r6, pc}
    ec72:	movs	r1, #1
    ec74:	lsl.w	r6, r1, r4
    ec78:	adds	r2, r6, #5
    ec7a:	mov	r0, r5
    ec7c:	lsls	r2, r2, #2
    ec7e:	bl	f3c4 <_calloc_r>
    ec82:	cmp	r0, #0
    ec84:	beq.n	ec6e <_Balloc+0x2e>
    ec86:	str	r4, [r0, #4]
    ec88:	str	r6, [r0, #8]
    ec8a:	b.n	ec56 <_Balloc+0x16>

0000ec8c <_Bfree>:
    ec8c:	cbz	r1, ec9c <_Bfree+0x10>
    ec8e:	ldr	r3, [r0, #76]	; 0x4c
    ec90:	ldr	r2, [r1, #4]
    ec92:	ldr.w	r0, [r3, r2, lsl #2]
    ec96:	str	r0, [r1, #0]
    ec98:	str.w	r1, [r3, r2, lsl #2]
    ec9c:	bx	lr
    ec9e:	nop

0000eca0 <__multadd>:
    eca0:	push	{r4, r5, r6, r7, lr}
    eca2:	ldr	r4, [r1, #16]
    eca4:	sub	sp, #12
    eca6:	mov	r5, r1
    eca8:	mov	r6, r0
    ecaa:	add.w	lr, r1, #20
    ecae:	movs	r7, #0
    ecb0:	ldr.w	r0, [lr]
    ecb4:	uxth	r1, r0
    ecb6:	mla	r1, r2, r1, r3
    ecba:	lsrs	r3, r1, #16
    ecbc:	lsrs	r0, r0, #16
    ecbe:	mla	r3, r2, r0, r3
    ecc2:	uxth	r1, r1
    ecc4:	adds	r7, #1
    ecc6:	add.w	r1, r1, r3, lsl #16
    ecca:	cmp	r4, r7
    eccc:	str.w	r1, [lr], #4
    ecd0:	mov.w	r3, r3, lsr #16
    ecd4:	bgt.n	ecb0 <__multadd+0x10>
    ecd6:	cbz	r3, ece8 <__multadd+0x48>
    ecd8:	ldr	r2, [r5, #8]
    ecda:	cmp	r4, r2
    ecdc:	bge.n	ecee <__multadd+0x4e>
    ecde:	add.w	r2, r5, r4, lsl #2
    ece2:	adds	r4, #1
    ece4:	str	r3, [r2, #20]
    ece6:	str	r4, [r5, #16]
    ece8:	mov	r0, r5
    ecea:	add	sp, #12
    ecec:	pop	{r4, r5, r6, r7, pc}
    ecee:	ldr	r1, [r5, #4]
    ecf0:	str	r3, [sp, #4]
    ecf2:	adds	r1, #1
    ecf4:	mov	r0, r6
    ecf6:	bl	ec40 <_Balloc>
    ecfa:	ldr	r2, [r5, #16]
    ecfc:	adds	r2, #2
    ecfe:	add.w	r1, r5, #12
    ed02:	mov	r7, r0
    ed04:	lsls	r2, r2, #2
    ed06:	adds	r0, #12
    ed08:	bl	80b4 <memcpy>
    ed0c:	ldr	r2, [r6, #76]	; 0x4c
    ed0e:	ldr	r1, [r5, #4]
    ed10:	ldr	r3, [sp, #4]
    ed12:	ldr.w	r0, [r2, r1, lsl #2]
    ed16:	str	r0, [r5, #0]
    ed18:	str.w	r5, [r2, r1, lsl #2]
    ed1c:	mov	r5, r7
    ed1e:	b.n	ecde <__multadd+0x3e>

0000ed20 <__hi0bits>:
    ed20:	lsrs	r3, r0, #16
    ed22:	lsls	r3, r3, #16
    ed24:	cbnz	r3, ed54 <__hi0bits+0x34>
    ed26:	lsls	r0, r0, #16
    ed28:	movs	r3, #16
    ed2a:	tst.w	r0, #4278190080	; 0xff000000
    ed2e:	itt	eq
    ed30:	lsleq	r0, r0, #8
    ed32:	addeq	r3, #8
    ed34:	tst.w	r0, #4026531840	; 0xf0000000
    ed38:	itt	eq
    ed3a:	lsleq	r0, r0, #4
    ed3c:	addeq	r3, #4
    ed3e:	tst.w	r0, #3221225472	; 0xc0000000
    ed42:	itt	eq
    ed44:	lsleq	r0, r0, #2
    ed46:	addeq	r3, #2
    ed48:	cmp	r0, #0
    ed4a:	blt.n	ed5c <__hi0bits+0x3c>
    ed4c:	lsls	r2, r0, #1
    ed4e:	bmi.n	ed58 <__hi0bits+0x38>
    ed50:	movs	r0, #32
    ed52:	bx	lr
    ed54:	movs	r3, #0
    ed56:	b.n	ed2a <__hi0bits+0xa>
    ed58:	adds	r0, r3, #1
    ed5a:	bx	lr
    ed5c:	mov	r0, r3
    ed5e:	bx	lr

0000ed60 <__lo0bits>:
    ed60:	ldr	r3, [r0, #0]
    ed62:	ands.w	r2, r3, #7
    ed66:	beq.n	ed78 <__lo0bits+0x18>
    ed68:	lsls	r1, r3, #31
    ed6a:	bmi.n	edae <__lo0bits+0x4e>
    ed6c:	lsls	r2, r3, #30
    ed6e:	bmi.n	edb2 <__lo0bits+0x52>
    ed70:	lsrs	r3, r3, #2
    ed72:	str	r3, [r0, #0]
    ed74:	movs	r0, #2
    ed76:	bx	lr
    ed78:	uxth	r1, r3
    ed7a:	cbnz	r1, ed80 <__lo0bits+0x20>
    ed7c:	lsrs	r3, r3, #16
    ed7e:	movs	r2, #16
    ed80:	tst.w	r3, #255	; 0xff
    ed84:	itt	eq
    ed86:	lsreq	r3, r3, #8
    ed88:	addeq	r2, #8
    ed8a:	lsls	r1, r3, #28
    ed8c:	itt	eq
    ed8e:	lsreq	r3, r3, #4
    ed90:	addeq	r2, #4
    ed92:	lsls	r1, r3, #30
    ed94:	itt	eq
    ed96:	lsreq	r3, r3, #2
    ed98:	addeq	r2, #2
    ed9a:	lsls	r1, r3, #31
    ed9c:	bmi.n	eda8 <__lo0bits+0x48>
    ed9e:	lsrs	r3, r3, #1
    eda0:	bne.n	eda6 <__lo0bits+0x46>
    eda2:	movs	r0, #32
    eda4:	bx	lr
    eda6:	adds	r2, #1
    eda8:	str	r3, [r0, #0]
    edaa:	mov	r0, r2
    edac:	bx	lr
    edae:	movs	r0, #0
    edb0:	bx	lr
    edb2:	lsrs	r3, r3, #1
    edb4:	str	r3, [r0, #0]
    edb6:	movs	r0, #1
    edb8:	bx	lr
    edba:	nop

0000edbc <__i2b>:
    edbc:	push	{r4, lr}
    edbe:	mov	r4, r1
    edc0:	movs	r1, #1
    edc2:	bl	ec40 <_Balloc>
    edc6:	movs	r2, #1
    edc8:	str	r4, [r0, #20]
    edca:	str	r2, [r0, #16]
    edcc:	pop	{r4, pc}
    edce:	nop

0000edd0 <__multiply>:
    edd0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    edd4:	ldr	r5, [r1, #16]
    edd6:	ldr	r7, [r2, #16]
    edd8:	cmp	r5, r7
    edda:	sub	sp, #12
    eddc:	mov	r4, r1
    edde:	mov	r6, r2
    ede0:	bge.n	edec <__multiply+0x1c>
    ede2:	mov	r2, r5
    ede4:	mov	r4, r6
    ede6:	mov	r5, r7
    ede8:	mov	r6, r1
    edea:	mov	r7, r2
    edec:	ldr	r3, [r4, #8]
    edee:	ldr	r1, [r4, #4]
    edf0:	add.w	r8, r5, r7
    edf4:	cmp	r8, r3
    edf6:	it	gt
    edf8:	addgt	r1, #1
    edfa:	bl	ec40 <_Balloc>
    edfe:	add.w	ip, r0, #20
    ee02:	add.w	r9, ip, r8, lsl #2
    ee06:	cmp	ip, r9
    ee08:	str	r0, [sp, #0]
    ee0a:	bcs.n	ee18 <__multiply+0x48>
    ee0c:	mov	r3, ip
    ee0e:	movs	r1, #0
    ee10:	str.w	r1, [r3], #4
    ee14:	cmp	r9, r3
    ee16:	bhi.n	ee10 <__multiply+0x40>
    ee18:	add.w	r2, r6, #20
    ee1c:	add.w	sl, r2, r7, lsl #2
    ee20:	add.w	r3, r4, #20
    ee24:	cmp	r2, sl
    ee26:	add.w	lr, r3, r5, lsl #2
    ee2a:	bcs.n	eed6 <__multiply+0x106>
    ee2c:	str.w	r9, [sp, #4]
    ee30:	mov	r9, r3
    ee32:	ldr.w	r3, [r2], #4
    ee36:	uxth.w	fp, r3
    ee3a:	cmp.w	fp, #0
    ee3e:	beq.n	ee82 <__multiply+0xb2>
    ee40:	movs	r0, #0
    ee42:	mov	r7, r9
    ee44:	mov	r6, ip
    ee46:	mov	r5, r0
    ee48:	b.n	ee4c <__multiply+0x7c>
    ee4a:	mov	r6, r3
    ee4c:	ldr.w	r4, [r7], #4
    ee50:	ldr	r0, [r6, #0]
    ee52:	uxth	r1, r4
    ee54:	uxth	r3, r0
    ee56:	mla	r1, fp, r1, r3
    ee5a:	lsrs	r4, r4, #16
    ee5c:	lsrs	r0, r0, #16
    ee5e:	adds	r3, r1, r5
    ee60:	mla	r0, fp, r4, r0
    ee64:	add.w	r0, r0, r3, lsr #16
    ee68:	uxth	r1, r3
    ee6a:	mov	r3, r6
    ee6c:	orr.w	r1, r1, r0, lsl #16
    ee70:	cmp	lr, r7
    ee72:	mov.w	r5, r0, lsr #16
    ee76:	str.w	r1, [r3], #4
    ee7a:	bhi.n	ee4a <__multiply+0x7a>
    ee7c:	str	r5, [r6, #4]
    ee7e:	ldr.w	r3, [r2, #-4]
    ee82:	movs.w	fp, r3, lsr #16
    ee86:	beq.n	eeca <__multiply+0xfa>
    ee88:	ldr.w	r3, [ip]
    ee8c:	mov	r7, ip
    ee8e:	mov	r0, r3
    ee90:	mov	r5, r9
    ee92:	movs	r1, #0
    ee94:	b.n	ee98 <__multiply+0xc8>
    ee96:	mov	r7, r6
    ee98:	ldrh	r4, [r5, #0]
    ee9a:	lsrs	r0, r0, #16
    ee9c:	mla	r0, fp, r4, r0
    eea0:	add	r1, r0
    eea2:	uxth	r4, r3
    eea4:	mov	r6, r7
    eea6:	orr.w	r3, r4, r1, lsl #16
    eeaa:	str.w	r3, [r6], #4
    eeae:	ldr	r0, [r7, #4]
    eeb0:	ldr.w	r4, [r5], #4
    eeb4:	uxth	r3, r0
    eeb6:	lsrs	r4, r4, #16
    eeb8:	mla	r4, fp, r4, r3
    eebc:	add.w	r3, r4, r1, lsr #16
    eec0:	cmp	lr, r5
    eec2:	mov.w	r1, r3, lsr #16
    eec6:	bhi.n	ee96 <__multiply+0xc6>
    eec8:	str	r3, [r7, #4]
    eeca:	cmp	sl, r2
    eecc:	add.w	ip, ip, #4
    eed0:	bhi.n	ee32 <__multiply+0x62>
    eed2:	ldr.w	r9, [sp, #4]
    eed6:	cmp.w	r8, #0
    eeda:	ble.n	eef4 <__multiply+0x124>
    eedc:	ldr.w	r3, [r9, #-4]
    eee0:	sub.w	r9, r9, #4
    eee4:	cbz	r3, eeee <__multiply+0x11e>
    eee6:	b.n	eef4 <__multiply+0x124>
    eee8:	ldr.w	r3, [r9, #-4]!
    eeec:	cbnz	r3, eef4 <__multiply+0x124>
    eeee:	subs.w	r8, r8, #1
    eef2:	bne.n	eee8 <__multiply+0x118>
    eef4:	ldr	r0, [sp, #0]
    eef6:	str.w	r8, [r0, #16]
    eefa:	add	sp, #12
    eefc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000ef00 <__pow5mult>:
    ef00:	ands.w	r3, r2, #3
    ef04:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ef08:	mov	r4, r2
    ef0a:	mov	r7, r0
    ef0c:	bne.n	ef6c <__pow5mult+0x6c>
    ef0e:	mov	r6, r1
    ef10:	asrs	r4, r4, #2
    ef12:	beq.n	ef4e <__pow5mult+0x4e>
    ef14:	ldr	r5, [r7, #72]	; 0x48
    ef16:	cbz	r5, ef7e <__pow5mult+0x7e>
    ef18:	lsls	r3, r4, #31
    ef1a:	mov.w	r8, #0
    ef1e:	bmi.n	ef2e <__pow5mult+0x2e>
    ef20:	asrs	r4, r4, #1
    ef22:	beq.n	ef4e <__pow5mult+0x4e>
    ef24:	ldr	r0, [r5, #0]
    ef26:	cbz	r0, ef54 <__pow5mult+0x54>
    ef28:	mov	r5, r0
    ef2a:	lsls	r3, r4, #31
    ef2c:	bpl.n	ef20 <__pow5mult+0x20>
    ef2e:	mov	r2, r5
    ef30:	mov	r1, r6
    ef32:	mov	r0, r7
    ef34:	bl	edd0 <__multiply>
    ef38:	cbz	r6, ef68 <__pow5mult+0x68>
    ef3a:	ldr	r2, [r6, #4]
    ef3c:	ldr	r3, [r7, #76]	; 0x4c
    ef3e:	asrs	r4, r4, #1
    ef40:	ldr.w	r1, [r3, r2, lsl #2]
    ef44:	str	r1, [r6, #0]
    ef46:	str.w	r6, [r3, r2, lsl #2]
    ef4a:	mov	r6, r0
    ef4c:	bne.n	ef24 <__pow5mult+0x24>
    ef4e:	mov	r0, r6
    ef50:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ef54:	mov	r2, r5
    ef56:	mov	r1, r5
    ef58:	mov	r0, r7
    ef5a:	bl	edd0 <__multiply>
    ef5e:	str	r0, [r5, #0]
    ef60:	str.w	r8, [r0]
    ef64:	mov	r5, r0
    ef66:	b.n	ef2a <__pow5mult+0x2a>
    ef68:	mov	r6, r0
    ef6a:	b.n	ef20 <__pow5mult+0x20>
    ef6c:	subs	r2, r3, #1
    ef6e:	ldr	r5, [pc, #44]	; (ef9c <__pow5mult+0x9c>)
    ef70:	movs	r3, #0
    ef72:	ldr.w	r2, [r5, r2, lsl #2]
    ef76:	bl	eca0 <__multadd>
    ef7a:	mov	r6, r0
    ef7c:	b.n	ef10 <__pow5mult+0x10>
    ef7e:	movs	r1, #1
    ef80:	mov	r0, r7
    ef82:	bl	ec40 <_Balloc>
    ef86:	movw	r1, #625	; 0x271
    ef8a:	movs	r2, #1
    ef8c:	movs	r3, #0
    ef8e:	str	r1, [r0, #20]
    ef90:	str	r2, [r0, #16]
    ef92:	mov	r5, r0
    ef94:	str	r0, [r7, #72]	; 0x48
    ef96:	str	r3, [r0, #0]
    ef98:	b.n	ef18 <__pow5mult+0x18>
    ef9a:	nop
    ef9c:	.word	0x20000ae4

0000efa0 <__lshift>:
    efa0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    efa4:	mov	r9, r2
    efa6:	ldr	r2, [r1, #16]
    efa8:	ldr	r3, [r1, #8]
    efaa:	mov.w	r4, r9, asr #5
    efae:	add.w	r8, r4, r2
    efb2:	add.w	r5, r8, #1
    efb6:	cmp	r5, r3
    efb8:	mov	r6, r1
    efba:	mov	sl, r0
    efbc:	ldr	r1, [r1, #4]
    efbe:	ble.n	efca <__lshift+0x2a>
    efc0:	lsls	r3, r3, #1
    efc2:	cmp	r5, r3
    efc4:	add.w	r1, r1, #1
    efc8:	bgt.n	efc0 <__lshift+0x20>
    efca:	mov	r0, sl
    efcc:	bl	ec40 <_Balloc>
    efd0:	cmp	r4, #0
    efd2:	add.w	r2, r0, #20
    efd6:	ble.n	f04a <__lshift+0xaa>
    efd8:	add.w	r3, r2, r4, lsl #2
    efdc:	movs	r1, #0
    efde:	str.w	r1, [r2], #4
    efe2:	cmp	r3, r2
    efe4:	bne.n	efde <__lshift+0x3e>
    efe6:	ldr	r4, [r6, #16]
    efe8:	add.w	r1, r6, #20
    efec:	ands.w	r9, r9, #31
    eff0:	add.w	lr, r1, r4, lsl #2
    eff4:	beq.n	f03a <__lshift+0x9a>
    eff6:	rsb	r2, r9, #32
    effa:	movs	r4, #0
    effc:	ldr	r7, [r1, #0]
    effe:	lsl.w	ip, r7, r9
    f002:	orr.w	r4, ip, r4
    f006:	mov	ip, r3
    f008:	str.w	r4, [r3], #4
    f00c:	ldr.w	r4, [r1], #4
    f010:	cmp	lr, r1
    f012:	lsr.w	r4, r4, r2
    f016:	bhi.n	effc <__lshift+0x5c>
    f018:	str.w	r4, [ip, #4]
    f01c:	cbz	r4, f022 <__lshift+0x82>
    f01e:	add.w	r5, r8, #2
    f022:	ldr.w	r3, [sl, #76]	; 0x4c
    f026:	ldr	r2, [r6, #4]
    f028:	subs	r5, #1
    f02a:	ldr.w	r1, [r3, r2, lsl #2]
    f02e:	str	r5, [r0, #16]
    f030:	str	r1, [r6, #0]
    f032:	str.w	r6, [r3, r2, lsl #2]
    f036:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f03a:	subs	r3, #4
    f03c:	ldr.w	r2, [r1], #4
    f040:	str.w	r2, [r3, #4]!
    f044:	cmp	lr, r1
    f046:	bhi.n	f03c <__lshift+0x9c>
    f048:	b.n	f022 <__lshift+0x82>
    f04a:	mov	r3, r2
    f04c:	b.n	efe6 <__lshift+0x46>
    f04e:	nop

0000f050 <__mcmp>:
    f050:	ldr	r2, [r0, #16]
    f052:	ldr	r3, [r1, #16]
    f054:	subs	r2, r2, r3
    f056:	bne.n	f080 <__mcmp+0x30>
    f058:	lsls	r3, r3, #2
    f05a:	adds	r0, #20
    f05c:	adds	r1, #20
    f05e:	add	r1, r3
    f060:	push	{r4}
    f062:	add	r3, r0
    f064:	b.n	f06a <__mcmp+0x1a>
    f066:	cmp	r0, r3
    f068:	bcs.n	f084 <__mcmp+0x34>
    f06a:	ldr.w	r4, [r3, #-4]!
    f06e:	ldr.w	r2, [r1, #-4]!
    f072:	cmp	r4, r2
    f074:	beq.n	f066 <__mcmp+0x16>
    f076:	bcc.n	f08c <__mcmp+0x3c>
    f078:	movs	r0, #1
    f07a:	ldr.w	r4, [sp], #4
    f07e:	bx	lr
    f080:	mov	r0, r2
    f082:	bx	lr
    f084:	movs	r0, #0
    f086:	ldr.w	r4, [sp], #4
    f08a:	bx	lr
    f08c:	mov.w	r0, #4294967295
    f090:	b.n	f07a <__mcmp+0x2a>
    f092:	nop

0000f094 <__mdiff>:
    f094:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f098:	ldr	r3, [r1, #16]
    f09a:	mov	r7, r1
    f09c:	ldr	r1, [r2, #16]
    f09e:	subs	r3, r3, r1
    f0a0:	cmp	r3, #0
    f0a2:	mov	r8, r2
    f0a4:	bne.n	f0d6 <__mdiff+0x42>
    f0a6:	lsls	r1, r1, #2
    f0a8:	add.w	r2, r7, #20
    f0ac:	add.w	r5, r8, #20
    f0b0:	adds	r3, r2, r1
    f0b2:	add	r1, r5
    f0b4:	b.n	f0ba <__mdiff+0x26>
    f0b6:	cmp	r2, r3
    f0b8:	bcs.n	f178 <__mdiff+0xe4>
    f0ba:	ldr.w	r6, [r3, #-4]!
    f0be:	ldr.w	r4, [r1, #-4]!
    f0c2:	cmp	r6, r4
    f0c4:	beq.n	f0b6 <__mdiff+0x22>
    f0c6:	bcs.n	f18a <__mdiff+0xf6>
    f0c8:	mov	r3, r7
    f0ca:	mov	r4, r2
    f0cc:	mov	r7, r8
    f0ce:	mov.w	r9, #1
    f0d2:	mov	r8, r3
    f0d4:	b.n	f0e4 <__mdiff+0x50>
    f0d6:	blt.n	f194 <__mdiff+0x100>
    f0d8:	add.w	r5, r7, #20
    f0dc:	add.w	r4, r2, #20
    f0e0:	mov.w	r9, #0
    f0e4:	ldr	r1, [r7, #4]
    f0e6:	bl	ec40 <_Balloc>
    f0ea:	ldr.w	r3, [r8, #16]
    f0ee:	ldr	r6, [r7, #16]
    f0f0:	str.w	r9, [r0, #12]
    f0f4:	add.w	ip, r4, r3, lsl #2
    f0f8:	mov	lr, r4
    f0fa:	add.w	r7, r5, r6, lsl #2
    f0fe:	add.w	r4, r0, #20
    f102:	movs	r3, #0
    f104:	ldr.w	r1, [lr], #4
    f108:	ldr.w	r8, [r5], #4
    f10c:	uxth	r2, r1
    f10e:	uxtah	r3, r3, r8
    f112:	lsrs	r1, r1, #16
    f114:	subs	r2, r3, r2
    f116:	rsb	r3, r1, r8, lsr #16
    f11a:	add.w	r3, r3, r2, asr #16
    f11e:	uxth	r2, r2
    f120:	orr.w	r2, r2, r3, lsl #16
    f124:	cmp	ip, lr
    f126:	str.w	r2, [r4], #4
    f12a:	mov.w	r3, r3, asr #16
    f12e:	bhi.n	f104 <__mdiff+0x70>
    f130:	cmp	r7, r5
    f132:	bls.n	f164 <__mdiff+0xd0>
    f134:	mov	ip, r4
    f136:	mov	r1, r5
    f138:	ldr.w	lr, [r1], #4
    f13c:	uxtah	r2, r3, lr
    f140:	asrs	r3, r2, #16
    f142:	add.w	r3, r3, lr, lsr #16
    f146:	uxth	r2, r2
    f148:	orr.w	r2, r2, r3, lsl #16
    f14c:	cmp	r7, r1
    f14e:	str.w	r2, [ip], #4
    f152:	mov.w	r3, r3, asr #16
    f156:	bhi.n	f138 <__mdiff+0xa4>
    f158:	mvns	r5, r5
    f15a:	add	r5, r7
    f15c:	bic.w	r5, r5, #3
    f160:	adds	r5, #4
    f162:	add	r4, r5
    f164:	subs	r4, #4
    f166:	cbnz	r2, f172 <__mdiff+0xde>
    f168:	ldr.w	r3, [r4, #-4]!
    f16c:	subs	r6, #1
    f16e:	cmp	r3, #0
    f170:	beq.n	f168 <__mdiff+0xd4>
    f172:	str	r6, [r0, #16]
    f174:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f178:	movs	r1, #0
    f17a:	bl	ec40 <_Balloc>
    f17e:	movs	r2, #1
    f180:	movs	r3, #0
    f182:	str	r2, [r0, #16]
    f184:	str	r3, [r0, #20]
    f186:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f18a:	mov	r4, r5
    f18c:	mov.w	r9, #0
    f190:	mov	r5, r2
    f192:	b.n	f0e4 <__mdiff+0x50>
    f194:	mov	r3, r7
    f196:	add.w	r4, r7, #20
    f19a:	add.w	r5, r8, #20
    f19e:	mov	r7, r8
    f1a0:	mov.w	r9, #1
    f1a4:	mov	r8, r3
    f1a6:	b.n	f0e4 <__mdiff+0x50>

0000f1a8 <__d2b>:
    f1a8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f1ac:	vmov	r6, r7, d0
    f1b0:	sub	sp, #12
    f1b2:	mov	r8, r1
    f1b4:	movs	r1, #1
    f1b6:	mov	r4, r7
    f1b8:	ubfx	r5, r7, #20, #11
    f1bc:	mov	r7, r2
    f1be:	bl	ec40 <_Balloc>
    f1c2:	ubfx	r4, r4, #0, #20
    f1c6:	mov	r9, r0
    f1c8:	cbz	r5, f1ce <__d2b+0x26>
    f1ca:	orr.w	r4, r4, #1048576	; 0x100000
    f1ce:	str	r4, [sp, #4]
    f1d0:	cbz	r6, f21a <__d2b+0x72>
    f1d2:	add	r0, sp, #8
    f1d4:	str.w	r6, [r0, #-8]!
    f1d8:	bl	ed60 <__lo0bits>
    f1dc:	cmp	r0, #0
    f1de:	bne.n	f24a <__d2b+0xa2>
    f1e0:	ldmia.w	sp, {r2, r3}
    f1e4:	str.w	r2, [r9, #20]
    f1e8:	cmp	r3, #0
    f1ea:	ite	eq
    f1ec:	moveq	r1, #1
    f1ee:	movne	r1, #2
    f1f0:	str.w	r3, [r9, #24]
    f1f4:	str.w	r1, [r9, #16]
    f1f8:	cbnz	r5, f232 <__d2b+0x8a>
    f1fa:	add.w	r3, r9, r1, lsl #2
    f1fe:	subw	r0, r0, #1074	; 0x432
    f202:	str.w	r0, [r8]
    f206:	ldr	r0, [r3, #16]
    f208:	bl	ed20 <__hi0bits>
    f20c:	rsb	r0, r0, r1, lsl #5
    f210:	str	r0, [r7, #0]
    f212:	mov	r0, r9
    f214:	add	sp, #12
    f216:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f21a:	add	r0, sp, #4
    f21c:	bl	ed60 <__lo0bits>
    f220:	ldr	r3, [sp, #4]
    f222:	str.w	r3, [r9, #20]
    f226:	movs	r1, #1
    f228:	adds	r0, #32
    f22a:	str.w	r1, [r9, #16]
    f22e:	cmp	r5, #0
    f230:	beq.n	f1fa <__d2b+0x52>
    f232:	subw	r5, r5, #1075	; 0x433
    f236:	add	r5, r0
    f238:	rsb	r0, r0, #53	; 0x35
    f23c:	str.w	r5, [r8]
    f240:	str	r0, [r7, #0]
    f242:	mov	r0, r9
    f244:	add	sp, #12
    f246:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f24a:	ldmia.w	sp, {r2, r3}
    f24e:	rsb	r1, r0, #32
    f252:	lsl.w	r1, r3, r1
    f256:	orrs	r2, r1
    f258:	lsrs	r3, r0
    f25a:	str	r3, [sp, #4]
    f25c:	str.w	r2, [r9, #20]
    f260:	b.n	f1e8 <__d2b+0x40>
    f262:	nop

0000f264 <__ssprint_r>:
    f264:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f268:	ldr	r3, [r2, #8]
    f26a:	sub	sp, #12
    f26c:	mov	r8, r2
    f26e:	cmp	r3, #0
    f270:	beq.n	f358 <__ssprint_r+0xf4>
    f272:	mov	fp, r0
    f274:	mov.w	r9, #0
    f278:	ldr	r6, [r2, #0]
    f27a:	ldr	r0, [r1, #0]
    f27c:	ldr	r3, [r1, #8]
    f27e:	mov	r5, r1
    f280:	mov	r4, r9
    f282:	cmp	r4, #0
    f284:	beq.n	f312 <__ssprint_r+0xae>
    f286:	cmp	r4, r3
    f288:	mov	r7, r3
    f28a:	mov	sl, r3
    f28c:	bcc.n	f31c <__ssprint_r+0xb8>
    f28e:	ldrh	r3, [r5, #12]
    f290:	tst.w	r3, #1152	; 0x480
    f294:	beq.n	f2f2 <__ssprint_r+0x8e>
    f296:	ldr	r7, [r5, #20]
    f298:	ldr	r1, [r5, #16]
    f29a:	add.w	r7, r7, r7, lsl #1
    f29e:	rsb	sl, r1, r0
    f2a2:	add.w	r7, r7, r7, lsr #31
    f2a6:	adds	r0, r4, #1
    f2a8:	asrs	r7, r7, #1
    f2aa:	add	r0, sl
    f2ac:	cmp	r0, r7
    f2ae:	mov	r2, r7
    f2b0:	itt	hi
    f2b2:	movhi	r7, r0
    f2b4:	movhi	r2, r7
    f2b6:	lsls	r3, r3, #21
    f2b8:	bpl.n	f322 <__ssprint_r+0xbe>
    f2ba:	mov	r1, r2
    f2bc:	mov	r0, fp
    f2be:	bl	b388 <_malloc_r>
    f2c2:	cmp	r0, #0
    f2c4:	beq.n	f336 <__ssprint_r+0xd2>
    f2c6:	mov	r2, sl
    f2c8:	ldr	r1, [r5, #16]
    f2ca:	str	r0, [sp, #4]
    f2cc:	bl	80b4 <memcpy>
    f2d0:	ldrh	r2, [r5, #12]
    f2d2:	ldr	r3, [sp, #4]
    f2d4:	bic.w	r2, r2, #1152	; 0x480
    f2d8:	orr.w	r2, r2, #128	; 0x80
    f2dc:	strh	r2, [r5, #12]
    f2de:	rsb	r2, sl, r7
    f2e2:	add.w	r0, r3, sl
    f2e6:	str	r7, [r5, #20]
    f2e8:	str	r3, [r5, #16]
    f2ea:	str	r0, [r5, #0]
    f2ec:	str	r2, [r5, #8]
    f2ee:	mov	r7, r4
    f2f0:	mov	sl, r4
    f2f2:	mov	r2, sl
    f2f4:	mov	r1, r9
    f2f6:	bl	b924 <memmove>
    f2fa:	ldr.w	r2, [r8, #8]
    f2fe:	ldr	r3, [r5, #8]
    f300:	ldr	r0, [r5, #0]
    f302:	subs	r3, r3, r7
    f304:	add	r0, sl
    f306:	subs	r4, r2, r4
    f308:	str	r3, [r5, #8]
    f30a:	str	r0, [r5, #0]
    f30c:	str.w	r4, [r8, #8]
    f310:	cbz	r4, f358 <__ssprint_r+0xf4>
    f312:	ldr.w	r9, [r6]
    f316:	ldr	r4, [r6, #4]
    f318:	adds	r6, #8
    f31a:	b.n	f282 <__ssprint_r+0x1e>
    f31c:	mov	r7, r4
    f31e:	mov	sl, r4
    f320:	b.n	f2f2 <__ssprint_r+0x8e>
    f322:	mov	r0, fp
    f324:	bl	ba90 <_realloc_r>
    f328:	mov	r3, r0
    f32a:	cmp	r0, #0
    f32c:	bne.n	f2de <__ssprint_r+0x7a>
    f32e:	ldr	r1, [r5, #16]
    f330:	mov	r0, fp
    f332:	bl	e9a8 <_free_r>
    f336:	movs	r3, #12
    f338:	str.w	r3, [fp]
    f33c:	ldrh	r3, [r5, #12]
    f33e:	movs	r2, #0
    f340:	orr.w	r3, r3, #64	; 0x40
    f344:	mov.w	r0, #4294967295
    f348:	strh	r3, [r5, #12]
    f34a:	str.w	r2, [r8, #8]
    f34e:	str.w	r2, [r8, #4]
    f352:	add	sp, #12
    f354:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f358:	movs	r0, #0
    f35a:	str.w	r0, [r8, #4]
    f35e:	add	sp, #12
    f360:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000f364 <_vasnprintf_r>:
    f364:	push	{r4, r5, r6, lr}
    f366:	mov	r5, r2
    f368:	sub	sp, #104	; 0x68
    f36a:	ldr	r4, [r2, #0]
    f36c:	cbz	r1, f372 <_vasnprintf_r+0xe>
    f36e:	cmp	r4, #0
    f370:	bne.n	f3a8 <_vasnprintf_r+0x44>
    f372:	movs	r4, #0
    f374:	mov.w	r2, #648	; 0x288
    f378:	strh.w	r2, [sp, #12]
    f37c:	str	r4, [sp, #0]
    f37e:	str	r4, [sp, #16]
    f380:	mov	r2, r3
    f382:	movw	r6, #65535	; 0xffff
    f386:	ldr	r3, [sp, #120]	; 0x78
    f388:	str	r4, [sp, #8]
    f38a:	mov	r1, sp
    f38c:	str	r4, [sp, #20]
    f38e:	strh.w	r6, [sp, #14]
    f392:	bl	c120 <_svfprintf_r>
    f396:	cmp	r0, #0
    f398:	blt.n	f3be <_vasnprintf_r+0x5a>
    f39a:	ldr	r3, [sp, #0]
    f39c:	str	r0, [r5, #0]
    f39e:	movs	r2, #0
    f3a0:	strb	r2, [r3, #0]
    f3a2:	ldr	r0, [sp, #16]
    f3a4:	add	sp, #104	; 0x68
    f3a6:	pop	{r4, r5, r6, pc}
    f3a8:	mov.w	r2, #1544	; 0x608
    f3ac:	str	r1, [sp, #0]
    f3ae:	str	r1, [sp, #16]
    f3b0:	strh.w	r2, [sp, #12]
    f3b4:	bge.n	f380 <_vasnprintf_r+0x1c>
    f3b6:	movs	r3, #139	; 0x8b
    f3b8:	str	r3, [r0, #0]
    f3ba:	movs	r0, #0
    f3bc:	b.n	f3a4 <_vasnprintf_r+0x40>
    f3be:	movs	r0, #0
    f3c0:	b.n	f3a4 <_vasnprintf_r+0x40>
    f3c2:	nop

0000f3c4 <_calloc_r>:
    f3c4:	push	{r4, lr}
    f3c6:	mul.w	r1, r2, r1
    f3ca:	bl	b388 <_malloc_r>
    f3ce:	mov	r4, r0
    f3d0:	cbz	r0, f40a <_calloc_r+0x46>
    f3d2:	ldr.w	r2, [r0, #-4]
    f3d6:	bic.w	r2, r2, #3
    f3da:	subs	r2, #4
    f3dc:	cmp	r2, #36	; 0x24
    f3de:	bhi.n	f412 <_calloc_r+0x4e>
    f3e0:	cmp	r2, #19
    f3e2:	bls.n	f40e <_calloc_r+0x4a>
    f3e4:	movs	r3, #0
    f3e6:	cmp	r2, #27
    f3e8:	str	r3, [r0, #0]
    f3ea:	str	r3, [r0, #4]
    f3ec:	bls.n	f41c <_calloc_r+0x58>
    f3ee:	cmp	r2, #36	; 0x24
    f3f0:	str	r3, [r0, #8]
    f3f2:	str	r3, [r0, #12]
    f3f4:	iteee	ne
    f3f6:	addne.w	r2, r0, #16
    f3fa:	streq	r3, [r0, #16]
    f3fc:	streq	r3, [r0, #20]
    f3fe:	addeq.w	r2, r0, #24
    f402:	movs	r3, #0
    f404:	str	r3, [r2, #0]
    f406:	str	r3, [r2, #4]
    f408:	str	r3, [r2, #8]
    f40a:	mov	r0, r4
    f40c:	pop	{r4, pc}
    f40e:	mov	r2, r0
    f410:	b.n	f402 <_calloc_r+0x3e>
    f412:	movs	r1, #0
    f414:	bl	b9ec <memset>
    f418:	mov	r0, r4
    f41a:	pop	{r4, pc}
    f41c:	add.w	r2, r0, #8
    f420:	b.n	f402 <_calloc_r+0x3e>
    f422:	nop

0000f424 <__aeabi_d2iz>:
    f424:	mov.w	r2, r1, lsl #1
    f428:	adds.w	r2, r2, #2097152	; 0x200000
    f42c:	bcs.n	f45a <__aeabi_d2iz+0x36>
    f42e:	bpl.n	f454 <__aeabi_d2iz+0x30>
    f430:	mvn.w	r3, #992	; 0x3e0
    f434:	subs.w	r2, r3, r2, asr #21
    f438:	bls.n	f460 <__aeabi_d2iz+0x3c>
    f43a:	mov.w	r3, r1, lsl #11
    f43e:	orr.w	r3, r3, #2147483648	; 0x80000000
    f442:	orr.w	r3, r3, r0, lsr #21
    f446:	tst.w	r1, #2147483648	; 0x80000000
    f44a:	lsr.w	r0, r3, r2
    f44e:	it	ne
    f450:	negne	r0, r0
    f452:	bx	lr
    f454:	mov.w	r0, #0
    f458:	bx	lr
    f45a:	orrs.w	r0, r0, r1, lsl #12
    f45e:	bne.n	f46c <__aeabi_d2iz+0x48>
    f460:	ands.w	r0, r1, #2147483648	; 0x80000000
    f464:	it	eq
    f466:	mvneq.w	r0, #2147483648	; 0x80000000
    f46a:	bx	lr
    f46c:	mov.w	r0, #0
    f470:	bx	lr
    f472:	nop
    f474:	movs	r0, r0
	...

0000f478 <___reboot_Teensyduino__veneer>:
    f478:	ldr.w	pc, [pc]	; f47c <___reboot_Teensyduino__veneer+0x4>
    f47c:	.word	0x60001741

0000f480 <___init_veneer>:
    f480:	ldr.w	pc, [pc]	; f484 <___init_veneer+0x4>
    f484:	.word	0x60001e19
	...

Disassembly of section .fini:

0000f490 <_fini>:
    f490:	push	{r3, r4, r5, r6, r7, lr}
    f492:	nop

Disassembly of section .text.csf:

60013304 <_heap_end+0x3fd93304>:
60013304:	.word	0xffffffff
60013308:	.word	0xffffffff
6001330c:	.word	0xffffffff
60013310:	.word	0xffffffff
60013314:	.word	0xffffffff
60013318:	.word	0xffffffff
6001331c:	.word	0xffffffff
60013320:	.word	0xffffffff
60013324:	.word	0xffffffff
60013328:	.word	0xffffffff
6001332c:	.word	0xffffffff
60013330:	.word	0xffffffff
60013334:	.word	0xffffffff
60013338:	.word	0xffffffff
6001333c:	.word	0xffffffff
60013340:	.word	0xffffffff
60013344:	.word	0xffffffff
60013348:	.word	0xffffffff
6001334c:	.word	0xffffffff
60013350:	.word	0xffffffff
60013354:	.word	0xffffffff
60013358:	.word	0xffffffff
6001335c:	.word	0xffffffff
60013360:	.word	0xffffffff
60013364:	.word	0xffffffff
60013368:	.word	0xffffffff
6001336c:	.word	0xffffffff
60013370:	.word	0xffffffff
60013374:	.word	0xffffffff
60013378:	.word	0xffffffff
6001337c:	.word	0xffffffff
60013380:	.word	0xffffffff
60013384:	.word	0xffffffff
60013388:	.word	0xffffffff
6001338c:	.word	0xffffffff
60013390:	.word	0xffffffff
60013394:	.word	0xffffffff
60013398:	.word	0xffffffff
6001339c:	.word	0xffffffff
600133a0:	.word	0xffffffff
600133a4:	.word	0xffffffff
600133a8:	.word	0xffffffff
600133ac:	.word	0xffffffff
600133b0:	.word	0xffffffff
600133b4:	.word	0xffffffff
600133b8:	.word	0xffffffff
600133bc:	.word	0xffffffff
600133c0:	.word	0xffffffff
600133c4:	.word	0xffffffff
600133c8:	.word	0xffffffff
600133cc:	.word	0xffffffff
600133d0:	.word	0xffffffff
600133d4:	.word	0xffffffff
600133d8:	.word	0xffffffff
600133dc:	.word	0xffffffff
600133e0:	.word	0xffffffff
600133e4:	.word	0xffffffff
600133e8:	.word	0xffffffff
600133ec:	.word	0xffffffff
600133f0:	.word	0xffffffff
600133f4:	.word	0xffffffff
600133f8:	.word	0xffffffff
600133fc:	.word	0xffffffff

60013400 <hab_csf>:
	...
