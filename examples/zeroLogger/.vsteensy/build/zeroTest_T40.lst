
.vsteensy/build/zeroTest_T40.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
0000f6c0 l    d  .fini	00000000 .fini
0000f6c4 l    d  .ARM.exidx	00000000 .ARM.exidx
0000f6cc l    d  .text.itcm.padding	00000000 .text.itcm.padding
20000000 l    d  .data	00000000 .data
200014e0 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
6001239c l    d  .text.csf	00000000 .text.csf
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
00009844 l       .text.itcm	00000000 _MSP
00000000 l    df *ABS*	00000000 usb.c
00008ddc l     F .text.itcm	00000070 schedule_transfer
00008e4c l     F .text.itcm	00000036 run_callbacks
00008e84 l     F .text.itcm	000000a0 endpoint0_transmit.constprop.1
00008f24 l     F .text.itcm	00000670 isr
2000e644 l     O .bss	00000004 endpointN_notify_mask
2000e648 l     O .bss	00000001 sof_usage
2000e654 l     O .bss	00000004 endpoint0_notify_mask
2000e658 l     O .bss	00000001 usb_reboot_timer
2000e660 l     O .bss	00000008 endpoint0_setupdata
2000e668 l     O .bss	00000008 reply_buffer
2000e670 l     O .bss	00000008 endpoint0_buffer
00000000 l    df *ABS*	00000000 tempmon.c
2000e688 l     O .bss	00000004 s_hotTemp
2000e68c l     O .bss	00000004 s_hot_ROOM
2000e690 l     O .bss	00000004 s_roomC_hotC
2000e694 l     O .bss	00000004 s_hotCount
00000000 l    df *ABS*	00000000 analog.c
2000e7f5 l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 usb_desc.c
60001780 l     O .text.progmem	0000000a qualifier_descriptor
20000af4 l     O .data	00000012 device_descriptor
00000000 l    df *ABS*	00000000 serialEvent.cpp
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.13/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.13/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 __do_global_dtors_aux
200014e0 l       .bss	00000000 completed.8605
00000044 l     F .text.itcm	00000000 frame_dummy
200014e4 l       .bss	00000000 object.8610
600017e0 l     O .text.progmem	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 zeroTest.cpp
0000007c l     F .text.itcm	00000084 MTPD::write(char const*, int) [clone .part.16]
00006660 l     F .text.itcm	00000034 _GLOBAL__sub_I_zFS
20000000 l     O .data	00000016 supported_op
20000018 l     O .data	00000010 propertyList
20001500 l     O .bss	00000002 setup::open1
20001502 l     O .bss	00000002 setup::open2
20001504 l     O .bss	00000002 setup::open3
20000ae0 l     O .data	00000002 newFile()::old
20000ae2 l     O .data	00000002 newDay()::old
20000ae4 l     O .data	00000002 newHour()::old
00000000 l    df *ABS*	00000000 Time.cpp
0000683c l     F .text.itcm	00000018 refreshCache(long) [clone .part.0]
2000e414 l     O .bss	00000004 cacheTime
2000e418 l     O .bss	00000007 tm
2000e420 l     O .bss	00000004 sysTime
2000e424 l     O .bss	00000001 Status
2000e42c l     O .bss	00000004 prevMillis
20000ae8 l     O .data	00000004 syncInterval
200001d4 l     O .data	0000000c monthDays
2000e430 l     O .bss	00000004 nextSyncTime
00000000 l    df *ABS*	00000000 zeroFS.cpp
00000000 l    df *ABS*	00000000 diskio.cpp
00000000 l    df *ABS*	00000000 sd_sdhc.cpp
00007254 l     F .text.itcm	000000b4 setSdclk(unsigned long)
00007358 l     F .text.itcm	0000005c sd_CMD(unsigned long, unsigned long)
000073b4 l     F .text.itcm	00000020 sd_ACMD(unsigned long, unsigned long, unsigned long)
000073d4 l     F .text.itcm	00000040 sd_CMD12_StopTransferWaitForBusy()
2000e434 l     O .bss	00000004 dmaDone
2000e438 l     O .bss	00000010 sdCardDesc
00000000 l    df *ABS*	00000000 sd_spi.cpp
00007a6c l     F .text.itcm	00000050 sd_chipSelect(unsigned short) [clone .part.0]
00007abc l     F .text.itcm	00000058 spi_transfer(void const*, void*, unsigned int) [clone .part.4]
20000334 l     O .data	00000200 crctab
00000000 l    df *ABS*	00000000 sd_msc.cpp
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
0000869c l     F .text.itcm	0000006c rx_queue_transfer
00008708 l     F .text.itcm	000000b4 rx_event
000087bc l     F .text.itcm	00000098 usb_serial_flush_callback
00008854 l     F .text.itcm	0000017c usb_serial_write.part.1
2000e450 l     O .bss	00000010 rx_index
2000e460 l     O .bss	00000002 tx_packet_size
2000e462 l     O .bss	00000001 tx_noautoflush
2000e463 l     O .bss	00000001 tx_head
2000e480 l     O .bss	00000100 rx_transfer
2000e580 l     O .bss	00000001 rx_tail
2000e584 l     O .bss	00000009 rx_list
2000e58e l     O .bss	00000002 rx_packet_size
20200000 l     O .bss.dma	00001000 rx_buffer
20201000 l     O .bss.dma	00002000 txbuffer
2000e590 l     O .bss	00000010 rx_count
2000e5a0 l     O .bss	00000004 rx_available
2000e5a4 l     O .bss	00000001 rx_head
2000e5a5 l     O .bss	00000001 transmit_previous_timeout
2000e5a6 l     O .bss	00000002 tx_available
2000e5c0 l     O .bss	00000080 tx_transfer
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 digital.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 usb_mtp.c
0000a03c l     F .text.itcm	00000034 rx_event
0000a070 l     F .text.itcm	00000068 rx_queue_transfer
2000e698 l     O .bss	00000002 tx_packet_size
2000e69a l     O .bss	00000001 tx_head
2000e6a0 l     O .bss	00000080 rx_transfer
2000e720 l     O .bss	00000001 rx_tail
2000e724 l     O .bss	00000005 rx_list
2000e72a l     O .bss	00000002 rx_packet_size
20203000 l     O .bss.dma	00000800 rx_buffer
20203800 l     O .bss.dma	00000800 txbuffer
2000e72c l     O .bss	00000001 rx_head
2000e740 l     O .bss	00000080 tx_transfer
00000000 l    df *ABS*	00000000 yield.cpp
2000e7c0 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 Stream.cpp
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 efgcvt.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlcat.c
00000000 l    df *ABS*	00000000 strlcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 vfprintf.c
2000086c l     O .data	00000010 zeroes.7258
200008bc l     O .data	00000010 blanks.7257
00000000 l    df *ABS*	00000000 vdprintf.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 dtoa.c
0000daf0 l     F .text.itcm	00000128 quorem
00000000 l    df *ABS*	00000000 ecvtbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 mprec.c
20000ad0 l     O .data	0000000c p05.6087
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 vasnprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 impure.c
20000b38 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 __fini_array_end
00000000 l       *UND*	00000000 __bss_start__
00000000 l       *UND*	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 __fini_array_start
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __libc_fini
00000000 l       *UND*	00000000 __stack
60001798 l     F .text.progmem	00000008 __main_veneer
600017a0 l     F .text.progmem	00000008 __memset_veneer
600017a8 l     F .text.progmem	00000008 __usb_init_serialnumber_veneer
600017b0 l     F .text.progmem	00000008 __set_arm_clock_veneer
600017b8 l     F .text.progmem	00000008 ____libc_init_array_veneer
600017c0 l     F .text.progmem	00000008 __startup_early_hook_veneer
600017c8 l     F .text.progmem	00000008 __startup_late_hook_veneer
600017d0 l     F .text.progmem	00000008 __delay_veneer
600017d8 l     F .text.progmem	00000008 __pwm_init_veneer
0000f6b8 l     F .text.itcm	00000008 ___init_veneer
0000b204 g     F .text.itcm	0000002c .hidden __aeabi_dcmpun
00008c0c g     F .text.itcm	0000000c usb_serial_available
000069dc g     F .text.itcm	0000002c die(char const*, DRESULT)
0000b1c8 g     F .text.itcm	00000012 .hidden __aeabi_dcmple
0000c120 g     F .text.itcm	000000ba strcpy
0000b104 g     F .text.itcm	0000007a .hidden __cmpdf2
00009850 g     F .text.itcm	00000002 startup_default_late_hook
0000a37c  w    F .text.itcm	000000f0 yield
0000807c g     F .text.itcm	00000040 sd_readStop()
2000e64c g     O .bss	00000004 usb_timer1_callback
0000b104 g     F .text.itcm	0000007a .hidden __eqdf2
6000168c g     O .text.progmem	00000018 usb_string_manufacturer_name_default
0000ac74 g     F .text.itcm	0000005a .hidden __floatdidf
0000a4fc g     F .text.itcm	00000020 Print::println()
0000ea4c g     F .text.itcm	00000100 fcvtbuf
00007120 g     F .text.itcm	00000034 zeroFS_class::GetSize(unsigned long)
0000bccc g     F .text.itcm	00000002 __malloc_unlock
00007b28 g     F .text.itcm	00000120 sd_cardCommand(unsigned char, unsigned long)
600015fc g     F .text.progmem	00000058 analog_init
0000da44 g     F .text.itcm	0000004a _vdprintf_r
20000b34 g     O .data	00000004 F_CPU_ACTUAL
00008564 g     F .text.itcm	00000004 MSC_disk_write
0000bb64 g     F .text.itcm	000000c6 memmove
0000ee80 g     F .text.itcm	0000004c _Balloc
0000f6cc g       .ARM.exidx	00000000 __exidx_end
00007fc0 g     F .text.itcm	0000004c sd_readBlock(unsigned long, unsigned char*)
00008240 g     F .text.itcm	0000006c sd_writeStart(unsigned long, unsigned long)
2000e7d4 g     O .bss	00000001 EventResponder::runningFromYield
0000b0f4 g     F .text.itcm	0000008a .hidden __gtdf2
0000b56c g     F .text.itcm	0000000c __errno
60001000 g     O .text.progmem	00000020 ImageVectorTable
00008108 g     F .text.itcm	000000b8 sd_writeData(unsigned char, unsigned char const*)
2000e7c4 g     O .bss	00000004 EventResponder::firstInterrupt
000096dc g     F .text.itcm	00000028 usb_transfer_status
00006cc0 g     F .text.itcm	00000140 zeroFS_class::ListAll()
00006b7c g     F .text.itcm	000000c4 zeroFS_class::Create(HDR_TYPE, int)
0000a4ec  w    F .text.itcm	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
20000538 g     O .data	00000280 digital_pin_to_info_PGM
200106c0 g     O .bss	00000004 errno
0000f6c8 g       .text.itcm	00000000 _etext
200014e0 g       .bss	00000000 _sbss
0000b190 g     F .text.itcm	00000010 .hidden __aeabi_cdcmple
600017f0 g       *ABS*	00000000 _stextload
00005248 g     F .text.itcm	00001418 loop
00009594 g     F .text.itcm	00000064 usb_config_rx
00001828  w    F .text.itcm	0000060c MTPD::GetStorageInfo(unsigned long)
00006a08 g     F .text.itcm	00000084 zeroFS_class::Init(unsigned char, unsigned char, char const*)
0000a60c g     F .text.itcm	00000028 Stream::peekNextDigit()
2000e7c8 g     O .bss	00000004 EventResponder::lastInterrupt
00008568 g     F .text.itcm	00000134 memcpy
0000b180 g     F .text.itcm	00000020 .hidden __aeabi_cdrcmple
0000c360 g     F .text.itcm	000016e4 _svfprintf_r
0000ac04 g     F .text.itcm	00000022 .hidden __floatsidf
2000e684 g     O .bss	00000004 systick_millis_count
0000b0fc g     F .text.itcm	00000082 .hidden __ltdf2
0000a2f4 g     F .text.itcm	00000030 usb_mtp_available
00007178 g     F .text.itcm	00000032 disk_initialize
0000b230 g     F .text.itcm	00000000 .hidden __aeabi_uldivmod
000077d4 g     F .text.itcm	00000004 SDHC_disk_initialize
2000e678 g     O .bss	00000001 usb_configuration
60000000 g     O .text.progmem	00000200 FlexSPI_NOR_Config
00007154 g     F .text.itcm	00000024 zeroFS_class::Read(unsigned long, char*, unsigned long)
6000168c  w    O .text.progmem	00000018 usb_string_manufacturer_name
000082ac g     F .text.itcm	000000b8 sd_writeStop()
60001654 g     O .text.progmem	00000008 usb_string_mtp
200014fc  w    O .bss	00000004 MTPD::write(char const*, int)::dst
200009e0 g     O .data	000000c8 __mprec_tens
60001298 g     F .text.progmem	000000ec usb_init
2000b9a0 g     O .bss	00000004 sessionID_
2000e800 g     O .bss	00000004 __malloc_top_pad
20010300 g     O .bss	00000004 systick_safe_read
aaaaaaaf g       *ABS*	00000000 _flexram_bank_config
0000abe4 g     F .text.itcm	0000001e .hidden __aeabi_ui2d
0000edb8 g     F .text.itcm	0000001c _localeconv_r
0000effc g     F .text.itcm	00000012 __i2b
20000000 g       .data	00000000 _sdata
0000a0d8 g     F .text.itcm	000000a0 usb_mtp_configure
60001714 g     O .text.progmem	00000069 usb_config_descriptor_480
0000b260 g     F .text.itcm	000002e2 .hidden __udivmoddi4
00004764  w    F .text.itcm	00000ae4 MTPD::getObjectPropValue(unsigned long, unsigned long)
0000a960 g     F .text.itcm	00000000 .hidden __aeabi_drsub
0000c0b0 g     F .text.itcm	00000024 _sbrk_r
0000984c g     F .text.itcm	00000002 startup_default_early_hook
6000102c g     F .text.progmem	0000026c ResetHandler
00008c8c g     F .text.itcm	00000020 usb_serial_getchar
2000e82c g     O .bss	00000008 usb_cdc_line_coding
00006a8c g     F .text.itcm	000000f0 zeroFS_class::Create(HDR_TYPE, char const*)
2000e7cc g     O .bss	00000004 EventResponder::lastYield
000069c0  w    F .text.itcm	0000001c Print::write(char const*)
00007234 g     F .text.itcm	00000020 disk_ioctl
0000b1b4 g     F .text.itcm	00000012 .hidden __aeabi_dcmplt
2000e448 g     O .bss	00000002 m_sd_status
2000e7fc g     O .bss	00000004 __malloc_max_sbrked_mem
00009d04 g     F .text.itcm	00000080 pinMode
0000ac28 g     F .text.itcm	0000003a .hidden __extendsfdf2
0000af24 g     F .text.itcm	000001d0 .hidden __aeabi_ddiv
0000a96c g     F .text.itcm	00000276 .hidden __adddf3
6001239c g     O .text.csf	00000c00 hab_csf
00000574  w    F .text.itcm	00000250 MTPD::writestring(char const*)
20280000 g       .text.csf	00000000 _heap_end
2000e44a g     O .bss	00000002 m_sd_errorCode
0000f6c4 g       .ARM.exidx	00000000 __exidx_start
0000acd0 g     F .text.itcm	00000254 .hidden __aeabi_dmul
2000e7d0 g     O .bss	00000004 EventResponder::firstYield
00007d50 g     F .text.itcm	0000003c sd_readRegister(unsigned char, void*)
0000bcd0 g     F .text.itcm	000003de _realloc_r
0000b578 g     F .text.itcm	00000050 __libc_init_array
00009990 g     F .text.itcm	00000350 dtostrf
00008400 g     F .text.itcm	000000a8 spi_begin(unsigned long, unsigned char, unsigned char)
0000854c g     F .text.itcm	0000000e SPI_disk_initialize()
20009508 g     O .bss	00000054 mFS
20000aa8 g     O .data	00000028 __mprec_bigtens
00009854  w    F .text.itcm	0000008c HardFault_HandlerC
0000a4d4  w    F .text.itcm	00000004 usb_serial_class::clear()
0000abe4 g     F .text.itcm	0000001e .hidden __floatunsidf
000098e0 g     F .text.itcm	00000030 _sbrk
60010ebc g       *ABS*	00000000 _sdataload
0000f290 g     F .text.itcm	00000042 __mcmp
20000af0 g     O .data	00000004 __brkval
2000e5a8 g     O .bss	00000001 usb_cdc_line_rtsdtr
6000178c g     F .text.progmem	00000000 _init
00006c40 g     F .text.itcm	00000058 zeroFS_class::Close(HDR_TYPE)
000089d0 g     F .text.itcm	00000002 usb_serial_reset
2000b9a4 g     O .bss	00002a70 zFS
00007308 g     F .text.itcm	00000050 sd_isr()
00006940 g     F .text.itcm	00000020 day()
600016a8 g     O .text.progmem	00000069 usb_config_descriptor_12
00007418 g     F .text.itcm	000003bc sd_CardInit()
20010700 g       .bss	00000000 _ebss
000007c4  w    F .text.itcm	00001064 MTPD::WriteDescriptor()
20000adc g     O .data	00000004 propertyListNum
00007060 g     F .text.itcm	0000004c zeroFS_class::Next()
000070ac g     F .text.itcm	00000074 zeroFS_class::Info(unsigned long, char*, unsigned long*, unsigned long*)
0000ef60 g     F .text.itcm	00000040 __hi0bits
0000f664 g     F .text.itcm	0000004e .hidden __fixdfsi
20204080 g       .bss.dma	00000000 _heap_start
20000aee g     O .data	00000002 m_chipSelectPin
00000002 g       *ABS*	00000000 _itcm_block_count
2000f000 g     O .bss	00000020 endpoint0_transfer_data
00006980 g     F .text.itcm	00000024 year()
00009d84 g     F .text.itcm	000002b8 pwm_init
0000a96c g     F .text.itcm	00000276 .hidden __aeabi_dadd
0000b0fc g     F .text.itcm	00000082 .hidden __ledf2
00006ee8 g     F .text.itcm	000000b8 zeroFS_class::fixEOF()
6000147c g     F .text.progmem	00000064 usb_pll_start
0000f140 g     F .text.itcm	000000a0 __pow5mult
0000ac64 g     F .text.itcm	0000006a .hidden __aeabi_ul2d
000078f8 g     F .text.itcm	00000168 sd_CardWriteBlocks(void const*, unsigned long, unsigned long)
00000000  w      *UND*	00000000 __deregister_frame_info
2000f020 g     O .bss	00000020 endpoint0_transfer_ack
2000e834 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
00009690 g     F .text.itcm	00000028 usb_transmit
0000a4b4 g     F .text.itcm	00000020 systick_isr
20000b20 g     O .data	00000010 Serial
000077d8 g     F .text.itcm	00000114 sd_CardReadBlocks(void*, unsigned long, unsigned long)
0000a4f4  w    F .text.itcm	00000006 usb_serial_class::write(unsigned char)
0000984c  w    F .text.itcm	00000002 startup_early_hook
0000b1f0 g     F .text.itcm	00000012 .hidden __aeabi_dcmpgt
00008bc8 g     F .text.itcm	00000044 usb_serial_peekchar
000084a8 g     F .text.itcm	000000a4 sd_init()
0000ede0 g     F .text.itcm	00000000 memchr
0000a69c g     F .text.itcm	000002c4 set_arm_clock
2000e67c g     O .bss	00000004 systick_cycle_count
20000b08 g     O .data	00000016 usb_string_serial_number_default
0000ebe8 g     F .text.itcm	000001d0 _free_r
0000b1dc g     F .text.itcm	00000012 .hidden __aeabi_dcmpge
0000a4e4  w    F .text.itcm	00000004 usb_serial_class::flush()
0000a968 g     F .text.itcm	0000027a .hidden __aeabi_dsub
200014dc g     O .data	00000004 __malloc_sbrk_base
0000a4dc  w    F .text.itcm	00000004 usb_serial_class::read()
0000800c g     F .text.itcm	00000024 sd_readData2(unsigned char*)
0000ac64 g     F .text.itcm	0000006a .hidden __floatundidf
0000f1e0 g     F .text.itcm	000000ae __lshift
00009660 g     F .text.itcm	0000002e usb_prepare_transfer
00009834 g     F .text.itcm	00000018 unused_interrupt_vector
0000f4a4 g     F .text.itcm	00000100 __ssprint_r
600014e0 g     F .text.progmem	0000011c tempmon_init
2000e640 g     O .bss	00000004 usb_timer0_callback
0000f5a4 g     F .text.itcm	0000005e _vasnprintf_r
0000a698  w    F .text.itcm	00000002 serialEvent()
0000c230 g     F .text.itcm	0000002c strlcpy
000069a4 g     F .text.itcm	0000001c setSyncProvider(long (*)())
00008c18 g     F .text.itcm	00000074 usb_serial_flush_input
2000e44c g     O .bss	00000002 m_sd_type
0000f010 g     F .text.itcm	00000130 __multiply
00008cac g     F .text.itcm	0000002c usb_serial_putchar
00000024 g       *ABS*	00000000 _teensy_model_identifier
000083a4 g     F .text.itcm	0000005c spi_init()
2000e804 g     O .bss	00000028 __malloc_current_mallinfo
0000f3e8 g     F .text.itcm	000000ba __d2b
2000e7d8 g     O .bss	0000001c HardwareSerial::s_serials_with_serial_events
00006e00 g     F .text.itcm	000000e8 zeroFS_class::findEOF()
0000a228 g     F .text.itcm	000000cc usb_mtp_send
000078ec g     F .text.itcm	0000000a SDHC_disk_read
0000ac04 g     F .text.itcm	00000022 .hidden __aeabi_i2d
0000a690 g     F .text.itcm	00000006 Stream::parseInt()
20000830  w    O .data	00000028 vtable for usb_serial_class
0000a5dc g     F .text.itcm	00000030 Stream::timedPeek()
2000e680 g     O .bss	00000004 scale_cpu_cycles_to_microseconds
0000b544  w    F .text.itcm	00000002 .hidden __aeabi_ldiv0
00002a14  w    F .text.itcm	00001d50 MTPD::getObjectPropDesc(unsigned long, unsigned long)
0000af24 g     F .text.itcm	000001d0 .hidden __divdf3
200010d0 g     O .data	00000408 __malloc_av_
0000acd0 g     F .text.itcm	00000254 .hidden __muldf3
00008d3c g     F .text.itcm	000000a0 usb_serial_flush_output
0000bcc8 g     F .text.itcm	00000002 __malloc_lock
20010400 g     O .bss	000002c0 _VectorsRam
0000f604 g     F .text.itcm	0000005e _calloc_r
2000e428 g     O .bss	00000004 getTimePtr
20000b1e g     O .data	00000001 yield_active_check_flags
2000e650 g     O .bss	00000001 usb_high_speed
20001508 g     O .bss	00008000 data
0000bc2c g     F .text.itcm	0000009a memset
0000a5cc g     F .text.itcm	00000010 main
2000e7f8 g     O .bss	00000004 __malloc_max_total_mem
20204000 g     O .bss.dma	00000069 usb_descriptor_buffer
00008560 g     F .text.itcm	00000004 MSC_disk_read
00006854 g     F .text.itcm	0000008c now()
0000c1dc g     F .text.itcm	00000052 strlcat
0000a324 g     F .text.itcm	00000058 usb_init_serialnumber
600017e8 g       .text.progmem	00000000 __init_array_end
0000dc18 g     F .text.itcm	00000e34 _dtoa_r
0000b5c8 g     F .text.itcm	00000570 _malloc_r
2000e7f4 g     O .bss	00000001 HardwareSerial::s_count_serials_with_serial_events
0000daa8 g     F .text.itcm	0000001a __ascii_wctomb
000081c0 g     F .text.itcm	00000080 sd_writeData2(unsigned char const*)
0000ac74 g     F .text.itcm	0000005a .hidden __aeabi_l2d
00000031 g       *ABS*	00000000 __rtc_localtime
000097d0 g     F .text.itcm	00000064 micros
0000eb4c g     F .text.itcm	0000009c _malloc_trim_r
600016a4 g     O .text.progmem	00000004 string0
00008cd8 g     F .text.itcm	00000018 usb_serial_write
00009850  w    F .text.itcm	00000002 startup_late_hook
0000a4e0  w    F .text.itcm	00000004 usb_serial_class::available()
6000178a g     O .text.progmem	00000001 _serialEvent_default
20010000 g     O .bss	00000300 endpoint_queue_head
6000165c  w    O .text.progmem	0000002e usb_string_product_name
20000aec g     O .data	00000002 m_enableChipSelect
00009704 g     F .text.itcm	000000cc delay
0000b104 g     F .text.itcm	0000007a .hidden __nedf2
00007c48 g     F .text.itcm	00000108 sd_readData(unsigned char*, unsigned int)
0000f6c0 g     F .fini	00000000 _fini
60001020 g     O .text.progmem	0000000c BootData
00006960 g     F .text.itcm	00000020 month()
0000c0d4 g     F .text.itcm	0000004c sprintf
0000a52c g     F .text.itcm	0000001e Print::printf(char const*, ...)
00009ce0 g     F .text.itcm	00000024 Panic_Temp_isr
0000dac4 g     F .text.itcm	0000002c _write_r
000080bc g     F .text.itcm	0000004c SPI_disk_read(unsigned char*, unsigned long, unsigned int)
0000a178 g     F .text.itcm	000000b0 usb_mtp_recv
20000f60 g     O .data	00000004 _impure_ptr
600017e0 g       .text.progmem	00000000 __preinit_array_end
00006900 g     F .text.itcm	00000020 minute()
0000bb38 g     F .text.itcm	0000002a __ascii_mbtowc
00000100 g     F .text.itcm	00000474 setup
200007b8 g     O .data	00000078 usb_descriptor_list
00006fa0 g     F .text.itcm	000000c0 zeroFS_class::Count(unsigned long)
00007d8c g     F .text.itcm	000001a8 sd_connect()
20070000 g       .text.csf	00000000 _estack
00008cf0 g     F .text.itcm	0000004c usb_serial_write_buffer_free
0000b1a0 g     F .text.itcm	00000012 .hidden __aeabi_dcmpeq
000089d4 g     F .text.itcm	00000108 usb_serial_configure
0000a51c  w    F .text.itcm	0000000e _write
200014e0 g       .data	00000000 _edata
00001e34  w    F .text.itcm	00000be0 MTPD::GetObjectInfo(unsigned long)
0000a4e8  w    F .text.itcm	00000004 usb_serial_class::availableForWrite()
00007a60 g     F .text.itcm	0000000a SDHC_disk_write
00009940 g     F .text.itcm	0000004e ultoa
00006920 g     F .text.itcm	00000020 second()
0000a46c g     F .text.itcm	00000044 EventResponder::runFromInterrupt()
200014d8 g     O .data	00000004 __malloc_trim_threshold
0000a4d8  w    F .text.itcm	00000004 usb_serial_class::peek()
0000b548 g     F .text.itcm	00000024 fcvtf
000071f0 g     F .text.itcm	00000042 disk_write
00008364 g     F .text.itcm	00000040 SPI_disk_write(unsigned char const*, unsigned long, unsigned int)
20009560 g     O .bss	00002440 mtpd
0000f2d4 g     F .text.itcm	00000114 __mdiff
00006c98 g     F .text.itcm	00000028 zeroFS_class::Write(void*, unsigned long)
0000f664 g     F .text.itcm	0000004e .hidden __aeabi_d2iz
00007b14 g     F .text.itcm	00000014 SPI_disk_ioctl(unsigned char, unsigned char*)
00007414 g     F .text.itcm	00000004 SDHC_disk_ioctl
000068e0 g     F .text.itcm	00000020 hour()
200008cc g     O .data	00000101 _ctype_
600017e0 g       .text.progmem	00000000 __init_array_start
0000b544  w    F .text.itcm	00000002 .hidden __aeabi_idiv0
0000b204 g     F .text.itcm	0000002c .hidden __unorddf2
20000b30 g     O .data	00000004 F_BUS_ACTUAL
0000a634 g     F .text.itcm	0000005a Stream::parseInt(char)
0000855c g     F .text.itcm	00000004 MSC_disk_initialize
00000000 g       .text.itcm	00000000 _stext
0000c280 g     F .text.itcm	000000dc strlen
000071ac g     F .text.itcm	00000042 disk_read
00008030 g     F .text.itcm	0000004c sd_readStart(unsigned long)
0000b190 g     F .text.itcm	00000010 .hidden __aeabi_cdcmpeq
0000b0f4 g     F .text.itcm	0000008a .hidden __gedf2
6000165c g     O .text.progmem	0000002e usb_string_product_name_default
0000da90 g     F .text.itcm	00000018 vdprintf
0000ac28 g     F .text.itcm	0000003a .hidden __aeabi_f2d
60001384 g     F .text.progmem	000000f8 configure_cache
00000000  w      *UND*	00000000 _Jv_RegisterClasses
0000a968 g     F .text.itcm	0000027a .hidden __subdf3
600017e0 g       .text.progmem	00000000 __preinit_array_start
000096b8 g     F .text.itcm	00000024 usb_receive
0000efa0 g     F .text.itcm	0000005a __lo0bits
00012f98 g       *ABS*	00000000 _flashimagelen
00000000  w      *UND*	00000000 __register_frame_info
00009910 g     F .text.itcm	00000030 rtc_get
0000a4b0 g     F .text.itcm	00000004 pendablesrvreq_isr
20000f64 g     O .data	0000016c __global_locale
00007f34 g     F .text.itcm	0000008c sd_cardSize()
00008adc g     F .text.itcm	000000ec usb_serial_read
00006694 g     F .text.itcm	000001a8 breakTime(long, tmElements_t&)
0000a54c g     F .text.itcm	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
000095f8 g     F .text.itcm	00000068 usb_config_tx
0000eee0 g     F .text.itcm	00000080 __multadd
0000eecc g     F .text.itcm	00000012 _Bfree
20000b08  w    O .data	00000016 usb_string_serial_number



Disassembly of section .text.progmem:

60000000 <FlexSPI_NOR_Config>:
60000000:	FCFB...V........
	...
60000044:	.............. .
	...
60000080:	.....2.&........
60000090:	...$............
	...
600000b0:	................
	...
600000d0:	 ...............
	...
60000100:	................
60000110:	..... ..........
	...
60000130:	`...............
	...
600001c0:	................
600001d0:	................
	...
60000200:	................
60000210:	................
60000220:	................
60000230:	................
60000240:	................
60000250:	................
60000260:	................
60000270:	................
60000280:	................
60000290:	................
600002a0:	................
600002b0:	................
600002c0:	................
600002d0:	................
600002e0:	................
600002f0:	................
60000300:	................
60000310:	................
60000320:	................
60000330:	................
60000340:	................
60000350:	................
60000360:	................
60000370:	................
60000380:	................
60000390:	................
600003a0:	................
600003b0:	................
600003c0:	................
600003d0:	................
600003e0:	................
600003f0:	................
60000400:	................
60000410:	................
60000420:	................
60000430:	................
60000440:	................
60000450:	................
60000460:	................
60000470:	................
60000480:	................
60000490:	................
600004a0:	................
600004b0:	................
600004c0:	................
600004d0:	................
600004e0:	................
600004f0:	................
60000500:	................
60000510:	................
60000520:	................
60000530:	................
60000540:	................
60000550:	................
60000560:	................
60000570:	................
60000580:	................
60000590:	................
600005a0:	................
600005b0:	................
600005c0:	................
600005d0:	................
600005e0:	................
600005f0:	................
60000600:	................
60000610:	................
60000620:	................
60000630:	................
60000640:	................
60000650:	................
60000660:	................
60000670:	................
60000680:	................
60000690:	................
600006a0:	................
600006b0:	................
600006c0:	................
600006d0:	................
600006e0:	................
600006f0:	................
60000700:	................
60000710:	................
60000720:	................
60000730:	................
60000740:	................
60000750:	................
60000760:	................
60000770:	................
60000780:	................
60000790:	................
600007a0:	................
600007b0:	................
600007c0:	................
600007d0:	................
600007e0:	................
600007f0:	................
60000800:	................
60000810:	................
60000820:	................
60000830:	................
60000840:	................
60000850:	................
60000860:	................
60000870:	................
60000880:	................
60000890:	................
600008a0:	................
600008b0:	................
600008c0:	................
600008d0:	................
600008e0:	................
600008f0:	................
60000900:	................
60000910:	................
60000920:	................
60000930:	................
60000940:	................
60000950:	................
60000960:	................
60000970:	................
60000980:	................
60000990:	................
600009a0:	................
600009b0:	................
600009c0:	................
600009d0:	................
600009e0:	................
600009f0:	................
60000a00:	................
60000a10:	................
60000a20:	................
60000a30:	................
60000a40:	................
60000a50:	................
60000a60:	................
60000a70:	................
60000a80:	................
60000a90:	................
60000aa0:	................
60000ab0:	................
60000ac0:	................
60000ad0:	................
60000ae0:	................
60000af0:	................
60000b00:	................
60000b10:	................
60000b20:	................
60000b30:	................
60000b40:	................
60000b50:	................
60000b60:	................
60000b70:	................
60000b80:	................
60000b90:	................
60000ba0:	................
60000bb0:	................
60000bc0:	................
60000bd0:	................
60000be0:	................
60000bf0:	................
60000c00:	................
60000c10:	................
60000c20:	................
60000c30:	................
60000c40:	................
60000c50:	................
60000c60:	................
60000c70:	................
60000c80:	................
60000c90:	................
60000ca0:	................
60000cb0:	................
60000cc0:	................
60000cd0:	................
60000ce0:	................
60000cf0:	................
60000d00:	................
60000d10:	................
60000d20:	................
60000d30:	................
60000d40:	................
60000d50:	................
60000d60:	................
60000d70:	................
60000d80:	................
60000d90:	................
60000da0:	................
60000db0:	................
60000dc0:	................
60000dd0:	................
60000de0:	................
60000df0:	................
60000e00:	................
60000e10:	................
60000e20:	................
60000e30:	................
60000e40:	................
60000e50:	................
60000e60:	................
60000e70:	................
60000e80:	................
60000e90:	................
60000ea0:	................
60000eb0:	................
60000ec0:	................
60000ed0:	................
60000ee0:	................
60000ef0:	................
60000f00:	................
60000f10:	................
60000f20:	................
60000f30:	................
60000f40:	................
60000f50:	................
60000f60:	................
60000f70:	................
60000f80:	................
60000f90:	................
60000fa0:	................
60000fb0:	................
60000fc0:	................
60000fd0:	................
60000fe0:	................
60000ff0:	................

60001000 <ImageVectorTable>:
60001000:	.. C-..`........
60001010:	 ..`...`.#.`....

60001020 <BootData>:
60001020:	...`./......

6000102c <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000102c:	ldr	r3, [pc, #468]	; (60001204 <ResetHandler+0x1d8>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000102e:	mov.w	r1, #11141120	; 0xaa0000
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001032:	ldr	r2, [pc, #468]	; (60001208 <ResetHandler+0x1dc>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001034:	ldr	r0, [pc, #468]	; (6000120c <ResetHandler+0x1e0>)
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
void startup_late_hook(void)		__attribute__ ((weak, alias("startup_default_late_hook")));
__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
void ResetHandler(void)
{
60001036:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103a:	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
6000103c:	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
6000103e:	ldr	r2, [pc, #464]	; (60001210 <ResetHandler+0x1e4>)
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001040:	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001042:	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001044:	ldr	r2, [pc, #460]	; (60001214 <ResetHandler+0x1e8>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001046:	add.w	r3, r3, #180224	; 0x2c000
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000104a:	ldr	r1, [pc, #460]	; (60001218 <ResetHandler+0x1ec>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000104c:	movs	r0, #8
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000104e:	cmp	r2, r1
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001050:	str.w	r0, [r3, #340]	; 0x154
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001054:	beq.n	60001076 <ResetHandler+0x4a>
	while (dest < dest_end) {
60001056:	ldr	r3, [pc, #452]	; (6000121c <ResetHandler+0x1f0>)
60001058:	cmp	r2, r3
6000105a:	bcs.n	60001076 <ResetHandler+0x4a>
6000105c:	mvns	r4, r2
6000105e:	mov	r0, r1
60001060:	add	r3, r4
60001062:	bic.w	r3, r3, #3
60001066:	adds	r3, #4
60001068:	add	r3, r1
		*dest++ = *src++;
6000106a:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000106e:	cmp	r0, r3
		*dest++ = *src++;
60001070:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001074:	bne.n	6000106a <ResetHandler+0x3e>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001076:	ldr	r2, [pc, #424]	; (60001220 <ResetHandler+0x1f4>)
60001078:	ldr	r1, [pc, #424]	; (60001224 <ResetHandler+0x1f8>)
6000107a:	cmp	r2, r1
6000107c:	beq.n	6000109e <ResetHandler+0x72>
	while (dest < dest_end) {
6000107e:	ldr	r3, [pc, #424]	; (60001228 <ResetHandler+0x1fc>)
60001080:	cmp	r2, r3
60001082:	bcs.n	6000109e <ResetHandler+0x72>
60001084:	mvns	r4, r2
60001086:	mov	r0, r1
60001088:	add	r3, r4
6000108a:	bic.w	r3, r3, #3
6000108e:	adds	r3, #4
60001090:	add	r3, r1
		*dest++ = *src++;
60001092:	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001096:	cmp	r0, r3
		*dest++ = *src++;
60001098:	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000109c:	bne.n	60001092 <ResetHandler+0x66>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
6000109e:	ldr	r2, [pc, #396]	; (6000122c <ResetHandler+0x200>)
600010a0:	ldr	r3, [pc, #396]	; (60001230 <ResetHandler+0x204>)
600010a2:	cmp	r2, r3
600010a4:	bcs.n	600010be <ResetHandler+0x92>
600010a6:	mvns	r0, r2
600010a8:	mov	r1, r2
		*dest++ = 0;
600010aa:	movs	r4, #0
600010ac:	add	r3, r0
600010ae:	bic.w	r3, r3, #3
600010b2:	adds	r3, #4
600010b4:	add	r3, r2
600010b6:	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010ba:	cmp	r3, r1
600010bc:	bne.n	600010b6 <ResetHandler+0x8a>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010be:	ldr	r2, [pc, #372]	; (60001234 <ResetHandler+0x208>)
600010c0:	mov.w	r1, #15728640	; 0xf00000
600010c4:	ldr	r3, [pc, #368]	; (60001238 <ResetHandler+0x20c>)
600010c6:	str	r1, [r2, #0]
600010c8:	add.w	r1, r3, #704	; 0x2c0
600010cc:	ldr	r2, [pc, #364]	; (6000123c <ResetHandler+0x210>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010ce:	str.w	r2, [r3, #4]!
600010d2:	cmp	r1, r3
600010d4:	bne.n	600010ce <ResetHandler+0xa2>
600010d6:	ldr	r3, [pc, #360]	; (60001240 <ResetHandler+0x214>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010d8:	movs	r1, #128	; 0x80
600010da:	ldr	r2, [pc, #360]	; (60001244 <ResetHandler+0x218>)
600010dc:	strb.w	r1, [r3], #1
600010e0:	cmp	r3, r2
600010e2:	bne.n	600010dc <ResetHandler+0xb0>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010e4:	ldr	r4, [pc, #352]	; (60001248 <ResetHandler+0x21c>)
600010e6:	mov.w	r7, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010ea:	ldr	r6, [pc, #352]	; (6000124c <ResetHandler+0x220>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010ec:	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f0:	ldr.w	sl, [pc, #408]	; 6000128c <ResetHandler+0x260>
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600010f4:	movs	r5, #0
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f6:	ldr	r3, [pc, #344]	; (60001250 <ResetHandler+0x224>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010f8:	ldr.w	r9, [pc, #404]	; 60001290 <ResetHandler+0x264>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600010fc:	ldr.w	r8, [pc, #404]	; 60001294 <ResetHandler+0x268>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001100:	str.w	sl, [r3]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001104:	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001108:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000110c:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001110:	str.w	r8, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
60001114:	ldr	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001116:	ldr	r1, [pc, #236]	; (60001204 <ResetHandler+0x1d8>)
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
60001118:	bic.w	r3, r3, #127	; 0x7f
6000111c:	orr.w	r3, r3, #64	; 0x40
60001120:	str	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
60001122:	ldr	r3, [r6, #36]	; 0x24
60001124:	bic.w	r3, r3, #127	; 0x7f
60001128:	orr.w	r3, r3, #64	; 0x40
6000112c:	str	r3, [r6, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000112e:	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
60001130:	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001132:	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001134:	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
60001136:	bl	60001384 <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000113a:	ldr	r2, [pc, #280]	; (60001254 <ResetHandler+0x228>)
6000113c:	movs	r0, #99	; 0x63
	SYST_CVR = 0;
6000113e:	ldr	r3, [pc, #280]	; (60001258 <ResetHandler+0x22c>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001140:	ldr	r1, [pc, #280]	; (6000125c <ResetHandler+0x230>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001142:	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001144:	movs	r2, #3
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
60001146:	str	r5, [r3, #0]
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001148:	str.w	r1, [sl, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000114c:	str.w	r2, [r3, #-8]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001150:	ldr	r1, [pc, #268]	; (60001260 <ResetHandler+0x234>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001152:	ldr	r2, [pc, #272]	; (60001264 <ResetHandler+0x238>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001154:	ldr	r0, [pc, #272]	; (60001268 <ResetHandler+0x23c>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001156:	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000115a:	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000115c:	ldr	r2, [pc, #268]	; (6000126c <ResetHandler+0x240>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000115e:	orr.w	r3, r3, #16777216	; 0x1000000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001162:	str.w	r0, [sl, #60]	; 0x3c
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001166:	ldr	r0, [pc, #264]	; (60001270 <ResetHandler+0x244>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001168:	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000116a:	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116c:	ldr	r1, [pc, #260]	; (60001274 <ResetHandler+0x248>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000116e:	orr.w	r3, r3, #1
60001172:	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001174:	ldr	r3, [r0, #0]
60001176:	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
60001178:	bl	6000147c <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000117c:	str.w	r7, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001180:	ldr	r0, [pc, #244]	; (60001278 <ResetHandler+0x24c>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001182:	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001186:	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000118a:	str.w	r8, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
6000118e:	bl	600017b0 <__set_arm_clock_veneer>
#endif

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001192:	ldr	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
60001194:	ldr	r2, [pc, #228]	; (6000127c <ResetHandler+0x250>)
#ifdef F_CPU
	set_arm_clock(F_CPU);
#endif

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001196:	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000119a:	ldr	r3, [pc, #228]	; (60001280 <ResetHandler+0x254>)
#ifdef F_CPU
	set_arm_clock(F_CPU);
#endif

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000119c:	str	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
6000119e:	str	r5, [r2, #0]
	PIT_TCTRL0 = 0;
600011a0:	str.w	r5, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
600011a4:	str.w	r5, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
600011a8:	str.w	r5, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
600011ac:	str.w	r5, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011b0:	ldr	r2, [r3, #56]	; 0x38
600011b2:	lsls	r2, r2, #31
600011b4:	bmi.n	600011c8 <ResetHandler+0x19c>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011b6:	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
600011ba:	ldr	r1, [pc, #200]	; (60001284 <ResetHandler+0x258>)
600011bc:	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011be:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
600011c0:	ldr	r2, [r3, #56]	; 0x38
600011c2:	orr.w	r2, r2, #1
600011c6:	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011c8:	ldr	r2, [pc, #180]	; (60001280 <ResetHandler+0x254>)
600011ca:	ldr	r4, [pc, #188]	; (60001288 <ResetHandler+0x25c>)
600011cc:	ldr	r3, [r2, #8]
600011ce:	orr.w	r3, r3, #65537	; 0x10001
600011d2:	str	r3, [r2, #8]

#ifdef ARDUINO_TEENSY41
	configure_external_ram();
#endif
	startup_early_hook();
600011d4:	bl	600017c0 <__startup_early_hook_veneer>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600011d8:	ldr	r3, [r4, #0]
	while (millis() < 20) ; // wait at least 20ms before starting USB
600011da:	cmp	r3, #19
600011dc:	bls.n	600011d8 <ResetHandler+0x1ac>
	usb_init();
600011de:	bl	60001298 <usb_init>
	analog_init();
600011e2:	bl	600015fc <analog_init>
	pwm_init();
600011e6:	bl	600017d8 <__pwm_init_veneer>
	tempmon_init();
600011ea:	bl	600014e0 <tempmon_init>

	startup_late_hook();
600011ee:	bl	600017c8 <__startup_late_hook_veneer>
600011f2:	ldr	r3, [r4, #0]
	while (millis() < 300) ; // wait at least 300ms before calling user code
600011f4:	cmp.w	r3, #300	; 0x12c
600011f8:	bcc.n	600011f2 <ResetHandler+0x1c6>
	//printf("before C++ constructors\n");
	__libc_init_array();
600011fa:	bl	600017b8 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
600011fe:	bl	60001798 <__main_veneer>
60001202:	b.n	60001202 <ResetHandler+0x1d6>
60001204:	.word	0x400ac000
60001208:	.word	0xaaaaaaaf
6000120c:	.word	0x00200007
60001210:	.word	0x20070000
60001214:	.word	0x00000000
60001218:	.word	0x600017f0
6000121c:	.word	0x0000f6c8
60001220:	.word	0x20000000
60001224:	.word	0x60010ebc
60001228:	.word	0x200014e0
6000122c:	.word	0x200014e0
60001230:	.word	0x20010700
60001234:	.word	0xe000ed88
60001238:	.word	0x200103fc
6000123c:	.word	0x00009835
60001240:	.word	0xe000e400
60001244:	.word	0xe000e4a0
60001248:	.word	0x400d8000
6000124c:	.word	0x400fc000
60001250:	.word	0xe000ed08
60001254:	.word	0xe000e014
60001258:	.word	0xe000e018
6000125c:	.word	0x0000a4b1
60001260:	.word	0xe000edfc
60001264:	.word	0x20200000
60001268:	.word	0x0000a4b5
6000126c:	.word	0xe0001000
60001270:	.word	0xe0001004
60001274:	.word	0x2000e67c
60001278:	.word	0x179a7b00
6000127c:	.word	0x40084000
60001280:	.word	0x400d4000
60001284:	.word	0x56c00000
60001288:	.word	0x2000e684
6000128c:	.word	0x20010400
60001290:	.word	0x2018101b
60001294:	.word	0x13110d0c

60001298 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001298:	ldr	r3, [pc, #192]	; (6000135c <usb_init+0xc4>)
6000129a:	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
6000129e:	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
600012a0:	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600012a4:	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
600012a8:	bl	600017a8 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012ac:	ldr	r1, [pc, #176]	; (60001360 <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600012ae:	ldr	r0, [pc, #180]	; (60001364 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012b0:	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600012b4:	ldr	r4, [pc, #176]	; (60001368 <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012b6:	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600012ba:	ldr	r3, [pc, #176]	; (6000136c <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600012bc:	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600012c0:	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600012c4:	ldr	r2, [r4, #0]
600012c6:	ands	r3, r2
600012c8:	cbnz	r3, 600012d2 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
600012ca:	ldr.w	r3, [r0, #424]	; 0x1a8
600012ce:	lsls	r2, r3, #30
600012d0:	beq.n	60001308 <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600012d2:	ldr	r3, [pc, #144]	; (60001364 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600012d4:	mov.w	r1, #2147483648	; 0x80000000
600012d8:	ldr	r2, [pc, #140]	; (60001368 <usb_init+0xd0>)
600012da:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600012dc:	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600012de:	ldr.w	r1, [r3, #320]	; 0x140
600012e2:	orr.w	r1, r1, #2
600012e6:	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600012ea:	ldr.w	r3, [r2, #320]	; 0x140
600012ee:	lsls	r3, r3, #30
600012f0:	bmi.n	600012ea <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600012f2:	mov.w	r0, #131072	; 0x20000
600012f6:	ldr	r1, [pc, #120]	; (60001370 <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600012f8:	ldr	r3, [pc, #108]	; (60001368 <usb_init+0xd0>)
600012fa:	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
600012fe:	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001300:	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001302:	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001304:	bl	600017d0 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001308:	ldr	r5, [pc, #104]	; (60001374 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
6000130a:	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000130c:	ldr	r3, [pc, #88]	; (60001368 <usb_init+0xd0>)
6000130e:	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001312:	ldr	r4, [pc, #80]	; (60001364 <usb_init+0xcc>)
60001314:	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001316:	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001318:	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
6000131a:	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000131c:	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
6000131e:	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001322:	mov.w	r2, #768	; 0x300
60001326:	bl	600017a0 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000132a:	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
6000132e:	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001332:	movw	r3, #323	; 0x143
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001336:	ldr	r2, [pc, #64]	; (60001378 <usb_init+0xe0>)
60001338:	ldr	r1, [pc, #64]	; (6000137c <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
6000133a:	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
6000133c:	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
6000133e:	str.w	r5, [r4, #344]	; 0x158
60001342:	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001346:	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000134a:	ldr	r2, [pc, #52]	; (60001380 <usb_init+0xe8>)
6000134c:	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001350:	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001352:	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001354:	str.w	r3, [r4, #320]	; 0x140
60001358:	pop	{r4, r5, r6, pc}
6000135a:	nop
6000135c:	.word	0x400d8000
60001360:	.word	0x400fc000
60001364:	.word	0x402e0000
60001368:	.word	0x400d9000
6000136c:	.word	0x001e1c00
60001370:	.word	0xe000e28c
60001374:	.word	0x20010000
60001378:	.word	0x20010400
6000137c:	.word	0x00008f25
60001380:	.word	0xe000e10c

60001384 <configure_cache>:
#define SIZE_2G		(SCB_MPU_RASR_SIZE(30) | SCB_MPU_RASR_ENABLE)
#define SIZE_4G		(SCB_MPU_RASR_SIZE(31) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
60001384:	push	{r4, r5, r6, r7, lr}
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001386:	ldr	r2, [pc, #160]	; (60001428 <configure_cache+0xa4>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001388:	movs	r0, #0

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000138a:	ldr	r3, [pc, #160]	; (6000142c <configure_cache+0xa8>)
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
6000138c:	mov.w	ip, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
60001390:	ldr	r4, [pc, #156]	; (60001430 <configure_cache+0xac>)

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001392:	movs	r7, #17

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001394:	ldr.w	lr, [pc, #216]	; 60001470 <configure_cache+0xec>
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001398:	movs	r6, #18
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
6000139a:	str	r0, [r4, #0]
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
6000139c:	movs	r5, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
6000139e:	str.w	ip, [r2]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600013a2:	str.w	lr, [r3]
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600013a6:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600013a8:	ldr.w	lr, [pc, #200]	; 60001474 <configure_cache+0xf0>

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600013ac:	ldr	r7, [pc, #132]	; (60001434 <configure_cache+0xb0>)
	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600013ae:	str.w	lr, [r3]

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600013b2:	str	r6, [r2, #0]
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600013b4:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600013b6:	ldr	r6, [pc, #128]	; (60001438 <configure_cache+0xb4>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600013b8:	ldr	r7, [pc, #128]	; (6000143c <configure_cache+0xb8>)
	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600013ba:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600013bc:	ldr	r1, [pc, #128]	; (60001440 <configure_cache+0xbc>)
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600013be:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600013c0:	ldr	r6, [pc, #128]	; (60001444 <configure_cache+0xc0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600013c2:	orr.w	r1, r1, #21

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600013c6:	ldr	r7, [pc, #128]	; (60001448 <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600013c8:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600013ca:	str	r7, [r3, #0]
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600013cc:	add.w	r7, r7, #196608	; 0x30000

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600013d0:	ldr	r6, [pc, #120]	; (6000144c <configure_cache+0xc8>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600013d2:	str	r1, [r2, #0]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600013d4:	adds	r7, #2

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600013d6:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600013d8:	ldr.w	lr, [pc, #156]	; 60001478 <configure_cache+0xf4>
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600013dc:	ldr	r6, [pc, #112]	; (60001450 <configure_cache+0xcc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600013de:	ldr	r1, [pc, #116]	; (60001454 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600013e0:	str.w	lr, [r2]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600013e4:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600013e6:	str	r6, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600013e8:	ldr	r7, [pc, #108]	; (60001458 <configure_cache+0xd4>)

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600013ea:	str	r1, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600013ec:	ldr	r6, [pc, #108]	; (6000145c <configure_cache+0xd8>)

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600013ee:	ldr	r1, [pc, #112]	; (60001460 <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600013f0:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600013f2:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
600013f4:	ldr	r7, [pc, #108]	; (60001464 <configure_cache+0xe0>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600013f6:	str	r1, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600013f8:	ldr	r6, [pc, #108]	; (60001468 <configure_cache+0xe4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
600013fa:	ldr	r1, [pc, #112]	; (6000146c <configure_cache+0xe8>)

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | NOEXEC | SIZE_256M;
600013fc:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600013fe:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001400:	str	r1, [r3, #0]

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001402:	str	r5, [r4, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
60001404:	dsb	sy
	asm("isb");
60001408:	isb	sy
	SCB_CACHE_ICIALLU = 0;
6000140c:	str.w	r0, [r3, #432]	; 0x1b0

	asm("dsb");
60001410:	dsb	sy
	asm("isb");
60001414:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001418:	ldr.w	r3, [r2, #-136]
6000141c:	orr.w	r3, r3, #196608	; 0x30000
60001420:	str.w	r3, [r2, #-136]
60001424:	pop	{r4, r5, r6, r7, pc}
60001426:	nop
60001428:	.word	0xe000ed9c
6000142c:	.word	0xe000eda0
60001430:	.word	0xe000ed94
60001434:	.word	0x00100009
60001438:	.word	0x00200013
6000143c:	.word	0x07020021
60001440:	.word	0x20010700
60001444:	.word	0x20000014
60001448:	.word	0x13080025
6000144c:	.word	0x10000009
60001450:	.word	0x40000017
60001454:	.word	0x13100033
60001458:	.word	0x60000018
6000145c:	.word	0x070b002f
60001460:	.word	0x70000019
60001464:	.word	0x170b0037
60001468:	.word	0x7000001a
6000146c:	.word	0x130b002f
60001470:	.word	0x1000003f
60001474:	.word	0x03080025
60001478:	.word	0x20200016

6000147c <usb_pll_start>:

#endif // ARDUINO_TEENSY41


FLASHMEM void usb_pll_start()
{
6000147c:	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000147e:	ldr	r2, [pc, #92]	; (600014dc <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001480:	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001482:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001486:	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000148a:	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000148e:	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001492:	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001496:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001498:	tst.w	r3, #2
6000149c:	beq.n	600014ac <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
6000149e:	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
600014a0:	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600014a2:	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600014a4:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
600014a6:	tst.w	r3, #2
600014aa:	bne.n	6000149e <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
600014ac:	tst.w	r3, #8192	; 0x2000
600014b0:	bne.n	600014b6 <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
600014b2:	str	r5, [r2, #20]
			continue;
600014b4:	b.n	60001496 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
600014b6:	tst.w	r3, #4096	; 0x1000
600014ba:	bne.n	600014c0 <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600014bc:	str	r6, [r2, #20]
			continue;
600014be:	b.n	60001496 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
600014c0:	cmp	r3, #0
600014c2:	bge.n	60001496 <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
600014c4:	tst.w	r3, #65536	; 0x10000
600014c8:	beq.n	600014ce <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600014ca:	str	r1, [r2, #24]
			continue;
600014cc:	b.n	60001496 <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
600014ce:	lsls	r3, r3, #25
600014d0:	bmi.n	600014d6 <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600014d2:	str	r7, [r2, #20]
			continue;
600014d4:	b.n	60001496 <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
600014d6:	pop	{r4, r5, r6, r7}
600014d8:	bx	lr
600014da:	nop
600014dc:	.word	0x400d8000

600014e0 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014e0:	ldr	r2, [pc, #236]	; (600015d0 <tempmon_init+0xf0>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600014e2:	vmov.f32	s13, #57	; 0x41c80000  25.0

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600014e6:	ldr	r1, [pc, #236]	; (600015d4 <tempmon_init+0xf4>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600014e8:	movs	r0, #0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014ea:	ldr	r3, [r2, #0]
  asm volatile ("dsb":::"memory");
  while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
600014ec:	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014ee:	bic.w	r3, r3, #1

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600014f2:	movs	r4, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600014f4:	ldr.w	lr, [pc, #256]	; 600015f8 <tempmon_init+0x118>
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600014f8:	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600014fa:	str.w	r4, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600014fe:	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
60001502:	ldr	r7, [pc, #212]	; (600015d8 <tempmon_init+0xf8>)
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001504:	uxtb	r5, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001506:	ubfx	r4, r3, #8, #12
6000150a:	ldr	r6, [pc, #208]	; (600015dc <tempmon_init+0xfc>)
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
6000150c:	rsb	r3, r4, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001510:	vmov	s15, r5
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001514:	sub.w	r1, r5, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001518:	str.w	r5, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000151c:	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001520:	add.w	r5, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001524:	vmov	s15, r4
60001528:	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
6000152c:	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000152e:	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001532:	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001536:	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000153a:	subs	r1, r1, r5
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000153c:	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001540:	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001544:	ldr	r5, [pc, #152]	; (600015e0 <tempmon_init+0x100>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001546:	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000154a:	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000154c:	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001550:	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001554:	str	r4, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001556:	vdiv.f32	s11, s14, s13
6000155a:	ldr	r6, [pc, #136]	; (600015e4 <tempmon_init+0x104>)
6000155c:	ldr	r5, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000155e:	ldr	r1, [pc, #136]	; (600015e8 <tempmon_init+0x108>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001560:	ldr	r4, [pc, #136]	; (600015ec <tempmon_init+0x10c>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001562:	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001566:	vmov	s15, r3
6000156a:	ldr	r3, [pc, #132]	; (600015f0 <tempmon_init+0x110>)
6000156c:	str.w	r3, [r6, #320]	; 0x140
60001570:	vcvt.f32.u32	s15, s15
60001574:	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001578:	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000157c:	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001580:	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001584:	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001588:	vmov	r3, s11
6000158c:	orr.w	r3, r5, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001590:	vmov	r5, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001594:	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001598:	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000159a:	and.w	r1, r1, r5, lsl #16
6000159e:	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600015a2:	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600015a6:	orrs	r3, r1
600015a8:	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600015ac:	vmov	r3, s15
600015b0:	ldr.w	r1, [r2, #272]	; 0x110
600015b4:	ubfx	r3, r3, #0, #12
600015b8:	orrs	r3, r1
600015ba:	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
600015be:	ldr	r3, [r2, #0]
600015c0:	orr.w	r3, r3, #2
600015c4:	str	r3, [r2, #0]

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600015c6:	strb	r0, [r4, #0]
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
600015c8:	ldr	r3, [pc, #40]	; (600015f4 <tempmon_init+0x114>)
600015ca:	movs	r2, #1
600015cc:	str	r2, [r3, #0]
600015ce:	pop	{r4, r5, r6, r7, pc}
600015d0:	.word	0x400d8180
600015d4:	.word	0x401f4400
600015d8:	.word	0x2000e690
600015dc:	.word	0x2000e694
600015e0:	.word	0x2000e68c
600015e4:	.word	0x20010400
600015e8:	.word	0x0fff0000
600015ec:	.word	0xe000e440
600015f0:	.word	0x00009ce1
600015f4:	.word	0xe000e108
600015f8:	.word	0x2000e688

600015fc <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600015fc:	ldr	r3, [pc, #68]	; (60001644 <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600015fe:	ldr	r1, [pc, #72]	; (60001648 <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001600:	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
60001602:	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001604:	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
60001608:	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000160a:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
6000160c:	movw	r5, #1591	; 0x637
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001610:	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001612:	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001614:	orr.w	r0, r0, #768	; 0x300
60001618:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
6000161a:	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
6000161c:	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
6000161e:	ldr	r3, [r2, #72]	; 0x48
60001620:	lsls	r3, r3, #24
60001622:	bmi.n	6000161e <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001624:	ldr	r3, [pc, #36]	; (6000164c <analog_init+0x50>)
60001626:	movw	r0, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
6000162a:	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
6000162c:	mov	r2, r3
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
6000162e:	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001630:	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
60001632:	ldr	r3, [r2, #72]	; 0x48
60001634:	ands.w	r3, r3, #128	; 0x80
60001638:	bne.n	60001632 <analog_init+0x36>
	calibrating = 0;
6000163a:	ldr	r2, [pc, #20]	; (60001650 <analog_init+0x54>)
6000163c:	strb	r3, [r2, #0]
}
6000163e:	pop	{r4, r5}
60001640:	bx	lr
60001642:	nop
60001644:	.word	0x400fc000
60001648:	.word	0x400c4000
6000164c:	.word	0x400c8000
60001650:	.word	0x2000e7f5

60001654 <usb_string_mtp>:
60001654:	..M.T.P.

6000165c <usb_string_product_name_default>:
6000165c:	..T.e.e.n.s.y. .
6000166c:	M.T.P. .D.i.s.k.
6000167c:	/.S.e.r.i.a.l...

6000168c <usb_string_manufacturer_name_default>:
6000168c:	..T.e.e.n.s.y.d.
6000169c:	u.i.n.o.

600016a4 <string0>:
600016a4:	....

600016a8 <usb_config_descriptor_12>:
600016a8:	..i.....2.......
600016b8:	...........$....
600016c8:	$....$...$......
600016d8:	................
600016e8:	.@......@.......
600016f8:	........@......@
60001708:	...... .....

60001714 <usb_config_descriptor_480>:
60001714:	..i.....2.......
60001724:	...........$....
60001734:	$....$...$......
60001744:	................
60001754:	................
60001764:	................
60001774:	...... .....

60001780 <qualifier_descriptor>:
60001780:	.......@..

6000178a <_serialEvent_default>:
6000178a:	..

6000178c <_init>:
6000178c:	push	{r3, r4, r5, r6, r7, lr}
6000178e:	nop
60001790:	pop	{r3, r4, r5, r6, r7}
60001792:	pop	{r3}
60001794:	mov	lr, r3
60001796:	bx	lr

60001798 <__main_veneer>:
60001798:	ldr.w	pc, [pc]	; 6000179c <__main_veneer+0x4>
6000179c:	.word	0x0000a5cd

600017a0 <__memset_veneer>:
600017a0:	ldr.w	pc, [pc]	; 600017a4 <__memset_veneer+0x4>
600017a4:	.word	0x0000bc2d

600017a8 <__usb_init_serialnumber_veneer>:
600017a8:	ldr.w	pc, [pc]	; 600017ac <__usb_init_serialnumber_veneer+0x4>
600017ac:	.word	0x0000a325

600017b0 <__set_arm_clock_veneer>:
600017b0:	ldr.w	pc, [pc]	; 600017b4 <__set_arm_clock_veneer+0x4>
600017b4:	.word	0x0000a69d

600017b8 <____libc_init_array_veneer>:
600017b8:	ldr.w	pc, [pc]	; 600017bc <____libc_init_array_veneer+0x4>
600017bc:	.word	0x0000b579

600017c0 <__startup_early_hook_veneer>:
600017c0:	ldr.w	pc, [pc]	; 600017c4 <__startup_early_hook_veneer+0x4>
600017c4:	.word	0x0000984d

600017c8 <__startup_late_hook_veneer>:
600017c8:	ldr.w	pc, [pc]	; 600017cc <__startup_late_hook_veneer+0x4>
600017cc:	.word	0x00009851

600017d0 <__delay_veneer>:
600017d0:	ldr.w	pc, [pc]	; 600017d4 <__delay_veneer+0x4>
600017d4:	.word	0x00009705

600017d8 <__pwm_init_veneer>:
600017d8:	ldr.w	pc, [pc]	; 600017dc <__pwm_init_veneer+0x4>
600017dc:	.word	0x00009d85

600017e0 <__init_array_start>:
600017e0:	.word	0x00000045
600017e4:	.word	0x00006661

600017e8 <__init_array_end>:
600017e8:	.word	0xffffffff
600017ec:	.word	0xffffffff

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
      20:	.word	0x4c05b510
      24:	ldrb	r3, [r4, #0]
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);
      26:	cbnz	r3, 36 <__rtc_localtime+0x5>

    return tmeas;
      28:	ldr	r3, [pc, #16]	; (3c <__rtc_localtime+0xb>)
      2a:	cbz	r3, 32 <__rtc_localtime+0x1>
      2c:	ldr	r0, [pc, #16]	; (40 <__rtc_localtime+0xf>)
      2e:	nop.w
      32:	movs	r3, #1
      34:	strb	r3, [r4, #0]
      36:	pop	{r4, pc}
      38:	.word	0x200014e0
      3c:	movs	r0, r0
      3e:	movs	r0, r0
}
      40:	movt	r0, #18432	; 0x4800

00000044 <frame_dummy>:
      44:	ldr	r3, [pc, #32]	; (68 <frame_dummy+0x24>)
      46:	push	{r4, lr}
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	ldr	r1, [pc, #32]	; (6c <frame_dummy+0x28>)
      4c:	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	nop.w
      52:	.short	0x4808
      54:	ldr	r3, [r0, #0]
      56:	.short	0xb903
      58:	pop	{r4, pc}
      5a:	.short	0x4b07
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      5c:	cmp	r3, #0
      5e:	.short	0xd0fb
      60:	ldmia.w	sp!, {r4, lr}
      64:	bx	r3
      66:	.short	0xbf00
      mode |= ADC_CFG_AVGS(2);
      mode1 |= ADC_CFG_AVGS(2);

    } else if (num >= 8) {
      mode |= ADC_CFG_AVGS(1);
      mode1 |= ADC_CFG_AVGS(1);
      68:	movs	r0, r0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      6a:	.short	0x0000
  ADC2_CFG = mode1;
  
  if(num >= 4){
      6c:	asrs	r4, r4, #19
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      6e:	.short	0x2000
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      70:	movt	r0, #18432	; 0x4800
  ADC2_CFG = mode1;
  
  if(num >= 4){
      74:	.word	0x200014e0
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
      78:	movs	r0, r0
	...

0000007c <MTPD::write(char const*, int) [clone .part.16]>:
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
      7c:	.word	0xe92d6843
    int fetch_packet(uint8_t *data_buffer)
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
      80:	blx	lr
      82:	mov	r6, r1
      84:	.word	0xb92b4690
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
      88:	ldr.w	sl, [pc, #112]	; fc <MTPD::write(char const*, int) [clone .part.16]+0x80>
      8c:	add.w	r2, r0, #544	; 0x220
      90:	.word	0x2000f8ca
        write_length_ += len;
      94:	add	r3, r8
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
      96:	cmp.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
      9a:	.short	0x6043
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
      9c:	ble.n	f6 <MTPD::write(char const*, int) [clone .part.16]+0x7a>
      9e:	.short	0xf500
      a0:	ldr	r4, [r0, #24]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
      a2:	.short	0xf500
      a4:	strb	r0, [r1, #28]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
      a6:	.short	0x2500
      a8:	ldr.w	sl, [pc, #80]	; fc <MTPD::write(char const*, int) [clone .part.16]+0x80>
      ac:	.word	0x45a8e001
      b0:	ble.n	f6 <MTPD::write(char const*, int) [clone .part.16]+0x7a>
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
      b2:	.short	0xf8da
      b4:	movs	r0, r0
          int to_copy = min(len - pos, avail);
      b6:	.short	0xebc5
      b8:	lsls	r0, r1, #12
          memcpy(dst,src,to_copy);
      ba:	.short	0x4631
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
      bc:	rsb	r4, r0, r9
      c0:	cmp	r4, r3
      c2:	it	ge
      c4:	movge	r4, r3
          memcpy(dst,src,to_copy);
      c6:	mov	r2, r4
          pos += to_copy;
      c8:	.word	0xf0084425
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
      cc:			; <UNDEFINED> instruction: 0xfa4df8da
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
      d0:	.word	0x44263000
      d4:	add	r4, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
      d6:	cmp	r4, r9
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
      d8:	.word	0x4000f8ca
          if(dst == tx_data_buffer+MTP_TX_SIZE)
      dc:	bne.n	ae <MTPD::write(char const*, int) [clone .part.16]+0x32>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
      de:	movs	r2, #60	; 0x3c
      e0:	mov.w	r1, #512	; 0x200
      e4:	mov	r0, r7
      e6:	bl	a228 <usb_mtp_send>
      ea:	cmp	r0, #0
      ec:	.word	0x45a8ddf7
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
      f0:	str.w	r7, [sl]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
      f4:	.word	0xe8bddcdd
      f8:	strh	r0, [r6, #62]	; 0x3e
      fa:	.short	0xbf00
      fc:	asrs	r4, r7, #19
      fe:	.short	0x2000

00000100 <setup>:
	*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
	if (hardware->rx_pins[rx_pin_index_].select_input_register) {
	 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
	}	

	*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
     100:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     104:	ldr	r0, [pc, #652]	; (394 <setup+0x294>)
     106:	sub	sp, #268	; 0x10c
     108:	ldr	r5, [pc, #652]	; (398 <setup+0x298>)
     10a:	ldr	r4, [pc, #656]	; (39c <setup+0x29c>)
     10c:	ldr	r1, [pc, #656]	; (3a0 <setup+0x2a0>)
     10e:	ldrb	r3, [r5, #0]
	*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
     110:	cmp	r3, #0
     112:	beq.n	10e <setup+0xe>
     114:	.word	0x07db7823
     118:	bpl.n	10e <setup+0xe>
     11a:	ldr	r3, [r0, #0]
     11c:	ldr	r2, [r1, #0]
     11e:	subs	r3, r3, r2
     120:	cmp	r3, #14
     122:	.short	0xd9f4
     124:	movs	r1, #11
     126:	ldr	r0, [pc, #636]	; (3a4 <setup+0x2a4>)
     128:	bl	8cd8 <usb_serial_write>

	if (hardware->tx_pins[tx_pin_index_].select_input_register) {
     12c:	ldr	r0, [pc, #632]	; (3a8 <setup+0x2a8>)
	 	*(hardware->tx_pins[tx_pin_index_].select_input_register) =  hardware->tx_pins[tx_pin_index_].select_val;		
     12e:	bl	a4fc <Print::println()>
	}	
	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
     132:	.short	0x489e
#define DMA_NUM_CHANNELS        32

#ifdef __cplusplus
extern "C" void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
     134:	bl	69a4 <setSyncProvider(long (*)())>
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
     138:	bl	6980 <year()>
	 	*(hardware->tx_pins[tx_pin_index_].select_input_register) =  hardware->tx_pins[tx_pin_index_].select_val;		
	}	
	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
     13c:	mov	r5, r0
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
	port->PINCFG = 0;
     13e:	bl	6960 <month()>
	}	
	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
     142:	mov	r7, r0
     144:	bl	6940 <day()>
     148:	mov	r8, r0
     14a:	bl	68e0 <hour()>
	 	*(hardware->tx_pins[tx_pin_index_].select_input_register) =  hardware->tx_pins[tx_pin_index_].select_val;		
	}	
	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
     14e:	mov	r4, r0
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
     150:	.word	0xfbd6f006
	 	*(hardware->tx_pins[tx_pin_index_].select_input_register) =  hardware->tx_pins[tx_pin_index_].select_val;		
	}	
	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
     154:	mov	r6, r0
     156:	bl	6920 <second()>
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
     15a:	.short	0x463b
     15c:	str	r0, [sp, #12]
     15e:	.short	0x462a
	port->PINCFG = 0;
     160:	ldr	r1, [pc, #588]	; (3b0 <setup+0x2b0>)
     162:	.short	0xf8cd
     164:	strh	r0, [r0, #0]

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
     166:	.short	0x9602
	NVIC_ENABLE_IRQ(hardware->irq);
     168:	str	r4, [sp, #4]
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
	port->PINCFG = 0;

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
     16a:	.short	0x488f
     16c:	bl	a52c <Print::printf(char const*, ...)>
     170:	.word	0x48902143
     174:	bl	8cd8 <usb_serial_write>
	NVIC_ENABLE_IRQ(hardware->irq);
	uint16_t tx_fifo_size = (((port->FIFO >> 4) & 0x7) << 2);
     178:	.word	0xf00a488b
	port->PINCFG = 0;

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
	NVIC_ENABLE_IRQ(hardware->irq);
     17c:	ldrsh.w	pc, [pc, #8]	; 188 <setup+0x88>
     180:	.word	0x2800fd45
     184:	beq.n	17e <setup+0x7e>
     186:	.short	0x4888
	uint16_t tx_fifo_size = (((port->FIFO >> 4) & 0x7) << 2);
     188:	bl	a690 <Stream::parseInt()>
     18c:	.word	0xbb084604
	uint8_t tx_water = (tx_fifo_size < 16) ? tx_fifo_size >> 1 : 7;
     190:	bl	8d3c <usb_serial_flush_output>
     194:	.word	0x4b884621
     198:	movs	r2, #10
     19a:	.short	0x4888
	uint16_t rx_fifo_size = (((port->FIFO >> 0) & 0x7) << 2);
     19c:	bl	6a08 <zeroFS_class::Init(unsigned char, unsigned char, char const*)>
     1a0:	.word	0x4887210b
	uint8_t rx_water = (rx_fifo_size < 16) ? rx_fifo_size >> 1 : 7;
     1a4:	bl	8cd8 <usb_serial_write>
     1a8:	ldr	r0, [pc, #508]	; (3a8 <setup+0x2a8>)
     1aa:	.short	0xf00a
     1ac:	vld1.32	{d4[1]}, [r7], r3
	// lets configure up our CTRL register value
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
     1b0:	.word	0xfe26f006
	/*
	Serial.printf("SerialX::begin stat:%x ctrl:%x fifo:%x water:%x\n", port->STAT, port->CTRL, port->FIFO, port->WATER );
	Serial.printf("  FIFO sizes: tx:%d rx:%d\n",tx_fifo_size, rx_fifo_size);	
	Serial.printf("  Watermark tx:%d, rx: %d\n", tx_water, rx_water);
	*/
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
     1b4:	ldr	r0, [pc, #516]	; (3bc <setup+0x2bc>)
	port->FIFO |= LPUART_FIFO_TXFE | LPUART_FIFO_RXFE;
     1b6:	.short	0xf006
     1b8:	cdp2	1, 9, cr2, cr7, cr8, {0}
     1bc:	ldr	r0, [pc, #516]	; (3c4 <setup+0x2c4>)
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
     1be:	bl	8cd8 <usb_serial_write>
	// lets configure up our CTRL register value
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
     1c2:	ldr	r0, [pc, #484]	; (3a8 <setup+0x2a8>)
     1c4:	.word	0xf99af00a
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
     1c8:	ldr	r0, [pc, #496]	; (3bc <setup+0x2bc>)
     1ca:	.short	0xf006
     1cc:	ldc2l	0, cr11, [r9, #-268]!	; 0xfffffef4
     1d0:	.word	0x8ff0e8bd

	// Bit 5 TXINVERT
	if (format & 0x20) ctrl |= LPUART_CTRL_TXINV;		// tx invert
     1d4:	movs	r1, #74	; 0x4a
     1d6:	.short	0x487c
     1d8:	bl	8cd8 <usb_serial_write>

	// write out computed CTRL
	port->CTRL = ctrl;
     1dc:	.word	0xf00a4872

	// Bit 3 10 bit - Will assume that begin already cleared it.
	// process some other bits which change other registers.
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
     1e0:	vst1.8	{d15[0]}, [sp], r8
     1e4:	ldc2	8, cr2, [r3, #-0]

	// Bit 4 RXINVERT 
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
     1e8:	.word	0x486fd0fb
     1ec:	bl	a690 <Stream::parseInt()>
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
     1f0:	.word	0xf0084681
     1f4:	stc2	11, cr4, [r3, #448]!	; 0x1c0
	port->STAT = c;

	// bit 8 can turn on 2 stop bit mote
	if ( format & 0x100) port->BAUD |= LPUART_BAUD_SBNS;	
     1f8:	.word	0x2100220a
     1fc:	ldr	r0, [pc, #444]	; (3bc <setup+0x2bc>)
     1fe:	.short	0xf006
     200:	stc2	1, cr2, [r3], {11}

	//Serial.printf("    stat:%x ctrl:%x fifo:%x water:%x\n", port->STAT, port->CTRL, port->FIFO, port->WATER );
	// Only if the user implemented their own...
	if (!(*hardware->serial_event_handler_default)) addToSerialEventsList(); 		// Enable the processing of serialEvent for this object
     204:	.word	0xf008486e
     208:	stc2l	8, cr4, [r7, #-412]!	; 0xfffffe64
}


void HardwareSerial::addToSerialEventsList() {
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
     20c:	.word	0xf976f00a
     210:	cmp	r4, #1
	//digitalWrite(4, LOW);
}


void HardwareSerial::addToSerialEventsList() {
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
     212:	beq.w	3fc <setup+0x2fc>
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
     216:	.short	0x2c02
     218:	bne.n	1ae <setup+0xae>
	//digitalWrite(4, LOW);
}


void HardwareSerial::addToSerialEventsList() {
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
     21a:	.short	0x2700
     21c:	mov	r2, r9
     21e:	.short	0x4867
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
     220:	mov.w	r5, #4294967295
     224:	.word	0xf8df4639
     228:	strh	r4, [r5, #12]
     22a:	.short	0xf10d
     22c:	lsrs	r0, r7, #10
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
     22e:	mov	r4, r7
     230:	.word	0x4e669704
     234:	bl	6b7c <zeroFS_class::Create(HDR_TYPE, int)>
     238:	.word	0xfb72f006
     23c:	ldr	r3, [pc, #400]	; (3d0 <setup+0x2d0>)
     23e:	.short	0xf9b8
     240:	movs	r0, #0
     242:	.short	0xfb83
     244:	asrs	r0, r0, #12
     246:	.short	0x17c0
     248:	rsb	r3, r0, r3, asr #3
     24c:	sxth	r3, r3
     24e:	.short	0x429a
     250:	beq.w	516 <setup+0x416>
     254:	.word	0x8832495f
     258:	strh	r3, [r1, #0]
     25a:	.short	0x2a00
     25c:	bne.w	51a <setup+0x41a>
void sd_chipSelect(uint16_t high_low); 

int newDay()
{
  static int16_t old=-1;
  int16_t x = day();
     260:	.word	0xfb6ef006
  if(x == old) return 0;
     264:	ldr	r3, [pc, #368]	; (3d8 <setup+0x2d8>)
void sd_chipSelect(uint16_t high_low); 

int newDay()
{
  static int16_t old=-1;
  int16_t x = day();
     266:	sxth	r0, r0
  if(x == old) return 0;
     268:	ldr	r2, [pc, #364]	; (3d8 <setup+0x2d8>)
     26a:	ldrsh.w	r3, [r3]
     26e:	cmp	r3, r0
     270:	beq.n	2c0 <setup+0x1c0>
          Serial.printf(" %7d %7d %7d %10d\n",tmn,tmx,(t3-t0),nsect);
        }

        if(newDay())
        { // new day
          if(open1) zFS.Close(T_DAY);
     272:	.short	0x4b5a
int newDay()
{
  static int16_t old=-1;
  int16_t x = day();
  if(x == old) return 0;
  old=x;
     274:	strh	r0, [r2, #0]
          Serial.printf(" %7d %7d %7d %10d\n",tmn,tmx,(t3-t0),nsect);
        }

        if(newDay())
        { // new day
          if(open1) zFS.Close(T_DAY);
     276:	.short	0x881b
     278:	cmp	r3, #0
     27a:	.short	0xf040
     27c:	strh	r4, [r4, #10]
          char dayName[80];
          sprintf(dayName,"Day_%04d%02d%02d",year(),month(),day());
     27e:	bl	6980 <year()>
     282:	.short	0x4605
     284:	bl	6960 <month()>
     288:	.word	0xf0064604
     28c:			; <UNDEFINED> instruction: 0xfb59462a
     290:	.word	0x49534623
     294:	str	r0, [sp, #0]
     296:	.short	0x4650
     298:	bl	c0d4 <sprintf>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     29c:	mov	r0, sl
     29e:	.short	0xf00b
     2a0:	vrsubhn.i64	d20, <illegal reg q7.5>, <illegal reg q0.5>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     2a4:	.word	0xf0084650
     2a8:	ldc2	8, cr4, [r7, #-252]	; 0xffffff04
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     2ac:	.word	0xf926f00a
          Serial.println(dayName);
          zFS.Create(T_DAY, dayName);
     2b0:	mov	r2, sl
     2b2:	.short	0x2101
     2b4:	ldr	r0, [pc, #260]	; (3bc <setup+0x2bc>)
     2b6:	.short	0xf006
     2b8:	umlal	r2, r3, r9, r1
          open1=1;
     2bc:	.word	0x80134a47
  return 1;
}
int newHour()
{
  static int16_t old=-1;
  int16_t x = hour();
     2c0:	bl	68e0 <hour()>
  if(x == old) return 0;
     2c4:	.word	0xb2004b47
     2c8:	ldr	r2, [pc, #280]	; (3e4 <setup+0x2e4>)
     2ca:	.short	0xf9b3
     2cc:	adds	r0, #0
     2ce:	.short	0x4283
     2d0:	beq.n	310 <setup+0x210>
          zFS.Create(T_DAY, dayName);
          open1=1;
        }
        if(newHour())
        { // new day
          if(open2) zFS.Close(T_HOUR);
     2d2:	.short	0x4b45
int newHour()
{
  static int16_t old=-1;
  int16_t x = hour();
  if(x == old) return 0;
  old=x;
     2d4:	strh	r0, [r2, #0]
          zFS.Create(T_DAY, dayName);
          open1=1;
        }
        if(newHour())
        { // new day
          if(open2) zFS.Close(T_HOUR);
     2d6:	.short	0x881b
     2d8:	cmp	r3, #0
     2da:	.short	0xf040
     2dc:	strh	r7, [r5, #8]
          char hourName[80];
          sprintf(hourName,"Hour_%02d",hour());
     2de:	bl	68e0 <hour()>
     2e2:	.short	0x4942
     2e4:	mov	r2, r0
     2e6:	mov	r0, sl
     2e8:	.word	0xfef4f00b
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     2ec:	mov	r0, sl
     2ee:	bl	c280 <strlen>
     2f2:	.short	0x4601
     2f4:	mov	r0, sl
     2f6:	.short	0xf008
     2f8:	stc2l	8, cr4, [pc], #172	; 3a8 <setup+0x2a8>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     2fc:	bl	a4fc <Print::println()>
          Serial.println(hourName);
          zFS.Create(T_HOUR,hourName);
     300:	.word	0x21024652
     304:	ldr	r0, [pc, #180]	; (3bc <setup+0x2bc>)
     306:	.short	0xf006
     308:	smlal	r2, r3, r1, r1
          open2=1;
     30c:	.word	0x80134a36
        }
        // new file
        char filename[80];
        sprintf(filename,"File_%02d%02d%02d.dat",hour(),minute(),second());
     310:	bl	68e0 <hour()>
     314:	.word	0xf0064605
     318:			; <UNDEFINED> instruction: 0xfaf34604
     31c:	.word	0xfb00f006
     320:	mov	r2, r5
     322:	mov	r3, r4
     324:	ldr	r1, [pc, #200]	; (3f0 <setup+0x2f0>)
     326:	str	r0, [sp, #0]
     328:	mov	r0, sl
     32a:	.short	0xf00b
     32c:	mrc2	6, 6, r4, cr3, cr0, {2}
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     330:	.word	0xffa6f00b
     334:	mov	r1, r0
     336:	.short	0x4650
     338:	movs	r7, #32
     33a:	.short	0xf008
     33c:	stc2l	4, cr2, [sp], {0}
        Serial.print(filename);
        t0 = micros();
     340:	.word	0xfa46f009
        zFS.Create(T_FILE,filename);
     344:	mov	r2, sl
        }
        // new file
        char filename[80];
        sprintf(filename,"File_%02d%02d%02d.dat",hour(),minute(),second());
        Serial.print(filename);
        t0 = micros();
     346:	.short	0x9004
        zFS.Create(T_FILE,filename);
     348:	movs	r1, #3
     34a:	.short	0x481c
        open3=1;

        tmn=0xFFFFFFFF;
     34c:	mov.w	r5, #4294967295
        // new file
        char filename[80];
        sprintf(filename,"File_%02d%02d%02d.dat",hour(),minute(),second());
        Serial.print(filename);
        t0 = micros();
        zFS.Create(T_FILE,filename);
     350:	.word	0xfb9cf006
        open3=1;
     354:	movs	r3, #1
     356:	.short	0x8033
     358:	ldr	r3, [pc, #152]	; (3f4 <setup+0x2f4>)
        tmn=0xFFFFFFFF;
        tmx=0;
        nsect=0;
      }
      
      for(int nn=0; nn<NDAT; nn++) data[nn]=(nn)%256;
     35a:	.short	0xf04f
     35c:	lsrs	r0, r0, #4
     35e:	.short	0xf803
     360:	ldr	r7, [sp, #4]
     362:	.short	0xf109
     364:	lsrs	r1, r0, #4
     366:	.short	0xf5b9
     368:	ldr	r7, [pc, #0]	; (36c <setup+0x26c>)
     36a:	.short	0xd1f8
      uint32_t tx = micros();
     36c:	bl	97d0 <micros>
     370:	mov	fp, r0
      zFS.Write((void *)data,NDAT);
     372:	.short	0x464a
     374:	ldr	r1, [pc, #128]	; (3f8 <setup+0x2f8>)
     376:	.short	0x4811
     378:	bl	6c98 <zeroFS_class::Write(void*, unsigned long)>
      tx=micros()-tx;
     37c:	.word	0xfa28f009
     380:	rsb	r0, fp, r0
     384:	.word	0xbf384284
     388:	movcc	r4, r0
     38a:	.short	0x4285
     38c:	it	cs
     38e:	.short	0x4605
    //
      uint32_t t0=0,t3=0;
      uint32_t tmn=0xFFFFFFFF,tmx=0;
      uint32_t nsect=0;

    while(1)
     390:	b.n	238 <setup+0x138>	; unpredictable branch in IT block

     392:	.short	0xbf00
     394:	b.n	a0 <MTPD::write(char const*, int) [clone .part.16]+0x24>	; unpredictable branch in IT block

     396:	.short	0x2000
     398:	b.n	8c <MTPD::write(char const*, int) [clone .part.16]+0x10>	; unpredictable branch in IT block

     39a:	.short	0x2000
     39c:	b.n	fffffef0 <_flexram_bank_config+0x55555441>	; unpredictable branch in IT block

     39e:	.short	0x2000
     3a0:			; <UNDEFINED> instruction: 0xe8342000
     3a4:	.word	0x20000114
     3a8:	lsrs	r0, r4, #12
     3aa:	.short	0x2000
     3ac:	ldr	r1, [sp, #68]	; 0x44
     3ae:	.short	0x0000
     3b0:	lsls	r0, r4, #4
     3b2:	.short	0x2000
     3b4:	lsls	r0, r1, #5
     3b6:	.short	0x2000
     3b8:	lsls	r4, r6, #1
     3ba:	.short	0x2000
     3bc:	cbnz	r4, 3e8 <setup+0x2e8>
     3be:	.short	0x2000
     3c0:	lsls	r4, r7, #1
     3c2:	.short	0x2000
     3c4:	lsls	r0, r1, #4
     3c6:	.short	0x2000
     3c8:	movs	r0, r5
     3ca:	.short	0x2000
     3cc:	asrs	r4, r0, #20
     3ce:	.short	0x2000
     3d0:	str	r7, [r4, #100]	; 0x64
     3d2:	.short	0x6666
     3d4:	lsrs	r0, r4, #11
     3d6:	.short	0x2000
     3d8:	lsrs	r2, r4, #11
     3da:	.short	0x2000
     3dc:	asrs	r0, r0, #20
     3de:	.short	0x2000
     3e0:	lsls	r0, r5, #3
     3e2:	.short	0x2000
     3e4:	lsrs	r4, r4, #11
     3e6:	.short	0x2000
     3e8:	asrs	r2, r0, #20
     3ea:	.short	0x2000
     3ec:	lsls	r4, r7, #3
     3ee:	.short	0x2000
     3f0:	lsls	r4, r4, #2
     3f2:	.short	0x2000
     3f4:	asrs	r7, r0, #20
     3f6:	.short	0x2000
     3f8:	asrs	r0, r1, #20
     3fa:	.short	0x2000

  if(mode==1)
  {
    //
    zFS.Create(T_ROOT,flag);  // 0 starts from beginning
    for(int i1=0; i1<5; i1++)
     3fc:	movs	r4, #0
  Serial.println("Initialized"); //while(1);

  if(mode==1)
  {
    //
    zFS.Create(T_ROOT,flag);  // 0 starts from beginning
     3fe:	.short	0x464a
     400:	ldr	r0, [pc, #332]	; (550 <setup+0x450>)
     402:	.short	0xf10d
     404:	lsrs	r0, r7, #10
     406:	.short	0x4621
     408:	bl	6b7c <zeroFS_class::Create(HDR_TYPE, int)>	; unpredictable branch in IT block

    for(int i1=0; i1<5; i1++)
    { char trialname[80];
      sprintf(trialname,"Day_%02d",i1);
     40c:	.word	0x49514622
     410:	add	r0, sp, #24
      zFS.Create(T_DAY, trialname);
      
      for(int i2=0; i2<5; i2++)
     412:	.short	0x2500
  {
    //
    zFS.Create(T_ROOT,flag);  // 0 starts from beginning
    for(int i1=0; i1<5; i1++)
    { char trialname[80];
      sprintf(trialname,"Day_%02d",i1);
     414:	bl	c0d4 <sprintf>	; unpredictable branch in IT block

      zFS.Create(T_DAY, trialname);
     418:	.word	0x2101aa06
     41c:	ldr	r0, [pc, #304]	; (550 <setup+0x450>)
     41e:	.short	0xf006
     420:			; <UNDEFINED> instruction: 0xfb354622
      
      for(int i2=0; i2<5; i2++)
      {  char dayname[80];
        sprintf(dayname,"Hour_%02d%02d",i1,i2);
     424:	.word	0x462b494c
     428:	add	r0, sp, #104	; 0x68
     42a:	blcs	c0d4 <sprintf>
        zFS.Create(T_HOUR,dayname);
     42e:	add	r2, sp, #104	; 0x68
     430:	movs	r1, #2
     432:	ldr	r0, [pc, #284]	; (550 <setup+0x450>)
          
        for(int i3=0; i3<5; i3++)
     434:	movs	r7, #0
      zFS.Create(T_DAY, trialname);
      
      for(int i2=0; i2<5; i2++)
      {  char dayname[80];
        sprintf(dayname,"Hour_%02d%02d",i1,i2);
        zFS.Create(T_HOUR,dayname);
     436:	bl	6a8c <zeroFS_class::Create(HDR_TYPE, char const*)>
          
        for(int i3=0; i3<5; i3++)
        {  char filename[80];
            sprintf(filename,"File_%02d%02d%02d.dat",i1,i2,i3);
     43a:	mov	r3, r5
     43c:	mov	r2, r4
     43e:	ldr	r1, [pc, #284]	; (55c <setup+0x45c>)
     440:	mov	r0, sl
     442:	str	r7, [sp, #0]
            Serial.print(filename);
            uint32_t t0 = micros();
            zFS.Create(T_FILE,filename);
            uint32_t t1 = micros();
            uint32_t tmn=0xFFFFFFFF,tmx=0;
            for(int ii=0;ii<10;ii++)
     444:	movs	r6, #0
        sprintf(dayname,"Hour_%02d%02d",i1,i2);
        zFS.Create(T_HOUR,dayname);
          
        for(int i3=0; i3<5; i3++)
        {  char filename[80];
            sprintf(filename,"File_%02d%02d%02d.dat",i1,i2,i3);
     446:	bl	c0d4 <sprintf>
     44a:	mov	r0, sl
     44c:	bl	c280 <strlen>
            Serial.print(filename);
            uint32_t t0 = micros();
            zFS.Create(T_FILE,filename);
            uint32_t t1 = micros();
            uint32_t tmn=0xFFFFFFFF,tmx=0;
     450:	mov	r9, r6
     452:	mov	r1, r0
     454:	mov.w	r8, #4294967295
     458:	mov	r0, sl
     45a:	bl	8cd8 <usb_serial_write>
          
        for(int i3=0; i3<5; i3++)
        {  char filename[80];
            sprintf(filename,"File_%02d%02d%02d.dat",i1,i2,i3);
            Serial.print(filename);
            uint32_t t0 = micros();
     45e:	bl	97d0 <micros>
            zFS.Create(T_FILE,filename);
     462:	mov	r2, sl
     464:	movs	r1, #3
          
        for(int i3=0; i3<5; i3++)
        {  char filename[80];
            sprintf(filename,"File_%02d%02d%02d.dat",i1,i2,i3);
            Serial.print(filename);
            uint32_t t0 = micros();
     466:	mov	fp, r0
            zFS.Create(T_FILE,filename);
     468:	ldr	r0, [pc, #228]	; (550 <setup+0x450>)
     46a:	bl	6a8c <zeroFS_class::Create(HDR_TYPE, char const*)>
            uint32_t t1 = micros();
     46e:	bl	97d0 <micros>
     472:	str	r0, [sp, #16]
     474:	ldr	r3, [pc, #232]	; (560 <setup+0x460>)
     476:	uxtb	r2, r6
     478:	add.w	r0, r3, #32768	; 0x8000
            uint32_t tmn=0xFFFFFFFF,tmx=0;
            for(int ii=0;ii<10;ii++)
            {  for(int nn=0; nn<NDAT; nn++) data[nn]=(ii+nn)%256;
     47c:	strb.w	r2, [r3, #1]!
     480:	adds	r1, r2, #1
     482:	cmp	r3, r0
     484:	uxtb	r2, r1
     486:	bne.n	47c <setup+0x37c>
              uint32_t tx = micros();
     488:	bl	97d0 <micros>
              zFS.Write((void *)data,NDAT);
     48c:	mov.w	r2, #32768	; 0x8000
            zFS.Create(T_FILE,filename);
            uint32_t t1 = micros();
            uint32_t tmn=0xFFFFFFFF,tmx=0;
            for(int ii=0;ii<10;ii++)
            {  for(int nn=0; nn<NDAT; nn++) data[nn]=(ii+nn)%256;
              uint32_t tx = micros();
     490:	str	r0, [sp, #20]
            Serial.print(filename);
            uint32_t t0 = micros();
            zFS.Create(T_FILE,filename);
            uint32_t t1 = micros();
            uint32_t tmn=0xFFFFFFFF,tmx=0;
            for(int ii=0;ii<10;ii++)
     492:	adds	r6, #1
            {  for(int nn=0; nn<NDAT; nn++) data[nn]=(ii+nn)%256;
              uint32_t tx = micros();
              zFS.Write((void *)data,NDAT);
     494:	ldr	r1, [pc, #204]	; (564 <setup+0x464>)
     496:	ldr	r0, [pc, #184]	; (550 <setup+0x450>)
     498:	bl	6c98 <zeroFS_class::Write(void*, unsigned long)>
              tx=micros()-tx;
     49c:	bl	97d0 <micros>
     4a0:	ldr	r3, [sp, #20]
     4a2:	subs	r0, r0, r3
     4a4:	cmp	r9, r0
     4a6:	it	cc
     4a8:	movcc	r9, r0
     4aa:	cmp	r8, r0
     4ac:	it	cs
     4ae:	movcs	r8, r0
            Serial.print(filename);
            uint32_t t0 = micros();
            zFS.Create(T_FILE,filename);
            uint32_t t1 = micros();
            uint32_t tmn=0xFFFFFFFF,tmx=0;
            for(int ii=0;ii<10;ii++)
     4b0:	cmp	r6, #10
     4b2:	bne.n	474 <setup+0x374>
              zFS.Write((void *)data,NDAT);
              tx=micros()-tx;
              if(tx>tmx) tmx=tx;
              if(tx<tmn) tmn=tx;
            }
            uint32_t t2 = micros();
     4b4:	bl	97d0 <micros>
     4b8:	mov	r6, r0
            zFS.Close(T_FILE);
     4ba:	movs	r1, #3
     4bc:	ldr	r0, [pc, #144]	; (550 <setup+0x450>)
     4be:	bl	6c40 <zeroFS_class::Close(HDR_TYPE)>
      for(int i2=0; i2<5; i2++)
      {  char dayname[80];
        sprintf(dayname,"Hour_%02d%02d",i1,i2);
        zFS.Create(T_HOUR,dayname);
          
        for(int i3=0; i3<5; i3++)
     4c2:	adds	r7, #1
              if(tx>tmx) tmx=tx;
              if(tx<tmn) tmn=tx;
            }
            uint32_t t2 = micros();
            zFS.Close(T_FILE);
            uint32_t t3 = micros();
     4c4:	bl	97d0 <micros>
            Serial.printf(" %7d %7d %7d %7d %7d\n",(t1-t0),tmn,tmx,(t3-t2),(t3-t0));
     4c8:	ldr	r2, [sp, #16]
     4ca:	subs	r6, r0, r6
     4cc:	rsb	r0, fp, r0
     4d0:	str.w	r9, [sp]
     4d4:	mov	r3, r8
     4d6:	str	r0, [sp, #8]
     4d8:	rsb	r2, fp, r2
     4dc:	ldr	r1, [pc, #136]	; (568 <setup+0x468>)
     4de:	str	r6, [sp, #4]
     4e0:	ldr	r0, [pc, #136]	; (56c <setup+0x46c>)
     4e2:	bl	a52c <Print::printf(char const*, ...)>
      for(int i2=0; i2<5; i2++)
      {  char dayname[80];
        sprintf(dayname,"Hour_%02d%02d",i1,i2);
        zFS.Create(T_HOUR,dayname);
          
        for(int i3=0; i3<5; i3++)
     4e6:	cmp	r7, #5
     4e8:	bne.n	43a <setup+0x33a>
    for(int i1=0; i1<5; i1++)
    { char trialname[80];
      sprintf(trialname,"Day_%02d",i1);
      zFS.Create(T_DAY, trialname);
      
      for(int i2=0; i2<5; i2++)
     4ea:	adds	r5, #1
            uint32_t t2 = micros();
            zFS.Close(T_FILE);
            uint32_t t3 = micros();
            Serial.printf(" %7d %7d %7d %7d %7d\n",(t1-t0),tmn,tmx,(t3-t2),(t3-t0));
        }
        zFS.Close(T_HOUR);
     4ec:	movs	r1, #2
     4ee:	ldr	r0, [pc, #96]	; (550 <setup+0x450>)
     4f0:	bl	6c40 <zeroFS_class::Close(HDR_TYPE)>
    for(int i1=0; i1<5; i1++)
    { char trialname[80];
      sprintf(trialname,"Day_%02d",i1);
      zFS.Create(T_DAY, trialname);
      
      for(int i2=0; i2<5; i2++)
     4f4:	cmp	r5, #5
     4f6:	bne.n	422 <setup+0x322>

  if(mode==1)
  {
    //
    zFS.Create(T_ROOT,flag);  // 0 starts from beginning
    for(int i1=0; i1<5; i1++)
     4f8:	adds	r4, #1
            uint32_t t3 = micros();
            Serial.printf(" %7d %7d %7d %7d %7d\n",(t1-t0),tmn,tmx,(t3-t2),(t3-t0));
        }
        zFS.Close(T_HOUR);
      }
      zFS.Close(T_DAY);
     4fa:	movs	r1, #1
     4fc:	ldr	r0, [pc, #80]	; (550 <setup+0x450>)
     4fe:	bl	6c40 <zeroFS_class::Close(HDR_TYPE)>

  if(mode==1)
  {
    //
    zFS.Create(T_ROOT,flag);  // 0 starts from beginning
    for(int i1=0; i1<5; i1++)
     502:	cmp	r4, #5
     504:	bne.n	40c <setup+0x30c>
        }
        zFS.Close(T_HOUR);
      }
      zFS.Close(T_DAY);
    }
    zFS.Close(T_ROOT);
     506:	movs	r1, #0
     508:	ldr	r0, [pc, #68]	; (550 <setup+0x450>)
     50a:	bl	6c40 <zeroFS_class::Close(HDR_TYPE)>

    zFS.findEOF();
     50e:	ldr	r0, [pc, #64]	; (550 <setup+0x450>)
     510:	bl	6e00 <zeroFS_class::findEOF()>
     514:	b.n	1ae <setup+0xae>
     516:	adds	r7, #32
     518:	b.n	358 <setup+0x258>
    { 
      if(newFile())
      {
        if(open3) 
        { 
          zFS.Close(T_FILE);
     51a:	movs	r1, #3
     51c:	ldr	r0, [pc, #48]	; (550 <setup+0x450>)
     51e:	bl	6c40 <zeroFS_class::Close(HDR_TYPE)>
          t3=micros();
     522:	bl	97d0 <micros>
          Serial.printf(" %7d %7d %7d %10d\n",tmn,tmx,(t3-t0),nsect);
     526:	ldr	r3, [sp, #16]
     528:	str	r7, [sp, #4]
     52a:	mov	r2, r5
     52c:	subs	r0, r0, r3
     52e:	ldr	r1, [pc, #64]	; (570 <setup+0x470>)
     530:	mov	r3, r4
     532:	str	r0, [sp, #0]
     534:	ldr	r0, [pc, #52]	; (56c <setup+0x46c>)
     536:	bl	a52c <Print::printf(char const*, ...)>
     53a:	b.n	260 <setup+0x160>
          zFS.Create(T_DAY, dayName);
          open1=1;
        }
        if(newHour())
        { // new day
          if(open2) zFS.Close(T_HOUR);
     53c:	movs	r1, #2
     53e:	ldr	r0, [pc, #16]	; (550 <setup+0x450>)
     540:	bl	6c40 <zeroFS_class::Close(HDR_TYPE)>
     544:	b.n	2de <setup+0x1de>
          Serial.printf(" %7d %7d %7d %10d\n",tmn,tmx,(t3-t0),nsect);
        }

        if(newDay())
        { // new day
          if(open1) zFS.Close(T_DAY);
     546:	movs	r1, #1
     548:	ldr	r0, [pc, #4]	; (550 <setup+0x450>)
     54a:	bl	6c40 <zeroFS_class::Close(HDR_TYPE)>
     54e:	b.n	27e <setup+0x17e>
     550:	.word	0x2000b9a4
     554:	.word	0x20000088
     558:	.word	0x20000094
     55c:	.word	0x200000a4
     560:	.word	0x20001507
     564:	.word	0x20001508
     568:	.word	0x200000bc
     56c:	.word	0x20000b20
     570:	.word	0x200000d4

00000574 <MTPD::writestring(char const*)>:
  void write64(uint64_t x) { write((char*)&x, sizeof(x)); }

#define Store2Storage(x) (x+1)
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
     574:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (*str) 
     578:	ldrb	r3, [r1, #0]
  void write64(uint64_t x) { write((char*)&x, sizeof(x)); }

#define Store2Storage(x) (x+1)
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
     57a:	sub	sp, #12
     57c:	mov	r9, r0
    if (*str) 
     57e:	cmp	r3, #0
     580:	beq.n	64a <MTPD::writestring(char const*)+0xd6>
    { write8(strlen(str) + 1);
     582:	mov	r0, r1
     584:	mov	sl, r1
     586:	bl	c280 <strlen>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     58a:	ldrb.w	r1, [r9]
     58e:	adds	r0, #1
      {
        write_length_ += len;
     590:	ldr.w	r3, [r9, #4]
     594:	strb.w	r0, [sp, #2]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     598:	cmp	r1, #0
     59a:	beq.w	6c8 <MTPD::writestring(char const*)+0x154>
      {
        write_length_ += len;
     59e:	adds	r3, #1
     5a0:	str.w	r3, [r9, #4]
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
     5a4:	ldrb.w	r2, [sl]
     5a8:	cmp	r2, #0
     5aa:	beq.n	63e <MTPD::writestring(char const*)+0xca>
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     5ac:	add.w	r8, r9, #544	; 0x220
     5b0:	b.n	5c0 <MTPD::writestring(char const*)+0x4c>
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
     5b2:	adds	r3, #2
     5b4:	str.w	r3, [r9, #4]
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
     5b8:	ldrb.w	r2, [sl, #1]!
     5bc:	cmp	r2, #0
     5be:	beq.n	634 <MTPD::writestring(char const*)+0xc0>
     5c0:	strh.w	r2, [sp, #6]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     5c4:	cmp	r1, #0
     5c6:	bne.n	5b2 <MTPD::writestring(char const*)+0x3e>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     5c8:	ldr	r4, [pc, #500]	; (7c0 <MTPD::writestring(char const*)+0x24c>)
     5ca:	cmp	r3, #0
     5cc:	beq.n	65e <MTPD::writestring(char const*)+0xea>
     5ce:	ldr	r0, [r4, #0]
        write_length_ += len;
     5d0:	adds	r3, #2
     5d2:	add.w	r7, r9, #1056	; 0x420
        
        const char * src=data;
     5d6:	add.w	r6, sp, #6
        //
        int pos = 0; // into data
     5da:	movs	r5, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     5dc:	str.w	r3, [r9, #4]
     5e0:	b.n	5e8 <MTPD::writestring(char const*)+0x74>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     5e2:	cmp	r5, #1
     5e4:	bgt.n	624 <MTPD::writestring(char const*)+0xb0>
     5e6:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     5e8:	subs	r2, r7, r0
     5ea:	rsb	r3, r5, #2
          memcpy(dst,src,to_copy);
     5ee:	mov	r1, r6
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     5f0:	cmp	r2, r3
     5f2:	it	ge
     5f4:	movge	r2, r3
     5f6:	mov	fp, r2
          memcpy(dst,src,to_copy);
          pos += to_copy;
     5f8:	add	r5, r2
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     5fa:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     5fe:	ldr	r2, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
     600:	add	r6, fp
          dst += to_copy;
     602:	add.w	r3, r2, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     606:	cmp	r3, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     608:	str	r3, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     60a:	bne.n	5e2 <MTPD::writestring(char const*)+0x6e>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     60c:	movs	r2, #60	; 0x3c
     60e:	mov.w	r1, #512	; 0x200
     612:	mov	r0, r8
     614:	bl	a228 <usb_mtp_send>
     618:	cmp	r0, #0
     61a:	ble.n	60c <MTPD::writestring(char const*)+0x98>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     61c:	cmp	r5, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     61e:	str.w	r8, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     622:	ble.n	5e6 <MTPD::writestring(char const*)+0x72>
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
     624:	ldrb.w	r2, [sl, #1]!
     628:	ldrb.w	r1, [r9]
     62c:	ldr.w	r3, [r9, #4]
     630:	cmp	r2, #0
     632:	bne.n	5c0 <MTPD::writestring(char const*)+0x4c>
     634:	movs	r2, #0
     636:	strh.w	r2, [sp, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     63a:	cmp	r1, #0
     63c:	beq.n	73c <MTPD::writestring(char const*)+0x1c8>
      {
        write_length_ += len;
     63e:	adds	r3, #2
     640:	str.w	r3, [r9, #4]
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    } else 
    { write8(0);
    }
  }
     644:	add	sp, #12
     646:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     64a:	ldrb	r2, [r0, #0]
     64c:	strb.w	r3, [sp, #3]
      {
        write_length_ += len;
     650:	ldr	r3, [r0, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     652:	cbz	r2, 666 <MTPD::writestring(char const*)+0xf2>
      {
        write_length_ += len;
     654:	adds	r3, #1
     656:	str	r3, [r0, #4]
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    } else 
    { write8(0);
    }
  }
     658:	add	sp, #12
     65a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     65e:	mov	r0, r8
     660:	str.w	r8, [r4]
     664:	b.n	5d0 <MTPD::writestring(char const*)+0x5c>
     666:	cmp	r3, #0
     668:	beq.w	79a <MTPD::writestring(char const*)+0x226>
     66c:	ldr	r4, [pc, #336]	; (7c0 <MTPD::writestring(char const*)+0x24c>)
     66e:	ldr	r0, [r4, #0]
        write_length_ += len;
     670:	adds	r3, #1
     672:	add.w	r7, r9, #1056	; 0x420
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     676:	add.w	r8, r9, #544	; 0x220
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
     67a:	add.w	r6, sp, #3
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     67e:	str.w	r3, [r9, #4]
        
        const char * src=data;
        //
        int pos = 0; // into data
     682:	mov.w	r9, #0
     686:	b.n	690 <MTPD::writestring(char const*)+0x11c>
        while(pos<len)
     688:	cmp.w	r9, #0
     68c:	bgt.n	658 <MTPD::writestring(char const*)+0xe4>
     68e:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     690:	subs	r5, r7, r0
     692:	rsb	r3, r9, #1
          memcpy(dst,src,to_copy);
     696:	mov	r1, r6
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     698:	cmp	r5, r3
     69a:	it	ge
     69c:	movge	r5, r3
          memcpy(dst,src,to_copy);
     69e:	mov	r2, r5
          pos += to_copy;
     6a0:	add	r9, r5
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     6a2:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     6a6:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
     6a8:	add	r6, r5
          dst += to_copy;
     6aa:	add	r5, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     6ac:	cmp	r5, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     6ae:	str	r5, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     6b0:	bne.n	688 <MTPD::writestring(char const*)+0x114>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     6b2:	movs	r2, #60	; 0x3c
     6b4:	mov.w	r1, #512	; 0x200
     6b8:	mov	r0, r8
     6ba:	bl	a228 <usb_mtp_send>
     6be:	cmp	r0, #0
     6c0:	ble.n	6b2 <MTPD::writestring(char const*)+0x13e>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     6c2:	str.w	r8, [r4]
     6c6:	b.n	688 <MTPD::writestring(char const*)+0x114>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     6c8:	cmp	r3, #0
     6ca:	beq.n	7b2 <MTPD::writestring(char const*)+0x23e>
     6cc:	ldr	r4, [pc, #240]	; (7c0 <MTPD::writestring(char const*)+0x24c>)
     6ce:	ldr	r0, [r4, #0]
        write_length_ += len;
     6d0:	adds	r3, #1
     6d2:	add.w	r8, r9, #1056	; 0x420
        
        const char * src=data;
     6d6:	add.w	r7, sp, #2
        //
        int pos = 0; // into data
     6da:	movs	r6, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     6dc:	str.w	r3, [r9, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     6e0:	add.w	fp, r9, #544	; 0x220
     6e4:	b.n	6ec <MTPD::writestring(char const*)+0x178>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     6e6:	cmp	r6, #0
     6e8:	bgt.n	728 <MTPD::writestring(char const*)+0x1b4>
     6ea:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     6ec:	rsb	r5, r0, r8
     6f0:	rsb	r3, r6, #1
          memcpy(dst,src,to_copy);
     6f4:	mov	r1, r7
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     6f6:	cmp	r5, r3
     6f8:	it	ge
     6fa:	movge	r5, r3
          memcpy(dst,src,to_copy);
     6fc:	mov	r2, r5
          pos += to_copy;
     6fe:	add	r6, r5
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     700:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     704:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
     706:	add	r7, r5
          dst += to_copy;
     708:	add	r5, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     70a:	cmp	r5, r8
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     70c:	str	r5, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     70e:	bne.n	6e6 <MTPD::writestring(char const*)+0x172>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     710:	movs	r2, #60	; 0x3c
     712:	mov.w	r1, #512	; 0x200
     716:	mov	r0, fp
     718:	bl	a228 <usb_mtp_send>
     71c:	cmp	r0, #0
     71e:	ble.n	710 <MTPD::writestring(char const*)+0x19c>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     720:	cmp	r6, #0
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     722:	str.w	fp, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     726:	ble.n	6ea <MTPD::writestring(char const*)+0x176>
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
     728:	ldrb.w	r2, [sl]
     72c:	ldrb.w	r1, [r9]
     730:	ldr.w	r3, [r9, #4]
     734:	cmp	r2, #0
     736:	bne.w	5ac <MTPD::writestring(char const*)+0x38>
     73a:	b.n	634 <MTPD::writestring(char const*)+0xc0>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     73c:	cbz	r3, 7a6 <MTPD::writestring(char const*)+0x232>
     73e:	ldr	r4, [pc, #128]	; (7c0 <MTPD::writestring(char const*)+0x24c>)
     740:	ldr	r0, [r4, #0]
        write_length_ += len;
     742:	adds	r3, #2
     744:	add.w	r7, r9, #1056	; 0x420
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     748:	add.w	r8, r9, #544	; 0x220
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
     74c:	add	r6, sp, #4
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     74e:	str.w	r3, [r9, #4]
        
        const char * src=data;
        //
        int pos = 0; // into data
     752:	mov.w	r9, #0
     756:	b.n	762 <MTPD::writestring(char const*)+0x1ee>
        while(pos<len)
     758:	cmp.w	r9, #1
     75c:	bgt.w	658 <MTPD::writestring(char const*)+0xe4>
     760:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     762:	subs	r5, r7, r0
     764:	rsb	r3, r9, #2
          memcpy(dst,src,to_copy);
     768:	mov	r1, r6
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     76a:	cmp	r5, r3
     76c:	it	ge
     76e:	movge	r5, r3
          memcpy(dst,src,to_copy);
     770:	mov	r2, r5
          pos += to_copy;
     772:	add	r9, r5
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     774:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     778:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
     77a:	add	r6, r5
          dst += to_copy;
     77c:	add	r5, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     77e:	cmp	r5, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     780:	str	r5, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     782:	bne.n	758 <MTPD::writestring(char const*)+0x1e4>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     784:	movs	r2, #60	; 0x3c
     786:	mov.w	r1, #512	; 0x200
     78a:	mov	r0, r8
     78c:	bl	a228 <usb_mtp_send>
     790:	cmp	r0, #0
     792:	ble.n	784 <MTPD::writestring(char const*)+0x210>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     794:	str.w	r8, [r4]
     798:	b.n	758 <MTPD::writestring(char const*)+0x1e4>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     79a:	add.w	r2, r0, #544	; 0x220
     79e:	ldr	r4, [pc, #32]	; (7c0 <MTPD::writestring(char const*)+0x24c>)
     7a0:	mov	r0, r2
     7a2:	str	r2, [r4, #0]
     7a4:	b.n	670 <MTPD::writestring(char const*)+0xfc>
     7a6:	add.w	r2, r9, #544	; 0x220
     7aa:	ldr	r4, [pc, #20]	; (7c0 <MTPD::writestring(char const*)+0x24c>)
     7ac:	mov	r0, r2
     7ae:	str	r2, [r4, #0]
     7b0:	b.n	742 <MTPD::writestring(char const*)+0x1ce>
     7b2:	add.w	r2, r9, #544	; 0x220
     7b6:	ldr	r4, [pc, #8]	; (7c0 <MTPD::writestring(char const*)+0x24c>)
     7b8:	mov	r0, r2
     7ba:	str	r2, [r4, #0]
     7bc:	b.n	6d0 <MTPD::writestring(char const*)+0x15c>
     7be:	nop
     7c0:	.word	0x200014fc

000007c4 <MTPD::WriteDescriptor()>:
    } else 
    { write8(0);
    }
  }

  void WriteDescriptor() {
     7c4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     7c8:	movs	r2, #100	; 0x64
     7ca:	sub	sp, #92	; 0x5c
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     7cc:	ldrb	r3, [r0, #0]
    } else 
    { write8(0);
    }
  }

  void WriteDescriptor() {
     7ce:	mov	r5, r0
     7d0:	strh.w	r2, [sp, #14]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     7d4:	cmp	r3, #0
     7d6:	beq.w	1074 <MTPD::WriteDescriptor()+0x8b0>
      {
        write_length_ += len;
     7da:	ldr	r3, [r0, #4]
     7dc:	movs	r2, #6
     7de:	adds	r3, #2
     7e0:	str	r2, [sp, #48]	; 0x30
     7e2:	movs	r2, #100	; 0x64
     7e4:	adds	r3, #4
     7e6:	strh.w	r2, [sp, #12]
     7ea:	movs	r2, #20
     7ec:	adds	r3, #2
     7ee:	strb.w	r2, [sp, #3]
     7f2:	adds	r3, #1
     7f4:	movs	r1, #1
     7f6:	str	r3, [r5, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     7f8:	add.w	r9, r5, #544	; 0x220
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
     7fc:	movs	r2, #109	; 0x6d
     7fe:	ldr.w	sl, [pc, #824]	; b38 <MTPD::WriteDescriptor()+0x374>
     802:	mov	r0, r9
     804:	mov	r9, r5
     806:	mov	r5, r0
     808:	b.n	818 <MTPD::WriteDescriptor()+0x54>
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
     80a:	adds	r3, #2
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
     80c:	ldrb.w	r2, [sl, #1]!
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
     810:	str.w	r3, [r9, #4]
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
     814:	cmp	r2, #0
     816:	beq.n	88c <MTPD::WriteDescriptor()+0xc8>
     818:	strh.w	r2, [sp, #26]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     81c:	cmp	r1, #0
     81e:	bne.n	80a <MTPD::WriteDescriptor()+0x46>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     820:	ldr	r7, [pc, #772]	; (b28 <MTPD::WriteDescriptor()+0x364>)
     822:	cmp	r3, #0
     824:	beq.w	bdc <MTPD::WriteDescriptor()+0x418>
     828:	ldr	r0, [r7, #0]
        write_length_ += len;
     82a:	adds	r3, #2
     82c:	add.w	fp, r9, #1056	; 0x420
        
        const char * src=data;
     830:	add.w	r8, sp, #26
        //
        int pos = 0; // into data
     834:	movs	r6, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     836:	str.w	r3, [r9, #4]
     83a:	b.n	842 <MTPD::WriteDescriptor()+0x7e>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     83c:	cmp	r6, #1
     83e:	bgt.n	87c <MTPD::WriteDescriptor()+0xb8>
     840:	ldr	r0, [r7, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     842:	rsb	r4, r0, fp
     846:	rsb	r3, r6, #2
          memcpy(dst,src,to_copy);
     84a:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     84c:	cmp	r4, r3
     84e:	it	ge
     850:	movge	r4, r3
          memcpy(dst,src,to_copy);
     852:	mov	r2, r4
          pos += to_copy;
     854:	add	r6, r4
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     856:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     85a:	ldr	r3, [r7, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
     85c:	add	r8, r4
          dst += to_copy;
     85e:	add	r4, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     860:	cmp	r4, fp
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     862:	str	r4, [r7, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     864:	bne.n	83c <MTPD::WriteDescriptor()+0x78>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     866:	movs	r2, #60	; 0x3c
     868:	mov.w	r1, #512	; 0x200
     86c:	mov	r0, r5
     86e:	bl	a228 <usb_mtp_send>
     872:	cmp	r0, #0
     874:	ble.n	866 <MTPD::WriteDescriptor()+0xa2>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     876:	cmp	r6, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     878:	str	r5, [r7, #0]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     87a:	ble.n	840 <MTPD::WriteDescriptor()+0x7c>
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
     87c:	ldrb.w	r2, [sl, #1]!
     880:	ldrb.w	r1, [r9]
     884:	ldr.w	r3, [r9, #4]
     888:	cmp	r2, #0
     88a:	bne.n	818 <MTPD::WriteDescriptor()+0x54>
     88c:	mov	r5, r9
     88e:	strh.w	r2, [sp, #24]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     892:	cmp	r1, #0
     894:	beq.w	1242 <MTPD::WriteDescriptor()+0xa7e>
      {
        write_length_ += len;
     898:	adds	r3, #2
     89a:	strh.w	r2, [sp, #10]
     89e:	movs	r2, #11
     8a0:	adds	r3, #2
     8a2:	str	r2, [sp, #44]	; 0x2c
     8a4:	adds	r3, #4
     8a6:	movs	r1, #1
     8a8:	str	r3, [r5, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     8aa:	add.w	r9, r5, #544	; 0x220
     8ae:	ldr.w	sl, [pc, #652]	; b3c <MTPD::WriteDescriptor()+0x378>
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
     8b2:	movw	r2, #4097	; 0x1001
     8b6:	mov	r0, r9
     8b8:	mov	r9, r5
     8ba:	mov	r5, r0
     8bc:	b.n	8ce <MTPD::WriteDescriptor()+0x10a>
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
    write32(supported_op_num);
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
     8be:	ldr	r2, [pc, #620]	; (b2c <MTPD::WriteDescriptor()+0x368>)
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
     8c0:	adds	r3, #2
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
    write32(supported_op_num);
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
     8c2:	cmp	r2, sl
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
     8c4:	str.w	r3, [r9, #4]
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
    write32(supported_op_num);
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
     8c8:	beq.n	940 <MTPD::WriteDescriptor()+0x17c>
     8ca:	ldrh.w	r2, [sl, #2]!
     8ce:	strh.w	r2, [sp, #16]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     8d2:	cmp	r1, #0
     8d4:	bne.n	8be <MTPD::WriteDescriptor()+0xfa>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     8d6:	ldr	r7, [pc, #592]	; (b28 <MTPD::WriteDescriptor()+0x364>)
     8d8:	cmp	r3, #0
     8da:	beq.w	be2 <MTPD::WriteDescriptor()+0x41e>
     8de:	ldr	r0, [r7, #0]
        write_length_ += len;
     8e0:	adds	r3, #2
     8e2:	add.w	fp, r9, #1056	; 0x420
        
        const char * src=data;
     8e6:	add.w	r8, sp, #16
        //
        int pos = 0; // into data
     8ea:	movs	r6, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     8ec:	str.w	r3, [r9, #4]
     8f0:	b.n	8f8 <MTPD::WriteDescriptor()+0x134>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     8f2:	cmp	r6, #1
     8f4:	bgt.n	932 <MTPD::WriteDescriptor()+0x16e>
     8f6:	ldr	r0, [r7, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     8f8:	rsb	r4, r0, fp
     8fc:	rsb	r3, r6, #2
          memcpy(dst,src,to_copy);
     900:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     902:	cmp	r4, r3
     904:	it	ge
     906:	movge	r4, r3
          memcpy(dst,src,to_copy);
     908:	mov	r2, r4
          pos += to_copy;
     90a:	add	r6, r4
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     90c:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     910:	ldr	r3, [r7, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
     912:	add	r8, r4
          dst += to_copy;
     914:	add	r4, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     916:	cmp	r4, fp
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     918:	str	r4, [r7, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     91a:	bne.n	8f2 <MTPD::WriteDescriptor()+0x12e>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     91c:	movs	r2, #60	; 0x3c
     91e:	mov.w	r1, #512	; 0x200
     922:	mov	r0, r5
     924:	bl	a228 <usb_mtp_send>
     928:	cmp	r0, #0
     92a:	ble.n	91c <MTPD::WriteDescriptor()+0x158>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     92c:	cmp	r6, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     92e:	str	r5, [r7, #0]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     930:	ble.n	8f6 <MTPD::WriteDescriptor()+0x132>
    writestring("microsoft.com: 1.0;");
    write16(0);    // functional mode

    // Supported operations (array of uint16)
    write32(supported_op_num);
    for(int ii=0; ii<supported_op_num;ii++) write16(supported_op[ii]);
     932:	ldr	r2, [pc, #504]	; (b2c <MTPD::WriteDescriptor()+0x368>)
     934:	ldrb.w	r1, [r9]
     938:	cmp	r2, sl
     93a:	ldr.w	r3, [r9, #4]
     93e:	bne.n	8ca <MTPD::WriteDescriptor()+0x106>
     940:	movs	r2, #0
     942:	mov	r5, r9
     944:	str	r2, [sp, #52]	; 0x34
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     946:	cmp	r1, #0
     948:	beq.w	d00 <MTPD::WriteDescriptor()+0x53c>
     94c:	movs	r2, #1
      {
        write_length_ += len;
     94e:	adds	r3, #4
     950:	str	r2, [sp, #64]	; 0x40
     952:	movw	r2, #54274	; 0xd402
     956:	adds	r3, #4
     958:	strh.w	r2, [sp, #22]
     95c:	movs	r2, #0
     95e:	adds	r3, #2
     960:	str	r2, [sp, #60]	; 0x3c
     962:	movs	r2, #2
     964:	adds	r3, #4
     966:	str	r2, [sp, #56]	; 0x38
     968:	mov.w	r2, #12288	; 0x3000
     96c:	adds	r3, #4
     96e:	strh.w	r2, [sp, #20]
     972:	movw	r2, #12289	; 0x3001
     976:	adds	r3, #2
     978:	strh.w	r2, [sp, #18]
     97c:	movs	r2, #5
     97e:	adds	r3, #2
     980:	strb.w	r2, [sp, #7]
     984:	adds	r3, #1
     986:	movs	r1, #1
     988:	str	r3, [r5, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     98a:	add.w	r9, r5, #544	; 0x220
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
     98e:	movs	r2, #80	; 0x50
     990:	ldr.w	sl, [pc, #428]	; b40 <MTPD::WriteDescriptor()+0x37c>
     994:	mov	r0, r9
     996:	mov	r9, r5
     998:	mov	r5, r0
     99a:	b.n	9aa <MTPD::WriteDescriptor()+0x1e6>
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
     99c:	adds	r3, #2
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
     99e:	ldrb.w	r2, [sl, #1]!
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
     9a2:	str.w	r3, [r9, #4]
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
     9a6:	cmp	r2, #0
     9a8:	beq.n	a1e <MTPD::WriteDescriptor()+0x25a>
     9aa:	strh.w	r2, [sp, #30]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     9ae:	cmp	r1, #0
     9b0:	bne.n	99c <MTPD::WriteDescriptor()+0x1d8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     9b2:	ldr	r7, [pc, #372]	; (b28 <MTPD::WriteDescriptor()+0x364>)
     9b4:	cmp	r3, #0
     9b6:	beq.w	be8 <MTPD::WriteDescriptor()+0x424>
     9ba:	ldr	r0, [r7, #0]
        write_length_ += len;
     9bc:	adds	r3, #2
     9be:	add.w	fp, r9, #1056	; 0x420
        
        const char * src=data;
     9c2:	add.w	r8, sp, #30
        //
        int pos = 0; // into data
     9c6:	movs	r6, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     9c8:	str.w	r3, [r9, #4]
     9cc:	b.n	9d4 <MTPD::WriteDescriptor()+0x210>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     9ce:	cmp	r6, #1
     9d0:	bgt.n	a0e <MTPD::WriteDescriptor()+0x24a>
     9d2:	ldr	r0, [r7, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     9d4:	rsb	r4, r0, fp
     9d8:	rsb	r3, r6, #2
          memcpy(dst,src,to_copy);
     9dc:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     9de:	cmp	r4, r3
     9e0:	it	ge
     9e2:	movge	r4, r3
          memcpy(dst,src,to_copy);
     9e4:	mov	r2, r4
          pos += to_copy;
     9e6:	add	r6, r4
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     9e8:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     9ec:	ldr	r3, [r7, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
     9ee:	add	r8, r4
          dst += to_copy;
     9f0:	add	r4, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     9f2:	cmp	r4, fp
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     9f4:	str	r4, [r7, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     9f6:	bne.n	9ce <MTPD::WriteDescriptor()+0x20a>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     9f8:	movs	r2, #60	; 0x3c
     9fa:	mov.w	r1, #512	; 0x200
     9fe:	mov	r0, r5
     a00:	bl	a228 <usb_mtp_send>
     a04:	cmp	r0, #0
     a06:	ble.n	9f8 <MTPD::WriteDescriptor()+0x234>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     a08:	cmp	r6, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     a0a:	str	r5, [r7, #0]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     a0c:	ble.n	9d2 <MTPD::WriteDescriptor()+0x20e>
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
     a0e:	ldrb.w	r2, [sl, #1]!
     a12:	ldrb.w	r1, [r9]
     a16:	ldr.w	r3, [r9, #4]
     a1a:	cmp	r2, #0
     a1c:	bne.n	9aa <MTPD::WriteDescriptor()+0x1e6>
     a1e:	mov	r5, r9
     a20:	strh.w	r2, [sp, #28]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     a24:	cmp	r1, #0
     a26:	beq.w	15b6 <MTPD::WriteDescriptor()+0xdf2>
     a2a:	movs	r2, #7
      {
        write_length_ += len;
     a2c:	adds	r3, #2
     a2e:	strb.w	r2, [sp, #6]
     a32:	adds	r3, #1
     a34:	movs	r1, #1
     a36:	str	r3, [r5, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     a38:	add.w	r9, r5, #544	; 0x220
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
     a3c:	movs	r2, #84	; 0x54
     a3e:	ldr.w	sl, [pc, #260]	; b44 <MTPD::WriteDescriptor()+0x380>
     a42:	mov	r0, r9
     a44:	mov	r9, r5
     a46:	mov	r5, r0
     a48:	b.n	a58 <MTPD::WriteDescriptor()+0x294>
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
     a4a:	adds	r3, #2
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
     a4c:	ldrb.w	r2, [sl, #1]!
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
     a50:	str.w	r3, [r9, #4]
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
     a54:	cmp	r2, #0
     a56:	beq.n	acc <MTPD::WriteDescriptor()+0x308>
     a58:	strh.w	r2, [sp, #34]	; 0x22
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     a5c:	cmp	r1, #0
     a5e:	bne.n	a4a <MTPD::WriteDescriptor()+0x286>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     a60:	ldr	r7, [pc, #196]	; (b28 <MTPD::WriteDescriptor()+0x364>)
     a62:	cmp	r3, #0
     a64:	beq.w	bee <MTPD::WriteDescriptor()+0x42a>
     a68:	ldr	r0, [r7, #0]
        write_length_ += len;
     a6a:	adds	r3, #2
     a6c:	add.w	fp, r9, #1056	; 0x420
        
        const char * src=data;
     a70:	add.w	r8, sp, #34	; 0x22
        //
        int pos = 0; // into data
     a74:	movs	r6, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     a76:	str.w	r3, [r9, #4]
     a7a:	b.n	a82 <MTPD::WriteDescriptor()+0x2be>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     a7c:	cmp	r6, #1
     a7e:	bgt.n	abc <MTPD::WriteDescriptor()+0x2f8>
     a80:	ldr	r0, [r7, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     a82:	rsb	r4, r0, fp
     a86:	rsb	r3, r6, #2
          memcpy(dst,src,to_copy);
     a8a:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     a8c:	cmp	r4, r3
     a8e:	it	ge
     a90:	movge	r4, r3
          memcpy(dst,src,to_copy);
     a92:	mov	r2, r4
          pos += to_copy;
     a94:	add	r6, r4
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     a96:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     a9a:	ldr	r3, [r7, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
     a9c:	add	r8, r4
          dst += to_copy;
     a9e:	add	r4, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     aa0:	cmp	r4, fp
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     aa2:	str	r4, [r7, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     aa4:	bne.n	a7c <MTPD::WriteDescriptor()+0x2b8>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     aa6:	movs	r2, #60	; 0x3c
     aa8:	mov.w	r1, #512	; 0x200
     aac:	mov	r0, r5
     aae:	bl	a228 <usb_mtp_send>
     ab2:	cmp	r0, #0
     ab4:	ble.n	aa6 <MTPD::WriteDescriptor()+0x2e2>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     ab6:	cmp	r6, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     ab8:	str	r5, [r7, #0]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     aba:	ble.n	a80 <MTPD::WriteDescriptor()+0x2bc>
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
     abc:	ldrb.w	r2, [sl, #1]!
     ac0:	ldrb.w	r1, [r9]
     ac4:	ldr.w	r3, [r9, #4]
     ac8:	cmp	r2, #0
     aca:	bne.n	a58 <MTPD::WriteDescriptor()+0x294>
     acc:	mov	r5, r9
     ace:	strh.w	r2, [sp, #32]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     ad2:	cmp	r1, #0
     ad4:	beq.w	1708 <MTPD::WriteDescriptor()+0xf44>
      {
        write_length_ += len;
     ad8:	adds	r3, #2
     ada:	str.w	r3, [r9, #4]
    writestring(MTP_MODEL);     // Model
    //writestring(MTP_VERS);      // version
    //writestring(MTP_SERNR);     // serial
    
    char buf[20];    
    dtostrf( (float)(TEENSYDUINO / 100.0f), 3, 2, buf);
     ade:	movs	r1, #2
     ae0:	vldr	s0, [pc, #76]	; b30 <MTPD::WriteDescriptor()+0x36c>
     ae4:	add	r2, sp, #68	; 0x44
     ae6:	movs	r0, #3
     ae8:	bl	9990 <dtostrf>
    strlcat(buf, " / MTP " MTP_VERS, sizeof(buf) );
     aec:	add	r0, sp, #68	; 0x44
     aee:	movs	r2, #20
     af0:	ldr	r1, [pc, #64]	; (b34 <MTPD::WriteDescriptor()+0x370>)
     af2:	bl	c1dc <strlcat>

#define Store2Storage(x) (x+1)
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
     af6:	ldrb.w	r6, [sp, #68]	; 0x44
     afa:	cmp	r6, #0
     afc:	beq.n	bfa <MTPD::WriteDescriptor()+0x436>
    { write8(strlen(str) + 1);
     afe:	add	r0, sp, #68	; 0x44
     b00:	bl	c280 <strlen>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     b04:	ldrb	r4, [r5, #0]
     b06:	adds	r0, #1
      {
        write_length_ += len;
     b08:	ldr	r3, [r5, #4]
     b0a:	strb.w	r0, [sp, #5]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     b0e:	cmp	r4, #0
     b10:	beq.w	1690 <MTPD::WriteDescriptor()+0xecc>
      {
        write_length_ += len;
     b14:	adds	r3, #1
     b16:	str	r3, [r5, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     b18:	add.w	r9, r5, #544	; 0x220
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
     b1c:	add.w	sl, sp, #68	; 0x44
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     b20:	mov	r2, r9
     b22:	mov	r9, r5
     b24:	mov	r5, r2
     b26:	b.n	b56 <MTPD::WriteDescriptor()+0x392>
     b28:	.word	0x200014fc
     b2c:	.word	0x20000014
     b30:	.word	0x3fc51eb8
     b34:	.word	0x200001b0
     b38:	.word	0x2000018c
     b3c:	.word	0x20000000
     b40:	.word	0x200001a0
     b44:	.word	0x200001a8
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
     b48:	adds	r3, #2
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
     b4a:	ldrb.w	r6, [sl, #1]!
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
     b4e:	str.w	r3, [r9, #4]
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
     b52:	cmp	r6, #0
     b54:	beq.n	bc8 <MTPD::WriteDescriptor()+0x404>
     b56:	strh.w	r6, [sp, #38]	; 0x26
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     b5a:	cmp	r4, #0
     b5c:	bne.n	b48 <MTPD::WriteDescriptor()+0x384>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     b5e:	ldr	r7, [pc, #776]	; (e68 <MTPD::WriteDescriptor()+0x6a4>)
     b60:	cmp	r3, #0
     b62:	beq.n	bf4 <MTPD::WriteDescriptor()+0x430>
     b64:	ldr	r0, [r7, #0]
        write_length_ += len;
     b66:	adds	r3, #2
     b68:	add.w	fp, r9, #1056	; 0x420
        
        const char * src=data;
     b6c:	add.w	r8, sp, #38	; 0x26
        //
        int pos = 0; // into data
     b70:	movs	r6, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     b72:	str.w	r3, [r9, #4]
     b76:	b.n	b7e <MTPD::WriteDescriptor()+0x3ba>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     b78:	cmp	r6, #1
     b7a:	bgt.n	bb8 <MTPD::WriteDescriptor()+0x3f4>
     b7c:	ldr	r0, [r7, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     b7e:	rsb	r4, r0, fp
     b82:	rsb	r3, r6, #2
          memcpy(dst,src,to_copy);
     b86:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     b88:	cmp	r4, r3
     b8a:	it	ge
     b8c:	movge	r4, r3
          memcpy(dst,src,to_copy);
     b8e:	mov	r2, r4
          pos += to_copy;
     b90:	add	r6, r4
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     b92:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     b96:	ldr	r3, [r7, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
     b98:	add	r8, r4
          dst += to_copy;
     b9a:	add	r4, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     b9c:	cmp	r4, fp
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     b9e:	str	r4, [r7, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     ba0:	bne.n	b78 <MTPD::WriteDescriptor()+0x3b4>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     ba2:	movs	r2, #60	; 0x3c
     ba4:	mov.w	r1, #512	; 0x200
     ba8:	mov	r0, r5
     baa:	bl	a228 <usb_mtp_send>
     bae:	cmp	r0, #0
     bb0:	ble.n	ba2 <MTPD::WriteDescriptor()+0x3de>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     bb2:	cmp	r6, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     bb4:	str	r5, [r7, #0]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     bb6:	ble.n	b7c <MTPD::WriteDescriptor()+0x3b8>
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
     bb8:	ldrb.w	r6, [sl, #1]!
     bbc:	ldrb.w	r4, [r9]
     bc0:	ldr.w	r3, [r9, #4]
     bc4:	cmp	r6, #0
     bc6:	bne.n	b56 <MTPD::WriteDescriptor()+0x392>
     bc8:	mov	r5, r9
     bca:	movs	r2, #0
     bcc:	strh.w	r2, [sp, #36]	; 0x24
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     bd0:	cmp	r4, #0
     bd2:	beq.w	14f8 <MTPD::WriteDescriptor()+0xd34>
      {
        write_length_ += len;
     bd6:	adds	r7, r3, #2
     bd8:	str	r7, [r5, #4]
     bda:	b.n	c0c <MTPD::WriteDescriptor()+0x448>
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     bdc:	mov	r0, r5
     bde:	str	r5, [r7, #0]
     be0:	b.n	82a <MTPD::WriteDescriptor()+0x66>
     be2:	mov	r0, r5
     be4:	str	r5, [r7, #0]
     be6:	b.n	8e0 <MTPD::WriteDescriptor()+0x11c>
     be8:	mov	r0, r5
     bea:	str	r5, [r7, #0]
     bec:	b.n	9bc <MTPD::WriteDescriptor()+0x1f8>
     bee:	mov	r0, r5
     bf0:	str	r5, [r7, #0]
     bf2:	b.n	a6a <MTPD::WriteDescriptor()+0x2a6>
     bf4:	mov	r0, r5
     bf6:	str	r5, [r7, #0]
     bf8:	b.n	b66 <MTPD::WriteDescriptor()+0x3a2>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     bfa:	ldrb	r4, [r5, #0]
     bfc:	strb.w	r6, [sp, #4]
      {
        write_length_ += len;
     c00:	ldr	r3, [r5, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     c02:	cmp	r4, #0
     c04:	beq.w	13ec <MTPD::WriteDescriptor()+0xc28>
      {
        write_length_ += len;
     c08:	adds	r7, r3, #1
     c0a:	str	r7, [r5, #4]
     c0c:	ldr	r2, [pc, #604]	; (e6c <MTPD::WriteDescriptor()+0x6a8>)
     c0e:	add	r3, sp, #68	; 0x44
     c10:	add.w	r0, sp, #78	; 0x4e
    dtostrf( (float)(TEENSYDUINO / 100.0f), 3, 2, buf);
    strlcat(buf, " / MTP " MTP_VERS, sizeof(buf) );
    writestring( buf );    
    #pragma GCC diagnostic push
    #pragma GCC diagnostic ignored "-Warray-bounds"
    for (size_t i=0; i<10; i++) buf[i] = usb_string_serial_number.wString[i];
     c14:	ldrh.w	r1, [r2, #2]!
     c18:	strb.w	r1, [r3], #1
     c1c:	cmp	r0, r3
     c1e:	bne.n	c14 <MTPD::WriteDescriptor()+0x450>

#define Store2Storage(x) (x+1)
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
     c20:	ldrb.w	r6, [sp, #68]	; 0x44
     c24:	cmp	r6, #0
     c26:	beq.n	cec <MTPD::WriteDescriptor()+0x528>
    { write8(strlen(str) + 1);
     c28:	add	r0, sp, #68	; 0x44
     c2a:	bl	c280 <strlen>
     c2e:	adds	r0, #1
     c30:	strb.w	r0, [sp, #9]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     c34:	cmp	r4, #0
     c36:	beq.w	1486 <MTPD::WriteDescriptor()+0xcc2>
      {
        write_length_ += len;
     c3a:	adds	r3, r7, #1
     c3c:	str	r3, [r5, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     c3e:	add.w	r9, r5, #544	; 0x220
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
     c42:	add.w	sl, sp, #68	; 0x44
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     c46:	mov	r2, r9
     c48:	mov	r9, r5
     c4a:	mov	r5, r2
     c4c:	b.n	c5c <MTPD::WriteDescriptor()+0x498>
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
     c4e:	adds	r3, #2
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
     c50:	ldrb.w	r6, [sl, #1]!
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
     c54:	str.w	r3, [r9, #4]
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
     c58:	cmp	r6, #0
     c5a:	beq.n	cce <MTPD::WriteDescriptor()+0x50a>
     c5c:	strh.w	r6, [sp, #42]	; 0x2a
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     c60:	cmp	r4, #0
     c62:	bne.n	c4e <MTPD::WriteDescriptor()+0x48a>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     c64:	ldr	r7, [pc, #512]	; (e68 <MTPD::WriteDescriptor()+0x6a4>)
     c66:	cmp	r3, #0
     c68:	beq.n	ce6 <MTPD::WriteDescriptor()+0x522>
     c6a:	ldr	r0, [r7, #0]
        write_length_ += len;
     c6c:	adds	r3, #2
     c6e:	add.w	fp, r9, #1056	; 0x420
        
        const char * src=data;
     c72:	add.w	r8, sp, #42	; 0x2a
        //
        int pos = 0; // into data
     c76:	movs	r6, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     c78:	str.w	r3, [r9, #4]
     c7c:	b.n	c84 <MTPD::WriteDescriptor()+0x4c0>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     c7e:	cmp	r6, #1
     c80:	bgt.n	cbe <MTPD::WriteDescriptor()+0x4fa>
     c82:	ldr	r0, [r7, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     c84:	rsb	r4, r0, fp
     c88:	rsb	r3, r6, #2
          memcpy(dst,src,to_copy);
     c8c:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     c8e:	cmp	r4, r3
     c90:	it	ge
     c92:	movge	r4, r3
          memcpy(dst,src,to_copy);
     c94:	mov	r2, r4
          pos += to_copy;
     c96:	add	r6, r4
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     c98:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     c9c:	ldr	r3, [r7, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
     c9e:	add	r8, r4
          dst += to_copy;
     ca0:	add	r4, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     ca2:	cmp	r4, fp
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     ca4:	str	r4, [r7, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     ca6:	bne.n	c7e <MTPD::WriteDescriptor()+0x4ba>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     ca8:	movs	r2, #60	; 0x3c
     caa:	mov.w	r1, #512	; 0x200
     cae:	mov	r0, r5
     cb0:	bl	a228 <usb_mtp_send>
     cb4:	cmp	r0, #0
     cb6:	ble.n	ca8 <MTPD::WriteDescriptor()+0x4e4>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     cb8:	cmp	r6, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     cba:	str	r5, [r7, #0]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     cbc:	ble.n	c82 <MTPD::WriteDescriptor()+0x4be>
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
     cbe:	ldrb.w	r6, [sl, #1]!
     cc2:	ldrb.w	r4, [r9]
     cc6:	ldr.w	r3, [r9, #4]
     cca:	cmp	r6, #0
     ccc:	bne.n	c5c <MTPD::WriteDescriptor()+0x498>
     cce:	mov	r5, r9
     cd0:	movs	r2, #0
     cd2:	strh.w	r2, [sp, #40]	; 0x28
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     cd6:	cmp	r4, #0
     cd8:	beq.w	1556 <MTPD::WriteDescriptor()+0xd92>
      {
        write_length_ += len;
     cdc:	adds	r3, #2
     cde:	str	r3, [r5, #4]
    #pragma GCC diagnostic push
    #pragma GCC diagnostic ignored "-Warray-bounds"
    for (size_t i=0; i<10; i++) buf[i] = usb_string_serial_number.wString[i];
    #pragma GCC diagnostic pop
    writestring(buf);    
  }
     ce0:	add	sp, #92	; 0x5c
     ce2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     ce6:	mov	r0, r5
     ce8:	str	r5, [r7, #0]
     cea:	b.n	c6c <MTPD::WriteDescriptor()+0x4a8>
     cec:	strb.w	r6, [sp, #8]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     cf0:	cmp	r4, #0
     cf2:	beq.w	138c <MTPD::WriteDescriptor()+0xbc8>
      {
        write_length_ += len;
     cf6:	adds	r3, r7, #1
     cf8:	str	r3, [r5, #4]
    #pragma GCC diagnostic push
    #pragma GCC diagnostic ignored "-Warray-bounds"
    for (size_t i=0; i<10; i++) buf[i] = usb_string_serial_number.wString[i];
    #pragma GCC diagnostic pop
    writestring(buf);    
  }
     cfa:	add	sp, #92	; 0x5c
     cfc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     d00:	cmp	r3, #0
     d02:	beq.w	1236 <MTPD::WriteDescriptor()+0xa72>
     d06:	ldr	r4, [pc, #352]	; (e68 <MTPD::WriteDescriptor()+0x6a4>)
     d08:	ldr	r0, [r4, #0]
        write_length_ += len;
     d0a:	adds	r3, #4
     d0c:	add.w	r6, r5, #1056	; 0x420
        
        const char * src=data;
     d10:	add.w	r9, sp, #52	; 0x34
        //
        int pos = 0; // into data
     d14:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     d18:	str	r3, [r5, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     d1a:	add.w	sl, r5, #544	; 0x220
     d1e:	b.n	d28 <MTPD::WriteDescriptor()+0x564>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     d20:	cmp.w	r8, #3
     d24:	bgt.n	d64 <MTPD::WriteDescriptor()+0x5a0>
     d26:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     d28:	subs	r7, r6, r0
     d2a:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
     d2e:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     d30:	cmp	r7, r3
     d32:	it	ge
     d34:	movge	r7, r3
          memcpy(dst,src,to_copy);
     d36:	mov	r2, r7
          pos += to_copy;
     d38:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     d3a:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     d3e:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
     d40:	add	r9, r7
          dst += to_copy;
     d42:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     d44:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     d46:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     d48:	bne.n	d20 <MTPD::WriteDescriptor()+0x55c>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     d4a:	movs	r2, #60	; 0x3c
     d4c:	mov.w	r1, #512	; 0x200
     d50:	mov	r0, sl
     d52:	bl	a228 <usb_mtp_send>
     d56:	cmp	r0, #0
     d58:	ble.n	d4a <MTPD::WriteDescriptor()+0x586>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     d5a:	cmp.w	r8, #3
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     d5e:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     d62:	ble.n	d26 <MTPD::WriteDescriptor()+0x562>
     d64:	movs	r1, #1
     d66:	ldrb	r2, [r5, #0]
     d68:	ldr	r3, [r5, #4]
     d6a:	str	r1, [sp, #64]	; 0x40
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     d6c:	cmp	r2, #0
     d6e:	bne.w	952 <MTPD::WriteDescriptor()+0x18e>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     d72:	cmp	r3, #0
     d74:	beq.w	177a <MTPD::WriteDescriptor()+0xfb6>
     d78:	ldr	r0, [r4, #0]
        write_length_ += len;
     d7a:	adds	r3, #4
        
        const char * src=data;
     d7c:	add.w	r9, sp, #64	; 0x40
        //
        int pos = 0; // into data
     d80:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     d84:	add.w	sl, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     d88:	str	r3, [r5, #4]
     d8a:	b.n	d94 <MTPD::WriteDescriptor()+0x5d0>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     d8c:	cmp.w	r8, #3
     d90:	bgt.n	dd0 <MTPD::WriteDescriptor()+0x60c>
     d92:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     d94:	subs	r7, r6, r0
     d96:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
     d9a:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     d9c:	cmp	r7, r3
     d9e:	it	ge
     da0:	movge	r7, r3
          memcpy(dst,src,to_copy);
     da2:	mov	r2, r7
          pos += to_copy;
     da4:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     da6:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     daa:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
     dac:	add	r9, r7
          dst += to_copy;
     dae:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     db0:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     db2:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     db4:	bne.n	d8c <MTPD::WriteDescriptor()+0x5c8>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     db6:	movs	r2, #60	; 0x3c
     db8:	mov.w	r1, #512	; 0x200
     dbc:	mov	r0, sl
     dbe:	bl	a228 <usb_mtp_send>
     dc2:	cmp	r0, #0
     dc4:	ble.n	db6 <MTPD::WriteDescriptor()+0x5f2>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     dc6:	cmp.w	r8, #3
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     dca:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     dce:	ble.n	d92 <MTPD::WriteDescriptor()+0x5ce>
     dd0:	movw	r1, #54274	; 0xd402
     dd4:	ldrb	r2, [r5, #0]
     dd6:	ldr	r3, [r5, #4]
     dd8:	strh.w	r1, [sp, #22]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     ddc:	cmp	r2, #0
     dde:	bne.w	95c <MTPD::WriteDescriptor()+0x198>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     de2:	cmp	r3, #0
     de4:	beq.w	147c <MTPD::WriteDescriptor()+0xcb8>
     de8:	ldr	r0, [r4, #0]
        write_length_ += len;
     dea:	adds	r3, #2
        
        const char * src=data;
     dec:	add.w	r9, sp, #22
        //
        int pos = 0; // into data
     df0:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     df4:	add.w	sl, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     df8:	str	r3, [r5, #4]
     dfa:	b.n	e04 <MTPD::WriteDescriptor()+0x640>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     dfc:	cmp.w	r8, #1
     e00:	bgt.n	e40 <MTPD::WriteDescriptor()+0x67c>
     e02:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     e04:	subs	r7, r6, r0
     e06:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
     e0a:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     e0c:	cmp	r7, r3
     e0e:	it	ge
     e10:	movge	r7, r3
          memcpy(dst,src,to_copy);
     e12:	mov	r2, r7
          pos += to_copy;
     e14:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     e16:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     e1a:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
     e1c:	add	r9, r7
          dst += to_copy;
     e1e:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     e20:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     e22:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     e24:	bne.n	dfc <MTPD::WriteDescriptor()+0x638>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     e26:	movs	r2, #60	; 0x3c
     e28:	mov.w	r1, #512	; 0x200
     e2c:	mov	r0, sl
     e2e:	bl	a228 <usb_mtp_send>
     e32:	cmp	r0, #0
     e34:	ble.n	e26 <MTPD::WriteDescriptor()+0x662>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     e36:	cmp.w	r8, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     e3a:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     e3e:	ble.n	e02 <MTPD::WriteDescriptor()+0x63e>
     e40:	movs	r1, #0
     e42:	ldrb	r2, [r5, #0]
     e44:	ldr	r3, [r5, #4]
     e46:	str	r1, [sp, #60]	; 0x3c
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     e48:	cmp	r2, #0
     e4a:	bne.w	962 <MTPD::WriteDescriptor()+0x19e>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     e4e:	cmp	r3, #0
     e50:	beq.w	1472 <MTPD::WriteDescriptor()+0xcae>
     e54:	ldr	r0, [r4, #0]
        write_length_ += len;
     e56:	adds	r3, #4
        
        const char * src=data;
     e58:	add.w	r9, sp, #60	; 0x3c
        //
        int pos = 0; // into data
     e5c:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     e60:	add.w	sl, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     e64:	str	r3, [r5, #4]
     e66:	b.n	e78 <MTPD::WriteDescriptor()+0x6b4>
     e68:	.word	0x200014fc
     e6c:	.word	0x20000b08
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     e70:	cmp.w	r8, #3
     e74:	bgt.n	eb4 <MTPD::WriteDescriptor()+0x6f0>
     e76:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     e78:	subs	r7, r6, r0
     e7a:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
     e7e:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     e80:	cmp	r7, r3
     e82:	it	ge
     e84:	movge	r7, r3
          memcpy(dst,src,to_copy);
     e86:	mov	r2, r7
          pos += to_copy;
     e88:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     e8a:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     e8e:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
     e90:	add	r9, r7
          dst += to_copy;
     e92:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     e94:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     e96:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     e98:	bne.n	e70 <MTPD::WriteDescriptor()+0x6ac>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     e9a:	movs	r2, #60	; 0x3c
     e9c:	mov.w	r1, #512	; 0x200
     ea0:	mov	r0, sl
     ea2:	bl	a228 <usb_mtp_send>
     ea6:	cmp	r0, #0
     ea8:	ble.n	e9a <MTPD::WriteDescriptor()+0x6d6>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     eaa:	cmp.w	r8, #3
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     eae:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     eb2:	ble.n	e76 <MTPD::WriteDescriptor()+0x6b2>
     eb4:	movs	r1, #2
     eb6:	ldrb	r2, [r5, #0]
     eb8:	ldr	r3, [r5, #4]
     eba:	str	r1, [sp, #56]	; 0x38
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     ebc:	cmp	r2, #0
     ebe:	bne.w	968 <MTPD::WriteDescriptor()+0x1a4>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     ec2:	cmp	r3, #0
     ec4:	beq.w	1468 <MTPD::WriteDescriptor()+0xca4>
     ec8:	ldr	r0, [r4, #0]
        write_length_ += len;
     eca:	adds	r3, #4
        
        const char * src=data;
     ecc:	add.w	r9, sp, #56	; 0x38
        //
        int pos = 0; // into data
     ed0:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     ed4:	add.w	sl, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     ed8:	str	r3, [r5, #4]
     eda:	b.n	ee4 <MTPD::WriteDescriptor()+0x720>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     edc:	cmp.w	r8, #3
     ee0:	bgt.n	f20 <MTPD::WriteDescriptor()+0x75c>
     ee2:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     ee4:	subs	r7, r6, r0
     ee6:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
     eea:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     eec:	cmp	r7, r3
     eee:	it	ge
     ef0:	movge	r7, r3
          memcpy(dst,src,to_copy);
     ef2:	mov	r2, r7
          pos += to_copy;
     ef4:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     ef6:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     efa:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
     efc:	add	r9, r7
          dst += to_copy;
     efe:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     f00:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     f02:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     f04:	bne.n	edc <MTPD::WriteDescriptor()+0x718>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     f06:	movs	r2, #60	; 0x3c
     f08:	mov.w	r1, #512	; 0x200
     f0c:	mov	r0, sl
     f0e:	bl	a228 <usb_mtp_send>
     f12:	cmp	r0, #0
     f14:	ble.n	f06 <MTPD::WriteDescriptor()+0x742>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     f16:	cmp.w	r8, #3
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     f1a:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     f1e:	ble.n	ee2 <MTPD::WriteDescriptor()+0x71e>
     f20:	mov.w	r1, #12288	; 0x3000
     f24:	ldrb	r2, [r5, #0]
     f26:	ldr	r3, [r5, #4]
     f28:	strh.w	r1, [sp, #20]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     f2c:	cmp	r2, #0
     f2e:	bne.w	972 <MTPD::WriteDescriptor()+0x1ae>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     f32:	cmp	r3, #0
     f34:	beq.w	145e <MTPD::WriteDescriptor()+0xc9a>
     f38:	ldr	r0, [r4, #0]
        write_length_ += len;
     f3a:	adds	r3, #2
        
        const char * src=data;
     f3c:	add.w	r9, sp, #20
        //
        int pos = 0; // into data
     f40:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     f44:	add.w	sl, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     f48:	str	r3, [r5, #4]
     f4a:	b.n	f54 <MTPD::WriteDescriptor()+0x790>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     f4c:	cmp.w	r8, #1
     f50:	bgt.n	f90 <MTPD::WriteDescriptor()+0x7cc>
     f52:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     f54:	subs	r7, r6, r0
     f56:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
     f5a:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     f5c:	cmp	r7, r3
     f5e:	it	ge
     f60:	movge	r7, r3
          memcpy(dst,src,to_copy);
     f62:	mov	r2, r7
          pos += to_copy;
     f64:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     f66:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     f6a:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
     f6c:	add	r9, r7
          dst += to_copy;
     f6e:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     f70:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     f72:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     f74:	bne.n	f4c <MTPD::WriteDescriptor()+0x788>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     f76:	movs	r2, #60	; 0x3c
     f78:	mov.w	r1, #512	; 0x200
     f7c:	mov	r0, sl
     f7e:	bl	a228 <usb_mtp_send>
     f82:	cmp	r0, #0
     f84:	ble.n	f76 <MTPD::WriteDescriptor()+0x7b2>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     f86:	cmp.w	r8, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     f8a:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     f8e:	ble.n	f52 <MTPD::WriteDescriptor()+0x78e>
     f90:	movw	r1, #12289	; 0x3001
     f94:	ldrb	r2, [r5, #0]
     f96:	ldr	r3, [r5, #4]
     f98:	strh.w	r1, [sp, #18]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
     f9c:	cmp	r2, #0
     f9e:	bne.w	97c <MTPD::WriteDescriptor()+0x1b8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
     fa2:	cmp	r3, #0
     fa4:	beq.w	1454 <MTPD::WriteDescriptor()+0xc90>
     fa8:	ldr	r0, [r4, #0]
        write_length_ += len;
     faa:	adds	r3, #2
        
        const char * src=data;
     fac:	add.w	r9, sp, #18
        //
        int pos = 0; // into data
     fb0:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
     fb4:	add.w	sl, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
     fb8:	str	r3, [r5, #4]
     fba:	b.n	fc4 <MTPD::WriteDescriptor()+0x800>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     fbc:	cmp.w	r8, #1
     fc0:	bgt.n	1000 <MTPD::WriteDescriptor()+0x83c>
     fc2:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     fc4:	subs	r7, r6, r0
     fc6:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
     fca:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
     fcc:	cmp	r7, r3
     fce:	it	ge
     fd0:	movge	r7, r3
          memcpy(dst,src,to_copy);
     fd2:	mov	r2, r7
          pos += to_copy;
     fd4:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
     fd6:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     fda:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
     fdc:	add	r9, r7
          dst += to_copy;
     fde:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     fe0:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
     fe2:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
     fe4:	bne.n	fbc <MTPD::WriteDescriptor()+0x7f8>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
     fe6:	movs	r2, #60	; 0x3c
     fe8:	mov.w	r1, #512	; 0x200
     fec:	mov	r0, sl
     fee:	bl	a228 <usb_mtp_send>
     ff2:	cmp	r0, #0
     ff4:	ble.n	fe6 <MTPD::WriteDescriptor()+0x822>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     ff6:	cmp.w	r8, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
     ffa:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
     ffe:	ble.n	fc2 <MTPD::WriteDescriptor()+0x7fe>
    1000:	movs	r1, #5
    1002:	ldrb	r2, [r5, #0]
    1004:	ldr	r3, [r5, #4]
    1006:	strb.w	r1, [sp, #7]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    100a:	cmp	r2, #0
    100c:	bne.w	984 <MTPD::WriteDescriptor()+0x1c0>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1010:	cmp	r3, #0
    1012:	beq.w	17be <MTPD::WriteDescriptor()+0xffa>
    1016:	ldr	r0, [r4, #0]
        write_length_ += len;
    1018:	adds	r3, #1
        
        const char * src=data;
    101a:	add.w	r9, sp, #7
        //
        int pos = 0; // into data
    101e:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    1022:	add.w	sl, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    1026:	str	r3, [r5, #4]
    1028:	b.n	1032 <MTPD::WriteDescriptor()+0x86e>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    102a:	cmp.w	r8, #0
    102e:	bgt.n	106e <MTPD::WriteDescriptor()+0x8aa>
    1030:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1032:	subs	r7, r6, r0
    1034:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    1038:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    103a:	cmp	r7, r3
    103c:	it	ge
    103e:	movge	r7, r3
          memcpy(dst,src,to_copy);
    1040:	mov	r2, r7
          pos += to_copy;
    1042:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    1044:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1048:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    104a:	add	r9, r7
          dst += to_copy;
    104c:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    104e:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1050:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1052:	bne.n	102a <MTPD::WriteDescriptor()+0x866>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    1054:	movs	r2, #60	; 0x3c
    1056:	mov.w	r1, #512	; 0x200
    105a:	mov	r0, sl
    105c:	bl	a228 <usb_mtp_send>
    1060:	cmp	r0, #0
    1062:	ble.n	1054 <MTPD::WriteDescriptor()+0x890>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1064:	cmp.w	r8, #0
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    1068:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    106c:	ble.n	1030 <MTPD::WriteDescriptor()+0x86c>
    106e:	ldrb	r1, [r5, #0]
    1070:	ldr	r3, [r5, #4]
    1072:	b.n	98a <MTPD::WriteDescriptor()+0x1c6>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1074:	ldr	r3, [r0, #4]
    1076:	cmp	r3, #0
    1078:	beq.w	122a <MTPD::WriteDescriptor()+0xa66>
    107c:	ldr	r4, [pc, #776]	; (1388 <MTPD::WriteDescriptor()+0xbc4>)
    107e:	ldr	r0, [r4, #0]
        write_length_ += len;
    1080:	adds	r3, #2
    1082:	add.w	r6, r5, #1056	; 0x420
        
        const char * src=data;
    1086:	add.w	r9, sp, #14
        //
        int pos = 0; // into data
    108a:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    108e:	str	r3, [r5, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    1090:	add.w	sl, r5, #544	; 0x220
    1094:	b.n	109e <MTPD::WriteDescriptor()+0x8da>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1096:	cmp.w	r8, #1
    109a:	bgt.n	10da <MTPD::WriteDescriptor()+0x916>
    109c:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    109e:	subs	r7, r6, r0
    10a0:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    10a4:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    10a6:	cmp	r7, r3
    10a8:	it	ge
    10aa:	movge	r7, r3
          memcpy(dst,src,to_copy);
    10ac:	mov	r2, r7
          pos += to_copy;
    10ae:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    10b0:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    10b4:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    10b6:	add	r9, r7
          dst += to_copy;
    10b8:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    10ba:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    10bc:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    10be:	bne.n	1096 <MTPD::WriteDescriptor()+0x8d2>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    10c0:	movs	r2, #60	; 0x3c
    10c2:	mov.w	r1, #512	; 0x200
    10c6:	mov	r0, sl
    10c8:	bl	a228 <usb_mtp_send>
    10cc:	cmp	r0, #0
    10ce:	ble.n	10c0 <MTPD::WriteDescriptor()+0x8fc>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    10d0:	cmp.w	r8, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    10d4:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    10d8:	ble.n	109c <MTPD::WriteDescriptor()+0x8d8>
    10da:	movs	r1, #6
    10dc:	ldrb	r2, [r5, #0]
    10de:	ldr	r3, [r5, #4]
    10e0:	str	r1, [sp, #48]	; 0x30
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    10e2:	cmp	r2, #0
    10e4:	bne.w	7e2 <MTPD::WriteDescriptor()+0x1e>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    10e8:	cmp	r3, #0
    10ea:	beq.w	1790 <MTPD::WriteDescriptor()+0xfcc>
    10ee:	ldr	r0, [r4, #0]
        write_length_ += len;
    10f0:	adds	r3, #4
        
        const char * src=data;
    10f2:	add.w	r9, sp, #48	; 0x30
        //
        int pos = 0; // into data
    10f6:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    10fa:	add.w	sl, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    10fe:	str	r3, [r5, #4]
    1100:	b.n	110a <MTPD::WriteDescriptor()+0x946>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1102:	cmp.w	r8, #3
    1106:	bgt.n	1146 <MTPD::WriteDescriptor()+0x982>
    1108:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    110a:	subs	r7, r6, r0
    110c:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    1110:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1112:	cmp	r7, r3
    1114:	it	ge
    1116:	movge	r7, r3
          memcpy(dst,src,to_copy);
    1118:	mov	r2, r7
          pos += to_copy;
    111a:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    111c:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1120:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    1122:	add	r9, r7
          dst += to_copy;
    1124:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1126:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1128:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    112a:	bne.n	1102 <MTPD::WriteDescriptor()+0x93e>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    112c:	movs	r2, #60	; 0x3c
    112e:	mov.w	r1, #512	; 0x200
    1132:	mov	r0, sl
    1134:	bl	a228 <usb_mtp_send>
    1138:	cmp	r0, #0
    113a:	ble.n	112c <MTPD::WriteDescriptor()+0x968>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    113c:	cmp.w	r8, #3
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    1140:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1144:	ble.n	1108 <MTPD::WriteDescriptor()+0x944>
    1146:	movs	r1, #100	; 0x64
    1148:	ldrb	r2, [r5, #0]
    114a:	ldr	r3, [r5, #4]
    114c:	strh.w	r1, [sp, #12]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    1150:	cmp	r2, #0
    1152:	bne.w	7ea <MTPD::WriteDescriptor()+0x26>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1156:	cmp	r3, #0
    1158:	beq.w	1786 <MTPD::WriteDescriptor()+0xfc2>
    115c:	ldr	r0, [r4, #0]
        write_length_ += len;
    115e:	adds	r3, #2
        
        const char * src=data;
    1160:	add.w	r9, sp, #12
        //
        int pos = 0; // into data
    1164:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    1168:	add.w	sl, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    116c:	str	r3, [r5, #4]
    116e:	b.n	1178 <MTPD::WriteDescriptor()+0x9b4>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1170:	cmp.w	r8, #1
    1174:	bgt.n	11b4 <MTPD::WriteDescriptor()+0x9f0>
    1176:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1178:	subs	r7, r6, r0
    117a:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    117e:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1180:	cmp	r7, r3
    1182:	it	ge
    1184:	movge	r7, r3
          memcpy(dst,src,to_copy);
    1186:	mov	r2, r7
          pos += to_copy;
    1188:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    118a:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    118e:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    1190:	add	r9, r7
          dst += to_copy;
    1192:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1194:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1196:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1198:	bne.n	1170 <MTPD::WriteDescriptor()+0x9ac>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    119a:	movs	r2, #60	; 0x3c
    119c:	mov.w	r1, #512	; 0x200
    11a0:	mov	r0, sl
    11a2:	bl	a228 <usb_mtp_send>
    11a6:	cmp	r0, #0
    11a8:	ble.n	119a <MTPD::WriteDescriptor()+0x9d6>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    11aa:	cmp.w	r8, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    11ae:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    11b2:	ble.n	1176 <MTPD::WriteDescriptor()+0x9b2>
    11b4:	movs	r1, #20
    11b6:	ldrb	r2, [r5, #0]
    11b8:	ldr	r3, [r5, #4]
    11ba:	strb.w	r1, [sp, #3]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    11be:	cmp	r2, #0
    11c0:	bne.w	7f2 <MTPD::WriteDescriptor()+0x2e>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    11c4:	cmp	r3, #0
    11c6:	beq.w	17ec <MTPD::WriteDescriptor()+0x1028>
    11ca:	ldr	r0, [r4, #0]
        write_length_ += len;
    11cc:	adds	r3, #1
        
        const char * src=data;
    11ce:	add.w	r9, sp, #3
        //
        int pos = 0; // into data
    11d2:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    11d6:	add.w	sl, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    11da:	str	r3, [r5, #4]
    11dc:	b.n	11e6 <MTPD::WriteDescriptor()+0xa22>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    11de:	cmp.w	r8, #0
    11e2:	bgt.n	1222 <MTPD::WriteDescriptor()+0xa5e>
    11e4:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    11e6:	subs	r7, r6, r0
    11e8:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    11ec:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    11ee:	cmp	r7, r3
    11f0:	it	ge
    11f2:	movge	r7, r3
          memcpy(dst,src,to_copy);
    11f4:	mov	r2, r7
          pos += to_copy;
    11f6:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    11f8:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    11fc:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    11fe:	add	r9, r7
          dst += to_copy;
    1200:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1202:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1204:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1206:	bne.n	11de <MTPD::WriteDescriptor()+0xa1a>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    1208:	movs	r2, #60	; 0x3c
    120a:	mov.w	r1, #512	; 0x200
    120e:	mov	r0, sl
    1210:	bl	a228 <usb_mtp_send>
    1214:	cmp	r0, #0
    1216:	ble.n	1208 <MTPD::WriteDescriptor()+0xa44>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1218:	cmp.w	r8, #0
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    121c:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1220:	ble.n	11e4 <MTPD::WriteDescriptor()+0xa20>
    1222:	ldrb	r1, [r5, #0]
    1224:	ldr	r3, [r5, #4]
    1226:	b.w	7f8 <MTPD::WriteDescriptor()+0x34>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    122a:	add.w	r2, r0, #544	; 0x220
    122e:	ldr	r4, [pc, #344]	; (1388 <MTPD::WriteDescriptor()+0xbc4>)
    1230:	mov	r0, r2
    1232:	str	r2, [r4, #0]
    1234:	b.n	1080 <MTPD::WriteDescriptor()+0x8bc>
    1236:	add.w	r2, r9, #544	; 0x220
    123a:	ldr	r4, [pc, #332]	; (1388 <MTPD::WriteDescriptor()+0xbc4>)
    123c:	mov	r0, r2
    123e:	str	r2, [r4, #0]
    1240:	b.n	d0a <MTPD::WriteDescriptor()+0x546>
    1242:	cmp	r3, #0
    1244:	beq.w	17e0 <MTPD::WriteDescriptor()+0x101c>
    1248:	ldr	r4, [pc, #316]	; (1388 <MTPD::WriteDescriptor()+0xbc4>)
    124a:	ldr	r0, [r4, #0]
        write_length_ += len;
    124c:	adds	r3, #2
    124e:	add.w	r6, r5, #1056	; 0x420
        
        const char * src=data;
    1252:	add.w	r9, sp, #24
        //
        int pos = 0; // into data
    1256:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    125a:	str	r3, [r5, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    125c:	add.w	sl, r5, #544	; 0x220
    1260:	b.n	126a <MTPD::WriteDescriptor()+0xaa6>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1262:	cmp.w	r8, #1
    1266:	bgt.n	12a6 <MTPD::WriteDescriptor()+0xae2>
    1268:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    126a:	subs	r7, r6, r0
    126c:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    1270:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1272:	cmp	r7, r3
    1274:	it	ge
    1276:	movge	r7, r3
          memcpy(dst,src,to_copy);
    1278:	mov	r2, r7
          pos += to_copy;
    127a:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    127c:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1280:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    1282:	add	r9, r7
          dst += to_copy;
    1284:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1286:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1288:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    128a:	bne.n	1262 <MTPD::WriteDescriptor()+0xa9e>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    128c:	movs	r2, #60	; 0x3c
    128e:	mov.w	r1, #512	; 0x200
    1292:	mov	r0, sl
    1294:	bl	a228 <usb_mtp_send>
    1298:	cmp	r0, #0
    129a:	ble.n	128c <MTPD::WriteDescriptor()+0xac8>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    129c:	cmp.w	r8, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    12a0:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    12a4:	ble.n	1268 <MTPD::WriteDescriptor()+0xaa4>
    12a6:	movs	r1, #0
    12a8:	ldrb	r2, [r5, #0]
    12aa:	ldr	r3, [r5, #4]
    12ac:	strh.w	r1, [sp, #10]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    12b0:	cmp	r2, #0
    12b2:	bne.w	89e <MTPD::WriteDescriptor()+0xda>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    12b6:	cmp	r3, #0
    12b8:	beq.w	1770 <MTPD::WriteDescriptor()+0xfac>
    12bc:	ldr	r0, [r4, #0]
        write_length_ += len;
    12be:	adds	r3, #2
        
        const char * src=data;
    12c0:	add.w	r9, sp, #10
        //
        int pos = 0; // into data
    12c4:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    12c8:	add.w	sl, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    12cc:	str	r3, [r5, #4]
    12ce:	b.n	12d8 <MTPD::WriteDescriptor()+0xb14>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    12d0:	cmp.w	r8, #1
    12d4:	bgt.n	1314 <MTPD::WriteDescriptor()+0xb50>
    12d6:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    12d8:	subs	r7, r6, r0
    12da:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    12de:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    12e0:	cmp	r7, r3
    12e2:	it	ge
    12e4:	movge	r7, r3
          memcpy(dst,src,to_copy);
    12e6:	mov	r2, r7
          pos += to_copy;
    12e8:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    12ea:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    12ee:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    12f0:	add	r9, r7
          dst += to_copy;
    12f2:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    12f4:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    12f6:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    12f8:	bne.n	12d0 <MTPD::WriteDescriptor()+0xb0c>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    12fa:	movs	r2, #60	; 0x3c
    12fc:	mov.w	r1, #512	; 0x200
    1300:	mov	r0, sl
    1302:	bl	a228 <usb_mtp_send>
    1306:	cmp	r0, #0
    1308:	ble.n	12fa <MTPD::WriteDescriptor()+0xb36>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    130a:	cmp.w	r8, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    130e:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1312:	ble.n	12d6 <MTPD::WriteDescriptor()+0xb12>
    1314:	movs	r1, #11
    1316:	ldrb	r2, [r5, #0]
    1318:	ldr	r3, [r5, #4]
    131a:	str	r1, [sp, #44]	; 0x2c
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    131c:	cmp	r2, #0
    131e:	bne.w	8a4 <MTPD::WriteDescriptor()+0xe0>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1322:	cmp	r3, #0
    1324:	beq.w	1766 <MTPD::WriteDescriptor()+0xfa2>
    1328:	ldr	r0, [r4, #0]
        write_length_ += len;
    132a:	adds	r3, #4
        
        const char * src=data;
    132c:	add.w	r9, sp, #44	; 0x2c
        //
        int pos = 0; // into data
    1330:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    1334:	add.w	sl, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    1338:	str	r3, [r5, #4]
    133a:	b.n	1344 <MTPD::WriteDescriptor()+0xb80>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    133c:	cmp.w	r8, #3
    1340:	bgt.n	1380 <MTPD::WriteDescriptor()+0xbbc>
    1342:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1344:	subs	r7, r6, r0
    1346:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    134a:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    134c:	cmp	r7, r3
    134e:	it	ge
    1350:	movge	r7, r3
          memcpy(dst,src,to_copy);
    1352:	mov	r2, r7
          pos += to_copy;
    1354:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    1356:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    135a:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    135c:	add	r9, r7
          dst += to_copy;
    135e:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1360:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1362:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1364:	bne.n	133c <MTPD::WriteDescriptor()+0xb78>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    1366:	movs	r2, #60	; 0x3c
    1368:	mov.w	r1, #512	; 0x200
    136c:	mov	r0, sl
    136e:	bl	a228 <usb_mtp_send>
    1372:	cmp	r0, #0
    1374:	ble.n	1366 <MTPD::WriteDescriptor()+0xba2>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1376:	cmp.w	r8, #3
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    137a:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    137e:	ble.n	1342 <MTPD::WriteDescriptor()+0xb7e>
    1380:	ldrb	r1, [r5, #0]
    1382:	ldr	r3, [r5, #4]
    1384:	b.w	8aa <MTPD::WriteDescriptor()+0xe6>
    1388:	.word	0x200014fc
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    138c:	cmp	r7, #0
    138e:	beq.w	17a6 <MTPD::WriteDescriptor()+0xfe2>
    1392:	ldr	r4, [pc, #796]	; (16b0 <MTPD::WriteDescriptor()+0xeec>)
    1394:	ldr	r0, [r4, #0]
        write_length_ += len;
    1396:	adds	r3, r7, #1
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    1398:	add.w	r8, r5, #544	; 0x220
    139c:	add.w	r7, r5, #1056	; 0x420
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    13a0:	add	r6, sp, #8
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    13a2:	str	r3, [r5, #4]
        
        const char * src=data;
        //
        int pos = 0; // into data
    13a4:	mov.w	r9, #0
    13a8:	b.n	13b4 <MTPD::WriteDescriptor()+0xbf0>
        while(pos<len)
    13aa:	cmp.w	r9, #0
    13ae:	bgt.w	cfa <MTPD::WriteDescriptor()+0x536>
    13b2:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    13b4:	subs	r5, r7, r0
    13b6:	rsb	r3, r9, #1
          memcpy(dst,src,to_copy);
    13ba:	mov	r1, r6
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    13bc:	cmp	r5, r3
    13be:	it	ge
    13c0:	movge	r5, r3
          memcpy(dst,src,to_copy);
    13c2:	mov	r2, r5
          pos += to_copy;
    13c4:	add	r9, r5
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    13c6:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    13ca:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    13cc:	add	r6, r5
          dst += to_copy;
    13ce:	add	r5, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    13d0:	cmp	r5, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    13d2:	str	r5, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    13d4:	bne.n	13aa <MTPD::WriteDescriptor()+0xbe6>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    13d6:	movs	r2, #60	; 0x3c
    13d8:	mov.w	r1, #512	; 0x200
    13dc:	mov	r0, r8
    13de:	bl	a228 <usb_mtp_send>
    13e2:	cmp	r0, #0
    13e4:	ble.n	13d6 <MTPD::WriteDescriptor()+0xc12>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    13e6:	str.w	r8, [r4]
    13ea:	b.n	13aa <MTPD::WriteDescriptor()+0xbe6>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    13ec:	cmp	r3, #0
    13ee:	beq.w	179a <MTPD::WriteDescriptor()+0xfd6>
    13f2:	ldr	r4, [pc, #700]	; (16b0 <MTPD::WriteDescriptor()+0xeec>)
    13f4:	ldr	r0, [r4, #0]
        write_length_ += len;
    13f6:	adds	r3, #1
    13f8:	add.w	r9, r5, #1056	; 0x420
        
        const char * src=data;
    13fc:	add.w	r8, sp, #4
        //
        int pos = 0; // into data
    1400:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    1402:	str	r3, [r5, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    1404:	add.w	sl, r5, #544	; 0x220
    1408:	b.n	1410 <MTPD::WriteDescriptor()+0xc4c>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    140a:	cmp	r7, #0
    140c:	bgt.n	144c <MTPD::WriteDescriptor()+0xc88>
    140e:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1410:	rsb	r6, r0, r9
    1414:	rsb	r3, r7, #1
          memcpy(dst,src,to_copy);
    1418:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    141a:	cmp	r6, r3
    141c:	it	ge
    141e:	movge	r6, r3
          memcpy(dst,src,to_copy);
    1420:	mov	r2, r6
          pos += to_copy;
    1422:	add	r7, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    1424:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1428:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    142a:	add	r8, r6
          dst += to_copy;
    142c:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    142e:	cmp	r6, r9
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1430:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1432:	bne.n	140a <MTPD::WriteDescriptor()+0xc46>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    1434:	movs	r2, #60	; 0x3c
    1436:	mov.w	r1, #512	; 0x200
    143a:	mov	r0, sl
    143c:	bl	a228 <usb_mtp_send>
    1440:	cmp	r0, #0
    1442:	ble.n	1434 <MTPD::WriteDescriptor()+0xc70>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1444:	cmp	r7, #0
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    1446:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    144a:	ble.n	140e <MTPD::WriteDescriptor()+0xc4a>
    144c:	ldrb	r4, [r5, #0]
    144e:	ldr	r7, [r5, #4]
    1450:	b.w	c0c <MTPD::WriteDescriptor()+0x448>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1454:	add.w	r2, r5, #544	; 0x220
    1458:	mov	r0, r2
    145a:	str	r2, [r4, #0]
    145c:	b.n	faa <MTPD::WriteDescriptor()+0x7e6>
    145e:	add.w	r2, r5, #544	; 0x220
    1462:	mov	r0, r2
    1464:	str	r2, [r4, #0]
    1466:	b.n	f3a <MTPD::WriteDescriptor()+0x776>
    1468:	add.w	r2, r5, #544	; 0x220
    146c:	mov	r0, r2
    146e:	str	r2, [r4, #0]
    1470:	b.n	eca <MTPD::WriteDescriptor()+0x706>
    1472:	add.w	r2, r5, #544	; 0x220
    1476:	mov	r0, r2
    1478:	str	r2, [r4, #0]
    147a:	b.n	e56 <MTPD::WriteDescriptor()+0x692>
    147c:	add.w	r2, r5, #544	; 0x220
    1480:	mov	r0, r2
    1482:	str	r2, [r4, #0]
    1484:	b.n	dea <MTPD::WriteDescriptor()+0x626>
    1486:	cmp	r7, #0
    1488:	beq.w	17b2 <MTPD::WriteDescriptor()+0xfee>
    148c:	ldr	r4, [pc, #544]	; (16b0 <MTPD::WriteDescriptor()+0xeec>)
    148e:	ldr	r0, [r4, #0]
        write_length_ += len;
    1490:	adds	r3, r7, #1
    1492:	add.w	r9, r5, #1056	; 0x420
        
        const char * src=data;
    1496:	add.w	r8, sp, #9
        //
        int pos = 0; // into data
    149a:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    149c:	str	r3, [r5, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    149e:	add.w	sl, r5, #544	; 0x220
    14a2:	b.n	14aa <MTPD::WriteDescriptor()+0xce6>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    14a4:	cmp	r7, #0
    14a6:	bgt.n	14e6 <MTPD::WriteDescriptor()+0xd22>
    14a8:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    14aa:	rsb	r6, r0, r9
    14ae:	rsb	r3, r7, #1
          memcpy(dst,src,to_copy);
    14b2:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    14b4:	cmp	r6, r3
    14b6:	it	ge
    14b8:	movge	r6, r3
          memcpy(dst,src,to_copy);
    14ba:	mov	r2, r6
          pos += to_copy;
    14bc:	add	r7, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    14be:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    14c2:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    14c4:	add	r8, r6
          dst += to_copy;
    14c6:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    14c8:	cmp	r6, r9
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    14ca:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    14cc:	bne.n	14a4 <MTPD::WriteDescriptor()+0xce0>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    14ce:	movs	r2, #60	; 0x3c
    14d0:	mov.w	r1, #512	; 0x200
    14d4:	mov	r0, sl
    14d6:	bl	a228 <usb_mtp_send>
    14da:	cmp	r0, #0
    14dc:	ble.n	14ce <MTPD::WriteDescriptor()+0xd0a>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    14de:	cmp	r7, #0
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    14e0:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    14e4:	ble.n	14a8 <MTPD::WriteDescriptor()+0xce4>
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    14e6:	ldrb.w	r6, [sp, #68]	; 0x44
    14ea:	ldrb	r4, [r5, #0]
    14ec:	ldr	r3, [r5, #4]
    14ee:	cmp	r6, #0
    14f0:	bne.w	c3e <MTPD::WriteDescriptor()+0x47a>
    14f4:	b.w	cd0 <MTPD::WriteDescriptor()+0x50c>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    14f8:	cmp	r3, #0
    14fa:	beq.w	1818 <MTPD::WriteDescriptor()+0x1054>
    14fe:	ldr	r4, [pc, #432]	; (16b0 <MTPD::WriteDescriptor()+0xeec>)
    1500:	ldr	r0, [r4, #0]
        write_length_ += len;
    1502:	adds	r3, #2
    1504:	add.w	r9, r5, #1056	; 0x420
        
        const char * src=data;
    1508:	add.w	r8, sp, #36	; 0x24
        //
        int pos = 0; // into data
    150c:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    150e:	str	r3, [r5, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    1510:	add.w	sl, r5, #544	; 0x220
    1514:	b.n	151c <MTPD::WriteDescriptor()+0xd58>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1516:	cmp	r7, #1
    1518:	bgt.n	144c <MTPD::WriteDescriptor()+0xc88>
    151a:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    151c:	rsb	r6, r0, r9
    1520:	rsb	r3, r7, #2
          memcpy(dst,src,to_copy);
    1524:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1526:	cmp	r6, r3
    1528:	it	ge
    152a:	movge	r6, r3
          memcpy(dst,src,to_copy);
    152c:	mov	r2, r6
          pos += to_copy;
    152e:	add	r7, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    1530:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1534:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    1536:	add	r8, r6
          dst += to_copy;
    1538:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    153a:	cmp	r6, r9
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    153c:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    153e:	bne.n	1516 <MTPD::WriteDescriptor()+0xd52>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    1540:	movs	r2, #60	; 0x3c
    1542:	mov.w	r1, #512	; 0x200
    1546:	mov	r0, sl
    1548:	bl	a228 <usb_mtp_send>
    154c:	cmp	r0, #0
    154e:	ble.n	1540 <MTPD::WriteDescriptor()+0xd7c>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    1550:	str.w	sl, [r4]
    1554:	b.n	1516 <MTPD::WriteDescriptor()+0xd52>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1556:	cmp	r3, #0
    1558:	beq.w	180c <MTPD::WriteDescriptor()+0x1048>
    155c:	ldr	r4, [pc, #336]	; (16b0 <MTPD::WriteDescriptor()+0xeec>)
    155e:	ldr	r0, [r4, #0]
        write_length_ += len;
    1560:	adds	r3, #2
    1562:	add.w	r7, r5, #1056	; 0x420
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    1566:	add.w	r8, r5, #544	; 0x220
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    156a:	add	r6, sp, #40	; 0x28
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    156c:	str	r3, [r5, #4]
        
        const char * src=data;
        //
        int pos = 0; // into data
    156e:	mov.w	r9, #0
    1572:	b.n	157e <MTPD::WriteDescriptor()+0xdba>
        while(pos<len)
    1574:	cmp.w	r9, #1
    1578:	bgt.w	cfa <MTPD::WriteDescriptor()+0x536>
    157c:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    157e:	subs	r5, r7, r0
    1580:	rsb	r3, r9, #2
          memcpy(dst,src,to_copy);
    1584:	mov	r1, r6
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1586:	cmp	r5, r3
    1588:	it	ge
    158a:	movge	r5, r3
          memcpy(dst,src,to_copy);
    158c:	mov	r2, r5
          pos += to_copy;
    158e:	add	r9, r5
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    1590:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1594:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    1596:	add	r6, r5
          dst += to_copy;
    1598:	add	r5, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    159a:	cmp	r5, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    159c:	str	r5, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    159e:	bne.n	1574 <MTPD::WriteDescriptor()+0xdb0>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    15a0:	movs	r2, #60	; 0x3c
    15a2:	mov.w	r1, #512	; 0x200
    15a6:	mov	r0, r8
    15a8:	bl	a228 <usb_mtp_send>
    15ac:	cmp	r0, #0
    15ae:	ble.n	15a0 <MTPD::WriteDescriptor()+0xddc>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    15b0:	str.w	r8, [r4]
    15b4:	b.n	1574 <MTPD::WriteDescriptor()+0xdb0>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    15b6:	cmp	r3, #0
    15b8:	beq.w	1800 <MTPD::WriteDescriptor()+0x103c>
    15bc:	ldr	r4, [pc, #240]	; (16b0 <MTPD::WriteDescriptor()+0xeec>)
    15be:	ldr	r0, [r4, #0]
        write_length_ += len;
    15c0:	adds	r3, #2
    15c2:	add.w	r6, r5, #1056	; 0x420
        
        const char * src=data;
    15c6:	add.w	r9, sp, #28
        //
        int pos = 0; // into data
    15ca:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    15ce:	str	r3, [r5, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    15d0:	add.w	sl, r5, #544	; 0x220
    15d4:	b.n	15de <MTPD::WriteDescriptor()+0xe1a>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    15d6:	cmp.w	r8, #1
    15da:	bgt.n	161a <MTPD::WriteDescriptor()+0xe56>
    15dc:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    15de:	subs	r7, r6, r0
    15e0:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    15e4:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    15e6:	cmp	r7, r3
    15e8:	it	ge
    15ea:	movge	r7, r3
          memcpy(dst,src,to_copy);
    15ec:	mov	r2, r7
          pos += to_copy;
    15ee:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    15f0:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    15f4:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    15f6:	add	r9, r7
          dst += to_copy;
    15f8:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    15fa:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    15fc:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    15fe:	bne.n	15d6 <MTPD::WriteDescriptor()+0xe12>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    1600:	movs	r2, #60	; 0x3c
    1602:	mov.w	r1, #512	; 0x200
    1606:	mov	r0, sl
    1608:	bl	a228 <usb_mtp_send>
    160c:	cmp	r0, #0
    160e:	ble.n	1600 <MTPD::WriteDescriptor()+0xe3c>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1610:	cmp.w	r8, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    1614:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1618:	ble.n	15dc <MTPD::WriteDescriptor()+0xe18>
    161a:	movs	r1, #7
    161c:	ldrb	r2, [r5, #0]
    161e:	ldr	r3, [r5, #4]
    1620:	strb.w	r1, [sp, #6]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    1624:	cmp	r2, #0
    1626:	bne.w	a32 <MTPD::WriteDescriptor()+0x26e>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    162a:	cmp	r3, #0
    162c:	beq.w	17f6 <MTPD::WriteDescriptor()+0x1032>
    1630:	ldr	r0, [r4, #0]
        write_length_ += len;
    1632:	adds	r3, #1
        
        const char * src=data;
    1634:	add.w	r9, sp, #6
        //
        int pos = 0; // into data
    1638:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    163c:	add.w	sl, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    1640:	str	r3, [r5, #4]
    1642:	b.n	164c <MTPD::WriteDescriptor()+0xe88>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1644:	cmp.w	r8, #0
    1648:	bgt.n	1688 <MTPD::WriteDescriptor()+0xec4>
    164a:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    164c:	subs	r7, r6, r0
    164e:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    1652:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1654:	cmp	r7, r3
    1656:	it	ge
    1658:	movge	r7, r3
          memcpy(dst,src,to_copy);
    165a:	mov	r2, r7
          pos += to_copy;
    165c:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    165e:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1662:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    1664:	add	r9, r7
          dst += to_copy;
    1666:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1668:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    166a:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    166c:	bne.n	1644 <MTPD::WriteDescriptor()+0xe80>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    166e:	movs	r2, #60	; 0x3c
    1670:	mov.w	r1, #512	; 0x200
    1674:	mov	r0, sl
    1676:	bl	a228 <usb_mtp_send>
    167a:	cmp	r0, #0
    167c:	ble.n	166e <MTPD::WriteDescriptor()+0xeaa>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    167e:	cmp.w	r8, #0
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    1682:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1686:	ble.n	164a <MTPD::WriteDescriptor()+0xe86>
    1688:	ldrb	r1, [r5, #0]
    168a:	ldr	r3, [r5, #4]
    168c:	b.w	a38 <MTPD::WriteDescriptor()+0x274>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1690:	cmp	r3, #0
    1692:	beq.w	17d4 <MTPD::WriteDescriptor()+0x1010>
    1696:	ldr	r4, [pc, #24]	; (16b0 <MTPD::WriteDescriptor()+0xeec>)
    1698:	ldr	r0, [r4, #0]
        write_length_ += len;
    169a:	adds	r3, #1
    169c:	add.w	r9, r5, #1056	; 0x420
        
        const char * src=data;
    16a0:	add.w	r8, sp, #5
        //
        int pos = 0; // into data
    16a4:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    16a6:	str	r3, [r5, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    16a8:	add.w	sl, r5, #544	; 0x220
    16ac:	b.n	16ba <MTPD::WriteDescriptor()+0xef6>
    16ae:	nop
    16b0:	.word	0x200014fc
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    16b4:	cmp	r7, #0
    16b6:	bgt.n	16f6 <MTPD::WriteDescriptor()+0xf32>
    16b8:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    16ba:	rsb	r6, r0, r9
    16be:	rsb	r3, r7, #1
          memcpy(dst,src,to_copy);
    16c2:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    16c4:	cmp	r6, r3
    16c6:	it	ge
    16c8:	movge	r6, r3
          memcpy(dst,src,to_copy);
    16ca:	mov	r2, r6
          pos += to_copy;
    16cc:	add	r7, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    16ce:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    16d2:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    16d4:	add	r8, r6
          dst += to_copy;
    16d6:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    16d8:	cmp	r6, r9
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    16da:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    16dc:	bne.n	16b4 <MTPD::WriteDescriptor()+0xef0>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    16de:	movs	r2, #60	; 0x3c
    16e0:	mov.w	r1, #512	; 0x200
    16e4:	mov	r0, sl
    16e6:	bl	a228 <usb_mtp_send>
    16ea:	cmp	r0, #0
    16ec:	ble.n	16de <MTPD::WriteDescriptor()+0xf1a>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    16ee:	cmp	r7, #0
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    16f0:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    16f4:	ble.n	16b8 <MTPD::WriteDescriptor()+0xef4>
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    16f6:	ldrb.w	r6, [sp, #68]	; 0x44
    16fa:	ldrb	r4, [r5, #0]
    16fc:	ldr	r3, [r5, #4]
    16fe:	cmp	r6, #0
    1700:	bne.w	b18 <MTPD::WriteDescriptor()+0x354>
    1704:	b.w	bca <MTPD::WriteDescriptor()+0x406>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1708:	cmp	r3, #0
    170a:	beq.n	17c8 <MTPD::WriteDescriptor()+0x1004>
    170c:	ldr	r4, [pc, #276]	; (1824 <MTPD::WriteDescriptor()+0x1060>)
    170e:	ldr	r0, [r4, #0]
        write_length_ += len;
    1710:	adds	r3, #2
    1712:	add.w	r9, r5, #1056	; 0x420
        
        const char * src=data;
    1716:	add.w	r8, sp, #32
        //
        int pos = 0; // into data
    171a:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    171c:	str	r3, [r5, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    171e:	add.w	sl, r5, #544	; 0x220
    1722:	b.n	172c <MTPD::WriteDescriptor()+0xf68>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1724:	cmp	r7, #1
    1726:	bgt.w	ade <MTPD::WriteDescriptor()+0x31a>
    172a:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    172c:	rsb	r6, r0, r9
    1730:	rsb	r3, r7, #2
          memcpy(dst,src,to_copy);
    1734:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1736:	cmp	r6, r3
    1738:	it	ge
    173a:	movge	r6, r3
          memcpy(dst,src,to_copy);
    173c:	mov	r2, r6
          pos += to_copy;
    173e:	add	r7, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    1740:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1744:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    1746:	add	r8, r6
          dst += to_copy;
    1748:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    174a:	cmp	r6, r9
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    174c:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    174e:	bne.n	1724 <MTPD::WriteDescriptor()+0xf60>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    1750:	movs	r2, #60	; 0x3c
    1752:	mov.w	r1, #512	; 0x200
    1756:	mov	r0, sl
    1758:	bl	a228 <usb_mtp_send>
    175c:	cmp	r0, #0
    175e:	ble.n	1750 <MTPD::WriteDescriptor()+0xf8c>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    1760:	str.w	sl, [r4]
    1764:	b.n	1724 <MTPD::WriteDescriptor()+0xf60>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1766:	add.w	r2, r5, #544	; 0x220
    176a:	mov	r0, r2
    176c:	str	r2, [r4, #0]
    176e:	b.n	132a <MTPD::WriteDescriptor()+0xb66>
    1770:	add.w	r2, r5, #544	; 0x220
    1774:	mov	r0, r2
    1776:	str	r2, [r4, #0]
    1778:	b.n	12be <MTPD::WriteDescriptor()+0xafa>
    177a:	add.w	r2, r5, #544	; 0x220
    177e:	mov	r0, r2
    1780:	str	r2, [r4, #0]
    1782:	b.w	d7a <MTPD::WriteDescriptor()+0x5b6>
    1786:	add.w	r2, r5, #544	; 0x220
    178a:	mov	r0, r2
    178c:	str	r2, [r4, #0]
    178e:	b.n	115e <MTPD::WriteDescriptor()+0x99a>
    1790:	add.w	r2, r5, #544	; 0x220
    1794:	mov	r0, r2
    1796:	str	r2, [r4, #0]
    1798:	b.n	10f0 <MTPD::WriteDescriptor()+0x92c>
    179a:	add.w	r2, r5, #544	; 0x220
    179e:	ldr	r4, [pc, #132]	; (1824 <MTPD::WriteDescriptor()+0x1060>)
    17a0:	mov	r0, r2
    17a2:	str	r2, [r4, #0]
    17a4:	b.n	13f6 <MTPD::WriteDescriptor()+0xc32>
    17a6:	add.w	r3, r5, #544	; 0x220
    17aa:	ldr	r4, [pc, #120]	; (1824 <MTPD::WriteDescriptor()+0x1060>)
    17ac:	mov	r0, r3
    17ae:	str	r3, [r4, #0]
    17b0:	b.n	1396 <MTPD::WriteDescriptor()+0xbd2>
    17b2:	add.w	r3, r5, #544	; 0x220
    17b6:	ldr	r4, [pc, #108]	; (1824 <MTPD::WriteDescriptor()+0x1060>)
    17b8:	mov	r0, r3
    17ba:	str	r3, [r4, #0]
    17bc:	b.n	1490 <MTPD::WriteDescriptor()+0xccc>
    17be:	add.w	r2, r5, #544	; 0x220
    17c2:	mov	r0, r2
    17c4:	str	r2, [r4, #0]
    17c6:	b.n	1018 <MTPD::WriteDescriptor()+0x854>
    17c8:	add.w	r2, r9, #544	; 0x220
    17cc:	ldr	r4, [pc, #84]	; (1824 <MTPD::WriteDescriptor()+0x1060>)
    17ce:	mov	r0, r2
    17d0:	str	r2, [r4, #0]
    17d2:	b.n	1710 <MTPD::WriteDescriptor()+0xf4c>
    17d4:	add.w	r2, r5, #544	; 0x220
    17d8:	ldr	r4, [pc, #72]	; (1824 <MTPD::WriteDescriptor()+0x1060>)
    17da:	mov	r0, r2
    17dc:	str	r2, [r4, #0]
    17de:	b.n	169a <MTPD::WriteDescriptor()+0xed6>
    17e0:	add.w	r2, r9, #544	; 0x220
    17e4:	ldr	r4, [pc, #60]	; (1824 <MTPD::WriteDescriptor()+0x1060>)
    17e6:	mov	r0, r2
    17e8:	str	r2, [r4, #0]
    17ea:	b.n	124c <MTPD::WriteDescriptor()+0xa88>
    17ec:	add.w	r2, r5, #544	; 0x220
    17f0:	mov	r0, r2
    17f2:	str	r2, [r4, #0]
    17f4:	b.n	11cc <MTPD::WriteDescriptor()+0xa08>
    17f6:	add.w	r2, r5, #544	; 0x220
    17fa:	mov	r0, r2
    17fc:	str	r2, [r4, #0]
    17fe:	b.n	1632 <MTPD::WriteDescriptor()+0xe6e>
    1800:	add.w	r2, r9, #544	; 0x220
    1804:	ldr	r4, [pc, #28]	; (1824 <MTPD::WriteDescriptor()+0x1060>)
    1806:	mov	r0, r2
    1808:	str	r2, [r4, #0]
    180a:	b.n	15c0 <MTPD::WriteDescriptor()+0xdfc>
    180c:	add.w	r2, r5, #544	; 0x220
    1810:	ldr	r4, [pc, #16]	; (1824 <MTPD::WriteDescriptor()+0x1060>)
    1812:	mov	r0, r2
    1814:	str	r2, [r4, #0]
    1816:	b.n	1560 <MTPD::WriteDescriptor()+0xd9c>
    1818:	add.w	r2, r5, #544	; 0x220
    181c:	ldr	r4, [pc, #4]	; (1824 <MTPD::WriteDescriptor()+0x1060>)
    181e:	mov	r0, r2
    1820:	str	r2, [r4, #0]
    1822:	b.n	1502 <MTPD::WriteDescriptor()+0xd3e>
    1824:	.word	0x200014fc

00001828 <MTPD::GetStorageInfo(unsigned long)>:
    uint32_t num=1;//mFS_get_FSCount();
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
  }

  void GetStorageInfo(uint32_t storage) {
    1828:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    182c:	movs	r2, #1
    182e:	sub	sp, #52	; 0x34
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    1830:	ldrb	r3, [r0, #0]
    uint32_t num=1;//mFS_get_FSCount();
    write32(num); // number of storages (disks)
    for(uint32_t ii=0;ii<num;ii++)  write32(Store2Storage(ii)); // storage id
  }

  void GetStorageInfo(uint32_t storage) {
    1832:	mov	r6, r0
    uint32_t store = Storage2Store(storage);
    1834:	add.w	r9, r1, #4294967295
    1838:	strh.w	r2, [sp, #22]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    183c:	cmp	r3, #0
    183e:	beq.w	1b4a <MTPD::GetStorageInfo(unsigned long)+0x322>
    1842:	movs	r2, #2
      {
        write_length_ += len;
    1844:	ldr	r3, [r0, #4]
    1846:	add	r3, r2
    1848:	strh.w	r2, [sp, #20]
    184c:	movs	r2, #0
    184e:	adds	r3, #2
    1850:	strh.w	r2, [sp, #18]
    1854:	adds	r3, #2
    1856:	movs	r4, #1
    1858:	str	r3, [r6, #4]
public:
    uint32_t Count(uint32_t store,uint32_t parent) {return zFs_[store].Count(parent);}
    uint32_t Next(uint32_t store) {return zFs_[store].Next();}

    uint64_t size(uint32_t store)  
    { return (uint64_t)512 *(uint64_t)(zFs_[store].totalSectors() - zFs_[store].rootSector()); }
    185a:	movw	r2, #10864	; 0x2a70
    185e:	mul.w	r9, r2, r9
    1862:	ldr	r2, [pc, #776]	; (1b6c <MTPD::GetStorageInfo(unsigned long)+0x344>)
    1864:	ldr	r2, [r2, #80]	; 0x50
    1866:	add.w	r0, r2, r9
    186a:	ldr.w	r2, [r2, r9]
    186e:	ldr	r1, [r0, #24]
    uint64_t free(uint32_t store)  
    { return (uint64_t)512 *(uint64_t)(zFs_[store].totalSectors() - zFs_[store].eofSector()); }
    1870:	ldr	r0, [r0, #16]
public:
    uint32_t Count(uint32_t store,uint32_t parent) {return zFs_[store].Count(parent);}
    uint32_t Next(uint32_t store) {return zFs_[store].Next();}

    uint64_t size(uint32_t store)  
    { return (uint64_t)512 *(uint64_t)(zFs_[store].totalSectors() - zFs_[store].rootSector()); }
    1872:	subs	r2, r1, r2
    uint64_t free(uint32_t store)  
    { return (uint64_t)512 *(uint64_t)(zFs_[store].totalSectors() - zFs_[store].eofSector()); }
    1874:	subs	r1, r1, r0
    1876:	lsrs	r0, r2, #23
    1878:	lsls	r2, r2, #9
    187a:	str	r0, [sp, #44]	; 0x2c
    187c:	lsrs	r0, r1, #23
    187e:	str	r2, [sp, #40]	; 0x28
    1880:	lsls	r2, r1, #9
    1882:	str	r0, [sp, #4]
    1884:	str	r2, [sp, #0]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    1886:	cmp	r4, #0
    1888:	beq.n	1978 <MTPD::GetStorageInfo(unsigned long)+0x150>
      {
        write_length_ += len;
    188a:	adds	r3, #8
    188c:	str	r2, [sp, #32]
    188e:	str	r0, [sp, #36]	; 0x24
    1890:	mov.w	r2, #4294967295
    1894:	adds	r3, #8
    1896:	str	r2, [sp, #28]
    uint64_t size(uint32_t store)  
    { return (uint64_t)512 *(uint64_t)(zFs_[store].totalSectors() - zFs_[store].rootSector()); }
    uint64_t free(uint32_t store)  
    { return (uint64_t)512 *(uint64_t)(zFs_[store].totalSectors() - zFs_[store].eofSector()); }

    char * getName(uint32_t store) {return zFs_[store].getName();}
    1898:	ldr	r2, [pc, #720]	; (1b6c <MTPD::GetStorageInfo(unsigned long)+0x344>)
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    189a:	adds	r7, r3, #4
    uint64_t size(uint32_t store)  
    { return (uint64_t)512 *(uint64_t)(zFs_[store].totalSectors() - zFs_[store].rootSector()); }
    uint64_t free(uint32_t store)  
    { return (uint64_t)512 *(uint64_t)(zFs_[store].totalSectors() - zFs_[store].eofSector()); }

    char * getName(uint32_t store) {return zFs_[store].getName();}
    189c:	ldr	r2, [r2, #80]	; 0x50
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    189e:	str	r7, [r6, #4]
    uint64_t size(uint32_t store)  
    { return (uint64_t)512 *(uint64_t)(zFs_[store].totalSectors() - zFs_[store].rootSector()); }
    uint64_t free(uint32_t store)  
    { return (uint64_t)512 *(uint64_t)(zFs_[store].totalSectors() - zFs_[store].eofSector()); }

    char * getName(uint32_t store) {return zFs_[store].getName();}
    18a0:	add	r9, r2

#define Store2Storage(x) (x+1)
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    18a2:	ldrb.w	r3, [r9, #32]
    18a6:	cmp	r3, #0
    18a8:	beq.n	1966 <MTPD::GetStorageInfo(unsigned long)+0x13e>
    uint32_t Read(uint32_t handle, char* out, uint32_t count) ;

    uint64_t size()  {  return (uint64_t)512 *(uint64_t)(total_sectors - root_sector); }
    uint64_t free()  {  return (uint64_t)512 *(uint64_t)(total_sectors - eof_sector); }

    char * getName() {return name;}
    18aa:	add.w	sl, r9, #32
    { write8(strlen(str) + 1);
    18ae:	mov	r0, sl
    18b0:	bl	c280 <strlen>
    18b4:	adds	r0, #1
    18b6:	strb.w	r0, [sp, #17]
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    18ba:	adds	r3, r7, #1
    18bc:	str	r3, [r6, #4]
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    18be:	ldrb.w	r2, [r9, #32]
    18c2:	cmp	r2, #0
    18c4:	beq.n	1962 <MTPD::GetStorageInfo(unsigned long)+0x13a>
    18c6:	movs	r1, #1
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    18c8:	add.w	r9, r6, #544	; 0x220
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    18cc:	mov	r0, r9
    18ce:	mov	r9, r6
    18d0:	mov	r6, r0
    18d2:	b.n	18e2 <MTPD::GetStorageInfo(unsigned long)+0xba>
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    18d4:	adds	r3, #2
    18d6:	str.w	r3, [r9, #4]
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    18da:	ldrb.w	r2, [sl, #1]!
    18de:	cmp	r2, #0
    18e0:	beq.n	1954 <MTPD::GetStorageInfo(unsigned long)+0x12c>
    18e2:	strh.w	r2, [sp, #26]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    18e6:	cmp	r1, #0
    18e8:	bne.n	18d4 <MTPD::GetStorageInfo(unsigned long)+0xac>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    18ea:	ldr	r7, [pc, #644]	; (1b70 <MTPD::GetStorageInfo(unsigned long)+0x348>)
    18ec:	cmp	r3, #0
    18ee:	beq.n	1972 <MTPD::GetStorageInfo(unsigned long)+0x14a>
    18f0:	ldr	r0, [r7, #0]
        write_length_ += len;
    18f2:	adds	r3, #2
    18f4:	add.w	fp, r9, #1056	; 0x420
        
        const char * src=data;
    18f8:	add.w	r8, sp, #26
        //
        int pos = 0; // into data
    18fc:	movs	r5, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    18fe:	str.w	r3, [r9, #4]
    1902:	b.n	190a <MTPD::GetStorageInfo(unsigned long)+0xe2>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1904:	cmp	r5, #1
    1906:	bgt.n	1944 <MTPD::GetStorageInfo(unsigned long)+0x11c>
    1908:	ldr	r0, [r7, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    190a:	rsb	r4, r0, fp
    190e:	rsb	r3, r5, #2
          memcpy(dst,src,to_copy);
    1912:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1914:	cmp	r4, r3
    1916:	it	ge
    1918:	movge	r4, r3
          memcpy(dst,src,to_copy);
    191a:	mov	r2, r4
          pos += to_copy;
    191c:	add	r5, r4
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    191e:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1922:	ldr	r3, [r7, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    1924:	add	r8, r4
          dst += to_copy;
    1926:	add	r4, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1928:	cmp	r4, fp
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    192a:	str	r4, [r7, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    192c:	bne.n	1904 <MTPD::GetStorageInfo(unsigned long)+0xdc>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    192e:	movs	r2, #60	; 0x3c
    1930:	mov.w	r1, #512	; 0x200
    1934:	mov	r0, r6
    1936:	bl	a228 <usb_mtp_send>
    193a:	cmp	r0, #0
    193c:	ble.n	192e <MTPD::GetStorageInfo(unsigned long)+0x106>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    193e:	cmp	r5, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    1940:	str	r6, [r7, #0]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1942:	ble.n	1908 <MTPD::GetStorageInfo(unsigned long)+0xe0>
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    1944:	ldrb.w	r2, [sl, #1]!
    1948:	ldrb.w	r1, [r9]
    194c:	ldr.w	r3, [r9, #4]
    1950:	cmp	r2, #0
    1952:	bne.n	18e2 <MTPD::GetStorageInfo(unsigned long)+0xba>
    1954:	mov	r6, r9
    1956:	movs	r2, #0
    1958:	strh.w	r2, [sp, #24]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    195c:	cmp	r1, #0
    195e:	beq.w	1daa <MTPD::GetStorageInfo(unsigned long)+0x582>
      {
        write_length_ += len;
    1962:	adds	r3, #2
    1964:	b.n	1968 <MTPD::GetStorageInfo(unsigned long)+0x140>
    1966:	adds	r3, r7, #1
    1968:	adds	r3, #1
    196a:	str	r3, [r6, #4]
    const char *name = mFS.getName(store);
    writestring(name);  // storage descriptor
    writestring("");  // volume identifier

    //printf("%d %d ",storage,store); Serial.println(name); Serial.flush();
  }
    196c:	add	sp, #52	; 0x34
    196e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1972:	mov	r0, r6
    1974:	str	r6, [r7, #0]
    1976:	b.n	18f2 <MTPD::GetStorageInfo(unsigned long)+0xca>
    1978:	cmp	r3, #0
    197a:	beq.w	1ca6 <MTPD::GetStorageInfo(unsigned long)+0x47e>
    197e:	ldr	r4, [pc, #496]	; (1b70 <MTPD::GetStorageInfo(unsigned long)+0x348>)
    1980:	ldr	r0, [r4, #0]
        write_length_ += len;
    1982:	adds	r3, #8
    1984:	add.w	r5, r6, #1056	; 0x420
        
        const char * src=data;
    1988:	add.w	r8, sp, #40	; 0x28
        //
        int pos = 0; // into data
    198c:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    198e:	str	r3, [r6, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    1990:	add.w	sl, r6, #544	; 0x220
    1994:	b.n	199c <MTPD::GetStorageInfo(unsigned long)+0x174>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1996:	cmp	r7, #7
    1998:	bgt.n	19d8 <MTPD::GetStorageInfo(unsigned long)+0x1b0>
    199a:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    199c:	rsb	fp, r0, r5
    19a0:	rsb	r3, r7, #8
          memcpy(dst,src,to_copy);
    19a4:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    19a6:	cmp	fp, r3
    19a8:	it	ge
    19aa:	movge	fp, r3
          memcpy(dst,src,to_copy);
    19ac:	mov	r2, fp
          pos += to_copy;
    19ae:	add	r7, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    19b0:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    19b4:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    19b6:	add	r8, fp
          dst += to_copy;
    19b8:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    19ba:	cmp	r3, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    19bc:	str	r3, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    19be:	bne.n	1996 <MTPD::GetStorageInfo(unsigned long)+0x16e>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    19c0:	movs	r2, #60	; 0x3c
    19c2:	mov.w	r1, #512	; 0x200
    19c6:	mov	r0, sl
    19c8:	bl	a228 <usb_mtp_send>
    19cc:	cmp	r0, #0
    19ce:	ble.n	19c0 <MTPD::GetStorageInfo(unsigned long)+0x198>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    19d0:	cmp	r7, #7
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    19d2:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    19d6:	ble.n	199a <MTPD::GetStorageInfo(unsigned long)+0x172>
    19d8:	ldr	r3, [sp, #0]
    19da:	ldrb	r2, [r6, #0]
    19dc:	str	r3, [sp, #32]
    19de:	ldr	r3, [sp, #4]
    19e0:	str	r3, [sp, #36]	; 0x24
    19e2:	ldr	r3, [r6, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    19e4:	cmp	r2, #0
    19e6:	bne.w	1890 <MTPD::GetStorageInfo(unsigned long)+0x68>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    19ea:	cmp	r3, #0
    19ec:	beq.w	1d8c <MTPD::GetStorageInfo(unsigned long)+0x564>
    19f0:	ldr	r0, [r4, #0]
        write_length_ += len;
    19f2:	adds	r3, #8
        
        const char * src=data;
    19f4:	add.w	r8, sp, #32
        //
        int pos = 0; // into data
    19f8:	movs	r7, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    19fa:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    19fe:	str	r3, [r6, #4]
    1a00:	b.n	1a08 <MTPD::GetStorageInfo(unsigned long)+0x1e0>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1a02:	cmp	r7, #7
    1a04:	bgt.n	1a44 <MTPD::GetStorageInfo(unsigned long)+0x21c>
    1a06:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1a08:	rsb	fp, r0, r5
    1a0c:	rsb	r3, r7, #8
          memcpy(dst,src,to_copy);
    1a10:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1a12:	cmp	fp, r3
    1a14:	it	ge
    1a16:	movge	fp, r3
          memcpy(dst,src,to_copy);
    1a18:	mov	r2, fp
          pos += to_copy;
    1a1a:	add	r7, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    1a1c:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1a20:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    1a22:	add	r8, fp
          dst += to_copy;
    1a24:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1a26:	cmp	r3, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1a28:	str	r3, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1a2a:	bne.n	1a02 <MTPD::GetStorageInfo(unsigned long)+0x1da>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    1a2c:	movs	r2, #60	; 0x3c
    1a2e:	mov.w	r1, #512	; 0x200
    1a32:	mov	r0, sl
    1a34:	bl	a228 <usb_mtp_send>
    1a38:	cmp	r0, #0
    1a3a:	ble.n	1a2c <MTPD::GetStorageInfo(unsigned long)+0x204>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1a3c:	cmp	r7, #7
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    1a3e:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1a42:	ble.n	1a06 <MTPD::GetStorageInfo(unsigned long)+0x1de>
    1a44:	mov.w	r1, #4294967295
    1a48:	ldrb	r2, [r6, #0]
    1a4a:	ldr	r3, [r6, #4]
    1a4c:	str	r1, [sp, #28]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    1a4e:	cmp	r2, #0
    1a50:	bne.w	1898 <MTPD::GetStorageInfo(unsigned long)+0x70>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1a54:	cmp	r3, #0
    1a56:	beq.w	1cb2 <MTPD::GetStorageInfo(unsigned long)+0x48a>
    1a5a:	ldr	r0, [r4, #0]
        write_length_ += len;
    1a5c:	adds	r3, #4
        
        const char * src=data;
    1a5e:	add.w	r8, sp, #28
        //
        int pos = 0; // into data
    1a62:	movs	r7, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    1a64:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    1a68:	str	r3, [r6, #4]
    1a6a:	b.n	1a72 <MTPD::GetStorageInfo(unsigned long)+0x24a>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1a6c:	cmp	r7, #3
    1a6e:	bgt.n	1aae <MTPD::GetStorageInfo(unsigned long)+0x286>
    1a70:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1a72:	rsb	fp, r0, r5
    1a76:	rsb	r3, r7, #4
          memcpy(dst,src,to_copy);
    1a7a:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1a7c:	cmp	fp, r3
    1a7e:	it	ge
    1a80:	movge	fp, r3
          memcpy(dst,src,to_copy);
    1a82:	mov	r2, fp
          pos += to_copy;
    1a84:	add	r7, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    1a86:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1a8a:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    1a8c:	add	r8, fp
          dst += to_copy;
    1a8e:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1a90:	cmp	r3, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1a92:	str	r3, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1a94:	bne.n	1a6c <MTPD::GetStorageInfo(unsigned long)+0x244>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    1a96:	movs	r2, #60	; 0x3c
    1a98:	mov.w	r1, #512	; 0x200
    1a9c:	mov	r0, sl
    1a9e:	bl	a228 <usb_mtp_send>
    1aa2:	cmp	r0, #0
    1aa4:	ble.n	1a96 <MTPD::GetStorageInfo(unsigned long)+0x26e>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1aa6:	cmp	r7, #3
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    1aa8:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1aac:	ble.n	1a70 <MTPD::GetStorageInfo(unsigned long)+0x248>
    uint64_t size(uint32_t store)  
    { return (uint64_t)512 *(uint64_t)(zFs_[store].totalSectors() - zFs_[store].rootSector()); }
    uint64_t free(uint32_t store)  
    { return (uint64_t)512 *(uint64_t)(zFs_[store].totalSectors() - zFs_[store].eofSector()); }

    char * getName(uint32_t store) {return zFs_[store].getName();}
    1aae:	ldr	r3, [pc, #188]	; (1b6c <MTPD::GetStorageInfo(unsigned long)+0x344>)
    1ab0:	ldrb.w	r8, [r6]
    1ab4:	ldr	r3, [r3, #80]	; 0x50
    1ab6:	ldr	r7, [r6, #4]
    1ab8:	add	r9, r3

#define Store2Storage(x) (x+1)
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    1aba:	ldrb.w	r3, [r9, #32]
    1abe:	cmp	r3, #0
    1ac0:	beq.w	1cbc <MTPD::GetStorageInfo(unsigned long)+0x494>
    1ac4:	add.w	sl, r9, #32
    { write8(strlen(str) + 1);
    1ac8:	mov	r0, sl
    1aca:	bl	c280 <strlen>
    1ace:	adds	r0, #1
    1ad0:	strb.w	r0, [sp, #17]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    1ad4:	cmp.w	r8, #0
    1ad8:	bne.w	18ba <MTPD::GetStorageInfo(unsigned long)+0x92>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1adc:	cmp	r7, #0
    1ade:	beq.w	1e26 <MTPD::GetStorageInfo(unsigned long)+0x5fe>
    1ae2:	ldr	r0, [r4, #0]
        write_length_ += len;
    1ae4:	adds	r3, r7, #1
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    1ae6:	add.w	r2, r6, #544	; 0x220
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    1aea:	add.w	r8, sp, #17
        //
        int pos = 0; // into data
    1aee:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    1af0:	str	r3, [r6, #4]
    1af2:	mov	fp, r2
    1af4:	str	r6, [sp, #0]
    1af6:	b.n	1afe <MTPD::GetStorageInfo(unsigned long)+0x2d6>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1af8:	cmp	r7, #0
    1afa:	bgt.n	1b38 <MTPD::GetStorageInfo(unsigned long)+0x310>
    1afc:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1afe:	subs	r2, r5, r0
    1b00:	rsb	r3, r7, #1
          memcpy(dst,src,to_copy);
    1b04:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1b06:	cmp	r2, r3
    1b08:	it	ge
    1b0a:	movge	r2, r3
    1b0c:	mov	r6, r2
          memcpy(dst,src,to_copy);
          pos += to_copy;
    1b0e:	add	r7, r2
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    1b10:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1b14:	ldr	r2, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    1b16:	add	r8, r6
          dst += to_copy;
    1b18:	adds	r3, r2, r6
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1b1a:	cmp	r3, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1b1c:	str	r3, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1b1e:	bne.n	1af8 <MTPD::GetStorageInfo(unsigned long)+0x2d0>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    1b20:	movs	r2, #60	; 0x3c
    1b22:	mov.w	r1, #512	; 0x200
    1b26:	mov	r0, fp
    1b28:	bl	a228 <usb_mtp_send>
    1b2c:	cmp	r0, #0
    1b2e:	ble.n	1b20 <MTPD::GetStorageInfo(unsigned long)+0x2f8>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1b30:	cmp	r7, #0
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    1b32:	str.w	fp, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1b36:	ble.n	1afc <MTPD::GetStorageInfo(unsigned long)+0x2d4>
    1b38:	ldr	r6, [sp, #0]
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    1b3a:	ldrb.w	r2, [r9, #32]
    1b3e:	ldrb	r1, [r6, #0]
    1b40:	ldr	r3, [r6, #4]
    1b42:	cmp	r2, #0
    1b44:	bne.w	18c8 <MTPD::GetStorageInfo(unsigned long)+0xa0>
    1b48:	b.n	1956 <MTPD::GetStorageInfo(unsigned long)+0x12e>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1b4a:	ldr	r3, [r0, #4]
    1b4c:	cmp	r3, #0
    1b4e:	beq.w	1c9a <MTPD::GetStorageInfo(unsigned long)+0x472>
    1b52:	ldr	r4, [pc, #28]	; (1b70 <MTPD::GetStorageInfo(unsigned long)+0x348>)
    1b54:	ldr	r0, [r4, #0]
        write_length_ += len;
    1b56:	adds	r3, #2
    1b58:	add.w	r5, r6, #1056	; 0x420
        
        const char * src=data;
    1b5c:	add.w	sl, sp, #22
        //
        int pos = 0; // into data
    1b60:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    1b64:	str	r3, [r6, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    1b66:	add.w	fp, r6, #544	; 0x220
    1b6a:	b.n	1b7c <MTPD::GetStorageInfo(unsigned long)+0x354>
    1b6c:	.word	0x20009508
    1b70:	.word	0x200014fc
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1b74:	cmp.w	r8, #1
    1b78:	bgt.n	1bb8 <MTPD::GetStorageInfo(unsigned long)+0x390>
    1b7a:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1b7c:	subs	r7, r5, r0
    1b7e:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    1b82:	mov	r1, sl
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1b84:	cmp	r7, r3
    1b86:	it	ge
    1b88:	movge	r7, r3
          memcpy(dst,src,to_copy);
    1b8a:	mov	r2, r7
          pos += to_copy;
    1b8c:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    1b8e:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1b92:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    1b94:	add	sl, r7
          dst += to_copy;
    1b96:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1b98:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1b9a:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1b9c:	bne.n	1b74 <MTPD::GetStorageInfo(unsigned long)+0x34c>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    1b9e:	movs	r2, #60	; 0x3c
    1ba0:	mov.w	r1, #512	; 0x200
    1ba4:	mov	r0, fp
    1ba6:	bl	a228 <usb_mtp_send>
    1baa:	cmp	r0, #0
    1bac:	ble.n	1b9e <MTPD::GetStorageInfo(unsigned long)+0x376>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1bae:	cmp.w	r8, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    1bb2:	str.w	fp, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1bb6:	ble.n	1b7a <MTPD::GetStorageInfo(unsigned long)+0x352>
    1bb8:	movs	r1, #2
    1bba:	ldrb	r2, [r6, #0]
    1bbc:	ldr	r3, [r6, #4]
    1bbe:	strh.w	r1, [sp, #20]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    1bc2:	cmp	r2, #0
    1bc4:	bne.w	184c <MTPD::GetStorageInfo(unsigned long)+0x24>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1bc8:	cmp	r3, #0
    1bca:	beq.w	1d96 <MTPD::GetStorageInfo(unsigned long)+0x56e>
    1bce:	ldr	r0, [r4, #0]
        write_length_ += len;
    1bd0:	adds	r3, #2
        
        const char * src=data;
    1bd2:	add.w	sl, sp, #20
        //
        int pos = 0; // into data
    1bd6:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    1bda:	add.w	fp, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    1bde:	str	r3, [r6, #4]
    1be0:	b.n	1bea <MTPD::GetStorageInfo(unsigned long)+0x3c2>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1be2:	cmp.w	r8, #1
    1be6:	bgt.n	1c26 <MTPD::GetStorageInfo(unsigned long)+0x3fe>
    1be8:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1bea:	subs	r7, r5, r0
    1bec:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    1bf0:	mov	r1, sl
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1bf2:	cmp	r7, r3
    1bf4:	it	ge
    1bf6:	movge	r7, r3
          memcpy(dst,src,to_copy);
    1bf8:	mov	r2, r7
          pos += to_copy;
    1bfa:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    1bfc:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1c00:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    1c02:	add	sl, r7
          dst += to_copy;
    1c04:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1c06:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1c08:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1c0a:	bne.n	1be2 <MTPD::GetStorageInfo(unsigned long)+0x3ba>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    1c0c:	movs	r2, #60	; 0x3c
    1c0e:	mov.w	r1, #512	; 0x200
    1c12:	mov	r0, fp
    1c14:	bl	a228 <usb_mtp_send>
    1c18:	cmp	r0, #0
    1c1a:	ble.n	1c0c <MTPD::GetStorageInfo(unsigned long)+0x3e4>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1c1c:	cmp.w	r8, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    1c20:	str.w	fp, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1c24:	ble.n	1be8 <MTPD::GetStorageInfo(unsigned long)+0x3c0>
    1c26:	movs	r1, #0
    1c28:	ldrb	r2, [r6, #0]
    1c2a:	ldr	r3, [r6, #4]
    1c2c:	strh.w	r1, [sp, #18]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    1c30:	cmp	r2, #0
    1c32:	bne.w	1854 <MTPD::GetStorageInfo(unsigned long)+0x2c>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1c36:	cmp	r3, #0
    1c38:	beq.w	1da0 <MTPD::GetStorageInfo(unsigned long)+0x578>
    1c3c:	ldr	r0, [r4, #0]
        write_length_ += len;
    1c3e:	adds	r3, #2
        
        const char * src=data;
    1c40:	add.w	sl, sp, #18
        //
        int pos = 0; // into data
    1c44:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    1c48:	add.w	fp, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    1c4c:	str	r3, [r6, #4]
    1c4e:	b.n	1c58 <MTPD::GetStorageInfo(unsigned long)+0x430>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1c50:	cmp.w	r8, #1
    1c54:	bgt.n	1c94 <MTPD::GetStorageInfo(unsigned long)+0x46c>
    1c56:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1c58:	subs	r7, r5, r0
    1c5a:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    1c5e:	mov	r1, sl
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1c60:	cmp	r7, r3
    1c62:	it	ge
    1c64:	movge	r7, r3
          memcpy(dst,src,to_copy);
    1c66:	mov	r2, r7
          pos += to_copy;
    1c68:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    1c6a:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1c6e:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    1c70:	add	sl, r7
          dst += to_copy;
    1c72:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1c74:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1c76:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1c78:	bne.n	1c50 <MTPD::GetStorageInfo(unsigned long)+0x428>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    1c7a:	movs	r2, #60	; 0x3c
    1c7c:	mov.w	r1, #512	; 0x200
    1c80:	mov	r0, fp
    1c82:	bl	a228 <usb_mtp_send>
    1c86:	cmp	r0, #0
    1c88:	ble.n	1c7a <MTPD::GetStorageInfo(unsigned long)+0x452>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1c8a:	cmp.w	r8, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    1c8e:	str.w	fp, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1c92:	ble.n	1c56 <MTPD::GetStorageInfo(unsigned long)+0x42e>
    1c94:	ldrb	r4, [r6, #0]
    1c96:	ldr	r3, [r6, #4]
    1c98:	b.n	185a <MTPD::GetStorageInfo(unsigned long)+0x32>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1c9a:	add.w	r2, r0, #544	; 0x220
    1c9e:	ldr	r4, [pc, #400]	; (1e30 <MTPD::GetStorageInfo(unsigned long)+0x608>)
    1ca0:	mov	r0, r2
    1ca2:	str	r2, [r4, #0]
    1ca4:	b.n	1b56 <MTPD::GetStorageInfo(unsigned long)+0x32e>
    1ca6:	add.w	r2, r6, #544	; 0x220
    1caa:	ldr	r4, [pc, #388]	; (1e30 <MTPD::GetStorageInfo(unsigned long)+0x608>)
    1cac:	mov	r0, r2
    1cae:	str	r2, [r4, #0]
    1cb0:	b.n	1982 <MTPD::GetStorageInfo(unsigned long)+0x15a>
    1cb2:	add.w	r2, r6, #544	; 0x220
    1cb6:	mov	r0, r2
    1cb8:	str	r2, [r4, #0]
    1cba:	b.n	1a5c <MTPD::GetStorageInfo(unsigned long)+0x234>
    1cbc:	strb.w	r3, [sp, #16]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    1cc0:	cmp.w	r8, #0
    1cc4:	bne.w	1966 <MTPD::GetStorageInfo(unsigned long)+0x13e>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1cc8:	cmp	r7, #0
    1cca:	beq.w	1e10 <MTPD::GetStorageInfo(unsigned long)+0x5e8>
    1cce:	ldr	r0, [r4, #0]
        write_length_ += len;
    1cd0:	adds	r3, r7, #1
        
        const char * src=data;
    1cd2:	add.w	r9, sp, #16
        //
        int pos = 0; // into data
    1cd6:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    1cda:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    1cde:	str	r3, [r6, #4]
    1ce0:	b.n	1cea <MTPD::GetStorageInfo(unsigned long)+0x4c2>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1ce2:	cmp.w	r8, #0
    1ce6:	bgt.n	1d26 <MTPD::GetStorageInfo(unsigned long)+0x4fe>
    1ce8:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1cea:	subs	r7, r5, r0
    1cec:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    1cf0:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1cf2:	cmp	r7, r3
    1cf4:	it	ge
    1cf6:	movge	r7, r3
          memcpy(dst,src,to_copy);
    1cf8:	mov	r2, r7
          pos += to_copy;
    1cfa:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    1cfc:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1d00:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    1d02:	add	r9, r7
          dst += to_copy;
    1d04:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1d06:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1d08:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1d0a:	bne.n	1ce2 <MTPD::GetStorageInfo(unsigned long)+0x4ba>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    1d0c:	movs	r2, #60	; 0x3c
    1d0e:	mov.w	r1, #512	; 0x200
    1d12:	mov	r0, sl
    1d14:	bl	a228 <usb_mtp_send>
    1d18:	cmp	r0, #0
    1d1a:	ble.n	1d0c <MTPD::GetStorageInfo(unsigned long)+0x4e4>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1d1c:	cmp.w	r8, #0
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    1d20:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1d24:	ble.n	1ce8 <MTPD::GetStorageInfo(unsigned long)+0x4c0>
    1d26:	movs	r2, #0
    1d28:	ldrb	r1, [r6, #0]
    1d2a:	ldr	r3, [r6, #4]
    1d2c:	strb.w	r2, [sp, #15]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    1d30:	cmp	r1, #0
    1d32:	bne.w	1968 <MTPD::GetStorageInfo(unsigned long)+0x140>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1d36:	cmp	r3, #0
    1d38:	beq.n	1e06 <MTPD::GetStorageInfo(unsigned long)+0x5de>
    1d3a:	ldr	r0, [r4, #0]
        write_length_ += len;
    1d3c:	adds	r3, #1
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    1d3e:	add.w	r9, r6, #544	; 0x220
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    1d42:	add.w	r8, sp, #15
        //
        int pos = 0; // into data
    1d46:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    1d48:	str	r3, [r6, #4]
    1d4a:	b.n	1d54 <MTPD::GetStorageInfo(unsigned long)+0x52c>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1d4c:	cmp	r7, #0
    1d4e:	bgt.w	196c <MTPD::GetStorageInfo(unsigned long)+0x144>
    1d52:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1d54:	subs	r6, r5, r0
    1d56:	rsb	r3, r7, #1
          memcpy(dst,src,to_copy);
    1d5a:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1d5c:	cmp	r6, r3
    1d5e:	it	ge
    1d60:	movge	r6, r3
          memcpy(dst,src,to_copy);
    1d62:	mov	r2, r6
          pos += to_copy;
    1d64:	add	r7, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    1d66:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1d6a:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    1d6c:	add	r8, r6
          dst += to_copy;
    1d6e:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1d70:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1d72:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1d74:	bne.n	1d4c <MTPD::GetStorageInfo(unsigned long)+0x524>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    1d76:	movs	r2, #60	; 0x3c
    1d78:	mov.w	r1, #512	; 0x200
    1d7c:	mov	r0, r9
    1d7e:	bl	a228 <usb_mtp_send>
    1d82:	cmp	r0, #0
    1d84:	ble.n	1d76 <MTPD::GetStorageInfo(unsigned long)+0x54e>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    1d86:	str.w	r9, [r4]
    1d8a:	b.n	1d4c <MTPD::GetStorageInfo(unsigned long)+0x524>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1d8c:	add.w	r2, r6, #544	; 0x220
    1d90:	mov	r0, r2
    1d92:	str	r2, [r4, #0]
    1d94:	b.n	19f2 <MTPD::GetStorageInfo(unsigned long)+0x1ca>
    1d96:	add.w	r2, r6, #544	; 0x220
    1d9a:	mov	r0, r2
    1d9c:	str	r2, [r4, #0]
    1d9e:	b.n	1bd0 <MTPD::GetStorageInfo(unsigned long)+0x3a8>
    1da0:	add.w	r2, r6, #544	; 0x220
    1da4:	mov	r0, r2
    1da6:	str	r2, [r4, #0]
    1da8:	b.n	1c3e <MTPD::GetStorageInfo(unsigned long)+0x416>
    1daa:	cbz	r3, 1e1a <MTPD::GetStorageInfo(unsigned long)+0x5f2>
    1dac:	ldr	r4, [pc, #128]	; (1e30 <MTPD::GetStorageInfo(unsigned long)+0x608>)
    1dae:	ldr	r0, [r4, #0]
        write_length_ += len;
    1db0:	adds	r3, #2
    1db2:	add.w	r5, r6, #1056	; 0x420
        
        const char * src=data;
    1db6:	add.w	r9, sp, #24
        //
        int pos = 0; // into data
    1dba:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    1dbe:	str	r3, [r6, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    1dc0:	add.w	sl, r6, #544	; 0x220
    1dc4:	b.n	1dce <MTPD::GetStorageInfo(unsigned long)+0x5a6>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1dc6:	cmp.w	r8, #1
    1dca:	bgt.n	1d26 <MTPD::GetStorageInfo(unsigned long)+0x4fe>
    1dcc:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1dce:	subs	r7, r5, r0
    1dd0:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    1dd4:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1dd6:	cmp	r7, r3
    1dd8:	it	ge
    1dda:	movge	r7, r3
          memcpy(dst,src,to_copy);
    1ddc:	mov	r2, r7
          pos += to_copy;
    1dde:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    1de0:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1de4:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    1de6:	add	r9, r7
          dst += to_copy;
    1de8:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1dea:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1dec:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1dee:	bne.n	1dc6 <MTPD::GetStorageInfo(unsigned long)+0x59e>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    1df0:	movs	r2, #60	; 0x3c
    1df2:	mov.w	r1, #512	; 0x200
    1df6:	mov	r0, sl
    1df8:	bl	a228 <usb_mtp_send>
    1dfc:	cmp	r0, #0
    1dfe:	ble.n	1df0 <MTPD::GetStorageInfo(unsigned long)+0x5c8>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    1e00:	str.w	sl, [r4]
    1e04:	b.n	1dc6 <MTPD::GetStorageInfo(unsigned long)+0x59e>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1e06:	add.w	r2, r6, #544	; 0x220
    1e0a:	mov	r0, r2
    1e0c:	str	r2, [r4, #0]
    1e0e:	b.n	1d3c <MTPD::GetStorageInfo(unsigned long)+0x514>
    1e10:	add.w	r3, r6, #544	; 0x220
    1e14:	mov	r0, r3
    1e16:	str	r3, [r4, #0]
    1e18:	b.n	1cd0 <MTPD::GetStorageInfo(unsigned long)+0x4a8>
    1e1a:	add.w	r2, r6, #544	; 0x220
    1e1e:	ldr	r4, [pc, #16]	; (1e30 <MTPD::GetStorageInfo(unsigned long)+0x608>)
    1e20:	mov	r0, r2
    1e22:	str	r2, [r4, #0]
    1e24:	b.n	1db0 <MTPD::GetStorageInfo(unsigned long)+0x588>
    1e26:	add.w	r3, r6, #544	; 0x220
    1e2a:	mov	r0, r3
    1e2c:	str	r3, [r4, #0]
    1e2e:	b.n	1ae4 <MTPD::GetStorageInfo(unsigned long)+0x2bc>
    1e30:	.word	0x200014fc

00001e34 <MTPD::GetObjectInfo(unsigned long)>:
      uint32_t handle;
      while((handle=mFS.Next(store))) write32(handle);
    }
    return;
  }
  void GetObjectInfo(uint32_t handle) 
    1e34:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e38:	ldr	r3, [pc, #704]	; (20fc <MTPD::GetObjectInfo(unsigned long)+0x2c8>)
    1e3a:	sub	sp, #348	; 0x15c
    1e3c:	mov	r4, r1
    1e3e:	mov	r7, r0
    { return (uint64_t)512 *(uint64_t)(zFs_[store].totalSectors() - zFs_[store].eofSector()); }

    char * getName(uint32_t store) {return zFs_[store].getName();}

    uint32_t Info(uint32_t handle, char *filename, uint32_t *size, uint32_t *parent)
    { return zFs_[0].Info(handle, filename, size, parent);}
    1e40:	ldr	r2, [r3, #80]	; 0x50
    1e42:	add	r6, sp, #40	; 0x28
    1e44:	add	r3, sp, #36	; 0x24
    1e46:	mov	r0, r2
    1e48:	str	r6, [sp, #0]
    1e4a:	add	r2, sp, #88	; 0x58
    1e4c:	bl	70ac <zeroFS_class::Info(unsigned long, char*, unsigned long*, unsigned long*)>

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    1e50:	movs	r3, #0
    1e52:	movs	r2, #16
    1e54:	mov	r1, r4
    1e56:	ldr	r0, [pc, #680]	; (2100 <MTPD::GetObjectInfo(unsigned long)+0x2cc>)
    1e58:	bl	a54c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1e5c:	movs	r1, #1
    1e5e:	ldr	r0, [pc, #676]	; (2104 <MTPD::GetObjectInfo(unsigned long)+0x2d0>)
    1e60:	bl	8cd8 <usb_serial_write>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    1e64:	add	r0, sp, #88	; 0x58
    1e66:	bl	c280 <strlen>
    1e6a:	mov	r1, r0
    1e6c:	add	r0, sp, #88	; 0x58
    1e6e:	bl	8cd8 <usb_serial_write>
    1e72:	movs	r1, #1
    1e74:	ldr	r0, [pc, #652]	; (2104 <MTPD::GetObjectInfo(unsigned long)+0x2d0>)
    1e76:	bl	8cd8 <usb_serial_write>

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1e7a:	movs	r3, #0
    1e7c:	movs	r2, #10
    1e7e:	ldr	r1, [sp, #36]	; 0x24
    1e80:	ldr	r0, [pc, #636]	; (2100 <MTPD::GetObjectInfo(unsigned long)+0x2cc>)
    1e82:	bl	a54c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1e86:	movs	r1, #1
    1e88:	ldr	r0, [pc, #632]	; (2104 <MTPD::GetObjectInfo(unsigned long)+0x2d0>)
    1e8a:	bl	8cd8 <usb_serial_write>

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    1e8e:	movs	r3, #0
    1e90:	movs	r2, #16
    1e92:	ldr	r1, [r6, #0]
    1e94:	ldr	r0, [pc, #616]	; (2100 <MTPD::GetObjectInfo(unsigned long)+0x2cc>)
    1e96:	bl	a54c <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    1e9a:	ldr	r0, [pc, #612]	; (2100 <MTPD::GetObjectInfo(unsigned long)+0x2cc>)
    1e9c:	bl	a4fc <Print::println()>
    1ea0:	movs	r2, #1
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    1ea2:	ldrb	r3, [r7, #0]
    1ea4:	str	r2, [sp, #44]	; 0x2c
    1ea6:	cmp	r3, #0
    1ea8:	beq.w	1fee <MTPD::GetObjectInfo(unsigned long)+0x1ba>
      {
        write_length_ += len;
    1eac:	ldr	r3, [r7, #4]
    Serial.println(parent,HEX);
    #endif

    uint32_t storage = Store2Storage(store);
    write32(storage); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    1eae:	ldr	r2, [sp, #36]	; 0x24
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    1eb0:	adds	r3, #4
    Serial.println(parent,HEX);
    #endif

    uint32_t storage = Store2Storage(store);
    write32(storage); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    1eb2:	adds	r2, #1
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    1eb4:	str	r3, [r7, #4]
    Serial.println(parent,HEX);
    #endif

    uint32_t storage = Store2Storage(store);
    write32(storage); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    1eb6:	beq.w	2720 <MTPD::GetObjectInfo(unsigned long)+0x8ec>
    1eba:	movs	r2, #0
    1ebc:	strh.w	r2, [sp, #28]
    1ec0:	movs	r2, #0
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    1ec2:	adds	r3, #2
    1ec4:	strh.w	r2, [sp, #26]
    1ec8:	ldr	r2, [sp, #36]	; 0x24
    1eca:	adds	r3, #2
    1ecc:	str	r2, [sp, #76]	; 0x4c
    1ece:	movs	r2, #0
    1ed0:	adds	r3, #4
    1ed2:	strh.w	r2, [sp, #24]
    1ed6:	movs	r2, #0
    1ed8:	adds	r3, #2
    1eda:	str	r2, [sp, #72]	; 0x48
    1edc:	movs	r2, #0
    1ede:	adds	r3, #4
    1ee0:	str	r2, [sp, #68]	; 0x44
    1ee2:	movs	r2, #0
    1ee4:	adds	r3, #4
    1ee6:	str	r2, [sp, #64]	; 0x40
    1ee8:	movs	r2, #0
    1eea:	adds	r3, #4
    1eec:	str	r2, [sp, #60]	; 0x3c
    1eee:	movs	r2, #0
    1ef0:	adds	r3, #4
    1ef2:	str	r2, [sp, #56]	; 0x38
    1ef4:	movs	r2, #0
    1ef6:	adds	r3, #4
    1ef8:	str	r2, [sp, #52]	; 0x34
    1efa:	ldr	r2, [r6, #0]
    1efc:	adds	r3, #4
    1efe:	str	r2, [sp, #48]	; 0x30
    1f00:	ldr	r2, [sp, #36]	; 0x24
    1f02:	adds	r3, #4
    1f04:	sub.w	r2, r2, #4294967295
    1f08:	clz	r2, r2
    1f0c:	lsrs	r2, r2, #5
    1f0e:	strh.w	r2, [sp, #30]
    1f12:	movs	r2, #0
    1f14:	adds	r3, #2
    1f16:	str	r2, [sp, #84]	; 0x54
    1f18:	movs	r2, #0
    1f1a:	adds	r3, #4
    1f1c:	str	r2, [sp, #80]	; 0x50
    1f1e:	adds	r6, r3, #4

#define Store2Storage(x) (x+1)
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    1f20:	ldrb.w	r2, [sp, #88]	; 0x58
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    1f24:	str	r6, [r7, #4]

#define Store2Storage(x) (x+1)
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    1f26:	cmp	r2, #0
    1f28:	beq.n	1fd6 <MTPD::GetObjectInfo(unsigned long)+0x1a2>
    { write8(strlen(str) + 1);
    1f2a:	add	r0, sp, #88	; 0x58
    1f2c:	str	r2, [sp, #12]
    1f2e:	bl	c280 <strlen>
    1f32:	ldr	r2, [sp, #12]
    1f34:	adds	r0, #1
    1f36:	strb.w	r0, [sp, #23]
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    1f3a:	adds	r3, r6, #1
    1f3c:	movs	r1, #1
    1f3e:	str	r3, [r7, #4]
    1f40:	add.w	sl, sp, #88	; 0x58
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    1f44:	add.w	r9, r7, #544	; 0x220
    1f48:	b.n	1f56 <MTPD::GetObjectInfo(unsigned long)+0x122>
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    1f4a:	adds	r3, #2
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    1f4c:	ldrb.w	r2, [sl, #1]!
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    1f50:	str	r3, [r7, #4]
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    1f52:	cmp	r2, #0
    1f54:	beq.n	1fc6 <MTPD::GetObjectInfo(unsigned long)+0x192>
    1f56:	strh.w	r2, [sp, #34]	; 0x22
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    1f5a:	cmp	r1, #0
    1f5c:	bne.n	1f4a <MTPD::GetObjectInfo(unsigned long)+0x116>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1f5e:	ldr	r4, [pc, #424]	; (2108 <MTPD::GetObjectInfo(unsigned long)+0x2d4>)
    1f60:	cmp	r3, #0
    1f62:	beq.n	1fe6 <MTPD::GetObjectInfo(unsigned long)+0x1b2>
    1f64:	ldr	r0, [r4, #0]
        write_length_ += len;
    1f66:	adds	r3, #2
    1f68:	add.w	r8, r7, #1056	; 0x420
        
        const char * src=data;
    1f6c:	add.w	r6, sp, #34	; 0x22
        //
        int pos = 0; // into data
    1f70:	movs	r5, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    1f72:	str	r3, [r7, #4]
    1f74:	b.n	1f7c <MTPD::GetObjectInfo(unsigned long)+0x148>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1f76:	cmp	r5, #1
    1f78:	bgt.n	1fba <MTPD::GetObjectInfo(unsigned long)+0x186>
    1f7a:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1f7c:	rsb	r2, r0, r8
    1f80:	rsb	r3, r5, #2
          memcpy(dst,src,to_copy);
    1f84:	mov	r1, r6
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    1f86:	cmp	r2, r3
    1f88:	it	ge
    1f8a:	movge	r2, r3
    1f8c:	mov	fp, r2
          memcpy(dst,src,to_copy);
          pos += to_copy;
    1f8e:	add	r5, r2
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    1f90:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1f94:	ldr	r2, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    1f96:	add	r6, fp
          dst += to_copy;
    1f98:	add.w	r3, r2, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1f9c:	cmp	r3, r8
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    1f9e:	str	r3, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    1fa0:	bne.n	1f76 <MTPD::GetObjectInfo(unsigned long)+0x142>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    1fa2:	movs	r2, #60	; 0x3c
    1fa4:	mov.w	r1, #512	; 0x200
    1fa8:	mov	r0, r9
    1faa:	bl	a228 <usb_mtp_send>
    1fae:	cmp	r0, #0
    1fb0:	ble.n	1fa2 <MTPD::GetObjectInfo(unsigned long)+0x16e>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1fb2:	cmp	r5, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    1fb4:	str.w	r9, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    1fb8:	ble.n	1f7a <MTPD::GetObjectInfo(unsigned long)+0x146>
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    1fba:	ldrb.w	r2, [sl, #1]!
    1fbe:	ldrb	r1, [r7, #0]
    1fc0:	ldr	r3, [r7, #4]
    1fc2:	cmp	r2, #0
    1fc4:	bne.n	1f56 <MTPD::GetObjectInfo(unsigned long)+0x122>
    1fc6:	movs	r2, #0
    1fc8:	strh.w	r2, [sp, #32]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    1fcc:	cmp	r1, #0
    1fce:	beq.w	292e <MTPD::GetObjectInfo(unsigned long)+0xafa>
      {
        write_length_ += len;
    1fd2:	adds	r3, #2
    1fd4:	b.n	1fd8 <MTPD::GetObjectInfo(unsigned long)+0x1a4>
    1fd6:	adds	r3, r6, #1
    1fd8:	adds	r3, #1
    1fda:	adds	r3, #1
    1fdc:	adds	r3, #1
    1fde:	str	r3, [r7, #4]
    write32(0);  // sequence number
    writestring(filename);
    writestring("");  // date created
    writestring("");  // date modified
    writestring("");  // keywords
  }
    1fe0:	add	sp, #348	; 0x15c
    1fe2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    1fe6:	mov	r0, r9
    1fe8:	str.w	r9, [r4]
    1fec:	b.n	1f66 <MTPD::GetObjectInfo(unsigned long)+0x132>
    1fee:	ldr	r3, [r7, #4]
    1ff0:	cmp	r3, #0
    1ff2:	beq.w	2714 <MTPD::GetObjectInfo(unsigned long)+0x8e0>
    1ff6:	ldr	r4, [pc, #272]	; (2108 <MTPD::GetObjectInfo(unsigned long)+0x2d4>)
    1ff8:	ldr	r0, [r4, #0]
        write_length_ += len;
    1ffa:	adds	r3, #4
        
        const char * src=data;
    1ffc:	add.w	sl, sp, #44	; 0x2c
    2000:	add.w	r5, r7, #1056	; 0x420
        //
        int pos = 0; // into data
    2004:	mov.w	r9, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2008:	str	r3, [r7, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    200a:	add.w	fp, r7, #544	; 0x220
    200e:	b.n	2018 <MTPD::GetObjectInfo(unsigned long)+0x1e4>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2010:	cmp.w	r9, #3
    2014:	bgt.n	2056 <MTPD::GetObjectInfo(unsigned long)+0x222>
    2016:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2018:	rsb	r8, r0, r5
    201c:	rsb	r3, r9, #4
          memcpy(dst,src,to_copy);
    2020:	mov	r1, sl
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2022:	cmp	r8, r3
    2024:	it	ge
    2026:	movge	r8, r3
          memcpy(dst,src,to_copy);
    2028:	mov	r2, r8
          pos += to_copy;
    202a:	add	r9, r8
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    202c:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2030:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    2032:	add	sl, r8
          dst += to_copy;
    2034:	add	r3, r8
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2036:	cmp	r3, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2038:	str	r3, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    203a:	bne.n	2010 <MTPD::GetObjectInfo(unsigned long)+0x1dc>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    203c:	movs	r2, #60	; 0x3c
    203e:	mov.w	r1, #512	; 0x200
    2042:	mov	r0, fp
    2044:	bl	a228 <usb_mtp_send>
    2048:	cmp	r0, #0
    204a:	ble.n	203c <MTPD::GetObjectInfo(unsigned long)+0x208>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    204c:	cmp.w	r9, #3
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2050:	str.w	fp, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2054:	ble.n	2016 <MTPD::GetObjectInfo(unsigned long)+0x1e2>
    Serial.println(parent,HEX);
    #endif

    uint32_t storage = Store2Storage(store);
    write32(storage); // storage
    write16(size == 0xFFFFFFFFUL ? 0x3001 : 0x0000); // format
    2056:	ldr	r3, [sp, #36]	; 0x24
    2058:	movw	r2, #12289	; 0x3001
    205c:	ldrb	r1, [r7, #0]
    205e:	adds	r3, #1
    2060:	ldr	r3, [r7, #4]
    2062:	it	ne
    2064:	movne	r2, #0
    2066:	strh.w	r2, [sp, #28]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    206a:	cmp	r1, #0
    206c:	bne.w	1ec0 <MTPD::GetObjectInfo(unsigned long)+0x8c>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2070:	cmp	r3, #0
    2072:	beq.w	299a <MTPD::GetObjectInfo(unsigned long)+0xb66>
    2076:	ldr	r0, [r4, #0]
        write_length_ += len;
    2078:	adds	r3, #2
        
        const char * src=data;
    207a:	add.w	r9, sp, #28
        //
        int pos = 0; // into data
    207e:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2082:	add.w	sl, r7, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2086:	str	r3, [r7, #4]
    2088:	b.n	2092 <MTPD::GetObjectInfo(unsigned long)+0x25e>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    208a:	cmp.w	r8, #1
    208e:	bgt.n	20d0 <MTPD::GetObjectInfo(unsigned long)+0x29c>
    2090:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2092:	rsb	fp, r0, r5
    2096:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    209a:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    209c:	cmp	fp, r3
    209e:	it	ge
    20a0:	movge	fp, r3
          memcpy(dst,src,to_copy);
    20a2:	mov	r2, fp
          pos += to_copy;
    20a4:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    20a6:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    20aa:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    20ac:	add	r9, fp
          dst += to_copy;
    20ae:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    20b0:	cmp	r3, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    20b2:	str	r3, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    20b4:	bne.n	208a <MTPD::GetObjectInfo(unsigned long)+0x256>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    20b6:	movs	r2, #60	; 0x3c
    20b8:	mov.w	r1, #512	; 0x200
    20bc:	mov	r0, sl
    20be:	bl	a228 <usb_mtp_send>
    20c2:	cmp	r0, #0
    20c4:	ble.n	20b6 <MTPD::GetObjectInfo(unsigned long)+0x282>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    20c6:	cmp.w	r8, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    20ca:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    20ce:	ble.n	2090 <MTPD::GetObjectInfo(unsigned long)+0x25c>
    20d0:	movs	r3, #0
    20d2:	ldrb	r2, [r7, #0]
    20d4:	strh.w	r3, [sp, #26]
    20d8:	ldr	r3, [r7, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    20da:	cmp	r2, #0
    20dc:	bne.w	1ec8 <MTPD::GetObjectInfo(unsigned long)+0x94>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    20e0:	cmp	r3, #0
    20e2:	beq.w	298e <MTPD::GetObjectInfo(unsigned long)+0xb5a>
    20e6:	ldr	r0, [r4, #0]
        write_length_ += len;
    20e8:	adds	r3, #2
        
        const char * src=data;
    20ea:	add.w	r9, sp, #26
        //
        int pos = 0; // into data
    20ee:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    20f2:	add.w	sl, r7, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    20f6:	str	r3, [r7, #4]
    20f8:	b.n	2114 <MTPD::GetObjectInfo(unsigned long)+0x2e0>
    20fa:	nop
    20fc:	.word	0x20009508
    2100:	.word	0x20000b20
    2104:	.word	0x200001c8
    2108:	.word	0x200014fc
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    210c:	cmp.w	r8, #1
    2110:	bgt.n	2152 <MTPD::GetObjectInfo(unsigned long)+0x31e>
    2112:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2114:	rsb	fp, r0, r5
    2118:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    211c:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    211e:	cmp	fp, r3
    2120:	it	ge
    2122:	movge	fp, r3
          memcpy(dst,src,to_copy);
    2124:	mov	r2, fp
          pos += to_copy;
    2126:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2128:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    212c:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    212e:	add	r9, fp
          dst += to_copy;
    2130:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2132:	cmp	r3, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2134:	str	r3, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2136:	bne.n	210c <MTPD::GetObjectInfo(unsigned long)+0x2d8>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2138:	movs	r2, #60	; 0x3c
    213a:	mov.w	r1, #512	; 0x200
    213e:	mov	r0, sl
    2140:	bl	a228 <usb_mtp_send>
    2144:	cmp	r0, #0
    2146:	ble.n	2138 <MTPD::GetObjectInfo(unsigned long)+0x304>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2148:	cmp.w	r8, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    214c:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2150:	ble.n	2112 <MTPD::GetObjectInfo(unsigned long)+0x2de>
    2152:	ldr	r3, [sp, #36]	; 0x24
    2154:	ldrb	r2, [r7, #0]
    2156:	str	r3, [sp, #76]	; 0x4c
    2158:	ldr	r3, [r7, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    215a:	cmp	r2, #0
    215c:	bne.w	1ece <MTPD::GetObjectInfo(unsigned long)+0x9a>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2160:	cmp	r3, #0
    2162:	beq.w	29c4 <MTPD::GetObjectInfo(unsigned long)+0xb90>
    2166:	ldr	r0, [r4, #0]
        write_length_ += len;
    2168:	adds	r3, #4
        
        const char * src=data;
    216a:	add.w	r9, sp, #76	; 0x4c
        //
        int pos = 0; // into data
    216e:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2172:	add.w	sl, r7, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2176:	str	r3, [r7, #4]
    2178:	b.n	2182 <MTPD::GetObjectInfo(unsigned long)+0x34e>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    217a:	cmp.w	r8, #3
    217e:	bgt.n	21c0 <MTPD::GetObjectInfo(unsigned long)+0x38c>
    2180:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2182:	rsb	fp, r0, r5
    2186:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    218a:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    218c:	cmp	fp, r3
    218e:	it	ge
    2190:	movge	fp, r3
          memcpy(dst,src,to_copy);
    2192:	mov	r2, fp
          pos += to_copy;
    2194:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2196:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    219a:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    219c:	add	r9, fp
          dst += to_copy;
    219e:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    21a0:	cmp	r3, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    21a2:	str	r3, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    21a4:	bne.n	217a <MTPD::GetObjectInfo(unsigned long)+0x346>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    21a6:	movs	r2, #60	; 0x3c
    21a8:	mov.w	r1, #512	; 0x200
    21ac:	mov	r0, sl
    21ae:	bl	a228 <usb_mtp_send>
    21b2:	cmp	r0, #0
    21b4:	ble.n	21a6 <MTPD::GetObjectInfo(unsigned long)+0x372>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    21b6:	cmp.w	r8, #3
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    21ba:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    21be:	ble.n	2180 <MTPD::GetObjectInfo(unsigned long)+0x34c>
    21c0:	movs	r3, #0
    21c2:	ldrb	r2, [r7, #0]
    21c4:	strh.w	r3, [sp, #24]
    21c8:	ldr	r3, [r7, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    21ca:	cmp	r2, #0
    21cc:	bne.w	1ed6 <MTPD::GetObjectInfo(unsigned long)+0xa2>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    21d0:	cmp	r3, #0
    21d2:	beq.w	29ba <MTPD::GetObjectInfo(unsigned long)+0xb86>
    21d6:	ldr	r0, [r4, #0]
        write_length_ += len;
    21d8:	adds	r3, #2
        
        const char * src=data;
    21da:	add.w	r9, sp, #24
        //
        int pos = 0; // into data
    21de:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    21e2:	add.w	sl, r7, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    21e6:	str	r3, [r7, #4]
    21e8:	b.n	21f2 <MTPD::GetObjectInfo(unsigned long)+0x3be>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    21ea:	cmp.w	r8, #1
    21ee:	bgt.n	2230 <MTPD::GetObjectInfo(unsigned long)+0x3fc>
    21f0:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    21f2:	rsb	fp, r0, r5
    21f6:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    21fa:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    21fc:	cmp	fp, r3
    21fe:	it	ge
    2200:	movge	fp, r3
          memcpy(dst,src,to_copy);
    2202:	mov	r2, fp
          pos += to_copy;
    2204:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2206:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    220a:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    220c:	add	r9, fp
          dst += to_copy;
    220e:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2210:	cmp	r3, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2212:	str	r3, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2214:	bne.n	21ea <MTPD::GetObjectInfo(unsigned long)+0x3b6>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2216:	movs	r2, #60	; 0x3c
    2218:	mov.w	r1, #512	; 0x200
    221c:	mov	r0, sl
    221e:	bl	a228 <usb_mtp_send>
    2222:	cmp	r0, #0
    2224:	ble.n	2216 <MTPD::GetObjectInfo(unsigned long)+0x3e2>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2226:	cmp.w	r8, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    222a:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    222e:	ble.n	21f0 <MTPD::GetObjectInfo(unsigned long)+0x3bc>
    2230:	movs	r3, #0
    2232:	ldrb	r2, [r7, #0]
    2234:	str	r3, [sp, #72]	; 0x48
    2236:	ldr	r3, [r7, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2238:	cmp	r2, #0
    223a:	bne.w	1edc <MTPD::GetObjectInfo(unsigned long)+0xa8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    223e:	cmp	r3, #0
    2240:	beq.w	29b0 <MTPD::GetObjectInfo(unsigned long)+0xb7c>
    2244:	ldr	r0, [r4, #0]
        write_length_ += len;
    2246:	adds	r3, #4
        
        const char * src=data;
    2248:	add.w	r9, sp, #72	; 0x48
        //
        int pos = 0; // into data
    224c:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2250:	add.w	sl, r7, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2254:	str	r3, [r7, #4]
    2256:	b.n	2260 <MTPD::GetObjectInfo(unsigned long)+0x42c>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2258:	cmp.w	r8, #3
    225c:	bgt.n	229e <MTPD::GetObjectInfo(unsigned long)+0x46a>
    225e:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2260:	rsb	fp, r0, r5
    2264:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    2268:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    226a:	cmp	fp, r3
    226c:	it	ge
    226e:	movge	fp, r3
          memcpy(dst,src,to_copy);
    2270:	mov	r2, fp
          pos += to_copy;
    2272:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2274:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2278:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    227a:	add	r9, fp
          dst += to_copy;
    227c:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    227e:	cmp	r3, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2280:	str	r3, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2282:	bne.n	2258 <MTPD::GetObjectInfo(unsigned long)+0x424>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2284:	movs	r2, #60	; 0x3c
    2286:	mov.w	r1, #512	; 0x200
    228a:	mov	r0, sl
    228c:	bl	a228 <usb_mtp_send>
    2290:	cmp	r0, #0
    2292:	ble.n	2284 <MTPD::GetObjectInfo(unsigned long)+0x450>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2294:	cmp.w	r8, #3
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2298:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    229c:	ble.n	225e <MTPD::GetObjectInfo(unsigned long)+0x42a>
    229e:	movs	r3, #0
    22a0:	ldrb	r2, [r7, #0]
    22a2:	str	r3, [sp, #68]	; 0x44
    22a4:	ldr	r3, [r7, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    22a6:	cmp	r2, #0
    22a8:	bne.w	1ee2 <MTPD::GetObjectInfo(unsigned long)+0xae>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    22ac:	cmp	r3, #0
    22ae:	beq.w	29a6 <MTPD::GetObjectInfo(unsigned long)+0xb72>
    22b2:	ldr	r0, [r4, #0]
        write_length_ += len;
    22b4:	adds	r3, #4
        
        const char * src=data;
    22b6:	add.w	r9, sp, #68	; 0x44
        //
        int pos = 0; // into data
    22ba:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    22be:	add.w	sl, r7, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    22c2:	str	r3, [r7, #4]
    22c4:	b.n	22ce <MTPD::GetObjectInfo(unsigned long)+0x49a>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    22c6:	cmp.w	r8, #3
    22ca:	bgt.n	230c <MTPD::GetObjectInfo(unsigned long)+0x4d8>
    22cc:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    22ce:	rsb	fp, r0, r5
    22d2:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    22d6:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    22d8:	cmp	fp, r3
    22da:	it	ge
    22dc:	movge	fp, r3
          memcpy(dst,src,to_copy);
    22de:	mov	r2, fp
          pos += to_copy;
    22e0:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    22e2:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    22e6:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    22e8:	add	r9, fp
          dst += to_copy;
    22ea:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    22ec:	cmp	r3, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    22ee:	str	r3, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    22f0:	bne.n	22c6 <MTPD::GetObjectInfo(unsigned long)+0x492>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    22f2:	movs	r2, #60	; 0x3c
    22f4:	mov.w	r1, #512	; 0x200
    22f8:	mov	r0, sl
    22fa:	bl	a228 <usb_mtp_send>
    22fe:	cmp	r0, #0
    2300:	ble.n	22f2 <MTPD::GetObjectInfo(unsigned long)+0x4be>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2302:	cmp.w	r8, #3
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2306:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    230a:	ble.n	22cc <MTPD::GetObjectInfo(unsigned long)+0x498>
    230c:	movs	r3, #0
    230e:	ldrb	r2, [r7, #0]
    2310:	str	r3, [sp, #64]	; 0x40
    2312:	ldr	r3, [r7, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2314:	cmp	r2, #0
    2316:	bne.w	1ee8 <MTPD::GetObjectInfo(unsigned long)+0xb4>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    231a:	cmp	r3, #0
    231c:	beq.w	2924 <MTPD::GetObjectInfo(unsigned long)+0xaf0>
    2320:	ldr	r0, [r4, #0]
        write_length_ += len;
    2322:	adds	r3, #4
        
        const char * src=data;
    2324:	add.w	r9, sp, #64	; 0x40
        //
        int pos = 0; // into data
    2328:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    232c:	add.w	sl, r7, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2330:	str	r3, [r7, #4]
    2332:	b.n	233c <MTPD::GetObjectInfo(unsigned long)+0x508>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2334:	cmp.w	r8, #3
    2338:	bgt.n	237a <MTPD::GetObjectInfo(unsigned long)+0x546>
    233a:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    233c:	rsb	fp, r0, r5
    2340:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    2344:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2346:	cmp	fp, r3
    2348:	it	ge
    234a:	movge	fp, r3
          memcpy(dst,src,to_copy);
    234c:	mov	r2, fp
          pos += to_copy;
    234e:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2350:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2354:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    2356:	add	r9, fp
          dst += to_copy;
    2358:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    235a:	cmp	r3, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    235c:	str	r3, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    235e:	bne.n	2334 <MTPD::GetObjectInfo(unsigned long)+0x500>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2360:	movs	r2, #60	; 0x3c
    2362:	mov.w	r1, #512	; 0x200
    2366:	mov	r0, sl
    2368:	bl	a228 <usb_mtp_send>
    236c:	cmp	r0, #0
    236e:	ble.n	2360 <MTPD::GetObjectInfo(unsigned long)+0x52c>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2370:	cmp.w	r8, #3
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2374:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2378:	ble.n	233a <MTPD::GetObjectInfo(unsigned long)+0x506>
    237a:	movs	r3, #0
    237c:	ldrb	r2, [r7, #0]
    237e:	str	r3, [sp, #60]	; 0x3c
    2380:	ldr	r3, [r7, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2382:	cmp	r2, #0
    2384:	bne.w	1eee <MTPD::GetObjectInfo(unsigned long)+0xba>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2388:	cmp	r3, #0
    238a:	beq.w	291a <MTPD::GetObjectInfo(unsigned long)+0xae6>
    238e:	ldr	r0, [r4, #0]
        write_length_ += len;
    2390:	adds	r3, #4
        
        const char * src=data;
    2392:	add.w	r9, sp, #60	; 0x3c
        //
        int pos = 0; // into data
    2396:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    239a:	add.w	sl, r7, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    239e:	str	r3, [r7, #4]
    23a0:	b.n	23aa <MTPD::GetObjectInfo(unsigned long)+0x576>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    23a2:	cmp.w	r8, #3
    23a6:	bgt.n	23e8 <MTPD::GetObjectInfo(unsigned long)+0x5b4>
    23a8:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    23aa:	rsb	fp, r0, r5
    23ae:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    23b2:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    23b4:	cmp	fp, r3
    23b6:	it	ge
    23b8:	movge	fp, r3
          memcpy(dst,src,to_copy);
    23ba:	mov	r2, fp
          pos += to_copy;
    23bc:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    23be:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    23c2:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    23c4:	add	r9, fp
          dst += to_copy;
    23c6:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    23c8:	cmp	r3, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    23ca:	str	r3, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    23cc:	bne.n	23a2 <MTPD::GetObjectInfo(unsigned long)+0x56e>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    23ce:	movs	r2, #60	; 0x3c
    23d0:	mov.w	r1, #512	; 0x200
    23d4:	mov	r0, sl
    23d6:	bl	a228 <usb_mtp_send>
    23da:	cmp	r0, #0
    23dc:	ble.n	23ce <MTPD::GetObjectInfo(unsigned long)+0x59a>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    23de:	cmp.w	r8, #3
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    23e2:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    23e6:	ble.n	23a8 <MTPD::GetObjectInfo(unsigned long)+0x574>
    23e8:	movs	r3, #0
    23ea:	ldrb	r2, [r7, #0]
    23ec:	str	r3, [sp, #56]	; 0x38
    23ee:	ldr	r3, [r7, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    23f0:	cmp	r2, #0
    23f2:	bne.w	1ef4 <MTPD::GetObjectInfo(unsigned long)+0xc0>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    23f6:	cmp	r3, #0
    23f8:	beq.w	2910 <MTPD::GetObjectInfo(unsigned long)+0xadc>
    23fc:	ldr	r0, [r4, #0]
        write_length_ += len;
    23fe:	adds	r3, #4
        
        const char * src=data;
    2400:	add.w	r9, sp, #56	; 0x38
        //
        int pos = 0; // into data
    2404:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2408:	add.w	sl, r7, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    240c:	str	r3, [r7, #4]
    240e:	b.n	2418 <MTPD::GetObjectInfo(unsigned long)+0x5e4>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2410:	cmp.w	r8, #3
    2414:	bgt.n	2456 <MTPD::GetObjectInfo(unsigned long)+0x622>
    2416:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2418:	rsb	fp, r0, r5
    241c:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    2420:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2422:	cmp	fp, r3
    2424:	it	ge
    2426:	movge	fp, r3
          memcpy(dst,src,to_copy);
    2428:	mov	r2, fp
          pos += to_copy;
    242a:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    242c:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2430:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    2432:	add	r9, fp
          dst += to_copy;
    2434:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2436:	cmp	r3, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2438:	str	r3, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    243a:	bne.n	2410 <MTPD::GetObjectInfo(unsigned long)+0x5dc>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    243c:	movs	r2, #60	; 0x3c
    243e:	mov.w	r1, #512	; 0x200
    2442:	mov	r0, sl
    2444:	bl	a228 <usb_mtp_send>
    2448:	cmp	r0, #0
    244a:	ble.n	243c <MTPD::GetObjectInfo(unsigned long)+0x608>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    244c:	cmp.w	r8, #3
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2450:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2454:	ble.n	2416 <MTPD::GetObjectInfo(unsigned long)+0x5e2>
    2456:	movs	r3, #0
    2458:	ldrb	r2, [r7, #0]
    245a:	str	r3, [sp, #52]	; 0x34
    245c:	ldr	r3, [r7, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    245e:	cmp	r2, #0
    2460:	bne.w	1efa <MTPD::GetObjectInfo(unsigned long)+0xc6>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2464:	cmp	r3, #0
    2466:	beq.w	2906 <MTPD::GetObjectInfo(unsigned long)+0xad2>
    246a:	ldr	r0, [r4, #0]
        write_length_ += len;
    246c:	adds	r3, #4
        
        const char * src=data;
    246e:	add.w	r9, sp, #52	; 0x34
        //
        int pos = 0; // into data
    2472:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2476:	add.w	sl, r7, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    247a:	str	r3, [r7, #4]
    247c:	b.n	2486 <MTPD::GetObjectInfo(unsigned long)+0x652>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    247e:	cmp.w	r8, #3
    2482:	bgt.n	24c4 <MTPD::GetObjectInfo(unsigned long)+0x690>
    2484:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2486:	rsb	fp, r0, r5
    248a:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    248e:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2490:	cmp	fp, r3
    2492:	it	ge
    2494:	movge	fp, r3
          memcpy(dst,src,to_copy);
    2496:	mov	r2, fp
          pos += to_copy;
    2498:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    249a:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    249e:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    24a0:	add	r9, fp
          dst += to_copy;
    24a2:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    24a4:	cmp	r3, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    24a6:	str	r3, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    24a8:	bne.n	247e <MTPD::GetObjectInfo(unsigned long)+0x64a>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    24aa:	movs	r2, #60	; 0x3c
    24ac:	mov.w	r1, #512	; 0x200
    24b0:	mov	r0, sl
    24b2:	bl	a228 <usb_mtp_send>
    24b6:	cmp	r0, #0
    24b8:	ble.n	24aa <MTPD::GetObjectInfo(unsigned long)+0x676>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    24ba:	cmp.w	r8, #3
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    24be:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    24c2:	ble.n	2484 <MTPD::GetObjectInfo(unsigned long)+0x650>
    24c4:	ldr	r3, [r6, #0]
    24c6:	ldrb	r2, [r7, #0]
    24c8:	str	r3, [sp, #48]	; 0x30
    24ca:	ldr	r3, [r7, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    24cc:	cmp	r2, #0
    24ce:	bne.w	1f00 <MTPD::GetObjectInfo(unsigned long)+0xcc>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    24d2:	cmp	r3, #0
    24d4:	beq.w	28fc <MTPD::GetObjectInfo(unsigned long)+0xac8>
    24d8:	ldr	r0, [r4, #0]
        write_length_ += len;
    24da:	adds	r3, #4
        
        const char * src=data;
    24dc:	add.w	r9, sp, #48	; 0x30
        //
        int pos = 0; // into data
    24e0:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    24e4:	add.w	sl, r7, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    24e8:	str	r3, [r7, #4]
    24ea:	b.n	24f4 <MTPD::GetObjectInfo(unsigned long)+0x6c0>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    24ec:	cmp.w	r8, #3
    24f0:	bgt.n	2530 <MTPD::GetObjectInfo(unsigned long)+0x6fc>
    24f2:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    24f4:	subs	r6, r5, r0
    24f6:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    24fa:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    24fc:	cmp	r6, r3
    24fe:	it	ge
    2500:	movge	r6, r3
          memcpy(dst,src,to_copy);
    2502:	mov	r2, r6
          pos += to_copy;
    2504:	add	r8, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2506:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    250a:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    250c:	add	r9, r6
          dst += to_copy;
    250e:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2510:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2512:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2514:	bne.n	24ec <MTPD::GetObjectInfo(unsigned long)+0x6b8>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2516:	movs	r2, #60	; 0x3c
    2518:	mov.w	r1, #512	; 0x200
    251c:	mov	r0, sl
    251e:	bl	a228 <usb_mtp_send>
    2522:	cmp	r0, #0
    2524:	ble.n	2516 <MTPD::GetObjectInfo(unsigned long)+0x6e2>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2526:	cmp.w	r8, #3
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    252a:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    252e:	ble.n	24f2 <MTPD::GetObjectInfo(unsigned long)+0x6be>
    2530:	ldr	r2, [sp, #36]	; 0x24
    2532:	ldrb	r1, [r7, #0]
    2534:	sub.w	r2, r2, #4294967295
    2538:	ldr	r3, [r7, #4]
    253a:	clz	r2, r2
    253e:	lsrs	r2, r2, #5
    2540:	strh.w	r2, [sp, #30]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2544:	cmp	r1, #0
    2546:	bne.w	1f12 <MTPD::GetObjectInfo(unsigned long)+0xde>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    254a:	cmp	r3, #0
    254c:	beq.w	28f2 <MTPD::GetObjectInfo(unsigned long)+0xabe>
    2550:	ldr	r0, [r4, #0]
        write_length_ += len;
    2552:	adds	r3, #2
        
        const char * src=data;
    2554:	add.w	r9, sp, #30
        //
        int pos = 0; // into data
    2558:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    255c:	add.w	sl, r7, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2560:	str	r3, [r7, #4]
    2562:	b.n	256c <MTPD::GetObjectInfo(unsigned long)+0x738>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2564:	cmp.w	r8, #1
    2568:	bgt.n	25a8 <MTPD::GetObjectInfo(unsigned long)+0x774>
    256a:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    256c:	subs	r6, r5, r0
    256e:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    2572:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2574:	cmp	r6, r3
    2576:	it	ge
    2578:	movge	r6, r3
          memcpy(dst,src,to_copy);
    257a:	mov	r2, r6
          pos += to_copy;
    257c:	add	r8, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    257e:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2582:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    2584:	add	r9, r6
          dst += to_copy;
    2586:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2588:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    258a:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    258c:	bne.n	2564 <MTPD::GetObjectInfo(unsigned long)+0x730>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    258e:	movs	r2, #60	; 0x3c
    2590:	mov.w	r1, #512	; 0x200
    2594:	mov	r0, sl
    2596:	bl	a228 <usb_mtp_send>
    259a:	cmp	r0, #0
    259c:	ble.n	258e <MTPD::GetObjectInfo(unsigned long)+0x75a>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    259e:	cmp.w	r8, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    25a2:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    25a6:	ble.n	256a <MTPD::GetObjectInfo(unsigned long)+0x736>
    25a8:	movs	r3, #0
    25aa:	ldrb	r2, [r7, #0]
    25ac:	str	r3, [sp, #84]	; 0x54
    25ae:	ldr	r3, [r7, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    25b0:	cmp	r2, #0
    25b2:	bne.w	1f18 <MTPD::GetObjectInfo(unsigned long)+0xe4>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    25b6:	cmp	r3, #0
    25b8:	beq.w	28e8 <MTPD::GetObjectInfo(unsigned long)+0xab4>
    25bc:	ldr	r0, [r4, #0]
        write_length_ += len;
    25be:	adds	r3, #4
        
        const char * src=data;
    25c0:	add.w	r9, sp, #84	; 0x54
        //
        int pos = 0; // into data
    25c4:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    25c8:	add.w	sl, r7, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    25cc:	str	r3, [r7, #4]
    25ce:	b.n	25d8 <MTPD::GetObjectInfo(unsigned long)+0x7a4>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    25d0:	cmp.w	r8, #3
    25d4:	bgt.n	2614 <MTPD::GetObjectInfo(unsigned long)+0x7e0>
    25d6:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    25d8:	subs	r6, r5, r0
    25da:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    25de:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    25e0:	cmp	r6, r3
    25e2:	it	ge
    25e4:	movge	r6, r3
          memcpy(dst,src,to_copy);
    25e6:	mov	r2, r6
          pos += to_copy;
    25e8:	add	r8, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    25ea:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    25ee:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    25f0:	add	r9, r6
          dst += to_copy;
    25f2:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    25f4:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    25f6:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    25f8:	bne.n	25d0 <MTPD::GetObjectInfo(unsigned long)+0x79c>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    25fa:	movs	r2, #60	; 0x3c
    25fc:	mov.w	r1, #512	; 0x200
    2600:	mov	r0, sl
    2602:	bl	a228 <usb_mtp_send>
    2606:	cmp	r0, #0
    2608:	ble.n	25fa <MTPD::GetObjectInfo(unsigned long)+0x7c6>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    260a:	cmp.w	r8, #3
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    260e:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2612:	ble.n	25d6 <MTPD::GetObjectInfo(unsigned long)+0x7a2>
    2614:	movs	r3, #0
    2616:	ldrb	r2, [r7, #0]
    2618:	str	r3, [sp, #80]	; 0x50
    261a:	ldr	r3, [r7, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    261c:	cmp	r2, #0
    261e:	bne.w	1f1e <MTPD::GetObjectInfo(unsigned long)+0xea>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2622:	cmp	r3, #0
    2624:	beq.w	272c <MTPD::GetObjectInfo(unsigned long)+0x8f8>
    2628:	ldr	r0, [r4, #0]
        write_length_ += len;
    262a:	adds	r3, #4
        
        const char * src=data;
    262c:	add.w	r9, sp, #80	; 0x50
        //
        int pos = 0; // into data
    2630:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2634:	add.w	sl, r7, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2638:	str	r3, [r7, #4]
    263a:	b.n	2644 <MTPD::GetObjectInfo(unsigned long)+0x810>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    263c:	cmp.w	r8, #3
    2640:	bgt.n	2680 <MTPD::GetObjectInfo(unsigned long)+0x84c>
    2642:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2644:	subs	r6, r5, r0
    2646:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    264a:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    264c:	cmp	r6, r3
    264e:	it	ge
    2650:	movge	r6, r3
          memcpy(dst,src,to_copy);
    2652:	mov	r2, r6
          pos += to_copy;
    2654:	add	r8, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2656:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    265a:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    265c:	add	r9, r6
          dst += to_copy;
    265e:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2660:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2662:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2664:	bne.n	263c <MTPD::GetObjectInfo(unsigned long)+0x808>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2666:	movs	r2, #60	; 0x3c
    2668:	mov.w	r1, #512	; 0x200
    266c:	mov	r0, sl
    266e:	bl	a228 <usb_mtp_send>
    2672:	cmp	r0, #0
    2674:	ble.n	2666 <MTPD::GetObjectInfo(unsigned long)+0x832>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2676:	cmp.w	r8, #3
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    267a:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    267e:	ble.n	2642 <MTPD::GetObjectInfo(unsigned long)+0x80e>

#define Store2Storage(x) (x+1)
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    2680:	ldrb.w	r2, [sp, #88]	; 0x58
    2684:	ldrb.w	r8, [r7]
    2688:	ldr	r6, [r7, #4]
    268a:	cmp	r2, #0
    268c:	beq.n	2736 <MTPD::GetObjectInfo(unsigned long)+0x902>
    { write8(strlen(str) + 1);
    268e:	add	r0, sp, #88	; 0x58
    2690:	str	r2, [sp, #12]
    2692:	bl	c280 <strlen>
    2696:	adds	r0, #1
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2698:	ldr	r2, [sp, #12]
    269a:	strb.w	r0, [sp, #23]
    269e:	cmp.w	r8, #0
    26a2:	bne.w	1f3a <MTPD::GetObjectInfo(unsigned long)+0x106>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    26a6:	cmp	r6, #0
    26a8:	beq.w	2a04 <MTPD::GetObjectInfo(unsigned long)+0xbd0>
    26ac:	ldr	r0, [r4, #0]
        write_length_ += len;
    26ae:	adds	r3, r6, #1
        
        const char * src=data;
    26b0:	add.w	r9, sp, #23
        //
        int pos = 0; // into data
    26b4:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    26b8:	add.w	sl, r7, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    26bc:	str	r3, [r7, #4]
    26be:	b.n	26c8 <MTPD::GetObjectInfo(unsigned long)+0x894>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    26c0:	cmp.w	r8, #0
    26c4:	bgt.n	2704 <MTPD::GetObjectInfo(unsigned long)+0x8d0>
    26c6:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    26c8:	subs	r6, r5, r0
    26ca:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    26ce:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    26d0:	cmp	r6, r3
    26d2:	it	ge
    26d4:	movge	r6, r3
          memcpy(dst,src,to_copy);
    26d6:	mov	r2, r6
          pos += to_copy;
    26d8:	add	r8, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    26da:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    26de:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    26e0:	add	r9, r6
          dst += to_copy;
    26e2:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    26e4:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    26e6:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    26e8:	bne.n	26c0 <MTPD::GetObjectInfo(unsigned long)+0x88c>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    26ea:	movs	r2, #60	; 0x3c
    26ec:	mov.w	r1, #512	; 0x200
    26f0:	mov	r0, sl
    26f2:	bl	a228 <usb_mtp_send>
    26f6:	cmp	r0, #0
    26f8:	ble.n	26ea <MTPD::GetObjectInfo(unsigned long)+0x8b6>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    26fa:	cmp.w	r8, #0
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    26fe:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2702:	ble.n	26c6 <MTPD::GetObjectInfo(unsigned long)+0x892>
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    2704:	ldrb.w	r2, [sp, #88]	; 0x58
    2708:	ldrb	r1, [r7, #0]
    270a:	ldr	r3, [r7, #4]
    270c:	cmp	r2, #0
    270e:	bne.w	1f40 <MTPD::GetObjectInfo(unsigned long)+0x10c>
    2712:	b.n	1fc6 <MTPD::GetObjectInfo(unsigned long)+0x192>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2714:	add.w	r2, r7, #544	; 0x220
    2718:	ldr	r4, [pc, #756]	; (2a10 <MTPD::GetObjectInfo(unsigned long)+0xbdc>)
    271a:	mov	r0, r2
    271c:	str	r2, [r4, #0]
    271e:	b.n	1ffa <MTPD::GetObjectInfo(unsigned long)+0x1c6>
    2720:	movw	r2, #12289	; 0x3001
    2724:	strh.w	r2, [sp, #28]
    2728:	b.w	1ec0 <MTPD::GetObjectInfo(unsigned long)+0x8c>
    272c:	add.w	r2, r7, #544	; 0x220
    2730:	mov	r0, r2
    2732:	str	r2, [r4, #0]
    2734:	b.n	262a <MTPD::GetObjectInfo(unsigned long)+0x7f6>
    2736:	strb.w	r2, [sp, #22]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    273a:	cmp.w	r8, #0
    273e:	bne.w	1fd6 <MTPD::GetObjectInfo(unsigned long)+0x1a2>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2742:	cmp	r6, #0
    2744:	beq.w	29ee <MTPD::GetObjectInfo(unsigned long)+0xbba>
    2748:	ldr	r0, [r4, #0]
        write_length_ += len;
    274a:	adds	r3, r6, #1
        
        const char * src=data;
    274c:	add.w	r9, sp, #22
        //
        int pos = 0; // into data
    2750:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2754:	add.w	sl, r7, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2758:	str	r3, [r7, #4]
    275a:	b.n	2764 <MTPD::GetObjectInfo(unsigned long)+0x930>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    275c:	cmp.w	r8, #0
    2760:	bgt.n	27a0 <MTPD::GetObjectInfo(unsigned long)+0x96c>
    2762:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2764:	subs	r6, r5, r0
    2766:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    276a:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    276c:	cmp	r6, r3
    276e:	it	ge
    2770:	movge	r6, r3
          memcpy(dst,src,to_copy);
    2772:	mov	r2, r6
          pos += to_copy;
    2774:	add	r8, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2776:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    277a:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    277c:	add	r9, r6
          dst += to_copy;
    277e:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2780:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2782:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2784:	bne.n	275c <MTPD::GetObjectInfo(unsigned long)+0x928>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2786:	movs	r2, #60	; 0x3c
    2788:	mov.w	r1, #512	; 0x200
    278c:	mov	r0, sl
    278e:	bl	a228 <usb_mtp_send>
    2792:	cmp	r0, #0
    2794:	ble.n	2786 <MTPD::GetObjectInfo(unsigned long)+0x952>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2796:	cmp.w	r8, #0
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    279a:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    279e:	ble.n	2762 <MTPD::GetObjectInfo(unsigned long)+0x92e>
    27a0:	movs	r2, #0
    27a2:	ldrb	r1, [r7, #0]
    27a4:	ldr	r3, [r7, #4]
    27a6:	strb.w	r2, [sp, #21]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    27aa:	cmp	r1, #0
    27ac:	bne.w	1fd8 <MTPD::GetObjectInfo(unsigned long)+0x1a4>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    27b0:	cmp	r3, #0
    27b2:	beq.w	29e4 <MTPD::GetObjectInfo(unsigned long)+0xbb0>
    27b6:	ldr	r0, [r4, #0]
        write_length_ += len;
    27b8:	adds	r3, #1
        
        const char * src=data;
    27ba:	add.w	r9, sp, #21
        //
        int pos = 0; // into data
    27be:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    27c2:	add.w	sl, r7, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    27c6:	str	r3, [r7, #4]
    27c8:	b.n	27d2 <MTPD::GetObjectInfo(unsigned long)+0x99e>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    27ca:	cmp.w	r8, #0
    27ce:	bgt.n	280e <MTPD::GetObjectInfo(unsigned long)+0x9da>
    27d0:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    27d2:	subs	r6, r5, r0
    27d4:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    27d8:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    27da:	cmp	r6, r3
    27dc:	it	ge
    27de:	movge	r6, r3
          memcpy(dst,src,to_copy);
    27e0:	mov	r2, r6
          pos += to_copy;
    27e2:	add	r8, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    27e4:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    27e8:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    27ea:	add	r9, r6
          dst += to_copy;
    27ec:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    27ee:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    27f0:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    27f2:	bne.n	27ca <MTPD::GetObjectInfo(unsigned long)+0x996>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    27f4:	movs	r2, #60	; 0x3c
    27f6:	mov.w	r1, #512	; 0x200
    27fa:	mov	r0, sl
    27fc:	bl	a228 <usb_mtp_send>
    2800:	cmp	r0, #0
    2802:	ble.n	27f4 <MTPD::GetObjectInfo(unsigned long)+0x9c0>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2804:	cmp.w	r8, #0
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2808:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    280c:	ble.n	27d0 <MTPD::GetObjectInfo(unsigned long)+0x99c>
    280e:	movs	r3, #0
    2810:	ldrb	r2, [r7, #0]
    2812:	strb.w	r3, [sp, #20]
    2816:	ldr	r3, [r7, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2818:	cmp	r2, #0
    281a:	bne.w	1fda <MTPD::GetObjectInfo(unsigned long)+0x1a6>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    281e:	cmp	r3, #0
    2820:	beq.w	29da <MTPD::GetObjectInfo(unsigned long)+0xba6>
    2824:	ldr	r0, [r4, #0]
        write_length_ += len;
    2826:	adds	r3, #1
        
        const char * src=data;
    2828:	add.w	r9, sp, #20
        //
        int pos = 0; // into data
    282c:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2830:	add.w	sl, r7, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2834:	str	r3, [r7, #4]
    2836:	b.n	2840 <MTPD::GetObjectInfo(unsigned long)+0xa0c>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2838:	cmp.w	r8, #0
    283c:	bgt.n	287c <MTPD::GetObjectInfo(unsigned long)+0xa48>
    283e:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2840:	subs	r6, r5, r0
    2842:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    2846:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2848:	cmp	r6, r3
    284a:	it	ge
    284c:	movge	r6, r3
          memcpy(dst,src,to_copy);
    284e:	mov	r2, r6
          pos += to_copy;
    2850:	add	r8, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2852:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2856:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    2858:	add	r9, r6
          dst += to_copy;
    285a:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    285c:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    285e:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2860:	bne.n	2838 <MTPD::GetObjectInfo(unsigned long)+0xa04>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2862:	movs	r2, #60	; 0x3c
    2864:	mov.w	r1, #512	; 0x200
    2868:	mov	r0, sl
    286a:	bl	a228 <usb_mtp_send>
    286e:	cmp	r0, #0
    2870:	ble.n	2862 <MTPD::GetObjectInfo(unsigned long)+0xa2e>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2872:	cmp.w	r8, #0
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2876:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    287a:	ble.n	283e <MTPD::GetObjectInfo(unsigned long)+0xa0a>
    287c:	movs	r3, #0
    287e:	ldrb	r2, [r7, #0]
    2880:	strb.w	r3, [sp, #19]
    2884:	ldr	r3, [r7, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2886:	cmp	r2, #0
    2888:	bne.w	1fdc <MTPD::GetObjectInfo(unsigned long)+0x1a8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    288c:	cmp	r3, #0
    288e:	beq.w	29d0 <MTPD::GetObjectInfo(unsigned long)+0xb9c>
    2892:	ldr	r0, [r4, #0]
        write_length_ += len;
    2894:	adds	r3, #1
        
        const char * src=data;
    2896:	add.w	r9, sp, #19
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    289a:	add.w	sl, r7, #544	; 0x220
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
    289e:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    28a2:	str	r3, [r7, #4]
    28a4:	b.n	28b0 <MTPD::GetObjectInfo(unsigned long)+0xa7c>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    28a6:	cmp.w	r8, #0
    28aa:	bgt.w	1fe0 <MTPD::GetObjectInfo(unsigned long)+0x1ac>
    28ae:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    28b0:	subs	r6, r5, r0
    28b2:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    28b6:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    28b8:	cmp	r6, r3
    28ba:	it	ge
    28bc:	movge	r6, r3
          memcpy(dst,src,to_copy);
    28be:	mov	r2, r6
          pos += to_copy;
    28c0:	add	r8, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    28c2:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    28c6:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    28c8:	add	r9, r6
          dst += to_copy;
    28ca:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    28cc:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    28ce:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    28d0:	bne.n	28a6 <MTPD::GetObjectInfo(unsigned long)+0xa72>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    28d2:	movs	r2, #60	; 0x3c
    28d4:	mov.w	r1, #512	; 0x200
    28d8:	mov	r0, sl
    28da:	bl	a228 <usb_mtp_send>
    28de:	cmp	r0, #0
    28e0:	ble.n	28d2 <MTPD::GetObjectInfo(unsigned long)+0xa9e>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    28e2:	str.w	sl, [r4]
    28e6:	b.n	28a6 <MTPD::GetObjectInfo(unsigned long)+0xa72>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    28e8:	add.w	r2, r7, #544	; 0x220
    28ec:	mov	r0, r2
    28ee:	str	r2, [r4, #0]
    28f0:	b.n	25be <MTPD::GetObjectInfo(unsigned long)+0x78a>
    28f2:	add.w	r2, r7, #544	; 0x220
    28f6:	mov	r0, r2
    28f8:	str	r2, [r4, #0]
    28fa:	b.n	2552 <MTPD::GetObjectInfo(unsigned long)+0x71e>
    28fc:	add.w	r2, r7, #544	; 0x220
    2900:	mov	r0, r2
    2902:	str	r2, [r4, #0]
    2904:	b.n	24da <MTPD::GetObjectInfo(unsigned long)+0x6a6>
    2906:	add.w	r2, r7, #544	; 0x220
    290a:	mov	r0, r2
    290c:	str	r2, [r4, #0]
    290e:	b.n	246c <MTPD::GetObjectInfo(unsigned long)+0x638>
    2910:	add.w	r2, r7, #544	; 0x220
    2914:	mov	r0, r2
    2916:	str	r2, [r4, #0]
    2918:	b.n	23fe <MTPD::GetObjectInfo(unsigned long)+0x5ca>
    291a:	add.w	r2, r7, #544	; 0x220
    291e:	mov	r0, r2
    2920:	str	r2, [r4, #0]
    2922:	b.n	2390 <MTPD::GetObjectInfo(unsigned long)+0x55c>
    2924:	add.w	r2, r7, #544	; 0x220
    2928:	mov	r0, r2
    292a:	str	r2, [r4, #0]
    292c:	b.n	2322 <MTPD::GetObjectInfo(unsigned long)+0x4ee>
    292e:	cmp	r3, #0
    2930:	beq.n	29f8 <MTPD::GetObjectInfo(unsigned long)+0xbc4>
    2932:	ldr	r4, [pc, #220]	; (2a10 <MTPD::GetObjectInfo(unsigned long)+0xbdc>)
    2934:	ldr	r0, [r4, #0]
        write_length_ += len;
    2936:	adds	r3, #2
        
        const char * src=data;
    2938:	add.w	r9, sp, #32
    293c:	add.w	r5, r7, #1056	; 0x420
        //
        int pos = 0; // into data
    2940:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2944:	str	r3, [r7, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2946:	add.w	sl, r7, #544	; 0x220
    294a:	b.n	2956 <MTPD::GetObjectInfo(unsigned long)+0xb22>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    294c:	cmp.w	r8, #1
    2950:	bgt.w	27a0 <MTPD::GetObjectInfo(unsigned long)+0x96c>
    2954:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2956:	subs	r6, r5, r0
    2958:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    295c:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    295e:	cmp	r6, r3
    2960:	it	ge
    2962:	movge	r6, r3
          memcpy(dst,src,to_copy);
    2964:	mov	r2, r6
          pos += to_copy;
    2966:	add	r8, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2968:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    296c:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    296e:	add	r9, r6
          dst += to_copy;
    2970:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2972:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2974:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2976:	bne.n	294c <MTPD::GetObjectInfo(unsigned long)+0xb18>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2978:	movs	r2, #60	; 0x3c
    297a:	mov.w	r1, #512	; 0x200
    297e:	mov	r0, sl
    2980:	bl	a228 <usb_mtp_send>
    2984:	cmp	r0, #0
    2986:	ble.n	2978 <MTPD::GetObjectInfo(unsigned long)+0xb44>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2988:	str.w	sl, [r4]
    298c:	b.n	294c <MTPD::GetObjectInfo(unsigned long)+0xb18>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    298e:	add.w	r2, r7, #544	; 0x220
    2992:	mov	r0, r2
    2994:	str	r2, [r4, #0]
    2996:	b.w	20e8 <MTPD::GetObjectInfo(unsigned long)+0x2b4>
    299a:	add.w	r2, r7, #544	; 0x220
    299e:	mov	r0, r2
    29a0:	str	r2, [r4, #0]
    29a2:	b.w	2078 <MTPD::GetObjectInfo(unsigned long)+0x244>
    29a6:	add.w	r2, r7, #544	; 0x220
    29aa:	mov	r0, r2
    29ac:	str	r2, [r4, #0]
    29ae:	b.n	22b4 <MTPD::GetObjectInfo(unsigned long)+0x480>
    29b0:	add.w	r2, r7, #544	; 0x220
    29b4:	mov	r0, r2
    29b6:	str	r2, [r4, #0]
    29b8:	b.n	2246 <MTPD::GetObjectInfo(unsigned long)+0x412>
    29ba:	add.w	r2, r7, #544	; 0x220
    29be:	mov	r0, r2
    29c0:	str	r2, [r4, #0]
    29c2:	b.n	21d8 <MTPD::GetObjectInfo(unsigned long)+0x3a4>
    29c4:	add.w	r2, r7, #544	; 0x220
    29c8:	mov	r0, r2
    29ca:	str	r2, [r4, #0]
    29cc:	b.w	2168 <MTPD::GetObjectInfo(unsigned long)+0x334>
    29d0:	add.w	r2, r7, #544	; 0x220
    29d4:	mov	r0, r2
    29d6:	str	r2, [r4, #0]
    29d8:	b.n	2894 <MTPD::GetObjectInfo(unsigned long)+0xa60>
    29da:	add.w	r2, r7, #544	; 0x220
    29de:	mov	r0, r2
    29e0:	str	r2, [r4, #0]
    29e2:	b.n	2826 <MTPD::GetObjectInfo(unsigned long)+0x9f2>
    29e4:	add.w	r2, r7, #544	; 0x220
    29e8:	mov	r0, r2
    29ea:	str	r2, [r4, #0]
    29ec:	b.n	27b8 <MTPD::GetObjectInfo(unsigned long)+0x984>
    29ee:	add.w	r3, r7, #544	; 0x220
    29f2:	mov	r0, r3
    29f4:	str	r3, [r4, #0]
    29f6:	b.n	274a <MTPD::GetObjectInfo(unsigned long)+0x916>
    29f8:	add.w	r2, r7, #544	; 0x220
    29fc:	ldr	r4, [pc, #16]	; (2a10 <MTPD::GetObjectInfo(unsigned long)+0xbdc>)
    29fe:	mov	r0, r2
    2a00:	str	r2, [r4, #0]
    2a02:	b.n	2936 <MTPD::GetObjectInfo(unsigned long)+0xb02>
    2a04:	add.w	r3, r7, #544	; 0x220
    2a08:	mov	r0, r3
    2a0a:	str	r3, [r4, #0]
    2a0c:	b.n	26ae <MTPD::GetObjectInfo(unsigned long)+0x87a>
    2a0e:	nop
    2a10:	.word	0x200014fc

00002a14 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>:
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    }

    void getObjectPropDesc(uint32_t p1, uint32_t p2)
    {
      switch(p1)
    2a14:	mvn.w	r3, #56320	; 0xdc00
    2a18:	add	r3, r1
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    }

    void getObjectPropDesc(uint32_t p1, uint32_t p2)
    2a1a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2a1e:	mov	r6, r0
    2a20:	sub	sp, #144	; 0x90
    {
      switch(p1)
    2a22:	cmp	r3, #67	; 0x43
    2a24:	bhi.n	2ad2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbe>
    2a26:	tbh	[pc, r3, lsl #1]
    2a2a:	.short	0x0057
    2a2c:	.word	0x00730065
    2a30:	.word	0x005400ac
    2a34:	.word	0x00ba0054
    2a38:	.word	0x012d00f3
    2a3c:	.word	0x01670054
    2a40:	.word	0x00540054
    2a44:	.word	0x00540054
    2a48:	.word	0x00540054
    2a4c:	.word	0x00540054
    2a50:	.word	0x00540054
    2a54:	.word	0x00540054
    2a58:	.word	0x00540054
    2a5c:	.word	0x00540054
    2a60:	.word	0x00540054
    2a64:	.word	0x00540054
    2a68:	.word	0x00540054
    2a6c:	.word	0x00540054
    2a70:	.word	0x00540054
    2a74:	.word	0x00540054
    2a78:	.word	0x00540054
    2a7c:	.word	0x00540054
    2a80:	.word	0x00540054
    2a84:	.word	0x00540054
    2a88:	.word	0x00540054
    2a8c:	.word	0x00540054
    2a90:	.word	0x00540054
    2a94:	.word	0x00540054
    2a98:	.word	0x00540054
    2a9c:	.word	0x00540054
    2aa0:	.word	0x00540054
    2aa4:	.word	0x00540054
    2aa8:	.word	0x01a10054
    2aac:	.word	0x00540054
    2ab0:	.short	0x0044
    2ab2:	movw	r2, #56388	; 0xdc44
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2ab6:	ldrb	r3, [r0, #0]
    2ab8:	strh.w	r2, [sp, #70]	; 0x46
    2abc:	cmp	r3, #0
    2abe:	beq.w	3630 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc1c>
      {
        write_length_ += len;
    2ac2:	ldr	r3, [r6, #4]
    2ac4:	adds	r3, #2
    2ac6:	adds	r3, #2
    2ac8:	adds	r3, #1
    2aca:	adds	r3, #1
    2acc:	adds	r3, #4
    2ace:	adds	r3, #1
    2ad0:	str	r3, [r6, #4]
          write8(0);
          break;
        default:
          break;
      }
    }
    2ad2:	add	sp, #144	; 0x90
    2ad4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2ad8:	movw	r2, #56321	; 0xdc01
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2adc:	ldrb	r3, [r0, #0]
    2ade:	strh.w	r2, [sp, #30]
    2ae2:	cmp	r3, #0
    2ae4:	beq.w	34f2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xade>
      {
        write_length_ += len;
    2ae8:	ldr	r3, [r6, #4]
    2aea:	adds	r3, #2
    2aec:	adds	r3, #2
    2aee:	adds	r3, #1
    2af0:	adds	r3, #4
    2af2:	b.n	2acc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb8>
    2af4:	movw	r2, #56322	; 0xdc02
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2af8:	ldrb	r3, [r0, #0]
    2afa:	strh.w	r2, [sp, #36]	; 0x24
    2afe:	cmp	r3, #0
    2b00:	beq.w	3282 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x86e>
      {
        write_length_ += len;
    2b04:	ldr	r3, [r6, #4]
    2b06:	adds	r3, #2
    2b08:	adds	r3, #2
    2b0a:	adds	r3, #1
    2b0c:	adds	r3, #2
    2b0e:	b.n	2acc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb8>
    2b10:	movw	r2, #56323	; 0xdc03
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2b14:	ldrb	r3, [r0, #0]
    2b16:	strh.w	r2, [sp, #42]	; 0x2a
    2b1a:	cmp	r3, #0
    2b1c:	bne.n	2b04 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf0>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2b1e:	ldr	r3, [r0, #4]
    2b20:	cmp	r3, #0
    2b22:	beq.w	4550 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b3c>
    2b26:	ldr	r4, [pc, #760]	; (2e20 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x40c>)
    2b28:	ldr	r0, [r4, #0]
        write_length_ += len;
    2b2a:	adds	r3, #2
    2b2c:	add.w	r5, r6, #1056	; 0x420
        
        const char * src=data;
    2b30:	add.w	r9, sp, #42	; 0x2a
        //
        int pos = 0; // into data
    2b34:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2b38:	str	r3, [r6, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2b3a:	add.w	sl, r6, #544	; 0x220
    2b3e:	b.n	2b4a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x136>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2b40:	cmp.w	r8, #1
    2b44:	bgt.w	3b86 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1172>
    2b48:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2b4a:	subs	r7, r5, r0
    2b4c:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    2b50:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2b52:	cmp	r7, r3
    2b54:	it	ge
    2b56:	movge	r7, r3
          memcpy(dst,src,to_copy);
    2b58:	mov	r2, r7
          pos += to_copy;
    2b5a:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2b5c:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2b60:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    2b62:	add	r9, r7
          dst += to_copy;
    2b64:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2b66:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2b68:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2b6a:	bne.n	2b40 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x12c>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2b6c:	movs	r2, #60	; 0x3c
    2b6e:	mov.w	r1, #512	; 0x200
    2b72:	mov	r0, sl
    2b74:	bl	a228 <usb_mtp_send>
    2b78:	cmp	r0, #0
    2b7a:	ble.n	2b6c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x158>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2b7c:	str.w	sl, [r4]
    2b80:	b.n	2b40 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x12c>
    2b82:	movw	r2, #56324	; 0xdc04
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2b86:	ldrb	r3, [r0, #0]
    2b88:	strh.w	r2, [sp, #46]	; 0x2e
    2b8c:	cmp	r3, #0
    2b8e:	beq.w	3bf2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x11de>
      {
        write_length_ += len;
    2b92:	ldr	r3, [r0, #4]
    2b94:	adds	r3, #2
    2b96:	adds	r3, #2
    2b98:	adds	r3, #1
    2b9a:	adds	r3, #8
    2b9c:	b.n	2acc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb8>
    2b9e:	movw	r2, #56327	; 0xdc07
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2ba2:	ldrb	r3, [r0, #0]
    2ba4:	strh.w	r2, [sp, #50]	; 0x32
    2ba8:	cmp	r3, #0
    2baa:	bne.n	2ac2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xae>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2bac:	ldr	r3, [r0, #4]
    2bae:	cmp	r3, #0
    2bb0:	beq.w	465e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c4a>
    2bb4:	ldr	r4, [pc, #616]	; (2e20 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x40c>)
    2bb6:	ldr	r0, [r4, #0]
        write_length_ += len;
    2bb8:	adds	r3, #2
    2bba:	add.w	r5, r6, #1056	; 0x420
        
        const char * src=data;
    2bbe:	add.w	r9, sp, #50	; 0x32
        //
        int pos = 0; // into data
    2bc2:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2bc6:	str	r3, [r6, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2bc8:	add.w	sl, r6, #544	; 0x220
    2bcc:	b.n	2bd8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c4>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2bce:	cmp.w	r8, #1
    2bd2:	bgt.w	4010 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x15fc>
    2bd6:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2bd8:	subs	r7, r5, r0
    2bda:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    2bde:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2be0:	cmp	r7, r3
    2be2:	it	ge
    2be4:	movge	r7, r3
          memcpy(dst,src,to_copy);
    2be6:	mov	r2, r7
          pos += to_copy;
    2be8:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2bea:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2bee:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    2bf0:	add	r9, r7
          dst += to_copy;
    2bf2:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2bf4:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2bf6:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2bf8:	bne.n	2bce <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1ba>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2bfa:	movs	r2, #60	; 0x3c
    2bfc:	mov.w	r1, #512	; 0x200
    2c00:	mov	r0, sl
    2c02:	bl	a228 <usb_mtp_send>
    2c06:	cmp	r0, #0
    2c08:	ble.n	2bfa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1e6>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2c0a:	str.w	sl, [r4]
    2c0e:	b.n	2bce <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1ba>
    2c10:	movw	r2, #56328	; 0xdc08
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2c14:	ldrb	r3, [r0, #0]
    2c16:	strh.w	r2, [sp, #54]	; 0x36
    2c1a:	cmp	r3, #0
    2c1c:	bne.w	2ac2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xae>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2c20:	ldr	r3, [r0, #4]
    2c22:	cmp	r3, #0
    2c24:	beq.w	456a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b56>
    2c28:	ldr	r4, [pc, #500]	; (2e20 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x40c>)
    2c2a:	ldr	r0, [r4, #0]
        write_length_ += len;
    2c2c:	adds	r3, #2
    2c2e:	add.w	r5, r6, #1056	; 0x420
        
        const char * src=data;
    2c32:	add.w	r9, sp, #54	; 0x36
        //
        int pos = 0; // into data
    2c36:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2c3a:	str	r3, [r6, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2c3c:	add.w	sl, r6, #544	; 0x220
    2c40:	b.n	2c4c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x238>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2c42:	cmp.w	r8, #1
    2c46:	bgt.w	2d88 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x374>
    2c4a:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2c4c:	subs	r7, r5, r0
    2c4e:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    2c52:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2c54:	cmp	r7, r3
    2c56:	it	ge
    2c58:	movge	r7, r3
          memcpy(dst,src,to_copy);
    2c5a:	mov	r2, r7
          pos += to_copy;
    2c5c:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2c5e:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2c62:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    2c64:	add	r9, r7
          dst += to_copy;
    2c66:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2c68:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2c6a:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2c6c:	bne.n	2c42 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x22e>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2c6e:	movs	r2, #60	; 0x3c
    2c70:	mov.w	r1, #512	; 0x200
    2c74:	mov	r0, sl
    2c76:	bl	a228 <usb_mtp_send>
    2c7a:	cmp	r0, #0
    2c7c:	ble.n	2c6e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x25a>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2c7e:	str.w	sl, [r4]
    2c82:	b.n	2c42 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x22e>
    2c84:	movw	r2, #56329	; 0xdc09
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2c88:	ldrb	r3, [r0, #0]
    2c8a:	strh.w	r2, [sp, #58]	; 0x3a
    2c8e:	cmp	r3, #0
    2c90:	bne.w	2ac2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xae>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2c94:	ldr	r3, [r0, #4]
    2c96:	cmp	r3, #0
    2c98:	beq.w	4630 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c1c>
    2c9c:	ldr	r4, [pc, #384]	; (2e20 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x40c>)
    2c9e:	ldr	r0, [r4, #0]
        write_length_ += len;
    2ca0:	adds	r3, #2
    2ca2:	add.w	r5, r6, #1056	; 0x420
        
        const char * src=data;
    2ca6:	add.w	r9, sp, #58	; 0x3a
        //
        int pos = 0; // into data
    2caa:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2cae:	str	r3, [r6, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2cb0:	add.w	sl, r6, #544	; 0x220
    2cb4:	b.n	2cc0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x2ac>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2cb6:	cmp.w	r8, #1
    2cba:	bgt.w	2e66 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x452>
    2cbe:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2cc0:	subs	r7, r5, r0
    2cc2:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    2cc6:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2cc8:	cmp	r7, r3
    2cca:	it	ge
    2ccc:	movge	r7, r3
          memcpy(dst,src,to_copy);
    2cce:	mov	r2, r7
          pos += to_copy;
    2cd0:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2cd2:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2cd6:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    2cd8:	add	r9, r7
          dst += to_copy;
    2cda:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2cdc:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2cde:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2ce0:	bne.n	2cb6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x2a2>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2ce2:	movs	r2, #60	; 0x3c
    2ce4:	mov.w	r1, #512	; 0x200
    2ce8:	mov	r0, sl
    2cea:	bl	a228 <usb_mtp_send>
    2cee:	cmp	r0, #0
    2cf0:	ble.n	2ce2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x2ce>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2cf2:	str.w	sl, [r4]
    2cf6:	b.n	2cb6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x2a2>
    2cf8:	movw	r2, #56331	; 0xdc0b
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2cfc:	ldrb	r3, [r0, #0]
    2cfe:	strh.w	r2, [sp, #62]	; 0x3e
    2d02:	cmp	r3, #0
    2d04:	bne.w	2ae8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xd4>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2d08:	ldr	r3, [r0, #4]
    2d0a:	cmp	r3, #0
    2d0c:	beq.w	4616 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c02>
    2d10:	ldr	r4, [pc, #268]	; (2e20 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x40c>)
    2d12:	ldr	r0, [r4, #0]
        write_length_ += len;
    2d14:	adds	r3, #2
    2d16:	add.w	r5, r6, #1056	; 0x420
        
        const char * src=data;
    2d1a:	add.w	r9, sp, #62	; 0x3e
        //
        int pos = 0; // into data
    2d1e:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2d22:	str	r3, [r6, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2d24:	add.w	sl, r6, #544	; 0x220
    2d28:	b.n	2d34 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x320>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2d2a:	cmp.w	r8, #1
    2d2e:	bgt.w	3076 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x662>
    2d32:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2d34:	subs	r7, r5, r0
    2d36:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    2d3a:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2d3c:	cmp	r7, r3
    2d3e:	it	ge
    2d40:	movge	r7, r3
          memcpy(dst,src,to_copy);
    2d42:	mov	r2, r7
          pos += to_copy;
    2d44:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2d46:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2d4a:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    2d4c:	add	r9, r7
          dst += to_copy;
    2d4e:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2d50:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2d52:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2d54:	bne.n	2d2a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x316>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2d56:	movs	r2, #60	; 0x3c
    2d58:	mov.w	r1, #512	; 0x200
    2d5c:	mov	r0, sl
    2d5e:	bl	a228 <usb_mtp_send>
    2d62:	cmp	r0, #0
    2d64:	ble.n	2d56 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x342>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2d66:	str.w	sl, [r4]
    2d6a:	b.n	2d2a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x316>
    2d6c:	movw	r2, #56385	; 0xdc41
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2d70:	ldrb	r3, [r0, #0]
    2d72:	strh.w	r2, [sp, #66]	; 0x42
    2d76:	cmp	r3, #0
    2d78:	beq.w	38a2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe8e>
      {
        write_length_ += len;
    2d7c:	ldr	r3, [r0, #4]
    2d7e:	adds	r3, #2
    2d80:	adds	r3, #2
    2d82:	adds	r3, #1
    2d84:	adds	r3, #8
    2d86:	b.n	2b9a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x186>
    2d88:	movw	r1, #65535	; 0xffff
    2d8c:	ldrb	r2, [r6, #0]
    2d8e:	ldr	r3, [r6, #4]
    2d90:	strh.w	r1, [sp, #52]	; 0x34
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2d94:	cmp	r2, #0
    2d96:	bne.w	2ac6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb2>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2d9a:	cmp	r3, #0
    2d9c:	beq.w	4648 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c34>
    2da0:	ldr	r0, [r4, #0]
        write_length_ += len;
    2da2:	adds	r3, #2
        
        const char * src=data;
    2da4:	add.w	r9, sp, #52	; 0x34
        //
        int pos = 0; // into data
    2da8:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2dac:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2db0:	str	r3, [r6, #4]
    2db2:	b.n	2dbc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3a8>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2db4:	cmp.w	r8, #1
    2db8:	bgt.n	2df4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3e0>
    2dba:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2dbc:	subs	r7, r5, r0
    2dbe:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    2dc2:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2dc4:	cmp	r7, r3
    2dc6:	it	ge
    2dc8:	movge	r7, r3
          memcpy(dst,src,to_copy);
    2dca:	mov	r2, r7
          pos += to_copy;
    2dcc:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2dce:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2dd2:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    2dd4:	add	r9, r7
          dst += to_copy;
    2dd6:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2dd8:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2dda:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2ddc:	bne.n	2db4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3a0>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2dde:	movs	r2, #60	; 0x3c
    2de0:	mov.w	r1, #512	; 0x200
    2de4:	mov	r0, sl
    2de6:	bl	a228 <usb_mtp_send>
    2dea:	cmp	r0, #0
    2dec:	ble.n	2dde <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3ca>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2dee:	str.w	sl, [r4]
    2df2:	b.n	2db4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3a0>
    2df4:	movs	r1, #0
    2df6:	ldrb	r2, [r6, #0]
    2df8:	ldr	r3, [r6, #4]
    2dfa:	strb.w	r1, [sp, #17]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2dfe:	cmp	r2, #0
    2e00:	bne.w	2ac8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb4>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2e04:	cmp	r3, #0
    2e06:	beq.w	4624 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c10>
    2e0a:	ldr	r0, [r4, #0]
        write_length_ += len;
    2e0c:	adds	r3, #1
        
        const char * src=data;
    2e0e:	add.w	r9, sp, #17
        //
        int pos = 0; // into data
    2e12:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2e16:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2e1a:	str	r3, [r6, #4]
    2e1c:	b.n	2e2e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x41a>
    2e1e:	nop
    2e20:	.word	0x200014fc
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2e24:	cmp.w	r8, #0
    2e28:	bgt.w	4220 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x180c>
    2e2c:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2e2e:	subs	r7, r5, r0
    2e30:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    2e34:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2e36:	cmp	r7, r3
    2e38:	it	ge
    2e3a:	movge	r7, r3
          memcpy(dst,src,to_copy);
    2e3c:	mov	r2, r7
          pos += to_copy;
    2e3e:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2e40:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2e44:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    2e46:	add	r9, r7
          dst += to_copy;
    2e48:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2e4a:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2e4c:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2e4e:	bne.n	2e24 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x410>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2e50:	movs	r2, #60	; 0x3c
    2e52:	mov.w	r1, #512	; 0x200
    2e56:	mov	r0, sl
    2e58:	bl	a228 <usb_mtp_send>
    2e5c:	cmp	r0, #0
    2e5e:	ble.n	2e50 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x43c>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2e60:	str.w	sl, [r4]
    2e64:	b.n	2e24 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x410>
    2e66:	movw	r1, #65535	; 0xffff
    2e6a:	ldrb	r2, [r6, #0]
    2e6c:	ldr	r3, [r6, #4]
    2e6e:	strh.w	r1, [sp, #56]	; 0x38
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2e72:	cmp	r2, #0
    2e74:	bne.w	2ac6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb2>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2e78:	cmp	r3, #0
    2e7a:	beq.w	4752 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1d3e>
    2e7e:	ldr	r0, [r4, #0]
        write_length_ += len;
    2e80:	adds	r3, #2
        
        const char * src=data;
    2e82:	add.w	r9, sp, #56	; 0x38
        //
        int pos = 0; // into data
    2e86:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2e8a:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2e8e:	str	r3, [r6, #4]
    2e90:	b.n	2e9a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x486>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2e92:	cmp.w	r8, #1
    2e96:	bgt.n	2ed2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x4be>
    2e98:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2e9a:	subs	r7, r5, r0
    2e9c:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    2ea0:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2ea2:	cmp	r7, r3
    2ea4:	it	ge
    2ea6:	movge	r7, r3
          memcpy(dst,src,to_copy);
    2ea8:	mov	r2, r7
          pos += to_copy;
    2eaa:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2eac:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2eb0:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    2eb2:	add	r9, r7
          dst += to_copy;
    2eb4:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2eb6:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2eb8:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2eba:	bne.n	2e92 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x47e>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2ebc:	movs	r2, #60	; 0x3c
    2ebe:	mov.w	r1, #512	; 0x200
    2ec2:	mov	r0, sl
    2ec4:	bl	a228 <usb_mtp_send>
    2ec8:	cmp	r0, #0
    2eca:	ble.n	2ebc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x4a8>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2ecc:	str.w	sl, [r4]
    2ed0:	b.n	2e92 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x47e>
    2ed2:	movs	r1, #0
    2ed4:	ldrb	r2, [r6, #0]
    2ed6:	ldr	r3, [r6, #4]
    2ed8:	strb.w	r1, [sp, #20]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2edc:	cmp	r2, #0
    2ede:	bne.w	2ac8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb4>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2ee2:	cmp	r3, #0
    2ee4:	beq.w	4746 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1d32>
    2ee8:	ldr	r0, [r4, #0]
        write_length_ += len;
    2eea:	adds	r3, #1
        
        const char * src=data;
    2eec:	add.w	r9, sp, #20
        //
        int pos = 0; // into data
    2ef0:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2ef4:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2ef8:	str	r3, [r6, #4]
    2efa:	b.n	2f04 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x4f0>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2efc:	cmp.w	r8, #0
    2f00:	bgt.n	2f3c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x528>
    2f02:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2f04:	subs	r7, r5, r0
    2f06:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    2f0a:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2f0c:	cmp	r7, r3
    2f0e:	it	ge
    2f10:	movge	r7, r3
          memcpy(dst,src,to_copy);
    2f12:	mov	r2, r7
          pos += to_copy;
    2f14:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2f16:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2f1a:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    2f1c:	add	r9, r7
          dst += to_copy;
    2f1e:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2f20:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2f22:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2f24:	bne.n	2efc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x4e8>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2f26:	movs	r2, #60	; 0x3c
    2f28:	mov.w	r1, #512	; 0x200
    2f2c:	mov	r0, sl
    2f2e:	bl	a228 <usb_mtp_send>
    2f32:	cmp	r0, #0
    2f34:	ble.n	2f26 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x512>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2f36:	str.w	sl, [r4]
    2f3a:	b.n	2efc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x4e8>
    2f3c:	movs	r1, #0
    2f3e:	ldrb	r2, [r6, #0]
    2f40:	ldr	r3, [r6, #4]
    2f42:	strb.w	r1, [sp, #19]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2f46:	cmp	r2, #0
    2f48:	bne.w	2aca <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb6>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2f4c:	cmp	r3, #0
    2f4e:	beq.w	473a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1d26>
    2f52:	ldr	r0, [r4, #0]
        write_length_ += len;
    2f54:	adds	r3, #1
        
        const char * src=data;
    2f56:	add.w	r9, sp, #19
        //
        int pos = 0; // into data
    2f5a:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2f5e:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2f62:	str	r3, [r6, #4]
    2f64:	b.n	2f6e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x55a>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2f66:	cmp.w	r8, #0
    2f6a:	bgt.n	2fa6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x592>
    2f6c:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2f6e:	subs	r7, r5, r0
    2f70:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    2f74:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2f76:	cmp	r7, r3
    2f78:	it	ge
    2f7a:	movge	r7, r3
          memcpy(dst,src,to_copy);
    2f7c:	mov	r2, r7
          pos += to_copy;
    2f7e:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2f80:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2f84:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    2f86:	add	r9, r7
          dst += to_copy;
    2f88:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2f8a:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2f8c:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2f8e:	bne.n	2f66 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x552>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2f90:	movs	r2, #60	; 0x3c
    2f92:	mov.w	r1, #512	; 0x200
    2f96:	mov	r0, sl
    2f98:	bl	a228 <usb_mtp_send>
    2f9c:	cmp	r0, #0
    2f9e:	ble.n	2f90 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x57c>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    2fa0:	str.w	sl, [r4]
    2fa4:	b.n	2f66 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x552>
    2fa6:	movs	r1, #0
    2fa8:	ldrb	r2, [r6, #0]
    2faa:	ldr	r3, [r6, #4]
    2fac:	str	r1, [sp, #100]	; 0x64
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    2fae:	cmp	r2, #0
    2fb0:	bne.w	2acc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    2fb4:	cmp	r3, #0
    2fb6:	beq.w	472e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1d1a>
    2fba:	ldr	r0, [r4, #0]
        write_length_ += len;
    2fbc:	adds	r3, #4
        
        const char * src=data;
    2fbe:	add.w	r9, sp, #100	; 0x64
        //
        int pos = 0; // into data
    2fc2:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    2fc6:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    2fca:	str	r3, [r6, #4]
    2fcc:	b.n	2fd6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x5c2>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    2fce:	cmp.w	r8, #3
    2fd2:	bgt.n	300e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x5fa>
    2fd4:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2fd6:	subs	r7, r5, r0
    2fd8:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    2fdc:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    2fde:	cmp	r7, r3
    2fe0:	it	ge
    2fe2:	movge	r7, r3
          memcpy(dst,src,to_copy);
    2fe4:	mov	r2, r7
          pos += to_copy;
    2fe6:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    2fe8:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2fec:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    2fee:	add	r9, r7
          dst += to_copy;
    2ff0:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2ff2:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    2ff4:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    2ff6:	bne.n	2fce <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x5ba>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    2ff8:	movs	r2, #60	; 0x3c
    2ffa:	mov.w	r1, #512	; 0x200
    2ffe:	mov	r0, sl
    3000:	bl	a228 <usb_mtp_send>
    3004:	cmp	r0, #0
    3006:	ble.n	2ff8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x5e4>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3008:	str.w	sl, [r4]
    300c:	b.n	2fce <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x5ba>
    300e:	movs	r1, #0
    3010:	ldrb	r2, [r6, #0]
    3012:	ldr	r3, [r6, #4]
    3014:	strb.w	r1, [sp, #18]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3018:	cmp	r2, #0
    301a:	bne.w	2ace <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xba>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    301e:	cmp	r3, #0
    3020:	beq.w	460a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1bf6>
    3024:	ldr	r0, [r4, #0]
        write_length_ += len;
    3026:	adds	r3, #1
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3028:	add.w	r9, r6, #544	; 0x220
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    302c:	add.w	r8, sp, #18
        //
        int pos = 0; // into data
    3030:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3032:	str	r3, [r6, #4]
    3034:	b.n	303e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x62a>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3036:	cmp	r7, #0
    3038:	bgt.w	2ad2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbe>
    303c:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    303e:	subs	r6, r5, r0
    3040:	rsb	r3, r7, #1
          memcpy(dst,src,to_copy);
    3044:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3046:	cmp	r6, r3
    3048:	it	ge
    304a:	movge	r6, r3
          memcpy(dst,src,to_copy);
    304c:	mov	r2, r6
          pos += to_copy;
    304e:	add	r7, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3050:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3054:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3056:	add	r8, r6
          dst += to_copy;
    3058:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    305a:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    305c:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    305e:	bne.n	3036 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x622>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3060:	movs	r2, #60	; 0x3c
    3062:	mov.w	r1, #512	; 0x200
    3066:	mov	r0, r9
    3068:	bl	a228 <usb_mtp_send>
    306c:	cmp	r0, #0
    306e:	ble.n	3060 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x64c>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3070:	str.w	r9, [r4]
    3074:	b.n	3036 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x622>
    3076:	movs	r1, #6
    3078:	ldrb	r2, [r6, #0]
    307a:	ldr	r3, [r6, #4]
    307c:	strh.w	r1, [sp, #60]	; 0x3c
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3080:	cmp	r2, #0
    3082:	bne.w	2aec <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xd8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3086:	cmp	r3, #0
    3088:	beq.w	4722 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1d0e>
    308c:	ldr	r0, [r4, #0]
        write_length_ += len;
    308e:	adds	r3, #2
        
        const char * src=data;
    3090:	add.w	r9, sp, #60	; 0x3c
        //
        int pos = 0; // into data
    3094:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3098:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    309c:	str	r3, [r6, #4]
    309e:	b.n	30a8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x694>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    30a0:	cmp.w	r8, #1
    30a4:	bgt.n	30e0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6cc>
    30a6:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    30a8:	subs	r7, r5, r0
    30aa:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    30ae:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    30b0:	cmp	r7, r3
    30b2:	it	ge
    30b4:	movge	r7, r3
          memcpy(dst,src,to_copy);
    30b6:	mov	r2, r7
          pos += to_copy;
    30b8:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    30ba:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    30be:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    30c0:	add	r9, r7
          dst += to_copy;
    30c2:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    30c4:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    30c6:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    30c8:	bne.n	30a0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x68c>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    30ca:	movs	r2, #60	; 0x3c
    30cc:	mov.w	r1, #512	; 0x200
    30d0:	mov	r0, sl
    30d2:	bl	a228 <usb_mtp_send>
    30d6:	cmp	r0, #0
    30d8:	ble.n	30ca <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6b6>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    30da:	str.w	sl, [r4]
    30de:	b.n	30a0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x68c>
    30e0:	movs	r1, #0
    30e2:	ldrb	r2, [r6, #0]
    30e4:	ldr	r3, [r6, #4]
    30e6:	strb.w	r1, [sp, #22]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    30ea:	cmp	r2, #0
    30ec:	bne.w	2aee <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xda>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    30f0:	cmp	r3, #0
    30f2:	beq.w	4716 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1d02>
    30f6:	ldr	r0, [r4, #0]
        write_length_ += len;
    30f8:	adds	r3, #1
        
        const char * src=data;
    30fa:	add.w	r9, sp, #22
        //
        int pos = 0; // into data
    30fe:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3102:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3106:	str	r3, [r6, #4]
    3108:	b.n	3112 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6fe>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    310a:	cmp.w	r8, #0
    310e:	bgt.n	314a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x736>
    3110:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3112:	subs	r7, r5, r0
    3114:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    3118:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    311a:	cmp	r7, r3
    311c:	it	ge
    311e:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3120:	mov	r2, r7
          pos += to_copy;
    3122:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3124:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3128:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    312a:	add	r9, r7
          dst += to_copy;
    312c:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    312e:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3130:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3132:	bne.n	310a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6f6>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3134:	movs	r2, #60	; 0x3c
    3136:	mov.w	r1, #512	; 0x200
    313a:	mov	r0, sl
    313c:	bl	a228 <usb_mtp_send>
    3140:	cmp	r0, #0
    3142:	ble.n	3134 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x720>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3144:	str.w	sl, [r4]
    3148:	b.n	310a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6f6>
    314a:	movs	r1, #0
    314c:	ldrb	r2, [r6, #0]
    314e:	ldr	r3, [r6, #4]
    3150:	str	r1, [sp, #108]	; 0x6c
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3152:	cmp	r2, #0
    3154:	bne.w	2af0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xdc>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3158:	cmp	r3, #0
    315a:	beq.w	470a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1cf6>
    315e:	ldr	r0, [r4, #0]
        write_length_ += len;
    3160:	adds	r3, #4
        
        const char * src=data;
    3162:	add.w	r9, sp, #108	; 0x6c
        //
        int pos = 0; // into data
    3166:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    316a:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    316e:	str	r3, [r6, #4]
    3170:	b.n	317a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x766>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3172:	cmp.w	r8, #3
    3176:	bgt.n	31b2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x79e>
    3178:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    317a:	subs	r7, r5, r0
    317c:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    3180:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3182:	cmp	r7, r3
    3184:	it	ge
    3186:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3188:	mov	r2, r7
          pos += to_copy;
    318a:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    318c:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3190:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3192:	add	r9, r7
          dst += to_copy;
    3194:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3196:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3198:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    319a:	bne.n	3172 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x75e>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    319c:	movs	r2, #60	; 0x3c
    319e:	mov.w	r1, #512	; 0x200
    31a2:	mov	r0, sl
    31a4:	bl	a228 <usb_mtp_send>
    31a8:	cmp	r0, #0
    31aa:	ble.n	319c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x788>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    31ac:	str.w	sl, [r4]
    31b0:	b.n	3172 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x75e>
    31b2:	movs	r1, #0
    31b4:	ldrb	r2, [r6, #0]
    31b6:	ldr	r3, [r6, #4]
    31b8:	str	r1, [sp, #104]	; 0x68
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    31ba:	cmp	r2, #0
    31bc:	bne.w	2acc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    31c0:	cmp	r3, #0
    31c2:	beq.w	46fe <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1cea>
    31c6:	ldr	r0, [r4, #0]
        write_length_ += len;
    31c8:	adds	r3, #4
        
        const char * src=data;
    31ca:	add.w	r9, sp, #104	; 0x68
        //
        int pos = 0; // into data
    31ce:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    31d2:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    31d6:	str	r3, [r6, #4]
    31d8:	b.n	31e2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x7ce>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    31da:	cmp.w	r8, #3
    31de:	bgt.n	321a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x806>
    31e0:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    31e2:	subs	r7, r5, r0
    31e4:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    31e8:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    31ea:	cmp	r7, r3
    31ec:	it	ge
    31ee:	movge	r7, r3
          memcpy(dst,src,to_copy);
    31f0:	mov	r2, r7
          pos += to_copy;
    31f2:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    31f4:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    31f8:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    31fa:	add	r9, r7
          dst += to_copy;
    31fc:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    31fe:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3200:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3202:	bne.n	31da <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x7c6>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3204:	movs	r2, #60	; 0x3c
    3206:	mov.w	r1, #512	; 0x200
    320a:	mov	r0, sl
    320c:	bl	a228 <usb_mtp_send>
    3210:	cmp	r0, #0
    3212:	ble.n	3204 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x7f0>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3214:	str.w	sl, [r4]
    3218:	b.n	31da <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x7c6>
    321a:	movs	r1, #0
    321c:	ldrb	r2, [r6, #0]
    321e:	ldr	r3, [r6, #4]
    3220:	strb.w	r1, [sp, #21]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3224:	cmp	r2, #0
    3226:	bne.w	2ace <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xba>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    322a:	cmp	r3, #0
    322c:	beq.w	46c0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1cac>
    3230:	ldr	r0, [r4, #0]
        write_length_ += len;
    3232:	adds	r3, #1
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3234:	add.w	r9, r6, #544	; 0x220
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    3238:	add.w	r8, sp, #21
        //
        int pos = 0; // into data
    323c:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    323e:	str	r3, [r6, #4]
    3240:	b.n	324a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x836>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3242:	cmp	r7, #0
    3244:	bgt.w	2ad2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbe>
    3248:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    324a:	subs	r6, r5, r0
    324c:	rsb	r3, r7, #1
          memcpy(dst,src,to_copy);
    3250:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3252:	cmp	r6, r3
    3254:	it	ge
    3256:	movge	r6, r3
          memcpy(dst,src,to_copy);
    3258:	mov	r2, r6
          pos += to_copy;
    325a:	add	r7, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    325c:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3260:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3262:	add	r8, r6
          dst += to_copy;
    3264:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3266:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3268:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    326a:	bne.n	3242 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x82e>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    326c:	movs	r2, #60	; 0x3c
    326e:	mov.w	r1, #512	; 0x200
    3272:	mov	r0, r9
    3274:	bl	a228 <usb_mtp_send>
    3278:	cmp	r0, #0
    327a:	ble.n	326c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x858>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    327c:	str.w	r9, [r4]
    3280:	b.n	3242 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x82e>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3282:	ldr	r3, [r0, #4]
    3284:	cmp	r3, #0
    3286:	beq.w	46f0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1cdc>
    328a:	ldr	r4, [pc, #756]	; (3580 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb6c>)
    328c:	ldr	r0, [r4, #0]
        write_length_ += len;
    328e:	adds	r3, #2
    3290:	add.w	r5, r6, #1056	; 0x420
        
        const char * src=data;
    3294:	add.w	r9, sp, #36	; 0x24
        //
        int pos = 0; // into data
    3298:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    329c:	str	r3, [r6, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    329e:	add.w	sl, r6, #544	; 0x220
    32a2:	b.n	32ac <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x898>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    32a4:	cmp.w	r8, #1
    32a8:	bgt.n	32e4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x8d0>
    32aa:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    32ac:	subs	r7, r5, r0
    32ae:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    32b2:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    32b4:	cmp	r7, r3
    32b6:	it	ge
    32b8:	movge	r7, r3
          memcpy(dst,src,to_copy);
    32ba:	mov	r2, r7
          pos += to_copy;
    32bc:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    32be:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    32c2:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    32c4:	add	r9, r7
          dst += to_copy;
    32c6:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    32c8:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    32ca:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    32cc:	bne.n	32a4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x890>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    32ce:	movs	r2, #60	; 0x3c
    32d0:	mov.w	r1, #512	; 0x200
    32d4:	mov	r0, sl
    32d6:	bl	a228 <usb_mtp_send>
    32da:	cmp	r0, #0
    32dc:	ble.n	32ce <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x8ba>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    32de:	str.w	sl, [r4]
    32e2:	b.n	32a4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x890>
    32e4:	movs	r1, #4
    32e6:	ldrb	r2, [r6, #0]
    32e8:	ldr	r3, [r6, #4]
    32ea:	strh.w	r1, [sp, #34]	; 0x22
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    32ee:	cmp	r2, #0
    32f0:	bne.w	2b08 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf4>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    32f4:	cmp	r3, #0
    32f6:	beq.w	46e4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1cd0>
    32fa:	ldr	r0, [r4, #0]
        write_length_ += len;
    32fc:	adds	r3, #2
        
        const char * src=data;
    32fe:	add.w	r9, sp, #34	; 0x22
        //
        int pos = 0; // into data
    3302:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3306:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    330a:	str	r3, [r6, #4]
    330c:	b.n	3316 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x902>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    330e:	cmp.w	r8, #1
    3312:	bgt.n	334e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x93a>
    3314:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3316:	subs	r7, r5, r0
    3318:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    331c:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    331e:	cmp	r7, r3
    3320:	it	ge
    3322:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3324:	mov	r2, r7
          pos += to_copy;
    3326:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3328:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    332c:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    332e:	add	r9, r7
          dst += to_copy;
    3330:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3332:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3334:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3336:	bne.n	330e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x8fa>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3338:	movs	r2, #60	; 0x3c
    333a:	mov.w	r1, #512	; 0x200
    333e:	mov	r0, sl
    3340:	bl	a228 <usb_mtp_send>
    3344:	cmp	r0, #0
    3346:	ble.n	3338 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x924>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3348:	str.w	sl, [r4]
    334c:	b.n	330e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x8fa>
    334e:	movs	r1, #0
    3350:	ldrb	r2, [r6, #0]
    3352:	ldr	r3, [r6, #4]
    3354:	strb.w	r1, [sp, #7]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3358:	cmp	r2, #0
    335a:	bne.w	2b0a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf6>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    335e:	cmp	r3, #0
    3360:	beq.w	46d8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1cc4>
    3364:	ldr	r0, [r4, #0]
        write_length_ += len;
    3366:	adds	r3, #1
        
        const char * src=data;
    3368:	add.w	r9, sp, #7
        //
        int pos = 0; // into data
    336c:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3370:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3374:	str	r3, [r6, #4]
    3376:	b.n	3380 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x96c>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3378:	cmp.w	r8, #0
    337c:	bgt.n	33b8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x9a4>
    337e:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3380:	subs	r7, r5, r0
    3382:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    3386:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3388:	cmp	r7, r3
    338a:	it	ge
    338c:	movge	r7, r3
          memcpy(dst,src,to_copy);
    338e:	mov	r2, r7
          pos += to_copy;
    3390:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3392:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3396:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3398:	add	r9, r7
          dst += to_copy;
    339a:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    339c:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    339e:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    33a0:	bne.n	3378 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x964>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    33a2:	movs	r2, #60	; 0x3c
    33a4:	mov.w	r1, #512	; 0x200
    33a8:	mov	r0, sl
    33aa:	bl	a228 <usb_mtp_send>
    33ae:	cmp	r0, #0
    33b0:	ble.n	33a2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x98e>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    33b2:	str.w	sl, [r4]
    33b6:	b.n	3378 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x964>
    33b8:	movs	r1, #0
    33ba:	ldrb	r2, [r6, #0]
    33bc:	ldr	r3, [r6, #4]
    33be:	strh.w	r1, [sp, #32]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    33c2:	cmp	r2, #0
    33c4:	bne.w	2b0c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    33c8:	cmp	r3, #0
    33ca:	beq.w	46cc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1cb8>
    33ce:	ldr	r0, [r4, #0]
        write_length_ += len;
    33d0:	adds	r3, #2
        
        const char * src=data;
    33d2:	add.w	r9, sp, #32
        //
        int pos = 0; // into data
    33d6:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    33da:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    33de:	str	r3, [r6, #4]
    33e0:	b.n	33ea <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x9d6>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    33e2:	cmp.w	r8, #1
    33e6:	bgt.n	3422 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xa0e>
    33e8:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    33ea:	subs	r7, r5, r0
    33ec:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    33f0:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    33f2:	cmp	r7, r3
    33f4:	it	ge
    33f6:	movge	r7, r3
          memcpy(dst,src,to_copy);
    33f8:	mov	r2, r7
          pos += to_copy;
    33fa:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    33fc:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3400:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3402:	add	r9, r7
          dst += to_copy;
    3404:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3406:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3408:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    340a:	bne.n	33e2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x9ce>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    340c:	movs	r2, #60	; 0x3c
    340e:	mov.w	r1, #512	; 0x200
    3412:	mov	r0, sl
    3414:	bl	a228 <usb_mtp_send>
    3418:	cmp	r0, #0
    341a:	ble.n	340c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x9f8>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    341c:	str.w	sl, [r4]
    3420:	b.n	33e2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x9ce>
    3422:	movs	r1, #0
    3424:	ldrb	r2, [r6, #0]
    3426:	ldr	r3, [r6, #4]
    3428:	str	r1, [sp, #80]	; 0x50
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    342a:	cmp	r2, #0
    342c:	bne.w	2acc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3430:	cmp	r3, #0
    3432:	beq.w	45fe <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1bea>
    3436:	ldr	r0, [r4, #0]
        write_length_ += len;
    3438:	adds	r3, #4
        
        const char * src=data;
    343a:	add.w	r9, sp, #80	; 0x50
        //
        int pos = 0; // into data
    343e:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3442:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3446:	str	r3, [r6, #4]
    3448:	b.n	3452 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xa3e>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    344a:	cmp.w	r8, #3
    344e:	bgt.n	348a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xa76>
    3450:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3452:	subs	r7, r5, r0
    3454:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    3458:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    345a:	cmp	r7, r3
    345c:	it	ge
    345e:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3460:	mov	r2, r7
          pos += to_copy;
    3462:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3464:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3468:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    346a:	add	r9, r7
          dst += to_copy;
    346c:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    346e:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3470:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3472:	bne.n	344a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xa36>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3474:	movs	r2, #60	; 0x3c
    3476:	mov.w	r1, #512	; 0x200
    347a:	mov	r0, sl
    347c:	bl	a228 <usb_mtp_send>
    3480:	cmp	r0, #0
    3482:	ble.n	3474 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xa60>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3484:	str.w	sl, [r4]
    3488:	b.n	344a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xa36>
    348a:	movs	r1, #0
    348c:	ldrb	r2, [r6, #0]
    348e:	ldr	r3, [r6, #4]
    3490:	strb.w	r1, [sp, #6]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3494:	cmp	r2, #0
    3496:	bne.w	2ace <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xba>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    349a:	cmp	r3, #0
    349c:	beq.w	45f2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1bde>
    34a0:	ldr	r0, [r4, #0]
        write_length_ += len;
    34a2:	adds	r3, #1
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    34a4:	add.w	r9, r6, #544	; 0x220
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    34a8:	add.w	r8, sp, #6
        //
        int pos = 0; // into data
    34ac:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    34ae:	str	r3, [r6, #4]
    34b0:	b.n	34ba <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xaa6>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    34b2:	cmp	r7, #0
    34b4:	bgt.w	2ad2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbe>
    34b8:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    34ba:	subs	r6, r5, r0
    34bc:	rsb	r3, r7, #1
          memcpy(dst,src,to_copy);
    34c0:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    34c2:	cmp	r6, r3
    34c4:	it	ge
    34c6:	movge	r6, r3
          memcpy(dst,src,to_copy);
    34c8:	mov	r2, r6
          pos += to_copy;
    34ca:	add	r7, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    34cc:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    34d0:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    34d2:	add	r8, r6
          dst += to_copy;
    34d4:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    34d6:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    34d8:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    34da:	bne.n	34b2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xa9e>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    34dc:	movs	r2, #60	; 0x3c
    34de:	mov.w	r1, #512	; 0x200
    34e2:	mov	r0, r9
    34e4:	bl	a228 <usb_mtp_send>
    34e8:	cmp	r0, #0
    34ea:	ble.n	34dc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xac8>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    34ec:	str.w	r9, [r4]
    34f0:	b.n	34b2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xa9e>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    34f2:	ldr	r3, [r0, #4]
    34f4:	cmp	r3, #0
    34f6:	beq.w	46b2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c9e>
    34fa:	ldr	r4, [pc, #132]	; (3580 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb6c>)
    34fc:	ldr	r0, [r4, #0]
        write_length_ += len;
    34fe:	adds	r3, #2
    3500:	add.w	r5, r6, #1056	; 0x420
        
        const char * src=data;
    3504:	add.w	r9, sp, #30
        //
        int pos = 0; // into data
    3508:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    350c:	str	r3, [r6, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    350e:	add.w	sl, r6, #544	; 0x220
    3512:	b.n	351c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb08>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3514:	cmp.w	r8, #1
    3518:	bgt.n	3554 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb40>
    351a:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    351c:	subs	r7, r5, r0
    351e:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    3522:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3524:	cmp	r7, r3
    3526:	it	ge
    3528:	movge	r7, r3
          memcpy(dst,src,to_copy);
    352a:	mov	r2, r7
          pos += to_copy;
    352c:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    352e:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3532:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3534:	add	r9, r7
          dst += to_copy;
    3536:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3538:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    353a:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    353c:	bne.n	3514 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb00>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    353e:	movs	r2, #60	; 0x3c
    3540:	mov.w	r1, #512	; 0x200
    3544:	mov	r0, sl
    3546:	bl	a228 <usb_mtp_send>
    354a:	cmp	r0, #0
    354c:	ble.n	353e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb2a>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    354e:	str.w	sl, [r4]
    3552:	b.n	3514 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb00>
    3554:	movs	r1, #6
    3556:	ldrb	r2, [r6, #0]
    3558:	ldr	r3, [r6, #4]
    355a:	strh.w	r1, [sp, #28]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    355e:	cmp	r2, #0
    3560:	bne.w	2aec <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xd8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3564:	cmp	r3, #0
    3566:	beq.w	46a6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c92>
    356a:	ldr	r0, [r4, #0]
        write_length_ += len;
    356c:	adds	r3, #2
        
        const char * src=data;
    356e:	add.w	r9, sp, #28
        //
        int pos = 0; // into data
    3572:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3576:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    357a:	str	r3, [r6, #4]
    357c:	b.n	358c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb78>
    357e:	nop
    3580:	.word	0x200014fc
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3584:	cmp.w	r8, #1
    3588:	bgt.n	35c4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbb0>
    358a:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    358c:	subs	r7, r5, r0
    358e:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    3592:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3594:	cmp	r7, r3
    3596:	it	ge
    3598:	movge	r7, r3
          memcpy(dst,src,to_copy);
    359a:	mov	r2, r7
          pos += to_copy;
    359c:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    359e:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    35a2:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    35a4:	add	r9, r7
          dst += to_copy;
    35a6:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    35a8:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    35aa:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    35ac:	bne.n	3584 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb70>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    35ae:	movs	r2, #60	; 0x3c
    35b0:	mov.w	r1, #512	; 0x200
    35b4:	mov	r0, sl
    35b6:	bl	a228 <usb_mtp_send>
    35ba:	cmp	r0, #0
    35bc:	ble.n	35ae <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb9a>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    35be:	str.w	sl, [r4]
    35c2:	b.n	3584 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb70>
    35c4:	movs	r1, #0
    35c6:	ldrb	r2, [r6, #0]
    35c8:	ldr	r3, [r6, #4]
    35ca:	strb.w	r1, [sp, #5]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    35ce:	cmp	r2, #0
    35d0:	bne.w	2aee <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xda>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    35d4:	cmp	r3, #0
    35d6:	beq.w	459e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b8a>
    35da:	ldr	r0, [r4, #0]
        write_length_ += len;
    35dc:	adds	r3, #1
        
        const char * src=data;
    35de:	add.w	r9, sp, #5
        //
        int pos = 0; // into data
    35e2:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    35e6:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    35ea:	str	r3, [r6, #4]
    35ec:	b.n	35f8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbe4>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    35ee:	cmp.w	r8, #0
    35f2:	bgt.w	435a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1946>
    35f6:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    35f8:	subs	r7, r5, r0
    35fa:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    35fe:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3600:	cmp	r7, r3
    3602:	it	ge
    3604:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3606:	mov	r2, r7
          pos += to_copy;
    3608:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    360a:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    360e:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3610:	add	r9, r7
          dst += to_copy;
    3612:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3614:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3616:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3618:	bne.n	35ee <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbda>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    361a:	movs	r2, #60	; 0x3c
    361c:	mov.w	r1, #512	; 0x200
    3620:	mov	r0, sl
    3622:	bl	a228 <usb_mtp_send>
    3626:	cmp	r0, #0
    3628:	ble.n	361a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc06>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    362a:	str.w	sl, [r4]
    362e:	b.n	35ee <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbda>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3630:	ldr	r3, [r0, #4]
    3632:	cmp	r3, #0
    3634:	beq.w	45ce <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1bba>
    3638:	ldr	r4, [pc, #756]	; (3930 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf1c>)
    363a:	ldr	r0, [r4, #0]
        write_length_ += len;
    363c:	adds	r3, #2
    363e:	add.w	r5, r6, #1056	; 0x420
        
        const char * src=data;
    3642:	add.w	r9, sp, #70	; 0x46
        //
        int pos = 0; // into data
    3646:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    364a:	str	r3, [r6, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    364c:	add.w	sl, r6, #544	; 0x220
    3650:	b.n	365a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc46>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3652:	cmp.w	r8, #1
    3656:	bgt.n	3692 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc7e>
    3658:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    365a:	subs	r7, r5, r0
    365c:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    3660:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3662:	cmp	r7, r3
    3664:	it	ge
    3666:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3668:	mov	r2, r7
          pos += to_copy;
    366a:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    366c:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3670:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3672:	add	r9, r7
          dst += to_copy;
    3674:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3676:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3678:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    367a:	bne.n	3652 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc3e>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    367c:	movs	r2, #60	; 0x3c
    367e:	mov.w	r1, #512	; 0x200
    3682:	mov	r0, sl
    3684:	bl	a228 <usb_mtp_send>
    3688:	cmp	r0, #0
    368a:	ble.n	367c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc68>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    368c:	str.w	sl, [r4]
    3690:	b.n	3652 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc3e>
    3692:	movw	r1, #65535	; 0xffff
    3696:	ldrb	r2, [r6, #0]
    3698:	ldr	r3, [r6, #4]
    369a:	strh.w	r1, [sp, #68]	; 0x44
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    369e:	cmp	r2, #0
    36a0:	bne.w	2ac6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb2>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    36a4:	cmp	r3, #0
    36a6:	beq.w	45c2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1bae>
    36aa:	ldr	r0, [r4, #0]
        write_length_ += len;
    36ac:	adds	r3, #2
        
        const char * src=data;
    36ae:	add.w	r9, sp, #68	; 0x44
        //
        int pos = 0; // into data
    36b2:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    36b6:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    36ba:	str	r3, [r6, #4]
    36bc:	b.n	36c6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xcb2>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    36be:	cmp.w	r8, #1
    36c2:	bgt.n	36fe <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xcea>
    36c4:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    36c6:	subs	r7, r5, r0
    36c8:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    36cc:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    36ce:	cmp	r7, r3
    36d0:	it	ge
    36d2:	movge	r7, r3
          memcpy(dst,src,to_copy);
    36d4:	mov	r2, r7
          pos += to_copy;
    36d6:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    36d8:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    36dc:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    36de:	add	r9, r7
          dst += to_copy;
    36e0:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    36e2:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    36e4:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    36e6:	bne.n	36be <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xcaa>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    36e8:	movs	r2, #60	; 0x3c
    36ea:	mov.w	r1, #512	; 0x200
    36ee:	mov	r0, sl
    36f0:	bl	a228 <usb_mtp_send>
    36f4:	cmp	r0, #0
    36f6:	ble.n	36e8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xcd4>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    36f8:	str.w	sl, [r4]
    36fc:	b.n	36be <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xcaa>
    36fe:	movs	r1, #0
    3700:	ldrb	r2, [r6, #0]
    3702:	ldr	r3, [r6, #4]
    3704:	strb.w	r1, [sp, #27]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3708:	cmp	r2, #0
    370a:	bne.w	2ac8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb4>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    370e:	cmp	r3, #0
    3710:	beq.w	45b6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1ba2>
    3714:	ldr	r0, [r4, #0]
        write_length_ += len;
    3716:	adds	r3, #1
        
        const char * src=data;
    3718:	add.w	r9, sp, #27
        //
        int pos = 0; // into data
    371c:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3720:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3724:	str	r3, [r6, #4]
    3726:	b.n	3730 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xd1c>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3728:	cmp.w	r8, #0
    372c:	bgt.n	3768 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xd54>
    372e:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3730:	subs	r7, r5, r0
    3732:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    3736:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3738:	cmp	r7, r3
    373a:	it	ge
    373c:	movge	r7, r3
          memcpy(dst,src,to_copy);
    373e:	mov	r2, r7
          pos += to_copy;
    3740:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3742:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3746:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3748:	add	r9, r7
          dst += to_copy;
    374a:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    374c:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    374e:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3750:	bne.n	3728 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xd14>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3752:	movs	r2, #60	; 0x3c
    3754:	mov.w	r1, #512	; 0x200
    3758:	mov	r0, sl
    375a:	bl	a228 <usb_mtp_send>
    375e:	cmp	r0, #0
    3760:	ble.n	3752 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xd3e>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3762:	str.w	sl, [r4]
    3766:	b.n	3728 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xd14>
    3768:	movs	r1, #0
    376a:	ldrb	r2, [r6, #0]
    376c:	ldr	r3, [r6, #4]
    376e:	strb.w	r1, [sp, #26]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3772:	cmp	r2, #0
    3774:	bne.w	2aca <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb6>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3778:	cmp	r3, #0
    377a:	beq.w	45aa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b96>
    377e:	ldr	r0, [r4, #0]
        write_length_ += len;
    3780:	adds	r3, #1
        
        const char * src=data;
    3782:	add.w	r9, sp, #26
        //
        int pos = 0; // into data
    3786:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    378a:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    378e:	str	r3, [r6, #4]
    3790:	b.n	379a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xd86>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3792:	cmp.w	r8, #0
    3796:	bgt.n	37d2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xdbe>
    3798:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    379a:	subs	r7, r5, r0
    379c:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    37a0:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    37a2:	cmp	r7, r3
    37a4:	it	ge
    37a6:	movge	r7, r3
          memcpy(dst,src,to_copy);
    37a8:	mov	r2, r7
          pos += to_copy;
    37aa:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    37ac:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    37b0:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    37b2:	add	r9, r7
          dst += to_copy;
    37b4:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    37b6:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    37b8:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    37ba:	bne.n	3792 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xd7e>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    37bc:	movs	r2, #60	; 0x3c
    37be:	mov.w	r1, #512	; 0x200
    37c2:	mov	r0, sl
    37c4:	bl	a228 <usb_mtp_send>
    37c8:	cmp	r0, #0
    37ca:	ble.n	37bc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xda8>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    37cc:	str.w	sl, [r4]
    37d0:	b.n	3792 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xd7e>
    37d2:	movs	r1, #0
    37d4:	ldrb	r2, [r6, #0]
    37d6:	ldr	r3, [r6, #4]
    37d8:	str	r1, [sp, #116]	; 0x74
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    37da:	cmp	r2, #0
    37dc:	bne.w	2acc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    37e0:	cmp	r3, #0
    37e2:	beq.w	45e6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1bd2>
    37e6:	ldr	r0, [r4, #0]
        write_length_ += len;
    37e8:	adds	r3, #4
        
        const char * src=data;
    37ea:	add.w	r9, sp, #116	; 0x74
        //
        int pos = 0; // into data
    37ee:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    37f2:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    37f6:	str	r3, [r6, #4]
    37f8:	b.n	3802 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xdee>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    37fa:	cmp.w	r8, #3
    37fe:	bgt.n	383a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe26>
    3800:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3802:	subs	r7, r5, r0
    3804:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    3808:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    380a:	cmp	r7, r3
    380c:	it	ge
    380e:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3810:	mov	r2, r7
          pos += to_copy;
    3812:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3814:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3818:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    381a:	add	r9, r7
          dst += to_copy;
    381c:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    381e:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3820:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3822:	bne.n	37fa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xde6>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3824:	movs	r2, #60	; 0x3c
    3826:	mov.w	r1, #512	; 0x200
    382a:	mov	r0, sl
    382c:	bl	a228 <usb_mtp_send>
    3830:	cmp	r0, #0
    3832:	ble.n	3824 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe10>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3834:	str.w	sl, [r4]
    3838:	b.n	37fa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xde6>
    383a:	movs	r1, #0
    383c:	ldrb	r2, [r6, #0]
    383e:	ldr	r3, [r6, #4]
    3840:	strb.w	r1, [sp, #25]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3844:	cmp	r2, #0
    3846:	bne.w	2ace <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xba>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    384a:	cmp	r3, #0
    384c:	beq.w	4490 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1a7c>
    3850:	ldr	r0, [r4, #0]
        write_length_ += len;
    3852:	adds	r3, #1
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3854:	add.w	r9, r6, #544	; 0x220
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    3858:	add.w	r8, sp, #25
        //
        int pos = 0; // into data
    385c:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    385e:	str	r3, [r6, #4]
    3860:	b.n	386a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe56>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3862:	cmp	r7, #0
    3864:	bgt.w	2ad2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbe>
    3868:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    386a:	subs	r6, r5, r0
    386c:	rsb	r3, r7, #1
          memcpy(dst,src,to_copy);
    3870:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3872:	cmp	r6, r3
    3874:	it	ge
    3876:	movge	r6, r3
          memcpy(dst,src,to_copy);
    3878:	mov	r2, r6
          pos += to_copy;
    387a:	add	r7, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    387c:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3880:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3882:	add	r8, r6
          dst += to_copy;
    3884:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3886:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3888:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    388a:	bne.n	3862 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe4e>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    388c:	movs	r2, #60	; 0x3c
    388e:	mov.w	r1, #512	; 0x200
    3892:	mov	r0, r9
    3894:	bl	a228 <usb_mtp_send>
    3898:	cmp	r0, #0
    389a:	ble.n	388c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe78>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    389c:	str.w	r9, [r4]
    38a0:	b.n	3862 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe4e>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    38a2:	ldr	r3, [r0, #4]
    38a4:	cmp	r3, #0
    38a6:	beq.w	4590 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b7c>
    38aa:	ldr	r4, [pc, #132]	; (3930 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf1c>)
    38ac:	ldr	r0, [r4, #0]
        write_length_ += len;
    38ae:	adds	r3, #2
    38b0:	add.w	r5, r6, #1056	; 0x420
        
        const char * src=data;
    38b4:	add.w	r9, sp, #66	; 0x42
        //
        int pos = 0; // into data
    38b8:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    38bc:	str	r3, [r6, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    38be:	add.w	sl, r6, #544	; 0x220
    38c2:	b.n	38cc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xeb8>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    38c4:	cmp.w	r8, #1
    38c8:	bgt.n	3904 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xef0>
    38ca:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    38cc:	subs	r7, r5, r0
    38ce:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    38d2:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    38d4:	cmp	r7, r3
    38d6:	it	ge
    38d8:	movge	r7, r3
          memcpy(dst,src,to_copy);
    38da:	mov	r2, r7
          pos += to_copy;
    38dc:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    38de:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    38e2:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    38e4:	add	r9, r7
          dst += to_copy;
    38e6:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    38e8:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    38ea:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    38ec:	bne.n	38c4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xeb0>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    38ee:	movs	r2, #60	; 0x3c
    38f0:	mov.w	r1, #512	; 0x200
    38f4:	mov	r0, sl
    38f6:	bl	a228 <usb_mtp_send>
    38fa:	cmp	r0, #0
    38fc:	ble.n	38ee <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xeda>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    38fe:	str.w	sl, [r4]
    3902:	b.n	38c4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xeb0>
    3904:	movs	r1, #10
    3906:	ldrb	r2, [r6, #0]
    3908:	ldr	r3, [r6, #4]
    390a:	strh.w	r1, [sp, #64]	; 0x40
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    390e:	cmp	r2, #0
    3910:	bne.w	2d80 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x36c>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3914:	cmp	r3, #0
    3916:	beq.w	4584 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b70>
    391a:	ldr	r0, [r4, #0]
        write_length_ += len;
    391c:	adds	r3, #2
        
        const char * src=data;
    391e:	add.w	r9, sp, #64	; 0x40
        //
        int pos = 0; // into data
    3922:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3926:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    392a:	str	r3, [r6, #4]
    392c:	b.n	393c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf28>
    392e:	nop
    3930:	.word	0x200014fc
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3934:	cmp.w	r8, #1
    3938:	bgt.n	3974 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf60>
    393a:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    393c:	subs	r7, r5, r0
    393e:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    3942:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3944:	cmp	r7, r3
    3946:	it	ge
    3948:	movge	r7, r3
          memcpy(dst,src,to_copy);
    394a:	mov	r2, r7
          pos += to_copy;
    394c:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    394e:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3952:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3954:	add	r9, r7
          dst += to_copy;
    3956:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3958:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    395a:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    395c:	bne.n	3934 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf20>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    395e:	movs	r2, #60	; 0x3c
    3960:	mov.w	r1, #512	; 0x200
    3964:	mov	r0, sl
    3966:	bl	a228 <usb_mtp_send>
    396a:	cmp	r0, #0
    396c:	ble.n	395e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf4a>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    396e:	str.w	sl, [r4]
    3972:	b.n	3934 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf20>
    3974:	movs	r1, #0
    3976:	ldrb	r2, [r6, #0]
    3978:	ldr	r3, [r6, #4]
    397a:	strb.w	r1, [sp, #24]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    397e:	cmp	r2, #0
    3980:	bne.w	2d82 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x36e>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3984:	cmp	r3, #0
    3986:	beq.w	4578 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b64>
    398a:	ldr	r0, [r4, #0]
        write_length_ += len;
    398c:	adds	r3, #1
        
        const char * src=data;
    398e:	add.w	r9, sp, #24
        //
        int pos = 0; // into data
    3992:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3996:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    399a:	str	r3, [r6, #4]
    399c:	b.n	39a6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf92>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    399e:	cmp.w	r8, #0
    39a2:	bgt.n	39de <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xfca>
    39a4:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    39a6:	subs	r7, r5, r0
    39a8:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    39ac:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    39ae:	cmp	r7, r3
    39b0:	it	ge
    39b2:	movge	r7, r3
          memcpy(dst,src,to_copy);
    39b4:	mov	r2, r7
          pos += to_copy;
    39b6:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    39b8:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    39bc:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    39be:	add	r9, r7
          dst += to_copy;
    39c0:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    39c2:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    39c4:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    39c6:	bne.n	399e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf8a>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    39c8:	movs	r2, #60	; 0x3c
    39ca:	mov.w	r1, #512	; 0x200
    39ce:	mov	r0, sl
    39d0:	bl	a228 <usb_mtp_send>
    39d4:	cmp	r0, #0
    39d6:	ble.n	39c8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xfb4>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    39d8:	str.w	sl, [r4]
    39dc:	b.n	399e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf8a>
    39de:	movs	r0, #0
    39e0:	movs	r1, #0
    39e2:	ldrb	r2, [r6, #0]
    39e4:	ldr	r3, [r6, #4]
    39e6:	strd	r0, r1, [sp, #136]	; 0x88
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    39ea:	cmp	r2, #0
    39ec:	bne.w	2d84 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x370>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    39f0:	cmp	r3, #0
    39f2:	beq.w	4690 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c7c>
    39f6:	ldr	r0, [r4, #0]
        write_length_ += len;
    39f8:	adds	r3, #8
        
        const char * src=data;
    39fa:	add.w	r9, sp, #136	; 0x88
        //
        int pos = 0; // into data
    39fe:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3a02:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3a06:	str	r3, [r6, #4]
    3a08:	b.n	3a12 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xffe>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3a0a:	cmp.w	r8, #7
    3a0e:	bgt.n	3a4a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1036>
    3a10:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3a12:	subs	r7, r5, r0
    3a14:	rsb	r3, r8, #8
          memcpy(dst,src,to_copy);
    3a18:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3a1a:	cmp	r7, r3
    3a1c:	it	ge
    3a1e:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3a20:	mov	r2, r7
          pos += to_copy;
    3a22:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3a24:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3a28:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3a2a:	add	r9, r7
          dst += to_copy;
    3a2c:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3a2e:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3a30:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3a32:	bne.n	3a0a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xff6>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3a34:	movs	r2, #60	; 0x3c
    3a36:	mov.w	r1, #512	; 0x200
    3a3a:	mov	r0, sl
    3a3c:	bl	a228 <usb_mtp_send>
    3a40:	cmp	r0, #0
    3a42:	ble.n	3a34 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1020>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3a44:	str.w	sl, [r4]
    3a48:	b.n	3a0a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xff6>
    3a4a:	movs	r0, #0
    3a4c:	movs	r1, #0
    3a4e:	ldrb	r2, [r6, #0]
    3a50:	ldr	r3, [r6, #4]
    3a52:	strd	r0, r1, [sp, #128]	; 0x80
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3a56:	cmp	r2, #0
    3a58:	bne.w	2b9a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x186>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3a5c:	cmp	r3, #0
    3a5e:	beq.w	4684 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c70>
    3a62:	ldr	r0, [r4, #0]
        write_length_ += len;
    3a64:	adds	r3, #8
        
        const char * src=data;
    3a66:	add.w	r9, sp, #128	; 0x80
        //
        int pos = 0; // into data
    3a6a:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3a6e:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3a72:	str	r3, [r6, #4]
    3a74:	b.n	3a7e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x106a>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3a76:	cmp.w	r8, #7
    3a7a:	bgt.n	3ab6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x10a2>
    3a7c:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3a7e:	subs	r7, r5, r0
    3a80:	rsb	r3, r8, #8
          memcpy(dst,src,to_copy);
    3a84:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3a86:	cmp	r7, r3
    3a88:	it	ge
    3a8a:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3a8c:	mov	r2, r7
          pos += to_copy;
    3a8e:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3a90:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3a94:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3a96:	add	r9, r7
          dst += to_copy;
    3a98:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3a9a:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3a9c:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3a9e:	bne.n	3a76 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1062>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3aa0:	movs	r2, #60	; 0x3c
    3aa2:	mov.w	r1, #512	; 0x200
    3aa6:	mov	r0, sl
    3aa8:	bl	a228 <usb_mtp_send>
    3aac:	cmp	r0, #0
    3aae:	ble.n	3aa0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x108c>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3ab0:	str.w	sl, [r4]
    3ab4:	b.n	3a76 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1062>
    3ab6:	movs	r1, #0
    3ab8:	ldrb	r2, [r6, #0]
    3aba:	ldr	r3, [r6, #4]
    3abc:	str	r1, [sp, #112]	; 0x70
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3abe:	cmp	r2, #0
    3ac0:	bne.w	2acc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3ac4:	cmp	r3, #0
    3ac6:	beq.w	4678 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c64>
    3aca:	ldr	r0, [r4, #0]
        write_length_ += len;
    3acc:	adds	r3, #4
        
        const char * src=data;
    3ace:	add.w	r9, sp, #112	; 0x70
        //
        int pos = 0; // into data
    3ad2:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3ad6:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3ada:	str	r3, [r6, #4]
    3adc:	b.n	3ae6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x10d2>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3ade:	cmp.w	r8, #3
    3ae2:	bgt.n	3b1e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x110a>
    3ae4:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3ae6:	subs	r7, r5, r0
    3ae8:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    3aec:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3aee:	cmp	r7, r3
    3af0:	it	ge
    3af2:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3af4:	mov	r2, r7
          pos += to_copy;
    3af6:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3af8:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3afc:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3afe:	add	r9, r7
          dst += to_copy;
    3b00:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3b02:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3b04:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3b06:	bne.n	3ade <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x10ca>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3b08:	movs	r2, #60	; 0x3c
    3b0a:	mov.w	r1, #512	; 0x200
    3b0e:	mov	r0, sl
    3b10:	bl	a228 <usb_mtp_send>
    3b14:	cmp	r0, #0
    3b16:	ble.n	3b08 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x10f4>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3b18:	str.w	sl, [r4]
    3b1c:	b.n	3ade <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x10ca>
    3b1e:	movs	r1, #0
    3b20:	ldrb	r2, [r6, #0]
    3b22:	ldr	r3, [r6, #4]
    3b24:	strb.w	r1, [sp, #23]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3b28:	cmp	r2, #0
    3b2a:	bne.w	2ace <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xba>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3b2e:	cmp	r3, #0
    3b30:	beq.w	466c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c58>
    3b34:	ldr	r0, [r4, #0]
        write_length_ += len;
    3b36:	adds	r3, #1
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3b38:	add.w	r9, r6, #544	; 0x220
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    3b3c:	add.w	r8, sp, #23
        //
        int pos = 0; // into data
    3b40:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3b42:	str	r3, [r6, #4]
    3b44:	b.n	3b4e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x113a>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3b46:	cmp	r7, #0
    3b48:	bgt.w	2ad2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbe>
    3b4c:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3b4e:	subs	r6, r5, r0
    3b50:	rsb	r3, r7, #1
          memcpy(dst,src,to_copy);
    3b54:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3b56:	cmp	r6, r3
    3b58:	it	ge
    3b5a:	movge	r6, r3
          memcpy(dst,src,to_copy);
    3b5c:	mov	r2, r6
          pos += to_copy;
    3b5e:	add	r7, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3b60:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3b64:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3b66:	add	r8, r6
          dst += to_copy;
    3b68:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3b6a:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3b6c:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3b6e:	bne.n	3b46 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1132>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3b70:	movs	r2, #60	; 0x3c
    3b72:	mov.w	r1, #512	; 0x200
    3b76:	mov	r0, r9
    3b78:	bl	a228 <usb_mtp_send>
    3b7c:	cmp	r0, #0
    3b7e:	ble.n	3b70 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x115c>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3b80:	str.w	r9, [r4]
    3b84:	b.n	3b46 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1132>
    3b86:	movs	r1, #4
    3b88:	ldrb	r2, [r6, #0]
    3b8a:	ldr	r3, [r6, #4]
    3b8c:	strh.w	r1, [sp, #40]	; 0x28
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3b90:	cmp	r2, #0
    3b92:	bne.w	2b08 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf4>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3b96:	cmp	r3, #0
    3b98:	beq.w	455e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b4a>
    3b9c:	ldr	r0, [r4, #0]
        write_length_ += len;
    3b9e:	adds	r3, #2
        
        const char * src=data;
    3ba0:	add.w	r9, sp, #40	; 0x28
        //
        int pos = 0; // into data
    3ba4:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3ba8:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3bac:	str	r3, [r6, #4]
    3bae:	b.n	3bba <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x11a6>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3bb0:	cmp.w	r8, #1
    3bb4:	bgt.w	3d96 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1382>
    3bb8:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3bba:	subs	r7, r5, r0
    3bbc:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    3bc0:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3bc2:	cmp	r7, r3
    3bc4:	it	ge
    3bc6:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3bc8:	mov	r2, r7
          pos += to_copy;
    3bca:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3bcc:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3bd0:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3bd2:	add	r9, r7
          dst += to_copy;
    3bd4:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3bd6:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3bd8:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3bda:	bne.n	3bb0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x119c>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3bdc:	movs	r2, #60	; 0x3c
    3bde:	mov.w	r1, #512	; 0x200
    3be2:	mov	r0, sl
    3be4:	bl	a228 <usb_mtp_send>
    3be8:	cmp	r0, #0
    3bea:	ble.n	3bdc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x11c8>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3bec:	str.w	sl, [r4]
    3bf0:	b.n	3bb0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x119c>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3bf2:	ldr	r3, [r0, #4]
    3bf4:	cmp	r3, #0
    3bf6:	beq.w	450e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1afa>
    3bfa:	ldr	r4, [pc, #768]	; (3efc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x14e8>)
    3bfc:	ldr	r0, [r4, #0]
        write_length_ += len;
    3bfe:	adds	r3, #2
    3c00:	add.w	r5, r6, #1056	; 0x420
        
        const char * src=data;
    3c04:	add.w	r9, sp, #46	; 0x2e
        //
        int pos = 0; // into data
    3c08:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3c0c:	str	r3, [r6, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3c0e:	add.w	sl, r6, #544	; 0x220
    3c12:	b.n	3c1c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1208>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3c14:	cmp.w	r8, #1
    3c18:	bgt.n	3c54 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1240>
    3c1a:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3c1c:	subs	r7, r5, r0
    3c1e:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    3c22:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3c24:	cmp	r7, r3
    3c26:	it	ge
    3c28:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3c2a:	mov	r2, r7
          pos += to_copy;
    3c2c:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3c2e:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3c32:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3c34:	add	r9, r7
          dst += to_copy;
    3c36:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3c38:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3c3a:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3c3c:	bne.n	3c14 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1200>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3c3e:	movs	r2, #60	; 0x3c
    3c40:	mov.w	r1, #512	; 0x200
    3c44:	mov	r0, sl
    3c46:	bl	a228 <usb_mtp_send>
    3c4a:	cmp	r0, #0
    3c4c:	ble.n	3c3e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x122a>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3c4e:	str.w	sl, [r4]
    3c52:	b.n	3c14 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1200>
    3c54:	movs	r1, #8
    3c56:	ldrb	r2, [r6, #0]
    3c58:	ldr	r3, [r6, #4]
    3c5a:	strh.w	r1, [sp, #44]	; 0x2c
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3c5e:	cmp	r2, #0
    3c60:	bne.w	2b96 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x182>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3c64:	cmp	r3, #0
    3c66:	beq.w	4502 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1aee>
    3c6a:	ldr	r0, [r4, #0]
        write_length_ += len;
    3c6c:	adds	r3, #2
        
        const char * src=data;
    3c6e:	add.w	r9, sp, #44	; 0x2c
        //
        int pos = 0; // into data
    3c72:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3c76:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3c7a:	str	r3, [r6, #4]
    3c7c:	b.n	3c86 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1272>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3c7e:	cmp.w	r8, #1
    3c82:	bgt.n	3cbe <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x12aa>
    3c84:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3c86:	subs	r7, r5, r0
    3c88:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    3c8c:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3c8e:	cmp	r7, r3
    3c90:	it	ge
    3c92:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3c94:	mov	r2, r7
          pos += to_copy;
    3c96:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3c98:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3c9c:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3c9e:	add	r9, r7
          dst += to_copy;
    3ca0:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3ca2:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3ca4:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3ca6:	bne.n	3c7e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x126a>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3ca8:	movs	r2, #60	; 0x3c
    3caa:	mov.w	r1, #512	; 0x200
    3cae:	mov	r0, sl
    3cb0:	bl	a228 <usb_mtp_send>
    3cb4:	cmp	r0, #0
    3cb6:	ble.n	3ca8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1294>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3cb8:	str.w	sl, [r4]
    3cbc:	b.n	3c7e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x126a>
    3cbe:	movs	r1, #0
    3cc0:	ldrb	r2, [r6, #0]
    3cc2:	ldr	r3, [r6, #4]
    3cc4:	strb.w	r1, [sp, #11]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3cc8:	cmp	r2, #0
    3cca:	bne.w	2b98 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x184>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3cce:	cmp	r3, #0
    3cd0:	beq.w	44f6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1ae2>
    3cd4:	ldr	r0, [r4, #0]
        write_length_ += len;
    3cd6:	adds	r3, #1
        
        const char * src=data;
    3cd8:	add.w	r9, sp, #11
        //
        int pos = 0; // into data
    3cdc:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3ce0:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3ce4:	str	r3, [r6, #4]
    3ce6:	b.n	3cf0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x12dc>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3ce8:	cmp.w	r8, #0
    3cec:	bgt.n	3d28 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1314>
    3cee:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3cf0:	subs	r7, r5, r0
    3cf2:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    3cf6:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3cf8:	cmp	r7, r3
    3cfa:	it	ge
    3cfc:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3cfe:	mov	r2, r7
          pos += to_copy;
    3d00:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3d02:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3d06:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3d08:	add	r9, r7
          dst += to_copy;
    3d0a:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3d0c:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3d0e:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3d10:	bne.n	3ce8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x12d4>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3d12:	movs	r2, #60	; 0x3c
    3d14:	mov.w	r1, #512	; 0x200
    3d18:	mov	r0, sl
    3d1a:	bl	a228 <usb_mtp_send>
    3d1e:	cmp	r0, #0
    3d20:	ble.n	3d12 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x12fe>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3d22:	str.w	sl, [r4]
    3d26:	b.n	3ce8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x12d4>
    3d28:	movs	r0, #0
    3d2a:	movs	r1, #0
    3d2c:	ldrb	r2, [r6, #0]
    3d2e:	ldr	r3, [r6, #4]
    3d30:	strd	r0, r1, [sp, #120]	; 0x78
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3d34:	cmp	r2, #0
    3d36:	bne.w	2b9a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x186>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3d3a:	cmp	r3, #0
    3d3c:	beq.w	4544 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b30>
    3d40:	ldr	r0, [r4, #0]
        write_length_ += len;
    3d42:	adds	r3, #8
        
        const char * src=data;
    3d44:	add.w	r9, sp, #120	; 0x78
        //
        int pos = 0; // into data
    3d48:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3d4c:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3d50:	str	r3, [r6, #4]
    3d52:	b.n	3d5e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x134a>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3d54:	cmp.w	r8, #7
    3d58:	bgt.w	3f40 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x152c>
    3d5c:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3d5e:	subs	r7, r5, r0
    3d60:	rsb	r3, r8, #8
          memcpy(dst,src,to_copy);
    3d64:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3d66:	cmp	r7, r3
    3d68:	it	ge
    3d6a:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3d6c:	mov	r2, r7
          pos += to_copy;
    3d6e:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3d70:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3d74:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3d76:	add	r9, r7
          dst += to_copy;
    3d78:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3d7a:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3d7c:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3d7e:	bne.n	3d54 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1340>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3d80:	movs	r2, #60	; 0x3c
    3d82:	mov.w	r1, #512	; 0x200
    3d86:	mov	r0, sl
    3d88:	bl	a228 <usb_mtp_send>
    3d8c:	cmp	r0, #0
    3d8e:	ble.n	3d80 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x136c>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3d90:	str.w	sl, [r4]
    3d94:	b.n	3d54 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1340>
    3d96:	movs	r1, #0
    3d98:	ldrb	r2, [r6, #0]
    3d9a:	ldr	r3, [r6, #4]
    3d9c:	strb.w	r1, [sp, #9]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3da0:	cmp	r2, #0
    3da2:	bne.w	2b0a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf6>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3da6:	cmp	r3, #0
    3da8:	beq.w	453a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b26>
    3dac:	ldr	r0, [r4, #0]
        write_length_ += len;
    3dae:	adds	r3, #1
        
        const char * src=data;
    3db0:	add.w	r9, sp, #9
        //
        int pos = 0; // into data
    3db4:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3db8:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3dbc:	str	r3, [r6, #4]
    3dbe:	b.n	3dc8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x13b4>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3dc0:	cmp.w	r8, #0
    3dc4:	bgt.n	3e00 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x13ec>
    3dc6:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3dc8:	subs	r7, r5, r0
    3dca:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    3dce:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3dd0:	cmp	r7, r3
    3dd2:	it	ge
    3dd4:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3dd6:	mov	r2, r7
          pos += to_copy;
    3dd8:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3dda:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3dde:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3de0:	add	r9, r7
          dst += to_copy;
    3de2:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3de4:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3de6:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3de8:	bne.n	3dc0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x13ac>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3dea:	movs	r2, #60	; 0x3c
    3dec:	mov.w	r1, #512	; 0x200
    3df0:	mov	r0, sl
    3df2:	bl	a228 <usb_mtp_send>
    3df6:	cmp	r0, #0
    3df8:	ble.n	3dea <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x13d6>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3dfa:	str.w	sl, [r4]
    3dfe:	b.n	3dc0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x13ac>
    3e00:	movs	r1, #0
    3e02:	ldrb	r2, [r6, #0]
    3e04:	ldr	r3, [r6, #4]
    3e06:	strh.w	r1, [sp, #38]	; 0x26
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3e0a:	cmp	r2, #0
    3e0c:	bne.w	2b0c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3e10:	cmp	r3, #0
    3e12:	beq.w	4530 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b1c>
    3e16:	ldr	r0, [r4, #0]
        write_length_ += len;
    3e18:	adds	r3, #2
        
        const char * src=data;
    3e1a:	add.w	r9, sp, #38	; 0x26
        //
        int pos = 0; // into data
    3e1e:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3e22:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3e26:	str	r3, [r6, #4]
    3e28:	b.n	3e32 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x141e>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3e2a:	cmp.w	r8, #1
    3e2e:	bgt.n	3e6a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1456>
    3e30:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3e32:	subs	r7, r5, r0
    3e34:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    3e38:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3e3a:	cmp	r7, r3
    3e3c:	it	ge
    3e3e:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3e40:	mov	r2, r7
          pos += to_copy;
    3e42:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3e44:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3e48:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3e4a:	add	r9, r7
          dst += to_copy;
    3e4c:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3e4e:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3e50:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3e52:	bne.n	3e2a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1416>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3e54:	movs	r2, #60	; 0x3c
    3e56:	mov.w	r1, #512	; 0x200
    3e5a:	mov	r0, sl
    3e5c:	bl	a228 <usb_mtp_send>
    3e60:	cmp	r0, #0
    3e62:	ble.n	3e54 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1440>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3e64:	str.w	sl, [r4]
    3e68:	b.n	3e2a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1416>
    3e6a:	movs	r1, #0
    3e6c:	ldrb	r2, [r6, #0]
    3e6e:	ldr	r3, [r6, #4]
    3e70:	str	r1, [sp, #84]	; 0x54
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3e72:	cmp	r2, #0
    3e74:	bne.w	2acc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3e78:	cmp	r3, #0
    3e7a:	beq.w	4526 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b12>
    3e7e:	ldr	r0, [r4, #0]
        write_length_ += len;
    3e80:	adds	r3, #4
        
        const char * src=data;
    3e82:	add.w	r9, sp, #84	; 0x54
        //
        int pos = 0; // into data
    3e86:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3e8a:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3e8e:	str	r3, [r6, #4]
    3e90:	b.n	3e9a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1486>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3e92:	cmp.w	r8, #3
    3e96:	bgt.n	3ed2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x14be>
    3e98:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3e9a:	subs	r7, r5, r0
    3e9c:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    3ea0:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3ea2:	cmp	r7, r3
    3ea4:	it	ge
    3ea6:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3ea8:	mov	r2, r7
          pos += to_copy;
    3eaa:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3eac:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3eb0:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3eb2:	add	r9, r7
          dst += to_copy;
    3eb4:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3eb6:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3eb8:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3eba:	bne.n	3e92 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x147e>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3ebc:	movs	r2, #60	; 0x3c
    3ebe:	mov.w	r1, #512	; 0x200
    3ec2:	mov	r0, sl
    3ec4:	bl	a228 <usb_mtp_send>
    3ec8:	cmp	r0, #0
    3eca:	ble.n	3ebc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x14a8>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3ecc:	str.w	sl, [r4]
    3ed0:	b.n	3e92 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x147e>
    3ed2:	movs	r1, #0
    3ed4:	ldrb	r2, [r6, #0]
    3ed6:	ldr	r3, [r6, #4]
    3ed8:	strb.w	r1, [sp, #8]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3edc:	cmp	r2, #0
    3ede:	bne.w	2ace <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xba>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3ee2:	cmp	r3, #0
    3ee4:	beq.w	451c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1b08>
    3ee8:	ldr	r0, [r4, #0]
        write_length_ += len;
    3eea:	adds	r3, #1
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3eec:	add.w	r9, r6, #544	; 0x220
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    3ef0:	add.w	r8, sp, #8
        //
        int pos = 0; // into data
    3ef4:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3ef6:	str	r3, [r6, #4]
    3ef8:	b.n	3f08 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x14f4>
    3efa:	nop
    3efc:	.word	0x200014fc
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3f00:	cmp	r7, #0
    3f02:	bgt.w	2ad2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbe>
    3f06:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3f08:	subs	r6, r5, r0
    3f0a:	rsb	r3, r7, #1
          memcpy(dst,src,to_copy);
    3f0e:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3f10:	cmp	r6, r3
    3f12:	it	ge
    3f14:	movge	r6, r3
          memcpy(dst,src,to_copy);
    3f16:	mov	r2, r6
          pos += to_copy;
    3f18:	add	r7, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3f1a:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3f1e:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3f20:	add	r8, r6
          dst += to_copy;
    3f22:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3f24:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3f26:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3f28:	bne.n	3f00 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x14ec>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3f2a:	movs	r2, #60	; 0x3c
    3f2c:	mov.w	r1, #512	; 0x200
    3f30:	mov	r0, r9
    3f32:	bl	a228 <usb_mtp_send>
    3f36:	cmp	r0, #0
    3f38:	ble.n	3f2a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1516>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3f3a:	str.w	r9, [r4]
    3f3e:	b.n	3f00 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x14ec>
    3f40:	movs	r1, #0
    3f42:	ldrb	r2, [r6, #0]
    3f44:	ldr	r3, [r6, #4]
    3f46:	str	r1, [sp, #88]	; 0x58
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3f48:	cmp	r2, #0
    3f4a:	bne.w	2acc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3f4e:	cmp	r3, #0
    3f50:	beq.w	44ec <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1ad8>
    3f54:	ldr	r0, [r4, #0]
        write_length_ += len;
    3f56:	adds	r3, #4
        
        const char * src=data;
    3f58:	add.w	r9, sp, #88	; 0x58
        //
        int pos = 0; // into data
    3f5c:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3f60:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3f64:	str	r3, [r6, #4]
    3f66:	b.n	3f70 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x155c>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3f68:	cmp.w	r8, #3
    3f6c:	bgt.n	3fa8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1594>
    3f6e:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3f70:	subs	r7, r5, r0
    3f72:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    3f76:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3f78:	cmp	r7, r3
    3f7a:	it	ge
    3f7c:	movge	r7, r3
          memcpy(dst,src,to_copy);
    3f7e:	mov	r2, r7
          pos += to_copy;
    3f80:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3f82:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3f86:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3f88:	add	r9, r7
          dst += to_copy;
    3f8a:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3f8c:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3f8e:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3f90:	bne.n	3f68 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1554>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3f92:	movs	r2, #60	; 0x3c
    3f94:	mov.w	r1, #512	; 0x200
    3f98:	mov	r0, sl
    3f9a:	bl	a228 <usb_mtp_send>
    3f9e:	cmp	r0, #0
    3fa0:	ble.n	3f92 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x157e>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    3fa2:	str.w	sl, [r4]
    3fa6:	b.n	3f68 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1554>
    3fa8:	movs	r1, #0
    3faa:	ldrb	r2, [r6, #0]
    3fac:	ldr	r3, [r6, #4]
    3fae:	strb.w	r1, [sp, #10]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    3fb2:	cmp	r2, #0
    3fb4:	bne.w	2ace <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xba>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    3fb8:	cmp	r3, #0
    3fba:	beq.w	4654 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c40>
    3fbe:	ldr	r0, [r4, #0]
        write_length_ += len;
    3fc0:	adds	r3, #1
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    3fc2:	add.w	r9, r6, #544	; 0x220
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    3fc6:	add.w	r8, sp, #10
        //
        int pos = 0; // into data
    3fca:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    3fcc:	str	r3, [r6, #4]
    3fce:	b.n	3fd8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x15c4>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    3fd0:	cmp	r7, #0
    3fd2:	bgt.w	2ad2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbe>
    3fd6:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3fd8:	subs	r6, r5, r0
    3fda:	rsb	r3, r7, #1
          memcpy(dst,src,to_copy);
    3fde:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    3fe0:	cmp	r6, r3
    3fe2:	it	ge
    3fe4:	movge	r6, r3
          memcpy(dst,src,to_copy);
    3fe6:	mov	r2, r6
          pos += to_copy;
    3fe8:	add	r7, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    3fea:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3fee:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    3ff0:	add	r8, r6
          dst += to_copy;
    3ff2:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3ff4:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    3ff6:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    3ff8:	bne.n	3fd0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x15bc>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    3ffa:	movs	r2, #60	; 0x3c
    3ffc:	mov.w	r1, #512	; 0x200
    4000:	mov	r0, r9
    4002:	bl	a228 <usb_mtp_send>
    4006:	cmp	r0, #0
    4008:	ble.n	3ffa <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x15e6>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    400a:	str.w	r9, [r4]
    400e:	b.n	3fd0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x15bc>
    4010:	movw	r1, #65535	; 0xffff
    4014:	ldrb	r2, [r6, #0]
    4016:	ldr	r3, [r6, #4]
    4018:	strh.w	r1, [sp, #48]	; 0x30
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    401c:	cmp	r2, #0
    401e:	bne.w	2ac6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb2>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    4022:	cmp	r3, #0
    4024:	beq.w	44e2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1ace>
    4028:	ldr	r0, [r4, #0]
        write_length_ += len;
    402a:	adds	r3, #2
        
        const char * src=data;
    402c:	add.w	r9, sp, #48	; 0x30
        //
        int pos = 0; // into data
    4030:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4034:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    4038:	str	r3, [r6, #4]
    403a:	b.n	4044 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1630>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    403c:	cmp.w	r8, #1
    4040:	bgt.n	407c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1668>
    4042:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4044:	subs	r7, r5, r0
    4046:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    404a:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    404c:	cmp	r7, r3
    404e:	it	ge
    4050:	movge	r7, r3
          memcpy(dst,src,to_copy);
    4052:	mov	r2, r7
          pos += to_copy;
    4054:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    4056:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    405a:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    405c:	add	r9, r7
          dst += to_copy;
    405e:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4060:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4062:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4064:	bne.n	403c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1628>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    4066:	movs	r2, #60	; 0x3c
    4068:	mov.w	r1, #512	; 0x200
    406c:	mov	r0, sl
    406e:	bl	a228 <usb_mtp_send>
    4072:	cmp	r0, #0
    4074:	ble.n	4066 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1652>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    4076:	str.w	sl, [r4]
    407a:	b.n	403c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1628>
    407c:	movs	r1, #1
    407e:	ldrb	r2, [r6, #0]
    4080:	ldr	r3, [r6, #4]
    4082:	strb.w	r1, [sp, #14]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    4086:	cmp	r2, #0
    4088:	bne.w	2ac8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb4>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    408c:	cmp	r3, #0
    408e:	beq.w	44d8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1ac4>
    4092:	ldr	r0, [r4, #0]
        write_length_ += len;
    4094:	adds	r3, #1
        
        const char * src=data;
    4096:	add.w	r9, sp, #14
        //
        int pos = 0; // into data
    409a:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    409e:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    40a2:	str	r3, [r6, #4]
    40a4:	b.n	40ae <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x169a>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    40a6:	cmp.w	r8, #0
    40aa:	bgt.n	40e6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x16d2>
    40ac:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    40ae:	subs	r7, r5, r0
    40b0:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    40b4:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    40b6:	cmp	r7, r3
    40b8:	it	ge
    40ba:	movge	r7, r3
          memcpy(dst,src,to_copy);
    40bc:	mov	r2, r7
          pos += to_copy;
    40be:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    40c0:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    40c4:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    40c6:	add	r9, r7
          dst += to_copy;
    40c8:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    40ca:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    40cc:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    40ce:	bne.n	40a6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1692>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    40d0:	movs	r2, #60	; 0x3c
    40d2:	mov.w	r1, #512	; 0x200
    40d6:	mov	r0, sl
    40d8:	bl	a228 <usb_mtp_send>
    40dc:	cmp	r0, #0
    40de:	ble.n	40d0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x16bc>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    40e0:	str.w	sl, [r4]
    40e4:	b.n	40a6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1692>
    40e6:	movs	r1, #0
    40e8:	ldrb	r2, [r6, #0]
    40ea:	ldr	r3, [r6, #4]
    40ec:	strb.w	r1, [sp, #13]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    40f0:	cmp	r2, #0
    40f2:	bne.w	2aca <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb6>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    40f6:	cmp	r3, #0
    40f8:	beq.w	44ce <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1aba>
    40fc:	ldr	r0, [r4, #0]
        write_length_ += len;
    40fe:	adds	r3, #1
        
        const char * src=data;
    4100:	add.w	r9, sp, #13
        //
        int pos = 0; // into data
    4104:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4108:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    410c:	str	r3, [r6, #4]
    410e:	b.n	4118 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1704>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    4110:	cmp.w	r8, #0
    4114:	bgt.n	4150 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x173c>
    4116:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4118:	subs	r7, r5, r0
    411a:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    411e:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4120:	cmp	r7, r3
    4122:	it	ge
    4124:	movge	r7, r3
          memcpy(dst,src,to_copy);
    4126:	mov	r2, r7
          pos += to_copy;
    4128:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    412a:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    412e:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    4130:	add	r9, r7
          dst += to_copy;
    4132:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4134:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4136:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4138:	bne.n	4110 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x16fc>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    413a:	movs	r2, #60	; 0x3c
    413c:	mov.w	r1, #512	; 0x200
    4140:	mov	r0, sl
    4142:	bl	a228 <usb_mtp_send>
    4146:	cmp	r0, #0
    4148:	ble.n	413a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1726>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    414a:	str.w	sl, [r4]
    414e:	b.n	4110 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x16fc>
    4150:	movs	r1, #0
    4152:	ldrb	r2, [r6, #0]
    4154:	ldr	r3, [r6, #4]
    4156:	str	r1, [sp, #92]	; 0x5c
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    4158:	cmp	r2, #0
    415a:	bne.w	2acc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    415e:	cmp	r3, #0
    4160:	beq.w	44c4 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1ab0>
    4164:	ldr	r0, [r4, #0]
        write_length_ += len;
    4166:	adds	r3, #4
        
        const char * src=data;
    4168:	add.w	r9, sp, #92	; 0x5c
        //
        int pos = 0; // into data
    416c:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4170:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    4174:	str	r3, [r6, #4]
    4176:	b.n	4180 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x176c>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    4178:	cmp.w	r8, #3
    417c:	bgt.n	41b8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17a4>
    417e:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4180:	subs	r7, r5, r0
    4182:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    4186:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4188:	cmp	r7, r3
    418a:	it	ge
    418c:	movge	r7, r3
          memcpy(dst,src,to_copy);
    418e:	mov	r2, r7
          pos += to_copy;
    4190:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    4192:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4196:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    4198:	add	r9, r7
          dst += to_copy;
    419a:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    419c:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    419e:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    41a0:	bne.n	4178 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1764>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    41a2:	movs	r2, #60	; 0x3c
    41a4:	mov.w	r1, #512	; 0x200
    41a8:	mov	r0, sl
    41aa:	bl	a228 <usb_mtp_send>
    41ae:	cmp	r0, #0
    41b0:	ble.n	41a2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x178e>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    41b2:	str.w	sl, [r4]
    41b6:	b.n	4178 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1764>
    41b8:	movs	r1, #0
    41ba:	ldrb	r2, [r6, #0]
    41bc:	ldr	r3, [r6, #4]
    41be:	strb.w	r1, [sp, #12]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    41c2:	cmp	r2, #0
    41c4:	bne.w	2ace <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xba>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    41c8:	cmp	r3, #0
    41ca:	beq.w	463e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c2a>
    41ce:	ldr	r0, [r4, #0]
        write_length_ += len;
    41d0:	adds	r3, #1
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    41d2:	add.w	r9, r6, #544	; 0x220
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    41d6:	add.w	r8, sp, #12
        //
        int pos = 0; // into data
    41da:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    41dc:	str	r3, [r6, #4]
    41de:	b.n	41e8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17d4>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    41e0:	cmp	r7, #0
    41e2:	bgt.w	2ad2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbe>
    41e6:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    41e8:	subs	r6, r5, r0
    41ea:	rsb	r3, r7, #1
          memcpy(dst,src,to_copy);
    41ee:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    41f0:	cmp	r6, r3
    41f2:	it	ge
    41f4:	movge	r6, r3
          memcpy(dst,src,to_copy);
    41f6:	mov	r2, r6
          pos += to_copy;
    41f8:	add	r7, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    41fa:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    41fe:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    4200:	add	r8, r6
          dst += to_copy;
    4202:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4204:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4206:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4208:	bne.n	41e0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17cc>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    420a:	movs	r2, #60	; 0x3c
    420c:	mov.w	r1, #512	; 0x200
    4210:	mov	r0, r9
    4212:	bl	a228 <usb_mtp_send>
    4216:	cmp	r0, #0
    4218:	ble.n	420a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17f6>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    421a:	str.w	r9, [r4]
    421e:	b.n	41e0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17cc>
    4220:	movs	r1, #0
    4222:	ldrb	r2, [r6, #0]
    4224:	ldr	r3, [r6, #4]
    4226:	strb.w	r1, [sp, #16]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    422a:	cmp	r2, #0
    422c:	bne.w	2aca <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb6>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    4230:	cmp	r3, #0
    4232:	beq.w	44ba <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1aa6>
    4236:	ldr	r0, [r4, #0]
        write_length_ += len;
    4238:	adds	r3, #1
        
        const char * src=data;
    423a:	add.w	r9, sp, #16
        //
        int pos = 0; // into data
    423e:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4242:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    4246:	str	r3, [r6, #4]
    4248:	b.n	4252 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x183e>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    424a:	cmp.w	r8, #0
    424e:	bgt.n	428a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1876>
    4250:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4252:	subs	r7, r5, r0
    4254:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    4258:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    425a:	cmp	r7, r3
    425c:	it	ge
    425e:	movge	r7, r3
          memcpy(dst,src,to_copy);
    4260:	mov	r2, r7
          pos += to_copy;
    4262:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    4264:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4268:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    426a:	add	r9, r7
          dst += to_copy;
    426c:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    426e:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4270:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4272:	bne.n	424a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1836>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    4274:	movs	r2, #60	; 0x3c
    4276:	mov.w	r1, #512	; 0x200
    427a:	mov	r0, sl
    427c:	bl	a228 <usb_mtp_send>
    4280:	cmp	r0, #0
    4282:	ble.n	4274 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1860>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    4284:	str.w	sl, [r4]
    4288:	b.n	424a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1836>
    428a:	movs	r1, #0
    428c:	ldrb	r2, [r6, #0]
    428e:	ldr	r3, [r6, #4]
    4290:	str	r1, [sp, #96]	; 0x60
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    4292:	cmp	r2, #0
    4294:	bne.w	2acc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    4298:	cmp	r3, #0
    429a:	beq.w	44b0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1a9c>
    429e:	ldr	r0, [r4, #0]
        write_length_ += len;
    42a0:	adds	r3, #4
        
        const char * src=data;
    42a2:	add.w	r9, sp, #96	; 0x60
        //
        int pos = 0; // into data
    42a6:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    42aa:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    42ae:	str	r3, [r6, #4]
    42b0:	b.n	42ba <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x18a6>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    42b2:	cmp.w	r8, #3
    42b6:	bgt.n	42f2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x18de>
    42b8:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    42ba:	subs	r7, r5, r0
    42bc:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    42c0:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    42c2:	cmp	r7, r3
    42c4:	it	ge
    42c6:	movge	r7, r3
          memcpy(dst,src,to_copy);
    42c8:	mov	r2, r7
          pos += to_copy;
    42ca:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    42cc:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    42d0:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    42d2:	add	r9, r7
          dst += to_copy;
    42d4:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    42d6:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    42d8:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    42da:	bne.n	42b2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x189e>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    42dc:	movs	r2, #60	; 0x3c
    42de:	mov.w	r1, #512	; 0x200
    42e2:	mov	r0, sl
    42e4:	bl	a228 <usb_mtp_send>
    42e8:	cmp	r0, #0
    42ea:	ble.n	42dc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x18c8>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    42ec:	str.w	sl, [r4]
    42f0:	b.n	42b2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x189e>
    42f2:	movs	r1, #0
    42f4:	ldrb	r2, [r6, #0]
    42f6:	ldr	r3, [r6, #4]
    42f8:	strb.w	r1, [sp, #15]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    42fc:	cmp	r2, #0
    42fe:	bne.w	2ace <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xba>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    4302:	cmp	r3, #0
    4304:	beq.w	469c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1c88>
    4308:	ldr	r0, [r4, #0]
        write_length_ += len;
    430a:	adds	r3, #1
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    430c:	add.w	r9, r6, #544	; 0x220
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    4310:	add.w	r8, sp, #15
        //
        int pos = 0; // into data
    4314:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    4316:	str	r3, [r6, #4]
    4318:	b.n	4322 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x190e>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    431a:	cmp	r7, #0
    431c:	bgt.w	2ad2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbe>
    4320:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4322:	subs	r6, r5, r0
    4324:	rsb	r3, r7, #1
          memcpy(dst,src,to_copy);
    4328:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    432a:	cmp	r6, r3
    432c:	it	ge
    432e:	movge	r6, r3
          memcpy(dst,src,to_copy);
    4330:	mov	r2, r6
          pos += to_copy;
    4332:	add	r7, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    4334:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4338:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    433a:	add	r8, r6
          dst += to_copy;
    433c:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    433e:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4340:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4342:	bne.n	431a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1906>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    4344:	movs	r2, #60	; 0x3c
    4346:	mov.w	r1, #512	; 0x200
    434a:	mov	r0, r9
    434c:	bl	a228 <usb_mtp_send>
    4350:	cmp	r0, #0
    4352:	ble.n	4344 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1930>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    4354:	str.w	r9, [r4]
    4358:	b.n	431a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1906>
    435a:	movs	r1, #0
    435c:	ldrb	r2, [r6, #0]
    435e:	ldr	r3, [r6, #4]
    4360:	str	r1, [sp, #76]	; 0x4c
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    4362:	cmp	r2, #0
    4364:	bne.w	2af0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xdc>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    4368:	cmp	r3, #0
    436a:	beq.w	44a6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1a92>
    436e:	ldr	r0, [r4, #0]
        write_length_ += len;
    4370:	adds	r3, #4
        
        const char * src=data;
    4372:	add.w	r9, sp, #76	; 0x4c
        //
        int pos = 0; // into data
    4376:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    437a:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    437e:	str	r3, [r6, #4]
    4380:	b.n	438a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1976>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    4382:	cmp.w	r8, #3
    4386:	bgt.n	43c2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x19ae>
    4388:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    438a:	subs	r7, r5, r0
    438c:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    4390:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4392:	cmp	r7, r3
    4394:	it	ge
    4396:	movge	r7, r3
          memcpy(dst,src,to_copy);
    4398:	mov	r2, r7
          pos += to_copy;
    439a:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    439c:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    43a0:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    43a2:	add	r9, r7
          dst += to_copy;
    43a4:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    43a6:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    43a8:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    43aa:	bne.n	4382 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x196e>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    43ac:	movs	r2, #60	; 0x3c
    43ae:	mov.w	r1, #512	; 0x200
    43b2:	mov	r0, sl
    43b4:	bl	a228 <usb_mtp_send>
    43b8:	cmp	r0, #0
    43ba:	ble.n	43ac <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1998>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    43bc:	str.w	sl, [r4]
    43c0:	b.n	4382 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x196e>
    43c2:	movs	r1, #0
    43c4:	ldrb	r2, [r6, #0]
    43c6:	ldr	r3, [r6, #4]
    43c8:	str	r1, [sp, #72]	; 0x48
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    43ca:	cmp	r2, #0
    43cc:	bne.w	2acc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    43d0:	cmp	r3, #0
    43d2:	beq.n	449c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1a88>
    43d4:	ldr	r0, [r4, #0]
        write_length_ += len;
    43d6:	adds	r3, #4
        
        const char * src=data;
    43d8:	add.w	r9, sp, #72	; 0x48
        //
        int pos = 0; // into data
    43dc:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    43e0:	add.w	sl, r6, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    43e4:	str	r3, [r6, #4]
    43e6:	b.n	43f0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x19dc>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    43e8:	cmp.w	r8, #3
    43ec:	bgt.n	4428 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1a14>
    43ee:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    43f0:	subs	r7, r5, r0
    43f2:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    43f6:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    43f8:	cmp	r7, r3
    43fa:	it	ge
    43fc:	movge	r7, r3
          memcpy(dst,src,to_copy);
    43fe:	mov	r2, r7
          pos += to_copy;
    4400:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    4402:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4406:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    4408:	add	r9, r7
          dst += to_copy;
    440a:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    440c:	cmp	r7, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    440e:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4410:	bne.n	43e8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x19d4>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    4412:	movs	r2, #60	; 0x3c
    4414:	mov.w	r1, #512	; 0x200
    4418:	mov	r0, sl
    441a:	bl	a228 <usb_mtp_send>
    441e:	cmp	r0, #0
    4420:	ble.n	4412 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x19fe>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    4422:	str.w	sl, [r4]
    4426:	b.n	43e8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x19d4>
    4428:	movs	r1, #0
    442a:	ldrb	r2, [r6, #0]
    442c:	ldr	r3, [r6, #4]
    442e:	strb.w	r1, [sp, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    4432:	cmp	r2, #0
    4434:	bne.w	2ace <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xba>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    4438:	cmp	r3, #0
    443a:	beq.w	45dc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1bc8>
    443e:	ldr	r0, [r4, #0]
        write_length_ += len;
    4440:	adds	r3, #1
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4442:	add.w	r9, r6, #544	; 0x220
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    4446:	add.w	r8, sp, #4
        //
        int pos = 0; // into data
    444a:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    444c:	str	r3, [r6, #4]
    444e:	b.n	4458 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1a44>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    4450:	cmp	r7, #0
    4452:	bgt.w	2ad2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbe>
    4456:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4458:	subs	r6, r5, r0
    445a:	rsb	r3, r7, #1
          memcpy(dst,src,to_copy);
    445e:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4460:	cmp	r6, r3
    4462:	it	ge
    4464:	movge	r6, r3
          memcpy(dst,src,to_copy);
    4466:	mov	r2, r6
          pos += to_copy;
    4468:	add	r7, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    446a:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    446e:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    4470:	add	r8, r6
          dst += to_copy;
    4472:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4474:	cmp	r6, r5
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4476:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4478:	bne.n	4450 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1a3c>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    447a:	movs	r2, #60	; 0x3c
    447c:	mov.w	r1, #512	; 0x200
    4480:	mov	r0, r9
    4482:	bl	a228 <usb_mtp_send>
    4486:	cmp	r0, #0
    4488:	ble.n	447a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1a66>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    448a:	str.w	r9, [r4]
    448e:	b.n	4450 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1a3c>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    4490:	add.w	r2, r6, #544	; 0x220
    4494:	mov	r0, r2
    4496:	str	r2, [r4, #0]
    4498:	b.w	3852 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe3e>
    449c:	add.w	r2, r6, #544	; 0x220
    44a0:	mov	r0, r2
    44a2:	str	r2, [r4, #0]
    44a4:	b.n	43d6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x19c2>
    44a6:	add.w	r2, r6, #544	; 0x220
    44aa:	mov	r0, r2
    44ac:	str	r2, [r4, #0]
    44ae:	b.n	4370 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x195c>
    44b0:	add.w	r2, r6, #544	; 0x220
    44b4:	mov	r0, r2
    44b6:	str	r2, [r4, #0]
    44b8:	b.n	42a0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x188c>
    44ba:	add.w	r2, r6, #544	; 0x220
    44be:	mov	r0, r2
    44c0:	str	r2, [r4, #0]
    44c2:	b.n	4238 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1824>
    44c4:	add.w	r2, r6, #544	; 0x220
    44c8:	mov	r0, r2
    44ca:	str	r2, [r4, #0]
    44cc:	b.n	4166 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1752>
    44ce:	add.w	r2, r6, #544	; 0x220
    44d2:	mov	r0, r2
    44d4:	str	r2, [r4, #0]
    44d6:	b.n	40fe <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x16ea>
    44d8:	add.w	r2, r6, #544	; 0x220
    44dc:	mov	r0, r2
    44de:	str	r2, [r4, #0]
    44e0:	b.n	4094 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1680>
    44e2:	add.w	r2, r6, #544	; 0x220
    44e6:	mov	r0, r2
    44e8:	str	r2, [r4, #0]
    44ea:	b.n	402a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1616>
    44ec:	add.w	r2, r6, #544	; 0x220
    44f0:	mov	r0, r2
    44f2:	str	r2, [r4, #0]
    44f4:	b.n	3f56 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1542>
    44f6:	add.w	r2, r6, #544	; 0x220
    44fa:	mov	r0, r2
    44fc:	str	r2, [r4, #0]
    44fe:	b.w	3cd6 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x12c2>
    4502:	add.w	r2, r6, #544	; 0x220
    4506:	mov	r0, r2
    4508:	str	r2, [r4, #0]
    450a:	b.w	3c6c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1258>
    450e:	add.w	r2, r0, #544	; 0x220
    4512:	ldr	r4, [pc, #588]	; (4760 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1d4c>)
    4514:	mov	r0, r2
    4516:	str	r2, [r4, #0]
    4518:	b.w	3bfe <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x11ea>
    451c:	add.w	r2, r6, #544	; 0x220
    4520:	mov	r0, r2
    4522:	str	r2, [r4, #0]
    4524:	b.n	3eea <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x14d6>
    4526:	add.w	r2, r6, #544	; 0x220
    452a:	mov	r0, r2
    452c:	str	r2, [r4, #0]
    452e:	b.n	3e80 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x146c>
    4530:	add.w	r2, r6, #544	; 0x220
    4534:	mov	r0, r2
    4536:	str	r2, [r4, #0]
    4538:	b.n	3e18 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1404>
    453a:	add.w	r2, r6, #544	; 0x220
    453e:	mov	r0, r2
    4540:	str	r2, [r4, #0]
    4542:	b.n	3dae <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x139a>
    4544:	add.w	r2, r6, #544	; 0x220
    4548:	mov	r0, r2
    454a:	str	r2, [r4, #0]
    454c:	b.w	3d42 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x132e>
    4550:	add.w	r2, r0, #544	; 0x220
    4554:	ldr	r4, [pc, #520]	; (4760 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1d4c>)
    4556:	mov	r0, r2
    4558:	str	r2, [r4, #0]
    455a:	b.w	2b2a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x116>
    455e:	add.w	r2, r6, #544	; 0x220
    4562:	mov	r0, r2
    4564:	str	r2, [r4, #0]
    4566:	b.w	3b9e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x118a>
    456a:	add.w	r2, r0, #544	; 0x220
    456e:	ldr	r4, [pc, #496]	; (4760 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1d4c>)
    4570:	mov	r0, r2
    4572:	str	r2, [r4, #0]
    4574:	b.w	2c2c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x218>
    4578:	add.w	r2, r6, #544	; 0x220
    457c:	mov	r0, r2
    457e:	str	r2, [r4, #0]
    4580:	b.w	398c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf78>
    4584:	add.w	r2, r6, #544	; 0x220
    4588:	mov	r0, r2
    458a:	str	r2, [r4, #0]
    458c:	b.w	391c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xf08>
    4590:	add.w	r2, r0, #544	; 0x220
    4594:	ldr	r4, [pc, #456]	; (4760 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1d4c>)
    4596:	mov	r0, r2
    4598:	str	r2, [r4, #0]
    459a:	b.w	38ae <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xe9a>
    459e:	add.w	r2, r6, #544	; 0x220
    45a2:	mov	r0, r2
    45a4:	str	r2, [r4, #0]
    45a6:	b.w	35dc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xbc8>
    45aa:	add.w	r2, r6, #544	; 0x220
    45ae:	mov	r0, r2
    45b0:	str	r2, [r4, #0]
    45b2:	b.w	3780 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xd6c>
    45b6:	add.w	r2, r6, #544	; 0x220
    45ba:	mov	r0, r2
    45bc:	str	r2, [r4, #0]
    45be:	b.w	3716 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xd02>
    45c2:	add.w	r2, r6, #544	; 0x220
    45c6:	mov	r0, r2
    45c8:	str	r2, [r4, #0]
    45ca:	b.w	36ac <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc98>
    45ce:	add.w	r2, r0, #544	; 0x220
    45d2:	ldr	r4, [pc, #396]	; (4760 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1d4c>)
    45d4:	mov	r0, r2
    45d6:	str	r2, [r4, #0]
    45d8:	b.w	363c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xc28>
    45dc:	add.w	r2, r6, #544	; 0x220
    45e0:	mov	r0, r2
    45e2:	str	r2, [r4, #0]
    45e4:	b.n	4440 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1a2c>
    45e6:	add.w	r2, r6, #544	; 0x220
    45ea:	mov	r0, r2
    45ec:	str	r2, [r4, #0]
    45ee:	b.w	37e8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xdd4>
    45f2:	add.w	r2, r6, #544	; 0x220
    45f6:	mov	r0, r2
    45f8:	str	r2, [r4, #0]
    45fa:	b.w	34a2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xa8e>
    45fe:	add.w	r2, r6, #544	; 0x220
    4602:	mov	r0, r2
    4604:	str	r2, [r4, #0]
    4606:	b.w	3438 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xa24>
    460a:	add.w	r2, r6, #544	; 0x220
    460e:	mov	r0, r2
    4610:	str	r2, [r4, #0]
    4612:	b.w	3026 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x612>
    4616:	add.w	r2, r0, #544	; 0x220
    461a:	ldr	r4, [pc, #324]	; (4760 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1d4c>)
    461c:	mov	r0, r2
    461e:	str	r2, [r4, #0]
    4620:	b.w	2d14 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x300>
    4624:	add.w	r2, r6, #544	; 0x220
    4628:	mov	r0, r2
    462a:	str	r2, [r4, #0]
    462c:	b.w	2e0c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x3f8>
    4630:	add.w	r2, r0, #544	; 0x220
    4634:	ldr	r4, [pc, #296]	; (4760 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1d4c>)
    4636:	mov	r0, r2
    4638:	str	r2, [r4, #0]
    463a:	b.w	2ca0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x28c>
    463e:	add.w	r2, r6, #544	; 0x220
    4642:	mov	r0, r2
    4644:	str	r2, [r4, #0]
    4646:	b.n	41d0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x17bc>
    4648:	add.w	r2, r6, #544	; 0x220
    464c:	mov	r0, r2
    464e:	str	r2, [r4, #0]
    4650:	b.w	2da2 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x38e>
    4654:	add.w	r2, r6, #544	; 0x220
    4658:	mov	r0, r2
    465a:	str	r2, [r4, #0]
    465c:	b.n	3fc0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x15ac>
    465e:	add.w	r2, r0, #544	; 0x220
    4662:	ldr	r4, [pc, #252]	; (4760 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1d4c>)
    4664:	mov	r0, r2
    4666:	str	r2, [r4, #0]
    4668:	b.w	2bb8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1a4>
    466c:	add.w	r2, r6, #544	; 0x220
    4670:	mov	r0, r2
    4672:	str	r2, [r4, #0]
    4674:	b.w	3b36 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1122>
    4678:	add.w	r2, r6, #544	; 0x220
    467c:	mov	r0, r2
    467e:	str	r2, [r4, #0]
    4680:	b.w	3acc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x10b8>
    4684:	add.w	r2, r6, #544	; 0x220
    4688:	mov	r0, r2
    468a:	str	r2, [r4, #0]
    468c:	b.w	3a64 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1050>
    4690:	add.w	r2, r6, #544	; 0x220
    4694:	mov	r0, r2
    4696:	str	r2, [r4, #0]
    4698:	b.w	39f8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xfe4>
    469c:	add.w	r2, r6, #544	; 0x220
    46a0:	mov	r0, r2
    46a2:	str	r2, [r4, #0]
    46a4:	b.n	430a <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x18f6>
    46a6:	add.w	r2, r6, #544	; 0x220
    46aa:	mov	r0, r2
    46ac:	str	r2, [r4, #0]
    46ae:	b.w	356c <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xb58>
    46b2:	add.w	r2, r0, #544	; 0x220
    46b6:	ldr	r4, [pc, #168]	; (4760 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1d4c>)
    46b8:	mov	r0, r2
    46ba:	str	r2, [r4, #0]
    46bc:	b.w	34fe <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0xaea>
    46c0:	add.w	r2, r6, #544	; 0x220
    46c4:	mov	r0, r2
    46c6:	str	r2, [r4, #0]
    46c8:	b.w	3232 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x81e>
    46cc:	add.w	r2, r6, #544	; 0x220
    46d0:	mov	r0, r2
    46d2:	str	r2, [r4, #0]
    46d4:	b.w	33d0 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x9bc>
    46d8:	add.w	r2, r6, #544	; 0x220
    46dc:	mov	r0, r2
    46de:	str	r2, [r4, #0]
    46e0:	b.w	3366 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x952>
    46e4:	add.w	r2, r6, #544	; 0x220
    46e8:	mov	r0, r2
    46ea:	str	r2, [r4, #0]
    46ec:	b.w	32fc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x8e8>
    46f0:	add.w	r2, r0, #544	; 0x220
    46f4:	ldr	r4, [pc, #104]	; (4760 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x1d4c>)
    46f6:	mov	r0, r2
    46f8:	str	r2, [r4, #0]
    46fa:	b.w	328e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x87a>
    46fe:	add.w	r2, r6, #544	; 0x220
    4702:	mov	r0, r2
    4704:	str	r2, [r4, #0]
    4706:	b.w	31c8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x7b4>
    470a:	add.w	r2, r6, #544	; 0x220
    470e:	mov	r0, r2
    4710:	str	r2, [r4, #0]
    4712:	b.w	3160 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x74c>
    4716:	add.w	r2, r6, #544	; 0x220
    471a:	mov	r0, r2
    471c:	str	r2, [r4, #0]
    471e:	b.w	30f8 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x6e4>
    4722:	add.w	r2, r6, #544	; 0x220
    4726:	mov	r0, r2
    4728:	str	r2, [r4, #0]
    472a:	b.w	308e <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x67a>
    472e:	add.w	r2, r6, #544	; 0x220
    4732:	mov	r0, r2
    4734:	str	r2, [r4, #0]
    4736:	b.w	2fbc <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x5a8>
    473a:	add.w	r2, r6, #544	; 0x220
    473e:	mov	r0, r2
    4740:	str	r2, [r4, #0]
    4742:	b.w	2f54 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x540>
    4746:	add.w	r2, r6, #544	; 0x220
    474a:	mov	r0, r2
    474c:	str	r2, [r4, #0]
    474e:	b.w	2eea <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x4d6>
    4752:	add.w	r2, r6, #544	; 0x220
    4756:	mov	r0, r2
    4758:	str	r2, [r4, #0]
    475a:	b.w	2e80 <MTPD::getObjectPropDesc(unsigned long, unsigned long)+0x46c>
    475e:	nop
    4760:	.word	0x200014fc

00004764 <MTPD::getObjectPropValue(unsigned long, unsigned long)>:
        default:
          break;
      }
    }

    void getObjectPropValue(uint32_t p1, uint32_t p2)
    4764:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4768:	ldr	r3, [pc, #676]	; (4a10 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x2ac>)
    476a:	sub	sp, #332	; 0x14c
    476c:	mov	r4, r2
    476e:	mov	r5, r0
    { return (uint64_t)512 *(uint64_t)(zFs_[store].totalSectors() - zFs_[store].eofSector()); }

    char * getName(uint32_t store) {return zFs_[store].getName();}

    uint32_t Info(uint32_t handle, char *filename, uint32_t *size, uint32_t *parent)
    { return zFs_[0].Info(handle, filename, size, parent);}
    4770:	ldr	r6, [r3, #80]	; 0x50
    4772:	add.w	r8, sp, #36	; 0x24
    4776:	add	r3, sp, #32
    4778:	add	r2, sp, #72	; 0x48
    477a:	mov	r0, r6
    477c:	str.w	r8, [sp]
        default:
          break;
      }
    }

    void getObjectPropValue(uint32_t p1, uint32_t p2)
    4780:	mov	r6, r1
    { return (uint64_t)512 *(uint64_t)(zFs_[store].totalSectors() - zFs_[store].eofSector()); }

    char * getName(uint32_t store) {return zFs_[store].getName();}

    uint32_t Info(uint32_t handle, char *filename, uint32_t *size, uint32_t *parent)
    { return zFs_[0].Info(handle, filename, size, parent);}
    4782:	bl	70ac <zeroFS_class::Info(unsigned long, char*, unsigned long*, unsigned long*)>
      uint16_t store = 0;
      uint32_t storage = Store2Storage(store);

      uint32_t dir = (size == 0xFFFFFFFFUL);

      switch(p2)
    4786:	mvn.w	r3, #56320	; 0xdc00
      mFS.Info(p1, filename, &size, &parent);

      uint16_t store = 0;
      uint32_t storage = Store2Storage(store);

      uint32_t dir = (size == 0xFFFFFFFFUL);
    478a:	ldr	r2, [sp, #32]

      switch(p2)
    478c:	add	r3, r4
    478e:	cmp	r3, #67	; 0x43
    4790:	bhi.n	4830 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xcc>
    4792:	tbh	[pc, r3, lsl #1]
    4796:	.short	0x0044
    4798:	.word	0x009e008c
    479c:	.word	0x004d00a9
    47a0:	.word	0x00b1004d
    47a4:	.word	0x0141012f
    47a8:	.word	0x00ed004d
    47ac:	.word	0x004d004d
    47b0:	.word	0x004d004d
    47b4:	.word	0x004d004d
    47b8:	.word	0x004d004d
    47bc:	.word	0x004d004d
    47c0:	.word	0x004d004d
    47c4:	.word	0x004d004d
    47c8:	.word	0x004d004d
    47cc:	.word	0x004d004d
    47d0:	.word	0x004d004d
    47d4:	.word	0x004d004d
    47d8:	.word	0x004d004d
    47dc:	.word	0x004d004d
    47e0:	.word	0x004d004d
    47e4:	.word	0x004d004d
    47e8:	.word	0x004d004d
    47ec:	.word	0x004d004d
    47f0:	.word	0x004d004d
    47f4:	.word	0x004d004d
    47f8:	.word	0x004d004d
    47fc:	.word	0x004d004d
    4800:	.word	0x004d004d
    4804:	.word	0x004d004d
    4808:	.word	0x004d004d
    480c:	.word	0x004d004d
    4810:	.word	0x004d004d
    4814:	.word	0x0125004d
    4818:	.word	0x004d004d
    481c:	.short	0x0050
    481e:	movs	r2, #1
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    4820:	ldrb	r3, [r5, #0]
    4822:	str	r2, [sp, #40]	; 0x28
    4824:	cmp	r3, #0
    4826:	beq.w	4d8a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x626>
      {
        write_length_ += len;
    482a:	ldr	r3, [r5, #4]
    482c:	adds	r3, #4
    482e:	str	r3, [r5, #4]
          writestring(filename);
          break;
        default:
          break;
      }
    }
    4830:	add	sp, #332	; 0x14c
    4832:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

#define Store2Storage(x) (x+1)
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    4836:	ldrb.w	r4, [sp, #72]	; 0x48
    483a:	cmp	r4, #0
    483c:	bne.w	4b24 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x3c0>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    4840:	ldrb	r3, [r5, #0]
    4842:	strb.w	r4, [sp, #18]
    4846:	cmp	r3, #0
    4848:	bne.w	4a02 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x29e>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    484c:	ldr	r3, [r5, #4]
    484e:	cmp	r3, #0
    4850:	beq.w	51ec <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xa88>
    4854:	ldr	r4, [pc, #444]	; (4a14 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x2b0>)
    4856:	ldr	r0, [r4, #0]
        write_length_ += len;
    4858:	adds	r3, #1
        
        const char * src=data;
    485a:	add.w	r6, sp, #18
    485e:	add.w	r7, r5, #1056	; 0x420
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4862:	add.w	r8, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    4866:	str	r3, [r5, #4]
        
        const char * src=data;
        //
        int pos = 0; // into data
    4868:	mov.w	r9, #0
    486c:	b.n	4876 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x112>
        while(pos<len)
    486e:	cmp.w	r9, #0
    4872:	bgt.n	4830 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xcc>
    4874:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4876:	subs	r5, r7, r0
    4878:	rsb	r3, r9, #1
          memcpy(dst,src,to_copy);
    487c:	mov	r1, r6
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    487e:	cmp	r5, r3
    4880:	it	ge
    4882:	movge	r5, r3
          memcpy(dst,src,to_copy);
    4884:	mov	r2, r5
          pos += to_copy;
    4886:	add	r9, r5
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    4888:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    488c:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    488e:	add	r6, r5
          dst += to_copy;
    4890:	add	r5, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4892:	cmp	r5, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4894:	str	r5, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4896:	bne.n	486e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x10a>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    4898:	movs	r2, #60	; 0x3c
    489a:	mov.w	r1, #512	; 0x200
    489e:	mov	r0, r8
    48a0:	bl	a228 <usb_mtp_send>
    48a4:	cmp	r0, #0
    48a6:	ble.n	4898 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x134>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    48a8:	str.w	r8, [r4]
    48ac:	b.n	486e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x10a>
      {
        case MTP_PROPERTY_STORAGE_ID:         //0xDC01:
          write32(storage);
          break;
        case MTP_PROPERTY_OBJECT_FORMAT:      //0xDC02:
          write16(dir?0x3001:0x3000);
    48ae:	adds	r2, #1
    48b0:	movw	r3, #12289	; 0x3001
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    48b4:	ldrb	r2, [r5, #0]
      {
        case MTP_PROPERTY_STORAGE_ID:         //0xDC01:
          write32(storage);
          break;
        case MTP_PROPERTY_OBJECT_FORMAT:      //0xDC02:
          write16(dir?0x3001:0x3000);
    48b6:	it	ne
    48b8:	movne.w	r3, #12288	; 0x3000
    48bc:	strh.w	r3, [sp, #20]
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    48c0:	ldr	r3, [r5, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    48c2:	cmp	r2, #0
    48c4:	beq.w	4e50 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x6ec>
      {
        write_length_ += len;
    48c8:	adds	r3, #2
    48ca:	str	r3, [r5, #4]
          writestring(filename);
          break;
        default:
          break;
      }
    }
    48cc:	add	sp, #332	; 0x14c
    48ce:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    48d2:	movs	r2, #0
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    48d4:	ldrb	r3, [r5, #0]
    48d6:	strh.w	r2, [sp, #22]
    48da:	cmp	r3, #0
    48dc:	beq.w	4dec <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x688>
      {
        write_length_ += len;
    48e0:	ldr	r3, [r5, #4]
    48e2:	adds	r3, #2
    48e4:	str	r3, [r5, #4]
    48e6:	b.n	4830 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xcc>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    48e8:	ldrb	r3, [r5, #0]
    48ea:	str	r2, [sp, #48]	; 0x30
    48ec:	cmp	r3, #0
    48ee:	beq.w	4cbc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x558>
      {
        write_length_ += len;
    48f2:	ldr	r3, [r5, #4]
    48f4:	adds	r3, #4
    48f6:	b.n	482c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xc8>

#define Store2Storage(x) (x+1)
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    48f8:	ldrb.w	r4, [sp, #72]	; 0x48
    48fc:	cmp	r4, #0
    48fe:	bne.w	4a88 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x324>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    4902:	ldrb	r3, [r5, #0]
    4904:	strb.w	r4, [sp, #14]
    4908:	cmp	r3, #0
    490a:	bne.n	4a02 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x29e>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    490c:	ldr	r3, [r5, #4]
    490e:	cmp	r3, #0
    4910:	beq.w	5206 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xaa2>
    4914:	ldr	r4, [pc, #252]	; (4a14 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x2b0>)
    4916:	ldr	r0, [r4, #0]
        write_length_ += len;
    4918:	adds	r3, #1
        
        const char * src=data;
    491a:	add.w	r6, sp, #14
    491e:	add.w	r7, r5, #1056	; 0x420
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4922:	add.w	r8, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    4926:	str	r3, [r5, #4]
        
        const char * src=data;
        //
        int pos = 0; // into data
    4928:	mov.w	r9, #0
    492c:	b.n	4938 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1d4>
        while(pos<len)
    492e:	cmp.w	r9, #0
    4932:	bgt.w	4830 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xcc>
    4936:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4938:	subs	r5, r7, r0
    493a:	rsb	r3, r9, #1
          memcpy(dst,src,to_copy);
    493e:	mov	r1, r6
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4940:	cmp	r5, r3
    4942:	it	ge
    4944:	movge	r5, r3
          memcpy(dst,src,to_copy);
    4946:	mov	r2, r5
          pos += to_copy;
    4948:	add	r9, r5
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    494a:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    494e:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    4950:	add	r6, r5
          dst += to_copy;
    4952:	add	r5, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4954:	cmp	r5, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4956:	str	r5, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4958:	bne.n	492e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1ca>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    495a:	movs	r2, #60	; 0x3c
    495c:	mov.w	r1, #512	; 0x200
    4960:	mov	r0, r8
    4962:	bl	a228 <usb_mtp_send>
    4966:	cmp	r0, #0
    4968:	ble.n	495a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1f6>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    496a:	str.w	r8, [r4]
    496e:	b.n	492e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1ca>
    4970:	ldr.w	r2, [r8]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    4974:	ldrb	r3, [r5, #0]
    4976:	str	r2, [sp, #52]	; 0x34
    4978:	cmp	r3, #0
    497a:	bne.w	482a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xc6>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    497e:	ldr	r3, [r5, #4]
    4980:	cmp	r3, #0
    4982:	beq.w	51d2 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xa6e>
    4986:	ldr	r4, [pc, #140]	; (4a14 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x2b0>)
    4988:	ldr	r0, [r4, #0]
        write_length_ += len;
    498a:	adds	r3, #4
        
        const char * src=data;
    498c:	add	r6, sp, #52	; 0x34
    498e:	add.w	r7, r5, #1056	; 0x420
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4992:	add.w	r8, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    4996:	str	r3, [r5, #4]
        
        const char * src=data;
        //
        int pos = 0; // into data
    4998:	mov.w	r9, #0
    499c:	b.n	49a8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x244>
        while(pos<len)
    499e:	cmp.w	r9, #3
    49a2:	bgt.w	4830 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xcc>
    49a6:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    49a8:	subs	r5, r7, r0
    49aa:	rsb	r3, r9, #4
          memcpy(dst,src,to_copy);
    49ae:	mov	r1, r6
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    49b0:	cmp	r5, r3
    49b2:	it	ge
    49b4:	movge	r5, r3
          memcpy(dst,src,to_copy);
    49b6:	mov	r2, r5
          pos += to_copy;
    49b8:	add	r9, r5
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    49ba:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    49be:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    49c0:	add	r6, r5
          dst += to_copy;
    49c2:	add	r5, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    49c4:	cmp	r5, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    49c6:	str	r5, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    49c8:	bne.n	499e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x23a>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    49ca:	movs	r2, #60	; 0x3c
    49cc:	mov.w	r1, #512	; 0x200
    49d0:	mov	r0, r8
    49d2:	bl	a228 <usb_mtp_send>
    49d6:	cmp	r0, #0
    49d8:	ble.n	49ca <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x266>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    49da:	str.w	r8, [r4]
    49de:	b.n	499e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x23a>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    49e0:	ldrb	r3, [r5, #0]
    49e2:	str	r6, [sp, #60]	; 0x3c
    49e4:	cmp	r3, #0
    49e6:	beq.w	4eb0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x74c>
      {
        write_length_ += len;
    49ea:	ldr	r3, [r5, #4]
    49ec:	adds	r3, #4
    49ee:	adds	r3, #4
    49f0:	adds	r3, #4
    49f2:	b.n	482c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xc8>
    49f4:	movs	r2, #0
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    49f6:	ldrb	r3, [r5, #0]
    49f8:	strb.w	r2, [sp, #16]
    49fc:	cmp	r3, #0
    49fe:	beq.w	5048 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x8e4>
      {
        write_length_ += len;
    4a02:	ldr	r3, [r5, #4]
    4a04:	adds	r3, #1
    4a06:	str	r3, [r5, #4]
          writestring(filename);
          break;
        default:
          break;
      }
    }
    4a08:	add	sp, #332	; 0x14c
    4a0a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4a0e:	nop
    4a10:	.word	0x20009508
    4a14:	.word	0x200014fc
    4a18:	movs	r2, #0
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    4a1a:	ldrb	r3, [r5, #0]
    4a1c:	strb.w	r2, [sp, #17]
    4a20:	cmp	r3, #0
    4a22:	bne.n	4a02 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x29e>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    4a24:	ldr	r3, [r5, #4]
    4a26:	cmp	r3, #0
    4a28:	beq.w	51e0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xa7c>
    4a2c:	ldr	r4, [pc, #752]	; (4d20 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x5bc>)
    4a2e:	ldr	r0, [r4, #0]
        write_length_ += len;
    4a30:	adds	r3, #1
        
        const char * src=data;
    4a32:	add.w	r6, sp, #17
    4a36:	add.w	r7, r5, #1056	; 0x420
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4a3a:	add.w	r8, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    4a3e:	str	r3, [r5, #4]
        
        const char * src=data;
        //
        int pos = 0; // into data
    4a40:	mov.w	r9, #0
    4a44:	b.n	4a50 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x2ec>
        while(pos<len)
    4a46:	cmp.w	r9, #0
    4a4a:	bgt.w	4830 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xcc>
    4a4e:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4a50:	subs	r5, r7, r0
    4a52:	rsb	r3, r9, #1
          memcpy(dst,src,to_copy);
    4a56:	mov	r1, r6
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4a58:	cmp	r5, r3
    4a5a:	it	ge
    4a5c:	movge	r5, r3
          memcpy(dst,src,to_copy);
    4a5e:	mov	r2, r5
          pos += to_copy;
    4a60:	add	r9, r5
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    4a62:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4a66:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    4a68:	add	r6, r5
          dst += to_copy;
    4a6a:	add	r5, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4a6c:	cmp	r5, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4a6e:	str	r5, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4a70:	bne.n	4a46 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x2e2>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    4a72:	movs	r2, #60	; 0x3c
    4a74:	mov.w	r1, #512	; 0x200
    4a78:	mov	r0, r8
    4a7a:	bl	a228 <usb_mtp_send>
    4a7e:	cmp	r0, #0
    4a80:	ble.n	4a72 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x30e>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    4a82:	str.w	r8, [r4]
    4a86:	b.n	4a46 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x2e2>
#define Store2Storage(x) (x+1)
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
    4a88:	add	r0, sp, #72	; 0x48
    4a8a:	bl	c280 <strlen>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    4a8e:	ldrb	r2, [r5, #0]
    4a90:	adds	r0, #1
      {
        write_length_ += len;
    4a92:	ldr	r3, [r5, #4]
    4a94:	strb.w	r0, [sp, #15]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    4a98:	cmp	r2, #0
    4a9a:	beq.w	50e6 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x982>
      {
        write_length_ += len;
    4a9e:	adds	r3, #1
    4aa0:	str	r3, [r5, #4]
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
    4aa2:	add.w	r8, sp, #72	; 0x48
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4aa6:	add.w	sl, r5, #544	; 0x220
    4aaa:	b.n	4aba <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x356>
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    4aac:	adds	r3, #2
    4aae:	str	r3, [r5, #4]
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    4ab0:	ldrb.w	r4, [r8, #1]!
    4ab4:	cmp	r4, #0
    4ab6:	beq.w	4c50 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x4ec>
    4aba:	strh.w	r4, [sp, #26]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    4abe:	cmp	r2, #0
    4ac0:	bne.n	4aac <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x348>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    4ac2:	ldr	r4, [pc, #604]	; (4d20 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x5bc>)
    4ac4:	cmp	r3, #0
    4ac6:	beq.n	4bba <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x456>
    4ac8:	ldr	r0, [r4, #0]
        write_length_ += len;
    4aca:	adds	r3, #2
    4acc:	add.w	r9, r5, #1056	; 0x420
        
        const char * src=data;
    4ad0:	add.w	r7, sp, #26
        //
        int pos = 0; // into data
    4ad4:	movs	r6, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    4ad6:	str	r3, [r5, #4]
    4ad8:	b.n	4ae0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x37c>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    4ada:	cmp	r6, #1
    4adc:	bgt.n	4b1e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x3ba>
    4ade:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4ae0:	rsb	r2, r0, r9
    4ae4:	rsb	r3, r6, #2
          memcpy(dst,src,to_copy);
    4ae8:	mov	r1, r7
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4aea:	cmp	r2, r3
    4aec:	it	ge
    4aee:	movge	r2, r3
    4af0:	mov	fp, r2
          memcpy(dst,src,to_copy);
          pos += to_copy;
    4af2:	add	r6, r2
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    4af4:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4af8:	ldr	r2, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    4afa:	add	r7, fp
          dst += to_copy;
    4afc:	add.w	r3, r2, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4b00:	cmp	r3, r9
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4b02:	str	r3, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4b04:	bne.n	4ada <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x376>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    4b06:	movs	r2, #60	; 0x3c
    4b08:	mov.w	r1, #512	; 0x200
    4b0c:	mov	r0, sl
    4b0e:	bl	a228 <usb_mtp_send>
    4b12:	cmp	r0, #0
    4b14:	ble.n	4b06 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x3a2>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    4b16:	cmp	r6, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    4b18:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    4b1c:	ble.n	4ade <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x37a>
    4b1e:	ldrb	r2, [r5, #0]
    4b20:	ldr	r3, [r5, #4]
    4b22:	b.n	4ab0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x34c>
#define Store2Storage(x) (x+1)
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
    4b24:	add	r0, sp, #72	; 0x48
    4b26:	bl	c280 <strlen>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    4b2a:	ldrb	r2, [r5, #0]
    4b2c:	adds	r0, #1
      {
        write_length_ += len;
    4b2e:	ldr	r3, [r5, #4]
    4b30:	strb.w	r0, [sp, #19]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    4b34:	cmp	r2, #0
    4b36:	beq.w	5146 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x9e2>
      {
        write_length_ += len;
    4b3a:	adds	r3, #1
    4b3c:	str	r3, [r5, #4]
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
    4b3e:	add	r7, sp, #72	; 0x48
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4b40:	add.w	sl, r5, #544	; 0x220
    4b44:	b.n	4b52 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x3ee>
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    4b46:	adds	r3, #2
    4b48:	str	r3, [r5, #4]
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    4b4a:	ldrb.w	r4, [r7, #1]!
    4b4e:	cmp	r4, #0
    4b50:	beq.n	4bd6 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x472>
    4b52:	strh.w	r4, [sp, #30]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    4b56:	cmp	r2, #0
    4b58:	bne.n	4b46 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x3e2>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    4b5a:	ldr	r4, [pc, #452]	; (4d20 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x5bc>)
    4b5c:	cbz	r3, 4bc2 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x45e>
    4b5e:	ldr	r0, [r4, #0]
        write_length_ += len;
    4b60:	adds	r3, #2
    4b62:	add.w	r9, r5, #1056	; 0x420
        
        const char * src=data;
    4b66:	add.w	r8, sp, #30
        //
        int pos = 0; // into data
    4b6a:	movs	r6, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    4b6c:	str	r3, [r5, #4]
    4b6e:	b.n	4b76 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x412>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    4b70:	cmp	r6, #1
    4b72:	bgt.n	4bb4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x450>
    4b74:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4b76:	rsb	r2, r0, r9
    4b7a:	rsb	r3, r6, #2
          memcpy(dst,src,to_copy);
    4b7e:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4b80:	cmp	r2, r3
    4b82:	it	ge
    4b84:	movge	r2, r3
    4b86:	mov	fp, r2
          memcpy(dst,src,to_copy);
          pos += to_copy;
    4b88:	add	r6, r2
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    4b8a:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4b8e:	ldr	r2, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    4b90:	add	r8, fp
          dst += to_copy;
    4b92:	add.w	r3, r2, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4b96:	cmp	r3, r9
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4b98:	str	r3, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4b9a:	bne.n	4b70 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x40c>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    4b9c:	movs	r2, #60	; 0x3c
    4b9e:	mov.w	r1, #512	; 0x200
    4ba2:	mov	r0, sl
    4ba4:	bl	a228 <usb_mtp_send>
    4ba8:	cmp	r0, #0
    4baa:	ble.n	4b9c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x438>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    4bac:	cmp	r6, #1
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    4bae:	str.w	sl, [r4]
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    4bb2:	ble.n	4b74 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x410>
    4bb4:	ldrb	r2, [r5, #0]
    4bb6:	ldr	r3, [r5, #4]
    4bb8:	b.n	4b4a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x3e6>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    4bba:	mov	r0, sl
    4bbc:	str.w	sl, [r4]
    4bc0:	b.n	4aca <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x366>
    4bc2:	mov	r0, sl
    4bc4:	str.w	sl, [r4]
    4bc8:	b.n	4b60 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x3fc>
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    4bca:	ldrb.w	r4, [sp, #72]	; 0x48
    4bce:	ldrb	r2, [r5, #0]
    4bd0:	ldr	r3, [r5, #4]
    4bd2:	cmp	r4, #0
    4bd4:	bne.n	4b3e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x3da>
    4bd6:	movs	r1, #0
    4bd8:	strh.w	r1, [sp, #28]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    4bdc:	cmp	r2, #0
    4bde:	bne.w	48c8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x164>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    4be2:	cmp	r3, #0
    4be4:	beq.w	5238 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xad4>
    4be8:	ldr	r4, [pc, #308]	; (4d20 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x5bc>)
    4bea:	ldr	r0, [r4, #0]
        write_length_ += len;
    4bec:	adds	r3, #2
        
        const char * src=data;
    4bee:	add	r6, sp, #28
    4bf0:	add.w	r7, r5, #1056	; 0x420
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4bf4:	add.w	r8, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    4bf8:	str	r3, [r5, #4]
        
        const char * src=data;
        //
        int pos = 0; // into data
    4bfa:	mov.w	r9, #0
    4bfe:	b.n	4c0a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x4a6>
        while(pos<len)
    4c00:	cmp.w	r9, #1
    4c04:	bgt.w	4830 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xcc>
    4c08:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4c0a:	subs	r5, r7, r0
    4c0c:	rsb	r3, r9, #2
          memcpy(dst,src,to_copy);
    4c10:	mov	r1, r6
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4c12:	cmp	r5, r3
    4c14:	it	ge
    4c16:	movge	r5, r3
          memcpy(dst,src,to_copy);
    4c18:	mov	r2, r5
          pos += to_copy;
    4c1a:	add	r9, r5
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    4c1c:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4c20:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    4c22:	add	r6, r5
          dst += to_copy;
    4c24:	add	r5, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4c26:	cmp	r5, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4c28:	str	r5, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4c2a:	bne.n	4c00 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x49c>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    4c2c:	movs	r2, #60	; 0x3c
    4c2e:	mov.w	r1, #512	; 0x200
    4c32:	mov	r0, r8
    4c34:	bl	a228 <usb_mtp_send>
    4c38:	cmp	r0, #0
    4c3a:	ble.n	4c2c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x4c8>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    4c3c:	str.w	r8, [r4]
    4c40:	b.n	4c00 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x49c>
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    4c42:	ldrb.w	r4, [sp, #72]	; 0x48
    4c46:	ldrb	r2, [r5, #0]
    4c48:	ldr	r3, [r5, #4]
    4c4a:	cmp	r4, #0
    4c4c:	bne.w	4aa2 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x33e>
    4c50:	movs	r1, #0
    4c52:	strh.w	r1, [sp, #24]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    4c56:	cmp	r2, #0
    4c58:	bne.w	48c8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x164>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    4c5c:	cmp	r3, #0
    4c5e:	beq.w	5220 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xabc>
    4c62:	ldr	r4, [pc, #188]	; (4d20 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x5bc>)
    4c64:	ldr	r0, [r4, #0]
        write_length_ += len;
    4c66:	adds	r3, #2
        
        const char * src=data;
    4c68:	add	r6, sp, #24
    4c6a:	add.w	r7, r5, #1056	; 0x420
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4c6e:	add.w	r8, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    4c72:	str	r3, [r5, #4]
        
        const char * src=data;
        //
        int pos = 0; // into data
    4c74:	mov.w	r9, #0
    4c78:	b.n	4c84 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x520>
        while(pos<len)
    4c7a:	cmp.w	r9, #1
    4c7e:	bgt.w	4830 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xcc>
    4c82:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4c84:	subs	r5, r7, r0
    4c86:	rsb	r3, r9, #2
          memcpy(dst,src,to_copy);
    4c8a:	mov	r1, r6
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4c8c:	cmp	r5, r3
    4c8e:	it	ge
    4c90:	movge	r5, r3
          memcpy(dst,src,to_copy);
    4c92:	mov	r2, r5
          pos += to_copy;
    4c94:	add	r9, r5
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    4c96:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4c9a:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    4c9c:	add	r6, r5
          dst += to_copy;
    4c9e:	add	r5, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4ca0:	cmp	r5, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4ca2:	str	r5, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4ca4:	bne.n	4c7a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x516>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    4ca6:	movs	r2, #60	; 0x3c
    4ca8:	mov.w	r1, #512	; 0x200
    4cac:	mov	r0, r8
    4cae:	bl	a228 <usb_mtp_send>
    4cb2:	cmp	r0, #0
    4cb4:	ble.n	4ca6 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x542>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    4cb6:	str.w	r8, [r4]
    4cba:	b.n	4c7a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x516>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    4cbc:	ldr	r3, [r5, #4]
    4cbe:	cmp	r3, #0
    4cc0:	beq.w	50b0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x94c>
    4cc4:	ldr	r4, [pc, #88]	; (4d20 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x5bc>)
    4cc6:	ldr	r0, [r4, #0]
        write_length_ += len;
    4cc8:	adds	r3, #4
        
        const char * src=data;
    4cca:	add.w	r9, sp, #48	; 0x30
    4cce:	add.w	r6, r5, #1056	; 0x420
        //
        int pos = 0; // into data
    4cd2:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    4cd6:	str	r3, [r5, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4cd8:	add.w	sl, r5, #544	; 0x220
    4cdc:	b.n	4ce6 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x582>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    4cde:	cmp.w	r8, #3
    4ce2:	bgt.n	4d24 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x5c0>
    4ce4:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4ce6:	subs	r7, r6, r0
    4ce8:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    4cec:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4cee:	cmp	r7, r3
    4cf0:	it	ge
    4cf2:	movge	r7, r3
          memcpy(dst,src,to_copy);
    4cf4:	mov	r2, r7
          pos += to_copy;
    4cf6:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    4cf8:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4cfc:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    4cfe:	add	r9, r7
          dst += to_copy;
    4d00:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4d02:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4d04:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4d06:	bne.n	4cde <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x57a>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    4d08:	movs	r2, #60	; 0x3c
    4d0a:	mov.w	r1, #512	; 0x200
    4d0e:	mov	r0, sl
    4d10:	bl	a228 <usb_mtp_send>
    4d14:	cmp	r0, #0
    4d16:	ble.n	4d08 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x5a4>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    4d18:	str.w	sl, [r4]
    4d1c:	b.n	4cde <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x57a>
    4d1e:	nop
    4d20:	.word	0x200014fc
    4d24:	movs	r3, #0
    4d26:	ldrb	r2, [r5, #0]
    4d28:	str	r3, [sp, #44]	; 0x2c
    4d2a:	ldr	r3, [r5, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    4d2c:	cmp	r2, #0
    4d2e:	bne.w	482c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xc8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    4d32:	cmp	r3, #0
    4d34:	beq.w	51c8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xa64>
    4d38:	ldr	r0, [r4, #0]
        write_length_ += len;
    4d3a:	adds	r3, #4
        
        const char * src=data;
    4d3c:	add.w	r8, sp, #44	; 0x2c
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4d40:	add.w	r9, r5, #544	; 0x220
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
    4d44:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    4d46:	str	r3, [r5, #4]
    4d48:	b.n	4d52 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x5ee>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    4d4a:	cmp	r7, #3
    4d4c:	bgt.w	4830 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xcc>
    4d50:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4d52:	subs	r5, r6, r0
    4d54:	rsb	r3, r7, #4
          memcpy(dst,src,to_copy);
    4d58:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4d5a:	cmp	r5, r3
    4d5c:	it	ge
    4d5e:	movge	r5, r3
          memcpy(dst,src,to_copy);
    4d60:	mov	r2, r5
          pos += to_copy;
    4d62:	add	r7, r5
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    4d64:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4d68:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    4d6a:	add	r8, r5
          dst += to_copy;
    4d6c:	add	r5, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4d6e:	cmp	r5, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4d70:	str	r5, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4d72:	bne.n	4d4a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x5e6>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    4d74:	movs	r2, #60	; 0x3c
    4d76:	mov.w	r1, #512	; 0x200
    4d7a:	mov	r0, r9
    4d7c:	bl	a228 <usb_mtp_send>
    4d80:	cmp	r0, #0
    4d82:	ble.n	4d74 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x610>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    4d84:	str.w	r9, [r4]
    4d88:	b.n	4d4a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x5e6>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    4d8a:	ldr	r3, [r5, #4]
    4d8c:	cmp	r3, #0
    4d8e:	beq.w	51bc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xa58>
    4d92:	ldr	r4, [pc, #792]	; (50ac <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x948>)
    4d94:	ldr	r0, [r4, #0]
        write_length_ += len;
    4d96:	adds	r3, #4
        
        const char * src=data;
    4d98:	add	r6, sp, #40	; 0x28
    4d9a:	add.w	r7, r5, #1056	; 0x420
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4d9e:	add.w	r8, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    4da2:	str	r3, [r5, #4]
        
        const char * src=data;
        //
        int pos = 0; // into data
    4da4:	mov.w	r9, #0
    4da8:	b.n	4db4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x650>
        while(pos<len)
    4daa:	cmp.w	r9, #3
    4dae:	bgt.w	4830 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xcc>
    4db2:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4db4:	subs	r5, r7, r0
    4db6:	rsb	r3, r9, #4
          memcpy(dst,src,to_copy);
    4dba:	mov	r1, r6
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4dbc:	cmp	r5, r3
    4dbe:	it	ge
    4dc0:	movge	r5, r3
          memcpy(dst,src,to_copy);
    4dc2:	mov	r2, r5
          pos += to_copy;
    4dc4:	add	r9, r5
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    4dc6:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4dca:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    4dcc:	add	r6, r5
          dst += to_copy;
    4dce:	add	r5, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4dd0:	cmp	r5, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4dd2:	str	r5, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4dd4:	bne.n	4daa <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x646>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    4dd6:	movs	r2, #60	; 0x3c
    4dd8:	mov.w	r1, #512	; 0x200
    4ddc:	mov	r0, r8
    4dde:	bl	a228 <usb_mtp_send>
    4de2:	cmp	r0, #0
    4de4:	ble.n	4dd6 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x672>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    4de6:	str.w	r8, [r4]
    4dea:	b.n	4daa <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x646>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    4dec:	ldr	r3, [r5, #4]
    4dee:	cmp	r3, #0
    4df0:	beq.w	51b0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xa4c>
    4df4:	ldr	r4, [pc, #692]	; (50ac <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x948>)
    4df6:	ldr	r0, [r4, #0]
        write_length_ += len;
    4df8:	adds	r3, #2
        
        const char * src=data;
    4dfa:	add.w	r6, sp, #22
    4dfe:	add.w	r7, r5, #1056	; 0x420
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4e02:	add.w	r8, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    4e06:	str	r3, [r5, #4]
        
        const char * src=data;
        //
        int pos = 0; // into data
    4e08:	mov.w	r9, #0
    4e0c:	b.n	4e18 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x6b4>
        while(pos<len)
    4e0e:	cmp.w	r9, #1
    4e12:	bgt.w	4830 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xcc>
    4e16:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4e18:	subs	r5, r7, r0
    4e1a:	rsb	r3, r9, #2
          memcpy(dst,src,to_copy);
    4e1e:	mov	r1, r6
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4e20:	cmp	r5, r3
    4e22:	it	ge
    4e24:	movge	r5, r3
          memcpy(dst,src,to_copy);
    4e26:	mov	r2, r5
          pos += to_copy;
    4e28:	add	r9, r5
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    4e2a:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4e2e:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    4e30:	add	r6, r5
          dst += to_copy;
    4e32:	add	r5, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4e34:	cmp	r5, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4e36:	str	r5, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4e38:	bne.n	4e0e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x6aa>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    4e3a:	movs	r2, #60	; 0x3c
    4e3c:	mov.w	r1, #512	; 0x200
    4e40:	mov	r0, r8
    4e42:	bl	a228 <usb_mtp_send>
    4e46:	cmp	r0, #0
    4e48:	ble.n	4e3a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x6d6>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    4e4a:	str.w	r8, [r4]
    4e4e:	b.n	4e0e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x6aa>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    4e50:	cmp	r3, #0
    4e52:	beq.w	51a4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xa40>
    4e56:	ldr	r4, [pc, #596]	; (50ac <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x948>)
    4e58:	ldr	r0, [r4, #0]
        write_length_ += len;
    4e5a:	adds	r3, #2
        
        const char * src=data;
    4e5c:	add	r6, sp, #20
    4e5e:	add.w	r7, r5, #1056	; 0x420
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4e62:	add.w	r8, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    4e66:	str	r3, [r5, #4]
        
        const char * src=data;
        //
        int pos = 0; // into data
    4e68:	mov.w	r9, #0
    4e6c:	b.n	4e78 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x714>
        while(pos<len)
    4e6e:	cmp.w	r9, #1
    4e72:	bgt.w	4830 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xcc>
    4e76:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4e78:	subs	r5, r7, r0
    4e7a:	rsb	r3, r9, #2
          memcpy(dst,src,to_copy);
    4e7e:	mov	r1, r6
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4e80:	cmp	r5, r3
    4e82:	it	ge
    4e84:	movge	r5, r3
          memcpy(dst,src,to_copy);
    4e86:	mov	r2, r5
          pos += to_copy;
    4e88:	add	r9, r5
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    4e8a:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4e8e:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    4e90:	add	r6, r5
          dst += to_copy;
    4e92:	add	r5, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4e94:	cmp	r5, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4e96:	str	r5, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4e98:	bne.n	4e6e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x70a>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    4e9a:	movs	r2, #60	; 0x3c
    4e9c:	mov.w	r1, #512	; 0x200
    4ea0:	mov	r0, r8
    4ea2:	bl	a228 <usb_mtp_send>
    4ea6:	cmp	r0, #0
    4ea8:	ble.n	4e9a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x736>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    4eaa:	str.w	r8, [r4]
    4eae:	b.n	4e6e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x70a>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    4eb0:	ldr	r3, [r5, #4]
    4eb2:	cmp	r3, #0
    4eb4:	beq.w	50da <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x976>
    4eb8:	ldr	r4, [pc, #496]	; (50ac <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x948>)
    4eba:	ldr	r0, [r4, #0]
        write_length_ += len;
    4ebc:	adds	r3, #4
        
        const char * src=data;
    4ebe:	add.w	sl, sp, #60	; 0x3c
    4ec2:	add.w	r6, r5, #1056	; 0x420
        //
        int pos = 0; // into data
    4ec6:	mov.w	r9, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    4eca:	str	r3, [r5, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4ecc:	add.w	fp, r5, #544	; 0x220
    4ed0:	b.n	4eda <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x776>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    4ed2:	cmp.w	r9, #3
    4ed6:	bgt.n	4f12 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x7ae>
    4ed8:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4eda:	subs	r7, r6, r0
    4edc:	rsb	r3, r9, #4
          memcpy(dst,src,to_copy);
    4ee0:	mov	r1, sl
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4ee2:	cmp	r7, r3
    4ee4:	it	ge
    4ee6:	movge	r7, r3
          memcpy(dst,src,to_copy);
    4ee8:	mov	r2, r7
          pos += to_copy;
    4eea:	add	r9, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    4eec:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4ef0:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    4ef2:	add	sl, r7
          dst += to_copy;
    4ef4:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4ef6:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4ef8:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4efa:	bne.n	4ed2 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x76e>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    4efc:	movs	r2, #60	; 0x3c
    4efe:	mov.w	r1, #512	; 0x200
    4f02:	mov	r0, fp
    4f04:	bl	a228 <usb_mtp_send>
    4f08:	cmp	r0, #0
    4f0a:	ble.n	4efc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x798>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    4f0c:	str.w	fp, [r4]
    4f10:	b.n	4ed2 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x76e>
    4f12:	ldr.w	r3, [r8]
    4f16:	ldrb	r2, [r5, #0]
    4f18:	str	r3, [sp, #56]	; 0x38
    4f1a:	ldr	r3, [r5, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    4f1c:	cmp	r2, #0
    4f1e:	bne.w	49ee <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x28a>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    4f22:	cmp	r3, #0
    4f24:	beq.w	50d0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x96c>
    4f28:	ldr	r0, [r4, #0]
        write_length_ += len;
    4f2a:	adds	r3, #4
        
        const char * src=data;
    4f2c:	add.w	r9, sp, #56	; 0x38
        //
        int pos = 0; // into data
    4f30:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4f34:	add.w	sl, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    4f38:	str	r3, [r5, #4]
    4f3a:	b.n	4f44 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x7e0>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    4f3c:	cmp.w	r8, #3
    4f40:	bgt.n	4f7c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x818>
    4f42:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4f44:	subs	r7, r6, r0
    4f46:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    4f4a:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4f4c:	cmp	r7, r3
    4f4e:	it	ge
    4f50:	movge	r7, r3
          memcpy(dst,src,to_copy);
    4f52:	mov	r2, r7
          pos += to_copy;
    4f54:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    4f56:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4f5a:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    4f5c:	add	r9, r7
          dst += to_copy;
    4f5e:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4f60:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4f62:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4f64:	bne.n	4f3c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x7d8>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    4f66:	movs	r2, #60	; 0x3c
    4f68:	mov.w	r1, #512	; 0x200
    4f6c:	mov	r0, sl
    4f6e:	bl	a228 <usb_mtp_send>
    4f72:	cmp	r0, #0
    4f74:	ble.n	4f66 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x802>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    4f76:	str.w	sl, [r4]
    4f7a:	b.n	4f3c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x7d8>
    4f7c:	movs	r3, #1
    4f7e:	ldrb	r2, [r5, #0]
    4f80:	str	r3, [sp, #64]	; 0x40
    4f82:	ldr	r3, [r5, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    4f84:	cmp	r2, #0
    4f86:	bne.w	49f0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x28c>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    4f8a:	cmp	r3, #0
    4f8c:	beq.w	50c6 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x962>
    4f90:	ldr	r0, [r4, #0]
        write_length_ += len;
    4f92:	adds	r3, #4
        
        const char * src=data;
    4f94:	add.w	r9, sp, #64	; 0x40
        //
        int pos = 0; // into data
    4f98:	mov.w	r8, #0
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4f9c:	add.w	sl, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    4fa0:	str	r3, [r5, #4]
    4fa2:	b.n	4fac <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x848>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    4fa4:	cmp.w	r8, #3
    4fa8:	bgt.n	4fe4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x880>
    4faa:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4fac:	subs	r7, r6, r0
    4fae:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    4fb2:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    4fb4:	cmp	r7, r3
    4fb6:	it	ge
    4fb8:	movge	r7, r3
          memcpy(dst,src,to_copy);
    4fba:	mov	r2, r7
          pos += to_copy;
    4fbc:	add	r8, r7
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    4fbe:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4fc2:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    4fc4:	add	r9, r7
          dst += to_copy;
    4fc6:	add	r7, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4fc8:	cmp	r7, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    4fca:	str	r7, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    4fcc:	bne.n	4fa4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x840>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    4fce:	movs	r2, #60	; 0x3c
    4fd0:	mov.w	r1, #512	; 0x200
    4fd4:	mov	r0, sl
    4fd6:	bl	a228 <usb_mtp_send>
    4fda:	cmp	r0, #0
    4fdc:	ble.n	4fce <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x86a>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    4fde:	str.w	sl, [r4]
    4fe2:	b.n	4fa4 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x840>
    4fe4:	movs	r3, #0
    4fe6:	ldrb	r2, [r5, #0]
    4fe8:	str	r3, [sp, #68]	; 0x44
    4fea:	ldr	r3, [r5, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    4fec:	cmp	r2, #0
    4fee:	bne.w	482c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xc8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    4ff2:	cmp	r3, #0
    4ff4:	beq.n	50bc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x958>
    4ff6:	ldr	r0, [r4, #0]
        write_length_ += len;
    4ff8:	adds	r3, #4
        
        const char * src=data;
    4ffa:	add.w	r8, sp, #68	; 0x44
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    4ffe:	add.w	r9, r5, #544	; 0x220
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
    5002:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    5004:	str	r3, [r5, #4]
    5006:	b.n	5010 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x8ac>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    5008:	cmp	r7, #3
    500a:	bgt.w	4830 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xcc>
    500e:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5010:	subs	r5, r6, r0
    5012:	rsb	r3, r7, #4
          memcpy(dst,src,to_copy);
    5016:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5018:	cmp	r5, r3
    501a:	it	ge
    501c:	movge	r5, r3
          memcpy(dst,src,to_copy);
    501e:	mov	r2, r5
          pos += to_copy;
    5020:	add	r7, r5
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    5022:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5026:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    5028:	add	r8, r5
          dst += to_copy;
    502a:	add	r5, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    502c:	cmp	r5, r6
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    502e:	str	r5, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5030:	bne.n	5008 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x8a4>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5032:	movs	r2, #60	; 0x3c
    5034:	mov.w	r1, #512	; 0x200
    5038:	mov	r0, r9
    503a:	bl	a228 <usb_mtp_send>
    503e:	cmp	r0, #0
    5040:	ble.n	5032 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x8ce>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    5042:	str.w	r9, [r4]
    5046:	b.n	5008 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x8a4>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5048:	ldr	r3, [r5, #4]
    504a:	cmp	r3, #0
    504c:	beq.w	51fa <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xa96>
    5050:	ldr	r4, [pc, #88]	; (50ac <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x948>)
    5052:	ldr	r0, [r4, #0]
        write_length_ += len;
    5054:	adds	r3, #1
        
        const char * src=data;
    5056:	add	r6, sp, #16
    5058:	add.w	r7, r5, #1056	; 0x420
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    505c:	add.w	r8, r5, #544	; 0x220
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    5060:	str	r3, [r5, #4]
        
        const char * src=data;
        //
        int pos = 0; // into data
    5062:	mov.w	r9, #0
    5066:	b.n	5072 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x90e>
        while(pos<len)
    5068:	cmp.w	r9, #0
    506c:	bgt.w	4830 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xcc>
    5070:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5072:	subs	r5, r7, r0
    5074:	rsb	r3, r9, #1
          memcpy(dst,src,to_copy);
    5078:	mov	r1, r6
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    507a:	cmp	r5, r3
    507c:	it	ge
    507e:	movge	r5, r3
          memcpy(dst,src,to_copy);
    5080:	mov	r2, r5
          pos += to_copy;
    5082:	add	r9, r5
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    5084:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5088:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    508a:	add	r6, r5
          dst += to_copy;
    508c:	add	r5, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    508e:	cmp	r5, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5090:	str	r5, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5092:	bne.n	5068 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x904>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5094:	movs	r2, #60	; 0x3c
    5096:	mov.w	r1, #512	; 0x200
    509a:	mov	r0, r8
    509c:	bl	a228 <usb_mtp_send>
    50a0:	cmp	r0, #0
    50a2:	ble.n	5094 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x930>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    50a4:	str.w	r8, [r4]
    50a8:	b.n	5068 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x904>
    50aa:	nop
    50ac:	.word	0x200014fc
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    50b0:	add.w	r2, r5, #544	; 0x220
    50b4:	ldr	r4, [pc, #396]	; (5244 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xae0>)
    50b6:	mov	r0, r2
    50b8:	str	r2, [r4, #0]
    50ba:	b.n	4cc8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x564>
    50bc:	add.w	r2, r5, #544	; 0x220
    50c0:	mov	r0, r2
    50c2:	str	r2, [r4, #0]
    50c4:	b.n	4ff8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x894>
    50c6:	add.w	r2, r5, #544	; 0x220
    50ca:	mov	r0, r2
    50cc:	str	r2, [r4, #0]
    50ce:	b.n	4f92 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x82e>
    50d0:	add.w	r2, r5, #544	; 0x220
    50d4:	mov	r0, r2
    50d6:	str	r2, [r4, #0]
    50d8:	b.n	4f2a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x7c6>
    50da:	add.w	r2, r5, #544	; 0x220
    50de:	ldr	r4, [pc, #356]	; (5244 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xae0>)
    50e0:	mov	r0, r2
    50e2:	str	r2, [r4, #0]
    50e4:	b.n	4ebc <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x758>
    50e6:	cmp	r3, #0
    50e8:	beq.w	5214 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xab0>
    50ec:	ldr	r4, [pc, #340]	; (5244 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xae0>)
    50ee:	ldr	r0, [r4, #0]
        write_length_ += len;
    50f0:	adds	r3, #1
        
        const char * src=data;
    50f2:	add.w	r8, sp, #15
    50f6:	add.w	r9, r5, #1056	; 0x420
        //
        int pos = 0; // into data
    50fa:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    50fc:	str	r3, [r5, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    50fe:	add.w	sl, r5, #544	; 0x220
    5102:	b.n	510c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x9a8>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    5104:	cmp	r7, #0
    5106:	bgt.w	4c42 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x4de>
    510a:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    510c:	rsb	r6, r0, r9
    5110:	rsb	r3, r7, #1
          memcpy(dst,src,to_copy);
    5114:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5116:	cmp	r6, r3
    5118:	it	ge
    511a:	movge	r6, r3
          memcpy(dst,src,to_copy);
    511c:	mov	r2, r6
          pos += to_copy;
    511e:	add	r7, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    5120:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5124:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    5126:	add	r8, r6
          dst += to_copy;
    5128:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    512a:	cmp	r6, r9
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    512c:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    512e:	bne.n	5104 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x9a0>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5130:	movs	r2, #60	; 0x3c
    5132:	mov.w	r1, #512	; 0x200
    5136:	mov	r0, sl
    5138:	bl	a228 <usb_mtp_send>
    513c:	cmp	r0, #0
    513e:	ble.n	5130 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x9cc>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    5140:	str.w	sl, [r4]
    5144:	b.n	5104 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x9a0>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5146:	cmp	r3, #0
    5148:	beq.n	522c <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xac8>
    514a:	ldr	r4, [pc, #248]	; (5244 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xae0>)
    514c:	ldr	r0, [r4, #0]
        write_length_ += len;
    514e:	adds	r3, #1
        
        const char * src=data;
    5150:	add.w	r8, sp, #19
    5154:	add.w	r9, r5, #1056	; 0x420
        //
        int pos = 0; // into data
    5158:	movs	r7, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    515a:	str	r3, [r5, #4]
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
    515c:	add.w	sl, r5, #544	; 0x220
    5160:	b.n	516a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xa06>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    5162:	cmp	r7, #0
    5164:	bgt.w	4bca <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x466>
    5168:	ldr	r0, [r4, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    516a:	rsb	r6, r0, r9
    516e:	rsb	r3, r7, #1
          memcpy(dst,src,to_copy);
    5172:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5174:	cmp	r6, r3
    5176:	it	ge
    5178:	movge	r6, r3
          memcpy(dst,src,to_copy);
    517a:	mov	r2, r6
          pos += to_copy;
    517c:	add	r7, r6
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    517e:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5182:	ldr	r3, [r4, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    5184:	add	r8, r6
          dst += to_copy;
    5186:	add	r6, r3
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5188:	cmp	r6, r9
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    518a:	str	r6, [r4, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    518c:	bne.n	5162 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x9fe>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    518e:	movs	r2, #60	; 0x3c
    5190:	mov.w	r1, #512	; 0x200
    5194:	mov	r0, sl
    5196:	bl	a228 <usb_mtp_send>
    519a:	cmp	r0, #0
    519c:	ble.n	518e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xa2a>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    519e:	str.w	sl, [r4]
    51a2:	b.n	5162 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x9fe>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    51a4:	add.w	r2, r5, #544	; 0x220
    51a8:	ldr	r4, [pc, #152]	; (5244 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xae0>)
    51aa:	mov	r0, r2
    51ac:	str	r2, [r4, #0]
    51ae:	b.n	4e5a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x6f6>
    51b0:	add.w	r2, r5, #544	; 0x220
    51b4:	ldr	r4, [pc, #140]	; (5244 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xae0>)
    51b6:	mov	r0, r2
    51b8:	str	r2, [r4, #0]
    51ba:	b.n	4df8 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x694>
    51bc:	add.w	r2, r5, #544	; 0x220
    51c0:	ldr	r4, [pc, #128]	; (5244 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xae0>)
    51c2:	mov	r0, r2
    51c4:	str	r2, [r4, #0]
    51c6:	b.n	4d96 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x632>
    51c8:	add.w	r2, r5, #544	; 0x220
    51cc:	mov	r0, r2
    51ce:	str	r2, [r4, #0]
    51d0:	b.n	4d3a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x5d6>
    51d2:	add.w	r2, r5, #544	; 0x220
    51d6:	ldr	r4, [pc, #108]	; (5244 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xae0>)
    51d8:	mov	r0, r2
    51da:	str	r2, [r4, #0]
    51dc:	b.w	498a <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x226>
    51e0:	add.w	r2, r5, #544	; 0x220
    51e4:	ldr	r4, [pc, #92]	; (5244 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xae0>)
    51e6:	mov	r0, r2
    51e8:	str	r2, [r4, #0]
    51ea:	b.n	4a30 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x2cc>
    51ec:	add.w	r2, r5, #544	; 0x220
    51f0:	ldr	r4, [pc, #80]	; (5244 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xae0>)
    51f2:	mov	r0, r2
    51f4:	str	r2, [r4, #0]
    51f6:	b.w	4858 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xf4>
    51fa:	add.w	r2, r5, #544	; 0x220
    51fe:	ldr	r4, [pc, #68]	; (5244 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xae0>)
    5200:	mov	r0, r2
    5202:	str	r2, [r4, #0]
    5204:	b.n	5054 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x8f0>
    5206:	add.w	r2, r5, #544	; 0x220
    520a:	ldr	r4, [pc, #56]	; (5244 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xae0>)
    520c:	mov	r0, r2
    520e:	str	r2, [r4, #0]
    5210:	b.w	4918 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x1b4>
    5214:	add.w	r2, r5, #544	; 0x220
    5218:	ldr	r4, [pc, #40]	; (5244 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xae0>)
    521a:	mov	r0, r2
    521c:	str	r2, [r4, #0]
    521e:	b.n	50f0 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x98c>
    5220:	add.w	r2, r5, #544	; 0x220
    5224:	ldr	r4, [pc, #28]	; (5244 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xae0>)
    5226:	mov	r0, r2
    5228:	str	r2, [r4, #0]
    522a:	b.n	4c66 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x502>
    522c:	add.w	r2, r5, #544	; 0x220
    5230:	ldr	r4, [pc, #16]	; (5244 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xae0>)
    5232:	mov	r0, r2
    5234:	str	r2, [r4, #0]
    5236:	b.n	514e <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x9ea>
    5238:	add.w	r2, r5, #544	; 0x220
    523c:	ldr	r4, [pc, #4]	; (5244 <MTPD::getObjectPropValue(unsigned long, unsigned long)+0xae0>)
    523e:	mov	r0, r2
    5240:	str	r2, [r4, #0]
    5242:	b.n	4bec <MTPD::getObjectPropValue(unsigned long, unsigned long)+0x488>
    5244:	.word	0x200014fc

00005248 <loop>:
}

#include "mtp_t4.h"
MTPD    mtpd;

extern "C" void loop() {
    5248:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    524c:	sub	sp, #108	; 0x6c
    }
*/

public:
    void loop(void)
    { if(!usb_mtp_available()) return;
    524e:	bl	a2f4 <usb_mtp_available>
    5252:	cbnz	r0, 525a <loop+0x12>
  mtpd.loop();
  // put your main code here, to run repeatedly:
}
    5254:	add	sp, #108	; 0x6c
    5256:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return usb_mtp_recv(data_buffer,60);
    }

    int fetch_packet(uint8_t *data_buffer)
    {
      return usb_mtp_recv(data_buffer,60);
    525a:	ldr	r4, [pc, #728]	; (5534 <loop+0x2ec>)
    525c:	movs	r1, #60	; 0x3c
    525e:	add.w	r0, r4, #32
    5262:	bl	a178 <usb_mtp_recv>
*/

public:
    void loop(void)
    { if(!usb_mtp_available()) return;
      if(fetch_packet(rx_data_buffer))
    5266:	cmp	r0, #0
    5268:	beq.n	5254 <loop+0xc>
      { printContainer(); // to switch on set debug to 1 at beginning of file
    526a:	ldr	r0, [r4, #40]	; 0x28
    526c:	ldrh	r1, [r4, #36]	; 0x24
    526e:	ldr	r3, [r4, #32]
    5270:	str	r0, [sp, #4]
    5272:	str	r1, [sp, #0]
    5274:	ldrh	r2, [r4, #38]	; 0x26
    5276:	ldr	r1, [pc, #704]	; (5538 <loop+0x2f0>)
    5278:	ldr	r0, [pc, #704]	; (553c <loop+0x2f4>)
    527a:	bl	a52c <Print::printf(char const*, ...)>
    527e:	ldr	r3, [r4, #32]
    5280:	cmp	r3, #12
    5282:	bhi.w	5502 <loop+0x2ba>
    5286:	ldr	r1, [pc, #696]	; (5540 <loop+0x2f8>)
    5288:	ldr	r0, [pc, #688]	; (553c <loop+0x2f4>)
    528a:	bl	a52c <Print::printf(char const*, ...)>
        int typ= CONTAINER->type;
        //TID=id;

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds
    528e:	ldrh	r5, [r4, #36]	; 0x24
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
        int typ= CONTAINER->type;
        //TID=id;

        int return_code =0x2001; //OK use as default value
    5290:	movw	r2, #8197	; 0x2005
    5294:	movw	r1, #8193	; 0x2001
    void loop(void)
    { if(!usb_mtp_available()) return;
      if(fetch_packet(rx_data_buffer))
      { printContainer(); // to switch on set debug to 1 at beginning of file

        int op = CONTAINER->op;
    5298:	ldrh	r3, [r4, #38]	; 0x26

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    529a:	movw	r0, #4108	; 0x100c
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
        int typ= CONTAINER->type;
        //TID=id;

        int return_code =0x2001; //OK use as default value
    529e:	cmp	r5, #2
    52a0:	ite	eq
    52a2:	moveq	r5, r2
    52a4:	movne	r5, r1
      if(fetch_packet(rx_data_buffer))
      { printContainer(); // to switch on set debug to 1 at beginning of file

        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
        int p2 = CONTAINER->params[1];
    52a6:	ldr.w	sl, [r4, #48]	; 0x30

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    52aa:	cmp	r3, r0
      { printContainer(); // to switch on set debug to 1 at beginning of file

        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
        int p2 = CONTAINER->params[1];
        int p3 = CONTAINER->params[2];
    52ac:	ldr.w	r8, [r4, #52]	; 0x34
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
        int typ= CONTAINER->type;
        //TID=id;

        int return_code =0x2001; //OK use as default value
    52b0:	str	r5, [sp, #12]
    { if(!usb_mtp_available()) return;
      if(fetch_packet(rx_data_buffer))
      { printContainer(); // to switch on set debug to 1 at beginning of file

        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
    52b2:	ldr	r5, [r4, #44]	; 0x2c
        int p2 = CONTAINER->params[1];
        int p3 = CONTAINER->params[2];
        int id = CONTAINER->transaction_id;
        int len= CONTAINER->len;
    52b4:	ldr	r6, [r4, #32]
    { if(!usb_mtp_available()) return;
      if(fetch_packet(rx_data_buffer))
      { printContainer(); // to switch on set debug to 1 at beginning of file

        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
    52b6:	str	r5, [sp, #16]
        int p2 = CONTAINER->params[1];
        int p3 = CONTAINER->params[2];
        int id = CONTAINER->transaction_id;
    52b8:	ldr	r5, [r4, #40]	; 0x28
    52ba:	str	r5, [sp, #20]

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    52bc:	beq.w	5b4e <loop+0x906>
    52c0:	bhi.n	5306 <loop+0xbe>
    52c2:	movw	r2, #4101	; 0x1005
    52c6:	cmp	r3, r2
    52c8:	beq.w	5b5a <loop+0x912>
    52cc:	bls.w	5450 <loop+0x208>
    52d0:	movw	r2, #4104	; 0x1008
    52d4:	cmp	r3, r2
    52d6:	beq.w	5812 <loop+0x5ca>
    52da:	bhi.w	5590 <loop+0x348>
    52de:	movw	r2, #4102	; 0x1006
    52e2:	cmp	r3, r2
    52e4:	beq.w	5b1c <loop+0x8d4>
    52e8:	movw	r2, #4103	; 0x1007
    52ec:	cmp	r3, r2
    52ee:	bne.w	5998 <loop+0x750>
                p1 = GetNumObjects(p1, p3);
            }
            break;

          case 0x1007:  // GetObjectHandles
            if (p2) 
    52f2:	cmp.w	sl, #0
    52f6:	beq.w	604a <loop+0xe02>
          case 0x1009:  // GetObject
            TRANSMIT(GetObject(p1));
            break;

          case 0x100B:  // DeleteObject
              if (p2) {
    52fa:	movw	r3, #8212	; 0x2014
    52fe:	ldr	r5, [sp, #16]
    5300:	str	r3, [sp, #12]
                return_code = 0x2014; // spec by format unsupported
    5302:	mov	r1, r3
    5304:	b.n	533a <loop+0xf2>

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    5306:	movw	r0, #4122	; 0x101a
    530a:	cmp	r3, r0
    530c:	beq.w	5b44 <loop+0x8fc>
    5310:	bhi.n	538a <loop+0x142>
    5312:	movw	r1, #4116	; 0x1014
    5316:	cmp	r3, r1
    5318:	beq.w	59ac <loop+0x764>
    531c:	bhi.w	55b8 <loop+0x370>
    5320:	movw	r1, #4109	; 0x100d
    5324:	cmp	r3, r1
    5326:	beq.w	59a2 <loop+0x75a>
    532a:	movw	r1, #4112	; 0x1010
    532e:	cmp	r3, r1
    5330:	bne.w	5998 <loop+0x750>
    5334:	ldr	r5, [sp, #16]
          case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
              break;

          case 0x1010:  // Reset
              return_code = 0x2005;
    5336:	mov	r1, r2
    5338:	str	r2, [sp, #12]
            CONTAINER->len=len;
            CONTAINER->op=return_code;
            CONTAINER->transaction_id=id;
            CONTAINER->params[0]=p1;
            #if DEBUG >1
              printContainer(); // to switch on set debug to 2 at beginning of file
    533a:	ldr	r0, [sp, #20]
              return_code = 0x2005;  // operation not supported
              break;
        }
        if(return_code)
        {
            CONTAINER->type=3;
    533c:	movs	r7, #3
            CONTAINER->len=len;
            CONTAINER->op=return_code;
    533e:	strh	r1, [r4, #38]	; 0x26
            CONTAINER->transaction_id=id;
            CONTAINER->params[0]=p1;
            #if DEBUG >1
              printContainer(); // to switch on set debug to 2 at beginning of file
    5340:	mov	r3, r6
        if(return_code)
        {
            CONTAINER->type=3;
            CONTAINER->len=len;
            CONTAINER->op=return_code;
            CONTAINER->transaction_id=id;
    5342:	str	r0, [r4, #40]	; 0x28
            CONTAINER->params[0]=p1;
            #if DEBUG >1
              printContainer(); // to switch on set debug to 2 at beginning of file
    5344:	str	r0, [sp, #4]
    5346:	ldr	r2, [sp, #12]
    5348:	str	r7, [sp, #0]
    534a:	ldr	r1, [pc, #492]	; (5538 <loop+0x2f0>)
    534c:	ldr	r0, [pc, #492]	; (553c <loop+0x2f4>)
              break;
        }
        if(return_code)
        {
            CONTAINER->type=3;
            CONTAINER->len=len;
    534e:	str	r6, [r4, #32]
            CONTAINER->op=return_code;
            CONTAINER->transaction_id=id;
            CONTAINER->params[0]=p1;
    5350:	str	r5, [r4, #44]	; 0x2c
              return_code = 0x2005;  // operation not supported
              break;
        }
        if(return_code)
        {
            CONTAINER->type=3;
    5352:	strh	r7, [r4, #36]	; 0x24
            CONTAINER->len=len;
            CONTAINER->op=return_code;
            CONTAINER->transaction_id=id;
            CONTAINER->params[0]=p1;
            #if DEBUG >1
              printContainer(); // to switch on set debug to 2 at beginning of file
    5354:	bl	a52c <Print::printf(char const*, ...)>
    5358:	ldr	r3, [r4, #32]
              return_code = 0x2005;  // operation not supported
              break;
        }
        if(return_code)
        {
            CONTAINER->type=3;
    535a:	ldr	r4, [pc, #472]	; (5534 <loop+0x2ec>)
            CONTAINER->len=len;
            CONTAINER->op=return_code;
            CONTAINER->transaction_id=id;
            CONTAINER->params[0]=p1;
            #if DEBUG >1
              printContainer(); // to switch on set debug to 2 at beginning of file
    535c:	cmp	r3, #12
    535e:	bhi.w	5560 <loop+0x318>
    5362:	ldr	r1, [pc, #476]	; (5540 <loop+0x2f8>)
    5364:	ldr	r0, [pc, #468]	; (553c <loop+0x2f4>)
    5366:	bl	a52c <Print::printf(char const*, ...)>
            #endif

            memcpy(tx_data_buffer,rx_data_buffer,len);
    536a:	ldr	r1, [pc, #472]	; (5544 <loop+0x2fc>)
    536c:	mov	r2, r6
    536e:	add.w	r0, r1, #512	; 0x200
    5372:	bl	8568 <memcpy>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5376:	movs	r2, #60	; 0x3c
    5378:	mov	r1, r6
    537a:	ldr	r0, [pc, #460]	; (5548 <loop+0x300>)
    537c:	bl	a228 <usb_mtp_send>
    5380:	cmp	r0, #0
    5382:	ble.n	5376 <loop+0x12e>
    5384:	add	sp, #108	; 0x6c
    5386:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    538a:	movw	r2, #38914	; 0x9802
    538e:	cmp	r3, r2
    5390:	beq.w	58be <loop+0x676>
    5394:	bhi.w	55da <loop+0x392>
    5398:	movw	r2, #4123	; 0x101b
    539c:	cmp	r3, r2
    539e:	beq.w	54fa <loop+0x2b2>
    53a2:	movw	r2, #38913	; 0x9801
    53a6:	cmp	r3, r2
    53a8:	bne.w	5998 <loop+0x750>
  }

    void getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    53ac:	ldr	r1, [pc, #412]	; (554c <loop+0x304>)
          case 0x101B:  // GetPartialObject
//              TRANSMIT1(GetPartialObject(p1,p2,p3));
              break;

          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
    53ae:	movs	r2, #1
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    53b0:	movs	r3, #4
    53b2:	ldr	r7, [pc, #412]	; (5550 <loop+0x308>)
  }

    void getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    53b4:	ldr	r1, [r1, #0]
          case 0x101B:  // GetPartialObject
//              TRANSMIT1(GetPartialObject(p1,p2,p3));
              break;

          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
    53b6:	strb	r2, [r4, #0]
  }

    void getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    53b8:	cmp	r1, #0
    53ba:	beq.w	6578 <loop+0x1330>
    53be:	ldr	r1, [pc, #404]	; (5554 <loop+0x30c>)
    53c0:	movs	r0, #0
    53c2:	mov	sl, r7
    53c4:	ldr	r5, [pc, #400]	; (5558 <loop+0x310>)
    53c6:	str	r1, [sp, #28]
    53c8:	sub.w	r1, r7, #512	; 0x200
    53cc:	str	r6, [sp, #32]
    53ce:	mov	r9, r0
    53d0:	str	r1, [sp, #24]
    53d2:	movw	r1, #56321	; 0xdc01
    53d6:	b.n	53f2 <loop+0x1aa>
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    53d8:	adds	r3, #2
  }

    void getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    53da:	ldr	r2, [pc, #368]	; (554c <loop+0x304>)
    53dc:	add.w	r9, r9, #1
    53e0:	ldr	r2, [r2, #0]
    53e2:	cmp	r2, r9
    53e4:	bls.w	5d0e <loop+0xac6>
    53e8:	ldr	r2, [sp, #28]
    53ea:	ldrh.w	r1, [r2, #2]!
    53ee:	str	r2, [sp, #28]
    53f0:	ldrb	r2, [r4, #0]
    53f2:	strh.w	r1, [sp, #70]	; 0x46
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    53f6:	cmp	r2, #0
    53f8:	bne.n	53d8 <loop+0x190>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    53fa:	cmp	r3, #0
    53fc:	beq.w	5c4e <loop+0xa06>
    5400:	ldr	r0, [r5, #0]
        write_length_ += len;
    5402:	adds	r3, #2
        
        const char * src=data;
    5404:	add.w	r8, sp, #70	; 0x46
        //
        int pos = 0; // into data
    5408:	movs	r6, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    540a:	str	r3, [r4, #4]
    540c:	b.n	5416 <loop+0x1ce>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    540e:	cmp	r6, #1
    5410:	bgt.w	55d6 <loop+0x38e>
    5414:	ldr	r0, [r5, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5416:	rsb	fp, r0, sl
    541a:	rsb	r3, r6, #2
          memcpy(dst,src,to_copy);
    541e:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5420:	cmp	fp, r3
    5422:	it	ge
    5424:	movge	fp, r3
          memcpy(dst,src,to_copy);
    5426:	mov	r2, fp
          pos += to_copy;
    5428:	add	r6, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    542a:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    542e:	ldr	r3, [r5, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    5430:	add	r8, fp
          dst += to_copy;
    5432:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5434:	cmp	r3, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5436:	str	r3, [r5, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5438:	bne.n	540e <loop+0x1c6>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    543a:	movs	r2, #60	; 0x3c
    543c:	mov.w	r1, #512	; 0x200
    5440:	ldr	r0, [pc, #260]	; (5548 <loop+0x300>)
    5442:	bl	a228 <usb_mtp_send>
    5446:	cmp	r0, #0
    5448:	ble.n	543a <loop+0x1f2>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    544a:	ldr	r3, [sp, #24]
    544c:	str	r3, [r5, #0]
    544e:	b.n	540e <loop+0x1c6>

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    5450:	movw	r2, #4098	; 0x1002
    5454:	cmp	r3, r2
    5456:	beq.w	5794 <loop+0x54c>
    545a:	bls.w	5674 <loop+0x42c>
    545e:	movw	r2, #4099	; 0x1003
    5462:	cmp	r3, r2
    5464:	beq.n	54fa <loop+0x2b2>
    5466:	movw	r2, #4100	; 0x1004
    546a:	cmp	r3, r2
    546c:	bne.w	5998 <loop+0x750>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5470:	ldr	r2, [pc, #212]	; (5548 <loop+0x300>)

          case 0x1003:  // CloseSession
            break;

          case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
    5472:	mov.w	r8, #20
    5476:	movs	r1, #0
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5478:	ldr	r5, [pc, #220]	; (5558 <loop+0x310>)

          case 0x1003:  // CloseSession
            break;

          case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
    547a:	mov.w	ip, #2
    547e:	add.w	r7, r2, #512	; 0x200
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    5482:	mov.w	lr, #12

          case 0x1003:  // CloseSession
            break;

          case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
    5486:	strh.w	r3, [sp, #98]	; 0x62
    548a:	ldr	r3, [sp, #20]
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    548c:	mov	r0, r2

          case 0x1003:  // CloseSession
            break;

          case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
    548e:	str.w	r8, [sp, #92]	; 0x5c
    5492:	mov	sl, r7
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    5494:	str	r2, [sp, #24]
        
        const char * src=data;
        //
        int pos = 0; // into data
    5496:	mov	r8, r1

          case 0x1003:  // CloseSession
            break;

          case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
    5498:	str	r3, [sp, #100]	; 0x64
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    549a:	add.w	r9, sp, #92	; 0x5c
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    549e:	str	r2, [r5, #0]

          case 0x1003:  // CloseSession
            break;

          case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
    54a0:	strh.w	ip, [sp, #96]	; 0x60
    54a4:	strb	r1, [r4, #0]
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    54a6:	str.w	lr, [r4, #4]
    54aa:	b.n	54b6 <loop+0x26e>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    54ac:	cmp.w	r8, #11
    54b0:	bgt.w	5cd8 <loop+0xa90>
    54b4:	ldr	r0, [r5, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    54b6:	rsb	fp, r0, sl
    54ba:	rsb	r3, r8, #12
          memcpy(dst,src,to_copy);
    54be:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    54c0:	cmp	fp, r3
    54c2:	it	ge
    54c4:	movge	fp, r3
          memcpy(dst,src,to_copy);
    54c6:	mov	r2, fp
          pos += to_copy;
    54c8:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    54ca:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    54ce:	ldr	r3, [r5, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    54d0:	add	r9, fp
          dst += to_copy;
    54d2:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    54d4:	cmp	r3, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    54d6:	str	r3, [r5, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    54d8:	bne.n	54ac <loop+0x264>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    54da:	movs	r2, #60	; 0x3c
    54dc:	mov.w	r1, #512	; 0x200
    54e0:	ldr	r0, [pc, #100]	; (5548 <loop+0x300>)
    54e2:	bl	a228 <usb_mtp_send>
    54e6:	cmp	r0, #0
    54e8:	ble.n	54da <loop+0x292>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    54ea:	ldr	r3, [pc, #92]	; (5548 <loop+0x300>)
    54ec:	str	r3, [r5, #0]
    54ee:	b.n	54ac <loop+0x264>

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    54f0:	movw	r2, #38916	; 0x9804
    54f4:	cmp	r3, r2
    54f6:	bne.w	5998 <loop+0x750>
    54fa:	ldr	r5, [sp, #16]
    54fc:	ldrh.w	r1, [sp, #12]
    5500:	b.n	533a <loop+0xf2>

public:
    void loop(void)
    { if(!usb_mtp_available()) return;
      if(fetch_packet(rx_data_buffer))
      { printContainer(); // to switch on set debug to 1 at beginning of file
    5502:	ldr	r2, [r4, #44]	; 0x2c
    5504:	ldr	r1, [pc, #84]	; (555c <loop+0x314>)
    5506:	ldr	r0, [pc, #52]	; (553c <loop+0x2f4>)
    5508:	bl	a52c <Print::printf(char const*, ...)>
    550c:	ldr	r3, [r4, #32]
    550e:	cmp	r3, #16
    5510:	bls.w	5286 <loop+0x3e>
    5514:	ldr	r2, [r4, #48]	; 0x30
    5516:	ldr	r1, [pc, #68]	; (555c <loop+0x314>)
    5518:	ldr	r0, [pc, #32]	; (553c <loop+0x2f4>)
    551a:	bl	a52c <Print::printf(char const*, ...)>
    551e:	ldr	r3, [r4, #32]
    5520:	cmp	r3, #20
    5522:	bls.w	5286 <loop+0x3e>
    5526:	ldr	r2, [r4, #52]	; 0x34
    5528:	ldr	r1, [pc, #48]	; (555c <loop+0x314>)
    552a:	ldr	r0, [pc, #16]	; (553c <loop+0x2f4>)
    552c:	bl	a52c <Print::printf(char const*, ...)>
    5530:	b.n	5286 <loop+0x3e>
    5532:	nop
    5534:	.word	0x20009560
    5538:	.word	0x200001bc
    553c:	.word	0x20000b20
    5540:	.word	0x200001d0
    5544:	.word	0x20009580
    5548:	.word	0x20009780
    554c:	.word	0x20000adc
    5550:	.word	0x20009980
    5554:	.word	0x20000018
    5558:	.word	0x200014fc
    555c:	.word	0x200001cc
            CONTAINER->len=len;
            CONTAINER->op=return_code;
            CONTAINER->transaction_id=id;
            CONTAINER->params[0]=p1;
            #if DEBUG >1
              printContainer(); // to switch on set debug to 2 at beginning of file
    5560:	ldr	r2, [r4, #44]	; 0x2c
    5562:	ldr	r1, [pc, #764]	; (5860 <loop+0x618>)
    5564:	ldr	r0, [pc, #764]	; (5864 <loop+0x61c>)
    5566:	bl	a52c <Print::printf(char const*, ...)>
    556a:	ldr	r3, [r4, #32]
    556c:	cmp	r3, #16
    556e:	bls.w	5362 <loop+0x11a>
    5572:	ldr	r2, [r4, #48]	; 0x30
    5574:	ldr	r1, [pc, #744]	; (5860 <loop+0x618>)
    5576:	ldr	r0, [pc, #748]	; (5864 <loop+0x61c>)
    5578:	bl	a52c <Print::printf(char const*, ...)>
    557c:	ldr	r3, [r4, #32]
    557e:	cmp	r3, #20
    5580:	bls.w	5362 <loop+0x11a>
    5584:	ldr	r2, [r4, #52]	; 0x34
    5586:	ldr	r1, [pc, #728]	; (5860 <loop+0x618>)
    5588:	ldr	r0, [pc, #728]	; (5864 <loop+0x61c>)
    558a:	bl	a52c <Print::printf(char const*, ...)>
    558e:	b.n	5362 <loop+0x11a>

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    5590:	movw	r2, #4105	; 0x1009
    5594:	cmp	r3, r2
    5596:	beq.w	5a6a <loop+0x822>
    559a:	movw	r2, #4107	; 0x100b
    559e:	cmp	r3, r2
    55a0:	bne.w	5998 <loop+0x750>
          case 0x1009:  // GetObject
            TRANSMIT(GetObject(p1));
            break;

          case 0x100B:  // DeleteObject
              if (p2) {
    55a4:	cmp.w	sl, #0
    55a8:	bne.w	52fa <loop+0xb2>
    55ac:	movw	r3, #8210	; 0x2012
    55b0:	ldr	r5, [sp, #16]
    55b2:	str	r3, [sp, #12]
                return_code = 0x2014; // spec by format unsupported
              } else {
                //if (!mFS_DeleteObject(p1)) 
                {
                  return_code = 0x2012; // partial deletion
    55b4:	mov	r1, r3
    55b6:	b.n	533a <loop+0xf2>

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    55b8:	movw	r1, #4117	; 0x1015
    55bc:	cmp	r3, r1
    55be:	beq.w	570a <loop+0x4c2>
    55c2:	movw	r1, #4121	; 0x1019
    55c6:	cmp	r3, r1
    55c8:	bne.w	5998 <loop+0x750>
    55cc:	mov	r1, r2
    55ce:	ldr	r5, [sp, #16]
    55d0:	movs	r6, #12
          case 0x1010:  // Reset
              return_code = 0x2005;
              break;

          case 0x1019:  // MoveObject
              return_code = 0x2005;
    55d2:	str	r2, [sp, #12]
    55d4:	b.n	533a <loop+0xf2>
    55d6:	ldr	r3, [r4, #4]
    55d8:	b.n	53da <loop+0x192>

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    55da:	movw	r2, #38915	; 0x9803
    55de:	cmp	r3, r2
    55e0:	bne.n	54f0 <loop+0x2a8>
          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
              break;

          case 0x9803:  // getObjectPropertyValue
              TRANSMIT(getObjectPropValue(p1,p2));
    55e2:	mov.w	fp, #0
    55e6:	movs	r3, #1
    55e8:	mov	r2, sl
    55ea:	ldr	r1, [sp, #16]
    55ec:	ldr	r0, [pc, #632]	; (5868 <loop+0x620>)
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
    55ee:	mov	r8, fp
          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
              break;

          case 0x9803:  // getObjectPropertyValue
              TRANSMIT(getObjectPropValue(p1,p2));
    55f0:	strb	r3, [r4, #0]
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    55f2:	add.w	r9, sp, #92	; 0x5c
          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
              break;

          case 0x9803:  // getObjectPropertyValue
              TRANSMIT(getObjectPropValue(p1,p2));
    55f6:	str.w	fp, [r4, #4]
    55fa:	bl	4764 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    55fe:	ldr	r5, [pc, #620]	; (586c <loop+0x624>)
        write_length_ += len;
    5600:	movs	r2, #12
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5602:	ldr	r3, [pc, #620]	; (5870 <loop+0x628>)
          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
              break;

          case 0x9803:  // getObjectPropertyValue
              TRANSMIT(getObjectPropValue(p1,p2));
    5604:	mov.w	lr, #2
    5608:	ldr	r1, [r4, #4]
    560a:	add.w	r7, r3, #512	; 0x200
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    560e:	mov	r0, r3
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5610:	str	r3, [r5, #0]
          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
              break;

          case 0x9803:  // getObjectPropertyValue
              TRANSMIT(getObjectPropValue(p1,p2));
    5612:	add	r1, r2
    5614:	ldrh	r3, [r4, #38]	; 0x26
    5616:	str	r1, [sp, #24]
    5618:	strh.w	r3, [sp, #98]	; 0x62
    561c:	ldr	r3, [r4, #40]	; 0x28
    561e:	strb.w	fp, [r4]
    5622:	str	r1, [sp, #92]	; 0x5c
    5624:	strh.w	lr, [sp, #96]	; 0x60
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    5628:	str	r2, [r4, #4]
          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
              break;

          case 0x9803:  // getObjectPropertyValue
              TRANSMIT(getObjectPropValue(p1,p2));
    562a:	str	r3, [sp, #100]	; 0x64
    562c:	b.n	5638 <loop+0x3f0>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    562e:	cmp.w	r8, #11
    5632:	bgt.w	57ec <loop+0x5a4>
    5636:	ldr	r0, [r5, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5638:	ldr	r3, [pc, #568]	; (5874 <loop+0x62c>)
          memcpy(dst,src,to_copy);
    563a:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    563c:	rsb	fp, r0, r3
    5640:	rsb	r3, r8, #12
    5644:	cmp	fp, r3
    5646:	it	ge
    5648:	movge	fp, r3
          memcpy(dst,src,to_copy);
    564a:	mov	r2, fp
          pos += to_copy;
    564c:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    564e:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5652:	ldr	r3, [r5, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    5654:	add	r9, fp
          dst += to_copy;
    5656:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5658:	cmp	r3, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    565a:	str	r3, [r5, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    565c:	bne.n	562e <loop+0x3e6>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    565e:	movs	r2, #60	; 0x3c
    5660:	mov.w	r1, #512	; 0x200
    5664:	ldr	r0, [pc, #520]	; (5870 <loop+0x628>)
    5666:	bl	a228 <usb_mtp_send>
    566a:	cmp	r0, #0
    566c:	ble.n	565e <loop+0x416>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    566e:	ldr	r3, [pc, #512]	; (5870 <loop+0x628>)
    5670:	str	r3, [r5, #0]
    5672:	b.n	562e <loop+0x3e6>

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    5674:	movw	r2, #4097	; 0x1001
    5678:	cmp	r3, r2
    567a:	bne.w	5998 <loop+0x750>
        {
          case 0x1001:
            TRANSMIT(WriteDescriptor());
    567e:	mov.w	fp, #0
    5682:	movs	r3, #1
    5684:	ldr	r0, [pc, #480]	; (5868 <loop+0x620>)
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    5686:	add.w	r9, sp, #92	; 0x5c
        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
        {
          case 0x1001:
            TRANSMIT(WriteDescriptor());
    568a:	str.w	fp, [r4, #4]
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
    568e:	mov	r8, fp
        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
        {
          case 0x1001:
            TRANSMIT(WriteDescriptor());
    5690:	strb	r3, [r4, #0]
    5692:	bl	7c4 <MTPD::WriteDescriptor()>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5696:	ldr	r5, [pc, #468]	; (586c <loop+0x624>)
        write_length_ += len;
    5698:	movs	r2, #12
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    569a:	ldr	r3, [pc, #468]	; (5870 <loop+0x628>)
        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
        {
          case 0x1001:
            TRANSMIT(WriteDescriptor());
    569c:	mov.w	lr, #2
    56a0:	ldr	r1, [r4, #4]
    56a2:	add.w	r7, r3, #512	; 0x200
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    56a6:	mov	r0, r3
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    56a8:	str	r3, [r5, #0]
        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
        {
          case 0x1001:
            TRANSMIT(WriteDescriptor());
    56aa:	add	r1, r2
    56ac:	ldrh	r3, [r4, #38]	; 0x26
    56ae:	strb.w	fp, [r4]
    56b2:	mov	fp, r7
    56b4:	strh.w	r3, [sp, #98]	; 0x62
    56b8:	ldr	r3, [r4, #40]	; 0x28
    56ba:	str	r1, [sp, #24]
    56bc:	str	r1, [sp, #92]	; 0x5c
    56be:	strh.w	lr, [sp, #96]	; 0x60
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    56c2:	str	r2, [r4, #4]
        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
        {
          case 0x1001:
            TRANSMIT(WriteDescriptor());
    56c4:	str	r3, [sp, #100]	; 0x64
    56c6:	b.n	56d0 <loop+0x488>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    56c8:	cmp.w	r8, #11
    56cc:	bgt.n	57a2 <loop+0x55a>
    56ce:	ldr	r0, [r5, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    56d0:	rsb	sl, r0, fp
    56d4:	rsb	r3, r8, #12
          memcpy(dst,src,to_copy);
    56d8:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    56da:	cmp	sl, r3
    56dc:	it	ge
    56de:	movge	sl, r3
          memcpy(dst,src,to_copy);
    56e0:	mov	r2, sl
          pos += to_copy;
    56e2:	add	r8, sl
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    56e4:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    56e8:	ldr	r3, [r5, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    56ea:	add	r9, sl
          dst += to_copy;
    56ec:	add	r3, sl
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    56ee:	cmp	r3, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    56f0:	str	r3, [r5, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    56f2:	bne.n	56c8 <loop+0x480>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    56f4:	movs	r2, #60	; 0x3c
    56f6:	mov.w	r1, #512	; 0x200
    56fa:	ldr	r0, [pc, #372]	; (5870 <loop+0x628>)
    56fc:	bl	a228 <usb_mtp_send>
    5700:	cmp	r0, #0
    5702:	ble.n	56f4 <loop+0x4ac>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    5704:	ldr	r3, [pc, #360]	; (5870 <loop+0x628>)
    5706:	str	r3, [r5, #0]
    5708:	b.n	56c8 <loop+0x480>
      }
    }
  }

  void GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    570a:	movw	r3, #54274	; 0xd402
    570e:	ldr	r2, [sp, #16]
    5710:	cmp	r2, r3
    5712:	beq.w	601e <loop+0xdd6>
    5716:	movs	r3, #12
    5718:	str	r3, [sp, #28]
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    571a:	ldr	r3, [pc, #340]	; (5870 <loop+0x628>)
          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;

          case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    571c:	movs	r2, #0
    571e:	ldr	r0, [sp, #28]
    5720:	mov.w	ip, #2
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5724:	ldr	r5, [pc, #324]	; (586c <loop+0x624>)
          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;

          case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    5726:	movw	lr, #4117	; 0x1015
    572a:	add.w	r7, r3, #512	; 0x200
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    572e:	movs	r1, #12
          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;

          case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    5730:	str	r0, [sp, #92]	; 0x5c
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
    5732:	mov	r8, r2
          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;

          case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    5734:	ldr	r0, [sp, #20]
    5736:	mov	r9, r7
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    5738:	str	r3, [sp, #24]
        
        const char * src=data;
    573a:	add.w	sl, sp, #92	; 0x5c
          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;

          case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    573e:	str	r0, [sp, #100]	; 0x64
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    5740:	mov	r0, r3
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5742:	str	r3, [r5, #0]
          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;

          case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    5744:	strh.w	ip, [sp, #96]	; 0x60
    5748:	strh.w	lr, [sp, #98]	; 0x62
    574c:	strb	r2, [r4, #0]
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    574e:	str	r1, [r4, #4]
    5750:	b.n	575a <loop+0x512>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    5752:	cmp.w	r8, #11
    5756:	bgt.n	57c4 <loop+0x57c>
    5758:	ldr	r0, [r5, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    575a:	rsb	fp, r0, r9
    575e:	rsb	r3, r8, #12
          memcpy(dst,src,to_copy);
    5762:	mov	r1, sl
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5764:	cmp	fp, r3
    5766:	it	ge
    5768:	movge	fp, r3
          memcpy(dst,src,to_copy);
    576a:	mov	r2, fp
          pos += to_copy;
    576c:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    576e:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5772:	ldr	r3, [r5, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    5774:	add	sl, fp
          dst += to_copy;
    5776:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5778:	cmp	r3, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    577a:	str	r3, [r5, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    577c:	bne.n	5752 <loop+0x50a>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    577e:	movs	r2, #60	; 0x3c
    5780:	mov.w	r1, #512	; 0x200
    5784:	ldr	r0, [pc, #232]	; (5870 <loop+0x628>)
    5786:	bl	a228 <usb_mtp_send>
    578a:	cmp	r0, #0
    578c:	ble.n	577e <loop+0x536>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    578e:	ldr	r3, [pc, #224]	; (5870 <loop+0x628>)
    5790:	str	r3, [r5, #0]
    5792:	b.n	5752 <loop+0x50a>
      return mFS_copy(handle,store1,newHandle);
    }
*/    
    void openSession(uint32_t id)
    {
      sessionID_ = id;
    5794:	ldr	r2, [sp, #16]
    5796:	ldr	r3, [pc, #224]	; (5878 <loop+0x630>)
    5798:	mov	r5, r2
    579a:	ldrh.w	r1, [sp, #12]
    579e:	str	r2, [r3, #0]
    57a0:	b.n	533a <loop+0xf2>
        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
        {
          case 0x1001:
            TRANSMIT(WriteDescriptor());
    57a2:	ldr	r3, [sp, #24]
    57a4:	ldr	r0, [pc, #192]	; (5868 <loop+0x620>)
    57a6:	ubfx	r5, r3, #0, #9
    57aa:	bl	7c4 <MTPD::WriteDescriptor()>
    57ae:	cmp	r5, #0
    57b0:	beq.w	54fa <loop+0x2b2>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    57b4:	movs	r2, #60	; 0x3c
    57b6:	mov	r1, r5
    57b8:	ldr	r0, [pc, #180]	; (5870 <loop+0x628>)
    57ba:	bl	a228 <usb_mtp_send>
    57be:	cmp	r0, #0
    57c0:	ble.n	57b4 <loop+0x56c>
    57c2:	b.n	54fa <loop+0x2b2>
      }
    }
  }

  void GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    57c4:	movw	r3, #54274	; 0xd402
    57c8:	ldr	r2, [sp, #16]
    57ca:	cmp	r2, r3
    57cc:	beq.w	62b4 <loop+0x106c>
          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
              break;

          case 0x1015:  // GetDevicePropvalue
              TRANSMIT(GetDevicePropValue(p1));
    57d0:	ldr	r3, [sp, #28]
    57d2:	ubfx	r5, r3, #0, #9
    57d6:	cmp	r5, #0
    57d8:	beq.w	54fa <loop+0x2b2>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    57dc:	movs	r2, #60	; 0x3c
    57de:	mov	r1, r5
    57e0:	ldr	r0, [pc, #140]	; (5870 <loop+0x628>)
    57e2:	bl	a228 <usb_mtp_send>
    57e6:	cmp	r0, #0
    57e8:	ble.n	57dc <loop+0x594>
    57ea:	b.n	54fa <loop+0x2b2>
          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
              break;

          case 0x9803:  // getObjectPropertyValue
              TRANSMIT(getObjectPropValue(p1,p2));
    57ec:	ldr	r3, [sp, #24]
    57ee:	mov	r2, sl
    57f0:	ldr	r1, [sp, #16]
    57f2:	ubfx	r5, r3, #0, #9
    57f6:	ldr	r0, [pc, #112]	; (5868 <loop+0x620>)
    57f8:	bl	4764 <MTPD::getObjectPropValue(unsigned long, unsigned long)>
    57fc:	cmp	r5, #0
    57fe:	beq.w	54fa <loop+0x2b2>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5802:	movs	r2, #60	; 0x3c
    5804:	mov	r1, r5
    5806:	ldr	r0, [pc, #104]	; (5870 <loop+0x628>)
    5808:	bl	a228 <usb_mtp_send>
    580c:	cmp	r0, #0
    580e:	ble.n	5802 <loop+0x5ba>
    5810:	b.n	54fa <loop+0x2b2>
              TRANSMIT(GetObjectHandles(p1, p3));
            }
            break;

          case 0x1008:  // GetObjectInfo
            TRANSMIT(GetObjectInfo(p1));
    5812:	mov.w	r9, #0
    5816:	movs	r3, #1
    5818:	ldr	r1, [sp, #16]
    581a:	ldr	r0, [pc, #76]	; (5868 <loop+0x620>)
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
    581c:	mov	r8, r9
              TRANSMIT(GetObjectHandles(p1, p3));
            }
            break;

          case 0x1008:  // GetObjectInfo
            TRANSMIT(GetObjectInfo(p1));
    581e:	str.w	r9, [r4, #4]
    5822:	strb	r3, [r4, #0]
    5824:	bl	1e34 <MTPD::GetObjectInfo(unsigned long)>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5828:	ldr	r5, [pc, #64]	; (586c <loop+0x624>)
        write_length_ += len;
    582a:	movs	r2, #12
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    582c:	ldr	r3, [pc, #64]	; (5870 <loop+0x628>)
              TRANSMIT(GetObjectHandles(p1, p3));
            }
            break;

          case 0x1008:  // GetObjectInfo
            TRANSMIT(GetObjectInfo(p1));
    582e:	mov.w	lr, #2
    5832:	ldr	r1, [r4, #4]
    5834:	add.w	r7, r3, #512	; 0x200
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    5838:	mov	r0, r3
              TRANSMIT(GetObjectHandles(p1, p3));
            }
            break;

          case 0x1008:  // GetObjectInfo
            TRANSMIT(GetObjectInfo(p1));
    583a:	add	r1, r2
    583c:	ldrh.w	ip, [r4, #38]	; 0x26
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5840:	str	r3, [r5, #0]
    5842:	mov	fp, r7
              TRANSMIT(GetObjectHandles(p1, p3));
            }
            break;

          case 0x1008:  // GetObjectInfo
            TRANSMIT(GetObjectInfo(p1));
    5844:	ldr	r3, [r4, #40]	; 0x28
    5846:	strb.w	r9, [r4]
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    584a:	add.w	r9, sp, #92	; 0x5c
              TRANSMIT(GetObjectHandles(p1, p3));
            }
            break;

          case 0x1008:  // GetObjectInfo
            TRANSMIT(GetObjectInfo(p1));
    584e:	str	r1, [sp, #24]
    5850:	str	r1, [sp, #92]	; 0x5c
    5852:	strh.w	lr, [sp, #96]	; 0x60
    5856:	strh.w	ip, [sp, #98]	; 0x62
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    585a:	str	r2, [r4, #4]
              TRANSMIT(GetObjectHandles(p1, p3));
            }
            break;

          case 0x1008:  // GetObjectInfo
            TRANSMIT(GetObjectInfo(p1));
    585c:	str	r3, [sp, #100]	; 0x64
    585e:	b.n	5884 <loop+0x63c>
    5860:	.word	0x200001cc
    5864:	.word	0x20000b20
    5868:	.word	0x20009560
    586c:	.word	0x200014fc
    5870:	.word	0x20009780
    5874:	.word	0x20009980
    5878:	.word	0x2000b9a0
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    587c:	cmp.w	r8, #11
    5880:	bgt.n	594e <loop+0x706>
    5882:	ldr	r0, [r5, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5884:	rsb	sl, r0, fp
    5888:	rsb	r3, r8, #12
          memcpy(dst,src,to_copy);
    588c:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    588e:	cmp	sl, r3
    5890:	it	ge
    5892:	movge	sl, r3
          memcpy(dst,src,to_copy);
    5894:	mov	r2, sl
          pos += to_copy;
    5896:	add	r8, sl
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    5898:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    589c:	ldr	r3, [r5, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    589e:	add	r9, sl
          dst += to_copy;
    58a0:	add	r3, sl
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    58a2:	cmp	r3, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    58a4:	str	r3, [r5, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    58a6:	bne.n	587c <loop+0x634>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    58a8:	movs	r2, #60	; 0x3c
    58aa:	mov.w	r1, #512	; 0x200
    58ae:	ldr	r0, [pc, #760]	; (5ba8 <loop+0x960>)
    58b0:	bl	a228 <usb_mtp_send>
    58b4:	cmp	r0, #0
    58b6:	ble.n	58a8 <loop+0x660>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    58b8:	ldr	r3, [pc, #748]	; (5ba8 <loop+0x960>)
    58ba:	str	r3, [r5, #0]
    58bc:	b.n	587c <loop+0x634>
          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
              break;

          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
    58be:	mov.w	fp, #0
    58c2:	movs	r3, #1
    58c4:	mov	r2, sl
    58c6:	ldr	r1, [sp, #16]
    58c8:	ldr	r0, [pc, #736]	; (5bac <loop+0x964>)
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
    58ca:	mov	r8, fp
          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
              break;

          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
    58cc:	strb	r3, [r4, #0]
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    58ce:	add.w	r9, sp, #92	; 0x5c
          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
              break;

          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
    58d2:	str.w	fp, [r4, #4]
    58d6:	bl	2a14 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    58da:	ldr	r5, [pc, #724]	; (5bb0 <loop+0x968>)
        write_length_ += len;
    58dc:	movs	r2, #12
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    58de:	ldr	r3, [pc, #712]	; (5ba8 <loop+0x960>)
          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
              break;

          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
    58e0:	mov.w	lr, #2
    58e4:	ldr	r1, [r4, #4]
    58e6:	add.w	r7, r3, #512	; 0x200
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    58ea:	mov	r0, r3
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    58ec:	str	r3, [r5, #0]
          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
              break;

          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
    58ee:	add	r1, r2
    58f0:	ldrh	r3, [r4, #38]	; 0x26
    58f2:	str	r1, [sp, #24]
    58f4:	strh.w	r3, [sp, #98]	; 0x62
    58f8:	ldr	r3, [r4, #40]	; 0x28
    58fa:	strb.w	fp, [r4]
    58fe:	str	r1, [sp, #92]	; 0x5c
    5900:	strh.w	lr, [sp, #96]	; 0x60
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    5904:	str	r2, [r4, #4]
          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
              break;

          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
    5906:	str	r3, [sp, #100]	; 0x64
    5908:	b.n	5912 <loop+0x6ca>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    590a:	cmp.w	r8, #11
    590e:	bgt.n	5972 <loop+0x72a>
    5910:	ldr	r0, [r5, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5912:	ldr	r3, [pc, #672]	; (5bb4 <loop+0x96c>)
          memcpy(dst,src,to_copy);
    5914:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5916:	rsb	fp, r0, r3
    591a:	rsb	r3, r8, #12
    591e:	cmp	fp, r3
    5920:	it	ge
    5922:	movge	fp, r3
          memcpy(dst,src,to_copy);
    5924:	mov	r2, fp
          pos += to_copy;
    5926:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    5928:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    592c:	ldr	r3, [r5, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    592e:	add	r9, fp
          dst += to_copy;
    5930:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5932:	cmp	r3, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5934:	str	r3, [r5, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5936:	bne.n	590a <loop+0x6c2>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5938:	movs	r2, #60	; 0x3c
    593a:	mov.w	r1, #512	; 0x200
    593e:	ldr	r0, [pc, #616]	; (5ba8 <loop+0x960>)
    5940:	bl	a228 <usb_mtp_send>
    5944:	cmp	r0, #0
    5946:	ble.n	5938 <loop+0x6f0>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    5948:	ldr	r3, [pc, #604]	; (5ba8 <loop+0x960>)
    594a:	str	r3, [r5, #0]
    594c:	b.n	590a <loop+0x6c2>
              TRANSMIT(GetObjectHandles(p1, p3));
            }
            break;

          case 0x1008:  // GetObjectInfo
            TRANSMIT(GetObjectInfo(p1));
    594e:	ldr	r3, [sp, #24]
    5950:	ldr	r1, [sp, #16]
    5952:	ubfx	r5, r3, #0, #9
    5956:	ldr	r0, [pc, #596]	; (5bac <loop+0x964>)
    5958:	bl	1e34 <MTPD::GetObjectInfo(unsigned long)>
    595c:	cmp	r5, #0
    595e:	beq.w	54fa <loop+0x2b2>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5962:	movs	r2, #60	; 0x3c
    5964:	mov	r1, r5
    5966:	ldr	r0, [pc, #576]	; (5ba8 <loop+0x960>)
    5968:	bl	a228 <usb_mtp_send>
    596c:	cmp	r0, #0
    596e:	ble.n	5962 <loop+0x71a>
    5970:	b.n	54fa <loop+0x2b2>
          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
              break;

          case 0x9802:  // getObjectPropDesc
              TRANSMIT(getObjectPropDesc(p1,p2));
    5972:	ldr	r3, [sp, #24]
    5974:	mov	r2, sl
    5976:	ldr	r1, [sp, #16]
    5978:	ubfx	r5, r3, #0, #9
    597c:	ldr	r0, [pc, #556]	; (5bac <loop+0x964>)
    597e:	bl	2a14 <MTPD::getObjectPropDesc(unsigned long, unsigned long)>
    5982:	cmp	r5, #0
    5984:	beq.w	54fa <loop+0x2b2>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5988:	movs	r2, #60	; 0x3c
    598a:	mov	r1, r5
    598c:	ldr	r0, [pc, #536]	; (5ba8 <loop+0x960>)
    598e:	bl	a228 <usb_mtp_send>
    5992:	cmp	r0, #0
    5994:	ble.n	5988 <loop+0x740>
    5996:	b.n	54fa <loop+0x2b2>
    5998:	movw	r1, #8197	; 0x2005
    599c:	ldr	r5, [sp, #16]
          case 0x9804:  // setObjectPropertyValue
//              return_code = setObjectPropValue(p1,p2);
              break;

          default:
              return_code = 0x2005;  // operation not supported
    599e:	str	r1, [sp, #12]
    59a0:	b.n	533a <loop+0xf2>
    59a2:	ldr	r5, [sp, #16]
    59a4:	movs	r6, #12
    59a6:	ldrh.w	r1, [sp, #12]
    59aa:	b.n	533a <loop+0xf2>
        break;
    }
  }

  void GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    59ac:	movw	r2, #54274	; 0xd402
    59b0:	ldr	r1, [sp, #16]
//              if(!SendObject()) return_code = 0x2005;
              len = 12;
              break;

          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    59b2:	movs	r7, #1
    59b4:	ldr	r5, [pc, #500]	; (5bac <loop+0x964>)
        break;
    }
  }

  void GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    59b6:	cmp	r1, r2
//              if(!SendObject()) return_code = 0x2005;
              len = 12;
              break;

          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    59b8:	mov.w	r8, #0
    59bc:	strb	r7, [r4, #0]
        break;
    }
  }

  void GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    59be:	bne.w	5ffe <loop+0xdb6>
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    59c2:	movs	r3, #5
  void GetDevicePropValue(uint32_t prop) {
    switch (prop) {
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring(MTP_NAME);
    59c4:	ldr	r1, [pc, #496]	; (5bb8 <loop+0x970>)
    59c6:	mov	r0, r5
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    59c8:	str	r3, [r5, #4]
  void GetDevicePropValue(uint32_t prop) {
    switch (prop) {
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring(MTP_NAME);
    59ca:	bl	574 <MTPD::writestring(char const*)>
    59ce:	ldr	r1, [pc, #488]	; (5bb8 <loop+0x970>)
    59d0:	mov	r0, r5
    59d2:	bl	574 <MTPD::writestring(char const*)>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    59d6:	ldrb	r3, [r5, #0]
    59d8:	strb.w	r8, [sp, #52]	; 0x34
    59dc:	cmp	r3, #0
    59de:	beq.w	629c <loop+0x1054>
      {
        write_length_ += len;
    59e2:	ldr	r2, [r5, #4]
    59e4:	ldrh	r3, [r5, #38]	; 0x26
    59e6:	adds	r2, #13
    59e8:	ldr	r0, [r5, #40]	; 0x28
    59ea:	str	r2, [sp, #28]
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    59ec:	ldr	r2, [pc, #440]	; (5ba8 <loop+0x960>)
//              if(!SendObject()) return_code = 0x2005;
              len = 12;
              break;

          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    59ee:	mov.w	r9, #0
    59f2:	mov.w	ip, #2
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    59f6:	ldr	r5, [pc, #440]	; (5bb0 <loop+0x968>)
    59f8:	add.w	r7, r2, #512	; 0x200
        write_length_ += len;
    59fc:	mov.w	lr, #12
//              if(!SendObject()) return_code = 0x2005;
              len = 12;
              break;

          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    5a00:	ldr	r1, [sp, #28]
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
    5a02:	mov	r8, r9
//              if(!SendObject()) return_code = 0x2005;
              len = 12;
              break;

          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    5a04:	str	r0, [sp, #100]	; 0x64
    5a06:	mov	sl, r7
    5a08:	strb.w	r9, [r4]
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    5a0c:	mov	r0, r2
    5a0e:	str	r2, [sp, #24]
        
        const char * src=data;
    5a10:	add.w	r9, sp, #92	; 0x5c
//              if(!SendObject()) return_code = 0x2005;
              len = 12;
              break;

          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    5a14:	str	r1, [sp, #92]	; 0x5c
    5a16:	strh.w	r3, [sp, #98]	; 0x62
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5a1a:	str	r2, [r5, #0]
//              if(!SendObject()) return_code = 0x2005;
              len = 12;
              break;

          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    5a1c:	strh.w	ip, [sp, #96]	; 0x60
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    5a20:	str.w	lr, [r4, #4]
    5a24:	b.n	5a30 <loop+0x7e8>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    5a26:	cmp.w	r8, #11
    5a2a:	bgt.w	5c5c <loop+0xa14>
    5a2e:	ldr	r0, [r5, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5a30:	rsb	fp, r0, sl
    5a34:	rsb	r3, r8, #12
          memcpy(dst,src,to_copy);
    5a38:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5a3a:	cmp	fp, r3
    5a3c:	it	ge
    5a3e:	movge	fp, r3
          memcpy(dst,src,to_copy);
    5a40:	mov	r2, fp
          pos += to_copy;
    5a42:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    5a44:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5a48:	ldr	r3, [r5, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    5a4a:	add	r9, fp
          dst += to_copy;
    5a4c:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5a4e:	cmp	r3, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5a50:	str	r3, [r5, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5a52:	bne.n	5a26 <loop+0x7de>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5a54:	movs	r2, #60	; 0x3c
    5a56:	mov.w	r1, #512	; 0x200
    5a5a:	ldr	r0, [pc, #332]	; (5ba8 <loop+0x960>)
    5a5c:	bl	a228 <usb_mtp_send>
    5a60:	cmp	r0, #0
    5a62:	ble.n	5a54 <loop+0x80c>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    5a64:	ldr	r3, [pc, #320]	; (5ba8 <loop+0x960>)
    5a66:	str	r3, [r5, #0]
    5a68:	b.n	5a26 <loop+0x7de>
    5a6a:	ldr	r3, [pc, #336]	; (5bbc <loop+0x974>)
          case 0x1008:  // GetObjectInfo
            TRANSMIT(GetObjectInfo(p1));
            break;

          case 0x1009:  // GetObject
            TRANSMIT(GetObject(p1));
    5a6c:	movs	r2, #0
    char * getName(uint32_t store) {return zFs_[store].getName();}

    uint32_t Info(uint32_t handle, char *filename, uint32_t *size, uint32_t *parent)
    { return zFs_[0].Info(handle, filename, size, parent);}

    uint32_t GetSize(uint32_t handle) {return zFs_[0].GetSize(handle);}
    5a6e:	ldr	r1, [sp, #16]
    5a70:	mov	r0, r3
    5a72:	str	r3, [sp, #28]
          case 0x1008:  // GetObjectInfo
            TRANSMIT(GetObjectInfo(p1));
            break;

          case 0x1009:  // GetObject
            TRANSMIT(GetObject(p1));
    5a74:	movs	r3, #1
    5a76:	str	r2, [r4, #4]
    char * getName(uint32_t store) {return zFs_[store].getName();}

    uint32_t Info(uint32_t handle, char *filename, uint32_t *size, uint32_t *parent)
    { return zFs_[0].Info(handle, filename, size, parent);}

    uint32_t GetSize(uint32_t handle) {return zFs_[0].GetSize(handle);}
    5a78:	ldr	r0, [r0, #80]	; 0x50
          case 0x1008:  // GetObjectInfo
            TRANSMIT(GetObjectInfo(p1));
            break;

          case 0x1009:  // GetObject
            TRANSMIT(GetObject(p1));
    5a7a:	strb	r3, [r4, #0]
    char * getName(uint32_t store) {return zFs_[store].getName();}

    uint32_t Info(uint32_t handle, char *filename, uint32_t *size, uint32_t *parent)
    { return zFs_[0].Info(handle, filename, size, parent);}

    uint32_t GetSize(uint32_t handle) {return zFs_[0].GetSize(handle);}
    5a7c:	bl	7120 <zeroFS_class::GetSize(unsigned long)>

    void GetObject(uint32_t object_id) 
    {
      uint32_t size = mFS.GetSize(object_id);

      if (write_get_length_) {
    5a80:	ldrb	r3, [r4, #0]
    char * getName(uint32_t store) {return zFs_[store].getName();}

    uint32_t Info(uint32_t handle, char *filename, uint32_t *size, uint32_t *parent)
    { return zFs_[0].Info(handle, filename, size, parent);}

    uint32_t GetSize(uint32_t handle) {return zFs_[0].GetSize(handle);}
    5a82:	mov	fp, r0
          case 0x1008:  // GetObjectInfo
            TRANSMIT(GetObjectInfo(p1));
            break;

          case 0x1009:  // GetObject
            TRANSMIT(GetObject(p1));
    5a84:	ldr	r7, [pc, #292]	; (5bac <loop+0x964>)

    void GetObject(uint32_t object_id) 
    {
      uint32_t size = mFS.GetSize(object_id);

      if (write_get_length_) {
    5a86:	cmp	r3, #0
    5a88:	bne.w	6006 <loop+0xdbe>
        uint32_t pos = 0; // into data
        uint32_t len = sizeof(MTPHeader);
        uint32_t sector = object_id;
        uint32_t count = size / 512;

        disk_pos=DISK_BUFFER_SIZE;
    5a8c:	movw	r2, #9248	; 0x2420
    5a90:	mov.w	r1, #8192	; 0x2000
      } else 
      { 
        uint32_t pos = 0; // into data
        uint32_t len = sizeof(MTPHeader);
        uint32_t sector = object_id;
        uint32_t count = size / 512;
    5a94:	lsrs	r0, r0, #9

        disk_pos=DISK_BUFFER_SIZE;
    5a96:	str	r1, [r7, r2]
      } else 
      { 
        uint32_t pos = 0; // into data
        uint32_t len = sizeof(MTPHeader);
        uint32_t sector = object_id;
        uint32_t count = size / 512;
    5a98:	str	r0, [sp, #32]

        disk_pos=DISK_BUFFER_SIZE;
        while(pos<size)
    5a9a:	cmp.w	fp, #0
    5a9e:	beq.w	663e <loop+0x13f6>
    5aa2:	mov	sl, r3
    { if(!usb_mtp_available()) return;
      if(fetch_packet(rx_data_buffer))
      { printContainer(); // to switch on set debug to 1 at beginning of file

        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
    5aa4:	ldr	r3, [sp, #16]
    5aa6:	str	r6, [sp, #40]	; 0x28
        uint32_t len = sizeof(MTPHeader);
        uint32_t sector = object_id;
        uint32_t count = size / 512;

        disk_pos=DISK_BUFFER_SIZE;
        while(pos<size)
    5aa8:	mov.w	r9, #12
    { if(!usb_mtp_available()) return;
      if(fetch_packet(rx_data_buffer))
      { printContainer(); // to switch on set debug to 1 at beginning of file

        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
    5aac:	str	r3, [sp, #36]	; 0x24
    5aae:	add.w	r3, r7, #544	; 0x220
    5ab2:	mov	r6, r1
    5ab4:	add.w	r7, r7, #1056	; 0x420
    5ab8:	str	r3, [sp, #24]
    5aba:	add.w	r5, r3, #8704	; 0x2200
    5abe:	mov	r8, r3
    5ac0:	b.n	5aca <loop+0x882>
        uint32_t len = sizeof(MTPHeader);
        uint32_t sector = object_id;
        uint32_t count = size / 512;

        disk_pos=DISK_BUFFER_SIZE;
        while(pos<size)
    5ac2:	cmp	fp, sl
    5ac4:	bls.w	5e4e <loop+0xc06>
    5ac8:	ldr	r6, [r5, #0]
        {
          if(disk_pos==DISK_BUFFER_SIZE)
    5aca:	cmp.w	r6, #8192	; 0x2000
    5ace:	beq.w	5c26 <loop+0x9de>
    5ad2:	rsb	r2, r6, #8192	; 0x2000
    5ad6:	adds	r1, r7, r6
            count-=MCOUNT;

            disk_pos=0;
          }

          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
    5ad8:	rsb	r6, r9, #512	; 0x200
    5adc:	rsb	r3, sl, fp
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);

          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    5ae0:	add.w	r0, r8, r9
            count-=MCOUNT;

            disk_pos=0;
          }

          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
    5ae4:	cmp	r6, r3
    5ae6:	it	cs
    5ae8:	movcs	r6, r3
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    5aea:	cmp	r6, r2
    5aec:	it	cs
    5aee:	movcs	r6, r2

          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    5af0:	mov	r2, r6
          disk_pos += to_copy;
          pos += to_copy;
          len += to_copy;
    5af2:	add	r9, r6
          }

          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);

          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    5af4:	bl	8568 <memcpy>
          disk_pos += to_copy;
    5af8:	ldr	r3, [r5, #0]
          pos += to_copy;
    5afa:	add	sl, r6
          len += to_copy;

          if(len==MTP_TX_SIZE)
    5afc:	cmp.w	r9, #512	; 0x200

          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);

          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
          disk_pos += to_copy;
    5b00:	add	r6, r3
    5b02:	str	r6, [r5, #0]
          pos += to_copy;
          len += to_copy;

          if(len==MTP_TX_SIZE)
    5b04:	bne.n	5ac2 <loop+0x87a>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5b06:	movs	r2, #60	; 0x3c
    5b08:	mov.w	r1, #512	; 0x200
    5b0c:	ldr	r0, [pc, #152]	; (5ba8 <loop+0x960>)
    5b0e:	bl	a228 <usb_mtp_send>
    5b12:	cmp	r0, #0
    5b14:	ble.n	5b06 <loop+0x8be>
          pos += to_copy;
          len += to_copy;

          if(len==MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            len=0;
    5b16:	mov.w	r9, #0
    5b1a:	b.n	5ac2 <loop+0x87a>
          case 0x1005:  // GetStorageInfo
            TRANSMIT(GetStorageInfo(p1));
            break;

          case 0x1006:  // GetNumObjects
            if (p2) 
    5b1c:	cmp.w	sl, #0
    5b20:	bne.w	52fa <loop+0xb2>
{
   char name[80];
   zeroFS_class *zFs_ = &zFS;

public:
    uint32_t Count(uint32_t store,uint32_t parent) {return zFs_[store].Count(parent);}
    5b24:	ldr	r2, [sp, #16]
    5b26:	movw	r0, #10864	; 0x2a70
    5b2a:	ldr	r3, [pc, #144]	; (5bbc <loop+0x974>)
    5b2c:	mov	r1, r8
    5b2e:	subs	r2, #1
    5b30:	ldr	r3, [r3, #80]	; 0x50
    5b32:	mla	r0, r0, r2, r3
    5b36:	bl	6fa0 <zeroFS_class::Count(unsigned long)>
    5b3a:	ldrh.w	r1, [sp, #12]
    5b3e:	mov	r5, r0
    5b40:	b.w	533a <loop+0xf2>

        int return_code =0x2001; //OK use as default value

        if(typ==2) return_code=0x2005; // we should only get cmds

        switch (op)
    5b44:	mov	r5, r2
    5b46:	movs	r6, #16
              return_code = 0x2005;
//              return_code = copyObject(p1,p2,p3);
              if(!return_code) 
              { return_code=0x2005; len = 12; }
              else
              { p1 = return_code; return_code=0x2001; len = 16;  }
    5b48:	str	r1, [sp, #12]
    5b4a:	b.w	533a <loop+0xf2>
    5b4e:	ldr	r5, [sp, #16]
    5b50:	movs	r6, #24
    5b52:	ldrh.w	r1, [sp, #12]
    5b56:	b.w	533a <loop+0xf2>
          case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
            break;

          case 0x1005:  // GetStorageInfo
            TRANSMIT(GetStorageInfo(p1));
    5b5a:	mov.w	r9, #0
    5b5e:	movs	r3, #1
    5b60:	ldr	r1, [sp, #16]
    5b62:	ldr	r0, [pc, #72]	; (5bac <loop+0x964>)
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
    5b64:	mov	r8, r9
          case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
            break;

          case 0x1005:  // GetStorageInfo
            TRANSMIT(GetStorageInfo(p1));
    5b66:	str.w	r9, [r4, #4]
    5b6a:	strb	r3, [r4, #0]
    5b6c:	bl	1828 <MTPD::GetStorageInfo(unsigned long)>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5b70:	ldr	r5, [pc, #60]	; (5bb0 <loop+0x968>)
        write_length_ += len;
    5b72:	movs	r2, #12
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5b74:	ldr	r3, [pc, #48]	; (5ba8 <loop+0x960>)
          case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
            break;

          case 0x1005:  // GetStorageInfo
            TRANSMIT(GetStorageInfo(p1));
    5b76:	mov.w	lr, #2
    5b7a:	ldr	r1, [r4, #4]
    5b7c:	add.w	r7, r3, #512	; 0x200
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    5b80:	mov	r0, r3
          case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
            break;

          case 0x1005:  // GetStorageInfo
            TRANSMIT(GetStorageInfo(p1));
    5b82:	add	r1, r2
    5b84:	ldrh.w	ip, [r4, #38]	; 0x26
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5b88:	str	r3, [r5, #0]
    5b8a:	mov	fp, r7
          case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
            break;

          case 0x1005:  // GetStorageInfo
            TRANSMIT(GetStorageInfo(p1));
    5b8c:	ldr	r3, [r4, #40]	; 0x28
    5b8e:	strb.w	r9, [r4]
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    5b92:	add.w	r9, sp, #92	; 0x5c
          case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
            break;

          case 0x1005:  // GetStorageInfo
            TRANSMIT(GetStorageInfo(p1));
    5b96:	str	r1, [sp, #24]
    5b98:	str	r1, [sp, #92]	; 0x5c
    5b9a:	strh.w	lr, [sp, #96]	; 0x60
    5b9e:	strh.w	ip, [sp, #98]	; 0x62
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    5ba2:	str	r2, [r4, #4]
          case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
            break;

          case 0x1005:  // GetStorageInfo
            TRANSMIT(GetStorageInfo(p1));
    5ba4:	str	r3, [sp, #100]	; 0x64
    5ba6:	b.n	5bc8 <loop+0x980>
    5ba8:	.word	0x20009780
    5bac:	.word	0x20009560
    5bb0:	.word	0x200014fc
    5bb4:	.word	0x20009980
    5bb8:	.word	0x200001a8
    5bbc:	.word	0x20009508
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    5bc0:	cmp.w	r8, #11
    5bc4:	bgt.n	5c02 <loop+0x9ba>
    5bc6:	ldr	r0, [r5, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5bc8:	rsb	sl, r0, fp
    5bcc:	rsb	r3, r8, #12
          memcpy(dst,src,to_copy);
    5bd0:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5bd2:	cmp	sl, r3
    5bd4:	it	ge
    5bd6:	movge	sl, r3
          memcpy(dst,src,to_copy);
    5bd8:	mov	r2, sl
          pos += to_copy;
    5bda:	add	r8, sl
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    5bdc:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5be0:	ldr	r3, [r5, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    5be2:	add	r9, sl
          dst += to_copy;
    5be4:	add	r3, sl
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5be6:	cmp	r3, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5be8:	str	r3, [r5, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5bea:	bne.n	5bc0 <loop+0x978>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5bec:	movs	r2, #60	; 0x3c
    5bee:	mov.w	r1, #512	; 0x200
    5bf2:	ldr	r0, [pc, #696]	; (5eac <loop+0xc64>)
    5bf4:	bl	a228 <usb_mtp_send>
    5bf8:	cmp	r0, #0
    5bfa:	ble.n	5bec <loop+0x9a4>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    5bfc:	ldr	r3, [pc, #684]	; (5eac <loop+0xc64>)
    5bfe:	str	r3, [r5, #0]
    5c00:	b.n	5bc0 <loop+0x978>
          case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
            break;

          case 0x1005:  // GetStorageInfo
            TRANSMIT(GetStorageInfo(p1));
    5c02:	ldr	r3, [sp, #24]
    5c04:	ldr	r1, [sp, #16]
    5c06:	ubfx	r5, r3, #0, #9
    5c0a:	ldr	r0, [pc, #676]	; (5eb0 <loop+0xc68>)
    5c0c:	bl	1828 <MTPD::GetStorageInfo(unsigned long)>
    5c10:	cmp	r5, #0
    5c12:	beq.w	54fa <loop+0x2b2>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5c16:	movs	r2, #60	; 0x3c
    5c18:	mov	r1, r5
    5c1a:	ldr	r0, [pc, #656]	; (5eac <loop+0xc64>)
    5c1c:	bl	a228 <usb_mtp_send>
    5c20:	cmp	r0, #0
    5c22:	ble.n	5c16 <loop+0x9ce>
    5c24:	b.n	54fa <loop+0x2b2>
    { return zFs_[0].Info(handle, filename, size, parent);}

    uint32_t GetSize(uint32_t handle) {return zFs_[0].GetSize(handle);}
    
    uint32_t Read(uint32_t handle, char* out, uint32_t count) 
    { return zFs_[0].Read(handle, out, count);}
    5c26:	ldr	r0, [sp, #32]
    5c28:	ldr	r1, [sp, #36]	; 0x24
    5c2a:	mov	r3, r0
    5c2c:	cmp	r0, #16
          if(disk_pos==DISK_BUFFER_SIZE)
          {
//            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
//            mFS.Read(object_id,size,pos,(char *)disk_buffer,nread);
            sector = mFS.Read(sector, (char *)disk_buffer, min(count,MCOUNT));
            count-=MCOUNT;
    5c2e:	sub.w	r0, r0, #16
    { return zFs_[0].Info(handle, filename, size, parent);}

    uint32_t GetSize(uint32_t handle) {return zFs_[0].GetSize(handle);}
    
    uint32_t Read(uint32_t handle, char* out, uint32_t count) 
    { return zFs_[0].Read(handle, out, count);}
    5c32:	ldr	r2, [pc, #640]	; (5eb4 <loop+0xc6c>)
    5c34:	it	cs
    5c36:	movcs	r3, #16
          if(disk_pos==DISK_BUFFER_SIZE)
          {
//            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
//            mFS.Read(object_id,size,pos,(char *)disk_buffer,nread);
            sector = mFS.Read(sector, (char *)disk_buffer, min(count,MCOUNT));
            count-=MCOUNT;
    5c38:	str	r0, [sp, #32]
    { return zFs_[0].Info(handle, filename, size, parent);}

    uint32_t GetSize(uint32_t handle) {return zFs_[0].GetSize(handle);}
    
    uint32_t Read(uint32_t handle, char* out, uint32_t count) 
    { return zFs_[0].Read(handle, out, count);}
    5c3a:	ldr	r0, [sp, #28]
    5c3c:	ldr	r0, [r0, #80]	; 0x50
    5c3e:	bl	7154 <zeroFS_class::Read(unsigned long, char*, unsigned long)>
//            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
//            mFS.Read(object_id,size,pos,(char *)disk_buffer,nread);
            sector = mFS.Read(sector, (char *)disk_buffer, min(count,MCOUNT));
            count-=MCOUNT;

            disk_pos=0;
    5c42:	movs	r3, #0
    { return zFs_[0].Info(handle, filename, size, parent);}

    uint32_t GetSize(uint32_t handle) {return zFs_[0].GetSize(handle);}
    
    uint32_t Read(uint32_t handle, char* out, uint32_t count) 
    { return zFs_[0].Read(handle, out, count);}
    5c44:	str	r0, [sp, #36]	; 0x24
//            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
//            mFS.Read(object_id,size,pos,(char *)disk_buffer,nread);
            sector = mFS.Read(sector, (char *)disk_buffer, min(count,MCOUNT));
            count-=MCOUNT;

            disk_pos=0;
    5c46:	mov	r2, r6
    5c48:	ldr	r1, [pc, #616]	; (5eb4 <loop+0xc6c>)
    5c4a:	str	r3, [r5, #0]
    5c4c:	b.n	5ad8 <loop+0x890>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5c4e:	ldr	r2, [sp, #24]
    5c50:	str	r2, [r5, #0]
    5c52:	ldr	r2, [pc, #600]	; (5eac <loop+0xc64>)
    5c54:	str	r2, [sp, #24]
    5c56:	mov	r0, r2
    5c58:	b.w	5402 <loop+0x1ba>
        break;
    }
  }

  void GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    5c5c:	movw	r3, #54274	; 0xd402
    5c60:	ldr	r1, [sp, #16]
    5c62:	cmp	r1, r3
    5c64:	bne.n	5cbc <loop+0xa74>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    5c66:	ldr	r3, [pc, #584]	; (5eb0 <loop+0xc68>)
    5c68:	ldrb	r2, [r4, #0]
    5c6a:	strh.w	r1, [sp, #56]	; 0x38
      {
        write_length_ += len;
    5c6e:	ldr	r3, [r3, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    5c70:	cmp	r2, #0
    5c72:	beq.w	6368 <loop+0x1120>
    5c76:	movw	r2, #65535	; 0xffff
      {
        write_length_ += len;
    5c7a:	adds	r3, #2
    5c7c:	strh.w	r2, [sp, #58]	; 0x3a
    5c80:	movs	r2, #0
    5c82:	adds	r3, #2
    5c84:	strb.w	r2, [sp, #53]	; 0x35
    5c88:	adds	r3, #1
    5c8a:	str	r3, [r4, #4]
  void GetDevicePropValue(uint32_t prop) {
    switch (prop) {
      case 0xd402: // friendly name
        // This is the name we'll actually see in the windows explorer.
        // Should probably be configurable.
        writestring(MTP_NAME);
    5c8c:	ldr.w	r8, [pc, #544]	; 5eb0 <loop+0xc68>
    5c90:	ldr	r1, [pc, #548]	; (5eb8 <loop+0xc70>)
    5c92:	mov	r0, r8
    5c94:	bl	574 <MTPD::writestring(char const*)>
    5c98:	mov	r0, r8
    5c9a:	ldr	r1, [pc, #540]	; (5eb8 <loop+0xc70>)
    5c9c:	bl	574 <MTPD::writestring(char const*)>
    5ca0:	movs	r2, #0
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    5ca2:	ldrb	r3, [r4, #0]
    5ca4:	strb.w	r2, [sp, #54]	; 0x36
    5ca8:	cmp	r3, #0
    5caa:	beq.w	623c <loop+0xff4>
      {
        write_length_ += len;
    5cae:	ldr.w	r3, [r8, #4]
    5cb2:	ldr	r2, [sp, #92]	; 0x5c
    5cb4:	adds	r3, #1
    5cb6:	str	r2, [sp, #28]
    5cb8:	str.w	r3, [r8, #4]
//              if(!SendObject()) return_code = 0x2005;
              len = 12;
              break;

          case 0x1014:  // GetDevicePropDesc
              TRANSMIT(GetDevicePropDesc(p1));
    5cbc:	ldr	r3, [sp, #28]
    5cbe:	ubfx	r5, r3, #0, #9
    5cc2:	cmp	r5, #0
    5cc4:	beq.w	54fa <loop+0x2b2>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5cc8:	movs	r2, #60	; 0x3c
    5cca:	mov	r1, r5
    5ccc:	ldr	r0, [pc, #476]	; (5eac <loop+0xc64>)
    5cce:	bl	a228 <usb_mtp_send>
    5cd2:	cmp	r0, #0
    5cd4:	ble.n	5cc8 <loop+0xa80>
    5cd6:	b.n	54fa <loop+0x2b2>
    5cd8:	movs	r2, #1
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    5cda:	ldr	r3, [pc, #468]	; (5eb0 <loop+0xc68>)
    5cdc:	ldrb	r1, [r4, #0]
    5cde:	str	r2, [sp, #72]	; 0x48
      {
        write_length_ += len;
    5ce0:	ldr	r3, [r3, #4]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    5ce2:	cmp	r1, #0
    5ce4:	beq.w	6158 <loop+0xf10>
      {
        write_length_ += len;
    5ce8:	adds	r3, #4
    5cea:	str	r2, [sp, #76]	; 0x4c
    5cec:	adds	r3, #4
    5cee:	str	r3, [r4, #4]

          case 0x1003:  // CloseSession
            break;

          case 0x1004:  // GetStorageIDs
              TRANSMIT(WriteStorageIDs());
    5cf0:	ldr	r5, [sp, #92]	; 0x5c
    5cf2:	ubfx	r5, r5, #0, #9
    5cf6:	cmp	r5, #0
    5cf8:	beq.w	54fa <loop+0x2b2>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5cfc:	movs	r2, #60	; 0x3c
    5cfe:	mov	r1, r5
    5d00:	ldr	r0, [pc, #424]	; (5eac <loop+0xc64>)
    5d02:	bl	a228 <usb_mtp_send>
    5d06:	cmp	r0, #0
    5d08:	ble.n	5cfc <loop+0xab4>
    5d0a:	b.w	54fa <loop+0x2b2>
    5d0e:	ldr	r6, [sp, #32]
          case 0x101B:  // GetPartialObject
//              TRANSMIT1(GetPartialObject(p1,p2,p3));
              break;

          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
    5d10:	adds	r3, #12
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5d12:	ldr	r2, [sp, #24]
          case 0x101B:  // GetPartialObject
//              TRANSMIT1(GetPartialObject(p1,p2,p3));
              break;

          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
    5d14:	ldrh	r0, [r4, #38]	; 0x26
    5d16:	mov.w	ip, #2
    5d1a:	str	r3, [sp, #92]	; 0x5c
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    5d1c:	movs	r1, #12
    5d1e:	ldr	r3, [pc, #396]	; (5eac <loop+0xc64>)
        
        const char * src=data;
    5d20:	add.w	r9, sp, #92	; 0x5c
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5d24:	str	r2, [r5, #0]
          case 0x101B:  // GetPartialObject
//              TRANSMIT1(GetPartialObject(p1,p2,p3));
              break;

          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
    5d26:	movs	r2, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    5d28:	str	r3, [sp, #24]
          case 0x101B:  // GetPartialObject
//              TRANSMIT1(GetPartialObject(p1,p2,p3));
              break;

          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
    5d2a:	strh.w	r0, [sp, #98]	; 0x62
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    5d2e:	mov	r0, r3
          case 0x101B:  // GetPartialObject
//              TRANSMIT1(GetPartialObject(p1,p2,p3));
              break;

          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
    5d30:	ldr	r3, [r4, #40]	; 0x28
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
    5d32:	mov	r8, r2
          case 0x101B:  // GetPartialObject
//              TRANSMIT1(GetPartialObject(p1,p2,p3));
              break;

          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
    5d34:	strh.w	ip, [sp, #96]	; 0x60
    5d38:	str	r3, [sp, #100]	; 0x64
    5d3a:	strb	r2, [r4, #0]
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    5d3c:	str	r1, [r4, #4]
    5d3e:	b.n	5d48 <loop+0xb00>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    5d40:	cmp.w	r8, #11
    5d44:	bgt.n	5d82 <loop+0xb3a>
    5d46:	ldr	r0, [r5, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5d48:	rsb	fp, r0, sl
    5d4c:	rsb	r3, r8, #12
          memcpy(dst,src,to_copy);
    5d50:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5d52:	cmp	fp, r3
    5d54:	it	ge
    5d56:	movge	fp, r3
          memcpy(dst,src,to_copy);
    5d58:	mov	r2, fp
          pos += to_copy;
    5d5a:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    5d5c:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5d60:	ldr	r3, [r5, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    5d62:	add	r9, fp
          dst += to_copy;
    5d64:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5d66:	cmp	r3, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5d68:	str	r3, [r5, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5d6a:	bne.n	5d40 <loop+0xaf8>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5d6c:	movs	r2, #60	; 0x3c
    5d6e:	mov.w	r1, #512	; 0x200
    5d72:	ldr	r0, [pc, #312]	; (5eac <loop+0xc64>)
    5d74:	bl	a228 <usb_mtp_send>
    5d78:	cmp	r0, #0
    5d7a:	ble.n	5d6c <loop+0xb24>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    5d7c:	ldr	r3, [pc, #300]	; (5eac <loop+0xc64>)
    5d7e:	str	r3, [r5, #0]
    5d80:	b.n	5d40 <loop+0xaf8>
    }
  }

    void getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
    5d82:	ldr	r3, [pc, #312]	; (5ebc <loop+0xc74>)
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    5d84:	ldrb	r1, [r4, #0]
    }
  }

    void getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
    5d86:	ldr	r3, [r3, #0]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    5d88:	ldr	r2, [pc, #292]	; (5eb0 <loop+0xc68>)
    5d8a:	str	r3, [sp, #88]	; 0x58
    5d8c:	cmp	r1, #0
    5d8e:	beq.w	60fa <loop+0xeb2>
      {
        write_length_ += len;
    5d92:	ldr	r1, [r2, #4]
    5d94:	adds	r1, #4
    5d96:	str	r1, [r2, #4]
  }

    void getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    5d98:	cmp	r3, #0
    5d9a:	beq.n	5e30 <loop+0xbe8>
    5d9c:	ldr	r3, [pc, #288]	; (5ec0 <loop+0xc78>)
    5d9e:	movw	r2, #56321	; 0xdc01
    5da2:	str	r6, [sp, #32]
    5da4:	str	r3, [sp, #28]
    5da6:	movs	r3, #0
    5da8:	mov	r9, r3
    5daa:	b.n	5dc6 <loop+0xb7e>
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    5dac:	ldr	r3, [r0, #4]
    5dae:	adds	r3, #2
    5db0:	str	r3, [r0, #4]
  }

    void getObjectPropsSupported(uint32_t p1)
    {
      write32(propertyListNum);
      for(uint32_t ii=0; ii<propertyListNum;ii++) write16(propertyList[ii]);
    5db2:	ldr	r3, [pc, #264]	; (5ebc <loop+0xc74>)
    5db4:	add.w	r9, r9, #1
    5db8:	ldr	r3, [r3, #0]
    5dba:	cmp	r3, r9
    5dbc:	bls.n	5e2e <loop+0xbe6>
    5dbe:	ldr	r3, [sp, #28]
    5dc0:	ldrh.w	r2, [r3, #2]!
    5dc4:	str	r3, [sp, #28]
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    5dc6:	ldrb	r3, [r4, #0]
    5dc8:	strh.w	r2, [sp, #68]	; 0x44
    5dcc:	ldr	r0, [pc, #224]	; (5eb0 <loop+0xc68>)
    5dce:	cmp	r3, #0
    5dd0:	bne.n	5dac <loop+0xb64>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5dd2:	ldr	r3, [r0, #4]
    5dd4:	cbz	r3, 5e24 <loop+0xbdc>
    5dd6:	ldr	r0, [r5, #0]
        write_length_ += len;
    5dd8:	adds	r3, #2
        
        const char * src=data;
    5dda:	add.w	r8, sp, #68	; 0x44
        //
        int pos = 0; // into data
    5dde:	movs	r6, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    5de0:	str	r3, [r4, #4]
    5de2:	b.n	5dea <loop+0xba2>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    5de4:	cmp	r6, #1
    5de6:	bgt.n	5db2 <loop+0xb6a>
    5de8:	ldr	r0, [r5, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5dea:	rsb	fp, r0, sl
    5dee:	rsb	r3, r6, #2
          memcpy(dst,src,to_copy);
    5df2:	mov	r1, r8
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5df4:	cmp	fp, r3
    5df6:	it	ge
    5df8:	movge	fp, r3
          memcpy(dst,src,to_copy);
    5dfa:	mov	r2, fp
          pos += to_copy;
    5dfc:	add	r6, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    5dfe:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5e02:	ldr	r3, [r5, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    5e04:	add	r8, fp
          dst += to_copy;
    5e06:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5e08:	cmp	r3, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5e0a:	str	r3, [r5, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5e0c:	bne.n	5de4 <loop+0xb9c>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5e0e:	movs	r2, #60	; 0x3c
    5e10:	mov.w	r1, #512	; 0x200
    5e14:	ldr	r0, [pc, #148]	; (5eac <loop+0xc64>)
    5e16:	bl	a228 <usb_mtp_send>
    5e1a:	cmp	r0, #0
    5e1c:	ble.n	5e0e <loop+0xbc6>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    5e1e:	ldr	r3, [pc, #140]	; (5eac <loop+0xc64>)
    5e20:	str	r3, [r5, #0]
    5e22:	b.n	5de4 <loop+0xb9c>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5e24:	ldr	r2, [sp, #24]
    5e26:	add.w	r0, r0, #544	; 0x220
    5e2a:	str	r2, [r5, #0]
    5e2c:	b.n	5dd8 <loop+0xb90>
    5e2e:	ldr	r6, [sp, #32]
          case 0x101B:  // GetPartialObject
//              TRANSMIT1(GetPartialObject(p1,p2,p3));
              break;

          case 0x9801:  // getObjectPropsSupported
              TRANSMIT(getObjectPropsSupported(p1));
    5e30:	ldr	r5, [sp, #92]	; 0x5c
    5e32:	ubfx	r5, r5, #0, #9
    5e36:	cmp	r5, #0
    5e38:	beq.w	54fa <loop+0x2b2>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5e3c:	movs	r2, #60	; 0x3c
    5e3e:	mov	r1, r5
    5e40:	ldr	r0, [pc, #104]	; (5eac <loop+0xc64>)
    5e42:	bl	a228 <usb_mtp_send>
    5e46:	cmp	r0, #0
    5e48:	ble.n	5e3c <loop+0xbf4>
    5e4a:	b.w	54fa <loop+0x2b2>
    5e4e:	ldr	r6, [sp, #40]	; 0x28
          if(len==MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            len=0;
          }
        }
        if(len>0)
    5e50:	cmp.w	r9, #0
    5e54:	beq.w	60f6 <loop+0xeae>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5e58:	ldr	r5, [pc, #84]	; (5eb0 <loop+0xc68>)
    5e5a:	movs	r2, #60	; 0x3c
    5e5c:	mov.w	r1, #512	; 0x200
    5e60:	add.w	r0, r5, #544	; 0x220
    5e64:	bl	a228 <usb_mtp_send>
    5e68:	cmp	r0, #0
    5e6a:	ble.n	5e58 <loop+0xc10>
    5e6c:	ldr	r3, [r5, #4]
          case 0x1008:  // GetObjectInfo
            TRANSMIT(GetObjectInfo(p1));
            break;

          case 0x1009:  // GetObject
            TRANSMIT(GetObject(p1));
    5e6e:	adds	r3, #12
    5e70:	ldr.w	sl, [pc, #64]	; 5eb4 <loop+0xc6c>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5e74:	ldr	r5, [pc, #76]	; (5ec4 <loop+0xc7c>)
          case 0x1008:  // GetObjectInfo
            TRANSMIT(GetObjectInfo(p1));
            break;

          case 0x1009:  // GetObject
            TRANSMIT(GetObject(p1));
    5e76:	mov.w	ip, #2
    5e7a:	mov	r0, r3
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    5e7c:	sub.w	r2, sl, #512	; 0x200
          case 0x1008:  // GetObjectInfo
            TRANSMIT(GetObjectInfo(p1));
            break;

          case 0x1009:  // GetObject
            TRANSMIT(GetObject(p1));
    5e80:	str	r3, [sp, #32]
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    5e82:	add.w	r9, sp, #92	; 0x5c
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5e86:	ldr	r3, [sp, #24]
          case 0x1008:  // GetObjectInfo
            TRANSMIT(GetObjectInfo(p1));
            break;

          case 0x1009:  // GetObject
            TRANSMIT(GetObject(p1));
    5e88:	ldrh.w	lr, [r4, #38]	; 0x26
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    5e8c:	str	r2, [sp, #24]
    5e8e:	movs	r2, #12
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    5e90:	str	r3, [r5, #0]
          case 0x1008:  // GetObjectInfo
            TRANSMIT(GetObjectInfo(p1));
            break;

          case 0x1009:  // GetObject
            TRANSMIT(GetObject(p1));
    5e92:	movs	r3, #0
    5e94:	ldr	r1, [r4, #40]	; 0x28
    5e96:	str	r0, [sp, #92]	; 0x5c
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
    5e98:	mov	r8, r3
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    5e9a:	ldr	r0, [sp, #24]
          case 0x1008:  // GetObjectInfo
            TRANSMIT(GetObjectInfo(p1));
            break;

          case 0x1009:  // GetObject
            TRANSMIT(GetObject(p1));
    5e9c:	strh.w	ip, [sp, #96]	; 0x60
    5ea0:	strh.w	lr, [sp, #98]	; 0x62
    5ea4:	str	r1, [sp, #100]	; 0x64
    5ea6:	strb	r3, [r4, #0]
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    5ea8:	str	r2, [r4, #4]
    5eaa:	b.n	5ed0 <loop+0xc88>
    5eac:	.word	0x20009780
    5eb0:	.word	0x20009560
    5eb4:	.word	0x20009980
    5eb8:	.word	0x200001a8
    5ebc:	.word	0x20000adc
    5ec0:	.word	0x20000018
    5ec4:	.word	0x200014fc
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    5ec8:	cmp.w	r8, #11
    5ecc:	bgt.n	5f0a <loop+0xcc2>
    5ece:	ldr	r0, [r5, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5ed0:	rsb	fp, r0, sl
    5ed4:	rsb	r3, r8, #12
          memcpy(dst,src,to_copy);
    5ed8:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    5eda:	cmp	fp, r3
    5edc:	it	ge
    5ede:	movge	fp, r3
          memcpy(dst,src,to_copy);
    5ee0:	mov	r2, fp
          pos += to_copy;
    5ee2:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    5ee4:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5ee8:	ldr	r3, [r5, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    5eea:	add	r9, fp
          dst += to_copy;
    5eec:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5eee:	cmp	r3, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    5ef0:	str	r3, [r5, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    5ef2:	bne.n	5ec8 <loop+0xc80>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5ef4:	movs	r2, #60	; 0x3c
    5ef6:	mov.w	r1, #512	; 0x200
    5efa:	ldr	r0, [pc, #724]	; (61d0 <loop+0xf88>)
    5efc:	bl	a228 <usb_mtp_send>
    5f00:	cmp	r0, #0
    5f02:	ble.n	5ef4 <loop+0xcac>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    5f04:	ldr	r3, [pc, #712]	; (61d0 <loop+0xf88>)
    5f06:	str	r3, [r5, #0]
    5f08:	b.n	5ec8 <loop+0xc80>
    char * getName(uint32_t store) {return zFs_[store].getName();}

    uint32_t Info(uint32_t handle, char *filename, uint32_t *size, uint32_t *parent)
    { return zFs_[0].Info(handle, filename, size, parent);}

    uint32_t GetSize(uint32_t handle) {return zFs_[0].GetSize(handle);}
    5f0a:	ldr	r3, [sp, #28]
    5f0c:	ldr	r1, [sp, #16]
    5f0e:	ldr	r0, [r3, #80]	; 0x50
    5f10:	bl	7120 <zeroFS_class::GetSize(unsigned long)>

    void GetObject(uint32_t object_id) 
    {
      uint32_t size = mFS.GetSize(object_id);

      if (write_get_length_) {
    5f14:	ldrb	r3, [r4, #0]
    char * getName(uint32_t store) {return zFs_[store].getName();}

    uint32_t Info(uint32_t handle, char *filename, uint32_t *size, uint32_t *parent)
    { return zFs_[0].Info(handle, filename, size, parent);}

    uint32_t GetSize(uint32_t handle) {return zFs_[0].GetSize(handle);}
    5f16:	mov	fp, r0

    void GetObject(uint32_t object_id) 
    {
      uint32_t size = mFS.GetSize(object_id);

      if (write_get_length_) {
    5f18:	ldr	r2, [pc, #696]	; (61d4 <loop+0xf8c>)
    5f1a:	cmp	r3, #0
    5f1c:	bne.n	6016 <loop+0xdce>
        uint32_t pos = 0; // into data
        uint32_t len = sizeof(MTPHeader);
        uint32_t sector = object_id;
        uint32_t count = size / 512;

        disk_pos=DISK_BUFFER_SIZE;
    5f1e:	movw	r0, #9248	; 0x2420
    5f22:	mov.w	r1, #8192	; 0x2000
      } else 
      { 
        uint32_t pos = 0; // into data
        uint32_t len = sizeof(MTPHeader);
        uint32_t sector = object_id;
        uint32_t count = size / 512;
    5f26:	mov.w	r5, fp, lsr #9

        disk_pos=DISK_BUFFER_SIZE;
    5f2a:	str	r1, [r2, r0]
      } else 
      { 
        uint32_t pos = 0; // into data
        uint32_t len = sizeof(MTPHeader);
        uint32_t sector = object_id;
        uint32_t count = size / 512;
    5f2c:	str	r5, [sp, #40]	; 0x28

        disk_pos=DISK_BUFFER_SIZE;
        while(pos<size)
    5f2e:	cmp.w	fp, #0
    5f32:	beq.n	5fa8 <loop+0xd60>
    5f34:	mov	sl, r3
    { if(!usb_mtp_available()) return;
      if(fetch_packet(rx_data_buffer))
      { printContainer(); // to switch on set debug to 1 at beginning of file

        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
    5f36:	ldr	r3, [sp, #16]
    5f38:	str	r6, [sp, #44]	; 0x2c
        uint32_t len = sizeof(MTPHeader);
        uint32_t sector = object_id;
        uint32_t count = size / 512;

        disk_pos=DISK_BUFFER_SIZE;
        while(pos<size)
    5f3a:	mov.w	r9, #12
    { if(!usb_mtp_available()) return;
      if(fetch_packet(rx_data_buffer))
      { printContainer(); // to switch on set debug to 1 at beginning of file

        int op = CONTAINER->op;
        int p1 = CONTAINER->params[0];
    5f3e:	str	r3, [sp, #36]	; 0x24
    5f40:	mov	r6, r1
    5f42:	ldr	r5, [pc, #660]	; (61d8 <loop+0xf90>)
    5f44:	ldr.w	r8, [sp, #24]
    5f48:	b.n	5f50 <loop+0xd08>
        uint32_t len = sizeof(MTPHeader);
        uint32_t sector = object_id;
        uint32_t count = size / 512;

        disk_pos=DISK_BUFFER_SIZE;
        while(pos<size)
    5f4a:	cmp	fp, sl
    5f4c:	bls.n	5fa0 <loop+0xd58>
    5f4e:	ldr	r6, [r5, #0]
        {
          if(disk_pos==DISK_BUFFER_SIZE)
    5f50:	cmp.w	r6, #8192	; 0x2000
    5f54:	beq.n	5fd6 <loop+0xd8e>
    5f56:	rsb	r2, r6, #8192	; 0x2000
    5f5a:	adds	r1, r7, r6
            count-=MCOUNT;

            disk_pos=0;
          }

          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
    5f5c:	rsb	r6, r9, #512	; 0x200
    5f60:	rsb	r3, sl, fp
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);

          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    5f64:	add.w	r0, r8, r9
            count-=MCOUNT;

            disk_pos=0;
          }

          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
    5f68:	cmp	r6, r3
    5f6a:	it	cs
    5f6c:	movcs	r6, r3
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);
    5f6e:	cmp	r6, r2
    5f70:	it	cs
    5f72:	movcs	r6, r2

          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    5f74:	mov	r2, r6
          disk_pos += to_copy;
          pos += to_copy;
          len += to_copy;
    5f76:	add	r9, r6
          }

          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);

          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
    5f78:	bl	8568 <memcpy>
          disk_pos += to_copy;
    5f7c:	ldr	r3, [r5, #0]
          pos += to_copy;
    5f7e:	add	sl, r6
          len += to_copy;

          if(len==MTP_TX_SIZE)
    5f80:	cmp.w	r9, #512	; 0x200

          uint32_t to_copy = min(size-pos,MTP_TX_SIZE-len);
          to_copy = min (to_copy, DISK_BUFFER_SIZE-disk_pos);

          memcpy(tx_data_buffer+len,disk_buffer+disk_pos,to_copy);
          disk_pos += to_copy;
    5f84:	add	r6, r3
    5f86:	str	r6, [r5, #0]
          pos += to_copy;
          len += to_copy;

          if(len==MTP_TX_SIZE)
    5f88:	bne.n	5f4a <loop+0xd02>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5f8a:	movs	r2, #60	; 0x3c
    5f8c:	mov.w	r1, #512	; 0x200
    5f90:	ldr	r0, [pc, #572]	; (61d0 <loop+0xf88>)
    5f92:	bl	a228 <usb_mtp_send>
    5f96:	cmp	r0, #0
    5f98:	ble.n	5f8a <loop+0xd42>
          pos += to_copy;
          len += to_copy;

          if(len==MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            len=0;
    5f9a:	mov.w	r9, #0
    5f9e:	b.n	5f4a <loop+0xd02>
    5fa0:	ldr	r6, [sp, #44]	; 0x2c
          }
        }
        if(len>0)
    5fa2:	cmp.w	r9, #0
    5fa6:	beq.n	5fb8 <loop+0xd70>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5fa8:	movs	r2, #60	; 0x3c
    5faa:	mov.w	r1, #512	; 0x200
    5fae:	ldr	r0, [pc, #544]	; (61d0 <loop+0xf88>)
    5fb0:	bl	a228 <usb_mtp_send>
    5fb4:	cmp	r0, #0
    5fb6:	ble.n	5fa8 <loop+0xd60>
          case 0x1008:  // GetObjectInfo
            TRANSMIT(GetObjectInfo(p1));
            break;

          case 0x1009:  // GetObject
            TRANSMIT(GetObject(p1));
    5fb8:	ldr	r3, [sp, #32]
    5fba:	ubfx	r5, r3, #0, #9
    5fbe:	cmp	r5, #0
    5fc0:	beq.w	54fa <loop+0x2b2>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    5fc4:	movs	r2, #60	; 0x3c
    5fc6:	mov	r1, r5
    5fc8:	ldr	r0, [pc, #516]	; (61d0 <loop+0xf88>)
    5fca:	bl	a228 <usb_mtp_send>
    5fce:	cmp	r0, #0
    5fd0:	ble.n	5fc4 <loop+0xd7c>
    5fd2:	b.w	54fa <loop+0x2b2>
    { return zFs_[0].Info(handle, filename, size, parent);}

    uint32_t GetSize(uint32_t handle) {return zFs_[0].GetSize(handle);}
    
    uint32_t Read(uint32_t handle, char* out, uint32_t count) 
    { return zFs_[0].Read(handle, out, count);}
    5fd6:	ldr	r0, [sp, #40]	; 0x28
    5fd8:	ldr	r1, [sp, #36]	; 0x24
    5fda:	mov	r3, r0
    5fdc:	cmp	r0, #16
          if(disk_pos==DISK_BUFFER_SIZE)
          {
//            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
//            mFS.Read(object_id,size,pos,(char *)disk_buffer,nread);
            sector = mFS.Read(sector, (char *)disk_buffer, min(count,MCOUNT));
            count-=MCOUNT;
    5fde:	sub.w	r0, r0, #16
    { return zFs_[0].Info(handle, filename, size, parent);}

    uint32_t GetSize(uint32_t handle) {return zFs_[0].GetSize(handle);}
    
    uint32_t Read(uint32_t handle, char* out, uint32_t count) 
    { return zFs_[0].Read(handle, out, count);}
    5fe2:	ldr	r2, [pc, #504]	; (61dc <loop+0xf94>)
    5fe4:	it	cs
    5fe6:	movcs	r3, #16
          if(disk_pos==DISK_BUFFER_SIZE)
          {
//            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
//            mFS.Read(object_id,size,pos,(char *)disk_buffer,nread);
            sector = mFS.Read(sector, (char *)disk_buffer, min(count,MCOUNT));
            count-=MCOUNT;
    5fe8:	str	r0, [sp, #40]	; 0x28
    { return zFs_[0].Info(handle, filename, size, parent);}

    uint32_t GetSize(uint32_t handle) {return zFs_[0].GetSize(handle);}
    
    uint32_t Read(uint32_t handle, char* out, uint32_t count) 
    { return zFs_[0].Read(handle, out, count);}
    5fea:	ldr	r0, [sp, #28]
    5fec:	ldr	r0, [r0, #80]	; 0x50
    5fee:	bl	7154 <zeroFS_class::Read(unsigned long, char*, unsigned long)>
//            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
//            mFS.Read(object_id,size,pos,(char *)disk_buffer,nread);
            sector = mFS.Read(sector, (char *)disk_buffer, min(count,MCOUNT));
            count-=MCOUNT;

            disk_pos=0;
    5ff2:	movs	r3, #0
    { return zFs_[0].Info(handle, filename, size, parent);}

    uint32_t GetSize(uint32_t handle) {return zFs_[0].GetSize(handle);}
    
    uint32_t Read(uint32_t handle, char* out, uint32_t count) 
    { return zFs_[0].Read(handle, out, count);}
    5ff4:	str	r0, [sp, #36]	; 0x24
//            uint32_t nread=min(size-pos,(uint32_t)DISK_BUFFER_SIZE);
//            mFS.Read(object_id,size,pos,(char *)disk_buffer,nread);
            sector = mFS.Read(sector, (char *)disk_buffer, min(count,MCOUNT));
            count-=MCOUNT;

            disk_pos=0;
    5ff6:	mov	r2, r6
    5ff8:	ldr	r1, [pc, #480]	; (61dc <loop+0xf94>)
    5ffa:	str	r3, [r5, #0]
    5ffc:	b.n	5f5c <loop+0xd14>
        break;
    }
  }

  void GetDevicePropDesc(uint32_t prop) {
    switch (prop) {
    5ffe:	movs	r2, #12
    6000:	ldr	r0, [sp, #20]
    6002:	str	r2, [sp, #28]
    6004:	b.n	59ec <loop+0x7a4>
    void GetObject(uint32_t object_id) 
    {
      uint32_t size = mFS.GetSize(object_id);

      if (write_get_length_) {
        write_length_ += size;
    6006:	ldr	r3, [r7, #4]
    6008:	add.w	r2, r7, #544	; 0x220
    600c:	add.w	r7, r7, #1056	; 0x420
    6010:	str	r2, [sp, #24]
    6012:	add	r3, r0
    6014:	b.n	5e6e <loop+0xc26>
    6016:	ldr	r3, [r2, #4]
    6018:	add	r3, r0
    601a:	str	r3, [r2, #4]
    601c:	b.n	5fb8 <loop+0xd70>
      }
    }
  }

  void GetDevicePropValue(uint32_t prop) {
    switch (prop) {
    601e:	mov.w	fp, #3
    6022:	movs	r3, #84	; 0x54
    6024:	ldr	r2, [pc, #440]	; (61e0 <loop+0xf98>)
    6026:	b.n	602a <loop+0xde2>
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    6028:	mov	fp, r1
    602a:	uxth	r0, r3
    602c:	ldrb.w	r3, [r2, #1]!
    6030:	add.w	r1, fp, #2
    6034:	cmp	r3, #0
    6036:	bne.n	6028 <loop+0xde0>
    6038:	add.w	r2, fp, #14
    603c:	strh.w	r0, [sp, #62]	; 0x3e
    6040:	strh.w	r3, [sp, #60]	; 0x3c
    6044:	str	r2, [sp, #28]
    6046:	b.w	571a <loop+0x4d2>
{
   char name[80];
   zeroFS_class *zFs_ = &zFS;

public:
    uint32_t Count(uint32_t store,uint32_t parent) {return zFs_[store].Count(parent);}
    604a:	ldr	r3, [sp, #16]
    604c:	movw	r1, #10864	; 0x2a70
          case 0x1007:  // GetObjectHandles
            if (p2) 
            { return_code = 0x2014; // spec by format unsupported
            } else 
            { 
              TRANSMIT(GetObjectHandles(p1, p3));
    6050:	str.w	sl, [r4, #4]
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
    6054:	mov	fp, sl
{
   char name[80];
   zeroFS_class *zFs_ = &zFS;

public:
    uint32_t Count(uint32_t store,uint32_t parent) {return zFs_[store].Count(parent);}
    6056:	subs	r2, r3, #1
    6058:	ldr	r3, [pc, #392]	; (61e4 <loop+0xf9c>)
    605a:	mul.w	r2, r1, r2
    605e:	mov	r0, r3
    6060:	str	r3, [sp, #28]
          case 0x1007:  // GetObjectHandles
            if (p2) 
            { return_code = 0x2014; // spec by format unsupported
            } else 
            { 
              TRANSMIT(GetObjectHandles(p1, p3));
    6062:	movs	r3, #1
{
   char name[80];
   zeroFS_class *zFs_ = &zFS;

public:
    uint32_t Count(uint32_t store,uint32_t parent) {return zFs_[store].Count(parent);}
    6064:	mov	r5, r2
    6066:	ldr	r0, [r0, #80]	; 0x50
    6068:	str	r2, [sp, #32]
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    606a:	add	r2, sp, #92	; 0x5c
{
   char name[80];
   zeroFS_class *zFs_ = &zFS;

public:
    uint32_t Count(uint32_t store,uint32_t parent) {return zFs_[store].Count(parent);}
    606c:	mov	r1, r8
    606e:	add	r0, r5
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
    6070:	str	r2, [sp, #36]	; 0x24
          case 0x1007:  // GetObjectHandles
            if (p2) 
            { return_code = 0x2014; // spec by format unsupported
            } else 
            { 
              TRANSMIT(GetObjectHandles(p1, p3));
    6072:	strb	r3, [r4, #0]
{
   char name[80];
   zeroFS_class *zFs_ = &zFS;

public:
    uint32_t Count(uint32_t store,uint32_t parent) {return zFs_[store].Count(parent);}
    6074:	bl	6fa0 <zeroFS_class::Count(unsigned long)>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    6078:	ldr	r5, [pc, #364]	; (61e8 <loop+0xfa0>)
          case 0x1007:  // GetObjectHandles
            if (p2) 
            { return_code = 0x2014; // spec by format unsupported
            } else 
            { 
              TRANSMIT(GetObjectHandles(p1, p3));
    607a:	lsls	r0, r0, #2
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    607c:	ldr	r3, [pc, #336]	; (61d0 <loop+0xf88>)
          case 0x1007:  // GetObjectHandles
            if (p2) 
            { return_code = 0x2014; // spec by format unsupported
            } else 
            { 
              TRANSMIT(GetObjectHandles(p1, p3));
    607e:	mov.w	lr, #2
    6082:	add.w	r2, r0, #16
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    6086:	movs	r1, #12
    6088:	add.w	r7, r3, #512	; 0x200
    608c:	str	r3, [sp, #24]
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    608e:	str	r3, [r5, #0]
        write_length_ += len;
    6090:	mov	r0, r3
          case 0x1007:  // GetObjectHandles
            if (p2) 
            { return_code = 0x2014; // spec by format unsupported
            } else 
            { 
              TRANSMIT(GetObjectHandles(p1, p3));
    6092:	ldrh	r3, [r4, #38]	; 0x26
    6094:	strb.w	sl, [r4]
    6098:	mov	sl, r7
    609a:	strh.w	r3, [sp, #98]	; 0x62
    609e:	ldr	r3, [r4, #40]	; 0x28
    60a0:	str	r2, [sp, #92]	; 0x5c
    60a2:	strh.w	lr, [sp, #96]	; 0x60
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    60a6:	str	r1, [r4, #4]
          case 0x1007:  // GetObjectHandles
            if (p2) 
            { return_code = 0x2014; // spec by format unsupported
            } else 
            { 
              TRANSMIT(GetObjectHandles(p1, p3));
    60a8:	str	r3, [sp, #100]	; 0x64
    60aa:	str	r6, [sp, #40]	; 0x28
    60ac:	ldr.w	r9, [sp, #36]	; 0x24
    60b0:	b.n	60bc <loop+0xe74>
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    60b2:	cmp.w	fp, #11
    60b6:	bgt.w	648e <loop+0x1246>
    60ba:	ldr	r0, [r5, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    60bc:	rsb	r2, r0, sl
    60c0:	rsb	r3, fp, #12
          memcpy(dst,src,to_copy);
    60c4:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    60c6:	cmp	r2, r3
    60c8:	it	ge
    60ca:	movge	r2, r3
    60cc:	mov	r6, r2
          memcpy(dst,src,to_copy);
          pos += to_copy;
    60ce:	add	fp, r2
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    60d0:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    60d4:	ldr	r2, [r5, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    60d6:	add	r9, r6
          dst += to_copy;
    60d8:	adds	r3, r2, r6
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    60da:	cmp	r3, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    60dc:	str	r3, [r5, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    60de:	bne.n	60b2 <loop+0xe6a>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    60e0:	movs	r2, #60	; 0x3c
    60e2:	mov.w	r1, #512	; 0x200
    60e6:	ldr	r0, [pc, #232]	; (61d0 <loop+0xf88>)
    60e8:	bl	a228 <usb_mtp_send>
    60ec:	cmp	r0, #0
    60ee:	ble.n	60e0 <loop+0xe98>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    60f0:	ldr	r3, [pc, #220]	; (61d0 <loop+0xf88>)
    60f2:	str	r3, [r5, #0]
    60f4:	b.n	60b2 <loop+0xe6a>
    60f6:	ldr	r3, [r4, #4]
    60f8:	b.n	5e6e <loop+0xc26>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    60fa:	ldr	r3, [r2, #4]
    60fc:	cbnz	r3, 6102 <loop+0xeba>
    60fe:	ldr	r2, [sp, #24]
    6100:	str	r2, [r5, #0]
        write_length_ += len;
    6102:	adds	r3, #4
        
        const char * src=data;
    6104:	add.w	r9, sp, #88	; 0x58
        //
        int pos = 0; // into data
    6108:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    610c:	str	r3, [r4, #4]
    610e:	b.n	6116 <loop+0xece>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    6110:	cmp.w	r8, #3
    6114:	bgt.n	6152 <loop+0xf0a>
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    6116:	ldr	r0, [r5, #0]
          int to_copy = min(len - pos, avail);
    6118:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    611c:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    611e:	rsb	fp, r0, sl
    6122:	cmp	fp, r3
    6124:	it	ge
    6126:	movge	fp, r3
          memcpy(dst,src,to_copy);
    6128:	mov	r2, fp
          pos += to_copy;
    612a:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    612c:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    6130:	ldr	r3, [r5, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    6132:	add	r9, fp
          dst += to_copy;
    6134:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    6136:	cmp	r3, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    6138:	str	r3, [r5, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    613a:	bne.n	6110 <loop+0xec8>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    613c:	movs	r2, #60	; 0x3c
    613e:	mov.w	r1, #512	; 0x200
    6142:	ldr	r0, [pc, #140]	; (61d0 <loop+0xf88>)
    6144:	bl	a228 <usb_mtp_send>
    6148:	cmp	r0, #0
    614a:	ble.n	613c <loop+0xef4>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    614c:	ldr	r3, [pc, #128]	; (61d0 <loop+0xf88>)
    614e:	str	r3, [r5, #0]
    6150:	b.n	6110 <loop+0xec8>
    6152:	ldr	r3, [pc, #152]	; (61ec <loop+0xfa4>)
    6154:	ldr	r3, [r3, #0]
    6156:	b.n	5d98 <loop+0xb50>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    6158:	cbnz	r3, 615e <loop+0xf16>
    615a:	ldr	r2, [sp, #24]
    615c:	str	r2, [r5, #0]
        write_length_ += len;
    615e:	adds	r3, #4
        
        const char * src=data;
    6160:	add.w	r9, sp, #72	; 0x48
        //
        int pos = 0; // into data
    6164:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    6168:	str	r3, [r4, #4]
    616a:	b.n	6172 <loop+0xf2a>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    616c:	cmp.w	r8, #3
    6170:	bgt.n	61ae <loop+0xf66>
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    6172:	ldr	r0, [r5, #0]
          int to_copy = min(len - pos, avail);
    6174:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    6178:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    617a:	rsb	fp, r0, sl
    617e:	cmp	fp, r3
    6180:	it	ge
    6182:	movge	fp, r3
          memcpy(dst,src,to_copy);
    6184:	mov	r2, fp
          pos += to_copy;
    6186:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    6188:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    618c:	ldr	r3, [r5, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    618e:	add	r9, fp
          dst += to_copy;
    6190:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    6192:	cmp	r3, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    6194:	str	r3, [r5, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    6196:	bne.n	616c <loop+0xf24>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    6198:	movs	r2, #60	; 0x3c
    619a:	mov.w	r1, #512	; 0x200
    619e:	ldr	r0, [pc, #48]	; (61d0 <loop+0xf88>)
    61a0:	bl	a228 <usb_mtp_send>
    61a4:	cmp	r0, #0
    61a6:	ble.n	6198 <loop+0xf50>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    61a8:	ldr	r3, [pc, #36]	; (61d0 <loop+0xf88>)
    61aa:	str	r3, [r5, #0]
    61ac:	b.n	616c <loop+0xf24>
    61ae:	movs	r1, #1
    61b0:	ldrb	r2, [r4, #0]
    61b2:	ldr	r3, [r4, #4]
    61b4:	str	r1, [sp, #76]	; 0x4c
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    61b6:	cmp	r2, #0
    61b8:	bne.w	5cec <loop+0xaa4>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    61bc:	cmp	r3, #0
    61be:	beq.n	6234 <loop+0xfec>
    61c0:	ldr	r0, [r5, #0]
        write_length_ += len;
    61c2:	adds	r3, #4
        
        const char * src=data;
    61c4:	add.w	r9, sp, #76	; 0x4c
        //
        int pos = 0; // into data
    61c8:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    61cc:	str	r3, [r4, #4]
    61ce:	b.n	61fa <loop+0xfb2>
    61d0:	.word	0x20009780
    61d4:	.word	0x20009560
    61d8:	.word	0x2000b980
    61dc:	.word	0x20009980
    61e0:	.word	0x200001a8
    61e4:	.word	0x20009508
    61e8:	.word	0x200014fc
    61ec:	.word	0x20000adc
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    61f0:	cmp.w	r8, #3
    61f4:	bgt.w	5cf0 <loop+0xaa8>
    61f8:	ldr	r0, [r5, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    61fa:	rsb	fp, r0, sl
    61fe:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    6202:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    6204:	cmp	fp, r3
    6206:	it	ge
    6208:	movge	fp, r3
          memcpy(dst,src,to_copy);
    620a:	mov	r2, fp
          pos += to_copy;
    620c:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    620e:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    6212:	ldr	r3, [r5, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    6214:	add	r9, fp
          dst += to_copy;
    6216:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    6218:	cmp	r3, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    621a:	str	r3, [r5, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    621c:	bne.n	61f0 <loop+0xfa8>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    621e:	movs	r2, #60	; 0x3c
    6220:	mov.w	r1, #512	; 0x200
    6224:	ldr	r0, [pc, #696]	; (64e0 <loop+0x1298>)
    6226:	bl	a228 <usb_mtp_send>
    622a:	cmp	r0, #0
    622c:	ble.n	621e <loop+0xfd6>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    622e:	ldr	r3, [pc, #688]	; (64e0 <loop+0x1298>)
    6230:	str	r3, [r5, #0]
    6232:	b.n	61f0 <loop+0xfa8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    6234:	ldr	r2, [sp, #24]
    6236:	ldr	r0, [pc, #680]	; (64e0 <loop+0x1298>)
    6238:	str	r2, [r5, #0]
    623a:	b.n	61c2 <loop+0xf7a>
    623c:	ldr.w	r3, [r8, #4]
    6240:	cbnz	r3, 6246 <loop+0xffe>
    6242:	ldr	r2, [sp, #24]
    6244:	str	r2, [r5, #0]
        write_length_ += len;
    6246:	adds	r3, #1
        
        const char * src=data;
    6248:	add.w	r9, sp, #54	; 0x36
        //
        int pos = 0; // into data
    624c:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    6250:	str	r3, [r4, #4]
    6252:	b.n	625a <loop+0x1012>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    6254:	cmp.w	r8, #0
    6258:	bgt.n	6296 <loop+0x104e>
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    625a:	ldr	r0, [r5, #0]
          int to_copy = min(len - pos, avail);
    625c:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    6260:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    6262:	rsb	fp, r0, sl
    6266:	cmp	fp, r3
    6268:	it	ge
    626a:	movge	fp, r3
          memcpy(dst,src,to_copy);
    626c:	mov	r2, fp
          pos += to_copy;
    626e:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    6270:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    6274:	ldr	r3, [r5, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    6276:	add	r9, fp
          dst += to_copy;
    6278:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    627a:	cmp	r3, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    627c:	str	r3, [r5, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    627e:	bne.n	6254 <loop+0x100c>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    6280:	movs	r2, #60	; 0x3c
    6282:	mov.w	r1, #512	; 0x200
    6286:	ldr	r0, [pc, #600]	; (64e0 <loop+0x1298>)
    6288:	bl	a228 <usb_mtp_send>
    628c:	cmp	r0, #0
    628e:	ble.n	6280 <loop+0x1038>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    6290:	ldr	r3, [pc, #588]	; (64e0 <loop+0x1298>)
    6292:	str	r3, [r5, #0]
    6294:	b.n	6254 <loop+0x100c>
    6296:	ldr	r3, [sp, #92]	; 0x5c
    6298:	str	r3, [sp, #28]
    629a:	b.n	5cbc <loop+0xa74>
    629c:	mov	r2, r7
    629e:	mov	r0, r5
    62a0:	add	r1, sp, #52	; 0x34
    62a2:	bl	7c <MTPD::write(char const*, int) [clone .part.16]>
    62a6:	ldr	r2, [r5, #4]
    62a8:	ldrh	r3, [r5, #38]	; 0x26
    62aa:	adds	r2, #12
    62ac:	ldr	r0, [r5, #40]	; 0x28
    62ae:	str	r2, [sp, #28]
    62b0:	b.w	59ec <loop+0x7a4>
    62b4:	movs	r1, #7
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    62b6:	ldrb	r2, [r4, #0]
    62b8:	ldr	r3, [pc, #552]	; (64e4 <loop+0x129c>)
    62ba:	strb.w	r1, [sp, #55]	; 0x37
    62be:	cmp	r2, #0
    62c0:	beq.w	65e4 <loop+0x139c>
      {
        write_length_ += len;
    62c4:	ldr	r2, [r3, #4]
    62c6:	adds	r2, #1
    62c8:	str	r2, [r3, #4]
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
        
        const char * src=data;
        //
        int pos = 0; // into data
    62ca:	ldr	r0, [pc, #540]	; (64e8 <loop+0x12a0>)
    62cc:	movs	r2, #84	; 0x54
    62ce:	ldrb	r1, [r4, #0]
    62d0:	ldr	r3, [r4, #4]
    62d2:	mov	fp, r0
    62d4:	str	r6, [sp, #28]
    62d6:	b.n	62e2 <loop+0x109a>
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
      {
        write_length_ += len;
    62d8:	adds	r3, #2
#define Storage2Store(x) (x-1)

  void writestring(const char* str) {
    if (*str) 
    { write8(strlen(str) + 1);
      while (*str) {  write16(*str);  ++str;  } write16(0);
    62da:	ldrb.w	r2, [fp, #1]!
    62de:	cmp	r2, #0
    62e0:	beq.n	6350 <loop+0x1108>
    62e2:	strh.w	r2, [sp, #66]	; 0x42
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    62e6:	cmp	r1, #0
    62e8:	bne.n	62d8 <loop+0x1090>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    62ea:	cbz	r3, 6344 <loop+0x10fc>
    62ec:	ldr	r0, [r5, #0]
        write_length_ += len;
    62ee:	adds	r3, #2
        
        const char * src=data;
    62f0:	add.w	sl, sp, #66	; 0x42
        //
        int pos = 0; // into data
    62f4:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    62f8:	str	r3, [r4, #4]
    62fa:	b.n	6304 <loop+0x10bc>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    62fc:	cmp.w	r8, #1
    6300:	bgt.n	633e <loop+0x10f6>
    6302:	ldr	r0, [r5, #0]
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    6304:	rsb	r2, r0, r9
    6308:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    630c:	mov	r1, sl
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    630e:	cmp	r2, r3
    6310:	it	ge
    6312:	movge	r2, r3
    6314:	mov	r6, r2
          memcpy(dst,src,to_copy);
          pos += to_copy;
    6316:	add	r8, r2
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    6318:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    631c:	ldr	r2, [r5, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    631e:	add	sl, r6
          dst += to_copy;
    6320:	adds	r3, r2, r6
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    6322:	cmp	r3, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    6324:	str	r3, [r5, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    6326:	bne.n	62fc <loop+0x10b4>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    6328:	movs	r2, #60	; 0x3c
    632a:	mov.w	r1, #512	; 0x200
    632e:	ldr	r0, [pc, #432]	; (64e0 <loop+0x1298>)
    6330:	bl	a228 <usb_mtp_send>
    6334:	cmp	r0, #0
    6336:	ble.n	6328 <loop+0x10e0>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    6338:	ldr	r3, [sp, #24]
    633a:	str	r3, [r5, #0]
    633c:	b.n	62fc <loop+0x10b4>
    633e:	ldrb	r1, [r4, #0]
    6340:	ldr	r3, [r4, #4]
    6342:	b.n	62da <loop+0x1092>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    6344:	ldr	r2, [sp, #24]
    6346:	str	r2, [r5, #0]
    6348:	ldr	r2, [pc, #404]	; (64e0 <loop+0x1298>)
    634a:	str	r2, [sp, #24]
    634c:	mov	r0, r2
    634e:	b.n	62ee <loop+0x10a6>
    6350:	ldr	r6, [sp, #28]
    6352:	strh.w	r2, [sp, #64]	; 0x40
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    6356:	cmp	r1, #0
    6358:	beq.w	6586 <loop+0x133e>
      {
        write_length_ += len;
    635c:	adds	r3, #2
    635e:	ldr	r2, [sp, #92]	; 0x5c
    6360:	str	r3, [r4, #4]
    6362:	str	r2, [sp, #28]
    6364:	b.w	57d0 <loop+0x588>
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    6368:	cbnz	r3, 636e <loop+0x1126>
    636a:	ldr	r2, [sp, #24]
    636c:	str	r2, [r5, #0]
        write_length_ += len;
    636e:	adds	r3, #2
        
        const char * src=data;
    6370:	add.w	r9, sp, #56	; 0x38
        //
        int pos = 0; // into data
    6374:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    6378:	str	r3, [r4, #4]
    637a:	b.n	6382 <loop+0x113a>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    637c:	cmp.w	r8, #1
    6380:	bgt.n	63be <loop+0x1176>
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    6382:	ldr	r0, [r5, #0]
          int to_copy = min(len - pos, avail);
    6384:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    6388:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    638a:	rsb	fp, r0, sl
    638e:	cmp	fp, r3
    6390:	it	ge
    6392:	movge	fp, r3
          memcpy(dst,src,to_copy);
    6394:	mov	r2, fp
          pos += to_copy;
    6396:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    6398:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    639c:	ldr	r3, [r5, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    639e:	add	r9, fp
          dst += to_copy;
    63a0:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    63a2:	cmp	r3, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    63a4:	str	r3, [r5, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    63a6:	bne.n	637c <loop+0x1134>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    63a8:	movs	r2, #60	; 0x3c
    63aa:	mov.w	r1, #512	; 0x200
    63ae:	ldr	r0, [pc, #304]	; (64e0 <loop+0x1298>)
    63b0:	bl	a228 <usb_mtp_send>
    63b4:	cmp	r0, #0
    63b6:	ble.n	63a8 <loop+0x1160>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    63b8:	ldr	r3, [pc, #292]	; (64e0 <loop+0x1298>)
    63ba:	str	r3, [r5, #0]
    63bc:	b.n	637c <loop+0x1134>
    63be:	movw	r1, #65535	; 0xffff
    63c2:	ldrb	r2, [r4, #0]
    63c4:	ldr	r3, [r4, #4]
    63c6:	strh.w	r1, [sp, #58]	; 0x3a
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    63ca:	cmp	r2, #0
    63cc:	bne.w	5c80 <loop+0xa38>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    63d0:	cbnz	r3, 63d6 <loop+0x118e>
    63d2:	ldr	r2, [sp, #24]
    63d4:	str	r2, [r5, #0]
        write_length_ += len;
    63d6:	adds	r3, #2
        
        const char * src=data;
    63d8:	add.w	r9, sp, #58	; 0x3a
        //
        int pos = 0; // into data
    63dc:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    63e0:	str	r3, [r4, #4]
    63e2:	b.n	63ea <loop+0x11a2>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    63e4:	cmp.w	r8, #1
    63e8:	bgt.n	6426 <loop+0x11de>
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    63ea:	ldr	r0, [r5, #0]
          int to_copy = min(len - pos, avail);
    63ec:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    63f0:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    63f2:	rsb	fp, r0, sl
    63f6:	cmp	fp, r3
    63f8:	it	ge
    63fa:	movge	fp, r3
          memcpy(dst,src,to_copy);
    63fc:	mov	r2, fp
          pos += to_copy;
    63fe:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    6400:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    6404:	ldr	r3, [r5, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    6406:	add	r9, fp
          dst += to_copy;
    6408:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    640a:	cmp	r3, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    640c:	str	r3, [r5, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    640e:	bne.n	63e4 <loop+0x119c>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    6410:	movs	r2, #60	; 0x3c
    6412:	mov.w	r1, #512	; 0x200
    6416:	ldr	r0, [pc, #200]	; (64e0 <loop+0x1298>)
    6418:	bl	a228 <usb_mtp_send>
    641c:	cmp	r0, #0
    641e:	ble.n	6410 <loop+0x11c8>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    6420:	ldr	r3, [pc, #188]	; (64e0 <loop+0x1298>)
    6422:	str	r3, [r5, #0]
    6424:	b.n	63e4 <loop+0x119c>
    6426:	movs	r1, #0
    6428:	ldrb	r2, [r4, #0]
    642a:	ldr	r3, [r4, #4]
    642c:	strb.w	r1, [sp, #53]	; 0x35
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    6430:	cmp	r2, #0
    6432:	bne.w	5c88 <loop+0xa40>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    6436:	cbnz	r3, 643c <loop+0x11f4>
    6438:	ldr	r2, [sp, #24]
    643a:	str	r2, [r5, #0]
        write_length_ += len;
    643c:	adds	r3, #1
        
        const char * src=data;
    643e:	add.w	r9, sp, #53	; 0x35
        //
        int pos = 0; // into data
    6442:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    6446:	str	r3, [r4, #4]
    6448:	b.n	6452 <loop+0x120a>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    644a:	cmp.w	r8, #0
    644e:	bgt.w	5c8c <loop+0xa44>
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    6452:	ldr	r0, [r5, #0]
          int to_copy = min(len - pos, avail);
    6454:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    6458:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    645a:	rsb	fp, r0, sl
    645e:	cmp	fp, r3
    6460:	it	ge
    6462:	movge	fp, r3
          memcpy(dst,src,to_copy);
    6464:	mov	r2, fp
          pos += to_copy;
    6466:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    6468:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    646c:	ldr	r3, [r5, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    646e:	add	r9, fp
          dst += to_copy;
    6470:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    6472:	cmp	r3, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    6474:	str	r3, [r5, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    6476:	bne.n	644a <loop+0x1202>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    6478:	movs	r2, #60	; 0x3c
    647a:	mov.w	r1, #512	; 0x200
    647e:	ldr	r0, [pc, #96]	; (64e0 <loop+0x1298>)
    6480:	bl	a228 <usb_mtp_send>
    6484:	cmp	r0, #0
    6486:	ble.n	6478 <loop+0x1230>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    6488:	ldr	r3, [pc, #84]	; (64e0 <loop+0x1298>)
    648a:	str	r3, [r5, #0]
    648c:	b.n	644a <loop+0x1202>
  }

  void GetObjectHandles(uint32_t storage, uint32_t parent) 
  { uint32_t store = Storage2Store(storage);

    if (write_get_length_) {
    648e:	ldrb	r3, [r4, #0]
    6490:	ldr	r6, [sp, #40]	; 0x28
    6492:	ldr.w	r9, [pc, #80]	; 64e4 <loop+0x129c>
    6496:	cmp	r3, #0
    6498:	bne.n	6544 <loop+0x12fc>
{
   char name[80];
   zeroFS_class *zFs_ = &zFS;

public:
    uint32_t Count(uint32_t store,uint32_t parent) {return zFs_[store].Count(parent);}
    649a:	ldr	r3, [sp, #28]
    649c:	mov	r1, r8
    649e:	ldr	r0, [r3, #80]	; 0x50
    64a0:	ldr	r3, [sp, #32]
    64a2:	add	r0, r3
    64a4:	bl	6fa0 <zeroFS_class::Count(unsigned long)>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    64a8:	ldrb.w	r3, [r9]
    64ac:	str	r0, [sp, #84]	; 0x54
    64ae:	cmp	r3, #0
    64b0:	beq.w	664a <loop+0x1402>
      {
        write_length_ += len;
    64b4:	ldr.w	r3, [r9, #4]
    64b8:	adds	r3, #4
    64ba:	str.w	r3, [r9, #4]
   char name[80];
   zeroFS_class *zFs_ = &zFS;

public:
    uint32_t Count(uint32_t store,uint32_t parent) {return zFs_[store].Count(parent);}
    uint32_t Next(uint32_t store) {return zFs_[store].Next();}
    64be:	ldr	r3, [sp, #28]
    64c0:	ldr	r0, [r3, #80]	; 0x50
    64c2:	ldr	r3, [sp, #32]
    64c4:	add	r0, r3
    64c6:	bl	7060 <zeroFS_class::Next()>
    {
      uint32_t num=0;
      num=GetNumObjects(storage,parent);
      write32(num);
      uint32_t handle;
      while((handle=mFS.Next(store))) write32(handle);
    64ca:	cmp	r0, #0
    64cc:	beq.n	655a <loop+0x1312>
    {
      return usb_mtp_recv(data_buffer,60);
    }

    void write(const char *data, int len) 
    { if (write_get_length_) 
    64ce:	ldrb	r2, [r4, #0]
    64d0:	str	r0, [sp, #80]	; 0x50
    64d2:	ldr	r3, [pc, #16]	; (64e4 <loop+0x129c>)
    64d4:	cbz	r2, 64ec <loop+0x12a4>
      {
        write_length_ += len;
    64d6:	ldr	r2, [r3, #4]
    64d8:	adds	r2, #4
    64da:	str	r2, [r3, #4]
    64dc:	b.n	64be <loop+0x1276>
    64de:	nop
    64e0:	.word	0x20009780
    64e4:	.word	0x20009560
    64e8:	.word	0x200001a8
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    64ec:	ldr	r3, [r3, #4]
    64ee:	cbnz	r3, 64f4 <loop+0x12ac>
    64f0:	ldr	r2, [sp, #24]
    64f2:	str	r2, [r5, #0]
        write_length_ += len;
    64f4:	adds	r3, #4
        
        const char * src=data;
    64f6:	add.w	r9, sp, #80	; 0x50
        //
        int pos = 0; // into data
    64fa:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    64fe:	str	r3, [r4, #4]
    6500:	b.n	6508 <loop+0x12c0>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    6502:	cmp.w	r8, #3
    6506:	bgt.n	64be <loop+0x1276>
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    6508:	ldr	r0, [r5, #0]
          int to_copy = min(len - pos, avail);
    650a:	rsb	r3, r8, #4
          memcpy(dst,src,to_copy);
    650e:	mov	r1, r9
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    6510:	rsb	fp, r0, sl
    6514:	cmp	fp, r3
    6516:	it	ge
    6518:	movge	fp, r3
          memcpy(dst,src,to_copy);
    651a:	mov	r2, fp
          pos += to_copy;
    651c:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    651e:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    6522:	ldr	r3, [r5, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    6524:	add	r9, fp
          dst += to_copy;
    6526:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    6528:	cmp	r3, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    652a:	str	r3, [r5, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    652c:	bne.n	6502 <loop+0x12ba>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    652e:	movs	r2, #60	; 0x3c
    6530:	mov.w	r1, #512	; 0x200
    6534:	ldr	r0, [pc, #288]	; (6658 <loop+0x1410>)
    6536:	bl	a228 <usb_mtp_send>
    653a:	cmp	r0, #0
    653c:	ble.n	652e <loop+0x12e6>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    653e:	ldr	r3, [pc, #280]	; (6658 <loop+0x1410>)
    6540:	str	r3, [r5, #0]
    6542:	b.n	6502 <loop+0x12ba>
{
   char name[80];
   zeroFS_class *zFs_ = &zFS;

public:
    uint32_t Count(uint32_t store,uint32_t parent) {return zFs_[store].Count(parent);}
    6544:	ldr	r3, [sp, #28]
    6546:	mov	r1, r8
    6548:	ldr	r0, [r3, #80]	; 0x50
    654a:	ldr	r3, [sp, #32]
    654c:	add	r0, r3
    654e:	bl	6fa0 <zeroFS_class::Count(unsigned long)>
  { uint32_t store = Storage2Store(storage);

    if (write_get_length_) {
      write_length_ = GetNumObjects(storage, parent);
      write_length_++;
      write_length_ *= 4;
    6552:	adds	r0, #1
    6554:	lsls	r3, r0, #2
    6556:	str.w	r3, [r9, #4]
          case 0x1007:  // GetObjectHandles
            if (p2) 
            { return_code = 0x2014; // spec by format unsupported
            } else 
            { 
              TRANSMIT(GetObjectHandles(p1, p3));
    655a:	ldr	r5, [sp, #92]	; 0x5c
    655c:	ubfx	r5, r5, #0, #9
    6560:	cmp	r5, #0
    6562:	beq.w	54fa <loop+0x2b2>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    6566:	movs	r2, #60	; 0x3c
    6568:	mov	r1, r5
    656a:	ldr	r0, [pc, #236]	; (6658 <loop+0x1410>)
    656c:	bl	a228 <usb_mtp_send>
    6570:	cmp	r0, #0
    6572:	ble.n	6566 <loop+0x131e>
    6574:	b.w	54fa <loop+0x2b2>
    6578:	sub.w	r2, r7, #512	; 0x200
    657c:	ldr	r5, [pc, #220]	; (665c <loop+0x1414>)
    657e:	mov	sl, r7
    6580:	str	r2, [sp, #24]
    6582:	b.w	5d10 <loop+0xac8>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    6586:	cbnz	r3, 658c <loop+0x1344>
    6588:	ldr	r2, [sp, #24]
    658a:	str	r2, [r5, #0]
        write_length_ += len;
    658c:	adds	r3, #2
        
        const char * src=data;
    658e:	add.w	sl, sp, #64	; 0x40
        //
        int pos = 0; // into data
    6592:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    6596:	str	r3, [r4, #4]
    6598:	b.n	65a0 <loop+0x1358>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    659a:	cmp.w	r8, #1
    659e:	bgt.n	65dc <loop+0x1394>
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    65a0:	ldr	r0, [r5, #0]
          int to_copy = min(len - pos, avail);
    65a2:	rsb	r3, r8, #2
          memcpy(dst,src,to_copy);
    65a6:	mov	r1, sl
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    65a8:	rsb	fp, r0, r9
    65ac:	cmp	fp, r3
    65ae:	it	ge
    65b0:	movge	fp, r3
          memcpy(dst,src,to_copy);
    65b2:	mov	r2, fp
          pos += to_copy;
    65b4:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    65b6:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    65ba:	ldr	r3, [r5, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    65bc:	add	sl, fp
          dst += to_copy;
    65be:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    65c0:	cmp	r3, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    65c2:	str	r3, [r5, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    65c4:	bne.n	659a <loop+0x1352>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    65c6:	movs	r2, #60	; 0x3c
    65c8:	mov.w	r1, #512	; 0x200
    65cc:	ldr	r0, [pc, #136]	; (6658 <loop+0x1410>)
    65ce:	bl	a228 <usb_mtp_send>
    65d2:	cmp	r0, #0
    65d4:	ble.n	65c6 <loop+0x137e>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    65d6:	ldr	r3, [sp, #24]
    65d8:	str	r3, [r5, #0]
    65da:	b.n	659a <loop+0x1352>
    65dc:	ldr	r3, [sp, #92]	; 0x5c
    65de:	str	r3, [sp, #28]
    65e0:	b.w	57d0 <loop+0x588>
        write_length_ += len;
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
    65e4:	ldr	r3, [r3, #4]
    65e6:	cbnz	r3, 65ec <loop+0x13a4>
    65e8:	ldr	r2, [sp, #24]
    65ea:	str	r2, [r5, #0]
        write_length_ += len;
    65ec:	adds	r3, #1
        
        const char * src=data;
    65ee:	add.w	sl, sp, #55	; 0x37
        //
        int pos = 0; // into data
    65f2:	mov.w	r8, #0
      } 
      else 
      { 
        static uint8_t *dst=0;
        if(!write_length_) dst=tx_data_buffer;   
        write_length_ += len;
    65f6:	str	r3, [r4, #4]
    65f8:	b.n	6602 <loop+0x13ba>
        
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
    65fa:	cmp.w	r8, #0
    65fe:	bgt.w	62ca <loop+0x1082>
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
    6602:	ldr	r0, [r5, #0]
          int to_copy = min(len - pos, avail);
    6604:	rsb	r3, r8, #1
          memcpy(dst,src,to_copy);
    6608:	mov	r1, sl
        const char * src=data;
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
    660a:	rsb	fp, r0, r9
    660e:	cmp	fp, r3
    6610:	it	ge
    6612:	movge	fp, r3
          memcpy(dst,src,to_copy);
    6614:	mov	r2, fp
          pos += to_copy;
    6616:	add	r8, fp
        //
        int pos = 0; // into data
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
    6618:	bl	8568 <memcpy>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    661c:	ldr	r3, [r5, #0]
        while(pos<len)
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
    661e:	add	sl, fp
          dst += to_copy;
    6620:	add	r3, fp
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    6622:	cmp	r3, r7
        { int avail = tx_data_buffer+MTP_TX_SIZE - dst;
          int to_copy = min(len - pos, avail);
          memcpy(dst,src,to_copy);
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
    6624:	str	r3, [r5, #0]
          if(dst == tx_data_buffer+MTP_TX_SIZE)
    6626:	bne.n	65fa <loop+0x13b2>

#elif defined(__IMXRT1062__)  

    int push_packet(uint8_t *data_buffer,uint32_t len)
    {
      while(usb_mtp_send(data_buffer,len,60)<=0) ;
    6628:	movs	r2, #60	; 0x3c
    662a:	mov.w	r1, #512	; 0x200
    662e:	ldr	r0, [pc, #40]	; (6658 <loop+0x1410>)
    6630:	bl	a228 <usb_mtp_send>
    6634:	cmp	r0, #0
    6636:	ble.n	6628 <loop+0x13e0>
          pos += to_copy;
          src += to_copy;
          dst += to_copy;
          if(dst == tx_data_buffer+MTP_TX_SIZE)
          { push_packet(tx_data_buffer,MTP_TX_SIZE);
            dst=tx_data_buffer;
    6638:	ldr	r3, [pc, #28]	; (6658 <loop+0x1410>)
    663a:	str	r3, [r5, #0]
    663c:	b.n	65fa <loop+0x13b2>
    663e:	add.w	r3, r7, #544	; 0x220
    6642:	add.w	r7, r7, #1056	; 0x420
    6646:	str	r3, [sp, #24]
    6648:	b.n	5e58 <loop+0xc10>
    664a:	mov	r0, r9
    664c:	movs	r2, #4
    664e:	add	r1, sp, #84	; 0x54
    6650:	bl	7c <MTPD::write(char const*, int) [clone .part.16]>
    6654:	b.n	64be <loop+0x1276>
    6656:	nop
    6658:	.word	0x20009780
    665c:	.word	0x200014fc

00006660 <_GLOBAL__sub_I_zFS>:
    6660:	push	{r4, lr}
  T_FILE,
} HDR_TYPE;

//#include "FS.h"

class zeroFS_class //: public FS
    6662:	movw	r0, #8816	; 0x2270
    6666:	ldr	r4, [pc, #32]	; (6688 <_GLOBAL__sub_I_zFS+0x28>)
    6668:	mov.w	r2, #2048	; 0x800
    666c:	movs	r1, #0
    666e:	add	r0, r4
    6670:	bl	bc2c <memset>
#define MTP_SERNR "1234"
#define MTP_NAME  "Teensy"

#define USE_EVENTS 1

class MTPD {
    6674:	ldr	r3, [pc, #20]	; (668c <_GLOBAL__sub_I_zFS+0x2c>)
    6676:	movs	r2, #0



extern zeroFS_class zFS;

class mtpFS
    6678:	ldr	r0, [pc, #20]	; (6690 <_GLOBAL__sub_I_zFS+0x30>)
#define MTP_SERNR "1234"
#define MTP_NAME  "Teensy"

#define USE_EVENTS 1

class MTPD {
    667a:	movw	r1, #9248	; 0x2420



extern zeroFS_class zFS;

class mtpFS
    667e:	str	r4, [r0, #80]	; 0x50
#define MTP_SERNR "1234"
#define MTP_NAME  "Teensy"

#define USE_EVENTS 1

class MTPD {
    6680:	strb	r2, [r3, #0]
    6682:	str	r2, [r3, #4]
    6684:	str	r2, [r3, r1]
    6686:	pop	{r4, pc}
    6688:	.word	0x2000b9a4
    668c:	.word	0x20009560
    6690:	.word	0x20009508

00006694 <breakTime(long, tmElements_t&)>:
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
    6694:	ldr	r3, [pc, #392]	; (6820 <breakTime(long, tmElements_t&)+0x18c>)
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    6696:	ldr	r2, [pc, #396]	; (6824 <breakTime(long, tmElements_t&)+0x190>)
  time /= 24; // now it is days
    6698:	umull	r3, ip, r3, r0
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    669c:	ldr	r3, [pc, #392]	; (6828 <breakTime(long, tmElements_t&)+0x194>)
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
    669e:	mov.w	ip, ip, lsr #16
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0
 
void breakTime(time_t timeInput, tmElements_t &tm){
    66a2:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    66a6:	umull	r4, r8, r3, r0
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    66aa:	add.w	lr, ip, #4
    66ae:	ldr	r6, [pc, #380]	; (682c <breakTime(long, tmElements_t&)+0x198>)
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    66b0:	umull	r4, r2, r2, r0
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    66b4:	mov.w	r8, r8, lsr #5
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    66b8:	ldr.w	r9, [pc, #380]	; 6838 <breakTime(long, tmElements_t&)+0x1a4>
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    66bc:	umull	r6, r7, lr, r6
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    66c0:	lsrs	r2, r2, #11
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    66c2:	umull	r4, r3, r3, r8
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    66c6:	movs	r5, #0
    66c8:	rsb	r4, r7, lr
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    66cc:	umull	r9, r6, r9, r2
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    66d0:	lsrs	r3, r3, #5
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    66d2:	ldr.w	r9, [pc, #348]	; 6830 <breakTime(long, tmElements_t&)+0x19c>
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    66d6:	add.w	r4, r7, r4, lsr #1
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    66da:	mov.w	fp, #100	; 0x64
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    66de:	lsrs	r6, r6, #4
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    66e0:	mov.w	sl, #400	; 0x190
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    66e4:	lsrs	r4, r4, #2
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    66e6:	rsb	r3, r3, r3, lsl #4
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    66ea:	rsb	r4, r4, r4, lsl #3
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    66ee:	add.w	r6, r6, r6, lsl #1
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    66f2:	rsb	r4, r4, lr
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    66f6:	rsb	r7, r8, r8, lsl #4
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    66fa:	sub.w	r6, r2, r6, lsl #3
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
    66fe:	mov	r2, r5
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    6700:	sub.w	r3, r8, r3, lsl #2
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    6704:	adds	r4, #1
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    6706:	sub.w	r0, r0, r7, lsl #2
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    670a:	strb	r6, [r1, #2]
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    670c:	strb	r3, [r1, #1]
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    670e:	strb	r0, [r1, #0]
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    6710:	strb	r4, [r1, #3]
    6712:	uxtb	r7, r5
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    6714:	movw	r4, #365	; 0x16d
    6718:	addw	r3, r7, #1970	; 0x7b2
    671c:	smull	r0, lr, r9, r3
    6720:	ands.w	r8, r3, #3
    6724:	mov.w	r0, r3, asr #31
    6728:	rsb	r6, r0, lr, asr #5
    672c:	bne.n	674a <breakTime(long, tmElements_t&)+0xb6>
    672e:	rsb	r0, r0, lr, asr #7
    6732:	mls	r6, fp, r6, r3
    6736:	mov.w	r4, #366	; 0x16e
    673a:	mls	r0, sl, r0, r3
    673e:	cbnz	r6, 674a <breakTime(long, tmElements_t&)+0xb6>
    6740:	cmp	r0, #0
    6742:	movw	r0, #365	; 0x16d
    6746:	it	ne
    6748:	movne	r4, r0
    674a:	add	r2, r4
    674c:	adds	r5, #1
    674e:	cmp	ip, r2
    6750:	bcs.n	6712 <breakTime(long, tmElements_t&)+0x7e>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
    6752:	strb	r7, [r1, #6]
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    6754:	cmp.w	r8, #0
    6758:	bne.n	6774 <breakTime(long, tmElements_t&)+0xe0>
    675a:	ldr	r0, [pc, #212]	; (6830 <breakTime(long, tmElements_t&)+0x19c>)
    675c:	asrs	r6, r3, #31
    675e:	movs	r5, #100	; 0x64
    6760:	smull	r4, r0, r0, r3
    6764:	rsb	r4, r6, r0, asr #5
    6768:	mls	r4, r5, r4, r3
    676c:	cbz	r4, 67e0 <breakTime(long, tmElements_t&)+0x14c>
    676e:	mov.w	r4, #366	; 0x16e
    6772:	b.n	677a <breakTime(long, tmElements_t&)+0xe6>
    6774:	movw	r4, #365	; 0x16d
    6778:	asrs	r6, r3, #31
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    677a:	ldr	r0, [pc, #180]	; (6830 <breakTime(long, tmElements_t&)+0x19c>)
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
  time  -= days; // now it is days in this year, starting at 0
    677c:	subs	r2, r2, r4
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    677e:	movs	r5, #100	; 0x64
    6780:	mov.w	r4, #400	; 0x190
    6784:	smull	r7, r0, r0, r3
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
  time  -= days; // now it is days in this year, starting at 0
    6788:	rsb	ip, r2, ip
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    678c:	movs	r2, #0
    678e:	rsb	r7, r6, r0, asr #5
    6792:	rsb	r6, r6, r0, asr #7
    6796:	movs	r0, #1
    6798:	mls	r7, r5, r7, r3
        monthLength=29;
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
    679c:	ldr	r5, [pc, #148]	; (6834 <breakTime(long, tmElements_t&)+0x1a0>)
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    679e:	mls	r6, r4, r6, r3
    67a2:	b.n	67aa <breakTime(long, tmElements_t&)+0x116>
    67a4:	adds	r0, #1
    67a6:	adds	r2, #1
    67a8:	uxtb	r0, r0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
    67aa:	cmp	r2, #1
    67ac:	uxtb	r4, r2
    67ae:	beq.n	67fa <breakTime(long, tmElements_t&)+0x166>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    67b0:	ldrb	r3, [r2, r5]
    67b2:	cmp	r3, ip
    67b4:	bhi.n	67ce <breakTime(long, tmElements_t&)+0x13a>
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    67b6:	cmp	r0, #12
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
      time -= monthLength;
    67b8:	rsb	ip, r3, ip
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    67bc:	bne.n	67a4 <breakTime(long, tmElements_t&)+0x110>
    67be:	movs	r4, #13
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
    67c0:	add.w	ip, ip, #1
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    67c4:	strb	r4, [r1, #5]
  tm.Day = time + 1;     // day of month
    67c6:	strb.w	ip, [r1, #4]
}
    67ca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    67ce:	adds	r4, #1
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
    67d0:	add.w	ip, ip, #1
    67d4:	uxtb	r4, r4
    67d6:	strb.w	ip, [r1, #4]
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    67da:	strb	r4, [r1, #5]
  tm.Day = time + 1;     // day of month
}
    67dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    67e0:	rsb	r0, r6, r0, asr #7
    67e4:	mov.w	r5, #400	; 0x190
    67e8:	movw	r4, #365	; 0x16d
    67ec:	mls	r0, r5, r0, r3
    67f0:	cmp	r0, #0
    67f2:	it	eq
    67f4:	moveq.w	r4, #366	; 0x16e
    67f8:	b.n	677a <breakTime(long, tmElements_t&)+0xe6>
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    67fa:	cmp.w	r8, #0
    67fe:	bne.n	6814 <breakTime(long, tmElements_t&)+0x180>
    6800:	cbnz	r7, 681c <breakTime(long, tmElements_t&)+0x188>
    6802:	cmp	r6, #0
    6804:	ite	ne
    6806:	movne	r3, #28
    6808:	moveq	r3, #29
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    680a:	cmp	ip, r3
    680c:	bcc.n	6818 <breakTime(long, tmElements_t&)+0x184>
      time -= monthLength;
    680e:	rsb	ip, r3, ip
    6812:	b.n	67a4 <breakTime(long, tmElements_t&)+0x110>
    6814:	movs	r3, #28
    6816:	b.n	680a <breakTime(long, tmElements_t&)+0x176>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    6818:	movs	r4, #2
    681a:	b.n	67c0 <breakTime(long, tmElements_t&)+0x12c>
    681c:	movs	r3, #29
    681e:	b.n	680a <breakTime(long, tmElements_t&)+0x176>
    6820:	.word	0xc22e4507
    6824:	.word	0x91a2b3c5
    6828:	.word	0x88888889
    682c:	.word	0x24924925
    6830:	.word	0x51eb851f
    6834:	.word	0x200001d4
    6838:	.word	0xaaaaaaab

0000683c <refreshCache(long) [clone .part.0]>:

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
    683c:	push	{r4, lr}
  if (t != cacheTime) {
    breakTime(t, tm); 
    683e:	ldr	r1, [pc, #12]	; (684c <refreshCache(long) [clone .part.0]+0x10>)

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
    6840:	mov	r4, r0
  if (t != cacheTime) {
    breakTime(t, tm); 
    6842:	bl	6694 <breakTime(long, tmElements_t&)>
    cacheTime = t; 
    6846:	ldr	r3, [pc, #8]	; (6850 <refreshCache(long) [clone .part.0]+0x14>)
    6848:	str	r4, [r3, #0]
    684a:	pop	{r4, pc}
    684c:	.word	0x2000e418
    6850:	.word	0x2000e414

00006854 <now()>:
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
    6854:	push	{r3, r4, r5, r6, r7, lr}
    6856:	ldr	r4, [pc, #108]	; (68c4 <now()+0x70>)
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    6858:	ldr	r5, [pc, #108]	; (68c8 <now()+0x74>)
    685a:	ldr	r3, [r4, #0]
    685c:	ldr	r2, [r5, #0]
    685e:	ldr	r7, [pc, #108]	; (68cc <now()+0x78>)
    6860:	subs	r3, r3, r2
    6862:	ldr	r0, [r7, #0]
    6864:	cmp.w	r3, #1000	; 0x3e8
    6868:	bcc.n	6884 <now()+0x30>
    686a:	adds	r0, #1
    686c:	b.n	6870 <now()+0x1c>
    686e:	mov	r0, r1
		// millis() and prevMillis are both unsigned ints thus the subtraction will always be the absolute value of the difference
    sysTime++;
    prevMillis += 1000;	
    6870:	add.w	r2, r2, #1000	; 0x3e8
    6874:	ldr	r3, [r4, #0]
    6876:	adds	r1, r0, #1
#endif


time_t now() {
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    6878:	subs	r3, r3, r2
    687a:	cmp.w	r3, #1000	; 0x3e8
    687e:	bcs.n	686e <now()+0x1a>
    6880:	str	r0, [r7, #0]
    6882:	str	r2, [r5, #0]
    prevMillis += 1000;	
#ifdef TIME_DRIFT_INFO
    sysUnsyncedTime++; // this can be compared to the synced time to measure long term drift     
#endif
  }
  if (nextSyncTime <= sysTime) {
    6884:	ldr	r6, [pc, #72]	; (68d0 <now()+0x7c>)
    6886:	ldr	r3, [r6, #0]
    6888:	cmp	r0, r3
    688a:	bcc.n	68ac <now()+0x58>
    if (getTimePtr != 0) {
    688c:	ldr	r3, [pc, #68]	; (68d4 <now()+0x80>)
    688e:	ldr	r3, [r3, #0]
    6890:	cbz	r3, 68ac <now()+0x58>
      time_t t = getTimePtr();
    6892:	blx	r3
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    6894:	ldr	r3, [pc, #64]	; (68d8 <now()+0x84>)
#endif
  }
  if (nextSyncTime <= sysTime) {
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
    6896:	cbnz	r0, 68ae <now()+0x5a>
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    6898:	ldr	r1, [pc, #64]	; (68dc <now()+0x88>)
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    689a:	ldr	r2, [r3, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    689c:	ldrb	r3, [r1, #0]
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    689e:	ldr	r0, [r7, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    68a0:	adds	r3, #0
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    68a2:	add	r2, r0
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    68a4:	it	ne
    68a6:	movne	r3, #1
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    68a8:	str	r2, [r6, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    68aa:	strb	r3, [r1, #0]
      }
    }
  }  
  return (time_t)sysTime;
}
    68ac:	pop	{r3, r4, r5, r6, r7, pc}
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    68ae:	ldr	r3, [r3, #0]
  Status = timeSet;
    68b0:	movs	r1, #2
    68b2:	ldr	r4, [r4, #0]
    68b4:	ldr	r2, [pc, #36]	; (68dc <now()+0x88>)
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    68b6:	add	r3, r0
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
    68b8:	str	r0, [r7, #0]
  nextSyncTime = (uint32_t)t + syncInterval;
  Status = timeSet;
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
    68ba:	str	r4, [r5, #0]
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    68bc:	str	r3, [r6, #0]
  Status = timeSet;
    68be:	strb	r1, [r2, #0]
    68c0:	pop	{r3, r4, r5, r6, r7, pc}
    68c2:	nop
    68c4:	.word	0x2000e684
    68c8:	.word	0x2000e42c
    68cc:	.word	0x2000e420
    68d0:	.word	0x2000e430
    68d4:	.word	0x2000e428
    68d8:	.word	0x20000ae8
    68dc:	.word	0x2000e424

000068e0 <hour()>:
    breakTime(t, tm); 
    cacheTime = t; 
  }
}

int hour() { // the hour now 
    68e0:	push	{r3, lr}
  return hour(now()); 
    68e2:	bl	6854 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    68e6:	ldr	r3, [pc, #16]	; (68f8 <hour()+0x18>)
    68e8:	ldr	r3, [r3, #0]
    68ea:	cmp	r0, r3
    68ec:	beq.n	68f2 <hour()+0x12>
    68ee:	bl	683c <refreshCache(long) [clone .part.0]>
  return hour(now()); 
}

int hour(time_t t) { // the hour for the given time
  refreshCache(t);
  return tm.Hour;  
    68f2:	ldr	r3, [pc, #8]	; (68fc <hour()+0x1c>)
  }
}

int hour() { // the hour now 
  return hour(now()); 
}
    68f4:	ldrb	r0, [r3, #2]
    68f6:	pop	{r3, pc}
    68f8:	.word	0x2000e414
    68fc:	.word	0x2000e418

00006900 <minute()>:

uint8_t isPM(time_t t) { // returns true if PM
  return (hour(t) >= 12); 
}

int minute() {
    6900:	push	{r3, lr}
  return minute(now()); 
    6902:	bl	6854 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    6906:	ldr	r3, [pc, #16]	; (6918 <minute()+0x18>)
    6908:	ldr	r3, [r3, #0]
    690a:	cmp	r0, r3
    690c:	beq.n	6912 <minute()+0x12>
    690e:	bl	683c <refreshCache(long) [clone .part.0]>
  return minute(now()); 
}

int minute(time_t t) { // the minute for the given time
  refreshCache(t);
  return tm.Minute;  
    6912:	ldr	r3, [pc, #8]	; (691c <minute()+0x1c>)
  return (hour(t) >= 12); 
}

int minute() {
  return minute(now()); 
}
    6914:	ldrb	r0, [r3, #1]
    6916:	pop	{r3, pc}
    6918:	.word	0x2000e414
    691c:	.word	0x2000e418

00006920 <second()>:
int minute(time_t t) { // the minute for the given time
  refreshCache(t);
  return tm.Minute;  
}

int second() {
    6920:	push	{r3, lr}
  return second(now()); 
    6922:	bl	6854 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    6926:	ldr	r3, [pc, #16]	; (6938 <second()+0x18>)
    6928:	ldr	r3, [r3, #0]
    692a:	cmp	r0, r3
    692c:	beq.n	6932 <second()+0x12>
    692e:	bl	683c <refreshCache(long) [clone .part.0]>
  return second(now()); 
}

int second(time_t t) {  // the second for the given time
  refreshCache(t);
  return tm.Second;
    6932:	ldr	r3, [pc, #8]	; (693c <second()+0x1c>)
  return tm.Minute;  
}

int second() {
  return second(now()); 
}
    6934:	ldrb	r0, [r3, #0]
    6936:	pop	{r3, pc}
    6938:	.word	0x2000e414
    693c:	.word	0x2000e418

00006940 <day()>:
int second(time_t t) {  // the second for the given time
  refreshCache(t);
  return tm.Second;
}

int day(){
    6940:	push	{r3, lr}
  return(day(now())); 
    6942:	bl	6854 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    6946:	ldr	r3, [pc, #16]	; (6958 <day()+0x18>)
    6948:	ldr	r3, [r3, #0]
    694a:	cmp	r0, r3
    694c:	beq.n	6952 <day()+0x12>
    694e:	bl	683c <refreshCache(long) [clone .part.0]>
  return(day(now())); 
}

int day(time_t t) { // the day for the given time (0-6)
  refreshCache(t);
  return tm.Day;
    6952:	ldr	r3, [pc, #8]	; (695c <day()+0x1c>)
  return tm.Second;
}

int day(){
  return(day(now())); 
}
    6954:	ldrb	r0, [r3, #4]
    6956:	pop	{r3, pc}
    6958:	.word	0x2000e414
    695c:	.word	0x2000e418

00006960 <month()>:
int weekday(time_t t) {
  refreshCache(t);
  return tm.Wday;
}
   
int month(){
    6960:	push	{r3, lr}
  return month(now()); 
    6962:	bl	6854 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    6966:	ldr	r3, [pc, #16]	; (6978 <month()+0x18>)
    6968:	ldr	r3, [r3, #0]
    696a:	cmp	r0, r3
    696c:	beq.n	6972 <month()+0x12>
    696e:	bl	683c <refreshCache(long) [clone .part.0]>
  return month(now()); 
}

int month(time_t t) {  // the month for the given time
  refreshCache(t);
  return tm.Month;
    6972:	ldr	r3, [pc, #8]	; (697c <month()+0x1c>)
  return tm.Wday;
}
   
int month(){
  return month(now()); 
}
    6974:	ldrb	r0, [r3, #5]
    6976:	pop	{r3, pc}
    6978:	.word	0x2000e414
    697c:	.word	0x2000e418

00006980 <year()>:
int month(time_t t) {  // the month for the given time
  refreshCache(t);
  return tm.Month;
}

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
    6980:	push	{r3, lr}
  return year(now()); 
    6982:	bl	6854 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    6986:	ldr	r3, [pc, #20]	; (699c <year()+0x1c>)
    6988:	ldr	r3, [r3, #0]
    698a:	cmp	r0, r3
    698c:	beq.n	6992 <year()+0x12>
    698e:	bl	683c <refreshCache(long) [clone .part.0]>
  return year(now()); 
}

int year(time_t t) { // the year for the given time
  refreshCache(t);
  return tmYearToCalendar(tm.Year);
    6992:	ldr	r3, [pc, #12]	; (69a0 <year()+0x20>)
  refreshCache(t);
  return tm.Month;
}

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
  return year(now()); 
    6994:	ldrb	r0, [r3, #6]
}
    6996:	addw	r0, r0, #1970	; 0x7b2
    699a:	pop	{r3, pc}
    699c:	.word	0x2000e414
    69a0:	.word	0x2000e418

000069a4 <setSyncProvider(long (*)())>:
  return Status;
}

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
  nextSyncTime = sysTime;
    69a4:	ldr	r3, [pc, #12]	; (69b4 <setSyncProvider(long (*)())+0x10>)
    69a6:	ldr	r2, [pc, #16]	; (69b8 <setSyncProvider(long (*)())+0x14>)
    69a8:	ldr	r1, [r3, #0]
  now(); // required to actually update the status
  return Status;
}

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
    69aa:	ldr	r3, [pc, #16]	; (69bc <setSyncProvider(long (*)())+0x18>)
  nextSyncTime = sysTime;
    69ac:	str	r1, [r2, #0]
  now(); // required to actually update the status
  return Status;
}

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
    69ae:	str	r0, [r3, #0]
  nextSyncTime = sysTime;
  now(); // this will sync the clock
    69b0:	b.w	6854 <now()>
    69b4:	.word	0x2000e420
    69b8:	.word	0x2000e430
    69bc:	.word	0x2000e428

000069c0 <Print::write(char const*)>:
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    69c0:	push	{r4, r5, r6, lr}
    69c2:	mov	r4, r0
    69c4:	mov	r0, r1
    69c6:	mov	r5, r1
    69c8:	bl	c280 <strlen>
    69cc:	ldr	r3, [r4, #0]
    69ce:	mov	r2, r0
    69d0:	mov	r1, r5
    69d2:	mov	r0, r4
    69d4:	ldr	r3, [r3, #4]
    69d6:	ldmia.w	sp!, {r4, r5, r6, lr}
    69da:	bx	r3

000069dc <die(char const*, DRESULT)>:
  for(int ii=0;ii<512; ii++)
  if((ii+1)%16) Serial.printf("%02x ",buff[ii]); else Serial.printf("%02x\n",buff[ii]);
}

void die(const char * txt, DRESULT res)
{
    69dc:	push	{r3, lr}
    69de:	mov	r4, r1
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
    69e0:	mov	r1, r0
    69e2:	ldr	r0, [pc, #28]	; (6a00 <die(char const*, DRESULT)+0x24>)
    69e4:	bl	69c0 <Print::write(char const*)>
    69e8:	ldr	r1, [pc, #24]	; (6a04 <die(char const*, DRESULT)+0x28>)
    69ea:	ldr	r0, [pc, #20]	; (6a00 <die(char const*, DRESULT)+0x24>)
    69ec:	bl	69c0 <Print::write(char const*)>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
	size_t print(int64_t n);
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
    69f0:	mov	r1, r4
    69f2:	movs	r3, #0
    69f4:	movs	r2, #16
    69f6:	ldr	r0, [pc, #8]	; (6a00 <die(char const*, DRESULT)+0x24>)
    69f8:	bl	a54c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    69fc:	b.n	69fc <die(char const*, DRESULT)+0x20>
    69fe:	nop
    6a00:	.word	0x20000b20
    6a04:	.word	0x200001c8

00006a08 <zeroFS_class::Init(unsigned char, unsigned char, char const*)>:
  Serial.print(txt); Serial.print(" "); Serial.print(res,HEX); while(1);
}
bool zeroFS_class::Init(BYTE device, BYTE cs, const char *str)
{
    6a08:	push	{r4, r5, lr}
    6a0a:	mov	r4, r0
// DEV_SPI
// DEV_SDHC
// DEV_MSC
// DEV_USB

  pdrv = device;
    6a0c:	strb	r1, [r0, #28]
void die(const char * txt, DRESULT res)
{
  Serial.print(txt); Serial.print(" "); Serial.print(res,HEX); while(1);
}
bool zeroFS_class::Init(BYTE device, BYTE cs, const char *str)
{
    6a0e:	mov	r5, r2
    6a10:	sub.w	sp, sp, #516	; 0x204
// DEV_SDHC
// DEV_MSC
// DEV_USB

  pdrv = device;
  strlcpy(name,str,80);
    6a14:	movs	r2, #80	; 0x50
    6a16:	adds	r0, #32
    6a18:	mov	r1, r3
    6a1a:	bl	c230 <strlcpy>
  csel=cs;

  if(pdrv==DEV_SPI) disk_ioctl(pdrv,1,(void *)&csel); // set cs for spi mode
    6a1e:	ldrb	r0, [r4, #28]
// DEV_MSC
// DEV_USB

  pdrv = device;
  strlcpy(name,str,80);
  csel=cs;
    6a20:	strh	r5, [r4, #30]

  if(pdrv==DEV_SPI) disk_ioctl(pdrv,1,(void *)&csel); // set cs for spi mode
    6a22:	cbnz	r0, 6a30 <zeroFS_class::Init(unsigned char, unsigned char, char const*)+0x28>
    6a24:	add.w	r2, r4, #30
    6a28:	movs	r1, #1
    6a2a:	bl	7234 <disk_ioctl>
    6a2e:	ldrb	r0, [r4, #28]
  
  MBR_t mbr;
  if(DSTATUS stat = disk_initialize(pdrv))
    6a30:	bl	7178 <disk_initialize>
    6a34:	mov	r5, r0
    6a36:	cbz	r0, 6a54 <zeroFS_class::Init(unsigned char, unsigned char, char const*)+0x4c>
    6a38:	movs	r1, #24
    6a3a:	ldr	r0, [pc, #68]	; (6a80 <zeroFS_class::Init(unsigned char, unsigned char, char const*)+0x78>)
    6a3c:	bl	8cd8 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    6a40:	mov	r1, r5
    6a42:	movs	r3, #0
    6a44:	movs	r2, #10
    6a46:	ldr	r0, [pc, #60]	; (6a84 <zeroFS_class::Init(unsigned char, unsigned char, char const*)+0x7c>)
    6a48:	bl	a54c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
    6a4c:	ldr	r0, [pc, #52]	; (6a84 <zeroFS_class::Init(unsigned char, unsigned char, char const*)+0x7c>)
    6a4e:	bl	a4fc <Print::println()>
    6a52:	b.n	6a52 <zeroFS_class::Init(unsigned char, unsigned char, char const*)+0x4a>

  BYTE* buff = (BYTE *) &mbr;
  DWORD sector = 0;
  UINT count = 1;
  
  if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("init",res);
    6a54:	mov	r2, r0
    6a56:	mov	r1, sp
    6a58:	movs	r3, #1
    6a5a:	ldrb	r0, [r4, #28]
    6a5c:	bl	71ac <disk_read>
    6a60:	mov	r1, r0
    6a62:	cbnz	r0, 6a78 <zeroFS_class::Init(unsigned char, unsigned char, char const*)+0x70>
  Serial.println(mbr.mbrSig0,HEX); //0x55
  Serial.println(mbr.mbrSig1,HEX); //0xAA
  }  
  #endif

  root_sector=mbr.part[0].firstSector;
    6a64:	ldr.w	r2, [sp, #454]	; 0x1c6

  // clean up earlier disk usage
//  findEOF();
//  fixEOF();
  return true;
}
    6a68:	movs	r0, #1
  Serial.println(mbr.mbrSig1,HEX); //0xAA
  }  
  #endif

  root_sector=mbr.part[0].firstSector;
  total_sectors=mbr.part[0].totalSectors;
    6a6a:	ldr.w	r3, [sp, #458]	; 0x1ca
  Serial.println(mbr.mbrSig0,HEX); //0x55
  Serial.println(mbr.mbrSig1,HEX); //0xAA
  }  
  #endif

  root_sector=mbr.part[0].firstSector;
    6a6e:	str	r2, [r4, #0]
  total_sectors=mbr.part[0].totalSectors;
    6a70:	str	r3, [r4, #24]

  // clean up earlier disk usage
//  findEOF();
//  fixEOF();
  return true;
}
    6a72:	add.w	sp, sp, #516	; 0x204
    6a76:	pop	{r4, r5, pc}

  BYTE* buff = (BYTE *) &mbr;
  DWORD sector = 0;
  UINT count = 1;
  
  if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("init",res);
    6a78:	ldr	r0, [pc, #12]	; (6a88 <zeroFS_class::Init(unsigned char, unsigned char, char const*)+0x80>)
    6a7a:	bl	69dc <die(char const*, DRESULT)>
    6a7e:	nop
    6a80:	.word	0x200001f0
    6a84:	.word	0x20000b20
    6a88:	.word	0x2000020c

00006a8c <zeroFS_class::Create(HDR_TYPE, char const*)>:
    Create(type, name);
  }
  Serial.println(write_sector,HEX);
}
void zeroFS_class::Create(HDR_TYPE type, const char *name)
{
    6a8c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  //
  memset(&hdr,0,sizeof(hdr));
    6a90:	movw	r6, #8304	; 0x2070
    Create(type, name);
  }
  Serial.println(write_sector,HEX);
}
void zeroFS_class::Create(HDR_TYPE type, const char *name)
{
    6a94:	mov	r4, r0
    6a96:	mov	r5, r1
    6a98:	mov	sl, r2
  //
  memset(&hdr,0,sizeof(hdr));
    6a9a:	add	r6, r0
    6a9c:	mov.w	r2, #512	; 0x200
    6aa0:	movs	r1, #0
    6aa2:	movw	r8, #8304	; 0x2070
    6aa6:	mov	r0, r6
  hdr.magic=MAGIC;
    6aa8:	ldr	r7, [pc, #196]	; (6b70 <zeroFS_class::Create(HDR_TYPE, char const*)+0xe4>)
  Serial.println(write_sector,HEX);
}
void zeroFS_class::Create(HDR_TYPE type, const char *name)
{
  //
  memset(&hdr,0,sizeof(hdr));
    6aaa:	bl	bc2c <memset>
  hdr.magic=MAGIC;
  hdr.type=type;
  hdr.prev=write_sector;
    6aae:	ldr	r3, [r4, #4]
void zeroFS_class::Create(HDR_TYPE type, const char *name)
{
  //
  memset(&hdr,0,sizeof(hdr));
  hdr.magic=MAGIC;
  hdr.type=type;
    6ab0:	movw	r2, #8308	; 0x2074
  hdr.prev=write_sector;
  hdr.sect=write_sector;
    6ab4:	movw	r1, #8312	; 0x2078
}
void zeroFS_class::Create(HDR_TYPE type, const char *name)
{
  //
  memset(&hdr,0,sizeof(hdr));
  hdr.magic=MAGIC;
    6ab8:	str.w	r7, [r4, r8]
  hdr.type=type;
  hdr.prev=write_sector;
    6abc:	movw	r9, #8316	; 0x207c
void zeroFS_class::Create(HDR_TYPE type, const char *name)
{
  //
  memset(&hdr,0,sizeof(hdr));
  hdr.magic=MAGIC;
  hdr.type=type;
    6ac0:	str	r5, [r4, r2]
  hdr.prev=write_sector;
  hdr.sect=write_sector;
  hdr.next=0xFFFFFFFF;
    6ac2:	add.w	r2, r4, #8320	; 0x2080
  //
  memset(&hdr,0,sizeof(hdr));
  hdr.magic=MAGIC;
  hdr.type=type;
  hdr.prev=write_sector;
  hdr.sect=write_sector;
    6ac6:	str	r3, [r4, r1]
  hdr.next=0xFFFFFFFF;
    6ac8:	mov.w	r1, #4294967295
{
  //
  memset(&hdr,0,sizeof(hdr));
  hdr.magic=MAGIC;
  hdr.type=type;
  hdr.prev=write_sector;
    6acc:	str.w	r3, [r4, r9]
  hdr.millis=millis();
  hdr.micros=micros();
  strcpy(hdr.name,name);
  
  {    
    if(hdr_list[type].magic==MAGIC)
    6ad0:	mov.w	r8, r5, lsl #9
  memset(&hdr,0,sizeof(hdr));
  hdr.magic=MAGIC;
  hdr.type=type;
  hdr.prev=write_sector;
  hdr.sect=write_sector;
  hdr.next=0xFFFFFFFF;
    6ad4:	str	r1, [r2, #0]
  hdr.ctime=rtc_get();
    6ad6:	bl	9910 <rtc_get>
    6ada:	movw	r3, #8332	; 0x208c
    6ade:	ldr	r2, [pc, #148]	; (6b74 <zeroFS_class::Create(HDR_TYPE, char const*)+0xe8>)
    6ae0:	str	r0, [r4, r3]
  hdr.millis=millis();
    6ae2:	movw	r3, #8336	; 0x2090
    6ae6:	ldr	r2, [r2, #0]
    6ae8:	str	r2, [r4, r3]
  hdr.micros=micros();
    6aea:	bl	97d0 <micros>
    6aee:	movw	r3, #8340	; 0x2094
  strcpy(hdr.name,name);
    6af2:	mov	r1, sl
  hdr.prev=write_sector;
  hdr.sect=write_sector;
  hdr.next=0xFFFFFFFF;
  hdr.ctime=rtc_get();
  hdr.millis=millis();
  hdr.micros=micros();
    6af4:	str	r0, [r4, r3]
  strcpy(hdr.name,name);
    6af6:	movw	r0, #8344	; 0x2098
    6afa:	add	r0, r4
    6afc:	bl	c120 <strcpy>
  
  {    
    if(hdr_list[type].magic==MAGIC)
    6b00:	add.w	r3, r4, r8
    6b04:	movw	r2, #8816	; 0x2270
    6b08:	ldr	r2, [r3, r2]
    6b0a:	cmp	r2, r7
    6b0c:	beq.n	6b5c <zeroFS_class::Create(HDR_TYPE, char const*)+0xd0>
    {  hdr.prev = hdr_list[type].sect;
    }
    
    if(type==T_ROOT)
    6b0e:	cbnz	r5, 6b48 <zeroFS_class::Create(HDR_TYPE, char const*)+0xbc>
    {
      hdr.parent = 0xfffffffful;
    6b10:	movw	r3, #8324	; 0x2084
    6b14:	mov.w	r2, #4294967295
    6b18:	str	r2, [r4, r3]
      hdr.parent = hdr_list[type-1].sect;
    }

    // write hdr to disk
    BYTE* buff = (BYTE *) &hdr;
    DWORD sector = hdr.sect;
    6b1a:	movw	r2, #8312	; 0x2078
    UINT count = 1;
    
    if(DRESULT res = disk_write (pdrv, buff, sector, count)) die("write1",res);
    6b1e:	movs	r3, #1
    6b20:	mov	r1, r6
    6b22:	ldrb	r0, [r4, #28]
    6b24:	ldr	r2, [r4, r2]
    6b26:	bl	71f0 <disk_write>
    6b2a:	cbnz	r0, 6b68 <zeroFS_class::Create(HDR_TYPE, char const*)+0xdc>

    memcpy(&hdr_list[type],&hdr, sizeof(hdr));
    6b2c:	movw	r0, #8816	; 0x2270
    6b30:	mov	r1, r6
    6b32:	mov.w	r2, #512	; 0x200
    6b36:	add	r0, r8
    6b38:	add	r0, r4
    6b3a:	bl	8568 <memcpy>
    write_sector=write_sector+1;
    6b3e:	ldr	r3, [r4, #4]
    6b40:	adds	r3, #1
    6b42:	str	r3, [r4, #4]
    6b44:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    {
      hdr.parent = 0xfffffffful;
    }
    else
    {
      hdr.parent = hdr_list[type-1].sect;
    6b48:	subs	r5, #1
    6b4a:	movw	r2, #8824	; 0x2278
    6b4e:	movw	r3, #8324	; 0x2084
    6b52:	add.w	r5, r4, r5, lsl #9
    6b56:	ldr	r2, [r5, r2]
    6b58:	str	r2, [r4, r3]
    6b5a:	b.n	6b1a <zeroFS_class::Create(HDR_TYPE, char const*)+0x8e>
  hdr.micros=micros();
  strcpy(hdr.name,name);
  
  {    
    if(hdr_list[type].magic==MAGIC)
    {  hdr.prev = hdr_list[type].sect;
    6b5c:	movw	r2, #8824	; 0x2278
    6b60:	ldr	r3, [r3, r2]
    6b62:	str.w	r3, [r4, r9]
    6b66:	b.n	6b0e <zeroFS_class::Create(HDR_TYPE, char const*)+0x82>
    // write hdr to disk
    BYTE* buff = (BYTE *) &hdr;
    DWORD sector = hdr.sect;
    UINT count = 1;
    
    if(DRESULT res = disk_write (pdrv, buff, sector, count)) die("write1",res);
    6b68:	mov	r1, r0
    6b6a:	ldr	r0, [pc, #12]	; (6b78 <zeroFS_class::Create(HDR_TYPE, char const*)+0xec>)
    6b6c:	bl	69dc <die(char const*, DRESULT)>
    6b70:	.word	0x6f72657a
    6b74:	.word	0x2000e684
    6b78:	.word	0x20000214

00006b7c <zeroFS_class::Create(HDR_TYPE, int)>:
//  fixEOF();
  return true;
}

void zeroFS_class::Create(HDR_TYPE type, int flag)
{
    6b7c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6b80:	mov	r4, r0
    6b82:	sub	sp, #84	; 0x54
  if(type==T_ROOT)
    6b84:	cmp	r1, #0
    6b86:	bne.n	6c0c <zeroFS_class::Create(HDR_TYPE, int)+0x90>
  {
    memset(&hdr_list,0,4*sizeof(HDR_t));
    6b88:	movw	r0, #8816	; 0x2270
    6b8c:	mov	r5, r2
    6b8e:	mov.w	r2, #2048	; 0x800
    6b92:	add	r0, r4
    6b94:	bl	bc2c <memset>
    if(flag==0) // initialize start to root sector
    6b98:	cbz	r5, 6bee <zeroFS_class::Create(HDR_TYPE, int)+0x72>
      eof_sector=root_sector;
      hdr_list[type].prev=write_sector;
    }
    else        // continue at end of previous session
    {   uint32_t sector = root_sector;
        BYTE* buff = (BYTE *) &hdr;
    6b9a:	movw	r6, #8304	; 0x2070
          if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read3",res);
          if(hdr.magic!=MAGIC) break;       // gone over eof_sector
          if(hdr.next==0xFFFFFFFFul) break; // reached last unclosed header
          
          sector = write_sector = eof_sector = hdr.next; 
          hdr_list[type].prev=hdr.sect;
    6b9e:	movw	r8, #8828	; 0x227c
    6ba2:	movw	r7, #8312	; 0x2078
      write_sector = root_sector;
      eof_sector=root_sector;
      hdr_list[type].prev=write_sector;
    }
    else        // continue at end of previous session
    {   uint32_t sector = root_sector;
    6ba6:	ldr	r5, [r4, #0]
        BYTE* buff = (BYTE *) &hdr;
    6ba8:	add	r6, r4
          if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read3",res);
          if(hdr.magic!=MAGIC) break;       // gone over eof_sector
          if(hdr.next==0xFFFFFFFFul) break; // reached last unclosed header
          
          sector = write_sector = eof_sector = hdr.next; 
          hdr_list[type].prev=hdr.sect;
    6baa:	add	r8, r4
    6bac:	add	r7, r4
        UINT count = 1;

        while(1)
        {
          if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read3",res);
          if(hdr.magic!=MAGIC) break;       // gone over eof_sector
    6bae:	ldr.w	r9, [pc, #140]	; 6c3c <zeroFS_class::Create(HDR_TYPE, int)+0xc0>
    6bb2:	b.n	6bc8 <zeroFS_class::Create(HDR_TYPE, int)+0x4c>
          if(hdr.next==0xFFFFFFFFul) break; // reached last unclosed header
    6bb4:	add.w	r3, r4, #8320	; 0x2080
    6bb8:	ldr	r5, [r3, #0]
    6bba:	adds	r3, r5, #1
    6bbc:	beq.n	6c24 <zeroFS_class::Create(HDR_TYPE, int)+0xa8>
          
          sector = write_sector = eof_sector = hdr.next; 
          hdr_list[type].prev=hdr.sect;
    6bbe:	ldr	r3, [r7, #0]
        {
          if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read3",res);
          if(hdr.magic!=MAGIC) break;       // gone over eof_sector
          if(hdr.next==0xFFFFFFFFul) break; // reached last unclosed header
          
          sector = write_sector = eof_sector = hdr.next; 
    6bc0:	str	r5, [r4, #16]
    6bc2:	str	r5, [r4, #4]
          hdr_list[type].prev=hdr.sect;
    6bc4:	str.w	r3, [r8]
        BYTE* buff = (BYTE *) &hdr;
        UINT count = 1;

        while(1)
        {
          if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read3",res);
    6bc8:	movs	r3, #1
    6bca:	mov	r2, r5
    6bcc:	mov	r1, r6
    6bce:	ldrb	r0, [r4, #28]
    6bd0:	bl	71ac <disk_read>
    6bd4:	cbnz	r0, 6c28 <zeroFS_class::Create(HDR_TYPE, int)+0xac>
          if(hdr.magic!=MAGIC) break;       // gone over eof_sector
    6bd6:	ldr	r3, [r6, #0]
    6bd8:	cmp	r3, r9
    6bda:	beq.n	6bb4 <zeroFS_class::Create(HDR_TYPE, int)+0x38>
          if(hdr.next==0xFFFFFFFFul) break; // reached last unclosed header
          
          sector = write_sector = eof_sector = hdr.next; 
          hdr_list[type].prev=hdr.sect;
        }
        if((sector==root_sector) && (hdr.magic != MAGIC))
    6bdc:	ldr	r2, [r4, #0]
    6bde:	cmp	r5, r2
    6be0:	bne.n	6c24 <zeroFS_class::Create(HDR_TYPE, int)+0xa8>
        { // fall back to root_sector
            write_sector = eof_sector = root_sector;
            hdr_list[type].prev=write_sector;
    6be2:	movw	r3, #8828	; 0x227c
          sector = write_sector = eof_sector = hdr.next; 
          hdr_list[type].prev=hdr.sect;
        }
        if((sector==root_sector) && (hdr.magic != MAGIC))
        { // fall back to root_sector
            write_sector = eof_sector = root_sector;
    6be6:	str	r2, [r4, #16]
    6be8:	str	r2, [r4, #4]
            hdr_list[type].prev=write_sector;
    6bea:	str	r2, [r4, r3]
    6bec:	b.n	6bfa <zeroFS_class::Create(HDR_TYPE, int)+0x7e>
  if(type==T_ROOT)
  {
    memset(&hdr_list,0,4*sizeof(HDR_t));
    if(flag==0) // initialize start to root sector
    { 
      write_sector = root_sector;
    6bee:	ldr	r2, [r4, #0]
      eof_sector=root_sector;
      hdr_list[type].prev=write_sector;
    6bf0:	movw	r3, #8828	; 0x227c
  if(type==T_ROOT)
  {
    memset(&hdr_list,0,4*sizeof(HDR_t));
    if(flag==0) // initialize start to root sector
    { 
      write_sector = root_sector;
    6bf4:	str	r2, [r4, #4]
      eof_sector=root_sector;
    6bf6:	str	r2, [r4, #16]
      hdr_list[type].prev=write_sector;
    6bf8:	str	r2, [r4, r3]
            write_sector = eof_sector = root_sector;
            hdr_list[type].prev=write_sector;
        }
    }
    char name[80];
    sprintf(name,"R_0X%08x",(unsigned int)write_sector);
    6bfa:	ldr	r1, [pc, #52]	; (6c30 <zeroFS_class::Create(HDR_TYPE, int)+0xb4>)
    6bfc:	mov	r0, sp
    6bfe:	bl	c0d4 <sprintf>
    Create(type, name);
    6c02:	mov	r2, sp
    6c04:	movs	r1, #0
    6c06:	mov	r0, r4
    6c08:	bl	6a8c <zeroFS_class::Create(HDR_TYPE, char const*)>

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    6c0c:	ldr	r1, [r4, #4]
    6c0e:	movs	r3, #0
    6c10:	movs	r2, #16
    6c12:	ldr	r0, [pc, #32]	; (6c34 <zeroFS_class::Create(HDR_TYPE, int)+0xb8>)
    6c14:	bl	a54c <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    6c18:	ldr	r0, [pc, #24]	; (6c34 <zeroFS_class::Create(HDR_TYPE, int)+0xb8>)
    6c1a:	bl	a4fc <Print::println()>
  }
  Serial.println(write_sector,HEX);
}
    6c1e:	add	sp, #84	; 0x54
    6c20:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6c24:	ldr	r2, [r4, #4]
    6c26:	b.n	6bfa <zeroFS_class::Create(HDR_TYPE, int)+0x7e>
        BYTE* buff = (BYTE *) &hdr;
        UINT count = 1;

        while(1)
        {
          if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read3",res);
    6c28:	mov	r1, r0
    6c2a:	ldr	r0, [pc, #12]	; (6c38 <zeroFS_class::Create(HDR_TYPE, int)+0xbc>)
    6c2c:	bl	69dc <die(char const*, DRESULT)>
    6c30:	.word	0x20000224
    6c34:	.word	0x20000b20
    6c38:	.word	0x2000021c
    6c3c:	.word	0x6f72657a

00006c40 <zeroFS_class::Close(HDR_TYPE)>:
  //
  hdr_sector=hdr.sect;
  read_sector=hdr_sector+1;
}
void zeroFS_class::Close(HDR_TYPE type)
{
    6c40:	push	{r4, r5, r6, lr}
    6c42:	mov	r4, r0
  if(type==T_ROOT)
    6c44:	mov	r5, r1
    6c46:	cbnz	r1, 6c66 <zeroFS_class::Close(HDR_TYPE)+0x26>
  {
    memset(&hdr,0,sizeof(hdr));
    6c48:	movw	r6, #8304	; 0x2070
    6c4c:	mov.w	r2, #512	; 0x200
    6c50:	add	r6, r0
    6c52:	mov	r0, r6
    6c54:	bl	bc2c <memset>
    BYTE* buff = (BYTE *) &hdr;
    DWORD sector = write_sector;
    UINT count = 1;
      
    if(DRESULT res = disk_write (pdrv, buff, sector, count)) die("write2",res);
    6c58:	mov	r1, r6
    6c5a:	movs	r3, #1
    6c5c:	ldr	r2, [r4, #4]
    6c5e:	ldrb	r0, [r4, #28]
    6c60:	bl	71f0 <disk_write>
    6c64:	cbnz	r0, 6c8c <zeroFS_class::Close(HDR_TYPE)+0x4c>

  }
  
  hdr_list[type].next=write_sector;
    6c66:	lsls	r3, r5, #9
  //
  BYTE* buff = (BYTE *) &hdr_list[type];
    6c68:	movw	r1, #8816	; 0x2270
      
    if(DRESULT res = disk_write (pdrv, buff, sector, count)) die("write2",res);

  }
  
  hdr_list[type].next=write_sector;
    6c6c:	ldr	r0, [r4, #4]
  //
  BYTE* buff = (BYTE *) &hdr_list[type];
  DWORD sector = hdr_list[type].sect;
    6c6e:	movw	r5, #8824	; 0x2278
      
    if(DRESULT res = disk_write (pdrv, buff, sector, count)) die("write2",res);

  }
  
  hdr_list[type].next=write_sector;
    6c72:	adds	r2, r4, r3
  //
  BYTE* buff = (BYTE *) &hdr_list[type];
    6c74:	add	r1, r3
  DWORD sector = hdr_list[type].sect;
  UINT count = 1;
      
  if(DRESULT res = disk_write (pdrv, buff, sector, count)) die("write2",res);
    6c76:	movs	r3, #1
      
    if(DRESULT res = disk_write (pdrv, buff, sector, count)) die("write2",res);

  }
  
  hdr_list[type].next=write_sector;
    6c78:	add.w	r6, r2, #8832	; 0x2280
  //
  BYTE* buff = (BYTE *) &hdr_list[type];
  DWORD sector = hdr_list[type].sect;
  UINT count = 1;
      
  if(DRESULT res = disk_write (pdrv, buff, sector, count)) die("write2",res);
    6c7c:	add	r1, r4
      
    if(DRESULT res = disk_write (pdrv, buff, sector, count)) die("write2",res);

  }
  
  hdr_list[type].next=write_sector;
    6c7e:	str	r0, [r6, #0]
  //
  BYTE* buff = (BYTE *) &hdr_list[type];
  DWORD sector = hdr_list[type].sect;
  UINT count = 1;
      
  if(DRESULT res = disk_write (pdrv, buff, sector, count)) die("write2",res);
    6c80:	ldrb	r0, [r4, #28]
    6c82:	ldr	r2, [r2, r5]
    6c84:	bl	71f0 <disk_write>
    6c88:	cbnz	r0, 6c8c <zeroFS_class::Close(HDR_TYPE)+0x4c>
    6c8a:	pop	{r4, r5, r6, pc}
    6c8c:	mov	r1, r0
    6c8e:	ldr	r0, [pc, #4]	; (6c94 <zeroFS_class::Close(HDR_TYPE)+0x54>)
    6c90:	bl	69dc <die(char const*, DRESULT)>
    6c94:	.word	0x20000244

00006c98 <zeroFS_class::Write(void*, unsigned long)>:
  
}
void zeroFS_class::Write(void * data, uint32_t ndat)
{
    6c98:	push	{r3, r4, r5, lr}
    6c9a:	mov	r4, r0
      BYTE* buff = (BYTE *) data;
      DWORD sector = write_sector;
      UINT count = ndat/512;
    6c9c:	lsrs	r5, r2, #9
      
      if(DRESULT res = disk_write (pdrv, buff, sector, count)) die("write3",res);
    6c9e:	ldrb	r0, [r0, #28]
    6ca0:	mov	r3, r5
    6ca2:	ldr	r2, [r4, #4]
    6ca4:	bl	71f0 <disk_write>
    6ca8:	cbnz	r0, 6cb2 <zeroFS_class::Write(void*, unsigned long)+0x1a>

      write_sector += count;
    6caa:	ldr	r3, [r4, #4]
    6cac:	add	r5, r3
    6cae:	str	r5, [r4, #4]
    6cb0:	pop	{r3, r4, r5, pc}
{
      BYTE* buff = (BYTE *) data;
      DWORD sector = write_sector;
      UINT count = ndat/512;
      
      if(DRESULT res = disk_write (pdrv, buff, sector, count)) die("write3",res);
    6cb2:	mov	r1, r0
    6cb4:	ldr	r0, [pc, #4]	; (6cbc <zeroFS_class::Write(void*, unsigned long)+0x24>)
    6cb6:	bl	69dc <die(char const*, DRESULT)>
    6cba:	nop
    6cbc:	.word	0x2000024c

00006cc0 <zeroFS_class::ListAll()>:
      if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read2",res);

      read_sector += count;
}
void zeroFS_class::ListAll(void)
{
    6cc0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6cc4:	movw	r8, #8304	; 0x2070
//    Serial.printf("%d %x %d\n",pdrv,sector,count);
    if(sector==0xFFFFFFFFUL) break;
    
    if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read3",res);
    //
    if(hdr.type <2 ) Serial.println(); 
    6cc8:	movw	r5, #8308	; 0x2074
      if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read2",res);

      read_sector += count;
}
void zeroFS_class::ListAll(void)
{
    6ccc:	sub	sp, #12
    6cce:	mov	r6, r0
  uint32_t sector = root_sector;
    6cd0:	ldr	r7, [r0, #0]
    6cd2:	add	r8, r0
//    Serial.printf("%d %x %d\n",pdrv,sector,count);
    if(sector==0xFFFFFFFFUL) break;
    
    if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read3",res);
    //
    if(hdr.type <2 ) Serial.println(); 
    6cd4:	add	r5, r0
  {
    BYTE* buff = (BYTE *) &hdr;
    UINT count = 1;

//    Serial.printf("%d %x %d\n",pdrv,sector,count);
    if(sector==0xFFFFFFFFUL) break;
    6cd6:	adds	r2, r7, #1
    6cd8:	beq.n	6d5c <zeroFS_class::ListAll()+0x9c>
    
    if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read3",res);
    6cda:	movs	r3, #1
    6cdc:	mov	r2, r7
    6cde:	mov	r1, r8
    6ce0:	ldrb	r0, [r6, #28]
    6ce2:	bl	71ac <disk_read>
    6ce6:	cmp	r0, #0
    6ce8:	bne.n	6dda <zeroFS_class::ListAll()+0x11a>
    //
    if(hdr.type <2 ) Serial.println(); 
    6cea:	ldr	r3, [r5, #0]
    6cec:	cmp	r3, #1
    6cee:	bls.n	6dbc <zeroFS_class::ListAll()+0xfc>
    for(int ii=0; ii<(int)(hdr.type); ii++) Serial.print("  ");
    6cf0:	cmp	r3, #0
    6cf2:	ble.n	6d06 <zeroFS_class::ListAll()+0x46>
    6cf4:	movs	r4, #0
    6cf6:	movs	r1, #2
    6cf8:	ldr	r0, [pc, #240]	; (6dec <zeroFS_class::ListAll()+0x12c>)
    6cfa:	bl	8cd8 <usb_serial_write>
    6cfe:	adds	r4, #1
    6d00:	ldr	r3, [r5, #0]
    6d02:	cmp	r3, r4
    6d04:	bgt.n	6cf6 <zeroFS_class::ListAll()+0x36>
    Serial.printf("%x %x %x %x ",hdr.prev,hdr.sect,hdr.next,hdr.parent);
    6d06:	movw	r1, #8324	; 0x2084
    6d0a:	add.w	r9, r6, #8320	; 0x2080
    6d0e:	movw	r4, #8312	; 0x2078
    6d12:	movw	r2, #8316	; 0x207c
    6d16:	add	r1, r6
    6d18:	ldr.w	r0, [r9]
    6d1c:	add	r4, r6
    6d1e:	add	r2, r6
    6d20:	ldr	r1, [r1, #0]
    6d22:	ldr	r3, [r4, #0]
    6d24:	ldr	r2, [r2, #0]
    6d26:	stmia.w	sp, {r0, r1}
    6d2a:	ldr	r1, [pc, #196]	; (6df0 <zeroFS_class::ListAll()+0x130>)
    6d2c:	ldr	r0, [pc, #196]	; (6df4 <zeroFS_class::ListAll()+0x134>)
    6d2e:	bl	a52c <Print::printf(char const*, ...)>
    Serial.printf("%d %d %s\n",hdr.type,hdr.next-hdr.sect,hdr.name); Serial.flush();
    6d32:	movw	r1, #8344	; 0x2098
    6d36:	ldr.w	r0, [r9]
    6d3a:	ldr	r3, [r4, #0]
    6d3c:	add	r1, r6
    6d3e:	ldr	r2, [r5, #0]
    6d40:	subs	r3, r0, r3
    6d42:	str	r1, [sp, #0]
    6d44:	ldr	r0, [pc, #172]	; (6df4 <zeroFS_class::ListAll()+0x134>)
    6d46:	ldr	r1, [pc, #176]	; (6df8 <zeroFS_class::ListAll()+0x138>)
    6d48:	bl	a52c <Print::printf(char const*, ...)>
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    6d4c:	bl	8d3c <usb_serial_flush_output>

    if(hdr.type<3) 
    6d50:	ldr	r3, [r5, #0]
    6d52:	cmp	r3, #2
    6d54:	bhi.n	6dac <zeroFS_class::ListAll()+0xec>
    { //increase hdr level up to file level
      sector++;
    6d56:	adds	r7, #1
  {
    BYTE* buff = (BYTE *) &hdr;
    UINT count = 1;

//    Serial.printf("%d %x %d\n",pdrv,sector,count);
    if(sector==0xFFFFFFFFUL) break;
    6d58:	adds	r2, r7, #1
    6d5a:	bne.n	6cda <zeroFS_class::ListAll()+0x1a>

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    6d5c:	movs	r3, #0
    6d5e:	movs	r2, #16
    6d60:	mov	r1, r7
    6d62:	ldr	r0, [pc, #144]	; (6df4 <zeroFS_class::ListAll()+0x134>)
    6d64:	bl	a54c <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    6d68:	ldr	r0, [pc, #136]	; (6df4 <zeroFS_class::ListAll()+0x134>)
    6d6a:	bl	a4fc <Print::println()>

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    6d6e:	movs	r3, #0
    6d70:	movs	r2, #16
    6d72:	ldr	r1, [r6, #16]
    6d74:	ldr	r0, [pc, #124]	; (6df4 <zeroFS_class::ListAll()+0x134>)
    6d76:	bl	a54c <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    6d7a:	ldr	r0, [pc, #120]	; (6df4 <zeroFS_class::ListAll()+0x134>)
    6d7c:	bl	a4fc <Print::println()>
      if(sector==eof_sector) break; // end of data reached
    }
  }
  Serial.println(sector,HEX);
  Serial.println(eof_sector,HEX);
  if(DRESULT res = disk_read (pdrv, buff, sector, 1)) die("read3",res);
    6d80:	movs	r3, #1
    6d82:	mov	r2, r7
    6d84:	add.w	r1, r6, #112	; 0x70
    6d88:	ldrb	r0, [r6, #28]
    6d8a:	bl	71ac <disk_read>
    6d8e:	mov	r3, r0
    6d90:	cbnz	r0, 6de2 <zeroFS_class::ListAll()+0x122>
  Serial.println(hdr.next,HEX);
    6d92:	add.w	r6, r6, #8320	; 0x2080

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    6d96:	movs	r2, #16
    6d98:	ldr	r0, [pc, #88]	; (6df4 <zeroFS_class::ListAll()+0x134>)
    6d9a:	ldr	r1, [r6, #0]
    6d9c:	bl	a54c <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    6da0:	ldr	r0, [pc, #80]	; (6df4 <zeroFS_class::ListAll()+0x134>)
}
    6da2:	add	sp, #12
    6da4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6da8:	b.w	a4fc <Print::println()>
    if(hdr.type<3) 
    { //increase hdr level up to file level
      sector++;
    }
    else
    { sector = hdr.next;
    6dac:	ldr.w	r7, [r9]
      if(sector==0xFFFFFFFFUL) {Serial.println(sector,HEX); break;}
    6db0:	adds	r3, r7, #1
    6db2:	beq.n	6dc6 <zeroFS_class::ListAll()+0x106>
      if(sector==eof_sector) break; // end of data reached
    6db4:	ldr	r3, [r6, #16]
    6db6:	cmp	r7, r3
    6db8:	bne.n	6cd6 <zeroFS_class::ListAll()+0x16>
    6dba:	b.n	6d5c <zeroFS_class::ListAll()+0x9c>
//    Serial.printf("%d %x %d\n",pdrv,sector,count);
    if(sector==0xFFFFFFFFUL) break;
    
    if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read3",res);
    //
    if(hdr.type <2 ) Serial.println(); 
    6dbc:	ldr	r0, [pc, #52]	; (6df4 <zeroFS_class::ListAll()+0x134>)
    6dbe:	bl	a4fc <Print::println()>
    6dc2:	ldr	r3, [r5, #0]
    6dc4:	b.n	6cf0 <zeroFS_class::ListAll()+0x30>

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    6dc6:	movs	r3, #0
    6dc8:	movs	r2, #16
    6dca:	mov	r1, r7
    6dcc:	ldr	r0, [pc, #36]	; (6df4 <zeroFS_class::ListAll()+0x134>)
    6dce:	bl	a54c <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    6dd2:	ldr	r0, [pc, #32]	; (6df4 <zeroFS_class::ListAll()+0x134>)
    6dd4:	bl	a4fc <Print::println()>
    6dd8:	b.n	6d5c <zeroFS_class::ListAll()+0x9c>
    UINT count = 1;

//    Serial.printf("%d %x %d\n",pdrv,sector,count);
    if(sector==0xFFFFFFFFUL) break;
    
    if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read3",res);
    6dda:	mov	r1, r0
    6ddc:	ldr	r0, [pc, #28]	; (6dfc <zeroFS_class::ListAll()+0x13c>)
    6dde:	bl	69dc <die(char const*, DRESULT)>
      if(sector==eof_sector) break; // end of data reached
    }
  }
  Serial.println(sector,HEX);
  Serial.println(eof_sector,HEX);
  if(DRESULT res = disk_read (pdrv, buff, sector, 1)) die("read3",res);
    6de2:	mov	r1, r0
    6de4:	ldr	r0, [pc, #20]	; (6dfc <zeroFS_class::ListAll()+0x13c>)
    6de6:	bl	69dc <die(char const*, DRESULT)>
    6dea:	nop
    6dec:	.word	0x20000278
    6df0:	.word	0x2000025c
    6df4:	.word	0x20000b20
    6df8:	.word	0x2000026c
    6dfc:	.word	0x2000021c

00006e00 <zeroFS_class::findEOF()>:
    if(sector==eof_sector) break; // end of data reached
  }
}

void zeroFS_class::findEOF(void)
{
    6e00:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
//  int16_t done=0;
  
//  uint32_t old_type=0;
  uint32_t sector = root_sector;
    BYTE* buff = (BYTE *) &hdr;
    6e04:	movw	r5, #8304	; 0x2070
void zeroFS_class::findEOF(void)
{
//  int16_t done=0;
  
//  uint32_t old_type=0;
  uint32_t sector = root_sector;
    6e08:	ldr	r6, [r0, #0]
    if(sector==eof_sector) break; // end of data reached
  }
}

void zeroFS_class::findEOF(void)
{
    6e0a:	mov	r4, r0

    // root level
    eof_sector=sector;
    while(1) // should only be 1 root header, but ....
    {   if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read5",res);
        if(hdr.magic != MAGIC) break; 
    6e0c:	ldr.w	r8, [pc, #200]	; 6ed8 <zeroFS_class::findEOF()+0xd8>
{
//  int16_t done=0;
  
//  uint32_t old_type=0;
  uint32_t sector = root_sector;
    BYTE* buff = (BYTE *) &hdr;
    6e10:	add	r5, r0
    // root level
    eof_sector=sector;
    while(1) // should only be 1 root header, but ....
    {   if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read5",res);
        if(hdr.magic != MAGIC) break; 
        if(hdr.next==0xFFFFFFFF) break; 
    6e12:	add.w	r7, r0, #8320	; 0x2080
  uint32_t sector = root_sector;
    BYTE* buff = (BYTE *) &hdr;
    UINT count = 1;

    // root level
    eof_sector=sector;
    6e16:	str	r6, [r0, #16]
    6e18:	b.n	6e24 <zeroFS_class::findEOF()+0x24>
    while(1) // should only be 1 root header, but ....
    {   if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read5",res);
        if(hdr.magic != MAGIC) break; 
        if(hdr.next==0xFFFFFFFF) break; 
    6e1a:	ldr	r3, [r7, #0]
    6e1c:	adds	r0, r3, #1
    6e1e:	beq.n	6e3e <zeroFS_class::findEOF()+0x3e>
    BYTE* buff = (BYTE *) &hdr;
    UINT count = 1;

    // root level
    eof_sector=sector;
    while(1) // should only be 1 root header, but ....
    6e20:	mov	r6, r3
    {   if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read5",res);
        if(hdr.magic != MAGIC) break; 
        if(hdr.next==0xFFFFFFFF) break; 
        sector=hdr.next;
        eof_sector=sector;
    6e22:	str	r3, [r4, #16]
    UINT count = 1;

    // root level
    eof_sector=sector;
    while(1) // should only be 1 root header, but ....
    {   if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read5",res);
    6e24:	movs	r3, #1
    6e26:	mov	r2, r6
    6e28:	mov	r1, r5
    6e2a:	ldrb	r0, [r4, #28]
    6e2c:	bl	71ac <disk_read>
    6e30:	cmp	r0, #0
    6e32:	bne.n	6ebe <zeroFS_class::findEOF()+0xbe>
        if(hdr.magic != MAGIC) break; 
    6e34:	ldr	r3, [r5, #0]
    6e36:	cmp	r3, r8
    6e38:	beq.n	6e1a <zeroFS_class::findEOF()+0x1a>
    6e3a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(hdr.next==0xFFFFFFFF) break; 
        sector=hdr.next;
        eof_sector=sector;
    }
    if(hdr.type != T_ROOT)
    6e3e:	movw	r3, #8308	; 0x2074
    6e42:	ldr	r3, [r4, r3]
    6e44:	cmp	r3, #0
    6e46:	bne.n	6e3a <zeroFS_class::findEOF()+0x3a>
    { //Serial.print("EOF1 "); Serial.println(eof_sector,HEX);
      return;
    }

    // go to trial level
    sector++;
    6e48:	adds	r6, #1
    eof_sector=sector;
    while(1)
    {
        if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read6",res);
        if(hdr.magic != MAGIC) break; 
    6e4a:	ldr.w	r8, [pc, #140]	; 6ed8 <zeroFS_class::findEOF()+0xd8>
      return;
    }

    // go to trial level
    sector++;
    eof_sector=sector;
    6e4e:	str	r6, [r4, #16]
    6e50:	b.n	6e5c <zeroFS_class::findEOF()+0x5c>
    while(1)
    {
        if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read6",res);
        if(hdr.magic != MAGIC) break; 
        if(hdr.next==0xFFFFFFFF) break; 
    6e52:	ldr	r3, [r7, #0]
    6e54:	adds	r1, r3, #1
    6e56:	beq.n	6e72 <zeroFS_class::findEOF()+0x72>
    }

    // go to trial level
    sector++;
    eof_sector=sector;
    while(1)
    6e58:	mov	r6, r3
    {
        if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read6",res);
        if(hdr.magic != MAGIC) break; 
        if(hdr.next==0xFFFFFFFF) break; 
        sector=hdr.next;
        eof_sector=sector;
    6e5a:	str	r3, [r4, #16]
    // go to trial level
    sector++;
    eof_sector=sector;
    while(1)
    {
        if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read6",res);
    6e5c:	movs	r3, #1
    6e5e:	mov	r2, r6
    6e60:	mov	r1, r5
    6e62:	ldrb	r0, [r4, #28]
    6e64:	bl	71ac <disk_read>
    6e68:	cbnz	r0, 6ec6 <zeroFS_class::findEOF()+0xc6>
        if(hdr.magic != MAGIC) break; 
    6e6a:	ldr	r3, [r5, #0]
    6e6c:	cmp	r3, r8
    6e6e:	beq.n	6e52 <zeroFS_class::findEOF()+0x52>
    6e70:	b.n	6e3a <zeroFS_class::findEOF()+0x3a>
    { //Serial.print("EOF2 "); Serial.println(eof_sector,HEX);
      return;
    }

    // go to day level
    sector++;
    6e72:	adds	r6, #1
    eof_sector=sector;
    while(1)
    {
        if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read7",res);
        if(hdr.magic != MAGIC) break; 
    6e74:	ldr.w	r8, [pc, #96]	; 6ed8 <zeroFS_class::findEOF()+0xd8>
      return;
    }

    // go to day level
    sector++;
    eof_sector=sector;
    6e78:	str	r6, [r4, #16]
    6e7a:	b.n	6e86 <zeroFS_class::findEOF()+0x86>
    while(1)
    {
        if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read7",res);
        if(hdr.magic != MAGIC) break; 
        if(hdr.next==0xFFFFFFFF) break; 
    6e7c:	ldr	r3, [r7, #0]
    6e7e:	adds	r2, r3, #1
    6e80:	beq.n	6e9c <zeroFS_class::findEOF()+0x9c>
    }

    // go to day level
    sector++;
    eof_sector=sector;
    while(1)
    6e82:	mov	r6, r3
    {
        if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read7",res);
        if(hdr.magic != MAGIC) break; 
        if(hdr.next==0xFFFFFFFF) break; 
        sector=hdr.next;
        eof_sector=sector;
    6e84:	str	r3, [r4, #16]
    // go to day level
    sector++;
    eof_sector=sector;
    while(1)
    {
        if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read7",res);
    6e86:	movs	r3, #1
    6e88:	mov	r2, r6
    6e8a:	mov	r1, r5
    6e8c:	ldrb	r0, [r4, #28]
    6e8e:	bl	71ac <disk_read>
    6e92:	cbnz	r0, 6ece <zeroFS_class::findEOF()+0xce>
        if(hdr.magic != MAGIC) break; 
    6e94:	ldr	r3, [r5, #0]
    6e96:	cmp	r3, r8
    6e98:	beq.n	6e7c <zeroFS_class::findEOF()+0x7c>
    6e9a:	b.n	6e3a <zeroFS_class::findEOF()+0x3a>
    if(hdr.magic != MAGIC) // reached end of list
    {// Serial.print("EOF3 "); Serial.println(eof_sector,HEX);
      return;
    }
    // go to file level
    sector++;
    6e9c:	adds	r2, r6, #1
    eof_sector=sector;
    while(1)
    {
        if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read7",res);
        if(hdr.magic != MAGIC) break; 
    6e9e:	ldr	r6, [pc, #56]	; (6ed8 <zeroFS_class::findEOF()+0xd8>)
    6ea0:	b.n	6ea8 <zeroFS_class::findEOF()+0xa8>
        if(hdr.next==0xFFFFFFFF) break; 
    6ea2:	ldr	r2, [r7, #0]
    6ea4:	adds	r3, r2, #1
    6ea6:	beq.n	6e3a <zeroFS_class::findEOF()+0x3a>
    {// Serial.print("EOF3 "); Serial.println(eof_sector,HEX);
      return;
    }
    // go to file level
    sector++;
    eof_sector=sector;
    6ea8:	str	r2, [r4, #16]
    while(1)
    {
        if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read7",res);
    6eaa:	movs	r3, #1
    6eac:	mov	r1, r5
    6eae:	ldrb	r0, [r4, #28]
    6eb0:	bl	71ac <disk_read>
    6eb4:	cbnz	r0, 6ece <zeroFS_class::findEOF()+0xce>
        if(hdr.magic != MAGIC) break; 
    6eb6:	ldr	r3, [r5, #0]
    6eb8:	cmp	r3, r6
    6eba:	beq.n	6ea2 <zeroFS_class::findEOF()+0xa2>
    6ebc:	b.n	6e3a <zeroFS_class::findEOF()+0x3a>
    UINT count = 1;

    // root level
    eof_sector=sector;
    while(1) // should only be 1 root header, but ....
    {   if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read5",res);
    6ebe:	mov	r1, r0
    6ec0:	ldr	r0, [pc, #24]	; (6edc <zeroFS_class::findEOF()+0xdc>)
    6ec2:	bl	69dc <die(char const*, DRESULT)>
    // go to trial level
    sector++;
    eof_sector=sector;
    while(1)
    {
        if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read6",res);
    6ec6:	mov	r1, r0
    6ec8:	ldr	r0, [pc, #20]	; (6ee0 <zeroFS_class::findEOF()+0xe0>)
    6eca:	bl	69dc <die(char const*, DRESULT)>
    // go to file level
    sector++;
    eof_sector=sector;
    while(1)
    {
        if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read7",res);
    6ece:	mov	r1, r0
    6ed0:	ldr	r0, [pc, #16]	; (6ee4 <zeroFS_class::findEOF()+0xe4>)
    6ed2:	bl	69dc <die(char const*, DRESULT)>
    6ed6:	nop
    6ed8:	.word	0x6f72657a
    6edc:	.word	0x20000284
    6ee0:	.word	0x2000028c
    6ee4:	.word	0x20000294

00006ee8 <zeroFS_class::fixEOF()>:
    }
    //Serial.print("EOF4 "); Serial.println(eof_sector,HEX);
}

void zeroFS_class::fixEOF(void)
{
    6ee8:	push	{r3, r4, r5, r6, r7, lr}
  //int16_t done=0;
  
    if(eof_sector==root_sector) return;
    6eea:	ldr	r5, [r0, #0]
    6eec:	ldr	r3, [r0, #16]
    6eee:	cmp	r3, r5
    6ef0:	beq.n	6f22 <zeroFS_class::fixEOF()+0x3a>

    // root level;
  //uint32_t old_type=0;
   uint32_t sector = root_sector;
    BYTE* buff = (BYTE *) &hdr;
    6ef2:	movw	r6, #8304	; 0x2070
    6ef6:	mov	r4, r0
    UINT count = 1;
    
    while(1)
    {
        if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read8",res);
        if((hdr.next== eof_sector) || (hdr.next==0xFFFFFFFF)) break; 
    6ef8:	add.w	r7, r0, #8320	; 0x2080
    if(eof_sector==root_sector) return;

    // root level;
  //uint32_t old_type=0;
   uint32_t sector = root_sector;
    BYTE* buff = (BYTE *) &hdr;
    6efc:	add	r6, r0
    6efe:	b.n	6f06 <zeroFS_class::fixEOF()+0x1e>
    UINT count = 1;
    
    while(1)
    {
        if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read8",res);
        if((hdr.next== eof_sector) || (hdr.next==0xFFFFFFFF)) break; 
    6f00:	adds	r1, r3, #1
    6f02:	beq.n	6f24 <zeroFS_class::fixEOF()+0x3c>
    6f04:	mov	r5, r3
    BYTE* buff = (BYTE *) &hdr;
    UINT count = 1;
    
    while(1)
    {
        if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read8",res);
    6f06:	movs	r3, #1
    6f08:	mov	r2, r5
    6f0a:	mov	r1, r6
    6f0c:	ldrb	r0, [r4, #28]
    6f0e:	bl	71ac <disk_read>
    6f12:	cmp	r0, #0
    6f14:	bne.n	6f76 <zeroFS_class::fixEOF()+0x8e>
        if((hdr.next== eof_sector) || (hdr.next==0xFFFFFFFF)) break; 
    6f16:	ldr	r3, [r7, #0]
    6f18:	ldr	r2, [r4, #16]
    6f1a:	cmp	r3, r2
    6f1c:	bne.n	6f00 <zeroFS_class::fixEOF()+0x18>
        sector=hdr.next;
    }
    if(hdr.next == 0xFFFFFFFF) 
    6f1e:	adds	r0, r2, #1
    6f20:	beq.n	6f24 <zeroFS_class::fixEOF()+0x3c>
    6f22:	pop	{r3, r4, r5, r6, r7, pc}
    { hdr.next=eof_sector;
      BYTE* buff = (BYTE *) &hdr;
      DWORD sector = hdr.sect;
    6f24:	movw	r1, #8312	; 0x2078
        if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read8",res);
        if((hdr.next== eof_sector) || (hdr.next==0xFFFFFFFF)) break; 
        sector=hdr.next;
    }
    if(hdr.next == 0xFFFFFFFF) 
    { hdr.next=eof_sector;
    6f28:	str	r2, [r7, #0]
      BYTE* buff = (BYTE *) &hdr;
      DWORD sector = hdr.sect;
      UINT count = 1;
        
      if(DRESULT res = disk_write (pdrv, buff, sector, count)) die("write4",res);
    6f2a:	movs	r3, #1
    6f2c:	ldrb	r0, [r4, #28]
    6f2e:	ldr	r2, [r4, r1]
    6f30:	mov	r1, r6
    6f32:	bl	71f0 <disk_write>
    6f36:	cbnz	r0, 6f86 <zeroFS_class::fixEOF()+0x9e>
    }
    else
     return;

    // go to day level
    sector++;
    6f38:	adds	r2, r5, #1
    6f3a:	b.n	6f40 <zeroFS_class::fixEOF()+0x58>
    while(1)
    {
        if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read9",res);
        if((hdr.next==eof_sector) || (hdr.next==0xFFFFFFFF)) break; 
    6f3c:	adds	r1, r2, #1
    6f3e:	beq.n	6f58 <zeroFS_class::fixEOF()+0x70>

    // go to day level
    sector++;
    while(1)
    {
        if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read9",res);
    6f40:	movs	r3, #1
    6f42:	mov	r1, r6
    6f44:	ldrb	r0, [r4, #28]
    6f46:	bl	71ac <disk_read>
    6f4a:	cbnz	r0, 6f7e <zeroFS_class::fixEOF()+0x96>
        if((hdr.next==eof_sector) || (hdr.next==0xFFFFFFFF)) break; 
    6f4c:	ldr	r2, [r7, #0]
    6f4e:	ldr	r3, [r4, #16]
    6f50:	cmp	r2, r3
    6f52:	bne.n	6f3c <zeroFS_class::fixEOF()+0x54>
        sector=hdr.next;
    }
    if(hdr.next == 0xFFFFFFFF) 
    6f54:	adds	r2, r3, #1
    6f56:	bne.n	6f22 <zeroFS_class::fixEOF()+0x3a>
    { hdr.next=eof_sector;
      BYTE* buff = (BYTE *) &hdr;
      DWORD sector = hdr.sect;
    6f58:	movw	r2, #8312	; 0x2078
        if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read9",res);
        if((hdr.next==eof_sector) || (hdr.next==0xFFFFFFFF)) break; 
        sector=hdr.next;
    }
    if(hdr.next == 0xFFFFFFFF) 
    { hdr.next=eof_sector;
    6f5c:	str	r3, [r7, #0]
      BYTE* buff = (BYTE *) &hdr;
      DWORD sector = hdr.sect;
      UINT count = 1;
        
      if(DRESULT res = disk_write (pdrv, buff, sector, count)) die("write5",res);
    6f5e:	mov	r1, r6
    6f60:	ldrb	r0, [r4, #28]
    6f62:	ldr	r2, [r4, r2]
    6f64:	movs	r3, #1
    6f66:	bl	71f0 <disk_write>
    6f6a:	cmp	r0, #0
    6f6c:	beq.n	6f22 <zeroFS_class::fixEOF()+0x3a>
    6f6e:	mov	r1, r0
    6f70:	ldr	r0, [pc, #28]	; (6f90 <zeroFS_class::fixEOF()+0xa8>)
    6f72:	bl	69dc <die(char const*, DRESULT)>
    BYTE* buff = (BYTE *) &hdr;
    UINT count = 1;
    
    while(1)
    {
        if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read8",res);
    6f76:	mov	r1, r0
    6f78:	ldr	r0, [pc, #24]	; (6f94 <zeroFS_class::fixEOF()+0xac>)
    6f7a:	bl	69dc <die(char const*, DRESULT)>

    // go to day level
    sector++;
    while(1)
    {
        if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read9",res);
    6f7e:	mov	r1, r0
    6f80:	ldr	r0, [pc, #20]	; (6f98 <zeroFS_class::fixEOF()+0xb0>)
    6f82:	bl	69dc <die(char const*, DRESULT)>
    { hdr.next=eof_sector;
      BYTE* buff = (BYTE *) &hdr;
      DWORD sector = hdr.sect;
      UINT count = 1;
        
      if(DRESULT res = disk_write (pdrv, buff, sector, count)) die("write4",res);
    6f86:	mov	r1, r0
    6f88:	ldr	r0, [pc, #16]	; (6f9c <zeroFS_class::fixEOF()+0xb4>)
    6f8a:	bl	69dc <die(char const*, DRESULT)>
    6f8e:	nop
    6f90:	.word	0x200002b4
    6f94:	.word	0x2000029c
    6f98:	.word	0x200002ac
    6f9c:	.word	0x200002a4

00006fa0 <zeroFS_class::Count(unsigned long)>:


/*********************** for MTP **********************/

uint32_t zeroFS_class::Count(uint32_t parent)
{
    6fa0:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6fa4:	mov	r4, r0
  parent_sector=parent;
    6fa6:	str	r1, [r0, #20]
  if(parent==0xfffffffful)
    6fa8:	adds	r0, r1, #1
    6faa:	beq.n	7000 <zeroFS_class::Count(unsigned long)+0x60>
    read_sector=root_sector;
    return cnt;
  }
  else
  {
    uint32_t sector = parent+1;
    6fac:	add.w	r8, r1, #1
    6fb0:	movw	sl, #8304	; 0x2070
    uint32_t cnt=0;
    HDR_TYPE type=(HDR_TYPE) 0;
    6fb4:	movs	r7, #0
    6fb6:	movw	r9, #8308	; 0x2074
    read_sector=root_sector;
    return cnt;
  }
  else
  {
    uint32_t sector = parent+1;
    6fba:	mov	r5, r8
    6fbc:	add	sl, r4
    uint32_t cnt=0;
    6fbe:	mov	r6, r7
    6fc0:	add	r9, r4
      if(type==0) 
        type=(HDR_TYPE) hdr.type;
      else if(hdr.type != (HDR_TYPE) type) 
        break; 
      cnt++;
      sector = hdr.next;
    6fc2:	add.w	fp, r4, #8320	; 0x2080
    6fc6:	b.n	6fdc <zeroFS_class::Count(unsigned long)+0x3c>
      BYTE* buff = (BYTE *) &hdr;
      UINT count = 1;
      
      if(DRESULT res = disk_read (pdrv, buff, sector, count)) { Serial.printf("count2 %x\n",sector); while(1); }
      if(type==0) 
        type=(HDR_TYPE) hdr.type;
    6fc8:	ldrb.w	r7, [r9]
      else if(hdr.type != (HDR_TYPE) type) 
        break; 
      cnt++;
      sector = hdr.next;
    6fcc:	ldr.w	r5, [fp]
      if(DRESULT res = disk_read (pdrv, buff, sector, count)) { Serial.printf("count2 %x\n",sector); while(1); }
      if(type==0) 
        type=(HDR_TYPE) hdr.type;
      else if(hdr.type != (HDR_TYPE) type) 
        break; 
      cnt++;
    6fd0:	adds	r6, #1
      sector = hdr.next;
      if(sector==eof_sector) break; // end of data reached
      if(sector==0xFFFFFFFFUL) break; // end of list
    6fd2:	ldr	r3, [r4, #16]
    6fd4:	cmp	r3, r5
    6fd6:	beq.n	6ff6 <zeroFS_class::Count(unsigned long)+0x56>
    6fd8:	adds	r3, r5, #1
    6fda:	beq.n	6ff6 <zeroFS_class::Count(unsigned long)+0x56>
    while(1)
    {
      BYTE* buff = (BYTE *) &hdr;
      UINT count = 1;
      
      if(DRESULT res = disk_read (pdrv, buff, sector, count)) { Serial.printf("count2 %x\n",sector); while(1); }
    6fdc:	movs	r3, #1
    6fde:	mov	r2, r5
    6fe0:	mov	r1, sl
    6fe2:	ldrb	r0, [r4, #28]
    6fe4:	bl	71ac <disk_read>
    6fe8:	cbnz	r0, 703c <zeroFS_class::Count(unsigned long)+0x9c>
      if(type==0) 
    6fea:	cmp	r7, #0
    6fec:	beq.n	6fc8 <zeroFS_class::Count(unsigned long)+0x28>
        type=(HDR_TYPE) hdr.type;
      else if(hdr.type != (HDR_TYPE) type) 
    6fee:	ldr.w	r3, [r9]
    6ff2:	cmp	r3, r7
    6ff4:	beq.n	6fcc <zeroFS_class::Count(unsigned long)+0x2c>
      sector = hdr.next;
      if(sector==eof_sector) break; // end of data reached
      if(sector==0xFFFFFFFFUL) break; // end of list
    }
    read_sector=parent+1; // reset read_sector to first object ater parent
    return cnt;
    6ff6:	mov	r0, r6
      cnt++;
      sector = hdr.next;
      if(sector==eof_sector) break; // end of data reached
      if(sector==0xFFFFFFFFUL) break; // end of list
    }
    read_sector=parent+1; // reset read_sector to first object ater parent
    6ff8:	str.w	r8, [r4, #12]
    return cnt;
  }
}
    6ffc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7000:	movw	r7, #8304	; 0x2070

uint32_t zeroFS_class::Count(uint32_t parent)
{
  parent_sector=parent;
  if(parent==0xfffffffful)
  { uint32_t sector = root_sector;
    7004:	ldr	r6, [r4, #0]
    uint32_t cnt=0;
    7006:	movs	r5, #0
    7008:	add.w	r8, r4, #8320	; 0x2080
    700c:	add	r7, r4
    700e:	b.n	701e <zeroFS_class::Count(unsigned long)+0x7e>
      BYTE* buff = (BYTE *) &hdr;
      UINT count = 1;
      
      if(DRESULT res = disk_read (pdrv, buff, sector, count)) { Serial.printf("count1 %x\n",sector); while(1); }
      cnt++;      
      sector = hdr.next;
    7010:	ldr.w	r6, [r8]
      if(sector==eof_sector) break; // end of data reached
      if(sector==0xFFFFFFFFUL) break; // end of list
    7014:	ldr	r3, [r4, #16]
    7016:	cmp	r3, r6
    7018:	beq.n	7048 <zeroFS_class::Count(unsigned long)+0xa8>
    701a:	adds	r2, r6, #1
    701c:	beq.n	7048 <zeroFS_class::Count(unsigned long)+0xa8>
    while(1)
    {
      BYTE* buff = (BYTE *) &hdr;
      UINT count = 1;
      
      if(DRESULT res = disk_read (pdrv, buff, sector, count)) { Serial.printf("count1 %x\n",sector); while(1); }
    701e:	movs	r3, #1
    7020:	mov	r2, r6
    7022:	mov	r1, r7
    7024:	ldrb	r0, [r4, #28]
      cnt++;      
    7026:	adds	r5, #1
    while(1)
    {
      BYTE* buff = (BYTE *) &hdr;
      UINT count = 1;
      
      if(DRESULT res = disk_read (pdrv, buff, sector, count)) { Serial.printf("count1 %x\n",sector); while(1); }
    7028:	bl	71ac <disk_read>
    702c:	cmp	r0, #0
    702e:	beq.n	7010 <zeroFS_class::Count(unsigned long)+0x70>
    7030:	mov	r2, r6
    7032:	ldr	r1, [pc, #32]	; (7054 <zeroFS_class::Count(unsigned long)+0xb4>)
    7034:	ldr	r0, [pc, #32]	; (7058 <zeroFS_class::Count(unsigned long)+0xb8>)
    7036:	bl	a52c <Print::printf(char const*, ...)>
    703a:	b.n	703a <zeroFS_class::Count(unsigned long)+0x9a>
    while(1)
    {
      BYTE* buff = (BYTE *) &hdr;
      UINT count = 1;
      
      if(DRESULT res = disk_read (pdrv, buff, sector, count)) { Serial.printf("count2 %x\n",sector); while(1); }
    703c:	mov	r2, r5
    703e:	ldr	r1, [pc, #28]	; (705c <zeroFS_class::Count(unsigned long)+0xbc>)
    7040:	ldr	r0, [pc, #20]	; (7058 <zeroFS_class::Count(unsigned long)+0xb8>)
    7042:	bl	a52c <Print::printf(char const*, ...)>
    7046:	b.n	7046 <zeroFS_class::Count(unsigned long)+0xa6>
      cnt++;      
      sector = hdr.next;
      if(sector==eof_sector) break; // end of data reached
      if(sector==0xFFFFFFFFUL) break; // end of list
    }
    read_sector=root_sector;
    7048:	ldr	r3, [r4, #0]
    {
      BYTE* buff = (BYTE *) &hdr;
      UINT count = 1;
      
      if(DRESULT res = disk_read (pdrv, buff, sector, count)) { Serial.printf("count1 %x\n",sector); while(1); }
      cnt++;      
    704a:	mov	r0, r5
      sector = hdr.next;
      if(sector==eof_sector) break; // end of data reached
      if(sector==0xFFFFFFFFUL) break; // end of list
    }
    read_sector=root_sector;
    704c:	str	r3, [r4, #12]
    return cnt;
    704e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7052:	nop
    7054:	.word	0x200002bc
    7058:	.word	0x20000b20
    705c:	.word	0x200002c8

00007060 <zeroFS_class::Next()>:
    read_sector=parent+1; // reset read_sector to first object ater parent
    return cnt;
  }
}
uint32_t zeroFS_class::Next(void)
{
    7060:	push	{r3, r4, r5, lr}
  //uint32_t old_type=0;
  uint32_t sector = read_sector;
    7062:	ldr	r5, [r0, #12]
  HDR_TYPE type=T_ROOT;

  if(sector==eof_sector) return 0;
  if(sector==0xFFFFFFFFUL) return 0;
    7064:	ldr	r3, [r0, #16]
    7066:	cmp	r3, r5
    7068:	beq.n	7092 <zeroFS_class::Next()+0x32>
    706a:	adds	r3, r5, #1
    706c:	beq.n	7092 <zeroFS_class::Next()+0x32>
    706e:	mov	r4, r0

  BYTE* buff = (BYTE *) &hdr;
  UINT count = 1;
  
  if(DRESULT res = disk_read (pdrv, buff, sector, count)) { Serial.printf("next %x\n",sector); while(1); }
    7070:	movw	r1, #8304	; 0x2070
    7074:	movs	r3, #1
    7076:	mov	r2, r5
    7078:	ldrb	r0, [r0, #28]
    707a:	add	r1, r4
    707c:	bl	71ac <disk_read>
    7080:	cbnz	r0, 7096 <zeroFS_class::Next()+0x36>
  if(type==0) 
    type=(HDR_TYPE) hdr.type;
  else if((HDR_TYPE) hdr.type != type) 
    return 0; 

  read_sector= hdr.next;
    7082:	add.w	r3, r4, #8320	; 0x2080
  return hdr.sect;
    7086:	movw	r2, #8312	; 0x2078
  if(type==0) 
    type=(HDR_TYPE) hdr.type;
  else if((HDR_TYPE) hdr.type != type) 
    return 0; 

  read_sector= hdr.next;
    708a:	ldr	r3, [r3, #0]
  return hdr.sect;
    708c:	ldr	r0, [r4, r2]
  if(type==0) 
    type=(HDR_TYPE) hdr.type;
  else if((HDR_TYPE) hdr.type != type) 
    return 0; 

  read_sector= hdr.next;
    708e:	str	r3, [r4, #12]
  return hdr.sect;
    7090:	pop	{r3, r4, r5, pc}
  //uint32_t old_type=0;
  uint32_t sector = read_sector;
  HDR_TYPE type=T_ROOT;

  if(sector==eof_sector) return 0;
  if(sector==0xFFFFFFFFUL) return 0;
    7092:	movs	r0, #0
  else if((HDR_TYPE) hdr.type != type) 
    return 0; 

  read_sector= hdr.next;
  return hdr.sect;
}
    7094:	pop	{r3, r4, r5, pc}
  if(sector==0xFFFFFFFFUL) return 0;

  BYTE* buff = (BYTE *) &hdr;
  UINT count = 1;
  
  if(DRESULT res = disk_read (pdrv, buff, sector, count)) { Serial.printf("next %x\n",sector); while(1); }
    7096:	mov	r2, r5
    7098:	ldr	r1, [pc, #8]	; (70a4 <zeroFS_class::Next()+0x44>)
    709a:	ldr	r0, [pc, #12]	; (70a8 <zeroFS_class::Next()+0x48>)
    709c:	bl	a52c <Print::printf(char const*, ...)>
    70a0:	b.n	70a0 <zeroFS_class::Next()+0x40>
    70a2:	nop
    70a4:	.word	0x200002d4
    70a8:	.word	0x20000b20

000070ac <zeroFS_class::Info(unsigned long, char*, unsigned long*, unsigned long*)>:
  read_sector= hdr.next;
  return hdr.sect;
}

uint32_t zeroFS_class::Info(uint32_t handle, char *filename, uint32_t *size, uint32_t *parent)
{
    70ac:	push	{r4, r5, r6, lr}
  //uint32_t old_type=0;
  uint32_t sector = handle;
  if(sector==eof_sector) return 0;
    70ae:	ldr	r4, [r0, #16]
    70b0:	cmp	r1, r4
    70b2:	beq.n	70fa <zeroFS_class::Info(unsigned long, char*, unsigned long*, unsigned long*)+0x4e>
    70b4:	mov	r4, r0
    70b6:	mov	r5, r2
    70b8:	mov	r2, r1

    BYTE* buff = (BYTE *) &hdr;
    UINT count = 1;

    if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read5",res);
    70ba:	movw	r1, #8304	; 0x2070
    70be:	mov	r6, r3
    70c0:	ldrb	r0, [r0, #28]
    70c2:	movs	r3, #1
    70c4:	add	r1, r4
    70c6:	bl	71ac <disk_read>
    70ca:	cbnz	r0, 7112 <zeroFS_class::Info(unsigned long, char*, unsigned long*, unsigned long*)+0x66>

    strcpy(filename,hdr.name);
    70cc:	movw	r1, #8344	; 0x2098
    70d0:	mov	r0, r5
    70d2:	add	r1, r4
    70d4:	bl	c120 <strcpy>
    if(hdr.type==T_FILE)
    70d8:	movw	r3, #8308	; 0x2074
    70dc:	ldr	r3, [r4, r3]
    70de:	cmp	r3, #3
    70e0:	beq.n	70fe <zeroFS_class::Info(unsigned long, char*, unsigned long*, unsigned long*)+0x52>
    {
      *size=512*(hdr.next-hdr.sect);
    }
    else
    {
      *size=0xFFFFFFFFul;
    70e2:	mov.w	r3, #4294967295
    70e6:	str	r3, [r6, #0]
    }
    *parent=hdr.parent;
    70e8:	movw	r2, #8324	; 0x2084
    return hdr.sect;
    70ec:	movw	r3, #8312	; 0x2078
    }
    else
    {
      *size=0xFFFFFFFFul;
    }
    *parent=hdr.parent;
    70f0:	ldr	r1, [sp, #16]
    70f2:	ldr	r2, [r4, r2]
    70f4:	str	r2, [r1, #0]
    return hdr.sect;
    70f6:	ldr	r0, [r4, r3]
    70f8:	pop	{r4, r5, r6, pc}

uint32_t zeroFS_class::Info(uint32_t handle, char *filename, uint32_t *size, uint32_t *parent)
{
  //uint32_t old_type=0;
  uint32_t sector = handle;
  if(sector==eof_sector) return 0;
    70fa:	movs	r0, #0
    {
      *size=0xFFFFFFFFul;
    }
    *parent=hdr.parent;
    return hdr.sect;
}
    70fc:	pop	{r4, r5, r6, pc}
    if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read5",res);

    strcpy(filename,hdr.name);
    if(hdr.type==T_FILE)
    {
      *size=512*(hdr.next-hdr.sect);
    70fe:	add.w	r3, r4, #8320	; 0x2080
    7102:	movw	r2, #8312	; 0x2078
    7106:	ldr	r3, [r3, #0]
    7108:	ldr	r2, [r4, r2]
    710a:	subs	r3, r3, r2
    710c:	lsls	r3, r3, #9
    710e:	str	r3, [r6, #0]
    7110:	b.n	70e8 <zeroFS_class::Info(unsigned long, char*, unsigned long*, unsigned long*)+0x3c>
  if(sector==eof_sector) return 0;

    BYTE* buff = (BYTE *) &hdr;
    UINT count = 1;

    if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read5",res);
    7112:	mov	r1, r0
    7114:	ldr	r0, [pc, #4]	; (711c <zeroFS_class::Info(unsigned long, char*, unsigned long*, unsigned long*)+0x70>)
    7116:	bl	69dc <die(char const*, DRESULT)>
    711a:	nop
    711c:	.word	0x20000284

00007120 <zeroFS_class::GetSize(unsigned long)>:
    *parent=hdr.parent;
    return hdr.sect;
}

  uint32_t zeroFS_class::GetSize(uint32_t handle) 
  {
    7120:	push	{r4, lr}
    BYTE* buff = (BYTE *) &hdr;
    uint32_t sector=handle;
    UINT count = 1;
    if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read6",res);
    7122:	mov	r2, r1
    *parent=hdr.parent;
    return hdr.sect;
}

  uint32_t zeroFS_class::GetSize(uint32_t handle) 
  {
    7124:	mov	r4, r0
    BYTE* buff = (BYTE *) &hdr;
    uint32_t sector=handle;
    UINT count = 1;
    if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read6",res);
    7126:	movw	r1, #8304	; 0x2070
    712a:	movs	r3, #1
    712c:	ldrb	r0, [r0, #28]
    712e:	add	r1, r4
    7130:	bl	71ac <disk_read>
    7134:	cbnz	r0, 7148 <zeroFS_class::GetSize(unsigned long)+0x28>

    return 512*(hdr.next-hdr.sect);
    7136:	add.w	r3, r4, #8320	; 0x2080
    713a:	movw	r2, #8312	; 0x2078
    713e:	ldr	r3, [r3, #0]
    7140:	ldr	r0, [r4, r2]
    7142:	subs	r0, r3, r0
  }
    7144:	lsls	r0, r0, #9
    7146:	pop	{r4, pc}
  uint32_t zeroFS_class::GetSize(uint32_t handle) 
  {
    BYTE* buff = (BYTE *) &hdr;
    uint32_t sector=handle;
    UINT count = 1;
    if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read6",res);
    7148:	mov	r1, r0
    714a:	ldr	r0, [pc, #4]	; (7150 <zeroFS_class::GetSize(unsigned long)+0x30>)
    714c:	bl	69dc <die(char const*, DRESULT)>
    7150:	.word	0x2000028c

00007154 <zeroFS_class::Read(unsigned long, char*, unsigned long)>:
    // keep sector number for next call
    old_sector=sector;
  }

  uint32_t zeroFS_class::Read(uint32_t sector, char* out, uint32_t count) 
  { if(DRESULT res = disk_read (pdrv, (BYTE*)out, sector, count)) die("read_",res);
    7154:	push	{r3, r4, r5, lr}
    7156:	mov	r4, r1
    7158:	ldrb	r0, [r0, #28]
    715a:	mov	r1, r2
    715c:	mov	r5, r3
    715e:	mov	r2, r4
    7160:	bl	71ac <disk_read>
    7164:	cbnz	r0, 716a <zeroFS_class::Read(unsigned long, char*, unsigned long)+0x16>
    return sector+count;
    7166:	adds	r0, r4, r5
    7168:	pop	{r3, r4, r5, pc}
    // keep sector number for next call
    old_sector=sector;
  }

  uint32_t zeroFS_class::Read(uint32_t sector, char* out, uint32_t count) 
  { if(DRESULT res = disk_read (pdrv, (BYTE*)out, sector, count)) die("read_",res);
    716a:	mov	r1, r0
    716c:	ldr	r0, [pc, #4]	; (7174 <zeroFS_class::Read(unsigned long, char*, unsigned long)+0x20>)
    716e:	bl	69dc <die(char const*, DRESULT)>
    7172:	nop
    7174:	.word	0x200002e0

00007178 <disk_initialize>:
)
{
	DSTATUS stat=STA_NOINIT;
	int result;

	switch (pdrv) {
    7178:	cmp	r0, #1
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
    717a:	push	{r3, lr}
	DSTATUS stat=STA_NOINIT;
	int result;

	switch (pdrv) {
    717c:	beq.n	719e <disk_initialize+0x26>
    717e:	bcc.n	7192 <disk_initialize+0x1a>
    7180:	cmp	r0, #2
    7182:	bne.n	718e <disk_initialize+0x16>
		if(result==RES_OK) stat=0; else stat=STA_NODISK;

		return stat;

	case DEV_MSC :
		result = MSC_disk_initialize();
    7184:	bl	855c <MSC_disk_initialize>

		// translate the reslut code here
		if(result==RES_OK) stat=0; else stat=STA_NODISK;
    7188:	cbz	r0, 719a <disk_initialize+0x22>
	switch (pdrv) {
	case DEV_SPI :

		result = SPI_disk_initialize();
		// translate the reslut code here
		if(result==RES_OK) stat=0; else stat=STA_NODISK;
    718a:	movs	r0, #2
    718c:	pop	{r3, pc}
		// translate the reslut code here
		if(result==RES_OK) stat=0; else stat=STA_NODISK;

		return stat;
	}
	return STA_NOINIT;
    718e:	movs	r0, #1
}
    7190:	pop	{r3, pc}
	int result;

	switch (pdrv) {
	case DEV_SPI :

		result = SPI_disk_initialize();
    7192:	bl	854c <SPI_disk_initialize()>
		// translate the reslut code here
		if(result==RES_OK) stat=0; else stat=STA_NODISK;
    7196:	cmp	r0, #0
    7198:	bne.n	718a <disk_initialize+0x12>
    719a:	movs	r0, #0
    719c:	pop	{r3, pc}

		return stat;

	case DEV_SDHC :
		result = SDHC_disk_initialize();
    719e:	bl	77d4 <SDHC_disk_initialize>

		// translate the reslut code here
		if(result==RES_OK) stat=0; else stat=STA_NODISK;
    71a2:	cmp	r0, #0
    71a4:	beq.n	719a <disk_initialize+0x22>
	switch (pdrv) {
	case DEV_SPI :

		result = SPI_disk_initialize();
		// translate the reslut code here
		if(result==RES_OK) stat=0; else stat=STA_NODISK;
    71a6:	movs	r0, #2
    71a8:	pop	{r3, pc}
    71aa:	nop

000071ac <disk_read>:
	UINT count		/* Number of sectors to read */
)
{
	DRESULT res=RES_OK;
	int result=0;
	switch (pdrv) {
    71ac:	cmp	r0, #1
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	/* Start sector in LBA */
	UINT count		/* Number of sectors to read */
)
{
    71ae:	push	{r4, lr}
    71b0:	mov	r4, r1
    71b2:	mov	r1, r2
	DRESULT res=RES_OK;
	int result=0;
	switch (pdrv) {
    71b4:	beq.n	71de <disk_read+0x32>
    71b6:	bcc.n	71ce <disk_read+0x22>
    71b8:	cmp	r0, #2
    71ba:	bne.n	71ca <disk_read+0x1e>
		return res;

	case DEV_MSC :
		// translate the arguments here

		result = MSC_disk_read(buff, sector, count);
    71bc:	mov	r2, r3
    71be:	mov	r0, r4
    71c0:	bl	8560 <MSC_disk_read>
		// translate the reslut code here
		if(result==0) res=RES_OK; else res=RES_READERROR;
    71c4:	cbz	r0, 71da <disk_read+0x2e>
	switch (pdrv) {
	case DEV_SPI :
  
		result = SPI_disk_read(buff, sector, count);
		// translate the reslut code here
 	    if(result==0) res=RES_OK; else res=RES_READERROR;
    71c6:	movs	r0, #6
    71c8:	pop	{r4, pc}

		return res;

	}

	return RES_PARERR;
    71ca:	movs	r0, #4
}
    71cc:	pop	{r4, pc}
	DRESULT res=RES_OK;
	int result=0;
	switch (pdrv) {
	case DEV_SPI :
  
		result = SPI_disk_read(buff, sector, count);
    71ce:	mov	r2, r3
    71d0:	mov	r0, r4
    71d2:	bl	80bc <SPI_disk_read(unsigned char*, unsigned long, unsigned int)>
		// translate the reslut code here
 	    if(result==0) res=RES_OK; else res=RES_READERROR;
    71d6:	cmp	r0, #0
    71d8:	bne.n	71c6 <disk_read+0x1a>
    71da:	movs	r0, #0
    71dc:	pop	{r4, pc}
		return res;

	case DEV_SDHC :
		// translate the arguments here

		result = SDHC_disk_read(buff, sector, count);
    71de:	mov	r2, r3
    71e0:	mov	r0, r4
    71e2:	bl	78ec <SDHC_disk_read>
		// translate the reslut code here
		if(result==0) res=RES_OK; else res=RES_READERROR;
    71e6:	cmp	r0, #0
    71e8:	beq.n	71da <disk_read+0x2e>
	switch (pdrv) {
	case DEV_SPI :
  
		result = SPI_disk_read(buff, sector, count);
		// translate the reslut code here
 	    if(result==0) res=RES_OK; else res=RES_READERROR;
    71ea:	movs	r0, #6
    71ec:	pop	{r4, pc}
    71ee:	nop

000071f0 <disk_write>:
)
{
	DRESULT res=RES_OK;
	int result;

	switch (pdrv) {
    71f0:	cmp	r0, #1
	BYTE pdrv,			/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Start sector in LBA */
	UINT count			/* Number of sectors to write */
)
{
    71f2:	push	{r4, lr}
    71f4:	mov	r4, r1
    71f6:	mov	r1, r2
	DRESULT res=RES_OK;
	int result;

	switch (pdrv) {
    71f8:	beq.n	7222 <disk_write+0x32>
    71fa:	bcc.n	7212 <disk_write+0x22>
    71fc:	cmp	r0, #2
    71fe:	bne.n	720e <disk_write+0x1e>
		return res;

	case DEV_MSC :
		// translate the arguments here

		result = MSC_disk_write(buff, sector, count);
    7200:	mov	r2, r3
    7202:	mov	r0, r4
    7204:	bl	8564 <MSC_disk_write>
		// translate the reslut code here
		if(result==0) res=RES_OK; else res=RES_WRITEERROR;
    7208:	cbz	r0, 721e <disk_write+0x2e>
	case DEV_SPI :
		// translate the arguments here

		result = SPI_disk_write(buff, sector, count);
		// translate the reslut code here
		if(result==0) res=RES_OK; else res=RES_WRITEERROR;
    720a:	movs	r0, #7
    720c:	pop	{r4, pc}
		if(result==0) res=RES_OK; else res=RES_WRITEERROR;

		return res;
	}

	return RES_PARERR;
    720e:	movs	r0, #4
}
    7210:	pop	{r4, pc}

	switch (pdrv) {
	case DEV_SPI :
		// translate the arguments here

		result = SPI_disk_write(buff, sector, count);
    7212:	mov	r2, r3
    7214:	mov	r0, r4
    7216:	bl	8364 <SPI_disk_write(unsigned char const*, unsigned long, unsigned int)>
		// translate the reslut code here
		if(result==0) res=RES_OK; else res=RES_WRITEERROR;
    721a:	cmp	r0, #0
    721c:	bne.n	720a <disk_write+0x1a>
    721e:	movs	r0, #0
    7220:	pop	{r4, pc}
		return res;

	case DEV_SDHC :
		// translate the arguments here

		result = SDHC_disk_write(buff, sector, count);
    7222:	mov	r2, r3
    7224:	mov	r0, r4
    7226:	bl	7a60 <SDHC_disk_write>
		// translate the reslut code here
		if(result==0) res=RES_OK; else res=RES_WRITEERROR;
    722a:	cmp	r0, #0
    722c:	beq.n	721e <disk_write+0x2e>
	case DEV_SPI :
		// translate the arguments here

		result = SPI_disk_write(buff, sector, count);
		// translate the reslut code here
		if(result==0) res=RES_OK; else res=RES_WRITEERROR;
    722e:	movs	r0, #7
    7230:	pop	{r4, pc}
    7232:	nop

00007234 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
//	DRESULT res=RES_OK;

	switch (pdrv) {
    7234:	cmp	r0, #1
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    7236:	mov	r3, r1
//	DRESULT res=RES_OK;

	switch (pdrv) {
    7238:	beq.n	7240 <disk_ioctl+0xc>
    723a:	bcc.n	724c <disk_ioctl+0x18>
    723c:	cmp	r0, #2
    723e:	bne.n	7248 <disk_ioctl+0x14>
		// Process of the command for the SDHC device

//		return res;

	case DEV_MSC :
		return SDHC_disk_ioctl(cmd,(BYTE*)buff);
    7240:	mov	r1, r2
    7242:	mov	r0, r3
    7244:	b.w	7414 <SDHC_disk_ioctl>
//		return res;

		}

	return RES_PARERR;
}
    7248:	movs	r0, #4
    724a:	bx	lr
{
//	DRESULT res=RES_OK;

	switch (pdrv) {
	case DEV_SPI :
		return SPI_disk_ioctl(cmd,(BYTE*)buff);
    724c:	mov	r1, r2
    724e:	mov	r0, r3
    7250:	b.w	7b14 <SPI_disk_ioctl(unsigned char, unsigned char*)>

00007254 <setSdclk(unsigned long)>:
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = 6; //CCM_CLKO2 (0 is USDHC1_DAT3)
  }
  
  static uint32_t sdClock()
  {
    uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    7254:	ldr	r2, [pc, #152]	; (72f0 <setSdclk(unsigned long)+0x9c>)
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000 * kHzMax;
    7256:	mov.w	r1, #1000	; 0x3e8
  }
  
  static uint32_t sdClock()
  {
    uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    uint32_t PLL2PFD0 = (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    725a:	ldr	r3, [pc, #152]	; (72f4 <setSdclk(unsigned long)+0xa0>)
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = 6; //CCM_CLKO2 (0 is USDHC1_DAT3)
  }
  
  static uint32_t sdClock()
  {
    uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    725c:	ldr	r2, [r2, #36]	; 0x24
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000 * kHzMax;
    725e:	mul.w	r0, r1, r0
  }
  
  static uint32_t sdClock()
  {
    uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    uint32_t PLL2PFD0 = (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    7262:	ldr.w	r3, [r3, #256]	; 0x100
    7266:	ldr	r1, [pc, #144]	; (72f8 <setSdclk(unsigned long)+0xa4>)
    7268:	and.w	r3, r3, #63	; 0x3f
    726c:	umull	r1, r3, r1, r3
    return PLL2PFD0;
  }

#endif

static void setSdclk(uint32_t kHzMax) {
    7270:	push	{r4, r5, r6, r7}
  }
  
  static uint32_t sdClock()
  {
    uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    uint32_t PLL2PFD0 = (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
    7272:	lsrs	r3, r3, #2
    7274:	ubfx	r4, r2, #11, #3
    7278:	ldr	r2, [pc, #128]	; (72fc <setSdclk(unsigned long)+0xa8>)
    727a:	adds	r4, #1
    727c:	udiv	r3, r2, r3
    7280:	udiv	r4, r3, r4
  uint32_t maxSdclk = 1000 * kHzMax;

  //  uint32_t f_pll = F_CPU;
  uint32_t f_pll = sdClock();

  while ((f_pll / (sdclkfs * DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    7284:	cmp.w	r0, r4, lsr #4
    7288:	bcs.n	72e6 <setSdclk(unsigned long)+0x92>
    728a:	movs	r3, #1
    728c:	b.n	7292 <setSdclk(unsigned long)+0x3e>
    728e:	cmp	r3, #255	; 0xff
    7290:	bhi.n	729e <setSdclk(unsigned long)+0x4a>
    sdclkfs <<= 1;
    7292:	lsls	r3, r3, #1
  uint32_t maxSdclk = 1000 * kHzMax;

  //  uint32_t f_pll = F_CPU;
  uint32_t f_pll = sdClock();

  while ((f_pll / (sdclkfs * DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    7294:	lsls	r2, r3, #4
    7296:	udiv	r2, r4, r2
    729a:	cmp	r0, r2
    729c:	bcc.n	728e <setSdclk(unsigned long)+0x3a>
    729e:	lsrs	r2, r3, #1
    72a0:	lsls	r7, r2, #8
    sdclkfs <<= 1;
  }
  while ((f_pll / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    72a2:	udiv	r2, r4, r3
    72a6:	cmp	r0, r2
    72a8:	bcs.n	72ec <setSdclk(unsigned long)+0x98>
    72aa:	lsls	r1, r3, #1
    72ac:	movs	r2, #1
    dvs++;
    72ae:	adds	r6, r2, #1
  uint32_t f_pll = sdClock();

  while ((f_pll / (sdclkfs * DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((f_pll / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    72b0:	udiv	r5, r4, r1
    72b4:	cmp	r0, r5
    72b6:	add	r1, r3
    72b8:	bcs.n	72e2 <setSdclk(unsigned long)+0x8e>
    72ba:	cmp	r6, #16
    72bc:	mov	r2, r6
    72be:	bne.n	72ae <setSdclk(unsigned long)+0x5a>
    72c0:	movs	r3, #240	; 0xf0
    // Disable SDHC clock.
    SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
  #endif

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    72c2:	ldr	r4, [pc, #60]	; (7300 <setSdclk(unsigned long)+0xac>)
                                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    72c4:	ldr	r0, [pc, #60]	; (7304 <setSdclk(unsigned long)+0xb0>)
    // Disable SDHC clock.
    SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
  #endif

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    72c6:	ldr	r2, [r4, #44]	; 0x2c

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) { }
    72c8:	mov	r1, r4
  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
                                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    72ca:	ands	r0, r2
    72cc:	orr.w	r0, r0, #917504	; 0xe0000
    72d0:	orr.w	r2, r0, r7
    72d4:	orrs	r2, r3
    72d6:	str	r2, [r4, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) { }
    72d8:	ldr	r3, [r1, #36]	; 0x24
    72da:	lsls	r3, r3, #28
    72dc:	bpl.n	72d8 <setSdclk(unsigned long)+0x84>

  #if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    // Enable the SDHC clock.
    SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
  #endif
}
    72de:	pop	{r4, r5, r6, r7}
    72e0:	bx	lr
    72e2:	lsls	r3, r2, #4
    72e4:	b.n	72c2 <setSdclk(unsigned long)+0x6e>
  uint32_t maxSdclk = 1000 * kHzMax;

  //  uint32_t f_pll = F_CPU;
  uint32_t f_pll = sdClock();

  while ((f_pll / (sdclkfs * DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    72e6:	movs	r7, #0

static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
    72e8:	movs	r3, #1
    72ea:	b.n	72a2 <setSdclk(unsigned long)+0x4e>
  uint32_t f_pll = sdClock();

  while ((f_pll / (sdclkfs * DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((f_pll / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    72ec:	movs	r3, #0
    72ee:	b.n	72c2 <setSdclk(unsigned long)+0x6e>
    72f0:	.word	0x400fc000
    72f4:	.word	0x400d8000
    72f8:	.word	0xaaaaaaab
    72fc:	.word	0x5e69ec00
    7300:	.word	0x402c0000
    7304:	.word	0xfff0000f

00007308 <sd_isr()>:

static volatile uint32_t dmaDone=0;
//

void sd_isr(void)
{ SDHC_IRQSIGEN &= ~SDHC_IRQSIGEN_DMA_MASK;
    7308:	ldr	r3, [pc, #64]	; (734c <sd_isr()+0x44>)
    730a:	ldr	r2, [pc, #68]	; (7350 <sd_isr()+0x48>)
    730c:	ldr	r0, [r3, #56]	; 0x38
  //
  while(!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC));//  SDHC_IRQSTAT &= ~SDHC_IRQSTAT_TC;
    730e:	mov	r1, r3

static volatile uint32_t dmaDone=0;
//

void sd_isr(void)
{ SDHC_IRQSIGEN &= ~SDHC_IRQSIGEN_DMA_MASK;
    7310:	ands	r2, r0
    7312:	str	r2, [r3, #56]	; 0x38
  //
  while(!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC));//  SDHC_IRQSTAT &= ~SDHC_IRQSTAT_TC;
    7314:	ldr	r3, [r1, #48]	; 0x30
    7316:	ldr	r2, [pc, #52]	; (734c <sd_isr()+0x44>)
    7318:	lsls	r0, r3, #30
    731a:	bpl.n	7314 <sd_isr()+0xc>

  #if defined(__IMXRT1052__) || defined(__IMXRT1062__)
    SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN) ;  
    731c:	ldr	r3, [r2, #72]	; 0x48
    731e:	bic.w	r3, r3, #129	; 0x81
    7322:	str	r3, [r2, #72]	; 0x48
  #endif
  
  if(SDHC_SYSCTL & SDHC_SYSCTL_HCKEN) SDHC_SYSCTL &=  ~SDHC_SYSCTL_HCKEN;
    7324:	ldr	r3, [r2, #44]	; 0x2c
    7326:	lsls	r3, r3, #30
    7328:	bpl.n	7332 <sd_isr()+0x2a>
    732a:	ldr	r3, [r2, #44]	; 0x2c
    732c:	bic.w	r3, r3, #2
    7330:	str	r3, [r2, #44]	; 0x2c
  SDHC_PROCTL &= ~SDHC_PROCTL_D3CD; SDHC_PROCTL |=  SDHC_PROCTL_D3CD;
    7332:	ldr	r3, [pc, #24]	; (734c <sd_isr()+0x44>)

  dmaDone=1;
    7334:	movs	r0, #1
    7336:	ldr	r1, [pc, #28]	; (7354 <sd_isr()+0x4c>)
  #if defined(__IMXRT1052__) || defined(__IMXRT1062__)
    SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN) ;  
  #endif
  
  if(SDHC_SYSCTL & SDHC_SYSCTL_HCKEN) SDHC_SYSCTL &=  ~SDHC_SYSCTL_HCKEN;
  SDHC_PROCTL &= ~SDHC_PROCTL_D3CD; SDHC_PROCTL |=  SDHC_PROCTL_D3CD;
    7338:	ldr	r2, [r3, #40]	; 0x28
    733a:	bic.w	r2, r2, #8
    733e:	str	r2, [r3, #40]	; 0x28
    7340:	ldr	r2, [r3, #40]	; 0x28
    7342:	orr.w	r2, r2, #8
    7346:	str	r2, [r3, #40]	; 0x28

  dmaDone=1;
    7348:	str	r0, [r1, #0]
    734a:	bx	lr
    734c:	.word	0x402c0000
    7350:	.word	0xeffffff5
    7354:	.word	0x2000e434

00007358 <sd_CMD(unsigned long, unsigned long)>:
/***************************** LOW Level SDHC interface ********************************/
// sends the command to SDcard
static int sd_CMD(uint32_t xfertyp, uint32_t arg)
{
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
    7358:	ldr	r3, [pc, #80]	; (73ac <sd_CMD(unsigned long, unsigned long)+0x54>)
}

/***************************** LOW Level SDHC interface ********************************/
// sends the command to SDcard
static int sd_CMD(uint32_t xfertyp, uint32_t arg)
{
    735a:	push	{r4, r5, r6}
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
    735c:	ldr	r4, [r3, #48]	; 0x30

  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB));
    735e:	mov	r2, r3
    7360:	mov	r6, r3
/***************************** LOW Level SDHC interface ********************************/
// sends the command to SDcard
static int sd_CMD(uint32_t xfertyp, uint32_t arg)
{
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
    7362:	orr.w	r4, r4, #128	; 0x80
    7366:	str	r4, [r3, #48]	; 0x30

  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB));
    7368:	ldr	r3, [r2, #36]	; 0x24
    736a:	ldr	r5, [pc, #64]	; (73ac <sd_CMD(unsigned long, unsigned long)+0x54>)
    736c:	lsls	r4, r3, #31
    736e:	bmi.n	7368 <sd_CMD(unsigned long, unsigned long)+0x10>
    7370:	ldr	r3, [r6, #36]	; 0x24
    7372:	lsls	r3, r3, #30
    7374:	bmi.n	7368 <sd_CMD(unsigned long, unsigned long)+0x10>

  // send command
  SDHC_CMDARG = arg;
    7376:	str	r1, [r5, #8]
static uint32_t sd_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
  do
  { result = SDHC_IRQSTAT & mask;
    7378:	mov	r4, r5
  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB));

  // send command
  SDHC_CMDARG = arg;
  SDHC_XFERTYP = xfertyp;
    737a:	str	r0, [r5, #12]
******************************************************************************/
// waits for status bits sets
static uint32_t sd_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
    737c:	mov.w	r2, #16777216	; 0x1000000
    7380:	b.n	7384 <sd_CMD(unsigned long, unsigned long)+0x2c>
  do
  { result = SDHC_IRQSTAT & mask;
    timeout--;
  } while (!result && (timeout));
    7382:	cbz	r2, 7396 <sd_CMD(unsigned long, unsigned long)+0x3e>
static uint32_t sd_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
  do
  { result = SDHC_IRQSTAT & mask;
    7384:	ldr	r1, [r4, #48]	; 0x30
    timeout--;
    7386:	subs	r2, #1
static uint32_t sd_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
  do
  { result = SDHC_IRQSTAT & mask;
    7388:	ldr	r3, [pc, #36]	; (73b0 <sd_CMD(unsigned long, unsigned long)+0x58>)
    738a:	ands	r3, r1
    timeout--;
  } while (!result && (timeout));
    738c:	cmp	r3, #0
    738e:	beq.n	7382 <sd_CMD(unsigned long, unsigned long)+0x2a>
  if (timeout) return result;
    7390:	cbz	r2, 7396 <sd_CMD(unsigned long, unsigned long)+0x3e>
  SDHC_CMDARG = arg;
  SDHC_XFERTYP = xfertyp;

  /* Wait for response */
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (sd_WaitStatus(mask) != SDHC_IRQSTAT_CC)
    7392:	cmp	r3, #1
    7394:	beq.n	73a6 <sd_CMD(unsigned long, unsigned long)+0x4e>
  { SDHC_IRQSTAT |= mask;
    7396:	ldr	r2, [pc, #20]	; (73ac <sd_CMD(unsigned long, unsigned long)+0x54>)
    return SDHC_RESULT_ERROR;
    7398:	movs	r0, #1
  SDHC_XFERTYP = xfertyp;

  /* Wait for response */
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (sd_WaitStatus(mask) != SDHC_IRQSTAT_CC)
  { SDHC_IRQSTAT |= mask;
    739a:	ldr	r3, [pc, #20]	; (73b0 <sd_CMD(unsigned long, unsigned long)+0x58>)
    739c:	ldr	r1, [r2, #48]	; 0x30
    739e:	orrs	r3, r1
    return SDHC_RESULT_NO_RESPONSE;
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;

  return SDHC_RESULT_OK;
}
    73a0:	pop	{r4, r5, r6}
  SDHC_XFERTYP = xfertyp;

  /* Wait for response */
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (sd_WaitStatus(mask) != SDHC_IRQSTAT_CC)
  { SDHC_IRQSTAT |= mask;
    73a2:	str	r3, [r2, #48]	; 0x30
    return SDHC_RESULT_NO_RESPONSE;
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;

  return SDHC_RESULT_OK;
}
    73a4:	bx	lr
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (sd_WaitStatus(mask) != SDHC_IRQSTAT_CC)
  { SDHC_IRQSTAT |= mask;
    return SDHC_RESULT_ERROR;
  }
  return SDHC_RESULT_OK;
    73a6:	movs	r0, #0
    return SDHC_RESULT_NO_RESPONSE;
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;

  return SDHC_RESULT_OK;
}
    73a8:	pop	{r4, r5, r6}
    73aa:	bx	lr
    73ac:	.word	0x402c0000
    73b0:	.word	0x000e0001

000073b4 <sd_ACMD(unsigned long, unsigned long, unsigned long)>:
// send CMD 55 Application specific command
#define SDHC_CMD55_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD55) | SDHC_XFERTYP_CICEN | \
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48))

static int sd_ACMD(uint32_t xfertyp, uint32_t arg1, uint32_t arg2)
{
    73b4:	push	{r3, r4, r5, lr}
    73b6:	mov	r4, r0
  int result =sd_CMD(SDHC_CMD55_XFERTYP,arg1);
    73b8:	ldr	r0, [pc, #20]	; (73d0 <sd_ACMD(unsigned long, unsigned long, unsigned long)+0x1c>)
// send CMD 55 Application specific command
#define SDHC_CMD55_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD55) | SDHC_XFERTYP_CICEN | \
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48))

static int sd_ACMD(uint32_t xfertyp, uint32_t arg1, uint32_t arg2)
{
    73ba:	mov	r5, r2
  int result =sd_CMD(SDHC_CMD55_XFERTYP,arg1);
    73bc:	bl	7358 <sd_CMD(unsigned long, unsigned long)>
  if(!(result == SDHC_RESULT_OK)) return result;
    73c0:	cbz	r0, 73c4 <sd_ACMD(unsigned long, unsigned long, unsigned long)+0x10>
  return sd_CMD(xfertyp,arg2);
}
    73c2:	pop	{r3, r4, r5, pc}

static int sd_ACMD(uint32_t xfertyp, uint32_t arg1, uint32_t arg2)
{
  int result =sd_CMD(SDHC_CMD55_XFERTYP,arg1);
  if(!(result == SDHC_RESULT_OK)) return result;
  return sd_CMD(xfertyp,arg2);
    73c4:	mov	r1, r5
    73c6:	mov	r0, r4
}
    73c8:	ldmia.w	sp!, {r3, r4, r5, lr}

static int sd_ACMD(uint32_t xfertyp, uint32_t arg1, uint32_t arg2)
{
  int result =sd_CMD(SDHC_CMD55_XFERTYP,arg1);
  if(!(result == SDHC_RESULT_OK)) return result;
  return sd_CMD(xfertyp,arg2);
    73cc:	b.w	7358 <sd_CMD(unsigned long, unsigned long)>
    73d0:	.word	0x371a0000

000073d4 <sd_CMD12_StopTransferWaitForBusy()>:
//
static int sd_CMD12_StopTransfer(void){  return sd_CMD(SDHC_CMD12_XFERTYP, 0);}

// ---------- sends CMD12 to stop transfer and first waits to ready SDCard
static int sd_CMD12_StopTransferWaitForBusy(void)
{
    73d4:	push	{r3, r4, r5, lr}

// ---------- sends CMD12 to stop transfer
#define SDHC_CMD12_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) | \
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY))
//
static int sd_CMD12_StopTransfer(void){  return sd_CMD(SDHC_CMD12_XFERTYP, 0);}
    73d6:	movs	r1, #0
    73d8:	ldr	r0, [pc, #48]	; (740c <sd_CMD12_StopTransferWaitForBusy()+0x38>)
    73da:	bl	7358 <sd_CMD(unsigned long, unsigned long)>
{
  uint32_t timeOut = 1000;
  int result;
  do 
  { result = sd_CMD12_StopTransfer();
    timeOut--;
    73de:	movw	r4, #999	; 0x3e7

// ---------- sends CMD12 to stop transfer
#define SDHC_CMD12_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) | \
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY))
//
static int sd_CMD12_StopTransfer(void){  return sd_CMD(SDHC_CMD12_XFERTYP, 0);}
    73e2:	mov	r3, r0
  uint32_t timeOut = 1000;
  int result;
  do 
  { result = sd_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    73e4:	ldr	r5, [pc, #40]	; (7410 <sd_CMD12_StopTransferWaitForBusy()+0x3c>)
    73e6:	b.n	73f4 <sd_CMD12_StopTransferWaitForBusy()+0x20>
    73e8:	cbnz	r3, 73fe <sd_CMD12_StopTransferWaitForBusy()+0x2a>

// ---------- sends CMD12 to stop transfer
#define SDHC_CMD12_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) | \
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY))
//
static int sd_CMD12_StopTransfer(void){  return sd_CMD(SDHC_CMD12_XFERTYP, 0);}
    73ea:	bl	7358 <sd_CMD(unsigned long, unsigned long)>
  uint32_t timeOut = 1000;
  int result;
  do 
  { result = sd_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    73ee:	subs	r4, #1

// ---------- sends CMD12 to stop transfer
#define SDHC_CMD12_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) | \
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY))
//
static int sd_CMD12_StopTransfer(void){  return sd_CMD(SDHC_CMD12_XFERTYP, 0);}
    73f0:	mov	r3, r0
  uint32_t timeOut = 1000;
  int result;
  do 
  { result = sd_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    73f2:	beq.n	7402 <sd_CMD12_StopTransferWaitForBusy()+0x2e>
    73f4:	ldr	r2, [r5, #36]	; 0x24

// ---------- sends CMD12 to stop transfer
#define SDHC_CMD12_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) | \
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY))
//
static int sd_CMD12_StopTransfer(void){  return sd_CMD(SDHC_CMD12_XFERTYP, 0);}
    73f6:	movs	r1, #0
    73f8:	ldr	r0, [pc, #16]	; (740c <sd_CMD12_StopTransferWaitForBusy()+0x38>)
  uint32_t timeOut = 1000;
  int result;
  do 
  { result = sd_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    73fa:	lsls	r2, r2, #29
    73fc:	bmi.n	73e8 <sd_CMD12_StopTransferWaitForBusy()+0x14>
  
  if (result != SDHC_RESULT_OK)  return result;
  if (!timeOut)  return SDHC_RESULT_NO_RESPONSE;

  return SDHC_RESULT_OK;
}
    73fe:	mov	r0, r3
    7400:	pop	{r3, r4, r5, pc}
  { result = sd_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
  
  if (result != SDHC_RESULT_OK)  return result;
  if (!timeOut)  return SDHC_RESULT_NO_RESPONSE;
    7402:	cmp	r0, #0
    7404:	it	eq
    7406:	moveq	r3, #5

  return SDHC_RESULT_OK;
}
    7408:	mov	r0, r3
    740a:	pop	{r3, r4, r5, pc}
    740c:	.word	0x0cdb0000
    7410:	.word	0x402c0000

00007414 <SDHC_disk_ioctl>:
{	return (DRESULT) sd_CardWriteBlocks((void *) buff, (uint32_t) sector, (uint32_t) count);
}

DRESULT SDHC_disk_ioctl(BYTE cmd, BYTE *buff)
{   return RES_OK;
}
    7414:	movs	r0, #0
    7416:	bx	lr

00007418 <sd_CardInit()>:
  }
  
  static void initClock()
  {
    /* set PDF_528 PLL2PFD0 */
    CCM_ANALOG_PFD_528 |= (1 << 7);
    7418:	ldr	r2, [pc, #408]	; (75b4 <sd_CardInit()+0x19c>)
    CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0); // 12 - 35
    CCM_ANALOG_PFD_528 &= ~(1 << 7);
  
    /* Enable USDHC clock. */
    CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    741a:	ldr	r3, [pc, #412]	; (75b8 <sd_CardInit()+0x1a0>)
  }
  
  static void initClock()
  {
    /* set PDF_528 PLL2PFD0 */
    CCM_ANALOG_PFD_528 |= (1 << 7);
    741c:	ldr.w	r0, [r2, #256]	; 0x100
    CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((7)); // &0x7
  
    // for testing
    CCM_CCOSR = CCM_CCOSR_CLKO1_EN | CCM_CCOSR_CLKO1_DIV(7) | CCM_CCOSR_CLKO1_SEL(1); //(1: SYS_PLL/2)
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 6; //CCM_CLKO1 (0 is USDHC1_DAT2)
    7420:	ldr	r1, [pc, #408]	; (75bc <sd_CardInit()+0x1a4>)
  }
  
  static void initClock()
  {
    /* set PDF_528 PLL2PFD0 */
    CCM_ANALOG_PFD_528 |= (1 << 7);
    7422:	orr.w	r0, r0, #128	; 0x80

//-----------------------------------------------------------------------------
// initialize the SDHC Controller and SD Card
// returns status of initialization(OK, nonInit, noCard, CardProtected)
uint8_t sd_CardInit(void)
{
    7426:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }
  
  static void initClock()
  {
    /* set PDF_528 PLL2PFD0 */
    CCM_ANALOG_PFD_528 |= (1 << 7);
    742a:	str.w	r0, [r2, #256]	; 0x100
    CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((7)); // &0x7
  
    // for testing
    CCM_CCOSR = CCM_CCOSR_CLKO1_EN | CCM_CCOSR_CLKO1_DIV(7) | CCM_CCOSR_CLKO1_SEL(1); //(1: SYS_PLL/2)
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 6; //CCM_CLKO1 (0 is USDHC1_DAT2)
    742e:	movs	r7, #6
  
  static void initClock()
  {
    /* set PDF_528 PLL2PFD0 */
    CCM_ANALOG_PFD_528 |= (1 << 7);
    CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    7430:	ldr.w	r5, [r2, #256]	; 0x100
    //  CCM_CSCMR1 &= ~(CCM_CSCMR1_USDHC1_CLK_SEL);     // PLL2PFD2
    CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((7)); // &0x7
  
    // for testing
    CCM_CCOSR = CCM_CCOSR_CLKO1_EN | CCM_CCOSR_CLKO1_DIV(7) | CCM_CCOSR_CLKO1_SEL(1); //(1: SYS_PLL/2)
    7434:	mov.w	lr, #241	; 0xf1
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 6; //CCM_CLKO1 (0 is USDHC1_DAT2)
    // for testing
    CCM_CCOSR |= (CCM_CCOSR_CLKO2_EN | CCM_CCOSR_CLKO2_DIV(7) | CCM_CCOSR_CLKO2_SEL(3)); //(3: usdhc1_clk_root))
    7438:	ldr	r6, [pc, #388]	; (75c0 <sd_CardInit()+0x1a8>)
    }
  }
  
  static void sd_ReleaseGPIO(void)
  {
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 5; //GPIO3_IO16
    743a:	movs	r4, #5
  
  static void initClock()
  {
    /* set PDF_528 PLL2PFD0 */
    CCM_ANALOG_PFD_528 |= (1 << 7);
    CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    743c:	bic.w	r5, r5, #63	; 0x3f
  initClock();

  // De-init GPIO - to prevent unwanted clocks on bus
  sd_ReleaseGPIO();
  #if defined (__IMXRT1052__) || defined (__IMXRT1062__)
    SDHC_SYSCTL   |= 0xF;
    7440:	ldr	r0, [pc, #384]	; (75c4 <sd_CardInit()+0x1ac>)
  
  static void initClock()
  {
    /* set PDF_528 PLL2PFD0 */
    CCM_ANALOG_PFD_528 |= (1 << 7);
    CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    7442:	str.w	r5, [r2, #256]	; 0x100
    CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0); // 12 - 35
    7446:	ldr.w	r5, [r2, #256]	; 0x100
    744a:	orr.w	r5, r5, #24
    744e:	str.w	r5, [r2, #256]	; 0x100
    CCM_ANALOG_PFD_528 &= ~(1 << 7);
    7452:	ldr.w	r5, [r2, #256]	; 0x100
    7456:	bic.w	r5, r5, #128	; 0x80
    745a:	str.w	r5, [r2, #256]	; 0x100
    SDHC_MIX_CTRL |= 0x80000000;
  #endif  

  /* Reset SDHC */
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) ; // wait
    745e:	mov	r2, r0
    CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0); // 12 - 35
    CCM_ANALOG_PFD_528 &= ~(1 << 7);
  
    /* Enable USDHC clock. */
    CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    7460:	ldr.w	r5, [r3, #128]	; 0x80
    7464:	orr.w	r5, r5, #12
    7468:	str.w	r5, [r3, #128]	; 0x80
    CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    746c:	ldr	r5, [r3, #36]	; 0x24
    746e:	bic.w	r5, r5, #14336	; 0x3800
    7472:	str	r5, [r3, #36]	; 0x24
    //
    //  CCM_CSCMR1 &= ~(CCM_CSCMR1_USDHC1_CLK_SEL);     // PLL2PFD2
    CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    7474:	ldr	r5, [r3, #28]
    7476:	orr.w	r5, r5, #65536	; 0x10000
    747a:	str	r5, [r3, #28]
    CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((7)); // &0x7
    747c:	ldr	r5, [r3, #36]	; 0x24
    747e:	orr.w	r5, r5, #14336	; 0x3800
    7482:	str	r5, [r3, #36]	; 0x24
  
    // for testing
    CCM_CCOSR = CCM_CCOSR_CLKO1_EN | CCM_CCOSR_CLKO1_DIV(7) | CCM_CCOSR_CLKO1_SEL(1); //(1: SYS_PLL/2)
    7484:	str.w	lr, [r3, #96]	; 0x60
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 6; //CCM_CLKO1 (0 is USDHC1_DAT2)
    7488:	str.w	r7, [r1, #460]	; 0x1cc
    // for testing
    CCM_CCOSR |= (CCM_CCOSR_CLKO2_EN | CCM_CCOSR_CLKO2_DIV(7) | CCM_CCOSR_CLKO2_SEL(3)); //(3: usdhc1_clk_root))
    748c:	ldr	r5, [r3, #96]	; 0x60
    748e:	orrs	r6, r5
    SDHC_SYSCTL   |= 0xF;
    SDHC_MIX_CTRL |= 0x80000000;
  #endif  

  /* Reset SDHC */
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    7490:	ldr	r5, [pc, #308]	; (75c8 <sd_CardInit()+0x1b0>)
  
    // for testing
    CCM_CCOSR = CCM_CCOSR_CLKO1_EN | CCM_CCOSR_CLKO1_DIV(7) | CCM_CCOSR_CLKO1_SEL(1); //(1: SYS_PLL/2)
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 6; //CCM_CLKO1 (0 is USDHC1_DAT2)
    // for testing
    CCM_CCOSR |= (CCM_CCOSR_CLKO2_EN | CCM_CCOSR_CLKO2_DIV(7) | CCM_CCOSR_CLKO2_SEL(3)); //(3: usdhc1_clk_root))
    7492:	str	r6, [r3, #96]	; 0x60
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = 6; //CCM_CLKO2 (0 is USDHC1_DAT3)
    7494:	str.w	r7, [r1, #464]	; 0x1d0
    }
  }
  
  static void sd_ReleaseGPIO(void)
  {
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 5; //GPIO3_IO16
    7498:	str.w	r4, [r1, #460]	; 0x1cc
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = 5; //GPIO3_IO17
    749c:	str.w	r4, [r1, #464]	; 0x1d0
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = 5; //GPIO3_IO12
    74a0:	str.w	r4, [r1, #444]	; 0x1bc
    //3.3V
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = 5; //GPIO3_IO13
    74a4:	str.w	r4, [r1, #448]	; 0x1c0
    //GND
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = 5; //GPIO3_IO14
    74a8:	str.w	r4, [r1, #452]	; 0x1c4
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = 5; //GPIO3_IO15
    74ac:	str.w	r4, [r1, #456]	; 0x1c8
  initClock();

  // De-init GPIO - to prevent unwanted clocks on bus
  sd_ReleaseGPIO();
  #if defined (__IMXRT1052__) || defined (__IMXRT1062__)
    SDHC_SYSCTL   |= 0xF;
    74b0:	ldr	r3, [r0, #44]	; 0x2c
    74b2:	orr.w	r3, r3, #15
    74b6:	str	r3, [r0, #44]	; 0x2c
    SDHC_MIX_CTRL |= 0x80000000;
    74b8:	ldr	r3, [r0, #72]	; 0x48
    74ba:	orr.w	r3, r3, #2147483648	; 0x80000000
    74be:	str	r3, [r0, #72]	; 0x48
  #endif  

  /* Reset SDHC */
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    74c0:	ldr	r3, [r0, #44]	; 0x2c
    74c2:	orrs	r5, r3
    74c4:	str	r5, [r0, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) ; // wait
    74c6:	ldr	r3, [r2, #44]	; 0x2c
    74c8:	lsls	r0, r3, #7
    74ca:	bmi.n	74c6 <sd_CardInit()+0xae>

  /* Set the SDHC initial baud rate divider and start */
  setSdclk(400);
    74cc:	mov.w	r0, #400	; 0x190
    74d0:	bl	7254 <setSdclk(unsigned long)>

  /* Poll inhibit bits */
  while (SDHC_PRSSTAT & (SDHC_PRSSTAT_CIHB | SDHC_PRSSTAT_CDIHB)) ;
    74d4:	ldr	r1, [pc, #236]	; (75c4 <sd_CardInit()+0x1ac>)
    74d6:	ldr	r3, [r1, #36]	; 0x24
    74d8:	ldr	r2, [pc, #232]	; (75c4 <sd_CardInit()+0x1ac>)
    74da:	ands.w	r3, r3, #3
    74de:	bne.n	74d6 <sd_CardInit()+0xbe>
#else

  static void sd_InitGPIO(void)
  {
    { //T4                              // Inverted pins(T4)
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 0; //DAT2  
    74e0:	ldr	r1, [pc, #216]	; (75bc <sd_CardInit()+0x1a4>)
                                  IOMUXC_SW_PAD_CTL_PAD_SPEED(2);
  
      const uint32_t DATA_MASK = CLOCK_MASK |
                                 (IOMUXC_SW_PAD_CTL_PAD_PUE | IOMUXC_SW_PAD_CTL_PAD_PUS(1));
  
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;
    74e2:	movw	r0, #28808	; 0x7088
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;
    74e6:	movw	r5, #4232	; 0x1088
  SDHC_PROCTL |=  SDHC_PROCTL_D3CD;
  // SDHC_PROCTL = SDHC_PROCTL_EMODE(SDHC_PROCTL_EMODE_INVARIANT) | SDHC_PROCTL_D3CD;
  //  SDHC_WML |= SDHC_WML_RDWML(SDHC_FIFO_BUFFER_SIZE) | SDHC_WML_WRWML(SDHC_FIFO_BUFFER_SIZE);

  #if defined(__IMXRT1052__) || defined (__IMXRT1062__)
    SDHC_VENDOR = 0x2000F801; // (1<<29 | 0x1F<<11 | 1);
    74ea:	ldr	r4, [pc, #224]	; (75cc <sd_CardInit()+0x1b4>)
#else

  static void sd_InitGPIO(void)
  {
    { //T4                              // Inverted pins(T4)
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 0; //DAT2  
    74ec:	str.w	r3, [r1, #460]	; 0x1cc
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = 0; //DAT3  
    74f0:	str.w	r3, [r1, #464]	; 0x1d0
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = 0; //CMD   
    74f4:	str.w	r3, [r1, #444]	; 0x1bc
      //3.3V                                           
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = 0; //CLK   
    74f8:	str.w	r3, [r1, #448]	; 0x1c0
      //GND                                           
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = 0; //DAT0 
    74fc:	str.w	r3, [r1, #452]	; 0x1c4
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = 0; //DAT1 
    7500:	str.w	r3, [r1, #456]	; 0x1c8
                                  IOMUXC_SW_PAD_CTL_PAD_SPEED(2);
  
      const uint32_t DATA_MASK = CLOCK_MASK |
                                 (IOMUXC_SW_PAD_CTL_PAD_PUE | IOMUXC_SW_PAD_CTL_PAD_PUS(1));
  
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;
    7504:	str.w	r0, [r1, #956]	; 0x3bc
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;
    7508:	str.w	r0, [r1, #960]	; 0x3c0
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;
    750c:	str.w	r0, [r1, #940]	; 0x3ac
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;
    7510:	str.w	r5, [r1, #944]	; 0x3b0
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;
    7514:	str.w	r0, [r1, #948]	; 0x3b4
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;
    7518:	str.w	r0, [r1, #952]	; 0x3b8
  sd_InitGPIO();

  /* Initial values */ // to do - Check values
//  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(512);
  
  SDHC_PROCTL &= ~SDHC_PROCTL_DMAS(3); // clear ADMA
    751c:	ldr	r3, [r2, #40]	; 0x28
    751e:	ldr	r0, [pc, #176]	; (75d0 <sd_CardInit()+0x1b8>)
    7520:	bic.w	r3, r3, #768	; 0x300
    7524:	ldr	r5, [pc, #172]	; (75d4 <sd_CardInit()+0x1bc>)
  // clear interrupt status
  SDHC_IRQSTAT = SDHC_IRQSTAT;

  /* Enable requests */
  SDHC_IRQSTATEN =  SDHC_IRQSTAT_CRM | SDHC_IRQSTATEN_CIESEN | 
                    SDHC_IRQSTATEN_TCSEN | SDHC_IRQSTATEN_CCSEN;
    7526:	ldr	r1, [pc, #176]	; (75d8 <sd_CardInit()+0x1c0>)
  sd_InitGPIO();

  /* Initial values */ // to do - Check values
//  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(512);
  
  SDHC_PROCTL &= ~SDHC_PROCTL_DMAS(3); // clear ADMA
    7528:	str	r3, [r2, #40]	; 0x28

  SDHC_PROCTL |=  SDHC_PROCTL_D3CD;
    752a:	ldr	r3, [r2, #40]	; 0x28
    752c:	str.w	r5, [r0, #504]	; 0x1f8
    7530:	orr.w	r3, r3, #8
    7534:	str	r3, [r2, #40]	; 0x28
  // SDHC_PROCTL = SDHC_PROCTL_EMODE(SDHC_PROCTL_EMODE_INVARIANT) | SDHC_PROCTL_D3CD;
  //  SDHC_WML |= SDHC_WML_RDWML(SDHC_FIFO_BUFFER_SIZE) | SDHC_WML_WRWML(SDHC_FIFO_BUFFER_SIZE);

  #if defined(__IMXRT1052__) || defined (__IMXRT1062__)
    SDHC_VENDOR = 0x2000F801; // (1<<29 | 0x1F<<11 | 1);
    7536:	str.w	r4, [r2, #192]	; 0xc0
    SDHC_VENDOR2 &= ~(1<<12); //switch off ACMD23 sharing SDMA
    753a:	ldr.w	r3, [r2, #200]	; 0xc8
    753e:	bic.w	r3, r3, #4096	; 0x1000
    7542:	str.w	r3, [r2, #200]	; 0xc8
  #endif
  
  // clear interrupt status
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    7546:	ldr	r3, [r2, #48]	; 0x30
    7548:	str	r3, [r2, #48]	; 0x30

  /* Enable requests */
  SDHC_IRQSTATEN =  SDHC_IRQSTAT_CRM | SDHC_IRQSTATEN_CIESEN | 
                    SDHC_IRQSTATEN_TCSEN | SDHC_IRQSTATEN_CCSEN;
    754a:	str	r1, [r2, #52]	; 0x34

  attachInterruptVector(IRQ_SDHC, sd_isr);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6 * 16);
    754c:	ldr	r0, [pc, #140]	; (75dc <sd_CardInit()+0x1c4>)
    754e:	movs	r4, #96	; 0x60
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    7550:	ldr	r3, [pc, #140]	; (75e0 <sd_CardInit()+0x1c8>)
    7552:	mov.w	r1, #16384	; 0x4000
    7556:	mov.w	r5, #500	; 0x1f4
  /* Enable requests */
  SDHC_IRQSTATEN =  SDHC_IRQSTAT_CRM | SDHC_IRQSTATEN_CIESEN | 
                    SDHC_IRQSTATEN_TCSEN | SDHC_IRQSTATEN_CCSEN;

  attachInterruptVector(IRQ_SDHC, sd_isr);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6 * 16);
    755a:	strb	r4, [r0, #0]
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    755c:	str	r1, [r3, #0]

  // initial clocks... SD spec says only 74 clocks are needed, but if Teensy rebooted
  // while the card was in middle of an operation, thousands of clock cycles can be
  // needed to get the card to complete a prior command and return to a usable state.
  for (int ii = 0; ii < 500; ii++) {
    SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    755e:	ldr	r3, [r2, #44]	; 0x2c
    7560:	orr.w	r3, r3, #134217728	; 0x8000000
    7564:	str	r3, [r2, #44]	; 0x2c
    while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) ;
    7566:	ldr	r3, [r2, #44]	; 0x2c
    7568:	ldr	r4, [pc, #88]	; (75c4 <sd_CardInit()+0x1ac>)
    756a:	lsls	r1, r3, #4
    756c:	bmi.n	7566 <sd_CardInit()+0x14e>
  NVIC_ENABLE_IRQ(IRQ_SDHC);

  // initial clocks... SD spec says only 74 clocks are needed, but if Teensy rebooted
  // while the card was in middle of an operation, thousands of clock cycles can be
  // needed to get the card to complete a prior command and return to a usable state.
  for (int ii = 0; ii < 500; ii++) {
    756e:	subs	r5, #1
    7570:	bne.n	755e <sd_CardInit()+0x146>
    SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) ;
  }

  if(!(SDHC_PRSSTAT & SDHC_PRSSTAT_CINS)) return SDHC_STATUS_NODISK;
    7572:	ldr	r3, [r4, #36]	; 0x24
    7574:	lsls	r2, r3, #15
    7576:	bmi.n	758c <sd_CardInit()+0x174>
  uint8_t resS;
  int resR;

  resS = sd_Init();

  sdCardDesc.status = resS;
    7578:	ldr	r3, [pc, #104]	; (75e4 <sd_CardInit()+0x1cc>)
    757a:	movs	r2, #2
  sdCardDesc.address = 0;
    757c:	str	r5, [r3, #4]
  for (int ii = 0; ii < 500; ii++) {
    SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) ;
  }

  if(!(SDHC_PRSSTAT & SDHC_PRSSTAT_CINS)) return SDHC_STATUS_NODISK;
    757e:	mov	r0, r2

  resS = sd_Init();

  sdCardDesc.status = resS;
  sdCardDesc.address = 0;
  sdCardDesc.highCapacity = 0;
    7580:	strb	r5, [r3, #1]
  sdCardDesc.version2 = 0;
    7582:	strb	r5, [r3, #2]
  sdCardDesc.numBlocks = 0;
    7584:	str	r5, [r3, #8]
  uint8_t resS;
  int resR;

  resS = sd_Init();

  sdCardDesc.status = resS;
    7586:	strb	r2, [r3, #0]
    7588:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    758c:	ldr	r6, [pc, #84]	; (75e4 <sd_CardInit()+0x1cc>)
    // mixCtrl |= SDHC_MIX_CTRL_BCEN; // does not hurt
    // mixCtrl |= SDHC_MIX_CTRL_DTDSEL; // write/read (will be set later
    // mixCtrl |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    // mixCtrl |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    // mixCtrl |= SDHC_MIX_CTRL_AC23EN;
    SDHC_MIX_CTRL = mixCtrl;
    758e:	mov.w	r3, #2147483648	; 0x80000000
 * Convenience interfaces
 */
// ---------- sends CMD0 to put SDCARD to idle
#define SDHC_CMD0_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD0) | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_NO))
//
static int sd_CMD0_GoToIdle(void){ return sd_CMD(SDHC_CMD0_XFERTYP,0); }
    7592:	mov	r1, r5
    7594:	mov	r0, r5
  uint8_t resS;
  int resR;

  resS = sd_Init();

  sdCardDesc.status = resS;
    7596:	strb	r5, [r6, #0]
  sdCardDesc.address = 0;
  sdCardDesc.highCapacity = 0;
    7598:	strb	r5, [r6, #1]
  sdCardDesc.version2 = 0;
    759a:	strb	r5, [r6, #2]
  sdCardDesc.numBlocks = 0;
  
  if (resS)  return resS;

  SDHC_IRQSIGEN = 0;
    759c:	str	r5, [r4, #56]	; 0x38
    // mixCtrl |= SDHC_MIX_CTRL_BCEN; // does not hurt
    // mixCtrl |= SDHC_MIX_CTRL_DTDSEL; // write/read (will be set later
    // mixCtrl |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    // mixCtrl |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    // mixCtrl |= SDHC_MIX_CTRL_AC23EN;
    SDHC_MIX_CTRL = mixCtrl;
    759e:	str	r3, [r4, #72]	; 0x48
  int resR;

  resS = sd_Init();

  sdCardDesc.status = resS;
  sdCardDesc.address = 0;
    75a0:	str	r5, [r6, #4]
  sdCardDesc.highCapacity = 0;
  sdCardDesc.version2 = 0;
  sdCardDesc.numBlocks = 0;
    75a2:	str	r5, [r6, #8]
 * Convenience interfaces
 */
// ---------- sends CMD0 to put SDCARD to idle
#define SDHC_CMD0_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD0) | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_NO))
//
static int sd_CMD0_GoToIdle(void){ return sd_CMD(SDHC_CMD0_XFERTYP,0); }
    75a4:	bl	7358 <sd_CMD(unsigned long, unsigned long)>
    SDHC_MIX_CTRL = mixCtrl;
  #endif

  resR = sd_CMD0_GoToIdle();

  if (resR) { return sdCardDesc.status = SDHC_STATUS_NOINIT;}
    75a8:	cbz	r0, 75e8 <sd_CardInit()+0x1d0>
    75aa:	movs	r0, #1
    75ac:	strb	r0, [r6, #0]
    75ae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    75b2:	nop
    75b4:	.word	0x400d8000
    75b8:	.word	0x400fc000
    75bc:	.word	0x401f8000
    75c0:	.word	0x01e30000
    75c4:	.word	0x402c0000
    75c8:	.word	0x01008000
    75cc:	.word	0x2000f801
    75d0:	.word	0x20010400
    75d4:	.word	0x00007309
    75d8:	.word	0x00080083
    75dc:	.word	0xe000e46e
    75e0:	.word	0xe000e10c
    75e4:	.word	0x2000e438
             
// ---------- CMD8 to send interface condition
#define SDHC_CMD8_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD8) | SDHC_XFERTYP_CICEN | \
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48))
//
static int sd_CMD8_SetInterface(uint32_t cond){  return sd_CMD(SDHC_CMD8_XFERTYP, cond); }
    75e8:	mov.w	r1, #426	; 0x1aa
    75ec:	ldr	r0, [pc, #428]	; (779c <sd_CardInit()+0x384>)
    75ee:	bl	7358 <sd_CMD(unsigned long, unsigned long)>

  resR = sd_CMD0_GoToIdle();

  if (resR) { return sdCardDesc.status = SDHC_STATUS_NOINIT;}
  resR = sd_CMD8_SetInterface(0x000001AA); // 3.3V and AA check pattern
  if (resR == SDHC_RESULT_OK) 
    75f2:	cmp	r0, #0
    75f4:	bne.w	7776 <sd_CardInit()+0x35e>
  { if (!((SDHC_CMDRSP0 & 0x000001AA)== 0x000001AA)) return sdCardDesc.status = SDHC_STATUS_NOINIT;
    75f8:	ldr	r3, [r4, #16]
    75fa:	and.w	r3, r3, #426	; 0x1aa
    75fe:	cmp.w	r3, #426	; 0x1aa
    7602:	bne.n	75aa <sd_CardInit()+0x192>
    sdCardDesc.highCapacity = 1;
    7604:	movs	r3, #1
    7606:	strb	r3, [r6, #1]
static int sd_CMD16_SetBlockSize(uint32_t block_size){  return sd_CMD(SDHC_CMD16_XFERTYP, block_size);}

// ---------- ACMD 41 to send operation condition
#define SDHC_ACMD41_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_ACMD41) | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48))
//
static int sd_ACMD41_SendOperationCond(uint32_t cond){  return sd_ACMD(SDHC_ACMD41_XFERTYP,0, cond);}
    7608:	movs	r2, #0
    760a:	ldr	r0, [pc, #404]	; (77a0 <sd_CardInit()+0x388>)
    760c:	mov	r1, r2
    760e:	bl	73b4 <sd_ACMD(unsigned long, unsigned long, unsigned long)>
  else if (resR == SDHC_RESULT_NO_RESPONSE) 
  { // version 1 cards do not respond to CMD8
  } 
  else return sdCardDesc.status = SDHC_STATUS_NOINIT;

  if (sd_ACMD41_SendOperationCond(0))  return sdCardDesc.status = SDHC_STATUS_NOINIT;
    7612:	cmp	r0, #0
    7614:	bne.n	75aa <sd_CardInit()+0x192>

  if (SDHC_CMDRSP0 & 0x300000) {
    7616:	ldr	r3, [pc, #396]	; (77a4 <sd_CardInit()+0x38c>)
    7618:	ldr	r2, [r3, #16]
    761a:	tst.w	r2, #3145728	; 0x300000
    761e:	beq.n	7662 <sd_CardInit()+0x24a>
    uint32_t condition = 0x00300000;
    if (sdCardDesc.highCapacity) condition |= 0x40000000;
    7620:	ldrb	r2, [r6, #1]
    //
    uint32_t ii = 0;
    7622:	mov	r4, r0
  else return sdCardDesc.status = SDHC_STATUS_NOINIT;

  if (sd_ACMD41_SendOperationCond(0))  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  if (SDHC_CMDRSP0 & 0x300000) {
    uint32_t condition = 0x00300000;
    7624:	ldr	r7, [pc, #384]	; (77a8 <sd_CardInit()+0x390>)
      ii++;
      if (sd_ACMD41_SendOperationCond(condition)) {
        resS = SDHC_STATUS_NOINIT;
        break;
      }
    } while ((!(SDHC_CMDRSP0 & 0x80000000)) && (ii < SDHC_INITIALIZATION_MAX_CNT));
    7626:	mov	r5, r3
  else return sdCardDesc.status = SDHC_STATUS_NOINIT;

  if (sd_ACMD41_SendOperationCond(0))  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  if (SDHC_CMDRSP0 & 0x300000) {
    uint32_t condition = 0x00300000;
    7628:	cmp	r2, #0
      ii++;
      if (sd_ACMD41_SendOperationCond(condition)) {
        resS = SDHC_STATUS_NOINIT;
        break;
      }
    } while ((!(SDHC_CMDRSP0 & 0x80000000)) && (ii < SDHC_INITIALIZATION_MAX_CNT));
    762a:	ldr.w	r8, [pc, #384]	; 77ac <sd_CardInit()+0x394>
  else return sdCardDesc.status = SDHC_STATUS_NOINIT;

  if (sd_ACMD41_SendOperationCond(0))  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  if (SDHC_CMDRSP0 & 0x300000) {
    uint32_t condition = 0x00300000;
    762e:	it	eq
    7630:	moveq.w	r7, #3145728	; 0x300000
static int sd_CMD16_SetBlockSize(uint32_t block_size){  return sd_CMD(SDHC_CMD16_XFERTYP, block_size);}

// ---------- ACMD 41 to send operation condition
#define SDHC_ACMD41_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_ACMD41) | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48))
//
static int sd_ACMD41_SendOperationCond(uint32_t cond){  return sd_ACMD(SDHC_ACMD41_XFERTYP,0, cond);}
    7634:	mov	r2, r7
    7636:	movs	r1, #0
    7638:	ldr	r0, [pc, #356]	; (77a0 <sd_CardInit()+0x388>)
    uint32_t condition = 0x00300000;
    if (sdCardDesc.highCapacity) condition |= 0x40000000;
    //
    uint32_t ii = 0;
    do {
      ii++;
    763a:	adds	r4, #1
static int sd_CMD16_SetBlockSize(uint32_t block_size){  return sd_CMD(SDHC_CMD16_XFERTYP, block_size);}

// ---------- ACMD 41 to send operation condition
#define SDHC_ACMD41_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_ACMD41) | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48))
//
static int sd_ACMD41_SendOperationCond(uint32_t cond){  return sd_ACMD(SDHC_ACMD41_XFERTYP,0, cond);}
    763c:	bl	73b4 <sd_ACMD(unsigned long, unsigned long, unsigned long)>
    if (sdCardDesc.highCapacity) condition |= 0x40000000;
    //
    uint32_t ii = 0;
    do {
      ii++;
      if (sd_ACMD41_SendOperationCond(condition)) {
    7640:	cmp	r0, #0
    7642:	bne.w	7784 <sd_CardInit()+0x36c>
        resS = SDHC_STATUS_NOINIT;
        break;
      }
    } while ((!(SDHC_CMDRSP0 & 0x80000000)) && (ii < SDHC_INITIALIZATION_MAX_CNT));
    7646:	cmp	r4, r8
    7648:	ldr	r3, [r5, #16]
    764a:	bhi.n	7650 <sd_CardInit()+0x238>
    764c:	cmp	r3, #0
    764e:	bge.n	7634 <sd_CardInit()+0x21c>

    if (resS) return resS;

    if ((ii >= SDHC_INITIALIZATION_MAX_CNT) || (!(SDHC_CMDRSP0 & 0x40000000)))
    7650:	ldr	r3, [pc, #344]	; (77ac <sd_CardInit()+0x394>)
    7652:	cmp	r4, r3
    7654:	bhi.n	765e <sd_CardInit()+0x246>
    7656:	ldr	r3, [pc, #332]	; (77a4 <sd_CardInit()+0x38c>)
    7658:	ldr	r3, [r3, #16]
    765a:	lsls	r3, r3, #1
    765c:	bmi.n	7662 <sd_CardInit()+0x24a>
      sdCardDesc.highCapacity = 0;
    765e:	movs	r3, #0
    7660:	strb	r3, [r6, #1]
  }

  // Card identify
  SDHC_CMDRSP0=SDHC_CMDRSP1=SDHC_CMDRSP2=SDHC_CMDRSP3=0;
    7662:	movs	r3, #0
    7664:	ldr	r7, [pc, #316]	; (77a4 <sd_CardInit()+0x38c>)

// ---------- sends CMD2 to identify card
#define SDHC_CMD2_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD2) | SDHC_XFERTYP_CCCEN \
                          | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_136))
//
static int sd_CMD2_Identify(void){  return sd_CMD(SDHC_CMD2_XFERTYP,0); }
    7666:	ldr	r0, [pc, #328]	; (77b0 <sd_CardInit()+0x398>)
    if ((ii >= SDHC_INITIALIZATION_MAX_CNT) || (!(SDHC_CMDRSP0 & 0x40000000)))
      sdCardDesc.highCapacity = 0;
  }

  // Card identify
  SDHC_CMDRSP0=SDHC_CMDRSP1=SDHC_CMDRSP2=SDHC_CMDRSP3=0;
    7668:	str	r3, [r7, #28]

// ---------- sends CMD2 to identify card
#define SDHC_CMD2_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD2) | SDHC_XFERTYP_CCCEN \
                          | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_136))
//
static int sd_CMD2_Identify(void){  return sd_CMD(SDHC_CMD2_XFERTYP,0); }
    766a:	mov	r1, r3
    if ((ii >= SDHC_INITIALIZATION_MAX_CNT) || (!(SDHC_CMDRSP0 & 0x40000000)))
      sdCardDesc.highCapacity = 0;
  }

  // Card identify
  SDHC_CMDRSP0=SDHC_CMDRSP1=SDHC_CMDRSP2=SDHC_CMDRSP3=0;
    766c:	str	r3, [r7, #24]
    766e:	str	r3, [r7, #20]
    7670:	str	r3, [r7, #16]

// ---------- sends CMD2 to identify card
#define SDHC_CMD2_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD2) | SDHC_XFERTYP_CCCEN \
                          | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_136))
//
static int sd_CMD2_Identify(void){  return sd_CMD(SDHC_CMD2_XFERTYP,0); }
    7672:	bl	7358 <sd_CMD(unsigned long, unsigned long)>
      sdCardDesc.highCapacity = 0;
  }

  // Card identify
  SDHC_CMDRSP0=SDHC_CMDRSP1=SDHC_CMDRSP2=SDHC_CMDRSP3=0;
  if (sd_CMD2_Identify())  return sdCardDesc.status = SDHC_STATUS_NOINIT;
    7676:	mov	r1, r0
    7678:	cmp	r0, #0
    767a:	bne.n	75aa <sd_CardInit()+0x192>

// ---------- sends CMD 3 to get address
#define SDHC_CMD3_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD3) | SDHC_XFERTYP_CICEN | \
                         SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48))
//
static int sd_CMD3_GetAddress(void){  return sd_CMD(SDHC_CMD3_XFERTYP,0); }
    767c:	ldr	r0, [pc, #308]	; (77b4 <sd_CardInit()+0x39c>)
    767e:	bl	7358 <sd_CMD(unsigned long, unsigned long)>
  // Card identify
  SDHC_CMDRSP0=SDHC_CMDRSP1=SDHC_CMDRSP2=SDHC_CMDRSP3=0;
  if (sd_CMD2_Identify())  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  // Get card address
  if (sd_CMD3_GetAddress())  return sdCardDesc.status = SDHC_STATUS_NOINIT;
    7682:	cmp	r0, #0
    7684:	bne.n	75aa <sd_CardInit()+0x192>

  sdCardDesc.address = SDHC_CMDRSP0 & 0xFFFF0000;
    7686:	ldr	r3, [r7, #16]
    7688:	ldr	r4, [pc, #300]	; (77b8 <sd_CardInit()+0x3a0>)
#define SDHC_CMD9_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD9) | SDHC_XFERTYP_CCCEN | \
             SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_136))
//
static int sd_CMD9_GetParameters(uint32_t address)
{
  int result = sd_CMD(SDHC_CMD9_XFERTYP, address);
    768a:	ldr	r0, [pc, #304]	; (77bc <sd_CardInit()+0x3a4>)
  if (sd_CMD2_Identify())  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  // Get card address
  if (sd_CMD3_GetAddress())  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  sdCardDesc.address = SDHC_CMDRSP0 & 0xFFFF0000;
    768c:	ands	r4, r3
    768e:	ldr	r5, [pc, #304]	; (77c0 <sd_CardInit()+0x3a8>)
#define SDHC_CMD9_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD9) | SDHC_XFERTYP_CCCEN | \
             SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_136))
//
static int sd_CMD9_GetParameters(uint32_t address)
{
  int result = sd_CMD(SDHC_CMD9_XFERTYP, address);
    7690:	mov	r1, r4
  if (sd_CMD2_Identify())  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  // Get card address
  if (sd_CMD3_GetAddress())  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  sdCardDesc.address = SDHC_CMDRSP0 & 0xFFFF0000;
    7692:	str	r4, [r6, #4]
#define SDHC_CMD9_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD9) | SDHC_XFERTYP_CCCEN | \
             SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_136))
//
static int sd_CMD9_GetParameters(uint32_t address)
{
  int result = sd_CMD(SDHC_CMD9_XFERTYP, address);
    7694:	bl	7358 <sd_CMD(unsigned long, unsigned long)>
  if (result == SDHC_RESULT_OK) { sdCardDesc.tranSpeed = SDHC_CMDRSP2 >> 24;}
    7698:	cmp	r0, #0
    769a:	bne.n	75aa <sd_CardInit()+0x192>
    769c:	ldr	r3, [r7, #24]
    769e:	lsrs	r3, r3, #24
    76a0:	strb	r3, [r5, #3]
  sdCardDesc.address = SDHC_CMDRSP0 & 0xFFFF0000;

  // Get card parameters
  if (sd_CMD9_GetParameters(sdCardDesc.address))  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  if (!(SDHC_CMDRSP3 & 0x00C00000)) {
    76a2:	ldr	r3, [r7, #28]
    76a4:	tst.w	r3, #12582912	; 0xc00000
    76a8:	bne.n	778a <sd_CardInit()+0x372>
    uint32_t read_bl_len, c_size, c_size_mult;

    read_bl_len = (SDHC_CMDRSP2 >> 8) & 0x0F;
    76aa:	ldr	r1, [r7, #24]
    c_size = SDHC_CMDRSP2 & 0x03;
    76ac:	ldr	r3, [r7, #24]
    c_size = (c_size << 10) | (SDHC_CMDRSP1 >> 22);
    76ae:	ldr	r0, [r7, #20]
    c_size_mult = (SDHC_CMDRSP1 >> 7) & 0x07;
    sdCardDesc.numBlocks = (c_size + 1) * (1 << (c_size_mult + 2)) * (1 << (read_bl_len - 9));
    76b0:	ubfx	r1, r1, #8, #4
    76b4:	lsls	r2, r3, #10
    uint32_t read_bl_len, c_size, c_size_mult;

    read_bl_len = (SDHC_CMDRSP2 >> 8) & 0x0F;
    c_size = SDHC_CMDRSP2 & 0x03;
    c_size = (c_size << 10) | (SDHC_CMDRSP1 >> 22);
    c_size_mult = (SDHC_CMDRSP1 >> 7) & 0x07;
    76b6:	ldr	r3, [r7, #20]
    sdCardDesc.numBlocks = (c_size + 1) * (1 << (c_size_mult + 2)) * (1 << (read_bl_len - 9));
    76b8:	subs	r1, #9
    76ba:	and.w	r2, r2, #3072	; 0xc00
    76be:	ubfx	r3, r3, #7, #3
    76c2:	orr.w	r2, r2, r0, lsr #22
    76c6:	adds	r3, #2
    76c8:	adds	r2, #1
    76ca:	lsl.w	r3, r2, r3
    76ce:	lsls	r3, r1
    76d0:	str	r3, [r5, #8]
             
// ---------- sends CMD 7 to select card
#define SDHC_CMD7_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD7) | SDHC_XFERTYP_CICEN | \
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY))
//
static int sd_CMD7_SelectCard(uint32_t address){  return sd_CMD(SDHC_CMD7_XFERTYP, address);}
    76d2:	mov	r1, r4
    76d4:	ldr	r0, [pc, #236]	; (77c4 <sd_CardInit()+0x3ac>)
    76d6:	bl	7358 <sd_CMD(unsigned long, unsigned long)>
    c_size = (SDHC_CMDRSP1 >> 8) & 0x003FFFFF;
    sdCardDesc.numBlocks = (c_size + 1) << 10;
  }

  // Select card
  if (sd_CMD7_SelectCard(sdCardDesc.address)) return sdCardDesc.status = SDHC_STATUS_NOINIT;
    76da:	cmp	r0, #0
    76dc:	bne.w	75aa <sd_CardInit()+0x192>

// ---------- sends CMD16 to set block size
#define SDHC_CMD16_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD16) | SDHC_XFERTYP_CICEN | \
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48))
//
static int sd_CMD16_SetBlockSize(uint32_t block_size){  return sd_CMD(SDHC_CMD16_XFERTYP, block_size);}
    76e0:	mov.w	r1, #512	; 0x200
    76e4:	ldr	r0, [pc, #224]	; (77c8 <sd_CardInit()+0x3b0>)
    76e6:	bl	7358 <sd_CMD(unsigned long, unsigned long)>

  // Select card
  if (sd_CMD7_SelectCard(sdCardDesc.address)) return sdCardDesc.status = SDHC_STATUS_NOINIT;

  // Set 512 Block size in SD card
  if (sd_CMD16_SetBlockSize(SDHC_BLOCK_SIZE))  return sdCardDesc.status = SDHC_STATUS_NOINIT;
    76ea:	cmp	r0, #0
    76ec:	bne.w	75aa <sd_CardInit()+0x192>
// ---------- sends ACMD6 to set bus width
#define SDHC_ACMD6_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_ACMD6) | SDHC_XFERTYP_CICEN | \
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48))
//
static int sd_ACMD6_SetBusWidth(uint32_t address, uint32_t width) 
{ return sd_ACMD(SDHC_ACMD6_XFERTYP,address, width); }
    76f0:	mov	r1, r4
    76f2:	movs	r2, #2
    76f4:	ldr	r0, [pc, #212]	; (77cc <sd_CardInit()+0x3b4>)
    76f6:	bl	73b4 <sd_ACMD(unsigned long, unsigned long, unsigned long)>

  // Set 512 Block size in SD card
  if (sd_CMD16_SetBlockSize(SDHC_BLOCK_SIZE))  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  // Set 4 bit data bus width
  if (sd_ACMD6_SetBusWidth(sdCardDesc.address, 2))  return sdCardDesc.status = SDHC_STATUS_NOINIT;
    76fa:	mov	r5, r0
    76fc:	cmp	r0, #0
    76fe:	bne.w	75aa <sd_CardInit()+0x192>

  // Set Data bus width also in SDHC controller
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    7702:	ldr	r2, [pc, #160]	; (77a4 <sd_CardInit()+0x38c>)
    }
  }
  
  static void sd_ReleaseGPIO(void)
  {
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 5; //GPIO3_IO16
    7704:	movs	r3, #5
    7706:	ldr	r4, [pc, #200]	; (77d0 <sd_CardInit()+0x3b8>)
  
  // De-Init GPIO
  sd_ReleaseGPIO();

  // Set the SDHC default baud rate
  setSdclk(60000);
    7708:	movw	r0, #60000	; 0xea60

  // Set 4 bit data bus width
  if (sd_ACMD6_SetBusWidth(sdCardDesc.address, 2))  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  // Set Data bus width also in SDHC controller
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    770c:	ldr	r1, [r2, #40]	; 0x28
    770e:	bic.w	r1, r1, #6
    7712:	str	r1, [r2, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    7714:	ldr	r1, [r2, #40]	; 0x28
    7716:	orr.w	r1, r1, #2
    771a:	str	r1, [r2, #40]	; 0x28
    }
  }
  
  static void sd_ReleaseGPIO(void)
  {
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 5; //GPIO3_IO16
    771c:	str.w	r3, [r4, #460]	; 0x1cc
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = 5; //GPIO3_IO17
    7720:	str.w	r3, [r4, #464]	; 0x1d0
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = 5; //GPIO3_IO12
    7724:	str.w	r3, [r4, #444]	; 0x1bc
    //3.3V
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = 5; //GPIO3_IO13
    7728:	str.w	r3, [r4, #448]	; 0x1c0
    //GND
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = 5; //GPIO3_IO14
    772c:	str.w	r3, [r4, #452]	; 0x1c4
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = 5; //GPIO3_IO15
    7730:	str.w	r3, [r4, #456]	; 0x1c8
  
  // De-Init GPIO
  sd_ReleaseGPIO();

  // Set the SDHC default baud rate
  setSdclk(60000);
    7734:	bl	7254 <setSdclk(unsigned long)>
                                  IOMUXC_SW_PAD_CTL_PAD_SPEED(2);
  
      const uint32_t DATA_MASK = CLOCK_MASK |
                                 (IOMUXC_SW_PAD_CTL_PAD_PUE | IOMUXC_SW_PAD_CTL_PAD_PUS(1));
  
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;
    7738:	movw	r3, #28808	; 0x7088
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;
    773c:	movw	r2, #4232	; 0x1088
#else

  static void sd_InitGPIO(void)
  {
    { //T4                              // Inverted pins(T4)
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 0; //DAT2  
    7740:	str.w	r5, [r4, #460]	; 0x1cc
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = 0; //DAT3  
    7744:	str.w	r5, [r4, #464]	; 0x1d0
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = 0; //CMD   
    7748:	str.w	r5, [r4, #444]	; 0x1bc
      //3.3V                                           
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = 0; //CLK   
    774c:	str.w	r5, [r4, #448]	; 0x1c0
      //GND                                           
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = 0; //DAT0 
    7750:	str.w	r5, [r4, #452]	; 0x1c4
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = 0; //DAT1 
    7754:	str.w	r5, [r4, #456]	; 0x1c8
                                  IOMUXC_SW_PAD_CTL_PAD_SPEED(2);
  
      const uint32_t DATA_MASK = CLOCK_MASK |
                                 (IOMUXC_SW_PAD_CTL_PAD_PUE | IOMUXC_SW_PAD_CTL_PAD_PUS(1));
  
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;
    7758:	str.w	r3, [r4, #956]	; 0x3bc
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;
    775c:	str.w	r3, [r4, #960]	; 0x3c0
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;
    7760:	str.w	r3, [r4, #940]	; 0x3ac
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;
    7764:	str.w	r2, [r4, #944]	; 0x3b0
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;
    7768:	str.w	r3, [r4, #948]	; 0x3b4
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;
    776c:	str.w	r3, [r4, #952]	; 0x3b8
  // and SDHC_SetClock() for 50 MHz config

  // Init GPIO
  sd_InitGPIO();

  return sdCardDesc.status;
    7770:	ldrb	r0, [r6, #0]
    7772:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  resR = sd_CMD8_SetInterface(0x000001AA); // 3.3V and AA check pattern
  if (resR == SDHC_RESULT_OK) 
  { if (!((SDHC_CMDRSP0 & 0x000001AA)== 0x000001AA)) return sdCardDesc.status = SDHC_STATUS_NOINIT;
    sdCardDesc.highCapacity = 1;
  } 
  else if (resR == SDHC_RESULT_NO_RESPONSE) 
    7776:	cmp	r0, #5
    7778:	beq.w	7608 <sd_CardInit()+0x1f0>
    SDHC_MIX_CTRL = mixCtrl;
  #endif

  resR = sd_CMD0_GoToIdle();

  if (resR) { return sdCardDesc.status = SDHC_STATUS_NOINIT;}
    777c:	movs	r0, #1
    777e:	strb	r0, [r6, #0]
    7780:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7784:	movs	r0, #1
    7786:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c_size = (c_size << 10) | (SDHC_CMDRSP1 >> 22);
    c_size_mult = (SDHC_CMDRSP1 >> 7) & 0x07;
    sdCardDesc.numBlocks = (c_size + 1) * (1 << (c_size_mult + 2)) * (1 << (read_bl_len - 9));
  } else {
    uint32_t c_size;
    sdCardDesc.version2 = 1;
    778a:	movs	r3, #1
    778c:	strb	r3, [r5, #2]
    c_size = (SDHC_CMDRSP1 >> 8) & 0x003FFFFF;
    778e:	ldr	r3, [r7, #20]
    sdCardDesc.numBlocks = (c_size + 1) << 10;
    7790:	ubfx	r3, r3, #8, #22
    7794:	adds	r3, #1
    7796:	lsls	r3, r3, #10
    7798:	str	r3, [r5, #8]
    779a:	b.n	76d2 <sd_CardInit()+0x2ba>
    779c:	.word	0x081a0000
    77a0:	.word	0x29020000
    77a4:	.word	0x402c0000
    77a8:	.word	0x40300000
    77ac:	.word	0x0001869f
    77b0:	.word	0x02090000
    77b4:	.word	0x031a0000
    77b8:	.word	0xffff0000
    77bc:	.word	0x09090000
    77c0:	.word	0x2000e438
    77c4:	.word	0x071b0000
    77c8:	.word	0x101a0000
    77cc:	.word	0x061a0000
    77d0:	.word	0x401f8000

000077d4 <SDHC_disk_initialize>:
DSTATUS SDHC_disk_status()
{	return (DSTATUS) sdCardDesc.status;
}

DSTATUS SDHC_disk_initialize()
{	return (DSTATUS) sd_CardInit();
    77d4:	b.w	7418 <sd_CardInit()>

000077d8 <sd_CardReadBlocks(void*, unsigned long, unsigned long)>:
  int result=0;
  // unused // uint32_t* pData = (uint32_t*)buff;

  
  // Convert LBA to BYTE address if needed
  if (!sdCardDesc.highCapacity)  sector *= 512;
    77d8:	ldr	r3, [pc, #240]	; (78cc <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0xf4>)
#define SDHC_CMD18_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD18) | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) \
                            | SDHC_XFERTYP_DPSEL | SDHC_XFERTYP_DMAEN | SDHC_XFERTYP_DTDSEL \
                            | SDHC_XFERTYP_AC12EN| SDHC_XFERTYP_BCEN | SDHC_XFERTYP_MSBSEL )
//
int sd_CardReadBlocks(void * buff, uint32_t sector, uint32_t count)
{
    77da:	push	{r4, r5, r6, r7, lr}
  int result=0;
  // unused // uint32_t* pData = (uint32_t*)buff;

  
  // Convert LBA to BYTE address if needed
  if (!sdCardDesc.highCapacity)  sector *= 512;
    77dc:	ldrb	r4, [r3, #1]
    77de:	cbnz	r4, 77e2 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0xa>
    77e0:	lsls	r1, r1, #9

  // Check if this is ready
  if (sdCardDesc.status != 0) return SDHC_RESULT_NOT_READY;
    77e2:	ldrb	r3, [r3, #0]
    77e4:	cbz	r3, 77ea <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0x12>
    77e6:	movs	r0, #3
    77e8:	pop	{r4, r5, r6, r7, pc}

	while(SDHC_PRSSTAT & (SDHC_PRSSTAT_CIHB | SDHC_PRSSTAT_CDIHB | SDHC_PRSSTAT_DLA)) ;
    77ea:	ldr	r5, [pc, #228]	; (78d0 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0xf8>)
    77ec:	ldr	r3, [r5, #36]	; 0x24
    77ee:	ldr	r4, [pc, #224]	; (78d0 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0xf8>)
    77f0:	ands.w	r3, r3, #7
    77f4:	bne.n	77ec <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0x14>

  // clear status
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    77f6:	ldr	r5, [r4, #48]	; 0x30
    SDHC_MIX_CTRL |= SDHC_MIX_CTRL_DTDSEL ; // read
    SDHC_MIX_CTRL |= SDHC_MIX_CTRL_DMAEN ; // DMA
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_BCEN; // Block Count
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    if(count>1)
    77f8:	cmp	r2, #1
  SDHC_IRQSTAT = SDHC_IRQSTAT;
  
  // use dma: disabling polling
  uint32_t irqstat = SDHC_IRQSTATEN;
  irqstat &= ~(SDHC_IRQSTATEN_BRRSEN | SDHC_IRQSTATEN_BWRSEN | SDHC_IRQSTATEN_CCSEN) ;
  irqstat &= ~(SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_CCESEN) ;
    77fa:	ldr	r7, [pc, #216]	; (78d4 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0xfc>)
  if (sdCardDesc.status != 0) return SDHC_RESULT_NOT_READY;

	while(SDHC_PRSSTAT & (SDHC_PRSSTAT_CIHB | SDHC_PRSSTAT_CDIHB | SDHC_PRSSTAT_DLA)) ;

  // clear status
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    77fc:	str	r5, [r4, #48]	; 0x30
  
  // use dma: disabling polling
  uint32_t irqstat = SDHC_IRQSTATEN;
    77fe:	ldr	r5, [r4, #52]	; 0x34
  irqstat &= ~(SDHC_IRQSTATEN_BRRSEN | SDHC_IRQSTATEN_BWRSEN | SDHC_IRQSTATEN_CCSEN) ;
  irqstat &= ~(SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_CCESEN) ;
  // enable status
  irqstat |= /*SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_CCESEN |*/ SDHC_IRQSTATEN_DMAESEN ; 
  irqstat |= SDHC_IRQSTATEN_DINTSEN | SDHC_IRQSTATEN_TCSEN ;//| SDHC_IRQSTATEN_CCSEN ; 
    7800:	ldr	r6, [pc, #212]	; (78d8 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0x100>)
  SDHC_IRQSTAT = SDHC_IRQSTAT;
  
  // use dma: disabling polling
  uint32_t irqstat = SDHC_IRQSTATEN;
  irqstat &= ~(SDHC_IRQSTATEN_BRRSEN | SDHC_IRQSTATEN_BWRSEN | SDHC_IRQSTATEN_CCSEN) ;
  irqstat &= ~(SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_CCESEN) ;
    7802:	and.w	r7, r7, r5
  irqstat |= /*SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_CCESEN |*/ SDHC_IRQSTATEN_DMAESEN ; 
  irqstat |= SDHC_IRQSTATEN_DINTSEN | SDHC_IRQSTATEN_TCSEN ;//| SDHC_IRQSTATEN_CCSEN ; 
  SDHC_IRQSTATEN = irqstat;
  
  uint32_t sigen = SDHC_IRQSIGEN;
  sigen |= SDHC_IRQSIGEN_DMA_MASK ;
    7806:	mov	r5, r6
  uint32_t irqstat = SDHC_IRQSTATEN;
  irqstat &= ~(SDHC_IRQSTATEN_BRRSEN | SDHC_IRQSTATEN_BWRSEN | SDHC_IRQSTATEN_CCSEN) ;
  irqstat &= ~(SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_CCESEN) ;
  // enable status
  irqstat |= /*SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_CCESEN |*/ SDHC_IRQSTATEN_DMAESEN ; 
  irqstat |= SDHC_IRQSTATEN_DINTSEN | SDHC_IRQSTATEN_TCSEN ;//| SDHC_IRQSTATEN_CCSEN ; 
    7808:	orr.w	r6, r6, r7
  SDHC_IRQSTATEN = irqstat;
    780c:	str	r6, [r4, #52]	; 0x34
  
  uint32_t sigen = SDHC_IRQSIGEN;
    780e:	ldr	r6, [r4, #56]	; 0x38
  sigen |= SDHC_IRQSIGEN_DMA_MASK ;
    7810:	orr.w	r5, r5, r6
  SDHC_IRQSIGEN = sigen;
    7814:	str	r5, [r4, #56]	; 0x38
  
  SDHC_SYSCTL |= SDHC_SYSCTL_HCKEN;
    7816:	ldr	r5, [r4, #44]	; 0x2c
    7818:	orr.w	r5, r5, #2
    781c:	str	r5, [r4, #44]	; 0x2c
  #if defined(__IMXRT1052__) || defined(__IMXRT1062__)
    
    SDHC_MIX_CTRL |= SDHC_MIX_CTRL_DTDSEL ; // read
    781e:	ldr	r5, [r4, #72]	; 0x48
    7820:	orr.w	r5, r5, #16
    7824:	str	r5, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= SDHC_MIX_CTRL_DMAEN ; // DMA
    7826:	ldr	r5, [r4, #72]	; 0x48
    7828:	orr.w	r5, r5, #1
    782c:	str	r5, [r4, #72]	; 0x48
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_BCEN; // Block Count
    782e:	ldr	r5, [r4, #72]	; 0x48
    7830:	bic.w	r5, r5, #2
    7834:	str	r5, [r4, #72]	; 0x48
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    7836:	ldr	r5, [r4, #72]	; 0x48
    7838:	bic.w	r5, r5, #32
    783c:	str	r5, [r4, #72]	; 0x48
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    783e:	ldr	r5, [r4, #72]	; 0x48
    7840:	bic.w	r5, r5, #4
    7844:	str	r5, [r4, #72]	; 0x48
    if(count>1)
    7846:	bls.n	78a4 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0xcc>
    {
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
    7848:	ldr	r7, [r4, #72]	; 0x48
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    784a:	lsls	r5, r2, #16
    784c:	ldr	r6, [pc, #140]	; (78dc <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0x104>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_BCEN; // Block Count
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    if(count>1)
    {
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
    784e:	orr.w	r7, r7, #2
  dmaDone=0;
  SDHC_DSADDR  = (uint32_t)buff;

  // send command
    SDHC_CMDARG = sector;
    SDHC_XFERTYP = count==1 ? SDHC_CMD17_XFERTYP: SDHC_CMD18_XFERTYP; 
    7852:	ldr.w	lr, [pc, #144]	; 78e4 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0x10c>
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    7856:	ands	r6, r5

  // enable DMA
  dmaDone=0;
    7858:	ldr	r5, [pc, #132]	; (78e0 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0x108>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_BCEN; // Block Count
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    if(count>1)
    {
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
    785a:	str	r7, [r4, #72]	; 0x48
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    785c:	ldr	r7, [r4, #72]	; 0x48
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    785e:	orr.w	r6, r6, #512	; 0x200
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    if(count>1)
    {
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    7862:	orr.w	r7, r7, #32
    7866:	str	r7, [r4, #72]	; 0x48
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    7868:	ldr	r7, [r4, #72]	; 0x48
    786a:	orr.w	r7, r7, #4
    786e:	str	r7, [r4, #72]	; 0x48
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    7870:	str	r6, [r4, #4]

  // enable DMA
  dmaDone=0;
    7872:	str	r3, [r5, #0]
  SDHC_DSADDR  = (uint32_t)buff;
    7874:	str	r0, [r4, #0]

  // send command
    SDHC_CMDARG = sector;
    7876:	str	r1, [r4, #8]
    SDHC_XFERTYP = count==1 ? SDHC_CMD17_XFERTYP: SDHC_CMD18_XFERTYP; 
    7878:	ldr	r3, [pc, #84]	; (78d0 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0xf8>)
    787a:	str.w	lr, [r3, #12]

  // wait for DMA
  while(!dmaDone);
    787e:	ldr	r3, [r5, #0]
    7880:	cmp	r3, #0
    7882:	beq.n	787e <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0xa6>
  SDHC_IRQSTAT &= (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_TC);
    7884:	ldr	r3, [pc, #72]	; (78d0 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0xf8>)

	// Auto CMD12 is enabled for DMA so call it if DMA error
	if((SDHC_DSADDR < (uint32_t)((uint8_t *)buff+(count*512))) && (count>1))
    7886:	add.w	r0, r0, r2, lsl #9
    SDHC_CMDARG = sector;
    SDHC_XFERTYP = count==1 ? SDHC_CMD17_XFERTYP: SDHC_CMD18_XFERTYP; 

  // wait for DMA
  while(!dmaDone);
  SDHC_IRQSTAT &= (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_TC);
    788a:	ldr	r1, [r3, #48]	; 0x30
    788c:	and.w	r1, r1, #3
    7890:	str	r1, [r3, #48]	; 0x30

	// Auto CMD12 is enabled for DMA so call it if DMA error
	if((SDHC_DSADDR < (uint32_t)((uint8_t *)buff+(count*512))) && (count>1))
    7892:	ldr	r3, [r3, #0]
    7894:	cmp	r3, r0
    7896:	bcs.n	78c8 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0xf0>
    7898:	cmp	r2, #1
    789a:	bls.n	78c8 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0xf0>
		result=sd_CMD12_StopTransferWaitForBusy();

  return result;
}
    789c:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  while(!dmaDone);
  SDHC_IRQSTAT &= (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_TC);

	// Auto CMD12 is enabled for DMA so call it if DMA error
	if((SDHC_DSADDR < (uint32_t)((uint8_t *)buff+(count*512))) && (count>1))
		result=sd_CMD12_StopTransferWaitForBusy();
    78a0:	b.w	73d4 <sd_CMD12_StopTransferWaitForBusy()>
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    78a4:	mov.w	r7, r2, lsl #16
    78a8:	ldr	r6, [pc, #48]	; (78dc <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0x104>)

  // enable DMA
  dmaDone=0;
    78aa:	ldr	r5, [pc, #52]	; (78e0 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0x108>)
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    78ac:	and.w	r6, r6, r7
  dmaDone=0;
  SDHC_DSADDR  = (uint32_t)buff;

  // send command
    SDHC_CMDARG = sector;
    SDHC_XFERTYP = count==1 ? SDHC_CMD17_XFERTYP: SDHC_CMD18_XFERTYP; 
    78b0:	ite	ne
    78b2:	ldrne.w	lr, [pc, #48]	; 78e4 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0x10c>
    78b6:	ldreq.w	lr, [pc, #48]	; 78e8 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0x110>
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    78ba:	orr.w	r6, r6, #512	; 0x200
    78be:	str	r6, [r4, #4]

  // enable DMA
  dmaDone=0;
    78c0:	str	r3, [r5, #0]
  SDHC_DSADDR  = (uint32_t)buff;
    78c2:	str	r0, [r4, #0]

  // send command
    SDHC_CMDARG = sector;
    78c4:	str	r1, [r4, #8]
    78c6:	b.n	7878 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0xa0>
                            | SDHC_XFERTYP_DPSEL | SDHC_XFERTYP_DMAEN | SDHC_XFERTYP_DTDSEL \
                            | SDHC_XFERTYP_AC12EN| SDHC_XFERTYP_BCEN | SDHC_XFERTYP_MSBSEL )
//
int sd_CardReadBlocks(void * buff, uint32_t sector, uint32_t count)
{
  int result=0;
    78c8:	movs	r0, #0
    78ca:	pop	{r4, r5, r6, r7, pc}
    78cc:	.word	0x2000e438
    78d0:	.word	0x402c0000
    78d4:	.word	0xffddffce
    78d8:	.word	0x1000000a
    78dc:	.word	0x1fff0000
    78e0:	.word	0x2000e434
    78e4:	.word	0x12220037
    78e8:	.word	0x11220013

000078ec <SDHC_disk_read>:
DSTATUS SDHC_disk_initialize()
{	return (DSTATUS) sd_CardInit();
}

DRESULT SDHC_disk_read(BYTE *buff, DWORD sector, UINT count)
{	return (DRESULT) sd_CardReadBlocks((void *) buff, (uint32_t) sector, (uint32_t) count);
    78ec:	push	{r3, lr}
    78ee:	bl	77d8 <sd_CardReadBlocks(void*, unsigned long, unsigned long)>
}
    78f2:	uxtb	r0, r0
    78f4:	pop	{r3, pc}
    78f6:	nop

000078f8 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)>:
#define SDHC_CMD25_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD25) |SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) \
                            | SDHC_XFERTYP_DPSEL | SDHC_XFERTYP_DMAEN \
                            | SDHC_XFERTYP_AC12EN| SDHC_XFERTYP_BCEN | SDHC_XFERTYP_MSBSEL )
//
int sd_CardWriteBlocks(const void * buff, uint32_t sector, uint32_t count)
{
    78f8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int result=0;
  // unused // const uint32_t *pData = (const uint32_t *)buff;

  // Convert LBA to uint8_t address if needed
  if (!sdCardDesc.highCapacity) sector *= 512;
    78fc:	ldr	r5, [pc, #312]	; (7a38 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x140>)
#define SDHC_CMD25_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD25) |SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) \
                            | SDHC_XFERTYP_DPSEL | SDHC_XFERTYP_DMAEN \
                            | SDHC_XFERTYP_AC12EN| SDHC_XFERTYP_BCEN | SDHC_XFERTYP_MSBSEL )
//
int sd_CardWriteBlocks(const void * buff, uint32_t sector, uint32_t count)
{
    78fe:	mov	r6, r2
  int result=0;
  // unused // const uint32_t *pData = (const uint32_t *)buff;

  // Convert LBA to uint8_t address if needed
  if (!sdCardDesc.highCapacity) sector *= 512;
    7900:	ldrb	r3, [r5, #1]
    7902:	cbnz	r3, 7906 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0xe>
    7904:	lsls	r1, r1, #9

  // Check if this is ready
  if (sdCardDesc.status != 0) return SDHC_RESULT_NOT_READY;
    7906:	ldrb	r3, [r5, #0]
    7908:	cbz	r3, 7910 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x18>
    790a:	movs	r0, #3
    790c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	while(SDHC_PRSSTAT & (SDHC_PRSSTAT_CIHB | SDHC_PRSSTAT_CDIHB | SDHC_PRSSTAT_DLA)) ;
    7910:	ldr	r4, [pc, #296]	; (7a3c <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x144>)
    7912:	ldr	r3, [r4, #36]	; 0x24
    7914:	ldr	r2, [pc, #292]	; (7a3c <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x144>)
    7916:	ands.w	r3, r3, #7
    791a:	bne.n	7912 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x1a>

  // clear status
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    791c:	ldr	r4, [r2, #48]	; 0x30
    SDHC_MIX_CTRL &= ~ SDHC_MIX_CTRL_DTDSEL;  // write
    SDHC_MIX_CTRL |=  SDHC_MIX_CTRL_DMAEN ;   //DMA
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_BCEN; // Block Count
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    if(count>1)
    791e:	cmp	r6, #1
  SDHC_IRQSTAT = SDHC_IRQSTAT;

  uint32_t irqstat = SDHC_IRQSTATEN;
  // use dma: disabling polling
  irqstat &= ~(SDHC_IRQSTATEN_BRRSEN | SDHC_IRQSTATEN_BWRSEN | SDHC_IRQSTATEN_CCSEN) ;
  irqstat &= ~(SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_CCESEN) ;
    7920:	ldr.w	lr, [pc, #304]	; 7a54 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x15c>
  if (sdCardDesc.status != 0) return SDHC_RESULT_NOT_READY;

	while(SDHC_PRSSTAT & (SDHC_PRSSTAT_CIHB | SDHC_PRSSTAT_CDIHB | SDHC_PRSSTAT_DLA)) ;

  // clear status
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    7924:	str	r4, [r2, #48]	; 0x30

  uint32_t irqstat = SDHC_IRQSTATEN;
    7926:	ldr	r4, [r2, #52]	; 0x34
  // use dma: disabling polling
  irqstat &= ~(SDHC_IRQSTATEN_BRRSEN | SDHC_IRQSTATEN_BWRSEN | SDHC_IRQSTATEN_CCSEN) ;
  irqstat &= ~(SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_CCESEN) ;
  // enable status
  irqstat |= SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_CCESEN | SDHC_IRQSTATEN_DMAESEN ; 
  irqstat |= SDHC_IRQSTATEN_DINTSEN | SDHC_IRQSTATEN_TCSEN ;//| SDHC_IRQSTATEN_CCSEN ; 
    7928:	ldr	r7, [pc, #276]	; (7a40 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x148>)
  SDHC_IRQSTAT = SDHC_IRQSTAT;

  uint32_t irqstat = SDHC_IRQSTATEN;
  // use dma: disabling polling
  irqstat &= ~(SDHC_IRQSTATEN_BRRSEN | SDHC_IRQSTATEN_BWRSEN | SDHC_IRQSTATEN_CCSEN) ;
  irqstat &= ~(SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_CCESEN) ;
    792a:	and.w	lr, r4, lr
  irqstat |= SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_CCESEN | SDHC_IRQSTATEN_DMAESEN ; 
  irqstat |= SDHC_IRQSTATEN_DINTSEN | SDHC_IRQSTATEN_TCSEN ;//| SDHC_IRQSTATEN_CCSEN ; 
  SDHC_IRQSTATEN = irqstat;
  
  uint32_t sigen = SDHC_IRQSIGEN;
  sigen |= SDHC_IRQSIGEN_DMA_MASK ;
    792e:	ldr	r4, [pc, #276]	; (7a44 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x14c>)
  // use dma: disabling polling
  irqstat &= ~(SDHC_IRQSTATEN_BRRSEN | SDHC_IRQSTATEN_BWRSEN | SDHC_IRQSTATEN_CCSEN) ;
  irqstat &= ~(SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_CCESEN) ;
  // enable status
  irqstat |= SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_CCESEN | SDHC_IRQSTATEN_DMAESEN ; 
  irqstat |= SDHC_IRQSTATEN_DINTSEN | SDHC_IRQSTATEN_TCSEN ;//| SDHC_IRQSTATEN_CCSEN ; 
    7930:	orr.w	r7, lr, r7
  SDHC_IRQSTATEN = irqstat;
    7934:	str	r7, [r2, #52]	; 0x34
  
  uint32_t sigen = SDHC_IRQSIGEN;
    7936:	ldr	r7, [r2, #56]	; 0x38
  sigen |= SDHC_IRQSIGEN_DMA_MASK ;
    7938:	orr.w	r4, r4, r7
  SDHC_IRQSIGEN = sigen;
    793c:	str	r4, [r2, #56]	; 0x38
  
  SDHC_SYSCTL |= SDHC_SYSCTL_HCKEN;
    793e:	ldr	r4, [r2, #44]	; 0x2c
    7940:	orr.w	r4, r4, #2
    7944:	str	r4, [r2, #44]	; 0x2c
  #if defined(__IMXRT1052__) || defined(__IMXRT1062__)
    SDHC_MIX_CTRL &= ~ SDHC_MIX_CTRL_DTDSEL;  // write
    7946:	ldr	r4, [r2, #72]	; 0x48
    7948:	bic.w	r4, r4, #16
    794c:	str	r4, [r2, #72]	; 0x48
    SDHC_MIX_CTRL |=  SDHC_MIX_CTRL_DMAEN ;   //DMA
    794e:	ldr	r4, [r2, #72]	; 0x48
    7950:	orr.w	r4, r4, #1
    7954:	str	r4, [r2, #72]	; 0x48
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_BCEN; // Block Count
    7956:	ldr	r4, [r2, #72]	; 0x48
    7958:	bic.w	r4, r4, #2
    795c:	str	r4, [r2, #72]	; 0x48
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    795e:	ldr	r4, [r2, #72]	; 0x48
    7960:	bic.w	r4, r4, #32
    7964:	str	r4, [r2, #72]	; 0x48
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    7966:	ldr	r4, [r2, #72]	; 0x48
    7968:	bic.w	r4, r4, #4
    796c:	str	r4, [r2, #72]	; 0x48
    if(count>1)
    796e:	bls.n	7a12 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x11a>
    {
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
    7970:	ldr	r4, [r2, #72]	; 0x48
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    7972:	mov.w	ip, r6, lsl #16
    7976:	ldr	r7, [pc, #208]	; (7a48 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x150>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_BCEN; // Block Count
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    if(count>1)
    {
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
    7978:	orr.w	lr, r4, #2
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    797c:	mov	r4, ip
  dmaDone=0;
  SDHC_DSADDR  = (uint32_t)buff;
  //
  // send write command
  SDHC_CMDARG = sector;
  SDHC_XFERTYP = count==1 ? SDHC_CMD24_XFERTYP: SDHC_CMD25_XFERTYP; 
    797e:	ldr.w	ip, [pc, #216]	; 7a58 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x160>
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_BCEN; // Block Count
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    if(count>1)
    {
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
    7982:	str.w	lr, [r2, #72]	; 0x48
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    7986:	ands	r7, r4
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    if(count>1)
    {
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    7988:	ldr.w	lr, [r2, #72]	; 0x48
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);

  // enable DMA
  dmaDone=0;
    798c:	ldr	r4, [pc, #188]	; (7a4c <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x154>)
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    798e:	orr.w	r7, r7, #512	; 0x200
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    if(count>1)
    {
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    7992:	orr.w	lr, lr, #32
    7996:	str.w	lr, [r2, #72]	; 0x48
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    799a:	ldr.w	lr, [r2, #72]	; 0x48
    799e:	orr.w	lr, lr, #4
    79a2:	str.w	lr, [r2, #72]	; 0x48
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    79a6:	str	r7, [r2, #4]

  // enable DMA
  dmaDone=0;
    79a8:	str	r3, [r4, #0]
  SDHC_DSADDR  = (uint32_t)buff;
    79aa:	str	r0, [r2, #0]
  //
  // send write command
  SDHC_CMDARG = sector;
    79ac:	str	r1, [r2, #8]
  SDHC_XFERTYP = count==1 ? SDHC_CMD24_XFERTYP: SDHC_CMD25_XFERTYP; 
    79ae:	ldr	r3, [pc, #140]	; (7a3c <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x144>)
    79b0:	str.w	ip, [r3, #12]
  //
  // wait for  DMA to finish
  while(!dmaDone);
    79b4:	ldr	r3, [r4, #0]
    79b6:	cmp	r3, #0
    79b8:	beq.n	79b4 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0xbc>

  SDHC_IRQSTAT &= (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_TC);
    79ba:	ldr	r3, [pc, #128]	; (7a3c <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x144>)
    79bc:	ldr	r1, [r3, #48]	; 0x30
  while(SDHC_PRSSTAT & SDHC_PRSSTAT_DLA);
    79be:	mov	r2, r3
  SDHC_XFERTYP = count==1 ? SDHC_CMD24_XFERTYP: SDHC_CMD25_XFERTYP; 
  //
  // wait for  DMA to finish
  while(!dmaDone);

  SDHC_IRQSTAT &= (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_TC);
    79c0:	and.w	r1, r1, #3
    79c4:	str	r1, [r3, #48]	; 0x30
  while(SDHC_PRSSTAT & SDHC_PRSSTAT_DLA);
    79c6:	ldr	r3, [r2, #36]	; 0x24
    79c8:	lsls	r0, r3, #29
    79ca:	bmi.n	79c6 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0xce>
#define CARD_STATUS_READY_FOR_DATA	(1UL << 8)
// ---------- sends CMD13 to check uSD status and wait for ready
static int sd_CMD13_WaitForReady(uint32_t address)
{ int result;
  do
  { while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) ;
    79cc:	ldr	r4, [pc, #108]	; (7a3c <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x144>)
    79ce:	ldr	r7, [r5, #4]
    79d0:	mov	r8, r4
    79d2:	mov	r5, r4
    79d4:	ldr	r3, [r4, #36]	; 0x24
    79d6:	lsls	r1, r3, #31
    79d8:	bmi.n	79d4 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0xdc>
    79da:	ldr.w	r3, [r8, #36]	; 0x24
    79de:	lsls	r2, r3, #30
    79e0:	bmi.n	79d4 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0xdc>
    SDHC_IRQSTATEN |= SDHC_IRQSTATEN_CCSEN;
    79e2:	ldr	r3, [r5, #52]	; 0x34
}

// ---------- sends CMD13 to check uSD status
#define SDHC_CMD13_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD13) | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48))
//
static int sd_CMD13_Check_Status(uint32_t address){  return sd_CMD(SDHC_CMD13_XFERTYP, address);}
    79e4:	mov	r1, r7
    79e6:	ldr	r0, [pc, #104]	; (7a50 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x158>)
// ---------- sends CMD13 to check uSD status and wait for ready
static int sd_CMD13_WaitForReady(uint32_t address)
{ int result;
  do
  { while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) ;
    SDHC_IRQSTATEN |= SDHC_IRQSTATEN_CCSEN;
    79e8:	orr.w	r3, r3, #1
    79ec:	str	r3, [r5, #52]	; 0x34
    SDHC_IRQSTAT=SDHC_IRQSTAT;
    79ee:	ldr	r3, [r5, #48]	; 0x30
    79f0:	str	r3, [r5, #48]	; 0x30
}

// ---------- sends CMD13 to check uSD status
#define SDHC_CMD13_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD13) | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48))
//
static int sd_CMD13_Check_Status(uint32_t address){  return sd_CMD(SDHC_CMD13_XFERTYP, address);}
    79f2:	bl	7358 <sd_CMD(unsigned long, unsigned long)>
  { while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) ;
    SDHC_IRQSTATEN |= SDHC_IRQSTATEN_CCSEN;
    SDHC_IRQSTAT=SDHC_IRQSTAT;
    // CMD13 to check uSD status
    result = sd_CMD13_Check_Status(sdCardDesc.address);
    if (result != SDHC_RESULT_OK)  return result;
    79f6:	cbnz	r0, 7a02 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x10a>
  } while(!((SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA)==CARD_STATUS_READY_FOR_DATA)); // while data?
    79f8:	ldr	r3, [r5, #16]

#define CARD_STATUS_READY_FOR_DATA	(1UL << 8)
// ---------- sends CMD13 to check uSD status and wait for ready
static int sd_CMD13_WaitForReady(uint32_t address)
{ int result;
  do
    79fa:	lsls	r3, r3, #23
    79fc:	bpl.n	79d4 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0xdc>
    79fe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  //check for SD status (if data are written?)
  result = sd_CMD13_WaitForReady(sdCardDesc.address);

	// Auto CMD12 is enabled for DMA so call it when transfer error
	if((result != SDHC_RESULT_OK) && (count>1))
    7a02:	cmp	r6, #1
    7a04:	bls.n	7a0e <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x116>
		result=sd_CMD12_StopTransferWaitForBusy();
  
  return result;
}
    7a06:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  //check for SD status (if data are written?)
  result = sd_CMD13_WaitForReady(sdCardDesc.address);

	// Auto CMD12 is enabled for DMA so call it when transfer error
	if((result != SDHC_RESULT_OK) && (count>1))
		result=sd_CMD12_StopTransferWaitForBusy();
    7a0a:	b.w	73d4 <sd_CMD12_StopTransferWaitForBusy()>
  
  return result;
}
    7a0e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    7a12:	mov.w	lr, r6, lsl #16
    7a16:	ldr	r7, [pc, #48]	; (7a48 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x150>)

  // enable DMA
  dmaDone=0;
    7a18:	ldr	r4, [pc, #48]	; (7a4c <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x154>)
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    7a1a:	and.w	r7, lr, r7
  dmaDone=0;
  SDHC_DSADDR  = (uint32_t)buff;
  //
  // send write command
  SDHC_CMDARG = sector;
  SDHC_XFERTYP = count==1 ? SDHC_CMD24_XFERTYP: SDHC_CMD25_XFERTYP; 
    7a1e:	ite	eq
    7a20:	ldreq.w	ip, [pc, #56]	; 7a5c <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x164>
    7a24:	ldrne.w	ip, [pc, #48]	; 7a58 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x160>
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    7a28:	orr.w	r7, r7, #512	; 0x200
    7a2c:	str	r7, [r2, #4]

  // enable DMA
  dmaDone=0;
    7a2e:	str	r3, [r4, #0]
  SDHC_DSADDR  = (uint32_t)buff;
    7a30:	str	r0, [r2, #0]
  //
  // send write command
  SDHC_CMDARG = sector;
    7a32:	str	r1, [r2, #8]
    7a34:	b.n	79ae <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0xb6>
    7a36:	nop
    7a38:	.word	0x2000e438
    7a3c:	.word	0x402c0000
    7a40:	.word	0x1022000a
    7a44:	.word	0x1000000a
    7a48:	.word	0x1fff0000
    7a4c:	.word	0x2000e434
    7a50:	.word	0x0d020000
    7a54:	.word	0xffddffce
    7a58:	.word	0x19220027
    7a5c:	.word	0x18220003

00007a60 <SDHC_disk_write>:
DRESULT SDHC_disk_read(BYTE *buff, DWORD sector, UINT count)
{	return (DRESULT) sd_CardReadBlocks((void *) buff, (uint32_t) sector, (uint32_t) count);
}

DRESULT SDHC_disk_write(const BYTE *buff, DWORD sector, UINT count)
{	return (DRESULT) sd_CardWriteBlocks((void *) buff, (uint32_t) sector, (uint32_t) count);
    7a60:	push	{r3, lr}
    7a62:	bl	78f8 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)>
}
    7a66:	uxtb	r0, r0
    7a68:	pop	{r3, pc}
    7a6a:	nop

00007a6c <sd_chipSelect(unsigned short) [clone .part.0]>:

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
	if(m_chipSelectPin<0) return;
//
  if(high_low==HIGH)
    7a6c:	cmp	r0, #1
    7a6e:	beq.n	7a84 <sd_chipSelect(unsigned short) [clone .part.0]+0x18>
    // insure MISO goes high impedance
    spi_send(0XFF); 
  }
  else
  {
    digitalWriteFast(m_chipSelectPin, LOW);
    7a70:	ldr	r3, [pc, #60]	; (7ab0 <sd_chipSelect(unsigned short) [clone .part.0]+0x44>)
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    7a72:	ldr	r2, [pc, #64]	; (7ab4 <sd_chipSelect(unsigned short) [clone .part.0]+0x48>)
    7a74:	ldrb	r3, [r3, #0]
    7a76:	lsls	r3, r3, #4
    7a78:	adds	r1, r2, r3
    7a7a:	ldr	r3, [r2, r3]
    7a7c:	ldr	r2, [r1, #12]
    7a7e:	str.w	r2, [r3, #136]	; 0x88
    7a82:	bx	lr
{ 	if(!m_enableChipSelect) return;
	if(m_chipSelectPin<0) return;
//
  if(high_low==HIGH)
  {
	digitalWriteFast(m_chipSelectPin, HIGH);
    7a84:	ldr	r3, [pc, #40]	; (7ab0 <sd_chipSelect(unsigned short) [clone .part.0]+0x44>)
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
    7a86:	ldr	r0, [pc, #44]	; (7ab4 <sd_chipSelect(unsigned short) [clone .part.0]+0x48>)
    7a88:	ldrb	r3, [r3, #0]
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7a8a:	ldr	r2, [pc, #44]	; (7ab8 <sd_chipSelect(unsigned short) [clone .part.0]+0x4c>)
    7a8c:	lsls	r3, r3, #4
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7a8e:	mov	r1, r2
  return TRUE;
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
    7a90:	push	{r4, r5}
    7a92:	adds	r5, r0, r3
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7a94:	movs	r4, #255	; 0xff
    7a96:	ldr	r3, [r0, r3]
    7a98:	ldr	r0, [r5, #12]
    7a9a:	str.w	r0, [r3, #132]	; 0x84
    7a9e:	str	r4, [r2, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7aa0:	ldr	r3, [r1, #92]	; 0x5c
    7aa2:	ldr	r2, [pc, #20]	; (7ab8 <sd_chipSelect(unsigned short) [clone .part.0]+0x4c>)
		if (fifo > 0) return spi->RDR; 
    7aa4:	tst.w	r3, #2031616	; 0x1f0000
    7aa8:	beq.n	7aa0 <sd_chipSelect(unsigned short) [clone .part.0]+0x34>
    7aaa:	ldr	r3, [r2, #116]	; 0x74
  }
  else
  {
    digitalWriteFast(m_chipSelectPin, LOW);
  }
}
    7aac:	pop	{r4, r5}
    7aae:	bx	lr
    7ab0:	.word	0x20000aee
    7ab4:	.word	0x20000538
    7ab8:	.word	0x403a0000

00007abc <spi_transfer(void const*, void*, unsigned int) [clone .part.4]>:
	  //spi->PUSHR = data; 
	  //while (!(spi->SR & SPI_SR_TCF)) ; // wait 
	  //return spi->POPR; 
	} 

	void spi_transfer(const void * buf, void * retbuf, size_t count)
    7abc:	push	{r4, r5}
		uint8_t *p_read = (uint8_t*)retbuf;
		size_t count_read = count;

	  // Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	  // Lets clear the reader queue
	  spi->CR = LPSPI_CR_RRF | LPSPI_CR_MEN;  // clear the queue and make sure still enabled. 
    7abe:	ldr	r3, [pc, #80]	; (7b10 <spi_transfer(void const*, void*, unsigned int) [clone .part.4]+0x54>)
    7ac0:	movw	r4, #513	; 0x201
    7ac4:	str	r4, [r3, #16]

	  while (count > 0) {
    7ac6:	cbz	r2, 7b0c <spi_transfer(void const*, void*, unsigned int) [clone .part.4]+0x50>
    7ac8:	mov	r5, r2
		// Push out the next byte; 
		spi->TDR = p_write? *p_write++ : 0xff;
    7aca:	cbz	r0, 7b08 <spi_transfer(void const*, void*, unsigned int) [clone .part.4]+0x4c>
    7acc:	ldrb	r4, [r0, #0]
    7ace:	adds	r0, #1
		count--; // how many bytes left to output.
    7ad0:	subs	r5, #1
	  // Lets clear the reader queue
	  spi->CR = LPSPI_CR_RRF | LPSPI_CR_MEN;  // clear the queue and make sure still enabled. 

	  while (count > 0) {
		// Push out the next byte; 
		spi->TDR = p_write? *p_write++ : 0xff;
    7ad2:	str	r4, [r3, #100]	; 0x64
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
		  if ((spi->RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    7ad4:	ldr	r4, [r3, #112]	; 0x70
    7ad6:	lsls	r4, r4, #30
    7ad8:	bmi.n	7ae6 <spi_transfer(void const*, void*, unsigned int) [clone .part.4]+0x2a>
			uint8_t b = spi->RDR;  // Read any pending RX bytes in
    7ada:	ldr	r4, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
			count_read--;
    7adc:	subs	r2, #1
		spi->TDR = p_write? *p_write++ : 0xff;
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
		  if ((spi->RSR & LPSPI_RSR_RXEMPTY) == 0)  {
			uint8_t b = spi->RDR;  // Read any pending RX bytes in
    7ade:	uxtb	r4, r4
			if (p_read) *p_read++ = b; 
    7ae0:	cbz	r1, 7ae6 <spi_transfer(void const*, void*, unsigned int) [clone .part.4]+0x2a>
    7ae2:	strb	r4, [r1, #0]
    7ae4:	adds	r1, #1
			count_read--;
		  }
		} while ((spi->SR & LPSPI_SR_TDF) == 0) ;
    7ae6:	ldr	r4, [r3, #20]
	  while (count > 0) {
		// Push out the next byte; 
		spi->TDR = p_write? *p_write++ : 0xff;
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
    7ae8:	lsls	r4, r4, #31
    7aea:	bpl.n	7ad4 <spi_transfer(void const*, void*, unsigned int) [clone .part.4]+0x18>

	  // Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	  // Lets clear the reader queue
	  spi->CR = LPSPI_CR_RRF | LPSPI_CR_MEN;  // clear the queue and make sure still enabled. 

	  while (count > 0) {
    7aec:	cmp	r5, #0
    7aee:	bne.n	7aca <spi_transfer(void const*, void*, unsigned int) [clone .part.4]+0xe>

	  }

	  // now lets wait for all of the read bytes to be returned...
	  while (count_read) {
		if ((spi->RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    7af0:	ldr	r0, [pc, #28]	; (7b10 <spi_transfer(void const*, void*, unsigned int) [clone .part.4]+0x54>)
		} while ((spi->SR & LPSPI_SR_TDF) == 0) ;

	  }

	  // now lets wait for all of the read bytes to be returned...
	  while (count_read) {
    7af2:	cbz	r2, 7b0c <spi_transfer(void const*, void*, unsigned int) [clone .part.4]+0x50>
		if ((spi->RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    7af4:	ldr	r3, [r0, #112]	; 0x70
    7af6:	lsls	r3, r3, #30
    7af8:	bmi.n	7af4 <spi_transfer(void const*, void*, unsigned int) [clone .part.4]+0x38>
		  uint8_t b = spi->RDR;  // Read any pending RX bytes in
    7afa:	ldr	r3, [r0, #116]	; 0x74
    7afc:	uxtb	r3, r3
		  if (p_read) *p_read++ = b; 
    7afe:	cbz	r1, 7b04 <spi_transfer(void const*, void*, unsigned int) [clone .part.4]+0x48>
    7b00:	strb	r3, [r1, #0]
    7b02:	adds	r1, #1
		  count_read--;
    7b04:	subs	r2, #1
    7b06:	b.n	7af2 <spi_transfer(void const*, void*, unsigned int) [clone .part.4]+0x36>
	  // Lets clear the reader queue
	  spi->CR = LPSPI_CR_RRF | LPSPI_CR_MEN;  // clear the queue and make sure still enabled. 

	  while (count > 0) {
		// Push out the next byte; 
		spi->TDR = p_write? *p_write++ : 0xff;
    7b08:	movs	r4, #255	; 0xff
    7b0a:	b.n	7ad0 <spi_transfer(void const*, void*, unsigned int) [clone .part.4]+0x14>
		  uint8_t b = spi->RDR;  // Read any pending RX bytes in
		  if (p_read) *p_read++ = b; 
		  count_read--;
		}
	  }
	}
    7b0c:	pop	{r4, r5}
    7b0e:	bx	lr
    7b10:	.word	0x403a0000

00007b14 <SPI_disk_ioctl(unsigned char, unsigned char*)>:
    return res;
}
void sd_setChipSelect(uint16_t pin);

DRESULT SPI_disk_ioctl(BYTE cmd, BYTE *buff)
{	if(cmd==1) sd_setChipSelect(*(uint16_t*) buff);
    7b14:	cmp	r0, #1
    7b16:	bne.n	7b1e <SPI_disk_ioctl(unsigned char, unsigned char*)+0xa>
    7b18:	ldrh	r2, [r1, #0]
void sd_setType(uint16_t type) {m_sd_type=type;}
uint16_t sd_getType(void) {return m_sd_type;}

void sd_enableChipSelect(void) {m_enableChipSelect=true;}
void sd_disableChipSelect(void) {m_enableChipSelect=false;}
void sd_setChipSelect(uint16_t pin) {m_chipSelectPin=pin;}
    7b1a:	ldr	r3, [pc, #8]	; (7b24 <SPI_disk_ioctl(unsigned char, unsigned char*)+0x10>)
    7b1c:	strh	r2, [r3, #0]
void sd_setChipSelect(uint16_t pin);

DRESULT SPI_disk_ioctl(BYTE cmd, BYTE *buff)
{	if(cmd==1) sd_setChipSelect(*(uint16_t*) buff);
    return RES_OK;
}
    7b1e:	movs	r0, #0
    7b20:	bx	lr
    7b22:	nop
    7b24:	.word	0x20000aee

00007b28 <sd_cardCommand(unsigned char, unsigned long)>:
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7b28:	ldr	r3, [pc, #268]	; (7c38 <sd_cardCommand(unsigned char, unsigned long)+0x110>)
  }
}

// send command and return error code.  Return zero for OK
uint8_t sd_cardCommand(uint8_t cmd, uint32_t arg) 
{ uint8_t d[6], *pa, kk;
    7b2a:	push	{r4, r5, r6, r7, lr}
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7b2c:	ldrh	r3, [r3, #0]
  }
}

// send command and return error code.  Return zero for OK
uint8_t sd_cardCommand(uint8_t cmd, uint32_t arg) 
{ uint8_t d[6], *pa, kk;
    7b2e:	sub	sp, #20
    7b30:	mov	r4, r0
    7b32:	str	r1, [sp, #4]
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7b34:	cmp	r3, #0
    7b36:	bne.n	7c1c <sd_cardCommand(unsigned char, unsigned long)+0xf4>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
    7b38:	ldr	r0, [pc, #256]	; (7c3c <sd_cardCommand(unsigned char, unsigned long)+0x114>)
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7b3a:	movs	r6, #255	; 0xff
    7b3c:	ldr	r2, [pc, #256]	; (7c40 <sd_cardCommand(unsigned char, unsigned long)+0x118>)
    7b3e:	ldr	r1, [r0, #0]
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7b40:	mov	r5, r2
{
  uint16_t t0;
  uint16_t ret;
  t0  = millis();
  while ((ret=spi_receive()) != 0XFF) 
  { if (((uint16_t)millis() - t0) >= timeoutMillis) return FALSE;
    7b42:	uxth	r1, r1
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7b44:	str	r6, [r2, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7b46:	ldr	r3, [r2, #92]	; 0x5c
		if (fifo > 0) return spi->RDR; 
    7b48:	tst.w	r3, #2031616	; 0x1f0000
    7b4c:	beq.n	7b46 <sd_cardCommand(unsigned char, unsigned long)+0x1e>
    7b4e:	ldr	r3, [r5, #116]	; 0x74
uint16_t sd_waitNotBusy(uint16_t timeoutMillis) 
{
  uint16_t t0;
  uint16_t ret;
  t0  = millis();
  while ((ret=spi_receive()) != 0XFF) 
    7b50:	uxtb	r3, r3
    7b52:	cmp	r3, #255	; 0xff
    7b54:	beq.n	7b62 <sd_cardCommand(unsigned char, unsigned long)+0x3a>
    7b56:	ldr	r3, [r0, #0]
  { if (((uint16_t)millis() - t0) >= timeoutMillis) return FALSE;
    7b58:	uxth	r3, r3
    7b5a:	subs	r3, r3, r1
    7b5c:	cmp.w	r3, #600	; 0x258
    7b60:	blt.n	7b44 <sd_cardCommand(unsigned char, unsigned long)+0x1c>

  // wait if busy
 // unused // 
 uint16_t ret=sd_waitNotBusy(SD_WRITE_TIMEOUT);
// form message
  d[0]=cmd | 0x40;
    7b62:	orr.w	lr, r4, #64	; 0x40
  for(kk=1;kk<5;kk++) d[kk]=pa[4-kk];
    7b66:	ldrb.w	r1, [sp, #7]
    7b6a:	ldrb.w	r2, [sp, #6]
    7b6e:	add	r6, sp, #8
    7b70:	strb.w	r1, [sp, #9]
    7b74:	add.w	ip, sp, #12
    7b78:	strb.w	r2, [sp, #10]
    7b7c:	mov	r5, lr
    7b7e:	ldrb.w	r1, [sp, #5]
    7b82:	mov	r7, r6
    7b84:	ldrb.w	r2, [sp, #4]
    7b88:	movs	r3, #0

  // wait if busy
 // unused // 
 uint16_t ret=sd_waitNotBusy(SD_WRITE_TIMEOUT);
// form message
  d[0]=cmd | 0x40;
    7b8a:	strb.w	lr, [sp, #8]
  for(kk=1;kk<5;kk++) d[kk]=pa[4-kk];
    7b8e:	strb.w	r1, [sp, #11]
    7b92:	strb.w	r2, [sp, #12]
    7b96:	movs	r2, #8
    uint8_t ii,jj;
    for (ii = 0; ii < n; ii++) 
    {
    uint8_t d = data[ii];
    for (jj = 0; jj < 8; jj++) {
      crc <<= 1;
    7b98:	lsls	r3, r3, #1
    7b9a:	subs	r2, #1
      if ((d & 0x80) ^ (crc & 0x80)) crc ^= 0x09;
      d <<= 1;
    7b9c:	lsls	r0, r5, #1
    uint8_t ii,jj;
    for (ii = 0; ii < n; ii++) 
    {
    uint8_t d = data[ii];
    for (jj = 0; jj < 8; jj++) {
      crc <<= 1;
    7b9e:	uxtb	r3, r3
      if ((d & 0x80) ^ (crc & 0x80)) crc ^= 0x09;
    7ba0:	eor.w	r1, r3, r5
      d <<= 1;
    7ba4:	uxtb	r5, r0
    for (ii = 0; ii < n; ii++) 
    {
    uint8_t d = data[ii];
    for (jj = 0; jj < 8; jj++) {
      crc <<= 1;
      if ((d & 0x80) ^ (crc & 0x80)) crc ^= 0x09;
    7ba6:	lsls	r1, r1, #24
    7ba8:	it	mi
    7baa:	eormi.w	r3, r3, #9
    uint8_t crc = 0;
    uint8_t ii,jj;
    for (ii = 0; ii < n; ii++) 
    {
    uint8_t d = data[ii];
    for (jj = 0; jj < 8; jj++) {
    7bae:	ands.w	r2, r2, #255	; 0xff
    7bb2:	bne.n	7b98 <sd_cardCommand(unsigned char, unsigned long)+0x70>
  //------------------------------------------------------------------------------
  // CRC functions
  static uint8_t CRC7(const uint8_t* data, uint8_t n) {
    uint8_t crc = 0;
    uint8_t ii,jj;
    for (ii = 0; ii < n; ii++) 
    7bb4:	cmp	ip, r7
    7bb6:	beq.n	7bbe <sd_cardCommand(unsigned char, unsigned long)+0x96>
    7bb8:	ldrb.w	r5, [r7, #1]!
    7bbc:	b.n	7b96 <sd_cardCommand(unsigned char, unsigned long)+0x6e>
// form message
  d[0]=cmd | 0x40;
  for(kk=1;kk<5;kk++) d[kk]=pa[4-kk];
  
#ifdef USE_SD_CRC  // add crc
  d[5] = CRC7(d, 5);
    7bbe:	lsls	r3, r3, #1
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7bc0:	ldr	r2, [pc, #124]	; (7c40 <sd_cardCommand(unsigned char, unsigned long)+0x118>)
// form message
  d[0]=cmd | 0x40;
  for(kk=1;kk<5;kk++) d[kk]=pa[4-kk];
  
#ifdef USE_SD_CRC  // add crc
  d[5] = CRC7(d, 5);
    7bc2:	add	r0, sp, #16
    7bc4:	orr.w	r3, r3, #1
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7bc8:	mov	r5, r2
// form message
  d[0]=cmd | 0x40;
  for(kk=1;kk<5;kk++) d[kk]=pa[4-kk];
  
#ifdef USE_SD_CRC  // add crc
  d[5] = CRC7(d, 5);
    7bca:	strb.w	r3, [r0, #-3]!
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7bce:	str.w	lr, [r2, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7bd2:	ldr	r3, [r2, #92]	; 0x5c
    7bd4:	ldr	r1, [pc, #104]	; (7c40 <sd_cardCommand(unsigned char, unsigned long)+0x118>)
		if (fifo > 0) return spi->RDR; 
    7bd6:	tst.w	r3, #2031616	; 0x1f0000
    7bda:	beq.n	7bd2 <sd_cardCommand(unsigned char, unsigned long)+0xaa>
#else
  d[5]=((cmd == CMD0) ? 0X95 : 0X87);
#endif  // USE_SD_CRC

  // send message
  for (kk = 0; kk < 6; kk++) spi_send(d[kk]);
    7bdc:	cmp	r6, r0
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
		if (fifo > 0) return spi->RDR; 
    7bde:	ldr	r3, [r5, #116]	; 0x74
#else
  d[5]=((cmd == CMD0) ? 0X95 : 0X87);
#endif  // USE_SD_CRC

  // send message
  for (kk = 0; kk < 6; kk++) spi_send(d[kk]);
    7be0:	beq.n	7be8 <sd_cardCommand(unsigned char, unsigned long)+0xc0>
    7be2:	ldrb.w	lr, [r6, #1]!
    7be6:	b.n	7bce <sd_cardCommand(unsigned char, unsigned long)+0xa6>

  // skip stuff byte for stop read
  if (cmd == CMD12) spi_receive();
    7be8:	cmp	r4, #12
    7bea:	beq.n	7c24 <sd_cardCommand(unsigned char, unsigned long)+0xfc>
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7bec:	ldr	r2, [pc, #80]	; (7c40 <sd_cardCommand(unsigned char, unsigned long)+0x118>)
  // wait if busy
 // unused // 
 uint16_t ret=sd_waitNotBusy(SD_WRITE_TIMEOUT);
// form message
  d[0]=cmd | 0x40;
  for(kk=1;kk<5;kk++) d[kk]=pa[4-kk];
    7bee:	movs	r1, #0
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7bf0:	movs	r6, #255	; 0xff
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7bf2:	mov	r5, r2
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7bf4:	str	r6, [r2, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7bf6:	ldr	r3, [r2, #92]	; 0x5c
		if (fifo > 0) return spi->RDR; 
    7bf8:	tst.w	r3, #2031616	; 0x1f0000
    7bfc:	beq.n	7bf6 <sd_cardCommand(unsigned char, unsigned long)+0xce>

  // skip stuff byte for stop read
  if (cmd == CMD12) spi_receive();

  // wait for response
  for (kk = 0; ((m_sd_status = spi_receive()) & 0X80) && kk != 0XFF; kk++);
    7bfe:	uxtb	r3, r1
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
		if (fifo > 0) return spi->RDR; 
    7c00:	ldr	r0, [r5, #116]	; 0x74

  // skip stuff byte for stop read
  if (cmd == CMD12) spi_receive();

  // wait for response
  for (kk = 0; ((m_sd_status = spi_receive()) & 0X80) && kk != 0XFF; kk++);
    7c02:	adds	r1, #1
    7c04:	subs	r3, #255	; 0xff
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
		if (fifo > 0) return spi->RDR; 
    7c06:	uxtb	r0, r0

  // skip stuff byte for stop read
  if (cmd == CMD12) spi_receive();

  // wait for response
  for (kk = 0; ((m_sd_status = spi_receive()) & 0X80) && kk != 0XFF; kk++);
    7c08:	it	ne
    7c0a:	movne	r3, #1
    7c0c:	uxth	r4, r0
    7c0e:	ands.w	r3, r3, r0, lsr #7
    7c12:	bne.n	7bf4 <sd_cardCommand(unsigned char, unsigned long)+0xcc>
    7c14:	ldr	r3, [pc, #44]	; (7c44 <sd_cardCommand(unsigned char, unsigned long)+0x11c>)
    7c16:	strh	r4, [r3, #0]
  return m_sd_status;
} 
    7c18:	add	sp, #20
    7c1a:	pop	{r4, r5, r6, r7, pc}
    7c1c:	movs	r0, #0
    7c1e:	bl	7a6c <sd_chipSelect(unsigned short) [clone .part.0]>
    7c22:	b.n	7b38 <sd_cardCommand(unsigned char, unsigned long)+0x10>
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7c24:	movs	r3, #255	; 0xff
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7c26:	mov	r0, r1
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7c28:	str	r3, [r1, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7c2a:	ldr	r3, [r0, #92]	; 0x5c
    7c2c:	ldr	r2, [pc, #16]	; (7c40 <sd_cardCommand(unsigned char, unsigned long)+0x118>)
		if (fifo > 0) return spi->RDR; 
    7c2e:	tst.w	r3, #2031616	; 0x1f0000
    7c32:	beq.n	7c2a <sd_cardCommand(unsigned char, unsigned long)+0x102>
    7c34:	ldr	r3, [r2, #116]	; 0x74
    7c36:	b.n	7bec <sd_cardCommand(unsigned char, unsigned long)+0xc4>
    7c38:	.word	0x20000aec
    7c3c:	.word	0x2000e684
    7c40:	.word	0x403a0000
    7c44:	.word	0x2000e448

00007c48 <sd_readData(unsigned char*, unsigned int)>:
  // wait for response
  for (kk = 0; ((m_sd_status = spi_receive()) & 0X80) && kk != 0XFF; kk++);
  return m_sd_status;
} 

uint16_t sd_readData(uint8_t* dst, size_t count) {
    7c48:	push	{r3, r4, r5, r6, r7, lr}
    7c4a:	ldr	r6, [pc, #236]	; (7d38 <sd_readData(unsigned char*, unsigned int)+0xf0>)
    7c4c:	mov	r5, r1
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7c4e:	ldr	r2, [pc, #236]	; (7d3c <sd_readData(unsigned char*, unsigned int)+0xf4>)
  // wait for response
  for (kk = 0; ((m_sd_status = spi_receive()) & 0X80) && kk != 0XFF; kk++);
  return m_sd_status;
} 

uint16_t sd_readData(uint8_t* dst, size_t count) {
    7c50:	mov	r4, r0
    7c52:	ldr	r1, [r6, #0]
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7c54:	movs	r7, #255	; 0xff
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7c56:	mov	r0, r2
  uint16_t crc;
#endif  // USE_SD_CRC
  // wait for start block token
  uint16_t t0 = millis();
  while ((m_sd_status = spi_receive()) == 0XFF) {
    if (((uint16_t)millis() - t0) > SD_READ_TIMEOUT) {
    7c58:	uxth	r1, r1
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7c5a:	str	r7, [r2, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7c5c:	ldr	r3, [r2, #92]	; 0x5c
		if (fifo > 0) return spi->RDR; 
    7c5e:	tst.w	r3, #2031616	; 0x1f0000
    7c62:	beq.n	7c5c <sd_readData(unsigned char*, unsigned int)+0x14>
    7c64:	ldr	r3, [r0, #116]	; 0x74
    7c66:	uxtb	r3, r3
#ifdef USE_SD_CRC
  uint16_t crc;
#endif  // USE_SD_CRC
  // wait for start block token
  uint16_t t0 = millis();
  while ((m_sd_status = spi_receive()) == 0XFF) {
    7c68:	cmp	r3, #255	; 0xff
    7c6a:	uxth.w	lr, r3
    7c6e:	bne.n	7c90 <sd_readData(unsigned char*, unsigned int)+0x48>
    7c70:	ldr	r3, [r6, #0]
    if (((uint16_t)millis() - t0) > SD_READ_TIMEOUT) {
    7c72:	uxth	r3, r3
    7c74:	subs	r3, r3, r1
    7c76:	cmp.w	r3, #300	; 0x12c
    7c7a:	ble.n	7c5a <sd_readData(unsigned char*, unsigned int)+0x12>
    7c7c:	ldr	r1, [pc, #192]	; (7d40 <sd_readData(unsigned char*, unsigned int)+0xf8>)
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    7c7e:	movs	r2, #17
    7c80:	ldr	r3, [pc, #192]	; (7d44 <sd_readData(unsigned char*, unsigned int)+0xfc>)
    7c82:	strh.w	lr, [r1]
    7c86:	strh	r2, [r3, #0]
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7c88:	ldr	r3, [pc, #188]	; (7d48 <sd_readData(unsigned char*, unsigned int)+0x100>)
    7c8a:	ldrh	r0, [r3, #0]
    7c8c:	cbnz	r0, 7caa <sd_readData(unsigned char*, unsigned int)+0x62>
  return TRUE;

 fail:
  sd_chipSelect(HIGH);
  return FALSE;
}
    7c8e:	pop	{r3, r4, r5, r6, r7, pc}
    7c90:	ldr	r6, [pc, #172]	; (7d40 <sd_readData(unsigned char*, unsigned int)+0xf8>)
    if (((uint16_t)millis() - t0) > SD_READ_TIMEOUT) {
      sd_setError(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  if (m_sd_status != DATA_START_BLOCK) {
    7c92:	cmp.w	lr, #254	; 0xfe
    7c96:	strh.w	lr, [r6]
    7c9a:	beq.n	7cb4 <sd_readData(unsigned char*, unsigned int)+0x6c>
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    7c9c:	ldr	r3, [pc, #164]	; (7d44 <sd_readData(unsigned char*, unsigned int)+0xfc>)
    7c9e:	movs	r2, #15
    7ca0:	strh	r2, [r3, #0]
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7ca2:	ldr	r3, [pc, #164]	; (7d48 <sd_readData(unsigned char*, unsigned int)+0x100>)
    7ca4:	ldrh	r0, [r3, #0]
    7ca6:	cmp	r0, #0
    7ca8:	beq.n	7c8e <sd_readData(unsigned char*, unsigned int)+0x46>
    7caa:	movs	r0, #1
    7cac:	bl	7a6c <sd_chipSelect(unsigned short) [clone .part.0]>
  sd_chipSelect(HIGH);
  return TRUE;

 fail:
  sd_chipSelect(HIGH);
  return FALSE;
    7cb0:	movs	r0, #0
    7cb2:	pop	{r3, r4, r5, r6, r7, pc}
	} 

	void spi_transfer(const void * buf, void * retbuf, size_t count)
	{

	  if (count == 0) return;
    7cb4:	cbnz	r5, 7d14 <sd_readData(unsigned char*, unsigned int)+0xcc>
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7cb6:	ldr	r3, [pc, #132]	; (7d3c <sd_readData(unsigned char*, unsigned int)+0xf4>)
  if (m_sd_status != DATA_START_BLOCK) {
    sd_setError(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_sd_status = spi_receiveBulk(dst, count))) {
    7cb8:	movs	r0, #0
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7cba:	movs	r2, #255	; 0xff
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7cbc:	mov	r1, r3
  if (m_sd_status != DATA_START_BLOCK) {
    sd_setError(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_sd_status = spi_receiveBulk(dst, count))) {
    7cbe:	strh	r0, [r6, #0]
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7cc0:	str	r2, [r3, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7cc2:	ldr	r3, [r1, #92]	; 0x5c
    7cc4:	ldr	r2, [pc, #116]	; (7d3c <sd_readData(unsigned char*, unsigned int)+0xf4>)
		if (fifo > 0) return spi->RDR; 
    7cc6:	tst.w	r3, #2031616	; 0x1f0000
    7cca:	beq.n	7cc2 <sd_readData(unsigned char*, unsigned int)+0x7a>
    7ccc:	ldr	r0, [r2, #116]	; 0x74
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7cce:	movs	r3, #255	; 0xff
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7cd0:	mov	r1, r2
    goto fail;
  }

#ifdef USE_SD_CRC
  // get crc
  crc = (spi_receive() << 8) | spi_receive();
    7cd2:	lsls	r0, r0, #8
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7cd4:	str	r3, [r2, #100]	; 0x64
    goto fail;
  }

#ifdef USE_SD_CRC
  // get crc
  crc = (spi_receive() << 8) | spi_receive();
    7cd6:	sxth	r0, r0
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7cd8:	ldr	r3, [r1, #92]	; 0x5c
    7cda:	ldr	r2, [pc, #96]	; (7d3c <sd_readData(unsigned char*, unsigned int)+0xf4>)
		if (fifo > 0) return spi->RDR; 
    7cdc:	tst.w	r3, #2031616	; 0x1f0000
    7ce0:	beq.n	7cd8 <sd_readData(unsigned char*, unsigned int)+0x90>
    7ce2:	ldr	r3, [r2, #116]	; 0x74
    goto fail;
  }

#ifdef USE_SD_CRC
  // get crc
  crc = (spi_receive() << 8) | spi_receive();
    7ce4:	uxtb	r3, r3
    7ce6:	orrs	r0, r3
    7ce8:	uxth	r0, r0
    };

    static uint16_t CRC_CCITT(const uint8_t* data, size_t n) {
      uint16_t crc = 0;
      size_t ii;
      for (ii = 0; ii < n; ii++) {
    7cea:	cbz	r5, 7d32 <sd_readData(unsigned char*, unsigned int)+0xea>
    7cec:	movs	r3, #0
    7cee:	ldr	r1, [pc, #92]	; (7d4c <sd_readData(unsigned char*, unsigned int)+0x104>)
    7cf0:	add	r5, r4
      crc = crctab[(crc >> 8 ^ data[ii]) & 0XFF] ^ (crc << 8);
    7cf2:	ldrb.w	r2, [r4], #1
    7cf6:	eor.w	r2, r2, r3, asr #8
    };

    static uint16_t CRC_CCITT(const uint8_t* data, size_t n) {
      uint16_t crc = 0;
      size_t ii;
      for (ii = 0; ii < n; ii++) {
    7cfa:	cmp	r5, r4
      crc = crctab[(crc >> 8 ^ data[ii]) & 0XFF] ^ (crc << 8);
    7cfc:	ldrh.w	r2, [r1, r2, lsl #1]
    7d00:	eor.w	r3, r2, r3, lsl #8
    7d04:	uxth	r3, r3
    };

    static uint16_t CRC_CCITT(const uint8_t* data, size_t n) {
      uint16_t crc = 0;
      size_t ii;
      for (ii = 0; ii < n; ii++) {
    7d06:	bne.n	7cf2 <sd_readData(unsigned char*, unsigned int)+0xaa>
  }

#ifdef USE_SD_CRC
  // get crc
  crc = (spi_receive() << 8) | spi_receive();
  if (crc != CRC_CCITT(dst, count)) {
    7d08:	cmp	r0, r3
    7d0a:	beq.n	7d20 <sd_readData(unsigned char*, unsigned int)+0xd8>
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    7d0c:	ldr	r3, [pc, #52]	; (7d44 <sd_readData(unsigned char*, unsigned int)+0xfc>)
    7d0e:	movs	r2, #27
    7d10:	strh	r2, [r3, #0]
    7d12:	b.n	7c88 <sd_readData(unsigned char*, unsigned int)+0x40>
    7d14:	mov	r2, r5
    7d16:	mov	r1, r4
    7d18:	movs	r0, #0
    7d1a:	bl	7abc <spi_transfer(void const*, void*, unsigned int) [clone .part.4]>
    7d1e:	b.n	7cb6 <sd_readData(unsigned char*, unsigned int)+0x6e>
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7d20:	ldr	r3, [pc, #36]	; (7d48 <sd_readData(unsigned char*, unsigned int)+0x100>)
  spi_receive();
  spi_receive();
#endif  // USE_SD_CRC

  sd_chipSelect(HIGH);
  return TRUE;
    7d22:	movs	r0, #1
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7d24:	ldrh	r3, [r3, #0]
    7d26:	cmp	r3, #0
    7d28:	beq.n	7c8e <sd_readData(unsigned char*, unsigned int)+0x46>
    7d2a:	bl	7a6c <sd_chipSelect(unsigned short) [clone .part.0]>
  spi_receive();
  spi_receive();
#endif  // USE_SD_CRC

  sd_chipSelect(HIGH);
  return TRUE;
    7d2e:	movs	r0, #1
    7d30:	pop	{r3, r4, r5, r6, r7, pc}
      0xEF1F, 0xFF3E, 0xCF5D, 0xDF7C, 0xAF9B, 0xBFBA, 0x8FD9, 0x9FF8,
      0x6E17, 0x7E36, 0x4E55, 0x5E74, 0x2E93, 0x3EB2, 0x0ED1, 0x1EF0
    };

    static uint16_t CRC_CCITT(const uint8_t* data, size_t n) {
      uint16_t crc = 0;
    7d32:	mov	r3, r5
    7d34:	b.n	7d08 <sd_readData(unsigned char*, unsigned int)+0xc0>
    7d36:	nop
    7d38:	.word	0x2000e684
    7d3c:	.word	0x403a0000
    7d40:	.word	0x2000e448
    7d44:	.word	0x2000e44a
    7d48:	.word	0x20000aec
    7d4c:	.word	0x20000334

00007d50 <sd_readRegister(unsigned char, void*)>:
  return FALSE;
}

// read CID or CSR register
uint16_t sd_readRegister(uint8_t cmd, void* buf) 
{
    7d50:	push	{r4, lr}
    7d52:	mov	r4, r1
    uint8_t* dst = (uint8_t*)(buf);
  uint16_t ret=sd_cardCommand(cmd, 0);
    7d54:	movs	r1, #0
    7d56:	bl	7b28 <sd_cardCommand(unsigned char, unsigned long)>
    if (ret) 
    7d5a:	cbz	r0, 7d6c <sd_readRegister(unsigned char, void*)+0x1c>
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7d5c:	ldr	r3, [pc, #36]	; (7d84 <sd_readRegister(unsigned char, void*)+0x34>)
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    7d5e:	movs	r1, #16
    7d60:	ldr	r2, [pc, #36]	; (7d88 <sd_readRegister(unsigned char, void*)+0x38>)
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7d62:	ldrh	r3, [r3, #0]
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    7d64:	strh	r1, [r2, #0]
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7d66:	cbnz	r3, 7d78 <sd_readRegister(unsigned char, void*)+0x28>
    sd_chipSelect(HIGH);
    return FALSE;
    }
  ret= sd_readData(dst, 16);
  return ret;
}
    7d68:	movs	r0, #0
    7d6a:	pop	{r4, pc}
    if (ret) 
  {   sd_setError(SD_CARD_ERROR_READ_REG);
    sd_chipSelect(HIGH);
    return FALSE;
    }
  ret= sd_readData(dst, 16);
    7d6c:	mov	r0, r4
    7d6e:	movs	r1, #16
  return ret;
}
    7d70:	ldmia.w	sp!, {r4, lr}
    if (ret) 
  {   sd_setError(SD_CARD_ERROR_READ_REG);
    sd_chipSelect(HIGH);
    return FALSE;
    }
  ret= sd_readData(dst, 16);
    7d74:	b.w	7c48 <sd_readData(unsigned char*, unsigned int)>
    7d78:	movs	r0, #1
    7d7a:	bl	7a6c <sd_chipSelect(unsigned short) [clone .part.0]>
  return ret;
}
    7d7e:	movs	r0, #0
    7d80:	pop	{r4, pc}
    7d82:	nop
    7d84:	.word	0x20000aec
    7d88:	.word	0x2000e44a

00007d8c <sd_connect()>:
 * can be determined by calling errorCode() and errorData().
 */
 uint8_t sdCommandAndResponse(uint8_t cmd, uint32_t param);
 
int sd_connect()
{ int kk;
    7d8c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7d90:	ldr	r6, [pc, #384]	; (7f14 <sd_connect()+0x188>)
    7d92:	ldr	r5, [pc, #388]	; (7f18 <sd_connect()+0x18c>)
    7d94:	ldrh	r3, [r6, #0]
    7d96:	ldr	r7, [r5, #0]
    7d98:	cmp	r3, #0
    7d9a:	bne.n	7e0c <sd_connect()+0x80>
  uint32_t arg;
  // uint8_t ret;
  // command to go idle in SPI mode
  sd_chipSelect(LOW);

  while (sd_cardCommand(CMD0, 0) != R1_IDLE_STATE) 
    7d9c:	movs	r1, #0
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7d9e:	ldr	r4, [pc, #380]	; (7f1c <sd_connect()+0x190>)
  uint32_t arg;
  // uint8_t ret;
  // command to go idle in SPI mode
  sd_chipSelect(LOW);

  while (sd_cardCommand(CMD0, 0) != R1_IDLE_STATE) 
    7da0:	mov	r0, r1
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7da2:	mov	r8, r4
  uint32_t arg;
  // uint8_t ret;
  // command to go idle in SPI mode
  sd_chipSelect(LOW);

  while (sd_cardCommand(CMD0, 0) != R1_IDLE_STATE) 
    7da4:	bl	7b28 <sd_cardCommand(unsigned char, unsigned long)>
    7da8:	cmp	r0, #1
    7daa:	beq.n	7dd6 <sd_connect()+0x4a>
    7dac:	ldr	r2, [r5, #0]
  {
    t1=(uint16_t)millis();
    if ((t1- t0) > SD_INIT_TIMEOUT) {
    7dae:	uxth	r3, r7
    7db0:	uxth	r2, r2
    7db2:	subs	r3, r2, r3
    7db4:	cmp.w	r3, #4000	; 0xfa0
    7db8:	bgt.n	7df8 <sd_connect()+0x6c>
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7dba:	movs	r3, #255	; 0xff
    7dbc:	str	r3, [r4, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7dbe:	ldr	r3, [r4, #92]	; 0x5c
		if (fifo > 0) return spi->RDR; 
    7dc0:	tst.w	r3, #2031616	; 0x1f0000
    7dc4:	beq.n	7dbe <sd_connect()+0x32>
  uint32_t arg;
  // uint8_t ret;
  // command to go idle in SPI mode
  sd_chipSelect(LOW);

  while (sd_cardCommand(CMD0, 0) != R1_IDLE_STATE) 
    7dc6:	movs	r1, #0
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
		if (fifo > 0) return spi->RDR; 
    7dc8:	ldr.w	r3, [r8, #116]	; 0x74
  uint32_t arg;
  // uint8_t ret;
  // command to go idle in SPI mode
  sd_chipSelect(LOW);

  while (sd_cardCommand(CMD0, 0) != R1_IDLE_STATE) 
    7dcc:	mov	r0, r1
    7dce:	bl	7b28 <sd_cardCommand(unsigned char, unsigned long)>
    7dd2:	cmp	r0, #1
    7dd4:	bne.n	7dac <sd_connect()+0x20>
    }
   spi_send(0XFF);
  }
  
#ifdef USE_SD_CRC
  if (sd_cardCommand(CMD59, 1) != R1_IDLE_STATE) {
    7dd6:	mov	r1, r0
    7dd8:	movs	r0, #59	; 0x3b
    7dda:	bl	7b28 <sd_cardCommand(unsigned char, unsigned long)>
    7dde:	cmp	r0, #1
    7de0:	beq.n	7e14 <sd_connect()+0x88>
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    7de2:	ldr	r3, [pc, #316]	; (7f20 <sd_connect()+0x194>)
    7de4:	movs	r2, #26
    7de6:	strh	r2, [r3, #0]
  
  sd_chipSelect(HIGH);
  return TRUE;

  fail:
  Serial.printf("E connect %d\n", m_sd_errorCode);
    7de8:	ldr	r1, [pc, #312]	; (7f24 <sd_connect()+0x198>)
    7dea:	ldr	r0, [pc, #316]	; (7f28 <sd_connect()+0x19c>)
    7dec:	bl	a52c <Print::printf(char const*, ...)>
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7df0:	ldrh	r0, [r6, #0]
    7df2:	cbnz	r0, 7e00 <sd_connect()+0x74>

  fail:
  Serial.printf("E connect %d\n", m_sd_errorCode);
  sd_chipSelect(HIGH);
  return FALSE;
}
    7df4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    7df8:	ldr	r3, [pc, #292]	; (7f20 <sd_connect()+0x194>)
    7dfa:	movs	r2, #1
    7dfc:	strh	r2, [r3, #0]
    7dfe:	b.n	7de8 <sd_connect()+0x5c>
    7e00:	movs	r0, #1
    7e02:	bl	7a6c <sd_chipSelect(unsigned short) [clone .part.0]>
  return TRUE;

  fail:
  Serial.printf("E connect %d\n", m_sd_errorCode);
  sd_chipSelect(HIGH);
  return FALSE;
    7e06:	movs	r0, #0
    7e08:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7e0c:	movs	r0, #0
    7e0e:	bl	7a6c <sd_chipSelect(unsigned short) [clone .part.0]>
    7e12:	b.n	7d9c <sd_connect()+0x10>
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7e14:	ldr	r4, [pc, #260]	; (7f1c <sd_connect()+0x190>)
    7e16:	ldr	r7, [r5, #0]
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7e18:	mov	r8, r4

  // check SD version
  t0  = (uint16_t)millis();
  while (1) 
  {
    if (sd_cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) 
    7e1a:	mov.w	r1, #426	; 0x1aa
    7e1e:	movs	r0, #8
    7e20:	bl	7b28 <sd_cardCommand(unsigned char, unsigned long)>
    7e24:	cmp	r0, #5
    7e26:	beq.n	7ea2 <sd_connect()+0x116>
    7e28:	movs	r2, #4
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7e2a:	movs	r1, #255	; 0xff
    7e2c:	str	r1, [r4, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7e2e:	ldr	r3, [r4, #92]	; 0x5c
		if (fifo > 0) return spi->RDR; 
    7e30:	tst.w	r3, #2031616	; 0x1f0000
    7e34:	beq.n	7e2e <sd_connect()+0xa2>
    7e36:	ldr.w	r3, [r8, #116]	; 0x74
    if (sd_cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) 
  	{
      sd_setType(SD_CARD_TYPE_SD1);
      break;
    }
    for (kk = 0; kk < 4; kk++) m_sd_status = spi_receive();
    7e3a:	subs	r2, #1
    7e3c:	uxtb	r3, r3
    7e3e:	bne.n	7e2c <sd_connect()+0xa0>
    7e40:	ldr	r2, [pc, #232]	; (7f2c <sd_connect()+0x1a0>)
    if (m_sd_status == 0XAA) 
    7e42:	cmp	r3, #170	; 0xaa
    7e44:	strh	r3, [r2, #0]
    7e46:	beq.n	7e5e <sd_connect()+0xd2>
    7e48:	ldr	r2, [r5, #0]
	{
		sd_setType(SD_CARD_TYPE_SD2);
		break;
	}
	if (((uint16_t)millis() - t0) > SD_INIT_TIMEOUT) 
    7e4a:	uxth	r3, r7
    7e4c:	uxth	r2, r2
    7e4e:	subs	r3, r2, r3
    7e50:	cmp.w	r3, #4000	; 0xfa0
    7e54:	ble.n	7e1a <sd_connect()+0x8e>
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    7e56:	ldr	r3, [pc, #200]	; (7f20 <sd_connect()+0x194>)
    7e58:	movs	r2, #2
    7e5a:	strh	r2, [r3, #0]
    7e5c:	b.n	7de8 <sd_connect()+0x5c>
uint16_t sd_getError(void) {return m_sd_errorCode;}

void sd_setType(uint16_t type) {m_sd_type=type;}
    7e5e:	ldr.w	r8, [pc, #208]	; 7f30 <sd_connect()+0x1a4>
    7e62:	movs	r3, #2
      goto fail;
    }
  }
  
  // initialize card and send host supports SDHC if SD2
  arg = (sd_getType() == SD_CARD_TYPE_SD2) ? 0X40000000 : 0;
    7e64:	mov.w	r4, #1073741824	; 0x40000000

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
uint16_t sd_getError(void) {return m_sd_errorCode;}

void sd_setType(uint16_t type) {m_sd_type=type;}
    7e68:	strh.w	r3, [r8]
    7e6c:	ldr	r7, [r5, #0]
    7e6e:	b.n	7e7c <sd_connect()+0xf0>
    7e70:	ldr	r3, [r5, #0]
  t0  = (uint16_t)millis();
  while (sd_cardAcmd(ACMD41, arg) != R1_READY_STATE) 
  {
    // check for timeout
	t1  = (uint16_t)millis();
    if ((t1 - t0) > SD_INIT_TIMEOUT) 
    7e72:	uxth	r3, r3
    7e74:	subs	r3, r3, r2
    7e76:	cmp.w	r3, #4000	; 0xfa0
    7e7a:	bgt.n	7eb0 <sd_connect()+0x124>
  uint16_t sd_readCID(cid_t* cid) {  return sd_readRegister(CMD10, cid); }
  uint16_t sd_readCSD(csd_t* csd) {  return sd_readRegister(CMD9, csd); }

 
uint8_t sd_cardAcmd(uint8_t cmd, uint32_t arg) 
{   sd_cardCommand(CMD55, 0);
    7e7c:	movs	r1, #0
    7e7e:	movs	r0, #55	; 0x37
    7e80:	bl	7b28 <sd_cardCommand(unsigned char, unsigned long)>
    return sd_cardCommand(cmd, arg);
    7e84:	mov	r1, r4
    7e86:	movs	r0, #41	; 0x29
    7e88:	bl	7b28 <sd_cardCommand(unsigned char, unsigned long)>
  t0  = (uint16_t)millis();
  while (sd_cardAcmd(ACMD41, arg) != R1_READY_STATE) 
  {
    // check for timeout
	t1  = (uint16_t)millis();
    if ((t1 - t0) > SD_INIT_TIMEOUT) 
    7e8c:	uxth	r2, r7
  
  // initialize card and send host supports SDHC if SD2
  arg = (sd_getType() == SD_CARD_TYPE_SD2) ? 0X40000000 : 0;

  t0  = (uint16_t)millis();
  while (sd_cardAcmd(ACMD41, arg) != R1_READY_STATE) 
    7e8e:	cmp	r0, #0
    7e90:	bne.n	7e70 <sd_connect()+0xe4>
      goto fail;
    }
  }

  // if SD2 read OCR register to check for SDHC card
  if (sd_getType() == SD_CARD_TYPE_SD2) 
    7e92:	ldrh.w	r3, [r8]
    7e96:	cmp	r3, #2
    7e98:	beq.n	7eb8 <sd_connect()+0x12c>
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7e9a:	ldrh	r3, [r6, #0]
    7e9c:	cbnz	r3, 7eca <sd_connect()+0x13e>
    // Discard rest of ocr - contains allowed voltage range.
    for (kk = 0; kk < 3; kk++) spi_receive();
  }
  
  sd_chipSelect(HIGH);
  return TRUE;
    7e9e:	movs	r0, #1
    7ea0:	b.n	7df4 <sd_connect()+0x68>

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
uint16_t sd_getError(void) {return m_sd_errorCode;}

void sd_setType(uint16_t type) {m_sd_type=type;}
    7ea2:	ldr.w	r8, [pc, #140]	; 7f30 <sd_connect()+0x1a4>
    7ea6:	movs	r3, #1
      goto fail;
    }
  }
  
  // initialize card and send host supports SDHC if SD2
  arg = (sd_getType() == SD_CARD_TYPE_SD2) ? 0X40000000 : 0;
    7ea8:	movs	r4, #0

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
uint16_t sd_getError(void) {return m_sd_errorCode;}

void sd_setType(uint16_t type) {m_sd_type=type;}
    7eaa:	strh.w	r3, [r8]
    7eae:	b.n	7e6c <sd_connect()+0xe0>
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    7eb0:	ldr	r3, [pc, #108]	; (7f20 <sd_connect()+0x194>)
    7eb2:	movs	r2, #10
    7eb4:	strh	r2, [r3, #0]
    7eb6:	b.n	7de8 <sd_connect()+0x5c>
  }

  // if SD2 read OCR register to check for SDHC card
  if (sd_getType() == SD_CARD_TYPE_SD2) 
  {
    if (sd_cardCommand(CMD58, 0))
    7eb8:	mov	r1, r0
    7eba:	movs	r0, #58	; 0x3a
    7ebc:	bl	7b28 <sd_cardCommand(unsigned char, unsigned long)>
    7ec0:	cbz	r0, 7ed6 <sd_connect()+0x14a>
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    7ec2:	ldr	r3, [pc, #92]	; (7f20 <sd_connect()+0x194>)
    7ec4:	movs	r2, #8
    7ec6:	strh	r2, [r3, #0]
    7ec8:	b.n	7de8 <sd_connect()+0x5c>
    7eca:	movs	r0, #1
    7ecc:	bl	7a6c <sd_chipSelect(unsigned short) [clone .part.0]>
    // Discard rest of ocr - contains allowed voltage range.
    for (kk = 0; kk < 3; kk++) spi_receive();
  }
  
  sd_chipSelect(HIGH);
  return TRUE;
    7ed0:	movs	r0, #1
    7ed2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7ed6:	ldr	r3, [pc, #68]	; (7f1c <sd_connect()+0x190>)
    7ed8:	movs	r2, #255	; 0xff
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7eda:	mov	r1, r3
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7edc:	str	r2, [r3, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7ede:	ldr	r2, [r1, #92]	; 0x5c
    7ee0:	ldr	r3, [pc, #56]	; (7f1c <sd_connect()+0x190>)
		if (fifo > 0) return spi->RDR; 
    7ee2:	tst.w	r2, #2031616	; 0x1f0000
    7ee6:	beq.n	7ede <sd_connect()+0x152>
    7ee8:	ldr	r3, [r3, #116]	; 0x74
    if (sd_cardCommand(CMD58, 0))
	{
      sd_setError(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spi_receive() & 0XC0) == 0XC0) sd_setType(SD_CARD_TYPE_SDHC);
    7eea:	and.w	r3, r3, #192	; 0xc0
    7eee:	cmp	r3, #192	; 0xc0
    7ef0:	bne.n	7ef8 <sd_connect()+0x16c>

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
uint16_t sd_getError(void) {return m_sd_errorCode;}

void sd_setType(uint16_t type) {m_sd_type=type;}
    7ef2:	movs	r3, #3
    7ef4:	strh.w	r3, [r8]
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7ef8:	ldr	r3, [pc, #32]	; (7f1c <sd_connect()+0x190>)
      goto fail;
    }
  }
  
  // initialize card and send host supports SDHC if SD2
  arg = (sd_getType() == SD_CARD_TYPE_SD2) ? 0X40000000 : 0;
    7efa:	movs	r2, #3
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7efc:	movs	r0, #255	; 0xff
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7efe:	mov	r1, r3
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    7f00:	str	r0, [r3, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    7f02:	ldr	r4, [r3, #92]	; 0x5c
		if (fifo > 0) return spi->RDR; 
    7f04:	tst.w	r4, #2031616	; 0x1f0000
    7f08:	beq.n	7f02 <sd_connect()+0x176>
      sd_setError(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spi_receive() & 0XC0) == 0XC0) sd_setType(SD_CARD_TYPE_SDHC);
    // Discard rest of ocr - contains allowed voltage range.
    for (kk = 0; kk < 3; kk++) spi_receive();
    7f0a:	subs	r2, #1
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
		if (fifo > 0) return spi->RDR; 
    7f0c:	ldr	r4, [r1, #116]	; 0x74
      sd_setError(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spi_receive() & 0XC0) == 0XC0) sd_setType(SD_CARD_TYPE_SDHC);
    // Discard rest of ocr - contains allowed voltage range.
    for (kk = 0; kk < 3; kk++) spi_receive();
    7f0e:	bne.n	7f00 <sd_connect()+0x174>
    7f10:	b.n	7e9a <sd_connect()+0x10e>
    7f12:	nop
    7f14:	.word	0x20000aec
    7f18:	.word	0x2000e684
    7f1c:	.word	0x403a0000
    7f20:	.word	0x2000e44a
    7f24:	.word	0x200002f8
    7f28:	.word	0x20000b20
    7f2c:	.word	0x2000e448
    7f30:	.word	0x2000e44c

00007f34 <sd_cardSize()>:
 *
 * \return The number of 512 byte data blocks in the card
 *         or zero if an error occurs.
 */
uint32_t sd_cardSize(void) 
{
    7f34:	push	{r4, r5, lr}
    7f36:	sub	sp, #20
  ret= sd_readData(dst, 16);
  return ret;
}

  uint16_t sd_readCID(cid_t* cid) {  return sd_readRegister(CMD10, cid); }
  uint16_t sd_readCSD(csd_t* csd) {  return sd_readRegister(CMD9, csd); }
    7f38:	movs	r0, #9
    7f3a:	mov	r1, sp
    7f3c:	bl	7d50 <sd_readRegister(unsigned char, void*)>
uint32_t sd_cardSize(void) 
{
  csd_t csd;
  uint16_t ret;
  //
  if (!(ret=sd_readCSD(&csd))) return 0;
    7f40:	cbz	r0, 7f58 <sd_cardSize()+0x24>
  //
  if (csd.v1.csd_ver == 0) 
    7f42:	ldrb.w	r3, [sp]
    7f46:	ands.w	r3, r3, #192	; 0xc0
    7f4a:	beq.n	7f5c <sd_cardSize()+0x28>
                      | (csd.v1.c_size_mid << 2) | csd.v1.c_size_low;
    uint8_t c_size_mult = (csd.v1.c_size_mult_high << 1)
                          | csd.v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } 
  else if (csd.v2.csd_ver == 1) 
    7f4c:	cmp	r3, #64	; 0x40
    7f4e:	beq.n	7f9e <sd_cardSize()+0x6a>
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    7f50:	ldr	r3, [pc, #104]	; (7fbc <sd_cardSize()+0x88>)
    7f52:	movs	r2, #11
    return (c_size + 1) <<9;
  } 
  else 
  {
    sd_setError(SD_CARD_ERROR_BAD_CSD);
    return 0;
    7f54:	movs	r0, #0
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    7f56:	strh	r2, [r3, #0]
  else 
  {
    sd_setError(SD_CARD_ERROR_BAD_CSD);
    return 0;
  }
}
    7f58:	add	sp, #20
    7f5a:	pop	{r4, r5, pc}
  if (csd.v1.csd_ver == 0) 
  {
    uint8_t read_bl_len = csd.v1.read_bl_len;
    uint16_t c_size = (csd.v1.c_size_high << 10)
                      | (csd.v1.c_size_mid << 2) | csd.v1.c_size_low;
    uint8_t c_size_mult = (csd.v1.c_size_mult_high << 1)
    7f5c:	ldrb.w	r4, [sp, #9]
  if (!(ret=sd_readCSD(&csd))) return 0;
  //
  if (csd.v1.csd_ver == 0) 
  {
    uint8_t read_bl_len = csd.v1.read_bl_len;
    uint16_t c_size = (csd.v1.c_size_high << 10)
    7f60:	ldrb.w	r3, [sp, #6]
                      | (csd.v1.c_size_mid << 2) | csd.v1.c_size_low;
    uint8_t c_size_mult = (csd.v1.c_size_mult_high << 1)
                          | csd.v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7f64:	ldrb.w	r2, [sp, #7]
    7f68:	and.w	r4, r4, #3
  {
    uint8_t read_bl_len = csd.v1.read_bl_len;
    uint16_t c_size = (csd.v1.c_size_high << 10)
                      | (csd.v1.c_size_mid << 2) | csd.v1.c_size_low;
    uint8_t c_size_mult = (csd.v1.c_size_mult_high << 1)
                          | csd.v1.c_size_mult_low;
    7f6c:	ldrb.w	r0, [sp, #10]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7f70:	and.w	r3, r3, #3
    7f74:	lsls	r4, r4, #1
  //
  if (!(ret=sd_readCSD(&csd))) return 0;
  //
  if (csd.v1.csd_ver == 0) 
  {
    uint8_t read_bl_len = csd.v1.read_bl_len;
    7f76:	ldrb.w	r1, [sp, #5]
    uint16_t c_size = (csd.v1.c_size_high << 10)
                      | (csd.v1.c_size_mid << 2) | csd.v1.c_size_low;
    uint8_t c_size_mult = (csd.v1.c_size_mult_high << 1)
                          | csd.v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7f7a:	lsls	r2, r2, #2
  //
  if (csd.v1.csd_ver == 0) 
  {
    uint8_t read_bl_len = csd.v1.read_bl_len;
    uint16_t c_size = (csd.v1.c_size_high << 10)
                      | (csd.v1.c_size_mid << 2) | csd.v1.c_size_low;
    7f7c:	ldrb.w	r5, [sp, #8]
    uint8_t c_size_mult = (csd.v1.c_size_mult_high << 1)
                          | csd.v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7f80:	orr.w	r0, r4, r0, lsr #7
    7f84:	and.w	r1, r1, #15
    7f88:	orr.w	r3, r2, r3, lsl #10
    7f8c:	add	r0, r1
    7f8e:	orr.w	r3, r3, r5, lsr #6
    7f92:	subs	r0, #7
    7f94:	adds	r3, #1
    7f96:	lsl.w	r0, r3, r0
  else 
  {
    sd_setError(SD_CARD_ERROR_BAD_CSD);
    return 0;
  }
}
    7f9a:	add	sp, #20
    7f9c:	pop	{r4, r5, pc}
  } 
  else if (csd.v2.csd_ver == 1) 
  {
    uint32_t c_size = 0X10000L * csd.v2.c_size_high + 0X100L
                      * (uint32_t)csd.v2.c_size_mid + csd.v2.c_size_low;
    return (c_size + 1) <<9;
    7f9e:	ldrb.w	r3, [sp, #9]
    7fa2:	ldrb.w	r2, [sp, #8]
    7fa6:	adds	r3, #1
                          | csd.v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } 
  else if (csd.v2.csd_ver == 1) 
  {
    uint32_t c_size = 0X10000L * csd.v2.c_size_high + 0X100L
    7fa8:	ldrb.w	r0, [sp, #7]
                      * (uint32_t)csd.v2.c_size_mid + csd.v2.c_size_low;
    return (c_size + 1) <<9;
    7fac:	add.w	r3, r3, r2, lsl #8
    7fb0:	and.w	r0, r0, #63	; 0x3f
    7fb4:	add.w	r0, r3, r0, lsl #16
    7fb8:	lsls	r0, r0, #9
    7fba:	b.n	7f58 <sd_cardSize()+0x24>
    7fbc:	.word	0x2000e44a

00007fc0 <sd_readBlock(unsigned long, unsigned char*)>:
// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
uint16_t sd_getError(void) {return m_sd_errorCode;}

void sd_setType(uint16_t type) {m_sd_type=type;}
uint16_t sd_getType(void) {return m_sd_type;}
    7fc0:	ldr	r3, [pc, #60]	; (8000 <sd_readBlock(unsigned long, unsigned char*)+0x40>)
 
uint16_t sd_readBlock(uint32_t blockNumber, uint8_t* dst) 
{
//  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (sd_getType()!= SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    7fc2:	ldrh	r3, [r3, #0]
    7fc4:	cmp	r3, #3
    7fc6:	it	ne
    7fc8:	lslne	r0, r0, #9
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
 
uint16_t sd_readBlock(uint32_t blockNumber, uint8_t* dst) 
{
    7fca:	push	{r4, lr}
    7fcc:	mov	r4, r1
//  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (sd_getType()!= SD_CARD_TYPE_SDHC) blockNumber <<= 9;
  if (sd_cardCommand(CMD17, blockNumber)) {
    7fce:	mov	r1, r0
    7fd0:	movs	r0, #17
    7fd2:	bl	7b28 <sd_cardCommand(unsigned char, unsigned long)>
    7fd6:	cbz	r0, 7fe8 <sd_readBlock(unsigned long, unsigned char*)+0x28>
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7fd8:	ldr	r3, [pc, #40]	; (8004 <sd_readBlock(unsigned long, unsigned char*)+0x44>)
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    7fda:	movs	r1, #4
    7fdc:	ldr	r2, [pc, #40]	; (8008 <sd_readBlock(unsigned long, unsigned char*)+0x48>)
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7fde:	ldrh	r3, [r3, #0]
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    7fe0:	strh	r1, [r2, #0]
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    7fe2:	cbnz	r3, 7ff6 <sd_readBlock(unsigned long, unsigned char*)+0x36>
  return sd_readData(dst, 512);

 fail:
  sd_chipSelect(HIGH);
  return FALSE;
}
    7fe4:	movs	r0, #0
    7fe6:	pop	{r4, pc}
  if (sd_getType()!= SD_CARD_TYPE_SDHC) blockNumber <<= 9;
  if (sd_cardCommand(CMD17, blockNumber)) {
    sd_setError(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  return sd_readData(dst, 512);
    7fe8:	mov	r0, r4
    7fea:	mov.w	r1, #512	; 0x200

 fail:
  sd_chipSelect(HIGH);
  return FALSE;
}
    7fee:	ldmia.w	sp!, {r4, lr}
  if (sd_getType()!= SD_CARD_TYPE_SDHC) blockNumber <<= 9;
  if (sd_cardCommand(CMD17, blockNumber)) {
    sd_setError(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  return sd_readData(dst, 512);
    7ff2:	b.w	7c48 <sd_readData(unsigned char*, unsigned int)>
    7ff6:	movs	r0, #1
    7ff8:	bl	7a6c <sd_chipSelect(unsigned short) [clone .part.0]>

 fail:
  sd_chipSelect(HIGH);
  return FALSE;
}
    7ffc:	movs	r0, #0
    7ffe:	pop	{r4, pc}
    8000:	.word	0x2000e44c
    8004:	.word	0x20000aec
    8008:	.word	0x2000e44a

0000800c <sd_readData2(unsigned char*)>:
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    800c:	ldr	r3, [pc, #28]	; (802c <sd_readData2(unsigned char*)+0x20>)
    800e:	ldrh	r3, [r3, #0]
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint16_t sd_readData2(uint8_t *dst) 
{
    8010:	push	{r4, lr}
    8012:	mov	r4, r0
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    8014:	cbz	r3, 801c <sd_readData2(unsigned char*)+0x10>
    8016:	movs	r0, #0
    8018:	bl	7a6c <sd_chipSelect(unsigned short) [clone .part.0]>
 * the value zero, false, is returned for failure.
 */
uint16_t sd_readData2(uint8_t *dst) 
{
  sd_chipSelect(LOW);
  return sd_readData(dst, 512);
    801c:	mov	r0, r4
    801e:	mov.w	r1, #512	; 0x200
}
    8022:	ldmia.w	sp!, {r4, lr}
 * the value zero, false, is returned for failure.
 */
uint16_t sd_readData2(uint8_t *dst) 
{
  sd_chipSelect(LOW);
  return sd_readData(dst, 512);
    8026:	b.w	7c48 <sd_readData(unsigned char*, unsigned int)>
    802a:	nop
    802c:	.word	0x20000aec

00008030 <sd_readStart(unsigned long)>:
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint16_t sd_readStart(uint32_t blockNumber) 
{
    8030:	push	{r3, lr}
// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
uint16_t sd_getError(void) {return m_sd_errorCode;}

void sd_setType(uint16_t type) {m_sd_type=type;}
uint16_t sd_getType(void) {return m_sd_type;}
    8032:	ldr	r3, [pc, #60]	; (8070 <sd_readStart(unsigned long)+0x40>)
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint16_t sd_readStart(uint32_t blockNumber) 
{
    8034:	mov	r1, r0
  //SD_TRACE("RS", blockNumber);
  if (sd_getType()!= SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    8036:	ldrh	r3, [r3, #0]
    8038:	cmp	r3, #3
    803a:	it	ne
    803c:	lslne	r1, r0, #9
  if (sd_cardCommand(CMD18, blockNumber)) {
    803e:	movs	r0, #18
    8040:	bl	7b28 <sd_cardCommand(unsigned char, unsigned long)>
    8044:	cbz	r0, 8054 <sd_readStart(unsigned long)+0x24>
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    8046:	ldr	r1, [pc, #44]	; (8074 <sd_readStart(unsigned long)+0x44>)
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    8048:	movs	r2, #5
    804a:	ldr	r3, [pc, #44]	; (8078 <sd_readStart(unsigned long)+0x48>)
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    804c:	ldrh	r0, [r1, #0]
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    804e:	strh	r2, [r3, #0]
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    8050:	cbnz	r0, 8066 <sd_readStart(unsigned long)+0x36>
  return TRUE;

 fail:
  sd_chipSelect(HIGH);
  return FALSE;
}
    8052:	pop	{r3, pc}
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    8054:	ldr	r3, [pc, #28]	; (8074 <sd_readStart(unsigned long)+0x44>)
  if (sd_cardCommand(CMD18, blockNumber)) {
    sd_setError(SD_CARD_ERROR_CMD18);
    goto fail;
  }
  sd_chipSelect(HIGH);
  return TRUE;
    8056:	movs	r0, #1
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    8058:	ldrh	r3, [r3, #0]
    805a:	cmp	r3, #0
    805c:	beq.n	8052 <sd_readStart(unsigned long)+0x22>
    805e:	bl	7a6c <sd_chipSelect(unsigned short) [clone .part.0]>
  if (sd_cardCommand(CMD18, blockNumber)) {
    sd_setError(SD_CARD_ERROR_CMD18);
    goto fail;
  }
  sd_chipSelect(HIGH);
  return TRUE;
    8062:	movs	r0, #1
    8064:	pop	{r3, pc}
    8066:	movs	r0, #1
    8068:	bl	7a6c <sd_chipSelect(unsigned short) [clone .part.0]>
    806c:	movs	r0, #0
    806e:	pop	{r3, pc}
    8070:	.word	0x2000e44c
    8074:	.word	0x20000aec
    8078:	.word	0x2000e44a

0000807c <sd_readStop()>:
* \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */

uint16_t sd_readStop() 
{
    807c:	push	{r3, lr}
  if (sd_cardCommand(CMD12, 0)) {
    807e:	movs	r1, #0
    8080:	movs	r0, #12
    8082:	bl	7b28 <sd_cardCommand(unsigned char, unsigned long)>
    8086:	cbz	r0, 8096 <sd_readStop()+0x1a>
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    8088:	ldr	r1, [pc, #40]	; (80b4 <sd_readStop()+0x38>)
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    808a:	movs	r2, #3
    808c:	ldr	r3, [pc, #40]	; (80b8 <sd_readStop()+0x3c>)
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    808e:	ldrh	r0, [r1, #0]
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    8090:	strh	r2, [r3, #0]
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    8092:	cbnz	r0, 80a8 <sd_readStop()+0x2c>
  return TRUE;

 fail:
  sd_chipSelect(HIGH);
  return FALSE;
}
    8094:	pop	{r3, pc}
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    8096:	ldr	r3, [pc, #28]	; (80b4 <sd_readStop()+0x38>)
  if (sd_cardCommand(CMD12, 0)) {
    sd_setError(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  sd_chipSelect(HIGH);
  return TRUE;
    8098:	movs	r0, #1
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    809a:	ldrh	r3, [r3, #0]
    809c:	cmp	r3, #0
    809e:	beq.n	8094 <sd_readStop()+0x18>
    80a0:	bl	7a6c <sd_chipSelect(unsigned short) [clone .part.0]>
  if (sd_cardCommand(CMD12, 0)) {
    sd_setError(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  sd_chipSelect(HIGH);
  return TRUE;
    80a4:	movs	r0, #1
    80a6:	pop	{r3, pc}
    80a8:	movs	r0, #1
    80aa:	bl	7a6c <sd_chipSelect(unsigned short) [clone .part.0]>
    80ae:	movs	r0, #0
    80b0:	pop	{r3, pc}
    80b2:	nop
    80b4:	.word	0x20000aec
    80b8:	.word	0x2000e44a

000080bc <SPI_disk_read(unsigned char*, unsigned long, unsigned int)>:
}

DRESULT SPI_disk_read(BYTE *buff, DWORD sector, UINT count)
{	
	DRESULT res = RES_OK;
	if(count==1)
    80bc:	cmp	r2, #1
    
    return 0;
}

DRESULT SPI_disk_read(BYTE *buff, DWORD sector, UINT count)
{	
    80be:	push	{r3, r4, r5, r6, r7, lr}
    80c0:	mov	r4, r0
    80c2:	mov	r0, r1
	DRESULT res = RES_OK;
	if(count==1)
    80c4:	beq.n	80fa <SPI_disk_read(unsigned char*, unsigned long, unsigned int)+0x3e>
    80c6:	mov	r7, r2
	{
		if(!sd_readBlock(sector, buff)) res = RES_READERROR;
	}
	else
	{
		if(!sd_readStart(sector)) res = RES_READERROR;
    80c8:	bl	8030 <sd_readStart(unsigned long)>
    80cc:	cmp	r0, #0
    80ce:	ite	ne
    80d0:	movne	r6, #0
    80d2:	moveq	r6, #6
		for(UINT ii=0; ii<count;ii++)
    80d4:	cbz	r7, 80ee <SPI_disk_read(unsigned char*, unsigned long, unsigned int)+0x32>
    80d6:	movs	r5, #0
		{
		if(!sd_readData2(buff)) res = RES_READERROR;
    80d8:	mov	r0, r4
		if(!sd_readBlock(sector, buff)) res = RES_READERROR;
	}
	else
	{
		if(!sd_readStart(sector)) res = RES_READERROR;
		for(UINT ii=0; ii<count;ii++)
    80da:	adds	r5, #1
		{
		if(!sd_readData2(buff)) res = RES_READERROR;
    80dc:	bl	800c <sd_readData2(unsigned char*)>
    80e0:	cmp	r0, #0
		sector++;
		buff += 512;    
    80e2:	add.w	r4, r4, #512	; 0x200
	else
	{
		if(!sd_readStart(sector)) res = RES_READERROR;
		for(UINT ii=0; ii<count;ii++)
		{
		if(!sd_readData2(buff)) res = RES_READERROR;
    80e6:	it	eq
    80e8:	moveq	r6, #6
		if(!sd_readBlock(sector, buff)) res = RES_READERROR;
	}
	else
	{
		if(!sd_readStart(sector)) res = RES_READERROR;
		for(UINT ii=0; ii<count;ii++)
    80ea:	cmp	r7, r5
    80ec:	bne.n	80d8 <SPI_disk_read(unsigned char*, unsigned long, unsigned int)+0x1c>
		{
		if(!sd_readData2(buff)) res = RES_READERROR;
		sector++;
		buff += 512;    
		}
		if(!sd_readStop()) res = RES_READERROR;
    80ee:	bl	807c <sd_readStop()>
    80f2:	cbnz	r0, 80f6 <SPI_disk_read(unsigned char*, unsigned long, unsigned int)+0x3a>
DRESULT SPI_disk_read(BYTE *buff, DWORD sector, UINT count)
{	
	DRESULT res = RES_OK;
	if(count==1)
	{
		if(!sd_readBlock(sector, buff)) res = RES_READERROR;
    80f4:	movs	r6, #6
		}
		if(!sd_readStop()) res = RES_READERROR;
	}

    return res;
}
    80f6:	mov	r0, r6
    80f8:	pop	{r3, r4, r5, r6, r7, pc}
DRESULT SPI_disk_read(BYTE *buff, DWORD sector, UINT count)
{	
	DRESULT res = RES_OK;
	if(count==1)
	{
		if(!sd_readBlock(sector, buff)) res = RES_READERROR;
    80fa:	mov	r1, r4
    80fc:	bl	7fc0 <sd_readBlock(unsigned long, unsigned char*)>
    8100:	cmp	r0, #0
    8102:	beq.n	80f4 <SPI_disk_read(unsigned char*, unsigned long, unsigned int)+0x38>
    return 0;
}

DRESULT SPI_disk_read(BYTE *buff, DWORD sector, UINT count)
{	
	DRESULT res = RES_OK;
    8104:	movs	r6, #0
    8106:	b.n	80f6 <SPI_disk_read(unsigned char*, unsigned long, unsigned int)+0x3a>

00008108 <sd_writeData(unsigned char, unsigned char const*)>:
}

//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
uint16_t sd_writeData(uint8_t token, const uint8_t* src) 
{
    8108:	push	{r3, r4, r5, r6, r7, lr}
    810a:	subs	r2, r1, #1
      0xEF1F, 0xFF3E, 0xCF5D, 0xDF7C, 0xAF9B, 0xBFBA, 0x8FD9, 0x9FF8,
      0x6E17, 0x7E36, 0x4E55, 0x5E74, 0x2E93, 0x3EB2, 0x0ED1, 0x1EF0
    };

    static uint16_t CRC_CCITT(const uint8_t* data, size_t n) {
      uint16_t crc = 0;
    810c:	movs	r5, #0
    810e:	ldr	r7, [pc, #156]	; (81ac <sd_writeData(unsigned char, unsigned char const*)+0xa4>)
    8110:	addw	r6, r1, #511	; 0x1ff
      size_t ii;
      for (ii = 0; ii < n; ii++) {
      crc = crctab[(crc >> 8 ^ data[ii]) & 0XFF] ^ (crc << 8);
    8114:	ldrb.w	r3, [r2, #1]!
    8118:	eor.w	r3, r3, r5, lsr #8
    };

    static uint16_t CRC_CCITT(const uint8_t* data, size_t n) {
      uint16_t crc = 0;
      size_t ii;
      for (ii = 0; ii < n; ii++) {
    811c:	cmp	r6, r2
      crc = crctab[(crc >> 8 ^ data[ii]) & 0XFF] ^ (crc << 8);
    811e:	ldrh.w	r3, [r7, r3, lsl #1]
    8122:	eor.w	r4, r3, r5, lsl #8
    8126:	sxth	r4, r4
    8128:	uxth	r5, r4
    };

    static uint16_t CRC_CCITT(const uint8_t* data, size_t n) {
      uint16_t crc = 0;
      size_t ii;
      for (ii = 0; ii < n; ii++) {
    812a:	bne.n	8114 <sd_writeData(unsigned char, unsigned char const*)+0xc>
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    812c:	ldr	r3, [pc, #128]	; (81b0 <sd_writeData(unsigned char, unsigned char const*)+0xa8>)
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    812e:	mov	r2, r3
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    8130:	str	r0, [r3, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    8132:	ldr	r3, [r2, #92]	; 0x5c
    8134:	ldr	r6, [pc, #120]	; (81b0 <sd_writeData(unsigned char, unsigned char const*)+0xa8>)
		if (fifo > 0) return spi->RDR; 
    8136:	tst.w	r3, #2031616	; 0x1f0000
    813a:	beq.n	8132 <sd_writeData(unsigned char, unsigned char const*)+0x2a>
    813c:	mov	r0, r1
    813e:	mov.w	r2, #512	; 0x200
    8142:	movs	r1, #0
    8144:	ldr	r3, [r6, #116]	; 0x74
    8146:	bl	7abc <spi_transfer(void const*, void*, unsigned int) [clone .part.4]>
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    814a:	mov	r1, r6
    814c:	asrs	r3, r5, #8
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    814e:	str	r3, [r6, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    8150:	ldr	r3, [r1, #92]	; 0x5c
    8152:	ldr	r2, [pc, #92]	; (81b0 <sd_writeData(unsigned char, unsigned char const*)+0xa8>)
		if (fifo > 0) return spi->RDR; 
    8154:	tst.w	r3, #2031616	; 0x1f0000
    8158:	beq.n	8150 <sd_writeData(unsigned char, unsigned char const*)+0x48>
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    815a:	uxtb	r4, r4
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    815c:	mov	r1, r2
		if (fifo > 0) return spi->RDR; 
    815e:	ldr	r3, [r2, #116]	; 0x74
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    8160:	str	r4, [r2, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    8162:	ldr	r3, [r1, #92]	; 0x5c
    8164:	ldr	r2, [pc, #72]	; (81b0 <sd_writeData(unsigned char, unsigned char const*)+0xa8>)
		if (fifo > 0) return spi->RDR; 
    8166:	tst.w	r3, #2031616	; 0x1f0000
    816a:	beq.n	8162 <sd_writeData(unsigned char, unsigned char const*)+0x5a>
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    816c:	movs	r3, #255	; 0xff
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    816e:	mov	r1, r2
		if (fifo > 0) return spi->RDR; 
    8170:	ldr	r0, [r2, #116]	; 0x74
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    8172:	str	r3, [r2, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    8174:	ldr	r3, [r1, #92]	; 0x5c
    8176:	ldr	r2, [pc, #56]	; (81b0 <sd_writeData(unsigned char, unsigned char const*)+0xa8>)
		if (fifo > 0) return spi->RDR; 
    8178:	tst.w	r3, #2031616	; 0x1f0000
    817c:	beq.n	8174 <sd_writeData(unsigned char, unsigned char const*)+0x6c>
    817e:	ldr	r3, [r2, #116]	; 0x74

  spi_send(token);
  spi_sendBulk(src, 512);
  spi_send(crc >> 8);
  spi_send(crc & 0XFF);
  m_sd_status=spi_receive();
    8180:	ldr	r1, [pc, #48]	; (81b4 <sd_writeData(unsigned char, unsigned char const*)+0xac>)
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
		if (fifo > 0) return spi->RDR; 
    8182:	uxtb	r3, r3
  spi_sendBulk(src, 512);
  spi_send(crc >> 8);
  spi_send(crc & 0XFF);
  m_sd_status=spi_receive();

  if ((m_sd_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    8184:	and.w	r2, r3, #31

  spi_send(token);
  spi_sendBulk(src, 512);
  spi_send(crc >> 8);
  spi_send(crc & 0XFF);
  m_sd_status=spi_receive();
    8188:	strh	r3, [r1, #0]

  if ((m_sd_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    818a:	cmp	r2, #5
    818c:	beq.n	81a6 <sd_writeData(unsigned char, unsigned char const*)+0x9e>
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    818e:	ldr	r1, [pc, #40]	; (81b8 <sd_writeData(unsigned char, unsigned char const*)+0xb0>)
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    8190:	movs	r2, #19
    8192:	ldr	r3, [pc, #40]	; (81bc <sd_writeData(unsigned char, unsigned char const*)+0xb4>)
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    8194:	ldrh	r0, [r1, #0]
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    8196:	strh	r2, [r3, #0]
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    8198:	cbnz	r0, 819c <sd_writeData(unsigned char, unsigned char const*)+0x94>
  return TRUE;

 fail:
  sd_chipSelect(HIGH);
  return FALSE;
}
    819a:	pop	{r3, r4, r5, r6, r7, pc}
    819c:	movs	r0, #1
    819e:	bl	7a6c <sd_chipSelect(unsigned short) [clone .part.0]>
  }
  return TRUE;

 fail:
  sd_chipSelect(HIGH);
  return FALSE;
    81a2:	movs	r0, #0
    81a4:	pop	{r3, r4, r5, r6, r7, pc}
  if ((m_sd_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    sd_setError(SD_CARD_ERROR_WRITE);
//  fprintf(stderr,"write error %x\r\n",m_sd_status & DATA_RES_MASK);
    goto fail;
  }
  return TRUE;
    81a6:	movs	r0, #1

 fail:
  sd_chipSelect(HIGH);
  return FALSE;
}
    81a8:	pop	{r3, r4, r5, r6, r7, pc}
    81aa:	nop
    81ac:	.word	0x20000334
    81b0:	.word	0x403a0000
    81b4:	.word	0x2000e448
    81b8:	.word	0x20000aec
    81bc:	.word	0x2000e44a

000081c0 <sd_writeData2(unsigned char const*)>:
 * \param[in] src Pointer to the location of the data to be written.
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint16_t sd_writeData2(const uint8_t* src) 
{
    81c0:	push	{r3, r4, r5, r6, r7, lr}
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    81c2:	ldr	r4, [pc, #108]	; (8230 <sd_writeData2(unsigned char const*)+0x70>)
 * \param[in] src Pointer to the location of the data to be written.
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint16_t sd_writeData2(const uint8_t* src) 
{
    81c4:	mov	r5, r0
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    81c6:	ldrh	r3, [r4, #0]
    81c8:	cbnz	r3, 821e <sd_writeData2(unsigned char const*)+0x5e>
    81ca:	ldr	r1, [pc, #104]	; (8234 <sd_writeData2(unsigned char const*)+0x74>)
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    81cc:	movs	r7, #255	; 0xff
    81ce:	ldr	r2, [pc, #104]	; (8238 <sd_writeData2(unsigned char const*)+0x78>)
    81d0:	ldr	r0, [r1, #0]
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    81d2:	mov	r6, r2
{
  uint16_t t0;
  uint16_t ret;
  t0  = millis();
  while ((ret=spi_receive()) != 0XFF) 
  { if (((uint16_t)millis() - t0) >= timeoutMillis) return FALSE;
    81d4:	uxth	r0, r0
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    81d6:	str	r7, [r2, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    81d8:	ldr	r3, [r2, #92]	; 0x5c
		if (fifo > 0) return spi->RDR; 
    81da:	tst.w	r3, #2031616	; 0x1f0000
    81de:	beq.n	81d8 <sd_writeData2(unsigned char const*)+0x18>
    81e0:	ldr	r3, [r6, #116]	; 0x74
uint16_t sd_waitNotBusy(uint16_t timeoutMillis) 
{
  uint16_t t0;
  uint16_t ret;
  t0  = millis();
  while ((ret=spi_receive()) != 0XFF) 
    81e2:	uxtb	r3, r3
    81e4:	cmp	r3, #255	; 0xff
    81e6:	beq.n	8200 <sd_writeData2(unsigned char const*)+0x40>
    81e8:	ldr	r3, [r1, #0]
  { if (((uint16_t)millis() - t0) >= timeoutMillis) return FALSE;
    81ea:	uxth	r3, r3
    81ec:	subs	r3, r3, r0
    81ee:	cmp.w	r3, #600	; 0x258
    81f2:	blt.n	81d6 <sd_writeData2(unsigned char const*)+0x16>
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    81f4:	movs	r2, #21
    81f6:	ldr	r3, [pc, #68]	; (823c <sd_writeData2(unsigned char const*)+0x7c>)
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    81f8:	ldrh	r0, [r4, #0]
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    81fa:	strh	r2, [r3, #0]
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    81fc:	cbnz	r0, 8214 <sd_writeData2(unsigned char const*)+0x54>

 fail:
  sd_setError(SD_CARD_ERROR_WRITE_MULTIPLE);
  sd_chipSelect(HIGH);
  return FALSE;
}
    81fe:	pop	{r3, r4, r5, r6, r7, pc}
uint16_t sd_writeData2(const uint8_t* src) 
{
// unused // static long cnt=0;
  sd_chipSelect(LOW);
  if (!sd_waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
  if (!sd_writeData(WRITE_MULTIPLE_TOKEN, src)) goto fail;
    8200:	mov	r1, r5
    8202:	movs	r0, #252	; 0xfc
    8204:	bl	8108 <sd_writeData(unsigned char, unsigned char const*)>
    8208:	cmp	r0, #0
    820a:	beq.n	81f4 <sd_writeData2(unsigned char const*)+0x34>
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    820c:	ldrh	r3, [r4, #0]
    820e:	movs	r0, #1
    8210:	cbnz	r3, 8226 <sd_writeData2(unsigned char const*)+0x66>
    8212:	pop	{r3, r4, r5, r6, r7, pc}
    8214:	movs	r0, #1
    8216:	bl	7a6c <sd_chipSelect(unsigned short) [clone .part.0]>
  return TRUE;

 fail:
  sd_setError(SD_CARD_ERROR_WRITE_MULTIPLE);
  sd_chipSelect(HIGH);
  return FALSE;
    821a:	movs	r0, #0
    821c:	pop	{r3, r4, r5, r6, r7, pc}
    821e:	movs	r0, #0
    8220:	bl	7a6c <sd_chipSelect(unsigned short) [clone .part.0]>
    8224:	b.n	81ca <sd_writeData2(unsigned char const*)+0xa>
    8226:	bl	7a6c <sd_chipSelect(unsigned short) [clone .part.0]>
    822a:	movs	r0, #1
    822c:	pop	{r3, r4, r5, r6, r7, pc}
    822e:	nop
    8230:	.word	0x20000aec
    8234:	.word	0x2000e684
    8238:	.word	0x403a0000
    823c:	.word	0x2000e44a

00008240 <sd_writeStart(unsigned long, unsigned long)>:
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint16_t sd_writeStart(uint32_t blockNumber, uint32_t eraseCount) 
{
    8240:	push	{r3, r4, r5, lr}
    8242:	mov	r4, r0
  // send pre-erase count
  if(eraseCount)
    8244:	cbnz	r1, 827a <sd_writeStart(unsigned long, unsigned long)+0x3a>
// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
uint16_t sd_getError(void) {return m_sd_errorCode;}

void sd_setType(uint16_t type) {m_sd_type=type;}
uint16_t sd_getType(void) {return m_sd_type;}
    8246:	ldr	r3, [pc, #88]	; (82a0 <sd_writeStart(unsigned long, unsigned long)+0x60>)
    goto fail;
    }
  }
  // use address if not SDHC card
  if (sd_getType() != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
  if (sd_cardCommand(CMD25, blockNumber)) {
    8248:	movs	r0, #25
    sd_setError(SD_CARD_ERROR_ACMD23);
    goto fail;
    }
  }
  // use address if not SDHC card
  if (sd_getType() != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    824a:	ldrh	r3, [r3, #0]
    824c:	cmp	r3, #3
    824e:	it	ne
    8250:	lslne	r4, r4, #9
  if (sd_cardCommand(CMD25, blockNumber)) {
    8252:	mov	r1, r4
    8254:	bl	7b28 <sd_cardCommand(unsigned char, unsigned long)>
    8258:	cbz	r0, 8270 <sd_writeStart(unsigned long, unsigned long)+0x30>
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    825a:	ldr	r3, [pc, #72]	; (82a4 <sd_writeStart(unsigned long, unsigned long)+0x64>)
    825c:	movs	r2, #7
    825e:	strh	r2, [r3, #0]
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    8260:	ldr	r3, [pc, #68]	; (82a8 <sd_writeStart(unsigned long, unsigned long)+0x68>)
    8262:	ldrh	r0, [r3, #0]
    8264:	cbz	r0, 8278 <sd_writeStart(unsigned long, unsigned long)+0x38>
    8266:	movs	r0, #1
    8268:	bl	7a6c <sd_chipSelect(unsigned short) [clone .part.0]>
  sd_chipSelect(HIGH);
  return TRUE;

 fail:
  sd_chipSelect(HIGH);
  return FALSE;
    826c:	movs	r0, #0
    826e:	pop	{r3, r4, r5, pc}
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    8270:	ldr	r3, [pc, #52]	; (82a8 <sd_writeStart(unsigned long, unsigned long)+0x68>)
    8272:	movs	r0, #1
    8274:	ldrh	r3, [r3, #0]
    8276:	cbnz	r3, 8298 <sd_writeStart(unsigned long, unsigned long)+0x58>
  return TRUE;

 fail:
  sd_chipSelect(HIGH);
  return FALSE;
}
    8278:	pop	{r3, r4, r5, pc}
    827a:	mov	r5, r1
  uint16_t sd_readCID(cid_t* cid) {  return sd_readRegister(CMD10, cid); }
  uint16_t sd_readCSD(csd_t* csd) {  return sd_readRegister(CMD9, csd); }

 
uint8_t sd_cardAcmd(uint8_t cmd, uint32_t arg) 
{   sd_cardCommand(CMD55, 0);
    827c:	movs	r0, #55	; 0x37
    827e:	movs	r1, #0
    8280:	bl	7b28 <sd_cardCommand(unsigned char, unsigned long)>
    return sd_cardCommand(cmd, arg);
    8284:	mov	r1, r5
    8286:	movs	r0, #23
    8288:	bl	7b28 <sd_cardCommand(unsigned char, unsigned long)>
uint16_t sd_writeStart(uint32_t blockNumber, uint32_t eraseCount) 
{
  // send pre-erase count
  if(eraseCount)
  {
    if (sd_cardAcmd(ACMD23, eraseCount)) {
    828c:	cmp	r0, #0
    828e:	beq.n	8246 <sd_writeStart(unsigned long, unsigned long)+0x6>
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    8290:	ldr	r3, [pc, #16]	; (82a4 <sd_writeStart(unsigned long, unsigned long)+0x64>)
    8292:	movs	r2, #9
    8294:	strh	r2, [r3, #0]
    8296:	b.n	8260 <sd_writeStart(unsigned long, unsigned long)+0x20>
    8298:	bl	7a6c <sd_chipSelect(unsigned short) [clone .part.0]>
    829c:	movs	r0, #1
    829e:	pop	{r3, r4, r5, pc}
    82a0:	.word	0x2000e44c
    82a4:	.word	0x2000e44a
    82a8:	.word	0x20000aec

000082ac <sd_writeStop()>:
 *
* \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint16_t sd_writeStop(void) 
{
    82ac:	push	{r3, r4, r5, r6, r7, lr}
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    82ae:	ldr	r4, [pc, #164]	; (8354 <sd_writeStop()+0xa8>)
    82b0:	ldrh	r0, [r4, #0]
    82b2:	cmp	r0, #0
    82b4:	bne.n	8338 <sd_writeStop()+0x8c>
    82b6:	ldr	r4, [pc, #160]	; (8358 <sd_writeStop()+0xac>)
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    82b8:	movs	r7, #255	; 0xff
    82ba:	ldr	r2, [pc, #160]	; (835c <sd_writeStop()+0xb0>)
    82bc:	ldr	r5, [r4, #0]
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    82be:	mov	r6, r2
{
  uint16_t t0;
  uint16_t ret;
  t0  = millis();
  while ((ret=spi_receive()) != 0XFF) 
  { if (((uint16_t)millis() - t0) >= timeoutMillis) return FALSE;
    82c0:	uxth	r5, r5
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    82c2:	str	r7, [r2, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    82c4:	ldr	r3, [r2, #92]	; 0x5c
    82c6:	ldr	r1, [pc, #148]	; (835c <sd_writeStop()+0xb0>)
		if (fifo > 0) return spi->RDR; 
    82c8:	tst.w	r3, #2031616	; 0x1f0000
    82cc:	beq.n	82c4 <sd_writeStop()+0x18>
    82ce:	ldr	r3, [r6, #116]	; 0x74
uint16_t sd_waitNotBusy(uint16_t timeoutMillis) 
{
  uint16_t t0;
  uint16_t ret;
  t0  = millis();
  while ((ret=spi_receive()) != 0XFF) 
    82d0:	uxtb	r3, r3
    82d2:	cmp	r3, #255	; 0xff
    82d4:	beq.n	82ec <sd_writeStop()+0x40>
    82d6:	ldr	r3, [r4, #0]
  { if (((uint16_t)millis() - t0) >= timeoutMillis) return FALSE;
    82d8:	uxth	r3, r3
    82da:	subs	r3, r3, r5
    82dc:	cmp.w	r3, #600	; 0x258
    82e0:	blt.n	82c2 <sd_writeStop()+0x16>
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    82e2:	ldr	r3, [pc, #124]	; (8360 <sd_writeStop()+0xb4>)
    82e4:	movs	r2, #18
    82e6:	strh	r2, [r3, #0]
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    82e8:	cbnz	r0, 832e <sd_writeStop()+0x82>

 fail:
  sd_setError(SD_CARD_ERROR_STOP_TRAN);
  sd_chipSelect(HIGH);
  return FALSE;
}
    82ea:	pop	{r3, r4, r5, r6, r7, pc}
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    82ec:	movs	r3, #253	; 0xfd
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    82ee:	mov	r5, r1
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    82f0:	str	r3, [r1, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    82f2:	ldr	r3, [r5, #92]	; 0x5c
    82f4:	ldr	r2, [pc, #100]	; (835c <sd_writeStop()+0xb0>)
		if (fifo > 0) return spi->RDR; 
    82f6:	tst.w	r3, #2031616	; 0x1f0000
    82fa:	beq.n	82f2 <sd_writeStop()+0x46>
    82fc:	ldr	r3, [r2, #116]	; 0x74
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    82fe:	movs	r6, #255	; 0xff
    8300:	ldr	r1, [r4, #0]
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    8302:	mov	r5, r2
{
  uint16_t t0;
  uint16_t ret;
  t0  = millis();
  while ((ret=spi_receive()) != 0XFF) 
  { if (((uint16_t)millis() - t0) >= timeoutMillis) return FALSE;
    8304:	uxth	r1, r1
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    8306:	str	r6, [r2, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    8308:	ldr	r3, [r2, #92]	; 0x5c
		if (fifo > 0) return spi->RDR; 
    830a:	tst.w	r3, #2031616	; 0x1f0000
    830e:	beq.n	8308 <sd_writeStop()+0x5c>
    8310:	ldr	r3, [r5, #116]	; 0x74
uint16_t sd_waitNotBusy(uint16_t timeoutMillis) 
{
  uint16_t t0;
  uint16_t ret;
  t0  = millis();
  while ((ret=spi_receive()) != 0XFF) 
    8312:	uxtb	r3, r3
    8314:	cmp	r3, #255	; 0xff
    8316:	beq.n	8342 <sd_writeStop()+0x96>
    8318:	ldr	r3, [r4, #0]
  { if (((uint16_t)millis() - t0) >= timeoutMillis) return FALSE;
    831a:	uxth	r3, r3
    831c:	subs	r3, r3, r1
    831e:	cmp.w	r3, #600	; 0x258
    8322:	blt.n	8306 <sd_writeStop()+0x5a>
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    8324:	ldr	r3, [pc, #56]	; (8360 <sd_writeStop()+0xb4>)
    8326:	movs	r2, #18
    8328:	strh	r2, [r3, #0]
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    832a:	cmp	r0, #0
    832c:	beq.n	82ea <sd_writeStop()+0x3e>
    832e:	movs	r0, #1
    8330:	bl	7a6c <sd_chipSelect(unsigned short) [clone .part.0]>
  return TRUE;

 fail:
  sd_setError(SD_CARD_ERROR_STOP_TRAN);
  sd_chipSelect(HIGH);
  return FALSE;
    8334:	movs	r0, #0
    8336:	pop	{r3, r4, r5, r6, r7, pc}
    8338:	movs	r0, #0
    833a:	bl	7a6c <sd_chipSelect(unsigned short) [clone .part.0]>
    833e:	ldrh	r0, [r4, #0]
    8340:	b.n	82b6 <sd_writeStop()+0xa>
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    8342:	cbnz	r0, 8348 <sd_writeStop()+0x9c>
  sd_chipSelect(LOW);
  if (!sd_waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
  spi_send(STOP_TRAN_TOKEN);
  if (!sd_waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
  sd_chipSelect(HIGH);
  return TRUE;
    8344:	movs	r0, #1
    8346:	pop	{r3, r4, r5, r6, r7, pc}
    8348:	movs	r0, #1
    834a:	bl	7a6c <sd_chipSelect(unsigned short) [clone .part.0]>
    834e:	movs	r0, #1
    8350:	pop	{r3, r4, r5, r6, r7, pc}
    8352:	nop
    8354:	.word	0x20000aec
    8358:	.word	0x2000e684
    835c:	.word	0x403a0000
    8360:	.word	0x2000e44a

00008364 <SPI_disk_write(unsigned char const*, unsigned long, unsigned int)>:
	}

    return res;
}
DRESULT SPI_disk_write(const BYTE *buff, DWORD sector, UINT count)
{
    8364:	push	{r3, r4, r5, r6, r7, lr}
    8366:	mov	r3, r1
    8368:	mov	r4, r0
    DRESULT res = RES_OK;
    if(!sd_writeStart(sector,count)) res = RES_WRITEERROR;
    836a:	mov	r1, r2
	}

    return res;
}
DRESULT SPI_disk_write(const BYTE *buff, DWORD sector, UINT count)
{
    836c:	mov	r7, r2
    DRESULT res = RES_OK;
    if(!sd_writeStart(sector,count)) res = RES_WRITEERROR;
    836e:	mov	r0, r3
    8370:	bl	8240 <sd_writeStart(unsigned long, unsigned long)>
    8374:	cmp	r0, #0
    8376:	ite	ne
    8378:	movne	r6, #0
    837a:	moveq	r6, #7
	
    for(UINT ii=0; ii<count;ii++)
    837c:	cbz	r7, 8396 <SPI_disk_write(unsigned char const*, unsigned long, unsigned int)+0x32>
    837e:	movs	r5, #0
    {
      if(!sd_writeData2(buff)) res = RES_WRITEERROR;
    8380:	mov	r0, r4
DRESULT SPI_disk_write(const BYTE *buff, DWORD sector, UINT count)
{
    DRESULT res = RES_OK;
    if(!sd_writeStart(sector,count)) res = RES_WRITEERROR;
	
    for(UINT ii=0; ii<count;ii++)
    8382:	adds	r5, #1
    {
      if(!sd_writeData2(buff)) res = RES_WRITEERROR;
    8384:	bl	81c0 <sd_writeData2(unsigned char const*)>
    8388:	cmp	r0, #0
      sector++;
      buff += 512;    
    838a:	add.w	r4, r4, #512	; 0x200
    DRESULT res = RES_OK;
    if(!sd_writeStart(sector,count)) res = RES_WRITEERROR;
	
    for(UINT ii=0; ii<count;ii++)
    {
      if(!sd_writeData2(buff)) res = RES_WRITEERROR;
    838e:	it	eq
    8390:	moveq	r6, #7
DRESULT SPI_disk_write(const BYTE *buff, DWORD sector, UINT count)
{
    DRESULT res = RES_OK;
    if(!sd_writeStart(sector,count)) res = RES_WRITEERROR;
	
    for(UINT ii=0; ii<count;ii++)
    8392:	cmp	r7, r5
    8394:	bne.n	8380 <SPI_disk_write(unsigned char const*, unsigned long, unsigned int)+0x1c>
    {
      if(!sd_writeData2(buff)) res = RES_WRITEERROR;
      sector++;
      buff += 512;    
    }
	if(!sd_writeStop()) res = RES_WRITEERROR;
    8396:	bl	82ac <sd_writeStop()>
    839a:	cmp	r0, #0

    return res;
}
    839c:	ite	ne
    839e:	movne	r0, r6
    83a0:	moveq	r0, #7
    83a2:	pop	{r3, r4, r5, r6, r7, pc}

000083a4 <spi_init()>:
	void spi_init(void) 
	{ 
	  // CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz 
	  // CBCMR[LPSPI_PODF] - div4 = 132 MHz 

	  CCM_CCGR1 &= ~CCM_CCGR1_LPSPIx(ISPI,CCM_CCGR_ON); 
    83a4:	ldr	r2, [pc, #68]	; (83ec <spi_init()+0x48>)

	  CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) | 
								 CCM_CBCMR_LPSPI_PODF(6) | CCM_CBCMR_LPSPI_CLK_SEL(2); // pg 714 

	  uint32_t fastio = IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3); 
	  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_01 = fastio; 
    83a6:	movs	r0, #217	; 0xd9
    83a8:	ldr	r3, [pc, #68]	; (83f0 <spi_init()+0x4c>)
	  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_02 = fastio; 
	  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = fastio; 

	  CCM_CCGR1 |= CCM_CCGR1_LPSPIx(ISPI, CCM_CCGR_ON); 
	  
	  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_01 = 3 | 0x10; // SDI  //Pin12
    83aa:	movs	r1, #19
//	static IMXRT_LPSPI_t * spi = (const IMXRT_LPSPI_t *)SPIX[ISPI];

	#define CCM_CCGR1_LPSPIx(m,n)     ((uint32_t)(((n) & 0x03) << (2*m)))
	
	void spi_init(void) 
	{ 
    83ac:	push	{r4, r5, r6, r7}
	  // CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz 
	  // CBCMR[LPSPI_PODF] - div4 = 132 MHz 

	  CCM_CCGR1 &= ~CCM_CCGR1_LPSPIx(ISPI,CCM_CCGR_ON); 
    83ae:	ldr	r6, [r2, #108]	; 0x6c
	  
	  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_01 = 3 | 0x10; // SDI  //Pin12
	  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_02 = 3 | 0x10; // SDO  //Pin11
	  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 3 | 0x10; // SCK  //Pin13

	  spi->CR = LPSPI_CR_RST; 
    83b0:	movs	r7, #2
	  // CBCMR[LPSPI_PODF] - div4 = 132 MHz 

	  CCM_CCGR1 &= ~CCM_CCGR1_LPSPIx(ISPI,CCM_CCGR_ON); 

	  CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) | 
								 CCM_CBCMR_LPSPI_PODF(6) | CCM_CBCMR_LPSPI_CLK_SEL(2); // pg 714 
    83b2:	ldr	r5, [pc, #64]	; (83f4 <spi_init()+0x50>)
	void spi_init(void) 
	{ 
	  // CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz 
	  // CBCMR[LPSPI_PODF] - div4 = 132 MHz 

	  CCM_CCGR1 &= ~CCM_CCGR1_LPSPIx(ISPI,CCM_CCGR_ON); 
    83b4:	bic.w	r6, r6, #192	; 0xc0

	  CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) | 
								 CCM_CBCMR_LPSPI_PODF(6) | CCM_CBCMR_LPSPI_CLK_SEL(2); // pg 714 
    83b8:	ldr	r4, [pc, #60]	; (83f8 <spi_init()+0x54>)
	void spi_init(void) 
	{ 
	  // CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz 
	  // CBCMR[LPSPI_PODF] - div4 = 132 MHz 

	  CCM_CCGR1 &= ~CCM_CCGR1_LPSPIx(ISPI,CCM_CCGR_ON); 
    83ba:	str	r6, [r2, #108]	; 0x6c

	  CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) | 
    83bc:	ldr	r6, [r2, #24]
								 CCM_CBCMR_LPSPI_PODF(6) | CCM_CBCMR_LPSPI_CLK_SEL(2); // pg 714 
    83be:	ands	r5, r6
	  
	  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_01 = 3 | 0x10; // SDI  //Pin12
	  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_02 = 3 | 0x10; // SDO  //Pin11
	  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 3 | 0x10; // SCK  //Pin13

	  spi->CR = LPSPI_CR_RST; 
    83c0:	ldr	r6, [pc, #56]	; (83fc <spi_init()+0x58>)
	  // CBCMR[LPSPI_PODF] - div4 = 132 MHz 

	  CCM_CCGR1 &= ~CCM_CCGR1_LPSPIx(ISPI,CCM_CCGR_ON); 

	  CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) | 
								 CCM_CBCMR_LPSPI_PODF(6) | CCM_CBCMR_LPSPI_CLK_SEL(2); // pg 714 
    83c2:	orrs	r4, r5
    83c4:	str	r4, [r2, #24]

	  uint32_t fastio = IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3); 
	  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_01 = fastio; 
    83c6:	str.w	r0, [r3, #816]	; 0x330
	  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_02 = fastio; 
    83ca:	str.w	r0, [r3, #820]	; 0x334
	  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = fastio; 
    83ce:	str.w	r0, [r3, #824]	; 0x338

	  CCM_CCGR1 |= CCM_CCGR1_LPSPIx(ISPI, CCM_CCGR_ON); 
    83d2:	ldr	r0, [r2, #108]	; 0x6c
    83d4:	orr.w	r0, r0, #192	; 0xc0
    83d8:	str	r0, [r2, #108]	; 0x6c
	  
	  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_01 = 3 | 0x10; // SDI  //Pin12
    83da:	str.w	r1, [r3, #320]	; 0x140
	  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_02 = 3 | 0x10; // SDO  //Pin11
    83de:	str.w	r1, [r3, #324]	; 0x144
	  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 3 | 0x10; // SCK  //Pin13
    83e2:	str.w	r1, [r3, #328]	; 0x148

	  spi->CR = LPSPI_CR_RST; 
    83e6:	str	r7, [r6, #16]
	} 
    83e8:	pop	{r4, r5, r6, r7}
    83ea:	bx	lr
    83ec:	.word	0x400fc000
    83f0:	.word	0x401f8000
    83f4:	.word	0xe3ffffcf
    83f8:	.word	0x18000020
    83fc:	.word	0x403a0000

00008400 <spi_begin(unsigned long, unsigned char, unsigned char)>:

	void spi_begin(uint32_t clck, uint8_t bitOrder, uint8_t dataMode)
	{
    8400:	push	{r4, r5, r6, r7, lr}
		const uint32_t clk_sel[4] = {664615384,  // PLL3 PFD1
				   720000000,  // PLL3 PFD0
				   528000000,  // PLL2
				   396000000}; // PLL2 PFD2       
    8402:	ldr	r3, [pc, #148]	; (8498 <spi_begin(unsigned long, unsigned char, unsigned char)+0x98>)

	  spi->CR = LPSPI_CR_RST; 
	} 

	void spi_begin(uint32_t clck, uint8_t bitOrder, uint8_t dataMode)
	{
    8404:	sub	sp, #20
    8406:	mov	r6, r0
				   396000000}; // PLL2 PFD2       
		uint32_t cbcmr = CCM_CBCMR;
		uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
		
		uint32_t d, div;    
		if (clck == 0) clck =1;
    8408:	cmp	r0, #0
	void spi_begin(uint32_t clck, uint8_t bitOrder, uint8_t dataMode)
	{
		const uint32_t clk_sel[4] = {664615384,  // PLL3 PFD1
				   720000000,  // PLL3 PFD0
				   528000000,  // PLL2
				   396000000}; // PLL2 PFD2       
    840a:	add.w	lr, sp, #16

	  spi->CR = LPSPI_CR_RST; 
	} 

	void spi_begin(uint32_t clck, uint8_t bitOrder, uint8_t dataMode)
	{
    840e:	mov	r5, r1
    8410:	mov	r4, r2
		const uint32_t clk_sel[4] = {664615384,  // PLL3 PFD1
				   720000000,  // PLL3 PFD0
				   528000000,  // PLL2
				   396000000}; // PLL2 PFD2       
		uint32_t cbcmr = CCM_CBCMR;
    8412:	ldr	r7, [pc, #136]	; (849c <spi_begin(unsigned long, unsigned char, unsigned char)+0x9c>)
		uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
		
		uint32_t d, div;    
		if (clck == 0) clck =1;
    8414:	it	eq
    8416:	moveq	r6, #1
	void spi_begin(uint32_t clck, uint8_t bitOrder, uint8_t dataMode)
	{
		const uint32_t clk_sel[4] = {664615384,  // PLL3 PFD1
				   720000000,  // PLL3 PFD0
				   528000000,  // PLL2
				   396000000}; // PLL2 PFD2       
    8418:	ldmia	r3, {r0, r1, r2, r3}
    841a:	stmdb	lr, {r0, r1, r2, r3}
		uint32_t cbcmr = CCM_CBCMR;
    841e:	ldr	r3, [r7, #24]
		uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    8420:	ubfx	r2, r3, #4, #2
    8424:	ubfx	r3, r3, #26, #3
    8428:	add.w	r2, lr, r2, lsl #2
    842c:	adds	r3, #1
    842e:	ldr.w	r2, [r2, #-16]
    8432:	udiv	r3, r2, r3
		
		uint32_t d, div;    
		if (clck == 0) clck =1;
		d= clkhz/clck;
    8436:	udiv	r2, r3, r6
		if (d && clkhz/d > clck) d++;
    843a:	cbz	r2, 8450 <spi_begin(unsigned long, unsigned char, unsigned char)+0x50>
    843c:	udiv	r3, r3, r2
    8440:	cmp	r6, r3
    8442:	it	cc
    8444:	addcc	r2, #1
		if (d > 257) d= 257;  // max div
    8446:	cmp.w	r2, #258	; 0x102
    844a:	bcc.n	8484 <spi_begin(unsigned long, unsigned char, unsigned char)+0x84>
    844c:	movw	r2, #32767	; 0x7fff
		  div = d-2;
		} else {
		  div =0;
		}
		uint32_t ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);
		uint32_t tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    8450:	cmp	r5, #0
    8452:	ldr	r3, [pc, #76]	; (84a0 <spi_begin(unsigned long, unsigned char, unsigned char)+0xa0>)

		// PCS to SCK Delay Prescaler into the After SCK Delay Prescaler  
		if (dataMode & 0x04) tcr |= LPSPI_TCR_CPHA; 


	  spi->CR = 0; 
    8454:	mov.w	r5, #0
		  div = d-2;
		} else {
		  div =0;
		}
		uint32_t ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);
		uint32_t tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    8458:	it	ne
    845a:	movne	r3, #7

		// handle LSB setup 
		if (bitOrder == LSBFIRST) tcr |= LPSPI_TCR_LSBF;

		// Handle Data Mode
		if (dataMode & 0x08) tcr |= LPSPI_TCR_CPOL;
    845c:	lsls	r0, r4, #28
	  spi->CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE; 
	//  spi->CCR = LPSPI_CCR_SCKDIV(4); 
	//  spi->TCR = LPSPI_TCR_FRAMESZ(7); 
	  spi->CCR = ccr; 
	  spi->TCR = tcr; 
	  spi->CR = LPSPI_CR_MEN; 
    845e:	mov.w	r0, #1

		// handle LSB setup 
		if (bitOrder == LSBFIRST) tcr |= LPSPI_TCR_LSBF;

		// Handle Data Mode
		if (dataMode & 0x08) tcr |= LPSPI_TCR_CPOL;
    8462:	it	mi
    8464:	orrmi.w	r3, r3, #2147483648	; 0x80000000

		// PCS to SCK Delay Prescaler into the After SCK Delay Prescaler  
		if (dataMode & 0x04) tcr |= LPSPI_TCR_CPHA; 
    8468:	lsls	r1, r4, #29


	  spi->CR = 0; 
    846a:	ldr	r1, [pc, #56]	; (84a4 <spi_begin(unsigned long, unsigned char, unsigned char)+0xa4>)
	  spi->CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE; 
    846c:	mov.w	r4, #3

		// Handle Data Mode
		if (dataMode & 0x08) tcr |= LPSPI_TCR_CPOL;

		// PCS to SCK Delay Prescaler into the After SCK Delay Prescaler  
		if (dataMode & 0x04) tcr |= LPSPI_TCR_CPHA; 
    8470:	it	mi
    8472:	orrmi.w	r3, r3, #1073741824	; 0x40000000


	  spi->CR = 0; 
    8476:	str	r5, [r1, #16]
	  spi->CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE; 
    8478:	str	r4, [r1, #36]	; 0x24
	//  spi->CCR = LPSPI_CCR_SCKDIV(4); 
	//  spi->TCR = LPSPI_TCR_FRAMESZ(7); 
	  spi->CCR = ccr; 
    847a:	str	r2, [r1, #64]	; 0x40
	  spi->TCR = tcr; 
    847c:	str	r3, [r1, #96]	; 0x60
	  spi->CR = LPSPI_CR_MEN; 
    847e:	str	r0, [r1, #16]
	}
    8480:	add	sp, #20
    8482:	pop	{r4, r5, r6, r7, pc}
		uint32_t d, div;    
		if (clck == 0) clck =1;
		d= clkhz/clck;
		if (d && clkhz/d > clck) d++;
		if (d > 257) d= 257;  // max div
		if (d > 2) {
    8484:	cmp	r2, #2
    8486:	it	ls
    8488:	movls	r2, #0
    848a:	bls.n	8450 <spi_begin(unsigned long, unsigned char, unsigned char)+0x50>
    848c:	subs	r2, #2
    848e:	lsrs	r3, r2, #1
    8490:	orr.w	r2, r2, r3, lsl #8
    8494:	b.n	8450 <spi_begin(unsigned long, unsigned char, unsigned char)+0x50>
    8496:	nop
    8498:	.word	0x200002e8
    849c:	.word	0x400fc000
    84a0:	.word	0x00800007
    84a4:	.word	0x403a0000

000084a8 <sd_init()>:
#endif  // USE_SD_SRC

//***************************************************************************/
uint16_t sd_init(void)
{  int ii;
  pinMode(m_chipSelectPin, OUTPUT);
    84a8:	ldr	r3, [pc, #124]	; (8528 <sd_init()+0x80>)
    84aa:	movs	r1, #1
    84ac:	ldrb	r0, [r3, #0]
  #endif  // USE_SD_CCITT
#endif  // USE_SD_SRC

//***************************************************************************/
uint16_t sd_init(void)
{  int ii;
    84ae:	push	{r4, lr}
  pinMode(m_chipSelectPin, OUTPUT);
    84b0:	bl	9d04 <pinMode>
	void spi_configPorts(int iconf) 
	{ return;
	}

	uint32_t spi_setup(uint32_t clk)
	{	spi_init() ;
    84b4:	bl	83a4 <spi_init()>
		spi_begin(clk, MSBFIRST, SPI_MODE0);
    84b8:	movs	r2, #0
    84ba:	movs	r1, #1
    84bc:	movs	r0, #100	; 0x64
    84be:	bl	8400 <spi_begin(unsigned long, unsigned char, unsigned char)>
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    84c2:	ldr	r3, [pc, #104]	; (852c <sd_init()+0x84>)
    84c4:	ldrh	r3, [r3, #0]
    84c6:	cbz	r3, 84ce <sd_init()+0x26>
    84c8:	movs	r0, #1
    84ca:	bl	7a6c <sd_chipSelect(unsigned short) [clone .part.0]>
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    84ce:	ldr	r2, [pc, #96]	; (8530 <sd_init()+0x88>)
  #endif  // USE_SD_CCITT
#endif  // USE_SD_SRC

//***************************************************************************/
uint16_t sd_init(void)
{  int ii;
    84d0:	mov.w	r4, #1000	; 0x3e8
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    84d4:	movs	r0, #255	; 0xff
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    84d6:	mov	r1, r2
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    84d8:	str	r0, [r2, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    84da:	ldr	r3, [r2, #92]	; 0x5c
		if (fifo > 0) return spi->RDR; 
    84dc:	tst.w	r3, #2031616	; 0x1f0000
    84e0:	beq.n	84da <sd_init()+0x32>

  spi_setup(100);

  sd_chipSelect(HIGH);
  // must supply min of 74 clock cycles with CS high.
  for (ii = 0; ii < 1000; ii++) spi_send(0XFF);
    84e2:	subs	r4, #1
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
		if (fifo > 0) return spi->RDR; 
    84e4:	ldr	r3, [r1, #116]	; 0x74

  spi_setup(100);

  sd_chipSelect(HIGH);
  // must supply min of 74 clock cycles with CS high.
  for (ii = 0; ii < 1000; ii++) spi_send(0XFF);
    84e6:	bne.n	84d8 <sd_init()+0x30>

  if(!sd_connect())
    84e8:	bl	7d8c <sd_connect()>
    84ec:	cbz	r0, 851a <sd_init()+0x72>
// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
uint16_t sd_getError(void) {return m_sd_errorCode;}

void sd_setType(uint16_t type) {m_sd_type=type;}
uint16_t sd_getType(void) {return m_sd_type;}
    84ee:	ldr	r3, [pc, #68]	; (8534 <sd_init()+0x8c>)
  {  
#ifdef DO_DEBUG
     int32_t sd_size,sd_type, bb[4]; 
     bb[0]=bb[1]=bb[2]=bb[3]=0;
     sd_type=sd_getType();
     Serial.printf("Card Type: %d\n",sd_type);
    84f0:	ldr	r1, [pc, #68]	; (8538 <sd_init()+0x90>)
    84f2:	ldrh	r2, [r3, #0]
    84f4:	ldr	r0, [pc, #68]	; (853c <sd_init()+0x94>)
    84f6:	bl	a52c <Print::printf(char const*, ...)>
     sd_size=sd_cardSize();
    84fa:	bl	7f34 <sd_cardSize()>
     Serial.printf("Card Size: %d\n",sd_size);
    84fe:	ldr	r1, [pc, #64]	; (8540 <sd_init()+0x98>)
    8500:	mov	r2, r0
    8502:	ldr	r0, [pc, #56]	; (853c <sd_init()+0x94>)
    8504:	bl	a52c <Print::printf(char const*, ...)>
	void spi_configPorts(int iconf) 
	{ return;
	}

	uint32_t spi_setup(uint32_t clk)
	{	spi_init() ;
    8508:	bl	83a4 <spi_init()>
		spi_begin(clk, MSBFIRST, SPI_MODE0);
    850c:	mov	r2, r4
    850e:	movs	r1, #1
    8510:	ldr	r0, [pc, #48]	; (8544 <sd_init()+0x9c>)
    8512:	bl	8400 <spi_begin(unsigned long, unsigned char, unsigned char)>
    8516:	movs	r0, #1
  
  #define MEG (1000*1000)
  spi_setup(30*MEG);

  return true;
}
    8518:	pop	{r4, pc}
  for (ii = 0; ii < 1000; ii++) spi_send(0XFF);

  if(!sd_connect())
  {  // uint32_t errorcode=sd_getError();
//     printDebug("connect:", errorcode);
	Serial.printf("Connect %d\n",2);
    851a:	movs	r2, #2
    851c:	ldr	r1, [pc, #40]	; (8548 <sd_init()+0xa0>)
    851e:	ldr	r0, [pc, #28]	; (853c <sd_init()+0x94>)
    8520:	bl	a52c <Print::printf(char const*, ...)>
    return false;
    8524:	mov	r0, r4
    8526:	pop	{r4, pc}
    8528:	.word	0x20000aee
    852c:	.word	0x20000aec
    8530:	.word	0x403a0000
    8534:	.word	0x2000e44c
    8538:	.word	0x20000314
    853c:	.word	0x20000b20
    8540:	.word	0x20000324
    8544:	.word	0x01c9c380
    8548:	.word	0x20000308

0000854c <SPI_disk_initialize()>:
DSTATUS SPI_disk_status()
{
    return 0;
}
DSTATUS SPI_disk_initialize(void)
{
    854c:	push	{r3, lr}
    if(!sd_init()) return STA_NOINIT;
    854e:	bl	84a8 <sd_init()>
    
    return 0;
}
    8552:	clz	r0, r0
    8556:	lsrs	r0, r0, #5
    8558:	pop	{r3, pc}
    855a:	nop

0000855c <MSC_disk_initialize>:
	}

	int MSC_ioctl(BYTE cmd, BYTE *buff) {return 0;}
#else
	int MSC_disk_status() {return STA_NOINIT;}
	int MSC_disk_initialize() {return STA_NOINIT;}
    855c:	movs	r0, #1
    855e:	bx	lr

00008560 <MSC_disk_read>:
    8560:	movs	r0, #1
    8562:	bx	lr

00008564 <MSC_disk_write>:
	int MSC_disk_read(BYTE *buff, DWORD sector, UINT count) {return STA_NOINIT;}
	int MSC_disk_write(const BYTE *buff, DWORD sector, UINT count) {return STA_NOINIT;}
    8564:	movs	r0, #1
    8566:	bx	lr

00008568 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    8568:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    856a:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    856e:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    8572:	bne.n	8650 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    8574:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    8576:	bcc.n	85fc <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    8578:	ldr.w	r3, [r1], #4
    857c:	str.w	r3, [r0], #4
    8580:	ldr.w	r3, [r1], #4
    8584:	str.w	r3, [r0], #4
    8588:	ldr.w	r3, [r1], #4
    858c:	str.w	r3, [r0], #4
    8590:	ldr.w	r3, [r1], #4
    8594:	str.w	r3, [r0], #4
    8598:	ldr.w	r3, [r1], #4
    859c:	str.w	r3, [r0], #4
    85a0:	ldr.w	r3, [r1], #4
    85a4:	str.w	r3, [r0], #4
    85a8:	ldr.w	r3, [r1], #4
    85ac:	str.w	r3, [r0], #4
    85b0:	ldr.w	r3, [r1], #4
    85b4:	str.w	r3, [r0], #4
    85b8:	ldr.w	r3, [r1], #4
    85bc:	str.w	r3, [r0], #4
    85c0:	ldr.w	r3, [r1], #4
    85c4:	str.w	r3, [r0], #4
    85c8:	ldr.w	r3, [r1], #4
    85cc:	str.w	r3, [r0], #4
    85d0:	ldr.w	r3, [r1], #4
    85d4:	str.w	r3, [r0], #4
    85d8:	ldr.w	r3, [r1], #4
    85dc:	str.w	r3, [r0], #4
    85e0:	ldr.w	r3, [r1], #4
    85e4:	str.w	r3, [r0], #4
    85e8:	ldr.w	r3, [r1], #4
    85ec:	str.w	r3, [r0], #4
    85f0:	ldr.w	r3, [r1], #4
    85f4:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    85f8:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    85fa:	bcs.n	8578 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    85fc:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    85fe:	bcc.n	8624 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    8600:	ldr.w	r3, [r1], #4
    8604:	str.w	r3, [r0], #4
    8608:	ldr.w	r3, [r1], #4
    860c:	str.w	r3, [r0], #4
    8610:	ldr.w	r3, [r1], #4
    8614:	str.w	r3, [r0], #4
    8618:	ldr.w	r3, [r1], #4
    861c:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    8620:	subs	r2, #16
	bhs	.Lmid_block_loop
    8622:	bcs.n	8600 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    8624:	adds	r2, #12
	blo	.Lcopy_less_than_4
    8626:	bcc.n	8634 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    8628:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    862c:	str.w	r3, [r0], #4
	subs	r2, #4
    8630:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    8632:	bcs.n	8628 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    8634:	adds	r2, #4
	beq	.Ldone
    8636:	beq.n	864a <memcpy+0xe2>

	lsls	r2, r2, #31
    8638:	lsls	r2, r2, #31
	itt ne
    863a:	itt	ne
	ldrbne  r3, [r1], #1
    863c:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    8640:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    8644:	bcc.n	864a <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    8646:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    8648:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    864a:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    864c:	bx	lr
    864e:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    8650:	cmp	r2, #8
	blo	.Lbyte_copy
    8652:	bcc.n	867c <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    8654:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    8656:	beq.n	8574 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    8658:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    865c:	beq.n	8574 <memcpy+0xc>

	rsb	r3, #4
    865e:	rsb	r3, r3, #4
	subs	r2, r3
    8662:	subs	r2, r2, r3

	lsls    r3, r3, #31
    8664:	lsls	r3, r3, #31
	itt ne
    8666:	itt	ne
	ldrbne  r3, [r1], #1
    8668:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    866c:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    8670:	bcc.n	8574 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    8672:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    8676:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    867a:	b.n	8574 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    867c:	subs	r2, #4
	blo	.Lcopy_less_than_4
    867e:	bcc.n	8634 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    8680:	subs	r2, #1
	ldrb    r3, [r1], #1
    8682:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    8686:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    868a:	bcs.n	8680 <memcpy+0x118>

	ldrb	r3, [r1]
    868c:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    868e:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    8690:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    8692:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    8694:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    8696:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    8698:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    869a:	bx	lr

0000869c <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    869c:	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    869e:	ldr	r1, [pc, #80]	; (86f0 <rx_queue_transfer+0x54>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    86a0:	mov.w	r7, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    86a4:	ldr	r5, [pc, #76]	; (86f4 <rx_queue_transfer+0x58>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    86a6:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    86a8:	add.w	r4, r1, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    86ac:	ldr	r6, [pc, #72]	; (86f8 <rx_queue_transfer+0x5c>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    86ae:	ldr	r2, [pc, #76]	; (86fc <rx_queue_transfer+0x60>)
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    86b0:	add.w	r5, r5, r0, lsl #5
    86b4:	mov	r1, r4
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    86b6:	str	r7, [r2, #0]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    86b8:	mov	r0, r5
    86ba:	ldrh	r2, [r6, #0]
    86bc:	bl	9660 <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    86c0:	ldrh	r1, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    86c2:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    86c6:	add	r1, r4
	asm volatile("": : :"memory");
	asm("dsb");
    86c8:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    86cc:	ldr	r2, [pc, #48]	; (8700 <rx_queue_transfer+0x64>)
    86ce:	str	r3, [r2, #0]
		location += 32;
    86d0:	adds	r3, #32
	} while (location < end_addr);
    86d2:	cmp	r1, r3
    86d4:	bhi.n	86ce <rx_queue_transfer+0x32>
	asm("dsb");
    86d6:	dsb	sy
	asm("isb");
    86da:	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    86de:	movs	r0, #3
    86e0:	mov	r1, r5
    86e2:	bl	96b8 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    86e6:	ldr	r3, [pc, #28]	; (8704 <rx_queue_transfer+0x68>)
    86e8:	mov.w	r2, #131072	; 0x20000
    86ec:	str	r2, [r3, #0]
    86ee:	pop	{r3, r4, r5, r6, r7, pc}
    86f0:	.word	0x20200000
    86f4:	.word	0x2000e480
    86f8:	.word	0x2000e58e
    86fc:	.word	0xe000e18c
    8700:	.word	0xe000ef5c
    8704:	.word	0xe000e10c

00008708 <rx_event>:
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    8708:	ldr	r2, [pc, #144]	; (879c <rx_event+0x94>)
    870a:	ldr	r3, [r0, #4]
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
    870c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    8710:	ubfx	r3, r3, #16, #15
    8714:	ldrh	r4, [r2, #0]
	int i = t->callback_param;
    8716:	ldr	r5, [r0, #28]
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    8718:	subs	r4, r4, r3
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    871a:	cmp	r4, #0
    871c:	ble.n	8790 <rx_event+0x88>
		// received a packet with data
		uint32_t head = rx_head;
    871e:	ldr	r1, [pc, #128]	; (87a0 <rx_event+0x98>)
		if (head != rx_tail) {
    8720:	ldr	r2, [pc, #128]	; (87a4 <rx_event+0x9c>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    8722:	ldrb	r3, [r1, #0]
		if (head != rx_tail) {
    8724:	ldrb	r2, [r2, #0]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    8726:	uxtb	r3, r3
		if (head != rx_tail) {
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    8728:	ldr	r0, [pc, #124]	; (87a8 <rx_event+0xa0>)
			uint32_t count = rx_count[ii];
    872a:	ldr	r6, [pc, #128]	; (87ac <rx_event+0xa4>)
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
		if (head != rx_tail) {
    872c:	cmp	r3, r2
    872e:	beq.n	8740 <rx_event+0x38>
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    8730:	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    8734:	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    8738:	rsb	r2, r7, #512	; 0x200
    873c:	cmp	r4, r2
    873e:	bls.n	8766 <rx_event+0x5e>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    8740:	adds	r3, #1
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
    8742:	movs	r2, #0
    8744:	ldr	r7, [pc, #104]	; (87b0 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    8746:	cmp	r3, #8
				// TODO: trigger serialEvent
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
    8748:	strh.w	r4, [r6, r5, lsl #1]
		rx_index[i] = 0;
    874c:	strh.w	r2, [r7, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
    8750:	ldr	r6, [pc, #96]	; (87b4 <rx_event+0xac>)
    8752:	ite	ls
    8754:	uxtbls	r2, r3
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    8756:	movhi	r3, r2
		rx_list[head] = i;
		rx_head = head;
    8758:	strb	r2, [r1, #0]
		rx_available += len;
    875a:	ldr	r2, [r6, #0]
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
    875c:	strb	r5, [r0, r3]
		rx_head = head;
		rx_available += len;
    875e:	add	r4, r2
    8760:	str	r4, [r6, #0]
    8762:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    8766:	ldr	r3, [pc, #80]	; (87b8 <rx_event+0xb0>)
    8768:	add.w	r0, r7, r8, lsl #9
    876c:	mov	r2, r4
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    876e:	add	r7, r4
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    8770:	add.w	r1, r3, r5, lsl #9
    8774:	add	r0, r3
    8776:	bl	8568 <memcpy>
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
    877a:	ldr	r2, [pc, #56]	; (87b4 <rx_event+0xac>)
				rx_queue_transfer(i);
    877c:	mov	r0, r5
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    877e:	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    8782:	ldr	r3, [r2, #0]
    8784:	add	r4, r3
    8786:	str	r4, [r2, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    8788:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
				rx_queue_transfer(i);
    878c:	b.w	869c <rx_queue_transfer>
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    8790:	mov	r0, r5
	}
}
    8792:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    8796:	b.w	869c <rx_queue_transfer>
    879a:	nop
    879c:	.word	0x2000e58e
    87a0:	.word	0x2000e5a4
    87a4:	.word	0x2000e580
    87a8:	.word	0x2000e584
    87ac:	.word	0x2000e590
    87b0:	.word	0x2000e450
    87b4:	.word	0x2000e5a0
    87b8:	.word	0x20200000

000087bc <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    87bc:	ldr	r3, [pc, #120]	; (8838 <usb_serial_flush_callback+0x7c>)
    87be:	ldrb	r2, [r3, #0]
    87c0:	cbnz	r2, 87da <usb_serial_flush_callback+0x1e>
    87c2:	and.w	r3, r2, #255	; 0xff
	if (!usb_configuration) return;
    87c6:	ldr	r2, [pc, #116]	; (883c <usb_serial_flush_callback+0x80>)
    87c8:	ldrb	r2, [r2, #0]
    87ca:	cbz	r2, 87da <usb_serial_flush_callback+0x1e>
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
    87cc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
    87d0:	ldr	r5, [pc, #108]	; (8840 <usb_serial_flush_callback+0x84>)
    87d2:	ldrh	r2, [r5, #0]
    87d4:	cbnz	r2, 87dc <usb_serial_flush_callback+0x20>
    87d6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    87da:	bx	lr
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    87dc:	ldr	r6, [pc, #100]	; (8844 <usb_serial_flush_callback+0x88>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    87de:	rsb	r8, r2, #2048	; 0x800
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    87e2:	ldr	r7, [pc, #100]	; (8848 <usb_serial_flush_callback+0x8c>)
    87e4:	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    87e6:	mov	r2, r8
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    87e8:	ldr	r4, [pc, #96]	; (884c <usb_serial_flush_callback+0x90>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    87ea:	add.w	r7, r7, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    87ee:	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    87f2:	mov	r0, r7
    87f4:	mov	r1, r4
    87f6:	bl	9660 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    87fa:	add.w	r2, r8, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    87fe:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    8802:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    8806:	ldr	r3, [pc, #72]	; (8850 <usb_serial_flush_callback+0x94>)
    8808:	str	r1, [r3, #0]
		location += 32;
    880a:	adds	r1, #32
	} while (location < end_addr);
    880c:	cmp	r2, r1
    880e:	bhi.n	8808 <usb_serial_flush_callback+0x4c>
	asm("dsb");
    8810:	dsb	sy
	asm("isb");
    8814:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    8818:	movs	r0, #3
    881a:	mov	r1, r7
    881c:	bl	9690 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    8820:	ldrb	r3, [r6, #0]
    8822:	ldr	r2, [pc, #32]	; (8844 <usb_serial_flush_callback+0x88>)
    8824:	adds	r3, #1
    8826:	uxtb	r3, r3
    8828:	cmp	r3, #3
    882a:	it	hi
    882c:	movhi	r3, #0
    882e:	strb	r3, [r2, #0]
	tx_available = 0;
    8830:	movs	r3, #0
    8832:	strh	r3, [r5, #0]
    8834:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8838:	.word	0x2000e462
    883c:	.word	0x2000e678
    8840:	.word	0x2000e5a6
    8844:	.word	0x2000e463
    8848:	.word	0x2000e5c0
    884c:	.word	0x20201000
    8850:	.word	0xe000ef70

00008854 <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    8854:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8858:	sub	sp, #20
    885a:	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    885c:	str	r1, [sp, #4]
    885e:	cmp	r1, #0
    8860:	beq.w	89a8 <usb_serial_write.part.1+0x154>
    8864:	movs	r3, #0
    8866:	ldr.w	r8, [pc, #348]	; 89c4 <usb_serial_write.part.1+0x170>
    886a:	ldr.w	r9, [pc, #332]	; 89b8 <usb_serial_write.part.1+0x164>
    886e:	str	r3, [sp, #0]
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
    8870:	ldr	r6, [pc, #312]	; (89ac <usb_serial_write.part.1+0x158>)
    8872:	ldrh.w	r3, [r8]
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    8876:	ldr.w	sl, [pc, #336]	; 89c8 <usb_serial_write.part.1+0x174>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
	do {
		SCB_CACHE_DCCIMVAC = location;
    887a:	ldr.w	fp, [pc, #336]	; 89cc <usb_serial_write.part.1+0x178>
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
    887e:	ldr	r2, [pc, #304]	; (89b0 <usb_serial_write.part.1+0x15c>)
    8880:	ldrb	r4, [r2, #0]
    8882:	ldr	r2, [pc, #304]	; (89b4 <usb_serial_write.part.1+0x160>)
    8884:	add.w	r7, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    8888:	cmp	r3, #0
    888a:	bne.n	896a <usb_serial_write.part.1+0x116>
    888c:	mov	r5, r3
    888e:	mov	r4, r3
    8890:	b.n	88bc <usb_serial_write.part.1+0x68>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    8892:	ldrb.w	r3, [r9]
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
    8896:	cbnz	r4, 889a <usb_serial_write.part.1+0x46>
				wait_begin_at = systick_millis_count;
    8898:	ldr	r5, [r6, #0]
    889a:	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    889c:	cmp	r3, #0
    889e:	bne.n	895e <usb_serial_write.part.1+0x10a>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    88a0:	ldr	r3, [r6, #0]
    88a2:	subs	r3, r3, r5
    88a4:	cmp	r3, #120	; 0x78
    88a6:	bhi.n	899c <usb_serial_write.part.1+0x148>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    88a8:	ldrb.w	r3, [sl]
    88ac:	cmp	r3, #0
    88ae:	beq.n	895e <usb_serial_write.part.1+0x10a>
			yield();
    88b0:	bl	a37c <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    88b4:	ldrh.w	r3, [r8]
    88b8:	cmp	r3, #0
    88ba:	bne.n	8966 <usb_serial_write.part.1+0x112>
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
    88bc:	mov	r0, r7
    88be:	bl	96dc <usb_transfer_status>
			if (!(status & 0x80)) {
    88c2:	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    88c6:	ldr	r2, [pc, #240]	; (89b8 <usb_serial_write.part.1+0x164>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
    88c8:	bne.n	8892 <usb_serial_write.part.1+0x3e>
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    88ca:	mov.w	r3, #2048	; 0x800
    88ce:	ldr	r2, [pc, #224]	; (89b0 <usb_serial_write.part.1+0x15c>)
				transmit_previous_timeout = 0;
    88d0:	strb.w	r0, [r9]
    88d4:	ldrb	r4, [r2, #0]
    88d6:	mov	r2, r3
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    88d8:	strh.w	r3, [r8]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    88dc:	lsls	r4, r4, #11
		if (size >= tx_available) {
    88de:	ldr	r5, [sp, #4]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    88e0:	ldr	r1, [pc, #216]	; (89bc <usb_serial_write.part.1+0x168>)
    88e2:	add	r0, r4
		if (size >= tx_available) {
    88e4:	cmp	r5, r2
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    88e6:	add	r0, r1
		if (size >= tx_available) {
    88e8:	bcc.n	8972 <usb_serial_write.part.1+0x11e>
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    88ea:	add	r4, r1
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
    88ec:	ldr	r1, [sp, #8]
    88ee:	bl	8568 <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    88f2:	movs	r3, #0
    88f4:	mov	r1, r4
    88f6:	mov.w	r2, #2048	; 0x800
    88fa:	mov	r0, r7
    88fc:	bl	9660 <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    8900:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    8904:	add.w	r4, r4, #2048	; 0x800
	asm volatile("": : :"memory");
	asm("dsb");
    8908:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    890c:	str.w	r3, [fp]
		location += 32;
    8910:	adds	r3, #32
	} while (location < end_addr);
    8912:	cmp	r4, r3
    8914:	bhi.n	890c <usb_serial_write.part.1+0xb8>
	asm("dsb");
    8916:	dsb	sy
	asm("isb");
    891a:	isb	sy
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    891e:	movs	r0, #3
    8920:	mov	r1, r7
    8922:	bl	9690 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    8926:	ldr	r3, [pc, #136]	; (89b0 <usb_serial_write.part.1+0x15c>)
    8928:	ldr	r2, [pc, #132]	; (89b0 <usb_serial_write.part.1+0x15c>)
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    892a:	movs	r1, #0
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    892c:	ldrb	r3, [r3, #0]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    892e:	ldr	r0, [pc, #144]	; (89c0 <usb_serial_write.part.1+0x16c>)
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    8930:	adds	r3, #1
    8932:	uxtb	r3, r3
    8934:	cmp	r3, #3
    8936:	it	hi
    8938:	movhi	r3, #0
    893a:	strb	r3, [r2, #0]
			size -= tx_available;
    893c:	ldrh.w	r2, [r8]
			sent += tx_available;
    8940:	ldr	r3, [sp, #0]
			data += tx_available;
			tx_available = 0;
    8942:	strh.w	r1, [r8]
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
    8946:	add	r3, r2
    8948:	str	r3, [sp, #0]
			data += tx_available;
    894a:	ldr	r3, [sp, #8]
    894c:	add	r3, r2
    894e:	str	r3, [sp, #8]
    8950:	mov	r3, r1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    8952:	str.w	r1, [r0, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    8956:	ldr	r1, [sp, #4]
    8958:	subs	r2, r1, r2
    895a:	str	r2, [sp, #4]
    895c:	bne.n	887e <usb_serial_write.part.1+0x2a>
    895e:	ldr	r0, [sp, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    8960:	add	sp, #20
    8962:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8966:	ldr	r2, [pc, #72]	; (89b0 <usb_serial_write.part.1+0x15c>)
    8968:	ldrb	r4, [r2, #0]
    896a:	mov	r2, r3
    896c:	rsb	r0, r3, #2048	; 0x800
    8970:	b.n	88dc <usb_serial_write.part.1+0x88>
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    8972:	ldr	r4, [sp, #4]
    8974:	ldr	r1, [sp, #8]
    8976:	mov	r2, r4
    8978:	str	r3, [sp, #12]
    897a:	bl	8568 <memcpy>
			tx_available -= size;
    897e:	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    8980:	ldr	r2, [pc, #60]	; (89c0 <usb_serial_write.part.1+0x16c>)
    8982:	mov.w	r1, #3221225472	; 0xc0000000
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    8986:	subs	r3, r3, r4
    8988:	strh.w	r3, [r8]
    898c:	ldr	r3, [sp, #0]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    898e:	str.w	r1, [r2, #132]	; 0x84
    8992:	mov	r0, r3
    8994:	add	r0, r4
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    8996:	add	sp, #20
    8998:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    899c:	movs	r3, #1
				return sent;
    899e:	ldr	r0, [sp, #0]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    89a0:	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    89a2:	add	sp, #20
    89a4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    89a8:	ldr	r0, [sp, #4]
    89aa:	b.n	8960 <usb_serial_write.part.1+0x10c>
    89ac:	.word	0x2000e684
    89b0:	.word	0x2000e463
    89b4:	.word	0x2000e5c0
    89b8:	.word	0x2000e5a5
    89bc:	.word	0x20201000
    89c0:	.word	0x402e0000
    89c4:	.word	0x2000e5a6
    89c8:	.word	0x2000e678
    89cc:	.word	0xe000ef70

000089d0 <usb_serial_reset>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_serial_reset(void)
{
    89d0:	bx	lr
    89d2:	nop

000089d4 <usb_serial_configure>:
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    89d4:	ldr	r3, [pc, #196]	; (8a9c <usb_serial_configure+0xc8>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
    89d6:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    89da:	ldrb	r3, [r3, #0]
		tx_packet_size = CDC_TX_SIZE_480;
    89dc:	ldr	r7, [pc, #192]	; (8aa0 <usb_serial_configure+0xcc>)
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    89de:	cmp	r3, #0
    89e0:	beq.n	8a8c <usb_serial_configure+0xb8>
		tx_packet_size = CDC_TX_SIZE_480;
    89e2:	mov.w	r3, #512	; 0x200
		rx_packet_size = CDC_RX_SIZE_480;
    89e6:	ldr.w	r8, [pc, #236]	; 8ad4 <usb_serial_configure+0x100>
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
    89ea:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    89ec:	strh.w	r3, [r8]
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    89f0:	movs	r1, #0
    89f2:	movs	r2, #128	; 0x80
    89f4:	ldr	r0, [pc, #172]	; (8aa4 <usb_serial_configure+0xd0>)
	tx_head = 0;
    89f6:	mov	r5, r1
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    89f8:	ldr	r6, [pc, #172]	; (8aa8 <usb_serial_configure+0xd4>)
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    89fa:	bl	bc2c <memset>
	tx_head = 0;
    89fe:	ldr	r4, [pc, #172]	; (8aac <usb_serial_configure+0xd8>)
	tx_available = 0;
    8a00:	ldr	r3, [pc, #172]	; (8ab0 <usb_serial_configure+0xdc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    8a02:	mov	r1, r5
    8a04:	mov.w	r2, #256	; 0x100
    8a08:	ldr	r0, [pc, #168]	; (8ab4 <usb_serial_configure+0xe0>)
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    8a0a:	strb	r5, [r4, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    8a0c:	mov	r4, r5
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    8a0e:	strh	r5, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    8a10:	bl	bc2c <memset>
	memset(rx_count, 0, sizeof(rx_count));
    8a14:	str	r5, [r6, #0]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    8a16:	mov	r3, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    8a18:	str	r5, [r6, #4]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    8a1a:	mov	r2, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    8a1c:	str	r5, [r6, #8]
    8a1e:	str	r5, [r6, #12]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    8a20:	ldr	r1, [pc, #148]	; (8ab8 <usb_serial_configure+0xe4>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    8a22:	ldr	r6, [pc, #152]	; (8abc <usb_serial_configure+0xe8>)
	rx_head = 0;
	rx_tail = 0;
    8a24:	ldr	r0, [pc, #152]	; (8ac0 <usb_serial_configure+0xec>)
	rx_available = 0;
    8a26:	ldr.w	lr, [pc, #176]	; 8ad8 <usb_serial_configure+0x104>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    8a2a:	strb	r5, [r1, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    8a2c:	movs	r1, #16
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
    8a2e:	strb	r5, [r0, #0]
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    8a30:	movs	r0, #2
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    8a32:	str	r5, [r6, #0]
    8a34:	str	r5, [r6, #4]
    8a36:	str	r5, [r6, #8]
    8a38:	str	r5, [r6, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
    8a3a:	str.w	r5, [lr]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    8a3e:	bl	95f8 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    8a42:	ldrh.w	r1, [r8]
    8a46:	mov	r2, r5
    8a48:	ldr	r3, [pc, #120]	; (8ac4 <usb_serial_configure+0xf0>)
    8a4a:	movs	r0, #3
    8a4c:	bl	9594 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    8a50:	mov	r3, r5
    8a52:	ldrh	r1, [r7, #0]
    8a54:	movs	r2, #1
    8a56:	movs	r0, #3
    8a58:	bl	95f8 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    8a5c:	mov	r0, r4
    8a5e:	adds	r4, #1
    8a60:	bl	869c <rx_queue_transfer>
    8a64:	cmp	r4, #8
    8a66:	bne.n	8a5c <usb_serial_configure+0x88>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    8a68:	ldr	r3, [pc, #92]	; (8ac8 <usb_serial_configure+0xf4>)
	USB1_GPTIMER0LD = microseconds - 1;
    8a6a:	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    8a6c:	ldr	r0, [pc, #92]	; (8acc <usb_serial_configure+0xf8>)
	USB1_GPTIMER0CTRL = 0;
    8a6e:	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    8a70:	ldr	r4, [pc, #92]	; (8ad0 <usb_serial_configure+0xfc>)
    8a72:	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    8a74:	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    8a78:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    8a7c:	ldr.w	r2, [r3, #328]	; 0x148
    8a80:	orr.w	r2, r2, #16777216	; 0x1000000
    8a84:	str.w	r2, [r3, #328]	; 0x148
    8a88:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    8a8c:	movs	r3, #64	; 0x40
		rx_packet_size = CDC_RX_SIZE_12;
    8a8e:	ldr.w	r8, [pc, #68]	; 8ad4 <usb_serial_configure+0x100>
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    8a92:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_12;
    8a94:	strh.w	r3, [r8]
    8a98:	b.n	89f0 <usb_serial_configure+0x1c>
    8a9a:	nop
    8a9c:	.word	0x2000e650
    8aa0:	.word	0x2000e460
    8aa4:	.word	0x2000e5c0
    8aa8:	.word	0x2000e590
    8aac:	.word	0x2000e463
    8ab0:	.word	0x2000e5a6
    8ab4:	.word	0x2000e480
    8ab8:	.word	0x2000e5a4
    8abc:	.word	0x2000e450
    8ac0:	.word	0x2000e580
    8ac4:	.word	0x00008709
    8ac8:	.word	0x402e0000
    8acc:	.word	0x2000e640
    8ad0:	.word	0x000087bd
    8ad4:	.word	0x2000e58e
    8ad8:	.word	0x2000e5a0

00008adc <usb_serial_read>:
int usb_serial_read(void *buffer, uint32_t size)
{
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    8adc:	ldr	r3, [pc, #196]	; (8ba4 <usb_serial_read+0xc8>)
    8ade:	mov.w	r2, #131072	; 0x20000

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    8ae2:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    8ae6:	str	r2, [r3, #0]

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    8ae8:	sub	sp, #12
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    8aea:	ldr	r3, [pc, #188]	; (8ba8 <usb_serial_read+0xcc>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    8aec:	mov	r9, r1
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    8aee:	ldrb	r4, [r3, #0]
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    8af0:	cmp	r1, #0
    8af2:	beq.n	8b9c <usb_serial_read+0xc0>
    8af4:	ldr	r3, [pc, #180]	; (8bac <usb_serial_read+0xd0>)
    8af6:	uxtb	r4, r4
    8af8:	ldrb	r3, [r3, #0]
    8afa:	cmp	r4, r3
    8afc:	beq.n	8ba0 <usb_serial_read+0xc4>
    8afe:	mov	sl, r0
    8b00:	movs	r7, #0
    8b02:	ldr.w	fp, [pc, #192]	; 8bc4 <usb_serial_read+0xe8>
		if (++tail > RX_NUM) tail = 0;
    8b06:	adds	r4, #1
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    8b08:	ldr	r3, [pc, #164]	; (8bb0 <usb_serial_read+0xd4>)
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
    8b0a:	rsb	r8, r7, r9
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    8b0e:	mov	r0, sl
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    8b10:	cmp	r4, #9
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    8b12:	str	r3, [sp, #4]
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
    8b14:	ldr	r3, [pc, #156]	; (8bb4 <usb_serial_read+0xd8>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    8b16:	it	cs
    8b18:	movcs	r4, #0
		uint32_t i = rx_list[tail];
    8b1a:	ldrb	r5, [r3, r4]
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    8b1c:	ldr	r3, [pc, #144]	; (8bb0 <usb_serial_read+0xd4>)
    8b1e:	ldrh.w	lr, [r3, r5, lsl #1]
    8b22:	ldr	r3, [pc, #148]	; (8bb8 <usb_serial_read+0xdc>)
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    8b24:	add.w	r1, lr, r5, lsl #9
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    8b28:	ldrh.w	r6, [r3, r5, lsl #1]
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    8b2c:	ldr	r3, [pc, #140]	; (8bbc <usb_serial_read+0xe0>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    8b2e:	rsb	r6, lr, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    8b32:	add	r1, r3
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    8b34:	cmp	r8, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    8b36:	mov	r2, r6
			p += avail;
			rx_available -= avail;
			count += avail;
    8b38:	add	r7, r6
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    8b3a:	bcs.n	8b70 <usb_serial_read+0x94>
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    8b3c:	add.w	r1, lr, r5, lsl #9
    8b40:	mov	r2, r8
    8b42:	add	r1, r3
    8b44:	bl	8568 <memcpy>
			rx_available -= len;
			rx_index[i] += len;
    8b48:	ldr	r3, [sp, #4]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    8b4a:	ldr.w	r1, [fp]
    8b4e:	mov	r0, r9
			rx_index[i] += len;
    8b50:	ldrh.w	r2, [r3, r5, lsl #1]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    8b54:	rsb	r1, r8, r1
			rx_index[i] += len;
    8b58:	add	r8, r2
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    8b5a:	str.w	r1, [fp]
			rx_index[i] += len;
    8b5e:	strh.w	r8, [r3, r5, lsl #1]
			count += avail;
			rx_tail = tail;
			rx_queue_transfer(i);
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
    8b62:	ldr	r3, [pc, #92]	; (8bc0 <usb_serial_read+0xe4>)
    8b64:	mov.w	r2, #131072	; 0x20000
    8b68:	str	r2, [r3, #0]
	return count;
}
    8b6a:	add	sp, #12
    8b6c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    8b70:	bl	8568 <memcpy>
			p += avail;
			rx_available -= avail;
    8b74:	ldr.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    8b78:	uxtb	r3, r4
			rx_queue_transfer(i);
    8b7a:	mov	r0, r5
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
			rx_available -= avail;
    8b7c:	subs	r2, r2, r6
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
    8b7e:	add	sl, r6
			rx_available -= avail;
    8b80:	str.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    8b84:	ldr	r2, [pc, #32]	; (8ba8 <usb_serial_read+0xcc>)
    8b86:	strb	r3, [r2, #0]
			rx_queue_transfer(i);
    8b88:	bl	869c <rx_queue_transfer>

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    8b8c:	cmp	r9, r7
    8b8e:	bls.n	8b98 <usb_serial_read+0xbc>
    8b90:	ldr	r3, [pc, #24]	; (8bac <usb_serial_read+0xd0>)
    8b92:	ldrb	r3, [r3, #0]
    8b94:	cmp	r4, r3
    8b96:	bne.n	8b06 <usb_serial_read+0x2a>
    8b98:	mov	r0, r7
    8b9a:	b.n	8b62 <usb_serial_read+0x86>
    8b9c:	mov	r0, r1
    8b9e:	b.n	8b62 <usb_serial_read+0x86>
    8ba0:	movs	r0, #0
    8ba2:	b.n	8b62 <usb_serial_read+0x86>
    8ba4:	.word	0xe000e18c
    8ba8:	.word	0x2000e580
    8bac:	.word	0x2000e5a4
    8bb0:	.word	0x2000e450
    8bb4:	.word	0x2000e584
    8bb8:	.word	0x2000e590
    8bbc:	.word	0x20200000
    8bc0:	.word	0xe000e10c
    8bc4:	.word	0x2000e5a0

00008bc8 <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    8bc8:	ldr	r3, [pc, #44]	; (8bf8 <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
    8bca:	ldr	r2, [pc, #48]	; (8bfc <usb_serial_peekchar+0x34>)
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    8bcc:	ldrb	r3, [r3, #0]
	if (tail == rx_head) return -1;
    8bce:	ldrb	r2, [r2, #0]
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    8bd0:	uxtb	r3, r3
	if (tail == rx_head) return -1;
    8bd2:	cmp	r3, r2
    8bd4:	beq.n	8bf2 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    8bd6:	adds	r3, #1
	uint32_t i = rx_list[tail];
    8bd8:	ldr	r0, [pc, #36]	; (8c00 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    8bda:	ldr	r2, [pc, #40]	; (8c04 <usb_serial_peekchar+0x3c>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    8bdc:	cmp	r3, #9
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    8bde:	ldr	r1, [pc, #40]	; (8c08 <usb_serial_peekchar+0x40>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    8be0:	it	cs
    8be2:	movcs	r3, #0
	uint32_t i = rx_list[tail];
    8be4:	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    8be6:	ldrh.w	r1, [r1, r3, lsl #1]
    8bea:	add.w	r3, r2, r3, lsl #9
    8bee:	ldrb	r0, [r3, r1]
    8bf0:	bx	lr

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
    8bf2:	mov.w	r0, #4294967295
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
}
    8bf6:	bx	lr
    8bf8:	.word	0x2000e580
    8bfc:	.word	0x2000e5a4
    8c00:	.word	0x2000e584
    8c04:	.word	0x20200000
    8c08:	.word	0x2000e450

00008c0c <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_available;
    8c0c:	ldr	r3, [pc, #4]	; (8c14 <usb_serial_available+0x8>)
    8c0e:	ldr	r0, [r3, #0]
}
    8c10:	bx	lr
    8c12:	nop
    8c14:	.word	0x2000e5a0

00008c18 <usb_serial_flush_input>:

// discard any buffered input
void usb_serial_flush_input(void)
{
    8c18:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    8c1c:	ldr	r6, [pc, #84]	; (8c74 <usb_serial_flush_input+0x5c>)
	while (tail != rx_head) {
    8c1e:	ldr	r5, [pc, #88]	; (8c78 <usb_serial_flush_input+0x60>)
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    8c20:	ldrb	r4, [r6, #0]
	while (tail != rx_head) {
    8c22:	ldrb	r3, [r5, #0]
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    8c24:	uxtb	r4, r4
	while (tail != rx_head) {
    8c26:	cmp	r4, r3
    8c28:	beq.n	8c6e <usb_serial_flush_input+0x56>
    8c2a:	ldr.w	r9, [pc, #84]	; 8c80 <usb_serial_flush_input+0x68>
    8c2e:	ldr.w	fp, [pc, #84]	; 8c84 <usb_serial_flush_input+0x6c>
    8c32:	ldr.w	r8, [pc, #84]	; 8c88 <usb_serial_flush_input+0x70>
    8c36:	ldr	r7, [pc, #68]	; (8c7c <usb_serial_flush_input+0x64>)
		if (++tail > RX_NUM) tail = 0;
    8c38:	adds	r4, #1
    8c3a:	cmp	r4, #8
    8c3c:	uxtb.w	sl, r4
    8c40:	bls.n	8c46 <usb_serial_flush_input+0x2e>
    8c42:	movs	r4, #0
    8c44:	mov	sl, r4
		uint32_t i = rx_list[tail];
    8c46:	ldrb.w	r1, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    8c4a:	ldr.w	r2, [fp]
    8c4e:	ldrh.w	r3, [r8, r1, lsl #1]
		rx_queue_transfer(i);
    8c52:	mov	r0, r1
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
    8c54:	ldrh.w	r1, [r7, r1, lsl #1]
    8c58:	subs	r3, r3, r1
    8c5a:	subs	r3, r2, r3
    8c5c:	str.w	r3, [fp]
		rx_queue_transfer(i);
    8c60:	bl	869c <rx_queue_transfer>
		rx_tail = tail;
    8c64:	strb.w	sl, [r6]

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
    8c68:	ldrb	r3, [r5, #0]
    8c6a:	cmp	r4, r3
    8c6c:	bne.n	8c38 <usb_serial_flush_input+0x20>
    8c6e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8c72:	nop
    8c74:	.word	0x2000e580
    8c78:	.word	0x2000e5a4
    8c7c:	.word	0x2000e450
    8c80:	.word	0x2000e584
    8c84:	.word	0x2000e5a0
    8c88:	.word	0x2000e590

00008c8c <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    8c8c:	push	{lr}
    8c8e:	sub	sp, #12
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
    8c90:	movs	r1, #1
    8c92:	add.w	r0, sp, #7
    8c96:	bl	8adc <usb_serial_read>
    8c9a:	cbz	r0, 8ca6 <usb_serial_getchar+0x1a>
    8c9c:	ldrb.w	r0, [sp, #7]
	return -1;
}
    8ca0:	add	sp, #12
    8ca2:	ldr.w	pc, [sp], #4
// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
	return -1;
    8ca6:	mov.w	r0, #4294967295
    8caa:	b.n	8ca0 <usb_serial_getchar+0x14>

00008cac <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    8cac:	ldr	r3, [pc, #36]	; (8cd4 <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    8cae:	push	{lr}
    8cb0:	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    8cb2:	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    8cb4:	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    8cb8:	cbnz	r3, 8cc4 <usb_serial_putchar+0x18>
    8cba:	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
    8cbe:	add	sp, #12
    8cc0:	ldr.w	pc, [sp], #4
    8cc4:	movs	r1, #1
    8cc6:	add.w	r0, sp, #7
    8cca:	bl	8854 <usb_serial_write.part.1>
    8cce:	add	sp, #12
    8cd0:	ldr.w	pc, [sp], #4
    8cd4:	.word	0x2000e678

00008cd8 <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    8cd8:	ldr	r3, [pc, #16]	; (8cec <usb_serial_write+0x14>)
    8cda:	ldrb	r3, [r3, #0]
    8cdc:	and.w	r2, r3, #255	; 0xff
    8ce0:	cbz	r3, 8ce6 <usb_serial_write+0xe>
    8ce2:	b.w	8854 <usb_serial_write.part.1>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    8ce6:	mov	r0, r2
    8ce8:	bx	lr
    8cea:	nop
    8cec:	.word	0x2000e678

00008cf0 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    8cf0:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    8cf4:	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
    8cf6:	ldr.w	r8, [pc, #64]	; 8d38 <usb_serial_write_buffer_free+0x48>
    8cfa:	movs	r3, #1
    8cfc:	ldr	r5, [pc, #48]	; (8d30 <usb_serial_write_buffer_free+0x40>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
    8cfe:	mov	r7, r4
    8d00:	ldr	r6, [pc, #48]	; (8d34 <usb_serial_write_buffer_free+0x44>)
	tx_noautoflush = 1;
    8d02:	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    8d06:	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    8d08:	mov	r0, r5
    8d0a:	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    8d0c:	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    8d0e:	add.w	r4, r4, #1
		if (i == tx_head) continue;
    8d12:	beq.n	8d20 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    8d14:	bl	96dc <usb_transfer_status>
    8d18:	lsls	r3, r0, #24
    8d1a:	it	pl
    8d1c:	addpl.w	r7, r7, #2048	; 0x800

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    8d20:	cmp	r4, #4
    8d22:	bne.n	8d06 <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    8d24:	movs	r3, #0
	return sum;
}
    8d26:	mov	r0, r7
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    8d28:	strb.w	r3, [r8]
	return sum;
}
    8d2c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8d30:	.word	0x2000e5c0
    8d34:	.word	0x2000e463
    8d38:	.word	0x2000e462

00008d3c <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    8d3c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	if (!usb_configuration) return;
    8d40:	ldr	r3, [pc, #124]	; (8dc0 <usb_serial_flush_output+0x84>)
    8d42:	ldrb	r3, [r3, #0]
    8d44:	cbz	r3, 8d4c <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    8d46:	ldr	r5, [pc, #124]	; (8dc4 <usb_serial_flush_output+0x88>)
    8d48:	ldrh	r2, [r5, #0]
    8d4a:	cbnz	r2, 8d50 <usb_serial_flush_output+0x14>
    8d4c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    8d50:	ldr.w	r8, [pc, #132]	; 8dd8 <usb_serial_flush_output+0x9c>
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    8d54:	rsb	r9, r2, #2048	; 0x800
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    8d58:	ldr	r6, [pc, #108]	; (8dc8 <usb_serial_flush_output+0x8c>)
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    8d5a:	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
    8d5e:	ldrb.w	r1, [r8]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    8d62:	mov	r2, r9

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    8d64:	ldr	r4, [pc, #100]	; (8dcc <usb_serial_flush_output+0x90>)
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    8d66:	movs	r3, #0
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    8d68:	add.w	r6, r6, r1, lsl #5
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    8d6c:	ldr	r7, [pc, #96]	; (8dd0 <usb_serial_flush_output+0x94>)
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    8d6e:	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    8d72:	mov	r0, r6
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    8d74:	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    8d78:	mov	r1, r4
    8d7a:	bl	9660 <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    8d7e:	add.w	r2, r9, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    8d82:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    8d86:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    8d8a:	ldr	r3, [pc, #72]	; (8dd4 <usb_serial_flush_output+0x98>)
    8d8c:	str	r1, [r3, #0]
		location += 32;
    8d8e:	adds	r1, #32
	} while (location < end_addr);
    8d90:	cmp	r2, r1
    8d92:	bhi.n	8d8c <usb_serial_flush_output+0x50>
	asm("dsb");
    8d94:	dsb	sy
	asm("isb");
    8d98:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    8d9c:	movs	r0, #3
    8d9e:	mov	r1, r6
    8da0:	bl	9690 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    8da4:	ldrb.w	r3, [r8]
    8da8:	ldr	r2, [pc, #44]	; (8dd8 <usb_serial_flush_output+0x9c>)
    8daa:	adds	r3, #1
    8dac:	uxtb	r3, r3
    8dae:	cmp	r3, #3
    8db0:	it	hi
    8db2:	movhi	r3, #0
    8db4:	strb	r3, [r2, #0]
	tx_available = 0;
    8db6:	movs	r3, #0
    8db8:	strh	r3, [r5, #0]
	tx_noautoflush = 0;
    8dba:	strb	r3, [r7, #0]
    8dbc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8dc0:	.word	0x2000e678
    8dc4:	.word	0x2000e5a6
    8dc8:	.word	0x2000e5c0
    8dcc:	.word	0x20201000
    8dd0:	.word	0x2000e462
    8dd4:	.word	0xe000ef70
    8dd8:	.word	0x2000e463

00008ddc <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    8ddc:	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    8dde:	push	{r4, r5, r6, r7}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    8de0:	cbz	r3, 8dea <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    8de2:	ldr	r3, [r2, #4]
    8de4:	orr.w	r3, r3, #32768	; 0x8000
    8de8:	str	r3, [r2, #4]
	}
	__disable_irq();
    8dea:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    8dec:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    8dee:	cbz	r4, 8e28 <schedule_transfer+0x4c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    8df0:	ldr	r3, [pc, #80]	; (8e44 <schedule_transfer+0x68>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    8df2:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    8df4:	ldr.w	r4, [r3, #432]	; 0x1b0
    8df8:	tst	r4, r1
    8dfa:	bne.n	8e3c <schedule_transfer+0x60>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    8dfc:	ldr	r5, [pc, #72]	; (8e48 <schedule_transfer+0x6c>)
    8dfe:	ldr	r7, [r5, #0]
    8e00:	b.n	8e0c <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    8e02:	ldr	r4, [r5, #0]
    8e04:	subs	r4, r4, r7
    8e06:	cmp.w	r4, #2400	; 0x960
    8e0a:	bcs.n	8e24 <schedule_transfer+0x48>
		if (USB1_ENDPTPRIME & epmask) goto end;
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    8e0c:	ldr.w	r4, [r3, #320]	; 0x140
    8e10:	orr.w	r4, r4, #16384	; 0x4000
    8e14:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    8e18:	ldr.w	r6, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    8e1c:	ldr.w	r4, [r3, #320]	; 0x140
    8e20:	lsls	r4, r4, #17
    8e22:	bpl.n	8e02 <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    8e24:	tst	r1, r6
    8e26:	bne.n	8e3c <schedule_transfer+0x60>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
    8e28:	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
    8e2a:	ldr	r4, [pc, #24]	; (8e44 <schedule_transfer+0x68>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    8e2c:	str	r2, [r0, #8]
	endpoint->status = 0;
    8e2e:	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    8e30:	ldr.w	r3, [r4, #432]	; 0x1b0
    8e34:	orrs	r1, r3
    8e36:	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    8e3a:	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    8e3c:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    8e3e:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    8e40:	pop	{r4, r5, r6, r7}
    8e42:	bx	lr
    8e44:	.word	0x402e0000
    8e48:	.word	0xe0001004

00008e4c <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    8e4c:	push	{r4, r5, r6, lr}
    8e4e:	mov	r6, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    8e50:	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
    8e52:	cbz	r0, 8e7a <run_callbacks+0x2e>
    8e54:	mov	r2, r0
    8e56:	movs	r4, #0
    8e58:	b.n	8e62 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    8e5a:	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    8e5c:	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
    8e5e:	cmp	r2, #1
    8e60:	beq.n	8e7c <run_callbacks+0x30>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    8e62:	ldr	r3, [r2, #4]
    8e64:	ands.w	r3, r3, #128	; 0x80
    8e68:	beq.n	8e5a <run_callbacks+0xe>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    8e6a:	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    8e6c:	cbz	r4, 8e7a <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
    8e6e:	ldr	r3, [r6, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
    8e70:	ldr	r5, [r0, #0]
		ep->callback_function(first);
    8e72:	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    8e74:	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
    8e76:	mov	r0, r5
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    8e78:	bne.n	8e6e <run_callbacks+0x22>
    8e7a:	pop	{r4, r5, r6, pc}
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    8e7c:	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
    8e7e:	str	r3, [r6, #52]	; 0x34
			break;
    8e80:	b.n	8e6c <run_callbacks+0x20>
    8e82:	nop

00008e84 <endpoint0_transmit.constprop.1>:
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    8e84:	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    8e86:	cbnz	r1, 8ec2 <endpoint0_transmit.constprop.1+0x3e>
    8e88:	ldr	r4, [pc, #132]	; (8f10 <endpoint0_transmit.constprop.1+0x8c>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8e8a:	ldr	r1, [pc, #136]	; (8f14 <endpoint0_transmit.constprop.1+0x90>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    8e8c:	movs	r0, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8e8e:	ldr	r3, [pc, #136]	; (8f18 <endpoint0_transmit.constprop.1+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8e90:	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8e92:	mov.w	r5, #65537	; 0x10001
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8e96:	movs	r6, #128	; 0x80
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    8e98:	str	r2, [r1, #0]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    8e9a:	mov	r2, r3
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    8e9c:	str	r1, [r4, #8]
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    8e9e:	str	r6, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    8ea0:	str	r0, [r4, #12]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    8ea2:	str.w	r5, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    8ea6:	ldr.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    8eaa:	ldr	r5, [pc, #112]	; (8f1c <endpoint0_transmit.constprop.1+0x98>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    8eac:	orr.w	r4, r4, #1
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    8eb0:	str	r0, [r1, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    8eb2:	str.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    8eb6:	str	r0, [r5, #0]
	while (USB1_ENDPTPRIME) ;
    8eb8:	ldr.w	r3, [r2, #432]	; 0x1b0
    8ebc:	cmp	r3, #0
    8ebe:	bne.n	8eb8 <endpoint0_transmit.constprop.1+0x34>
}
    8ec0:	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8ec2:	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    8ec4:	ldr	r3, [pc, #88]	; (8f20 <endpoint0_transmit.constprop.1+0x9c>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    8ec6:	ldr	r5, [pc, #80]	; (8f18 <endpoint0_transmit.constprop.1+0x94>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    8ec8:	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    8eca:	ldr	r4, [pc, #68]	; (8f10 <endpoint0_transmit.constprop.1+0x8c>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8ecc:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    8ed0:	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    8ed2:	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    8ed4:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    8ed6:	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    8eda:	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    8edc:	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    8ee0:	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    8ee2:	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    8ee6:	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    8eea:	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    8eee:	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    8ef0:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    8ef2:	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    8ef6:	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    8efa:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    8efe:	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    8f00:	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    8f02:	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    8f06:	ldr.w	r3, [r2, #432]	; 0x1b0
    8f0a:	cmp	r3, #0
    8f0c:	bne.n	8f06 <endpoint0_transmit.constprop.1+0x82>
    8f0e:	b.n	8e8a <endpoint0_transmit.constprop.1+0x6>
    8f10:	.word	0x20010000
    8f14:	.word	0x2000f020
    8f18:	.word	0x402e0000
    8f1c:	.word	0x2000e654
    8f20:	.word	0x2000f000

00008f24 <isr>:
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
    8f24:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    8f28:	ldr	r4, [pc, #700]	; (91e8 <isr+0x2c4>)
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
    8f2a:	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    8f2c:	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    8f30:	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    8f34:	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    8f38:	beq.n	8ff8 <isr+0xd4>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    8f3a:	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    8f3e:	cmp	r3, #0
    8f40:	beq.n	8fee <isr+0xca>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    8f42:	mov.w	fp, #65537	; 0x10001
    8f46:	ldr.w	r9, [pc, #712]	; 9210 <isr+0x2ec>
    8f4a:	ldr	r6, [pc, #672]	; (91ec <isr+0x2c8>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    8f4c:	mov	r5, r4
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    8f4e:	mov	sl, fp
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    8f50:	str.w	r3, [r4, #428]	; 0x1ac
    8f54:	ldr	r0, [r6, #40]	; 0x28
    8f56:	ldr	r2, [r6, #44]	; 0x2c
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    8f58:	ldr.w	r3, [r4, #320]	; 0x140
    8f5c:	orr.w	r3, r3, #8192	; 0x2000
    8f60:	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    8f64:	ldr.w	r3, [r4, #320]	; 0x140
    8f68:	lsls	r7, r3, #18
    8f6a:	bpl.n	8f58 <isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    8f6c:	ldr.w	r3, [r5, #320]	; 0x140
    8f70:	bic.w	r3, r3, #8192	; 0x2000
    8f74:	str.w	r3, [r5, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    8f78:	str.w	sl, [r5, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    8f7c:	ldr.w	r3, [r4, #436]	; 0x1b4
    8f80:	ands.w	r3, r3, #65537	; 0x10001
    8f84:	bne.n	8f7c <isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    8f86:	uxth	r1, r0
    8f88:	movw	r7, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    8f8c:	str.w	r3, [r9]
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    8f90:	cmp	r1, r7
    8f92:	bhi.w	90fe <isr+0x1da>
    8f96:	cmp.w	r1, #1664	; 0x680
    8f9a:	bcs.w	9374 <isr+0x450>
    8f9e:	cmp.w	r1, #258	; 0x102
    8fa2:	beq.w	9280 <isr+0x35c>
    8fa6:	bhi.w	9196 <isr+0x272>
    8faa:	cmp	r1, #128	; 0x80
    8fac:	beq.w	9266 <isr+0x342>
    8fb0:	cmp	r1, #130	; 0x82
    8fb2:	bne.w	9186 <isr+0x262>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    8fb6:	uxth	r2, r2
    8fb8:	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
    8fbc:	cmp	r1, #7
    8fbe:	bhi.w	9186 <isr+0x262>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    8fc2:	lsls	r1, r1, #2
    8fc4:	ldr	r0, [pc, #552]	; (91f0 <isr+0x2cc>)
		reply_buffer[0] = 0;
    8fc6:	ldr	r7, [pc, #556]	; (91f4 <isr+0x2d0>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    8fc8:	add	r0, r1
    8fca:	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    8fcc:	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
    8fce:	strb	r3, [r7, #0]
		reply_buffer[1] = 0;
    8fd0:	strb	r3, [r7, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    8fd2:	bpl.w	93f2 <isr+0x4ce>
    8fd6:	lsls	r2, r1, #15
    8fd8:	bpl.n	8fde <isr+0xba>
			reply_buffer[0] = 1;
    8fda:	movs	r3, #1
    8fdc:	strb	r3, [r7, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    8fde:	movs	r1, #2
    8fe0:	ldr	r0, [pc, #528]	; (91f4 <isr+0x2d0>)
    8fe2:	bl	8e84 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    8fe6:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    8fea:	cmp	r3, #0
    8fec:	bne.n	8f50 <isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    8fee:	ldr	r2, [pc, #504]	; (91e8 <isr+0x2c4>)
    8ff0:	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    8ff4:	cmp	r3, #0
    8ff6:	bne.n	909a <isr+0x176>
			}
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    8ff8:	tst.w	r8, #64	; 0x40
    8ffc:	beq.n	9030 <isr+0x10c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    8ffe:	ldr	r3, [pc, #488]	; (91e8 <isr+0x2c4>)
    9000:	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    9004:	mov	r2, r3
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    9006:	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    900a:	ldr.w	r1, [r3, #444]	; 0x1bc
    900e:	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    9012:	ldr.w	r4, [r2, #432]	; 0x1b0
    9016:	ldr	r3, [pc, #464]	; (91e8 <isr+0x2c4>)
    9018:	cmp	r4, #0
    901a:	bne.n	9012 <isr+0xee>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    901c:	mov.w	r2, #4294967295
    9020:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    9024:	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    9028:	bl	89d0 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    902c:	ldr	r3, [pc, #456]	; (91f8 <isr+0x2d4>)
    902e:	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    9030:	tst.w	r8, #16777216	; 0x1000000
    9034:	beq.n	903e <isr+0x11a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    9036:	ldr	r3, [pc, #452]	; (91fc <isr+0x2d8>)
    9038:	ldr	r3, [r3, #0]
    903a:	cbz	r3, 903e <isr+0x11a>
    903c:	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    903e:	tst.w	r8, #33554432	; 0x2000000
    9042:	beq.n	904c <isr+0x128>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    9044:	ldr	r3, [pc, #440]	; (9200 <isr+0x2dc>)
    9046:	ldr	r3, [r3, #0]
    9048:	cbz	r3, 904c <isr+0x128>
    904a:	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    904c:	tst.w	r8, #4
    9050:	beq.n	9064 <isr+0x140>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    9052:	ldr	r3, [pc, #404]	; (91e8 <isr+0x2c4>)
    9054:	ldr.w	r3, [r3, #388]	; 0x184
    9058:	ands.w	r3, r3, #512	; 0x200
    905c:	beq.n	90f8 <isr+0x1d4>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
    905e:	ldr	r3, [pc, #420]	; (9204 <isr+0x2e0>)
    9060:	movs	r2, #1
    9062:	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    9064:	ldr	r3, [pc, #384]	; (91e8 <isr+0x2c4>)
    9066:	ldr.w	r2, [r3, #328]	; 0x148
    906a:	lsls	r2, r2, #24
    906c:	bpl.n	9094 <isr+0x170>
    906e:	tst.w	r8, #128	; 0x80
    9072:	beq.n	9094 <isr+0x170>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    9074:	ldr	r1, [pc, #400]	; (9208 <isr+0x2e4>)
    9076:	ldrb	r2, [r1, #0]
    9078:	cbz	r2, 9094 <isr+0x170>
			if (--usb_reboot_timer == 0) {
    907a:	subs	r2, #1
    907c:	uxtb	r2, r2
    907e:	strb	r2, [r1, #0]
    9080:	cbnz	r2, 9094 <isr+0x170>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
    9082:	ldr	r1, [pc, #392]	; (920c <isr+0x2e8>)
    9084:	ldrb	r2, [r1, #0]
    9086:	and.w	r2, r2, #247	; 0xf7
    908a:	strb	r2, [r1, #0]
	if (sof_usage == 0) {
    908c:	cmp	r2, #0
    908e:	beq.w	94fa <isr+0x5d6>
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				asm("bkpt #251"); // run bootloader
    9092:	bkpt	0x00fb
		#endif
		#ifdef FLIGHTSIM_INTERFACE
		usb_flightsim_flush_output();
		#endif
	}
}
    9094:	add	sp, #12
    9096:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    909a:	ldr	r1, [pc, #372]	; (9210 <isr+0x2ec>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    909c:	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    90a0:	ldr	r0, [r1, #0]
    90a2:	tst	r3, r0
    90a4:	bne.w	9478 <isr+0x554>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    90a8:	ldr	r2, [pc, #332]	; (91f8 <isr+0x2d4>)
    90aa:	ldr	r5, [r2, #0]
#if 1
			if (completestatus) {
    90ac:	ands	r5, r3
    90ae:	beq.n	8ff8 <isr+0xd4>

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    90b0:	lsrs	r7, r5, #16
    90b2:	beq.n	90d4 <isr+0x1b0>
    90b4:	ldr	r6, [pc, #308]	; (91ec <isr+0x2c8>)
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
    90b6:	mov.w	r9, #1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
    90ba:	rbit	r4, r7
    90be:	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    90c2:	add.w	r0, r6, r4, lsl #7
					tx &= ~(1<<p);
    90c6:	lsl.w	r4, r9, r4

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    90ca:	adds	r0, #64	; 0x40
    90cc:	bl	8e4c <run_callbacks>
#if 1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    90d0:	bics	r7, r4
    90d2:	bne.n	90ba <isr+0x196>
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
    90d4:	uxth	r5, r5
				while(rx) {
    90d6:	cmp	r5, #0
    90d8:	beq.n	8ff8 <isr+0xd4>
    90da:	ldr	r6, [pc, #272]	; (91ec <isr+0x2c8>)
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
					rx &= ~(1<<p);
    90dc:	movs	r7, #1
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
    90de:	rbit	r4, r5
    90e2:	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2);
    90e6:	add.w	r0, r6, r4, lsl #7
					rx &= ~(1<<p);
    90ea:	lsl.w	r4, r7, r4

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
    90ee:	bl	8e4c <run_callbacks>
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
    90f2:	bics	r5, r4
    90f4:	bne.n	90de <isr+0x1ba>
    90f6:	b.n	8ff8 <isr+0xd4>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
    90f8:	ldr	r2, [pc, #264]	; (9204 <isr+0x2e0>)
    90fa:	strb	r3, [r2, #0]
    90fc:	b.n	9064 <isr+0x140>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    90fe:	movw	r7, #8225	; 0x2021
    9102:	cmp	r1, r7
    9104:	beq.n	917e <isr+0x25a>
    9106:	bhi.w	9220 <isr+0x2fc>
    910a:	cmp.w	r1, #2176	; 0x880
    910e:	beq.w	9358 <isr+0x434>
    9112:	cmp.w	r1, #2304	; 0x900
    9116:	bne.n	9186 <isr+0x262>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    9118:	ubfx	r0, r0, #16, #8
    911c:	ldr	r1, [pc, #244]	; (9214 <isr+0x2f0>)
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    911e:	mov.w	r2, #13107400	; 0xc800c8
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    9122:	ldr	r7, [pc, #244]	; (9218 <isr+0x2f4>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    9124:	strb	r0, [r1, #0]
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
		#endif
		#if defined(ENDPOINT5_CONFIG)
		USB1_ENDPTCTRL5 = ENDPOINT5_CONFIG;
    9126:	mov.w	r1, #13369548	; 0xcc00cc
    912a:	str	r3, [sp, #4]
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    912c:	str.w	r7, [r5, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    9130:	str.w	r2, [r5, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    9134:	str.w	r2, [r5, #464]	; 0x1d0
		#endif
		#if defined(ENDPOINT5_CONFIG)
		USB1_ENDPTCTRL5 = ENDPOINT5_CONFIG;
    9138:	str.w	r1, [r5, #468]	; 0x1d4
		#endif
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    913c:	bl	89d4 <usb_serial_configure>
		#endif
		#if defined(AUDIO_INTERFACE)
		usb_audio_configure();
		#endif
		#if defined(MTP_INTERFACE)
		usb_mtp_configure();
    9140:	bl	a0d8 <usb_mtp_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    9144:	ldr	r2, [pc, #212]	; (921c <isr+0x2f8>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    9146:	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9148:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    914a:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    914c:	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    914e:	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    9150:	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    9152:	str	r3, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    9154:	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    9158:	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    915c:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    915e:	orr.w	r2, r1, #65536	; 0x10000
    9162:	str.w	r2, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    9166:	ldr	r2, [pc, #168]	; (9210 <isr+0x2ec>)
    9168:	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    916a:	ldr.w	r3, [r4, #432]	; 0x1b0
    916e:	cmp	r3, #0
    9170:	bne.n	916a <isr+0x246>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    9172:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    9176:	cmp	r3, #0
    9178:	bne.w	8f50 <isr+0x2c>
    917c:	b.n	8fee <isr+0xca>
		// fall through to next case, to always send ZLP ACK
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    917e:	lsrs	r1, r2, #16
    9180:	cmp	r1, #7
    9182:	beq.w	93fa <isr+0x4d6>
			return;
		}
		break;
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    9186:	str.w	fp, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    918a:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    918e:	cmp	r3, #0
    9190:	bne.w	8f50 <isr+0x2c>
    9194:	b.n	8fee <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    9196:	movw	r7, #770	; 0x302
    919a:	cmp	r1, r7
    919c:	beq.w	92f8 <isr+0x3d4>
    91a0:	cmp.w	r1, #1280	; 0x500
    91a4:	bne.n	9186 <isr+0x262>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    91a6:	ldr	r2, [pc, #116]	; (921c <isr+0x2f8>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    91a8:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    91aa:	movs	r7, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    91ac:	str	r3, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    91ae:	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    91b0:	str	r7, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    91b2:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    91b4:	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    91b8:	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    91bc:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    91be:	orr.w	r3, r1, #65536	; 0x10000
    91c2:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    91c6:	ldr.w	r3, [r4, #432]	; 0x1b0
    91ca:	cmp	r3, #0
    91cc:	bne.n	91c6 <isr+0x2a2>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    91ce:	lsrs	r3, r0, #16
    91d0:	lsls	r3, r3, #25
    91d2:	orr.w	r3, r3, #16777216	; 0x1000000
    91d6:	str.w	r3, [r5, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    91da:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    91de:	cmp	r3, #0
    91e0:	bne.w	8f50 <isr+0x2c>
    91e4:	b.n	8fee <isr+0xca>
    91e6:	nop
    91e8:	.word	0x402e0000
    91ec:	.word	0x20010000
    91f0:	.word	0x402e01c0
    91f4:	.word	0x2000e668
    91f8:	.word	0x2000e644
    91fc:	.word	0x2000e640
    9200:	.word	0x2000e64c
    9204:	.word	0x2000e650
    9208:	.word	0x2000e658
    920c:	.word	0x2000e648
    9210:	.word	0x2000e654
    9214:	.word	0x2000e678
    9218:	.word	0x00cc0002
    921c:	.word	0x2000f020
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    9220:	movw	r3, #8737	; 0x2221
    9224:	cmp	r1, r3
    9226:	beq.n	92e0 <isr+0x3bc>
    9228:	movw	r3, #8993	; 0x2321
    922c:	cmp	r1, r3
    922e:	bne.n	9186 <isr+0x262>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    9230:	ldr	r3, [pc, #724]	; (9508 <isr+0x5e4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9232:	movs	r2, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    9234:	movs	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    9236:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    9238:	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    923a:	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    923c:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    923e:	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    9240:	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    9244:	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    9248:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    924a:	orr.w	r3, r2, #65536	; 0x10000
    924e:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    9252:	ldr.w	r3, [r4, #432]	; 0x1b0
    9256:	cmp	r3, #0
    9258:	bne.n	9252 <isr+0x32e>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    925a:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    925e:	cmp	r3, #0
    9260:	bne.w	8f50 <isr+0x2c>
    9264:	b.n	8fee <isr+0xca>
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    9266:	ldr	r2, [pc, #676]	; (950c <isr+0x5e8>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    9268:	movs	r1, #2
    926a:	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    926c:	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    926e:	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    9270:	bl	8e84 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    9274:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    9278:	cmp	r3, #0
    927a:	bne.w	8f50 <isr+0x2c>
    927e:	b.n	8fee <isr+0xca>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    9280:	uxth	r2, r2
    9282:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    9286:	cmp	r3, #7
    9288:	bhi.w	9186 <isr+0x262>
		dir = setup.wIndex & 0x80;
		if (dir) {
    928c:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    9290:	mov.w	r3, r3, lsl #2
    9294:	ldr	r2, [pc, #632]	; (9510 <isr+0x5ec>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    9296:	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    929a:	mov.w	r0, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    929e:	add	r2, r3
    92a0:	ldr	r3, [r2, #0]
    92a2:	ite	ne
    92a4:	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    92a8:	biceq.w	r3, r3, #1
    92ac:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    92ae:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    92b0:	ldr	r3, [pc, #596]	; (9508 <isr+0x5e4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    92b2:	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    92b4:	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    92b6:	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    92b8:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    92ba:	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    92be:	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    92c2:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    92c4:	orr.w	r3, r2, #65536	; 0x10000
    92c8:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    92cc:	ldr.w	r3, [r4, #432]	; 0x1b0
    92d0:	cmp	r3, #0
    92d2:	bne.n	92cc <isr+0x3a8>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    92d4:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    92d8:	cmp	r3, #0
    92da:	bne.w	8f50 <isr+0x2c>
    92de:	b.n	8fee <isr+0xca>
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    92e0:	uxth	r2, r2
    92e2:	cmp	r2, #1
    92e4:	bne.n	9230 <isr+0x30c>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    92e6:	ldr	r3, [pc, #556]	; (9514 <isr+0x5f0>)
			usb_cdc_line_rtsdtr = setup.wValue;
    92e8:	ubfx	r0, r0, #16, #8
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    92ec:	ldr	r2, [pc, #552]	; (9518 <isr+0x5f4>)
    92ee:	ldr	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    92f0:	ldr	r3, [pc, #552]	; (951c <isr+0x5f8>)
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    92f2:	str	r1, [r2, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    92f4:	strb	r0, [r3, #0]
    92f6:	b.n	9230 <isr+0x30c>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    92f8:	uxth	r2, r2
    92fa:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    92fe:	cmp	r3, #7
    9300:	bhi.w	9186 <isr+0x262>
		dir = setup.wIndex & 0x80;
		if (dir) {
    9304:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    9308:	mov.w	r3, r3, lsl #2
    930c:	ldr	r2, [pc, #512]	; (9510 <isr+0x5ec>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    930e:	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    9312:	mov.w	r0, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    9316:	add	r2, r3
    9318:	ldr	r3, [r2, #0]
    931a:	ite	ne
    931c:	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    9320:	orreq.w	r3, r3, #1
    9324:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9326:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    9328:	ldr	r3, [pc, #476]	; (9508 <isr+0x5e4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    932a:	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    932c:	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    932e:	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9330:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    9332:	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    9336:	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    933a:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    933c:	orr.w	r3, r2, #65536	; 0x10000
    9340:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    9344:	ldr.w	r3, [r4, #432]	; 0x1b0
    9348:	cmp	r3, #0
    934a:	bne.n	9344 <isr+0x420>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    934c:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    9350:	cmp	r3, #0
    9352:	bne.w	8f50 <isr+0x2c>
    9356:	b.n	8fee <isr+0xca>
		endpoint_queue_head[2].unused1 = (uint32_t)experimental_buffer;
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    9358:	ldr	r2, [pc, #452]	; (9520 <isr+0x5fc>)
		endpoint0_transmit(reply_buffer, 1, 0);
    935a:	movs	r1, #1
		endpoint_queue_head[2].unused1 = (uint32_t)experimental_buffer;
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    935c:	ldr	r3, [pc, #428]	; (950c <isr+0x5e8>)
    935e:	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    9360:	mov	r0, r3
		endpoint_queue_head[2].unused1 = (uint32_t)experimental_buffer;
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    9362:	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    9364:	bl	8e84 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    9368:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    936c:	cmp	r3, #0
    936e:	bne.w	8f50 <isr+0x2c>
    9372:	b.n	8fee <isr+0xca>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    9374:	ldr	r3, [pc, #428]	; (9524 <isr+0x600>)
    9376:	ldr	r1, [r3, #4]
    9378:	cmp	r1, #0
    937a:	beq.w	9186 <isr+0x262>
    937e:	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    9380:	uxth.w	lr, r2
    9384:	b.n	9390 <isr+0x46c>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    9386:	adds	r3, #12
    9388:	ldr	r1, [r3, #4]
    938a:	cmp	r1, #0
    938c:	beq.w	9186 <isr+0x262>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    9390:	ldrh	r7, [r3, #0]
    9392:	cmp	r7, r0
    9394:	bne.n	9386 <isr+0x462>
    9396:	ldrh	r7, [r3, #2]
    9398:	cmp	r7, lr
    939a:	bne.n	9386 <isr+0x462>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
    939c:	lsrs	r7, r0, #8
    939e:	cmp	r7, #3
    93a0:	beq.w	9576 <isr+0x652>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
    93a4:	ldrh	r3, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    93a6:	lsrs	r2, r2, #16
    93a8:	cmp	r3, r2
    93aa:	it	cs
    93ac:	movcs	r3, r2

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
    93ae:	cmp.w	r0, #512	; 0x200
    93b2:	beq.w	9558 <isr+0x634>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
    93b6:	cmp.w	r0, #1792	; 0x700
    93ba:	beq.w	94d4 <isr+0x5b0>
    93be:	ldr	r7, [pc, #360]	; (9528 <isr+0x604>)
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    93c0:	mov	r2, r3
    93c2:	str	r3, [sp, #4]
    93c4:	mov	r0, r7
    93c6:	bl	8568 <memcpy>
    93ca:	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    93cc:	bic.w	r2, r7, #31
	uint32_t end_addr = (uint32_t)addr + size;
    93d0:	add	r7, r3
	asm volatile("": : :"memory");
	asm("dsb");
    93d2:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    93d6:	ldr	r1, [pc, #340]	; (952c <isr+0x608>)
    93d8:	str	r2, [r1, #0]
		location += 32;
    93da:	adds	r2, #32
	} while (location < end_addr);
    93dc:	cmp	r7, r2
    93de:	bhi.n	93d6 <isr+0x4b2>
	asm("dsb");
    93e0:	dsb	sy
	asm("isb");
    93e4:	isb	sy
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    93e8:	ldr	r0, [pc, #316]	; (9528 <isr+0x604>)
    93ea:	mov	r1, r3
    93ec:	bl	8e84 <endpoint0_transmit.constprop.1>
    93f0:	b.n	8fe6 <isr+0xc2>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    93f2:	lsls	r3, r1, #31
    93f4:	bpl.w	8fde <isr+0xba>
    93f8:	b.n	8fda <isr+0xb6>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    93fa:	ldr	r7, [pc, #308]	; (9530 <isr+0x60c>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    93fc:	mov.w	lr, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    9400:	str	r3, [r6, #12]
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    9402:	ldr	r1, [pc, #304]	; (9534 <isr+0x610>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    9404:	ldr	r3, [pc, #304]	; (9538 <isr+0x614>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    9406:	str	r0, [r7, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    9408:	str.w	lr, [r3]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    940c:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    940e:	str	r3, [r6, #8]
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
    9410:	ldr	r1, [pc, #296]	; (953c <isr+0x618>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    9412:	ldr.w	r0, [r5, #432]	; 0x1b0
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    9416:	str	r2, [r7, #4]
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    9418:	add.w	r7, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    941c:	orr.w	r2, r0, lr
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    9420:	str	r1, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    9422:	add.w	lr, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    9426:	add.w	r0, r1, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    942a:	add.w	r1, r1, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    942e:	str.w	r2, [r5, #432]	; 0x1b0
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    9432:	str	r7, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    9434:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    9438:	str	r0, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    943a:	str	r1, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    943c:	ldr.w	r3, [r4, #432]	; 0x1b0
    9440:	cmp	r3, #0
    9442:	bne.n	943c <isr+0x518>
	}
	endpoint0_transfer_ack.next = 1;
    9444:	ldr	r2, [pc, #192]	; (9508 <isr+0x5e4>)
    9446:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9448:	movw	r1, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    944c:	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    944e:	str	r0, [r2, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    9450:	mov.w	r0, #65536	; 0x10000
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    9454:	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9456:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    9458:	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    945c:	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    9460:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    9462:	orr.w	r3, r1, r0
    9466:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    946a:	str.w	r0, [r9]
	while (USB1_ENDPTPRIME) ;
    946e:	ldr.w	r3, [r4, #432]	; 0x1b0
    9472:	cmp	r3, #0
    9474:	bne.n	946e <isr+0x54a>
    9476:	b.n	8fe6 <isr+0xc2>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    9478:	ldr	r0, [pc, #180]	; (9530 <isr+0x60c>)
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    947a:	movw	r4, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    947e:	movs	r6, #0

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    9480:	ldrh	r5, [r0, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    9482:	str	r6, [r1, #0]

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    9484:	cmp	r5, r4

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    9486:	ldr	r0, [r0, #4]
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    9488:	bne.w	90a8 <isr+0x184>
    948c:	uxth	r1, r0
    948e:	cmp	r1, #1
    9490:	bne.w	90a8 <isr+0x184>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    9494:	ldr	r1, [pc, #164]	; (953c <isr+0x618>)
    9496:	ldr	r4, [pc, #168]	; (9540 <isr+0x61c>)
    9498:	ldmia	r1, {r0, r1}
    949a:	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    949c:	cmp	r0, #134	; 0x86
	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    949e:	str	r0, [r4, #0]
    94a0:	strh	r1, [r4, #4]
    94a2:	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    94a4:	bne.w	90a8 <isr+0x184>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
    94a8:	cpsid	i
	sof_usage |= (1 << interface);
    94aa:	ldr	r0, [pc, #152]	; (9544 <isr+0x620>)
    94ac:	ldrb	r1, [r0, #0]
    94ae:	orr.w	r1, r1, #8
    94b2:	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    94b4:	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    94b8:	lsls	r0, r1, #24
    94ba:	bmi.n	94ca <isr+0x5a6>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    94bc:	orr.w	r1, r1, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    94c0:	movs	r0, #128	; 0x80
    94c2:	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    94c6:	str.w	r1, [r2, #328]	; 0x148
	}
	__enable_irq();
    94ca:	cpsie	i
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    94cc:	ldr	r2, [pc, #120]	; (9548 <isr+0x624>)
    94ce:	movs	r1, #80	; 0x50
    94d0:	strb	r1, [r2, #0]
    94d2:	b.n	90a8 <isr+0x184>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    94d4:	ldr	r0, [pc, #116]	; (954c <isr+0x628>)
					memcpy(usb_descriptor_buffer, src, datalen);
    94d6:	mov	r2, r3
    94d8:	ldr	r7, [pc, #76]	; (9528 <isr+0x604>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    94da:	ldrb.w	lr, [r0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
    94de:	ldr	r1, [pc, #112]	; (9550 <isr+0x62c>)
    94e0:	ldr	r0, [pc, #112]	; (9554 <isr+0x630>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
    94e2:	str	r3, [sp, #4]
    94e4:	cmp.w	lr, #0
    94e8:	it	eq
    94ea:	moveq	r1, r0
    94ec:	mov	r0, r7
    94ee:	bl	8568 <memcpy>
					usb_descriptor_buffer[1] = 7;
    94f2:	movs	r2, #7
    94f4:	ldr	r3, [sp, #4]
    94f6:	strb	r2, [r7, #1]
    94f8:	b.n	93cc <isr+0x4a8>

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
	if (sof_usage == 0) {
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    94fa:	ldr.w	r2, [r3, #328]	; 0x148
    94fe:	bic.w	r2, r2, #128	; 0x80
    9502:	str.w	r2, [r3, #328]	; 0x148
    9506:	b.n	9092 <isr+0x16e>
    9508:	.word	0x2000f020
    950c:	.word	0x2000e668
    9510:	.word	0x402e01c0
    9514:	.word	0x2000e684
    9518:	.word	0x2000e834
    951c:	.word	0x2000e5a8
    9520:	.word	0x2000e678
    9524:	.word	0x200007b8
    9528:	.word	0x20204000
    952c:	.word	0xe000ef70
    9530:	.word	0x2000e660
    9534:	.word	0x00070080
    9538:	.word	0x2000f000
    953c:	.word	0x2000e670
    9540:	.word	0x2000e82c
    9544:	.word	0x2000e648
    9548:	.word	0x2000e658
    954c:	.word	0x2000e650
    9550:	.word	0x600016a8
    9554:	.word	0x60001714

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    9558:	ldr	r0, [pc, #40]	; (9584 <isr+0x660>)
					memcpy(usb_descriptor_buffer, src, datalen);
    955a:	mov	r2, r3
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    955c:	ldr	r1, [pc, #40]	; (9588 <isr+0x664>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    955e:	ldrb	r7, [r0, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    9560:	ldr	r0, [pc, #40]	; (958c <isr+0x668>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
    9562:	str	r3, [sp, #4]
    9564:	cmp	r7, #0
    9566:	it	eq
    9568:	moveq	r1, r0
    956a:	ldr	r0, [pc, #36]	; (9590 <isr+0x66c>)
    956c:	bl	8568 <memcpy>
    9570:	ldr	r7, [pc, #28]	; (9590 <isr+0x66c>)
    9572:	ldr	r3, [sp, #4]
    9574:	b.n	93cc <isr+0x4a8>
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    9576:	lsrs	r2, r2, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    9578:	ldrb	r3, [r1, #0]
    957a:	cmp	r3, r2
    957c:	it	cs
    957e:	movcs	r3, r2
    9580:	b.n	93b6 <isr+0x492>
    9582:	nop
    9584:	.word	0x2000e650
    9588:	.word	0x60001714
    958c:	.word	0x600016a8
    9590:	.word	0x20204000

00009594 <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    9594:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    9596:	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    959a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    959e:	ite	ne
    95a0:	movne	r7, #0
    95a2:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    95a6:	cmp	r2, #3
    95a8:	bls.n	95ae <usb_config_rx+0x1a>
    95aa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    95ae:	mov.w	sl, r0, lsl #7
    95b2:	ldr.w	r9, [pc, #64]	; 95f4 <usb_config_rx+0x60>
    95b6:	mov	r5, r1
    95b8:	mov	r4, r0
    95ba:	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    95be:	movs	r1, #0
    95c0:	movs	r2, #64	; 0x40
    95c2:	mov	r8, r3
    95c4:	mov	r0, r6
    95c6:	bl	bc2c <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    95ca:	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    95cc:	orr.w	r1, r7, r5, lsl #16
    95d0:	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    95d4:	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    95d8:	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    95da:	cmp.w	r8, #0
    95de:	beq.n	95aa <usb_config_rx+0x16>
    95e0:	ldr	r3, [pc, #12]	; (95f0 <usb_config_rx+0x5c>)
    95e2:	lsls	r0, r4
    95e4:	ldr	r4, [r3, #0]
    95e6:	orrs	r0, r4
    95e8:	str	r0, [r3, #0]
    95ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    95ee:	nop
    95f0:	.word	0x2000e644
    95f4:	.word	0x20010000

000095f8 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    95f8:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    95fa:	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    95fe:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    9602:	ite	ne
    9604:	movne	r7, #0
    9606:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    960a:	cmp	r2, #3
    960c:	bls.n	9612 <usb_config_tx+0x1a>
    960e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    9612:	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    9614:	lsls	r5, r0, #7
    9616:	ldr.w	r9, [pc, #68]	; 965c <usb_config_tx+0x64>
    961a:	mov	r8, r1
    961c:	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    961e:	movs	r1, #0
    9620:	mov	r4, r0
    9622:	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    9624:	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    9628:	mov	r0, sl
    962a:	bl	bc2c <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    962e:	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    9630:	orr.w	r1, r7, r8, lsl #16
    9634:	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    9638:	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    963c:	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    9640:	cmp	r6, #0
    9642:	beq.n	960e <usb_config_tx+0x16>
    9644:	add.w	r0, r4, #16
    9648:	ldr	r3, [pc, #12]	; (9658 <usb_config_tx+0x60>)
    964a:	lsls	r2, r0
    964c:	ldr	r0, [r3, #0]
    964e:	orrs	r2, r0
    9650:	str	r2, [r3, #0]
    9652:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9656:	nop
    9658:	.word	0x2000e644
    965c:	.word	0x20010000

00009660 <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    9660:	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    9662:	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    9664:	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    9666:	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    966a:	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    966c:	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    966e:	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    9670:	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    9674:	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    9678:	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    967c:	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    9680:	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    9682:	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    9684:	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    9686:	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    9688:	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    968a:	pop	{r4, r5, r6, r7}
    968c:	bx	lr
    968e:	nop

00009690 <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    9690:	subs	r3, r0, #2
    9692:	cmp	r3, #3
    9694:	bls.n	9698 <usb_transmit+0x8>
    9696:	bx	lr
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    9698:	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    969a:	ldr	r3, [pc, #24]	; (96b4 <usb_transmit+0x24>)
    969c:	add.w	r4, r0, #16
    96a0:	movs	r5, #1
    96a2:	mov	r2, r1
    96a4:	add.w	r0, r3, r0, lsl #7
    96a8:	lsl.w	r1, r5, r4
}
    96ac:	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    96ae:	b.w	8ddc <schedule_transfer>
    96b2:	nop
    96b4:	.word	0x20010040

000096b8 <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    96b8:	subs	r3, r0, #2
    96ba:	cmp	r3, #3
    96bc:	bls.n	96c0 <usb_receive+0x8>
    96be:	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    96c0:	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    96c2:	ldr	r3, [pc, #20]	; (96d8 <usb_receive+0x20>)
    96c4:	movs	r4, #1
    96c6:	mov	r2, r1
    96c8:	lsl.w	r1, r4, r0
    96cc:	add.w	r0, r3, r0, lsl #7
}
    96d0:	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    96d4:	b.w	8ddc <schedule_transfer>
    96d8:	.word	0x20010000

000096dc <usb_transfer_status>:
uint32_t usb_transfer_status(const transfer_t *transfer)
{
#if defined(USB_MTPDISK) || defined(USB_MTPDISK_SERIAL)
	uint32_t status, cmd;
	//int count=0;
	cmd = USB1_USBCMD;
    96dc:	ldr	r2, [pc, #32]	; (9700 <usb_transfer_status+0x24>)
    96de:	ldr.w	r3, [r2, #320]	; 0x140
	while (1) {
		__disable_irq();
    96e2:	cpsid	i
		USB1_USBCMD = cmd | USB_USBCMD_ATDTW;
    96e4:	orr.w	r3, r3, #16384	; 0x4000
    96e8:	str.w	r3, [r2, #320]	; 0x140
		status = transfer->status;
    96ec:	ldr	r1, [r0, #4]
		cmd = USB1_USBCMD;
    96ee:	ldr.w	r3, [r2, #320]	; 0x140
		__enable_irq();
    96f2:	cpsie	i
		if (cmd & USB_USBCMD_ATDTW) return status;
    96f4:	tst.w	r3, #16384	; 0x4000
    96f8:	beq.n	96e2 <usb_transfer_status+0x6>
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
#endif
}
    96fa:	mov	r0, r1
    96fc:	bx	lr
    96fe:	nop
    9700:	.word	0x402e0000

00009704 <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    9704:	cmp	r0, #0
    9706:	beq.n	97b8 <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    9708:	movs	r2, #1
{

}*/

void delay(uint32_t msec)
{
    970a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    970e:	sub	sp, #20
    9710:	mov	fp, r0
    9712:	ldr	r4, [pc, #168]	; (97bc <delay+0xb8>)
    9714:	ldr	r5, [pc, #168]	; (97c0 <delay+0xbc>)
    9716:	ldr	r6, [pc, #172]	; (97c4 <delay+0xc0>)
    9718:	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    971c:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    9720:	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    9722:	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    9724:	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    9728:	cmp	r1, #0
    972a:	bne.n	971c <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    972c:	ldr	r7, [pc, #152]	; (97c8 <delay+0xc4>)
    972e:	strd	r8, r9, [sp, #8]
    9732:	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    9734:	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    9736:	ldr	r2, [pc, #148]	; (97cc <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    9738:	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    973c:	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    973e:	ldr	r2, [r2, #0]
    9740:	movs	r7, #1
    9742:	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
    9746:	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    974a:	mov	r8, r3
	if (frac > 1000) frac = 1000;
    974c:	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    974e:	cmp	r3, r1
    9750:	it	eq
    9752:	cmpeq	r2, r8
    9754:	ite	cs
    9756:	movcs	sl, r8
    9758:	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    975a:	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    975e:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    9762:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    9764:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    9766:	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    976a:	cmp	r3, #0
    976c:	bne.n	975e <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    976e:	ldr	r0, [sp, #4]
    9770:	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    9772:	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    9774:	ldr	r0, [pc, #84]	; (97cc <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    9776:	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    977a:	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    977c:	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    9780:	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
    9784:	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    9788:	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    978c:	mov	r8, r1
	if (frac > 1000) frac = 1000;
    978e:	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    9790:	cmp	r1, r3
    9792:	it	eq
    9794:	cmpeq	r0, r8
    9796:	ite	cs
    9798:	movcs	r3, r8
    979a:	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    979c:	add	r2, r3
    979e:	cmp	r2, lr
    97a0:	bcc.n	97b2 <delay+0xae>
			if (--msec == 0) return;
    97a2:	subs.w	fp, fp, #1
			start += 1000;
    97a6:	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
    97aa:	bne.n	975e <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
    97ac:	add	sp, #20
    97ae:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
    97b2:	bl	a37c <yield>
	}
    97b6:	b.n	975e <delay+0x5a>
    97b8:	bx	lr
    97ba:	nop
    97bc:	.word	0x20010300
    97c0:	.word	0x2000e684
    97c4:	.word	0x2000e67c
    97c8:	.word	0xe0001004
    97cc:	.word	0x2000e680

000097d0 <micros>:
	// TODO...
}

uint32_t micros(void)
{
    97d0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
    97d4:	ldr	r2, [pc, #72]	; (9820 <micros+0x50>)
    97d6:	movs	r6, #1
    97d8:	ldr	r5, [pc, #72]	; (9824 <micros+0x54>)
    97da:	ldr	r4, [pc, #76]	; (9828 <micros+0x58>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    97dc:	ldrex	r3, [r2]
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    97e0:	ldr	r1, [r5, #0]
		scc = systick_cycle_count;
    97e2:	ldr	r0, [r4, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    97e4:	strex	r3, r6, [r2]
	} while ( __STREXW(1, &systick_safe_read));
    97e8:	cmp	r3, #0
    97ea:	bne.n	97dc <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    97ec:	ldr	r2, [pc, #60]	; (982c <micros+0x5c>)
    97ee:	ldr	r6, [r2, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    97f0:	ldr	r7, [pc, #60]	; (9830 <micros+0x60>)
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    97f2:	subs	r2, r6, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
    97f4:	mov.w	r9, #0
    97f8:	mov.w	r8, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    97fc:	ldr	r6, [r7, #0]
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
    97fe:	mov.w	r0, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    9802:	cmp	r9, r3
    9804:	umull	r6, r7, r2, r6
    9808:	it	eq
    980a:	cmpeq	r8, r7
    980c:	mov	r4, r7
    980e:	ite	cs
    9810:	movcs	r4, r7
    9812:	movcc	r4, r0
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
}
    9814:	mla	r0, r0, r1, r4
    9818:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    981c:	bx	lr
    981e:	nop
    9820:	.word	0x20010300
    9824:	.word	0x2000e684
    9828:	.word	0x2000e67c
    982c:	.word	0xe0001004
    9830:	.word	0x2000e680

00009834 <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
    9834:	movs	r0, #4
    9836:	mov	r1, lr
    9838:	tst	r0, r1
    983a:	beq.n	9844 <_MSP>
    983c:	mrs	r0, PSP
    9840:	b.w	9854 <HardFault_HandlerC>

00009844 <_MSP>:
    9844:	mrs	r0, MSP
    9848:	b.w	9854 <HardFault_HandlerC>

0000984c <startup_default_early_hook>:
         "B HardFault_HandlerC \n"
         "_MSP: \n"
         "MRS R0, MSP \n"
         "B HardFault_HandlerC \n"
         ".syntax divided\n") ;
}
    984c:	bx	lr
    984e:	nop

00009850 <startup_default_late_hook>:
#endif

extern int main (void);
void startup_default_early_hook(void) {}
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
    9850:	bx	lr
    9852:	nop

00009854 <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    9854:	ldr	r3, [pc, #108]	; (98c4 <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    9856:	movs	r1, #5
    9858:	ldr	r2, [pc, #108]	; (98c8 <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    985a:	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    985c:	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    985e:	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
    9862:	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    9864:	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    9868:	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    986a:	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    986c:	ldr	r4, [pc, #92]	; (98cc <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    986e:	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    9870:	ldr	r0, [pc, #92]	; (98d0 <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    9872:	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
    9874:	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    9878:	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
    987c:	ldr	r3, [r4, #0]
    987e:	cmp	r3, r0
    9880:	bls.n	9888 <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
    9882:	ldr	r0, [pc, #80]	; (98d4 <HardFault_HandlerC+0x80>)
    9884:	bl	a69c <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    9888:	ldr	r5, [pc, #56]	; (98c4 <HardFault_HandlerC+0x70>)
    988a:	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    988c:	movs	r0, #0
    988e:	ldr	r2, [pc, #72]	; (98d8 <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    9890:	ldr	r1, [pc, #72]	; (98dc <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    9892:	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    9896:	str	r0, [sp, #4]
    9898:	ldr	r3, [sp, #4]
    989a:	cmp	r3, r2
    989c:	bhi.n	98aa <HardFault_HandlerC+0x56>
    989e:	ldr	r3, [sp, #4]
    98a0:	adds	r3, #1
    98a2:	str	r3, [sp, #4]
    98a4:	ldr	r3, [sp, #4]
    98a6:	cmp	r3, r2
    98a8:	bls.n	989e <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    98aa:	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    98ae:	str	r0, [sp, #4]
    98b0:	ldr	r3, [sp, #4]
    98b2:	cmp	r3, r1
    98b4:	bhi.n	9892 <HardFault_HandlerC+0x3e>
    98b6:	ldr	r3, [sp, #4]
    98b8:	adds	r3, #1
    98ba:	str	r3, [sp, #4]
    98bc:	ldr	r3, [sp, #4]
    98be:	cmp	r3, r1
    98c0:	bls.n	98b6 <HardFault_HandlerC+0x62>
    98c2:	b.n	9892 <HardFault_HandlerC+0x3e>
    98c4:	.word	0x401bc000
    98c8:	.word	0x401f8000
    98cc:	.word	0x20000b34
    98d0:	.word	0x23c345ff
    98d4:	.word	0x11e1a300
    98d8:	.word	0x000f423f
    98dc:	.word	0x0089543f

000098e0 <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
    98e0:	ldr	r2, [pc, #36]	; (9908 <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
    98e2:	push	{r3, lr}
        char *prev = __brkval;
    98e4:	ldr	r3, [r2, #0]
        if (incr != 0) {
    98e6:	cbz	r0, 98f2 <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
    98e8:	add	r0, r3
    98ea:	ldr	r1, [pc, #32]	; (990c <_sbrk+0x2c>)
    98ec:	cmp	r0, r1
    98ee:	bhi.n	98f6 <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
    98f0:	str	r0, [r2, #0]
        }
        return prev;
}
    98f2:	mov	r0, r3
    98f4:	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    98f6:	bl	b56c <__errno>
    98fa:	movs	r2, #12
                        return (void *)-1;
    98fc:	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    9900:	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    9902:	mov	r0, r3
    9904:	pop	{r3, pc}
    9906:	nop
    9908:	.word	0x20000af0
    990c:	.word	0x20280000

00009910 <rtc_get>:
#include "debug/printf.h"


unsigned long rtc_get(void)
{
	uint32_t hi1 = SNVS_HPRTCMR;
    9910:	ldr	r3, [pc, #40]	; (993c <rtc_get+0x2c>)
#include "imxrt.h"
#include "debug/printf.h"


unsigned long rtc_get(void)
{
    9912:	push	{r4, r5}
	uint32_t hi1 = SNVS_HPRTCMR;
    9914:	ldr	r0, [r3, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;
    9916:	mov	r4, r3


unsigned long rtc_get(void)
{
	uint32_t hi1 = SNVS_HPRTCMR;
	uint32_t lo1 = SNVS_HPRTCLR;
    9918:	ldr	r1, [r3, #40]	; 0x28
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;
    991a:	ldr	r2, [r4, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    991c:	ldr	r3, [r4, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    991e:	cmp	r1, r3
    9920:	it	eq
    9922:	cmpeq	r0, r2
unsigned long rtc_get(void)
{
	uint32_t hi1 = SNVS_HPRTCMR;
	uint32_t lo1 = SNVS_HPRTCLR;
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;
    9924:	mov	r0, r2
		uint32_t lo2 = SNVS_HPRTCLR;
    9926:	mov	r1, r3
		if (lo1 == lo2 && hi1 == hi2) {
    9928:	ite	eq
    992a:	moveq	r5, #1
    992c:	movne	r5, #0
    992e:	cmp	r5, #0
    9930:	beq.n	991a <rtc_get+0xa>
			return (hi2 << 17) | (lo2 >> 15);
    9932:	lsrs	r1, r3, #15
		}
		hi1 = hi2;
		lo1 = lo2;
	}
}
    9934:	pop	{r4, r5}
    9936:	orr.w	r0, r1, r2, lsl #17
    993a:	bx	lr
    993c:	.word	0x400d4000

00009940 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    9940:	push	{r4, r5, r6, r7}
    9942:	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    9944:	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    9946:	mov	r7, r6
    9948:	b.n	994c <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    994a:	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    994c:	udiv	r3, r0, r2
    9950:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    9954:	add.w	r4, r0, #55	; 0x37
    9958:	cmp	r0, #9
    995a:	add.w	r0, r0, #48	; 0x30
    995e:	uxtb	r4, r4
    9960:	it	ls
    9962:	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    9964:	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    9966:	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    996a:	cmp	r3, #0
    996c:	bne.n	994a <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    996e:	adds	r2, r1, r5
    9970:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    9972:	cbz	r5, 9988 <ultoa+0x48>
    9974:	adds	r3, #1
		t = buf[j];
    9976:	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    997a:	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    997c:	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    997e:	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    9980:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    9982:	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    9986:	blt.n	9974 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    9988:	mov	r0, r1
    998a:	pop	{r4, r5, r6, r7}
    998c:	bx	lr
    998e:	nop

00009990 <dtostrf>:
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
    9990:	vcmp.f32	s0, s0
{
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
    9994:	eor.w	r3, r0, r0, asr #31
char * fcvtf(float, int, int *, int *);
int isnanf (float x);
int isinff (float x);

char * dtostrf(float val, int width, unsigned int precision, char *buf)
{
    9998:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
    999c:	vmrs	APSR_nzcv, fpscr
char * fcvtf(float, int, int *, int *);
int isnanf (float x);
int isinff (float x);

char * dtostrf(float val, int width, unsigned int precision, char *buf)
{
    99a0:	mov	r5, r0
    99a2:	mov	r4, r2
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
    99a4:	sub.w	r3, r3, r0, asr #31
char * fcvtf(float, int, int *, int *);
int isnanf (float x);
int isinff (float x);

char * dtostrf(float val, int width, unsigned int precision, char *buf)
{
    99a8:	vpush	{d8}
    99ac:	vmov.f32	s16, s0
    99b0:	sub	sp, #16
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
    99b2:	bvs.w	9bfc <dtostrf+0x26c>
			awidth--;
		}
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
    99b6:	vabs.f32	s15, s0
    99ba:	vldr	s14, [pc, #792]	; 9cd4 <dtostrf+0x344>
    99be:	vcmp.f32	s15, s14
    99c2:	vmrs	APSR_nzcv, fpscr
    99c6:	ble.n	9a4e <dtostrf+0xbe>
		int ndigs = (val<0) ? 4 : 3;
    99c8:	vcmpe.f32	s0, #0.0
    99cc:	vmrs	APSR_nzcv, fpscr
    99d0:	ite	mi
    99d2:	movmi	r2, #4
    99d4:	movpl	r2, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    99d6:	cmp	r2, r3
    99d8:	blt.n	9a1e <dtostrf+0x8e>
		if (width<0) {
    99da:	cmp	r0, #0
    99dc:	blt.w	9cc0 <dtostrf+0x330>
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    99e0:	movs	r2, #0
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
    99e2:	vcmpe.f32	s16, #0.0
    99e6:	vmrs	APSR_nzcv, fpscr
    99ea:	bmi.w	9c82 <dtostrf+0x2f2>
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    99ee:	movs	r5, #73	; 0x49
    99f0:	movs	r0, #78	; 0x4e
    99f2:	movs	r1, #70	; 0x46
    99f4:	adds	r3, r4, #3
    99f6:	strb	r5, [r4, #0]
    99f8:	strb	r0, [r4, #1]
    99fa:	strb	r1, [r4, #2]
		} else {
			*buf++ = 'i';  *buf++ = 'n';  *buf++ = 'f';
		}
		while (awidth) {
    99fc:	cmp	r2, #0
    99fe:	beq.w	9cd0 <dtostrf+0x340>
    9a02:	add	r2, r3
			*buf++ = ' ';
    9a04:	movs	r1, #32
    9a06:	strb.w	r1, [r3], #1
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
		} else {
			*buf++ = 'i';  *buf++ = 'n';  *buf++ = 'f';
		}
		while (awidth) {
    9a0a:	cmp	r2, r3
    9a0c:	bne.n	9a06 <dtostrf+0x76>
			*buf++ = ' ';
			awidth--;
		}
		*buf = 0;
    9a0e:	movs	r3, #0
		return buf;
    9a10:	mov	r0, r2
		}
		while (awidth) {
			*buf++ = ' ';
			awidth--;
		}
		*buf = 0;
    9a12:	strb	r3, [r2, #0]

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
    9a14:	add	sp, #16
    9a16:	vpop	{d8}
    9a1a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return buf;
	}
	if (isinff(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
    9a1e:	cmp	r0, #0
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    9a20:	sub.w	r2, r3, r2
		if (width<0) {
    9a24:	bge.n	99e2 <dtostrf+0x52>
			while (awidth) {
    9a26:	cmp	r2, #0
    9a28:	beq.w	9cc0 <dtostrf+0x330>
    9a2c:	adds	r3, r4, r2
				*buf++ = ' ';
    9a2e:	movs	r2, #32
    9a30:	strb.w	r2, [r4], #1
	}
	if (isinff(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
			while (awidth) {
    9a34:	cmp	r4, r3
    9a36:	bne.n	9a30 <dtostrf+0xa0>
				*buf++ = ' ';
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
    9a38:	vcmpe.f32	s16, #0.0
    9a3c:	vmrs	APSR_nzcv, fpscr
    9a40:	bpl.w	9c72 <dtostrf+0x2e2>
    9a44:	movs	r2, #0
    9a46:	movs	r1, #45	; 0x2d
    9a48:	adds	r4, r3, #1
    9a4a:	strb	r1, [r3, #0]
    9a4c:	b.n	99ee <dtostrf+0x5e>
    9a4e:	mov	r7, r1
		}
		*buf = 0;
		return buf;
	}

	s = fcvtf(val, precision, &decpt, &sign);
    9a50:	add	r2, sp, #8
    9a52:	add	r1, sp, #4
    9a54:	mov	r0, r7
    9a56:	mov	sl, r7
    9a58:	bl	b548 <fcvtf>

	// if only 1 digit in output
	if (precision == 0 && decpt == 0) {
    9a5c:	ldr.w	r9, [sp, #4]
		}
		*buf = 0;
		return buf;
	}

	s = fcvtf(val, precision, &decpt, &sign);
    9a60:	mov	r8, r0

	// if only 1 digit in output
	if (precision == 0 && decpt == 0) {
    9a62:	cmp	r7, #0
    9a64:	beq.w	9b76 <dtostrf+0x1e6>
    9a68:	rsb	r3, r9, #0
		s = (*s < '5') ? "0" : "1";
		decpt++;
	}

	// if all zeros, limit to precision
	if (-decpt  > (int)precision) {
    9a6c:	cmp	r3, r7
    9a6e:	bgt.w	9bea <dtostrf+0x25a>
    9a72:	mov	r0, r8
    9a74:	bl	c280 <strlen>
    9a78:	mov	r6, r0
	}

	reqd = strlen(s);

	// add 1 for decimal point
	if (reqd > decpt) reqd++;
    9a7a:	cmp	r9, r6
    9a7c:	it	lt
    9a7e:	addlt	r6, #1

	// add 1 for zero in front of decimal point
	if (decpt == 0) reqd++;
    9a80:	cmp.w	r9, #0
    9a84:	beq.w	9be6 <dtostrf+0x256>

	// if leading zeros after decimal point
	if (decpt < 0 && precision > 0) {
    9a88:	cmp.w	r9, #0
    9a8c:	bge.n	9ad4 <dtostrf+0x144>
    9a8e:	cbz	r7, 9ad4 <dtostrf+0x144>
		// ensure enough trailing zeros, add 2 for '0.'
		reqd = precision + 2;

		if (strlen(s) > precision + decpt) {
    9a90:	add.w	r3, r9, r7
	if (decpt == 0) reqd++;

	// if leading zeros after decimal point
	if (decpt < 0 && precision > 0) {
		// ensure enough trailing zeros, add 2 for '0.'
		reqd = precision + 2;
    9a94:	adds	r6, r7, #2

		if (strlen(s) > precision + decpt) {
    9a96:	cmp	r3, r0
    9a98:	bcs.n	9ad4 <dtostrf+0x144>

			int newPrecision = precision;
			int newDecimalPoint;

			// shift decimal point
			while (newPrecision > 0) {
    9a9a:	cmp	r7, #0
    9a9c:	ble.n	9aac <dtostrf+0x11c>
				val *= 10.0f;
    9a9e:	vmov.f32	s15, #36	; 0x41200000  10.0

			int newPrecision = precision;
			int newDecimalPoint;

			// shift decimal point
			while (newPrecision > 0) {
    9aa2:	subs.w	sl, sl, #1
				val *= 10.0f;
    9aa6:	vmul.f32	s16, s16, s15

			int newPrecision = precision;
			int newDecimalPoint;

			// shift decimal point
			while (newPrecision > 0) {
    9aaa:	bne.n	9aa2 <dtostrf+0x112>
				val *= 10.0f;
				newPrecision--;
			}

			// round after accounting for leading 0's
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    9aac:	add	r2, sp, #8
    9aae:	mov	r0, sl
    9ab0:	vmov.f32	s0, s16
    9ab4:	add	r1, sp, #12
    9ab6:	bl	b548 <fcvtf>

			// if rounded up to new digit (e.g. 0.09 to 0.1), move decimal point
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    9aba:	ldr.w	r9, [sp, #4]
    9abe:	ldr	r2, [sp, #12]
    9ac0:	adds	r3, r7, #1
				val *= 10.0f;
				newPrecision--;
			}

			// round after accounting for leading 0's
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
    9ac2:	mov	r8, r0

			// if rounded up to new digit (e.g. 0.09 to 0.1), move decimal point
			if (newDecimalPoint - decpt == precision + 1) decpt++;
    9ac4:	rsb	r2, r9, r2
    9ac8:	cmp	r2, r3
    9aca:	bne.n	9ad4 <dtostrf+0x144>
    9acc:	add.w	r9, r9, #1
    9ad0:	str.w	r9, [sp, #4]
		}
	}

	// add 1 for sign if negative
	if (sign) reqd++;
    9ad4:	ldr.w	lr, [sp, #8]
    9ad8:	cmp.w	lr, #0
    9adc:	beq.n	9b9c <dtostrf+0x20c>
    9ade:	adds	r6, #1

	p = buf;
	e = p + reqd;
	pad = width - reqd;
    9ae0:	subs	r0, r5, r6

	// add 1 for sign if negative
	if (sign) reqd++;

	p = buf;
	e = p + reqd;
    9ae2:	adds	r1, r4, r6
	pad = width - reqd;
	if (pad > 0) {
    9ae4:	cmp	r0, #0
    9ae6:	bgt.n	9ba6 <dtostrf+0x216>
	}

	// add 1 for sign if negative
	if (sign) reqd++;

	p = buf;
    9ae8:	mov	r2, r4
	pad = width - reqd;
	if (pad > 0) {
		e += pad;
		while (pad-- > 0) *p++ = ' ';
	}
	if (sign) *p++ = '-';
    9aea:	movs	r0, #45	; 0x2d
    9aec:	adds	r3, r2, #1
    9aee:	strb	r0, [r2, #0]
	if (decpt == 0 && precision > 0) {
    9af0:	cmp.w	r9, #0
    9af4:	beq.n	9bd2 <dtostrf+0x242>
		*p++ = '0';
		*p++ = '.';
	}
	else if (decpt < 0 && precision > 0) {
    9af6:	cbz	r7, 9b1a <dtostrf+0x18a>
    9af8:	cmp.w	r9, #0
    9afc:	bge.n	9b1a <dtostrf+0x18a>
		*p++ = '0';
    9afe:	mov	r2, r3
    9b00:	movs	r0, #48	; 0x30
		*p++ = '.';
    9b02:	movs	r7, #46	; 0x2e
	if (decpt == 0 && precision > 0) {
		*p++ = '0';
		*p++ = '.';
	}
	else if (decpt < 0 && precision > 0) {
		*p++ = '0';
    9b04:	strb.w	r0, [r2], #2
		*p++ = '.';
    9b08:	strb	r7, [r3, #1]
    9b0a:	rsb	r3, r9, r2
		// print leading zeros
		while ( decpt < 0 ) {
			decpt++;
			*p++ = '0';
    9b0e:	strb.w	r0, [r2], #1
	}
	else if (decpt < 0 && precision > 0) {
		*p++ = '0';
		*p++ = '.';
		// print leading zeros
		while ( decpt < 0 ) {
    9b12:	cmp	r2, r3
    9b14:	bne.n	9b0e <dtostrf+0x17e>
    9b16:	movs	r2, #0
    9b18:	str	r2, [sp, #4]
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
    9b1a:	cmp	r3, r1
    9b1c:	bcs.n	9b60 <dtostrf+0x1d0>
		*p++ = *s++;
    9b1e:	adds	r7, r3, #1
    9b20:	ldrb.w	r2, [r8]
    9b24:	add.w	r8, r8, #1
		if (p == e) break;
    9b28:	cmp	r7, r1
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
		*p++ = *s++;
    9b2a:	strb	r2, [r3, #0]
		if (p == e) break;
    9b2c:	beq.n	9b62 <dtostrf+0x1d2>
    9b2e:	ldr	r2, [sp, #4]
		if (--decpt == 0) *p++ = '.';
    9b30:	mov.w	lr, #46	; 0x2e
    9b34:	b.n	9b4e <dtostrf+0x1be>
    9b36:	strb.w	lr, [r3, #1]
    9b3a:	adds	r3, #2
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
    9b3c:	cmp	r3, r1
		*p++ = *s++;
    9b3e:	add.w	r7, r3, #1
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
    9b42:	bcs.n	9b60 <dtostrf+0x1d0>
		*p++ = *s++;
    9b44:	ldrb.w	r0, [r8], #1
		if (p == e) break;
    9b48:	cmp	r7, r1
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
		*p++ = *s++;
    9b4a:	strb	r0, [r3, #0]
		if (p == e) break;
    9b4c:	beq.n	9b62 <dtostrf+0x1d2>
		if (--decpt == 0) *p++ = '.';
    9b4e:	subs	r2, #1
    9b50:	str	r2, [sp, #4]
    9b52:	cmp	r2, #0
    9b54:	beq.n	9b36 <dtostrf+0x1a6>
    9b56:	mov	r3, r7
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
    9b58:	cmp	r3, r1
		*p++ = *s++;
    9b5a:	add.w	r7, r3, #1
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
    9b5e:	bcc.n	9b44 <dtostrf+0x1b4>
    9b60:	mov	r1, r3
		*p++ = *s++;
		if (p == e) break;
		if (--decpt == 0) *p++ = '.';
	}
	if (width < 0) {
    9b62:	cmp	r5, #0
    9b64:	blt.n	9c4a <dtostrf+0x2ba>
		pad = (reqd + width) * -1;
		while (pad-- > 0) *p++ = ' ';
	}
	*p = 0;
    9b66:	movs	r3, #0

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
    9b68:	mov	r0, r4
	}
	if (width < 0) {
		pad = (reqd + width) * -1;
		while (pad-- > 0) *p++ = ' ';
	}
	*p = 0;
    9b6a:	strb	r3, [r1, #0]

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
    9b6c:	add	sp, #16
    9b6e:	vpop	{d8}
    9b72:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}

	s = fcvtf(val, precision, &decpt, &sign);

	// if only 1 digit in output
	if (precision == 0 && decpt == 0) {
    9b76:	cmp.w	r9, #0
    9b7a:	bne.w	9a68 <dtostrf+0xd8>
		// round and move decimal point
		s = (*s < '5') ? "0" : "1";
		decpt++;
    9b7e:	movs	r3, #1
	s = fcvtf(val, precision, &decpt, &sign);

	// if only 1 digit in output
	if (precision == 0 && decpt == 0) {
		// round and move decimal point
		s = (*s < '5') ? "0" : "1";
    9b80:	ldrb.w	r8, [r0]
    9b84:	ldr	r1, [pc, #336]	; (9cd8 <dtostrf+0x348>)
    9b86:	ldr	r2, [pc, #340]	; (9cdc <dtostrf+0x34c>)
		decpt++;
    9b88:	mov	r9, r3
    9b8a:	str	r3, [sp, #4]
    9b8c:	mov.w	r3, #4294967295
	s = fcvtf(val, precision, &decpt, &sign);

	// if only 1 digit in output
	if (precision == 0 && decpt == 0) {
		// round and move decimal point
		s = (*s < '5') ? "0" : "1";
    9b90:	cmp.w	r8, #52	; 0x34
    9b94:	ite	hi
    9b96:	movhi	r8, r1
    9b98:	movls	r8, r2
    9b9a:	b.n	9a6c <dtostrf+0xdc>
	// add 1 for sign if negative
	if (sign) reqd++;

	p = buf;
	e = p + reqd;
	pad = width - reqd;
    9b9c:	subs	r0, r5, r6

	// add 1 for sign if negative
	if (sign) reqd++;

	p = buf;
	e = p + reqd;
    9b9e:	adds	r1, r4, r6
	pad = width - reqd;
	if (pad > 0) {
    9ba0:	cmp	r0, #0
    9ba2:	ble.w	9ccc <dtostrf+0x33c>
		e += pad;
    9ba6:	add	r1, r0
		decpt++;
	}

	// if all zeros, limit to precision
	if (-decpt  > (int)precision) {
		s = "0";
    9ba8:	mov	r2, r4
	p = buf;
	e = p + reqd;
	pad = width - reqd;
	if (pad > 0) {
		e += pad;
		while (pad-- > 0) *p++ = ' ';
    9baa:	subs	r0, #1
    9bac:	mov.w	ip, #32
    9bb0:	strb.w	ip, [r2], #1
    9bb4:	rsb	r3, r2, #1
    9bb8:	add	r3, r0
    9bba:	add	r3, r4
    9bbc:	cmp	r3, #0
    9bbe:	bgt.n	9bb0 <dtostrf+0x220>
    9bc0:	bic.w	r3, r0, r0, asr #31
    9bc4:	adds	r3, #1
    9bc6:	add	r3, r4
	}
	if (sign) *p++ = '-';
    9bc8:	cmp.w	lr, #0
    9bcc:	beq.n	9af0 <dtostrf+0x160>
	p = buf;
	e = p + reqd;
	pad = width - reqd;
	if (pad > 0) {
		e += pad;
		while (pad-- > 0) *p++ = ' ';
    9bce:	mov	r2, r3
    9bd0:	b.n	9aea <dtostrf+0x15a>
	}
	if (sign) *p++ = '-';
	if (decpt == 0 && precision > 0) {
    9bd2:	cmp	r7, #0
    9bd4:	beq.n	9b1a <dtostrf+0x18a>
		*p++ = '0';
    9bd6:	mov	r2, r3
    9bd8:	movs	r7, #48	; 0x30
		*p++ = '.';
    9bda:	movs	r0, #46	; 0x2e
		e += pad;
		while (pad-- > 0) *p++ = ' ';
	}
	if (sign) *p++ = '-';
	if (decpt == 0 && precision > 0) {
		*p++ = '0';
    9bdc:	strb.w	r7, [r2], #2
		*p++ = '.';
    9be0:	strb	r0, [r3, #1]
    9be2:	mov	r3, r2
    9be4:	b.n	9b1a <dtostrf+0x18a>

	// add 1 for decimal point
	if (reqd > decpt) reqd++;

	// add 1 for zero in front of decimal point
	if (decpt == 0) reqd++;
    9be6:	adds	r6, #1
    9be8:	b.n	9ad4 <dtostrf+0x144>
	}

	// if all zeros, limit to precision
	if (-decpt  > (int)precision) {
		s = "0";
		decpt = -precision;
    9bea:	movs	r6, #1
    9bec:	rsb	r9, r7, #0
		decpt++;
	}

	// if all zeros, limit to precision
	if (-decpt  > (int)precision) {
		s = "0";
    9bf0:	ldr.w	r8, [pc, #232]	; 9cdc <dtostrf+0x34c>
		decpt = -precision;
    9bf4:	mov	r0, r6
    9bf6:	str.w	r9, [sp, #4]
    9bfa:	b.n	9a7a <dtostrf+0xea>
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
    9bfc:	vcmpe.f32	s0, #0.0
    9c00:	vmrs	APSR_nzcv, fpscr
    9c04:	ite	mi
    9c06:	movmi	r2, #4
    9c08:	movpl	r2, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    9c0a:	cmp	r2, r3
    9c0c:	bge.n	9c86 <dtostrf+0x2f6>
		if (width<0) {
    9c0e:	cmp	r0, #0
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    9c10:	sub.w	r3, r3, r2
		if (width<0) {
    9c14:	blt.n	9c98 <dtostrf+0x308>
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    9c16:	vmov	r2, s16
    9c1a:	cmp	r2, #0
    9c1c:	blt.n	9c8e <dtostrf+0x2fe>
		if (DTOA_UPPER) {
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    9c1e:	movs	r1, #78	; 0x4e
    9c20:	movs	r0, #65	; 0x41
    9c22:	adds	r2, r4, #3
    9c24:	strb	r1, [r4, #0]
    9c26:	strb	r1, [r4, #2]
    9c28:	strb	r0, [r4, #1]
		} else {
			*buf++ = 'n';  *buf++ = 'a';  *buf++ = 'n';
		}
		while (awidth) {
    9c2a:	cmp	r3, #0
    9c2c:	beq.n	9cc8 <dtostrf+0x338>
    9c2e:	add	r3, r2
			*buf++ = ' ';
    9c30:	movs	r1, #32
    9c32:	strb.w	r1, [r2], #1
		if (DTOA_UPPER) {
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
		} else {
			*buf++ = 'n';  *buf++ = 'a';  *buf++ = 'n';
		}
		while (awidth) {
    9c36:	cmp	r2, r3
    9c38:	bne.n	9c32 <dtostrf+0x2a2>
			*buf++ = ' ';
			awidth--;
		}
		*buf = 0;
    9c3a:	movs	r2, #0
		return buf;
    9c3c:	mov	r0, r3
		}
		while (awidth) {
			*buf++ = ' ';
			awidth--;
		}
		*buf = 0;
    9c3e:	strb	r2, [r3, #0]

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
    9c40:	add	sp, #16
    9c42:	vpop	{d8}
    9c46:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		*p++ = *s++;
		if (p == e) break;
		if (--decpt == 0) *p++ = '.';
	}
	if (width < 0) {
		pad = (reqd + width) * -1;
    9c4a:	adds	r0, r5, r6
		while (pad-- > 0) *p++ = ' ';
    9c4c:	negs	r3, r0
    9c4e:	mvns	r0, r0
    9c50:	cmp	r3, #0
    9c52:	ble.n	9b66 <dtostrf+0x1d6>
    9c54:	mov	r2, r1
    9c56:	movs	r5, #32
    9c58:	strb.w	r5, [r2], #1
    9c5c:	rsb	r3, r2, #1
    9c60:	add	r3, r0
    9c62:	add	r3, r1
    9c64:	cmp	r3, #0
    9c66:	bgt.n	9c58 <dtostrf+0x2c8>
    9c68:	bic.w	r3, r0, r0, asr #31
    9c6c:	adds	r3, #1
    9c6e:	add	r1, r3
    9c70:	b.n	9b66 <dtostrf+0x1d6>
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    9c72:	movs	r4, #73	; 0x49
    9c74:	movs	r0, #78	; 0x4e
    9c76:	movs	r1, #70	; 0x46
    9c78:	adds	r2, r3, #3
    9c7a:	strb	r4, [r3, #0]
    9c7c:	strb	r0, [r3, #1]
    9c7e:	strb	r1, [r3, #2]
    9c80:	b.n	9a0e <dtostrf+0x7e>
    9c82:	mov	r3, r4
    9c84:	b.n	9a46 <dtostrf+0xb6>

	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
    9c86:	cmp	r0, #0
    9c88:	blt.n	9cbc <dtostrf+0x32c>
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
    9c8a:	movs	r3, #0
    9c8c:	b.n	9c16 <dtostrf+0x286>
    9c8e:	mov	r2, r4
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    9c90:	movs	r1, #45	; 0x2d
    9c92:	adds	r4, r2, #1
    9c94:	strb	r1, [r2, #0]
    9c96:	b.n	9c1e <dtostrf+0x28e>
	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
			while (awidth) {
    9c98:	cbz	r3, 9cbc <dtostrf+0x32c>
    9c9a:	adds	r2, r4, r3
				*buf++ = ' ';
    9c9c:	movs	r3, #32
    9c9e:	strb.w	r3, [r4], #1
	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
			while (awidth) {
    9ca2:	cmp	r4, r2
    9ca4:	bne.n	9c9e <dtostrf+0x30e>
				*buf++ = ' ';
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    9ca6:	vmov	r3, s16
    9caa:	cmp	r3, #0
    9cac:	blt.n	9cc4 <dtostrf+0x334>
		if (DTOA_UPPER) {
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    9cae:	movs	r1, #78	; 0x4e
    9cb0:	movs	r0, #65	; 0x41
    9cb2:	adds	r3, r2, #3
    9cb4:	strb	r1, [r2, #0]
    9cb6:	strb	r1, [r2, #2]
    9cb8:	strb	r0, [r2, #1]
    9cba:	b.n	9c3a <dtostrf+0x2aa>

	int awidth = abs(width);
	if (isnanf(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
    9cbc:	mov	r2, r4
    9cbe:	b.n	9ca6 <dtostrf+0x316>
		return buf;
	}
	if (isinff(val)) {
		int ndigs = (val<0) ? 4 : 3;
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
		if (width<0) {
    9cc0:	mov	r3, r4
    9cc2:	b.n	9a38 <dtostrf+0xa8>
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (copysignf(1.0f, val)<0) *buf++ = '-';
    9cc4:	movs	r3, #0
    9cc6:	b.n	9c90 <dtostrf+0x300>
		if (DTOA_UPPER) {
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
    9cc8:	mov	r3, r2
    9cca:	b.n	9c3a <dtostrf+0x2aa>
	}

	// add 1 for sign if negative
	if (sign) reqd++;

	p = buf;
    9ccc:	mov	r3, r4
    9cce:	b.n	9af0 <dtostrf+0x160>
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
    9cd0:	mov	r2, r3
    9cd2:	b.n	9a0e <dtostrf+0x7e>
    9cd4:	.word	0x7f7fffff
    9cd8:	.word	0x20000234
    9cdc:	.word	0x20000534

00009ce0 <Panic_Temp_isr>:

static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
    9ce0:	cpsid	i
  IOMUXC_GPR_GPR16 = 0x00000007;
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    9ce2:	ldr	r2, [pc, #24]	; (9cfc <Panic_Temp_isr+0x1c>)
static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
  IOMUXC_GPR_GPR16 = 0x00000007;
    9ce4:	movs	r1, #7
    9ce6:	ldr	r3, [pc, #24]	; (9d00 <Panic_Temp_isr+0x20>)
    9ce8:	str	r1, [r3, #64]	; 0x40
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    9cea:	ldr	r3, [r2, #56]	; 0x38
    9cec:	orr.w	r3, r3, #64	; 0x40
    9cf0:	str	r3, [r2, #56]	; 0x38
  asm volatile ("dsb":::"memory");
    9cf2:	dsb	sy
  while (1) asm ("wfi");
    9cf6:	wfi
    9cf8:	b.n	9cf6 <Panic_Temp_isr+0x16>
    9cfa:	nop
    9cfc:	.word	0x400d4000
    9d00:	.word	0x400ac000

00009d04 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    9d04:	cmp	r0, #39	; 0x27
    9d06:	bhi.n	9d42 <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
    9d08:	lsls	r0, r0, #4
    9d0a:	ldr	r2, [pc, #104]	; (9d74 <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    9d0c:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    9d0e:	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    9d12:	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
    9d14:	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    9d16:	beq.n	9d44 <pinMode+0x40>
    9d18:	cmp	r1, #4
    9d1a:	beq.n	9d44 <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    9d1c:	ldr	r4, [r3, #12]
    9d1e:	ldr	r2, [r0, #4]
    9d20:	bic.w	r2, r2, r4
    9d24:	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    9d26:	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
    9d28:	cbz	r1, 9d66 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
    9d2a:	cmp	r1, #2
    9d2c:	beq.n	9d6c <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    9d2e:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    9d30:	ldr	r3, [r3, #4]
}
    9d32:	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    9d36:	ite	eq
    9d38:	ldreq	r1, [pc, #60]	; (9d78 <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    9d3a:	ldrne	r1, [pc, #64]	; (9d7c <pinMode+0x78>)
    9d3c:	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    9d3e:	movs	r2, #21
    9d40:	str	r2, [r3, #0]
}
    9d42:	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    9d44:	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
    9d46:	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    9d48:	ldr	r4, [r0, #4]
    9d4a:	orr.w	r2, r2, r4
    9d4e:	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    9d50:	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
    9d52:	beq.n	9d66 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    9d54:	movw	r1, #2104	; 0x838
    9d58:	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    9d5a:	ldr	r3, [r3, #4]
    9d5c:	movs	r2, #21
}
    9d5e:	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    9d62:	str	r2, [r3, #0]
}
    9d64:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    9d66:	movs	r1, #56	; 0x38
    9d68:	str	r1, [r2, #0]
    9d6a:	b.n	9d5a <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    9d6c:	ldr	r1, [pc, #16]	; (9d80 <pinMode+0x7c>)
    9d6e:	str	r1, [r2, #0]
    9d70:	b.n	9d5a <pinMode+0x56>
    9d72:	nop
    9d74:	.word	0x20000538
    9d78:	.word	0x00013038
    9d7c:	.word	0x00010038
    9d80:	.word	0x0001f038

00009d84 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    9d84:	ldr	r0, [pc, #656]	; (a018 <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    9d86:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    9d8a:	ldr	r3, [pc, #656]	; (a01c <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    9d8c:	ldr	r2, [r0, #120]	; 0x78
    9d8e:	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    9d92:	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    9d94:	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    9d96:	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    9d98:	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    9d9c:	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    9da0:	ldr	r4, [pc, #636]	; (a020 <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    9da2:	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9da6:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    9da8:	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    9dac:	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    9dae:	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    9db0:	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    9db4:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    9db8:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    9dbc:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    9dc0:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    9dc4:	ldrh.w	r0, [r3, #392]	; 0x188
    9dc8:	uxth	r0, r0
    9dca:	orr.w	r0, r0, #240	; 0xf0
    9dce:	strh.w	r0, [r3, #392]	; 0x188
    9dd2:	add.w	r0, r1, r1, lsl #1
    9dd6:	ldr	r3, [pc, #580]	; (a01c <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    9dd8:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    9dda:	movs	r5, #0
    9ddc:	lsls	r0, r0, #5
    9dde:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9de0:	cmp	r1, #4
    9de2:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    9de4:	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    9de8:	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    9dea:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    9dec:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    9dee:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    9df0:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    9df2:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    9df4:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    9df6:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    9df8:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    9dfa:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9dfc:	bne.n	9dd2 <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9dfe:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    9e02:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    9e06:	ldr	r3, [pc, #540]	; (a024 <pwm_init+0x2a0>)
    9e08:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9e0c:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9e0e:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    9e10:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    9e14:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9e16:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    9e1a:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9e1e:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    9e22:	ldrh.w	r0, [r4, #392]	; 0x188
    9e26:	uxth	r0, r0
    9e28:	orr.w	r0, r0, #3840	; 0xf00
    9e2c:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    9e30:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    9e34:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    9e38:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    9e3c:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    9e40:	ldrh.w	r0, [r3, #392]	; 0x188
    9e44:	uxth	r0, r0
    9e46:	orr.w	r0, r0, #240	; 0xf0
    9e4a:	strh.w	r0, [r3, #392]	; 0x188
    9e4e:	add.w	r0, r1, r1, lsl #1
    9e52:	ldr	r3, [pc, #464]	; (a024 <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    9e54:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    9e56:	movs	r5, #0
    9e58:	lsls	r0, r0, #5
    9e5a:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9e5c:	cmp	r1, #4
    9e5e:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    9e60:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    9e62:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    9e66:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    9e68:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    9e6a:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    9e6c:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    9e6e:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    9e70:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    9e72:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    9e74:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    9e76:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9e78:	bne.n	9e4e <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9e7a:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    9e7e:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    9e82:	ldr	r3, [pc, #420]	; (a028 <pwm_init+0x2a4>)
    9e84:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9e88:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9e8a:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    9e8c:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    9e90:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9e92:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    9e96:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9e9a:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    9e9e:	ldrh.w	r0, [r4, #392]	; 0x188
    9ea2:	uxth	r0, r0
    9ea4:	orr.w	r0, r0, #3840	; 0xf00
    9ea8:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    9eac:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    9eb0:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    9eb4:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    9eb8:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    9ebc:	ldrh.w	r0, [r3, #392]	; 0x188
    9ec0:	uxth	r0, r0
    9ec2:	orr.w	r0, r0, #240	; 0xf0
    9ec6:	strh.w	r0, [r3, #392]	; 0x188
    9eca:	add.w	r0, r1, r1, lsl #1
    9ece:	ldr	r3, [pc, #344]	; (a028 <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    9ed0:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    9ed2:	movs	r5, #0
    9ed4:	lsls	r0, r0, #5
    9ed6:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9ed8:	cmp	r1, #4
    9eda:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    9edc:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    9ede:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    9ee2:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    9ee4:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    9ee6:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    9ee8:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    9eea:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    9eec:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    9eee:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    9ef0:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    9ef2:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9ef4:	bne.n	9eca <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9ef6:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    9efa:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    9efe:	ldr	r3, [pc, #300]	; (a02c <pwm_init+0x2a8>)
    9f00:	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9f04:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9f06:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    9f08:	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    9f0c:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9f0e:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    9f12:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9f16:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    9f1a:	ldrh.w	r0, [r4, #392]	; 0x188
    9f1e:	uxth	r0, r0
    9f20:	orr.w	r0, r0, #3840	; 0xf00
    9f24:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    9f28:	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    9f2c:	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    9f30:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    9f34:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    9f38:	ldrh.w	r0, [r3, #392]	; 0x188
    9f3c:	uxth	r0, r0
    9f3e:	orr.w	r0, r0, #240	; 0xf0
    9f42:	strh.w	r0, [r3, #392]	; 0x188
    9f46:	add.w	r0, r1, r1, lsl #1
    9f4a:	ldr	r3, [pc, #224]	; (a02c <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    9f4c:	adds	r1, #1
    9f4e:	lsls	r0, r0, #5
    9f50:	mov	r4, r3
    9f52:	cmp	r1, #4
    9f54:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    9f56:	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    9f58:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    9f5c:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    9f5e:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    9f60:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    9f62:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    9f64:	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    9f66:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    9f68:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    9f6a:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    9f6c:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    9f6e:	bne.n	9f46 <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9f70:	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9f74:	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9f76:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    9f78:	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9f7c:	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    9f7e:	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    9f82:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    9f84:	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    9f88:	orrs	r3, r7
    9f8a:	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    9f8e:	ldrh.w	r3, [r4, #392]	; 0x188
    9f92:	uxth	r3, r3
    9f94:	orr.w	r3, r3, #3840	; 0xf00
    9f98:	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    9f9c:	lsls	r0, r2, #5
    9f9e:	ldr	r3, [pc, #144]	; (a030 <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9fa0:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    9fa2:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9fa4:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    9fa6:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    9fa8:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9faa:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    9fac:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    9fae:	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    9fb2:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    9fb4:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    9fb6:	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9fb8:	bne.n	9f9c <pwm_init+0x218>
    9fba:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9fbc:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    9fbe:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    9fc2:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    9fc6:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    9fc8:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    9fcc:	lsls	r0, r2, #5
    9fce:	ldr	r3, [pc, #100]	; (a034 <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9fd0:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    9fd2:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9fd4:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    9fd6:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    9fd8:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9fda:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    9fdc:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    9fde:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    9fe0:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    9fe2:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    9fe4:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9fe6:	bne.n	9fcc <pwm_init+0x248>
    9fe8:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    9fea:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    9fec:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    9ff0:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    9ff4:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    9ff6:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    9ffa:	lsls	r0, r2, #5
    9ffc:	ldr	r3, [pc, #56]	; (a038 <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    9ffe:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    a000:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    a002:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    a004:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    a006:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    a008:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    a00a:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    a00c:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    a00e:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    a010:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    a012:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    a014:	bne.n	9ffa <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    a016:	pop	{r4, r5, r6, r7, pc}
    a018:	.word	0x400fc000
    a01c:	.word	0x403dc000
    a020:	.word	0xfc030000
    a024:	.word	0x403e0000
    a028:	.word	0x403e4000
    a02c:	.word	0x403e8000
    a030:	.word	0x401dc000
    a034:	.word	0x401e0000
    a038:	.word	0x401e4000

0000a03c <rx_event>:
static void rx_event(transfer_t *t)
{
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
    a03c:	ldr	r2, [pc, #40]	; (a068 <rx_event+0x2c>)
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

static void rx_event(transfer_t *t)
{
    a03e:	push	{r4}
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
    a040:	ldrb	r3, [r2, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

static void rx_event(transfer_t *t)
{
	int i = t->callback_param;
    a042:	ldr	r4, [r0, #28]
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
	if (++head > RX_NUM) head = 0;
    a044:	adds	r3, #1
    a046:	cmp	r3, #4
    a048:	bls.n	a05a <rx_event+0x1e>
    a04a:	movs	r1, #0
	rx_list[head] = i;
    a04c:	ldr	r0, [pc, #28]	; (a06c <rx_event+0x30>)
{
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
	if (++head > RX_NUM) head = 0;
    a04e:	mov	r3, r1
	rx_list[head] = i;
	rx_head = head;
    a050:	strb	r1, [r2, #0]
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
	if (++head > RX_NUM) head = 0;
	rx_list[head] = i;
    a052:	strb	r4, [r0, r3]
	rx_head = head;
}
    a054:	ldr.w	r4, [sp], #4
    a058:	bx	lr
    a05a:	uxtb	r1, r3
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
	if (++head > RX_NUM) head = 0;
	rx_list[head] = i;
    a05c:	ldr	r0, [pc, #12]	; (a06c <rx_event+0x30>)
	rx_head = head;
    a05e:	strb	r1, [r2, #0]
	int i = t->callback_param;
	//printf("rx event i=%d\n", i);
	// received a packet with data
	uint32_t head = rx_head;
	if (++head > RX_NUM) head = 0;
	rx_list[head] = i;
    a060:	strb	r4, [r0, r3]
	rx_head = head;
}
    a062:	ldr.w	r4, [sp], #4
    a066:	bx	lr
    a068:	.word	0x2000e72c
    a06c:	.word	0x2000e724

0000a070 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    a070:	push	{r4, r5, r6, lr}
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
    a072:	ldr	r1, [pc, #76]	; (a0c0 <rx_queue_transfer+0x50>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    a074:	mov	r3, r0
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
	arm_dcache_delete(buffer, rx_packet_size);
    a076:	ldr	r6, [pc, #76]	; (a0c4 <rx_queue_transfer+0x54>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
    a078:	add.w	r1, r1, r0, lsl #9
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    a07c:	ldrh	r4, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    a07e:	bic.w	r2, r1, #31
	uint32_t end_addr = (uint32_t)addr + size;
    a082:	add	r4, r1
	asm volatile("": : :"memory");
	asm("dsb");
    a084:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    a088:	ldr	r5, [pc, #60]	; (a0c8 <rx_queue_transfer+0x58>)
    a08a:	str	r2, [r5, #0]
		location += 32;
    a08c:	adds	r2, #32
	} while (location < end_addr);
    a08e:	cmp	r4, r2
    a090:	bhi.n	a08a <rx_queue_transfer+0x1a>
	asm("dsb");
    a092:	dsb	sy
	asm("isb");
    a096:	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	//memset(buffer, )
	NVIC_DISABLE_IRQ(IRQ_USB1);
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    a09a:	ldr	r4, [pc, #48]	; (a0cc <rx_queue_transfer+0x5c>)
static void rx_queue_transfer(int i)
{
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
	arm_dcache_delete(buffer, rx_packet_size);
	//memset(buffer, )
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a09c:	mov.w	r5, #131072	; 0x20000
    a0a0:	ldr	r2, [pc, #44]	; (a0d0 <rx_queue_transfer+0x60>)
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    a0a2:	add.w	r4, r4, r3, lsl #5
static void rx_queue_transfer(int i)
{
	void *buffer = rx_buffer + i * MTP_RX_SIZE_480;
	arm_dcache_delete(buffer, rx_packet_size);
	//memset(buffer, )
	NVIC_DISABLE_IRQ(IRQ_USB1);
    a0a6:	str	r5, [r2, #0]
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    a0a8:	mov	r0, r4
    a0aa:	ldrh	r2, [r6, #0]
    a0ac:	bl	9660 <usb_prepare_transfer>
	usb_receive(MTP_RX_ENDPOINT, rx_transfer + i);
    a0b0:	mov	r1, r4
    a0b2:	movs	r0, #4
    a0b4:	bl	96b8 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    a0b8:	ldr	r3, [pc, #24]	; (a0d4 <rx_queue_transfer+0x64>)
    a0ba:	str	r5, [r3, #0]
    a0bc:	pop	{r4, r5, r6, pc}
    a0be:	nop
    a0c0:	.word	0x20203000
    a0c4:	.word	0x2000e72a
    a0c8:	.word	0xe000ef5c
    a0cc:	.word	0x2000e6a0
    a0d0:	.word	0xe000e18c
    a0d4:	.word	0xe000e10c

0000a0d8 <usb_mtp_configure>:
static void rx_event(transfer_t *t);
extern volatile uint8_t usb_configuration;


void usb_mtp_configure(void)
{
    a0d8:	push	{r3, r4, r5, r6, r7, lr}
	printf("usb_mtp_configure\n");
    	if (usb_high_speed) {
    a0da:	ldr	r3, [pc, #120]	; (a154 <usb_mtp_configure+0x7c>)
    a0dc:	ldrb	r3, [r3, #0]
    a0de:	cbz	r3, a144 <usb_mtp_configure+0x6c>
		tx_packet_size = MTP_TX_SIZE_480;
    a0e0:	mov.w	r3, #512	; 0x200
    a0e4:	ldr	r2, [pc, #112]	; (a158 <usb_mtp_configure+0x80>)
		rx_packet_size = MTP_RX_SIZE_480;
    a0e6:	ldr	r5, [pc, #116]	; (a15c <usb_mtp_configure+0x84>)
    a0e8:	mov	r6, r3

void usb_mtp_configure(void)
{
	printf("usb_mtp_configure\n");
    	if (usb_high_speed) {
		tx_packet_size = MTP_TX_SIZE_480;
    a0ea:	strh	r3, [r2, #0]
		rx_packet_size = MTP_RX_SIZE_480;
    a0ec:	strh	r3, [r5, #0]
	} else {
		tx_packet_size = MTP_TX_SIZE_12;
		rx_packet_size = MTP_RX_SIZE_12;
    }
	memset(tx_transfer, 0, sizeof(tx_transfer));
    a0ee:	movs	r1, #0
    a0f0:	movs	r2, #128	; 0x80
    a0f2:	ldr	r0, [pc, #108]	; (a160 <usb_mtp_configure+0x88>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
	tx_head = 0;
    a0f4:	mov	r4, r1
		rx_packet_size = MTP_RX_SIZE_480;
	} else {
		tx_packet_size = MTP_TX_SIZE_12;
		rx_packet_size = MTP_RX_SIZE_12;
    }
	memset(tx_transfer, 0, sizeof(tx_transfer));
    a0f6:	bl	bc2c <memset>
	memset(rx_transfer, 0, sizeof(rx_transfer));
    a0fa:	movs	r2, #128	; 0x80
    a0fc:	ldr	r0, [pc, #100]	; (a164 <usb_mtp_configure+0x8c>)
    a0fe:	mov	r1, r4
	tx_head = 0;
    a100:	ldr	r7, [pc, #100]	; (a168 <usb_mtp_configure+0x90>)
	} else {
		tx_packet_size = MTP_TX_SIZE_12;
		rx_packet_size = MTP_RX_SIZE_12;
    }
	memset(tx_transfer, 0, sizeof(tx_transfer));
	memset(rx_transfer, 0, sizeof(rx_transfer));
    a102:	bl	bc2c <memset>
	tx_head = 0;
	rx_head = 0;
    a106:	ldr	r0, [pc, #100]	; (a16c <usb_mtp_configure+0x94>)
	rx_tail = 0;
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    a108:	mov	r1, r6
    }
	memset(tx_transfer, 0, sizeof(tx_transfer));
	memset(rx_transfer, 0, sizeof(rx_transfer));
	tx_head = 0;
	rx_head = 0;
	rx_tail = 0;
    a10a:	ldr	r6, [pc, #100]	; (a170 <usb_mtp_configure+0x98>)
		rx_packet_size = MTP_RX_SIZE_12;
    }
	memset(tx_transfer, 0, sizeof(tx_transfer));
	memset(rx_transfer, 0, sizeof(rx_transfer));
	tx_head = 0;
	rx_head = 0;
    a10c:	strb	r4, [r0, #0]
	rx_tail = 0;
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    a10e:	mov	r3, r4
    a110:	mov	r2, r4
    a112:	movs	r0, #4
		tx_packet_size = MTP_TX_SIZE_12;
		rx_packet_size = MTP_RX_SIZE_12;
    }
	memset(tx_transfer, 0, sizeof(tx_transfer));
	memset(rx_transfer, 0, sizeof(rx_transfer));
	tx_head = 0;
    a114:	strb	r4, [r7, #0]
	rx_head = 0;
	rx_tail = 0;
    a116:	strb	r4, [r6, #0]
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
    a118:	bl	95f8 <usb_config_tx>
	usb_config_rx(MTP_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    a11c:	ldrh	r1, [r5, #0]
    a11e:	mov	r2, r4
    a120:	ldr	r3, [pc, #80]	; (a174 <usb_mtp_configure+0x9c>)
    a122:	movs	r0, #4
    a124:	bl	9594 <usb_config_rx>
	int i;
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    a128:	mov	r0, r4
    a12a:	bl	a070 <rx_queue_transfer>
    a12e:	movs	r0, #1
    a130:	bl	a070 <rx_queue_transfer>
    a134:	movs	r0, #2
    a136:	bl	a070 <rx_queue_transfer>
    a13a:	movs	r0, #3
}
    a13c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	rx_head = 0;
	rx_tail = 0;
	usb_config_tx(MTP_TX_ENDPOINT, tx_packet_size, 0, NULL);
	usb_config_rx(MTP_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	int i;
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    a140:	b.w	a070 <rx_queue_transfer>
	printf("usb_mtp_configure\n");
    	if (usb_high_speed) {
		tx_packet_size = MTP_TX_SIZE_480;
		rx_packet_size = MTP_RX_SIZE_480;
	} else {
		tx_packet_size = MTP_TX_SIZE_12;
    a144:	movs	r3, #64	; 0x40
    a146:	ldr	r2, [pc, #16]	; (a158 <usb_mtp_configure+0x80>)
		rx_packet_size = MTP_RX_SIZE_12;
    a148:	ldr	r5, [pc, #16]	; (a15c <usb_mtp_configure+0x84>)
    a14a:	mov	r6, r3
	printf("usb_mtp_configure\n");
    	if (usb_high_speed) {
		tx_packet_size = MTP_TX_SIZE_480;
		rx_packet_size = MTP_RX_SIZE_480;
	} else {
		tx_packet_size = MTP_TX_SIZE_12;
    a14c:	strh	r3, [r2, #0]
		rx_packet_size = MTP_RX_SIZE_12;
    a14e:	strh	r3, [r5, #0]
    a150:	b.n	a0ee <usb_mtp_configure+0x16>
    a152:	nop
    a154:	.word	0x2000e650
    a158:	.word	0x2000e698
    a15c:	.word	0x2000e72a
    a160:	.word	0x2000e740
    a164:	.word	0x2000e6a0
    a168:	.word	0x2000e69a
    a16c:	.word	0x2000e72c
    a170:	.word	0x2000e720
    a174:	.word	0x0000a03d

0000a178 <usb_mtp_recv>:
	rx_head = head;
}


int usb_mtp_recv(void *buffer, uint32_t timeout)
{
    a178:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t wait_begin_at = systick_millis_count;
    a17c:	ldr	r6, [pc, #140]	; (a20c <usb_mtp_recv+0x94>)
	uint32_t tail = rx_tail;
    a17e:	ldr.w	fp, [pc, #160]	; a220 <usb_mtp_recv+0xa8>
	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    a182:	ldr	r7, [pc, #140]	; (a210 <usb_mtp_recv+0x98>)
}


int usb_mtp_recv(void *buffer, uint32_t timeout)
{
	uint32_t wait_begin_at = systick_millis_count;
    a184:	ldr.w	r9, [r6]
	uint32_t tail = rx_tail;
    a188:	ldrb.w	r4, [fp]
	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    a18c:	ldrb	r3, [r7, #0]
    a18e:	cbz	r3, a1ca <usb_mtp_recv+0x52>
		if (tail != rx_head) break;
    a190:	ldr.w	r8, [pc, #144]	; a224 <usb_mtp_recv+0xac>
    a194:	uxtb	r4, r4
    a196:	mov	r5, r1
    a198:	mov	sl, r0
    a19a:	ldrb.w	r3, [r8]
    a19e:	cmp	r4, r3
    a1a0:	bne.n	a1d2 <usb_mtp_recv+0x5a>
		if (systick_millis_count - wait_begin_at > timeout)  {
    a1a2:	ldr	r3, [r6, #0]
    a1a4:	rsb	r3, r9, r3
    a1a8:	cmp	r1, r3
    a1aa:	bcs.n	a1c0 <usb_mtp_recv+0x48>
    a1ac:	b.n	a1fe <usb_mtp_recv+0x86>
{
	uint32_t wait_begin_at = systick_millis_count;
	uint32_t tail = rx_tail;
	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
		if (tail != rx_head) break;
    a1ae:	ldrb.w	r3, [r8]
    a1b2:	cmp	r4, r3
    a1b4:	bne.n	a1d2 <usb_mtp_recv+0x5a>
		if (systick_millis_count - wait_begin_at > timeout)  {
    a1b6:	ldr	r3, [r6, #0]
    a1b8:	rsb	r3, r9, r3
    a1bc:	cmp	r3, r5
    a1be:	bhi.n	a1fe <usb_mtp_recv+0x86>
			return 0;
		}
		yield();
    a1c0:	bl	a37c <yield>
int usb_mtp_recv(void *buffer, uint32_t timeout)
{
	uint32_t wait_begin_at = systick_millis_count;
	uint32_t tail = rx_tail;
	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    a1c4:	ldrb	r3, [r7, #0]
    a1c6:	cmp	r3, #0
    a1c8:	bne.n	a1ae <usb_mtp_recv+0x36>
    a1ca:	mov.w	r0, #4294967295
    a1ce:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return 0;
		}
		yield();
	}
//	digitalWriteFast(0, LOW);
	if (++tail > RX_NUM) tail = 0;
    a1d2:	adds	r4, #1
    a1d4:	cmp	r4, #4
    a1d6:	bhi.n	a204 <usb_mtp_recv+0x8c>
    a1d8:	uxtb	r3, r4
	uint32_t i = rx_list[tail];
    a1da:	ldr	r2, [pc, #56]	; (a214 <usb_mtp_recv+0x9c>)
	rx_tail = tail;

	memcpy(buffer,  rx_buffer + i * MTP_RX_SIZE_480, rx_packet_size);
    a1dc:	mov	r0, sl
    a1de:	ldr	r1, [pc, #56]	; (a218 <usb_mtp_recv+0xa0>)
		}
		yield();
	}
//	digitalWriteFast(0, LOW);
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
    a1e0:	ldrb	r5, [r2, r4]
	rx_tail = tail;

	memcpy(buffer,  rx_buffer + i * MTP_RX_SIZE_480, rx_packet_size);
    a1e2:	ldr	r4, [pc, #56]	; (a21c <usb_mtp_recv+0xa4>)
    a1e4:	add.w	r1, r1, r5, lsl #9
		yield();
	}
//	digitalWriteFast(0, LOW);
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	rx_tail = tail;
    a1e8:	strb.w	r3, [fp]

	memcpy(buffer,  rx_buffer + i * MTP_RX_SIZE_480, rx_packet_size);
    a1ec:	ldrh	r2, [r4, #0]
    a1ee:	bl	8568 <memcpy>
	rx_queue_transfer(i);
    a1f2:	mov	r0, r5
    a1f4:	bl	a070 <rx_queue_transfer>
	//memset(rx_transfer, 0, sizeof(rx_transfer));
	//usb_prepare_transfer(rx_transfer + 0, rx_buffer, rx_packet_size, 0);
	//usb_receive(MTP_RX_ENDPOINT, rx_transfer + 0);
	return rx_packet_size;
    a1f8:	ldrh	r0, [r4, #0]
}
    a1fa:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t tail = rx_tail;
	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
		if (tail != rx_head) break;
		if (systick_millis_count - wait_begin_at > timeout)  {
			return 0;
    a1fe:	movs	r0, #0
    a200:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a204:	movs	r3, #0
		}
		yield();
	}
//	digitalWriteFast(0, LOW);
	if (++tail > RX_NUM) tail = 0;
    a206:	mov	r4, r3
    a208:	b.n	a1da <usb_mtp_recv+0x62>
    a20a:	nop
    a20c:	.word	0x2000e684
    a210:	.word	0x2000e678
    a214:	.word	0x2000e724
    a218:	.word	0x20203000
    a21c:	.word	0x2000e72a
    a220:	.word	0x2000e720
    a224:	.word	0x2000e72c

0000a228 <usb_mtp_send>:
	//usb_receive(MTP_RX_ENDPOINT, rx_transfer + 0);
	return rx_packet_size;
}

int usb_mtp_send(const void *buffer, uint32_t len, uint32_t timeout)
{
    a228:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	transfer_t *xfer = tx_transfer + tx_head;
    a22c:	ldr.w	sl, [pc, #192]	; a2f0 <usb_mtp_send+0xc8>
	//usb_receive(MTP_RX_ENDPOINT, rx_transfer + 0);
	return rx_packet_size;
}

int usb_mtp_send(const void *buffer, uint32_t len, uint32_t timeout)
{
    a230:	mov	r8, r2
	transfer_t *xfer = tx_transfer + tx_head;
	uint32_t wait_begin_at = systick_millis_count;
    a232:	ldr	r5, [pc, #164]	; (a2d8 <usb_mtp_send+0xb0>)

	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    a234:	ldr	r6, [pc, #164]	; (a2dc <usb_mtp_send+0xb4>)
	return rx_packet_size;
}

int usb_mtp_send(const void *buffer, uint32_t len, uint32_t timeout)
{
	transfer_t *xfer = tx_transfer + tx_head;
    a236:	ldrb.w	r4, [sl]
    a23a:	ldr	r2, [pc, #164]	; (a2e0 <usb_mtp_send+0xb8>)
	uint32_t wait_begin_at = systick_millis_count;
    a23c:	ldr	r7, [r5, #0]

	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    a23e:	ldrb	r3, [r6, #0]
	return rx_packet_size;
}

int usb_mtp_send(const void *buffer, uint32_t len, uint32_t timeout)
{
	transfer_t *xfer = tx_transfer + tx_head;
    a240:	add.w	r4, r2, r4, lsl #5
	uint32_t wait_begin_at = systick_millis_count;

	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    a244:	cmp	r3, #0
    a246:	beq.n	a2c8 <usb_mtp_send+0xa0>
    a248:	mov	fp, r0
    a24a:	mov	r9, r1
    a24c:	b.n	a25e <usb_mtp_send+0x36>
		uint32_t status = usb_transfer_status(xfer);
		if (!(status & 0x80)) break; // transfer descriptor ready
		if (systick_millis_count - wait_begin_at > timeout) return 0;
    a24e:	ldr	r3, [r5, #0]
    a250:	subs	r3, r3, r7
    a252:	cmp	r3, r8
    a254:	bhi.n	a2d0 <usb_mtp_send+0xa8>
		yield();
    a256:	bl	a37c <yield>
{
	transfer_t *xfer = tx_transfer + tx_head;
	uint32_t wait_begin_at = systick_millis_count;

	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    a25a:	ldrb	r3, [r6, #0]
    a25c:	cbz	r3, a2c8 <usb_mtp_send+0xa0>
		uint32_t status = usb_transfer_status(xfer);
    a25e:	mov	r0, r4
    a260:	bl	96dc <usb_transfer_status>
		if (!(status & 0x80)) break; // transfer descriptor ready
    a264:	lsls	r3, r0, #24
    a266:	bmi.n	a24e <usb_mtp_send+0x26>
		if (systick_millis_count - wait_begin_at > timeout) return 0;
		yield();
	}
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    a268:	ldr	r3, [pc, #120]	; (a2e4 <usb_mtp_send+0xbc>)
	memcpy(txdata, buffer, len);
    a26a:	mov	r2, r9
		uint32_t status = usb_transfer_status(xfer);
		if (!(status & 0x80)) break; // transfer descriptor ready
		if (systick_millis_count - wait_begin_at > timeout) return 0;
		yield();
	}
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    a26c:	ldrb.w	r5, [sl]
	memcpy(txdata, buffer, len);
    a270:	mov	r1, fp
		uint32_t status = usb_transfer_status(xfer);
		if (!(status & 0x80)) break; // transfer descriptor ready
		if (systick_millis_count - wait_begin_at > timeout) return 0;
		yield();
	}
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
    a272:	add.w	r5, r3, r5, lsl #9
	memcpy(txdata, buffer, len);
    a276:	mov	r0, r5
    a278:	bl	8568 <memcpy>
	arm_dcache_flush_delete(txdata, tx_packet_size );
    a27c:	ldr	r2, [pc, #104]	; (a2e8 <usb_mtp_send+0xc0>)
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    a27e:	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    a282:	ldrh	r2, [r2, #0]
    a284:	add	r2, r5
	asm volatile("": : :"memory");
	asm("dsb");
    a286:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    a28a:	ldr	r1, [pc, #96]	; (a2ec <usb_mtp_send+0xc4>)
    a28c:	str	r3, [r1, #0]
		location += 32;
    a28e:	adds	r3, #32
	} while (location < end_addr);
    a290:	cmp	r2, r3
    a292:	bhi.n	a28c <usb_mtp_send+0x64>
	asm("dsb");
    a294:	dsb	sy
	asm("isb");
    a298:	isb	sy
	usb_prepare_transfer(xfer, txdata, len, 0);
    a29c:	movs	r3, #0
    a29e:	mov	r2, r9
    a2a0:	mov	r1, r5
    a2a2:	mov	r0, r4
    a2a4:	bl	9660 <usb_prepare_transfer>
	usb_transmit(MTP_TX_ENDPOINT, xfer);
    a2a8:	mov	r1, r4
    a2aa:	movs	r0, #4
    a2ac:	bl	9690 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    a2b0:	ldrb.w	r3, [sl]
    a2b4:	ldr	r2, [pc, #56]	; (a2f0 <usb_mtp_send+0xc8>)
	return len;
    a2b6:	mov	r0, r9
	uint8_t *txdata = txbuffer + (tx_head * MTP_TX_SIZE_480);
	memcpy(txdata, buffer, len);
	arm_dcache_flush_delete(txdata, tx_packet_size );
	usb_prepare_transfer(xfer, txdata, len, 0);
	usb_transmit(MTP_TX_ENDPOINT, xfer);
	if (++tx_head >= TX_NUM) tx_head = 0;
    a2b8:	adds	r3, #1
    a2ba:	uxtb	r3, r3
    a2bc:	cmp	r3, #3
    a2be:	it	hi
    a2c0:	movhi	r3, #0
    a2c2:	strb	r3, [r2, #0]
	return len;
    a2c4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	transfer_t *xfer = tx_transfer + tx_head;
	uint32_t wait_begin_at = systick_millis_count;

	while (1) {
		if (!usb_configuration) return -1; // usb not enumerated by host
    a2c8:	mov.w	r0, #4294967295
    a2cc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint32_t status = usb_transfer_status(xfer);
		if (!(status & 0x80)) break; // transfer descriptor ready
		if (systick_millis_count - wait_begin_at > timeout) return 0;
    a2d0:	movs	r0, #0
	arm_dcache_flush_delete(txdata, tx_packet_size );
	usb_prepare_transfer(xfer, txdata, len, 0);
	usb_transmit(MTP_TX_ENDPOINT, xfer);
	if (++tx_head >= TX_NUM) tx_head = 0;
	return len;
}
    a2d2:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a2d6:	nop
    a2d8:	.word	0x2000e684
    a2dc:	.word	0x2000e678
    a2e0:	.word	0x2000e740
    a2e4:	.word	0x20203800
    a2e8:	.word	0x2000e698
    a2ec:	.word	0xe000ef70
    a2f0:	.word	0x2000e69a

0000a2f4 <usb_mtp_available>:

int usb_mtp_available(void)
{
	if (!usb_configuration) return 0;
    a2f4:	ldr	r3, [pc, #28]	; (a314 <usb_mtp_available+0x20>)
    a2f6:	ldrb	r3, [r3, #0]
    a2f8:	and.w	r0, r3, #255	; 0xff
    a2fc:	cbz	r3, a312 <usb_mtp_available+0x1e>
	if (rx_head != rx_tail) return rx_packet_size;
    a2fe:	ldr	r2, [pc, #24]	; (a318 <usb_mtp_available+0x24>)
    a300:	ldr	r3, [pc, #24]	; (a31c <usb_mtp_available+0x28>)
    a302:	ldrb	r2, [r2, #0]
    a304:	ldrb	r3, [r3, #0]
    a306:	cmp	r2, r3
    a308:	beq.n	a310 <usb_mtp_available+0x1c>
    a30a:	ldr	r3, [pc, #20]	; (a320 <usb_mtp_available+0x2c>)
    a30c:	ldrh	r0, [r3, #0]
    a30e:	bx	lr
	return len;
}

int usb_mtp_available(void)
{
	if (!usb_configuration) return 0;
    a310:	movs	r0, #0
	if (rx_head != rx_tail) return rx_packet_size;
	//if (!(usb_transfer_status(rx_transfer) & 0x80)) return MTP_RX_SIZE;
	return 0;
}
    a312:	bx	lr
    a314:	.word	0x2000e678
    a318:	.word	0x2000e72c
    a31c:	.word	0x2000e720
    a320:	.word	0x2000e72a

0000a324 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    a324:	ldr	r2, [pc, #72]	; (a370 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    a326:	ldr	r3, [pc, #76]	; (a374 <usb_init_serialnumber+0x50>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    a328:	ldr.w	r0, [r2, #544]	; 0x220
    a32c:	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    a330:	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    a332:	push	{r4, lr}
    a334:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    a336:	bhi.n	a33e <usb_init_serialnumber+0x1a>
    a338:	add.w	r0, r0, r0, lsl #2
    a33c:	lsls	r0, r0, #1
    a33e:	ldr	r4, [pc, #56]	; (a378 <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    a340:	add	r1, sp, #4
    a342:	movs	r2, #10
    a344:	bl	9940 <ultoa>
    a348:	add	r1, sp, #4
	for (i=0; i<10; i++) {
    a34a:	movs	r3, #0
    a34c:	mov	r0, r4
		char c = buf[i];
    a34e:	ldrb.w	r2, [r1], #1
    a352:	adds	r3, #1
		if (!c) break;
    a354:	cbz	r2, a366 <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    a356:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    a358:	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    a35c:	bne.n	a34e <usb_init_serialnumber+0x2a>
    a35e:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    a360:	strb	r3, [r4, #0]
}
    a362:	add	sp, #16
    a364:	pop	{r4, pc}
    a366:	lsls	r3, r3, #1
    a368:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    a36a:	strb	r3, [r4, #0]
}
    a36c:	add	sp, #16
    a36e:	pop	{r4, pc}
    a370:	.word	0x401f4400
    a374:	.word	0x0098967f
    a378:	.word	0x20000b08

0000a37c <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    a37c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    a380:	ldr	r6, [pc, #200]	; (a44c <yield+0xd0>)
    a382:	ldrb	r3, [r6, #0]
    a384:	cbz	r3, a3ac <yield+0x30>
	if (running) return; // TODO: does this need to be atomic?
    a386:	ldr	r7, [pc, #200]	; (a450 <yield+0xd4>)
    a388:	ldrb	r2, [r7, #0]
    a38a:	cbnz	r2, a3ac <yield+0x30>
	running = 1;
    a38c:	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    a38e:	lsls	r1, r3, #31
void yield(void)
{
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    a390:	strb	r2, [r7, #0]


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    a392:	bmi.n	a404 <yield+0x88>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    a394:	lsls	r2, r3, #30
    a396:	bmi.n	a3cc <yield+0x50>

	running = 0;
    a398:	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    a39a:	lsls	r3, r3, #29
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();

	running = 0;
    a39c:	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    a39e:	bpl.n	a3ac <yield+0x30>
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    a3a0:	ldr	r3, [pc, #176]	; (a454 <yield+0xd8>)
    a3a2:	ldr	r2, [r3, #0]
    a3a4:	cbz	r2, a3ac <yield+0x30>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    a3a6:	mrs	r2, IPSR
		if (ipsr != 0) return;
    a3aa:	cbz	r2, a3b0 <yield+0x34>
    a3ac:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a3b0:	mrs	r0, PRIMASK
		__disable_irq();
    a3b4:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    a3b6:	ldr	r2, [r3, #0]
		if (first == nullptr) {
    a3b8:	cbz	r2, a3c2 <yield+0x46>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    a3ba:	ldr	r4, [pc, #156]	; (a458 <yield+0xdc>)
    a3bc:	ldrb	r1, [r4, #0]
    a3be:	cmp	r1, #0
    a3c0:	beq.n	a422 <yield+0xa6>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a3c2:	cmp	r0, #0
    a3c4:	bne.n	a3ac <yield+0x30>
    a3c6:	cpsie	i
    a3c8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    a3cc:	ldr.w	r8, [pc, #148]	; a464 <yield+0xe8>
    a3d0:	ldrb.w	r2, [r8]
    a3d4:	cmp	r2, #0
    a3d6:	beq.n	a398 <yield+0x1c>
    a3d8:	movs	r4, #0
    a3da:	ldr.w	r9, [pc, #140]	; a468 <yield+0xec>
    a3de:	b.n	a3ec <yield+0x70>
    a3e0:	adds	r4, #1
    a3e2:	ldrb.w	r3, [r8]
    a3e6:	uxtb	r4, r4
    a3e8:	cmp	r3, r4
    a3ea:	bls.n	a414 <yield+0x98>
			s_serials_with_serial_events[i]->doYieldCode();
    a3ec:	ldr.w	r5, [r9, r4, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    a3f0:	ldr	r3, [r5, #0]
    a3f2:	mov	r0, r5
    a3f4:	ldr	r3, [r3, #16]
    a3f6:	blx	r3
    a3f8:	cmp	r0, #0
    a3fa:	beq.n	a3e0 <yield+0x64>
    a3fc:	ldr	r3, [r5, #20]
    a3fe:	ldr	r3, [r3, #8]
    a400:	blx	r3
    a402:	b.n	a3e0 <yield+0x64>
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    a404:	bl	8c0c <usb_serial_available>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    a408:	cbnz	r0, a440 <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    a40a:	ldr	r3, [pc, #80]	; (a45c <yield+0xe0>)
    a40c:	ldrb	r3, [r3, #0]
    a40e:	cbnz	r3, a418 <yield+0x9c>
    a410:	ldrb	r3, [r6, #0]
    a412:	b.n	a394 <yield+0x18>
    a414:	ldrb	r3, [r6, #0]
    a416:	b.n	a398 <yield+0x1c>
    a418:	ldrb	r3, [r6, #0]
    a41a:	and.w	r3, r3, #254	; 0xfe
    a41e:	strb	r3, [r6, #0]
    a420:	b.n	a394 <yield+0x18>
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    a422:	movs	r6, #1
		firstYield = first->_next;
    a424:	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    a426:	strb	r6, [r4, #0]
		firstYield = first->_next;
    a428:	str	r5, [r3, #0]
		if (firstYield) {
    a42a:	cbz	r5, a446 <yield+0xca>
			firstYield->_prev = nullptr;
    a42c:	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a42e:	cbnz	r0, a432 <yield+0xb6>
    a430:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    a432:	movs	r5, #0
		(*(first->_function))(*first);
    a434:	ldr	r3, [r2, #8]
    a436:	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    a438:	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    a43a:	blx	r3
		runningFromYield = false;
    a43c:	strb	r5, [r4, #0]
    a43e:	b.n	a3ac <yield+0x30>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    a440:	bl	a698 <serialEvent()>
    a444:	b.n	a40a <yield+0x8e>
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    a446:	ldr	r3, [pc, #24]	; (a460 <yield+0xe4>)
    a448:	str	r5, [r3, #0]
    a44a:	b.n	a42e <yield+0xb2>
    a44c:	.word	0x20000b1e
    a450:	.word	0x2000e7c0
    a454:	.word	0x2000e7d0
    a458:	.word	0x2000e7d4
    a45c:	.word	0x6000178a
    a460:	.word	0x2000e7cc
    a464:	.word	0x2000e7f4
    a468:	.word	0x2000e7d8

0000a46c <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    a46c:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a46e:	mrs	r1, PRIMASK
		__disable_irq();
    a472:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    a474:	ldr	r4, [pc, #48]	; (a4a8 <EventResponder::runFromInterrupt()+0x3c>)
    a476:	ldr	r3, [r4, #0]
		if (first) {
    a478:	cbz	r3, a49e <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    a47a:	ldr	r6, [pc, #48]	; (a4ac <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    a47c:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    a47e:	ldr	r2, [r3, #20]
    a480:	str	r2, [r4, #0]
			if (firstInterrupt) {
    a482:	cbz	r2, a4a4 <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    a484:	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a486:	cbnz	r1, a48a <EventResponder::runFromInterrupt()+0x1e>
    a488:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    a48a:	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    a48c:	mov	r0, r3
    a48e:	ldr	r3, [r3, #8]
    a490:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a492:	mrs	r1, PRIMASK
		__disable_irq();
    a496:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    a498:	ldr	r3, [r4, #0]
		if (first) {
    a49a:	cmp	r3, #0
    a49c:	bne.n	a47e <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a49e:	cbnz	r1, a4a2 <EventResponder::runFromInterrupt()+0x36>
    a4a0:	cpsie	i
    a4a2:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    a4a4:	str	r2, [r6, #0]
    a4a6:	b.n	a486 <EventResponder::runFromInterrupt()+0x1a>
    a4a8:	.word	0x2000e7c4
    a4ac:	.word	0x2000e7c8

0000a4b0 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    a4b0:	b.w	a46c <EventResponder::runFromInterrupt()>

0000a4b4 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    a4b4:	ldr	r2, [pc, #16]	; (a4c8 <systick_isr+0x14>)
    a4b6:	ldr	r3, [pc, #20]	; (a4cc <systick_isr+0x18>)
    a4b8:	ldr	r1, [r2, #0]
	systick_millis_count++;
    a4ba:	ldr	r2, [pc, #20]	; (a4d0 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    a4bc:	str	r1, [r3, #0]
	systick_millis_count++;
    a4be:	ldr	r3, [r2, #0]
    a4c0:	adds	r3, #1
    a4c2:	str	r3, [r2, #0]
    a4c4:	bx	lr
    a4c6:	nop
    a4c8:	.word	0xe0001004
    a4cc:	.word	0x2000e67c
    a4d0:	.word	0x2000e684

0000a4d4 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    a4d4:	b.w	8c18 <usb_serial_flush_input>

0000a4d8 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    a4d8:	b.w	8bc8 <usb_serial_peekchar>

0000a4dc <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    a4dc:	b.w	8c8c <usb_serial_getchar>

0000a4e0 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    a4e0:	b.w	8c0c <usb_serial_available>

0000a4e4 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    a4e4:	b.w	8d3c <usb_serial_flush_output>

0000a4e8 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    a4e8:	b.w	8cf0 <usb_serial_write_buffer_free>

0000a4ec <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    a4ec:	mov	r0, r1
    a4ee:	mov	r1, r2
    a4f0:	b.w	8cd8 <usb_serial_write>

0000a4f4 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    a4f4:	mov	r0, r1
    a4f6:	b.w	8cac <usb_serial_putchar>
    a4fa:	nop

0000a4fc <Print::println()>:
	if (n < 0) return printNumber64(-n, 10, 1);
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
    a4fc:	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
    a4fe:	ldr	r4, [pc, #24]	; (a518 <Print::println()+0x1c>)
	if (n < 0) return printNumber64(-n, 10, 1);
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
    a500:	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    a502:	ldr	r3, [r0, #0]
    a504:	movs	r2, #2
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    a506:	ldrh	r4, [r4, #0]
	return write(buf, 2);
    a508:	add	r1, sp, #4
    a50a:	ldr	r3, [r3, #4]
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    a50c:	strh.w	r4, [sp, #4]
	return write(buf, 2);
    a510:	blx	r3
}
    a512:	add	sp, #8
    a514:	pop	{r4, pc}
    a516:	nop
    a518:	.word	0x20000858

0000a51c <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
	((class Print *)file)->write((uint8_t *)ptr, len);
    a51c:	ldr	r3, [r0, #0]
}

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    a51e:	push	{r4, lr}
    a520:	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
    a522:	ldr	r3, [r3, #4]
    a524:	blx	r3
	return len;
}
    a526:	mov	r0, r4
    a528:	pop	{r4, pc}
    a52a:	nop

0000a52c <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
    a52c:	push	{r1, r2, r3}
    a52e:	push	{lr}
    a530:	sub	sp, #8
    a532:	add	r3, sp, #12
    a534:	ldr.w	r1, [r3], #4
	va_list ap;
	va_start(ap, format);
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    a538:	mov	r2, r3
}

int Print::printf(const char *format, ...)
{
	va_list ap;
	va_start(ap, format);
    a53a:	str	r3, [sp, #4]
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    a53c:	bl	da90 <vdprintf>
#endif
}
    a540:	add	sp, #8
    a542:	ldr.w	lr, [sp], #4
    a546:	add	sp, #12
    a548:	bx	lr
    a54a:	nop

0000a54c <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	return vdprintf((int)this, (const char *)format, ap);
#endif
}

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    a54c:	push	{r4, r5, r6, r7, lr}
    a54e:	mov	r6, r0
    a550:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    a552:	cmp	r2, #0
    a554:	beq.n	a5be <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    a556:	cmp	r2, #1
    a558:	it	eq
    a55a:	moveq	r2, #10
	}


	if (n == 0) {
    a55c:	cbz	r1, a5b4 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    a55e:	movs	r5, #33	; 0x21
    a560:	b.n	a564 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    a562:	uxtb	r5, r7
    a564:	subs	r7, r5, #1
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    a566:	udiv	r4, r1, r2
    a56a:	mls	r1, r2, r4, r1
    a56e:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    a570:	cmp	r1, #9
    a572:	add.w	r1, r0, #55	; 0x37
    a576:	add.w	r0, r0, #48	; 0x30
    a57a:	it	hi
    a57c:	uxtbhi	r0, r1
			n /= base;
			if (n == 0) break;
    a57e:	mov	r1, r4
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    a580:	add	r4, sp, #40	; 0x28
    a582:	it	ls
    a584:	uxtbls	r0, r0
    a586:	add	r4, r5
    a588:	strb.w	r0, [r4, #-36]
			n /= base;
			if (n == 0) break;
    a58c:	cmp	r1, #0
    a58e:	bne.n	a562 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    a590:	cbz	r3, a5a0 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    a592:	subs	r5, #1
		buf[i] = '-';
    a594:	add	r3, sp, #40	; 0x28
    a596:	movs	r2, #45	; 0x2d
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
		i--;
    a598:	uxtb	r5, r5
		buf[i] = '-';
    a59a:	add	r3, r5
    a59c:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    a5a0:	ldr	r3, [r6, #0]
    a5a2:	add	r1, sp, #4
    a5a4:	rsb	r2, r5, #34	; 0x22
    a5a8:	mov	r0, r6
    a5aa:	add	r1, r5
    a5ac:	ldr	r3, [r3, #4]
    a5ae:	blx	r3
}
    a5b0:	add	sp, #44	; 0x2c
    a5b2:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    a5b4:	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    a5b6:	movs	r5, #33	; 0x21
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    a5b8:	strb.w	r2, [sp, #37]	; 0x25
    a5bc:	b.n	a590 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    a5be:	ldr	r3, [r0, #0]
    a5c0:	uxtb	r1, r1
    a5c2:	ldr	r3, [r3, #0]
    a5c4:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    a5c6:	add	sp, #44	; 0x2c
    a5c8:	pop	{r4, r5, r6, r7, pc}
    a5ca:	nop

0000a5cc <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    a5cc:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    a5ce:	bl	100 <setup>
	while (1) {
		loop();
    a5d2:	bl	5248 <loop>
		yield();
    a5d6:	bl	a37c <yield>
    a5da:	b.n	a5d2 <main+0x6>

0000a5dc <Stream::timedPeek()>:
  return -1;     // -1 indicates timeout
}

// private method to peek stream with timeout
int Stream::timedPeek()
{
    a5dc:	push	{r4, r5, r6, lr}
    a5de:	ldr	r5, [pc, #40]	; (a608 <Stream::timedPeek()+0x2c>)
    a5e0:	mov	r4, r0
    a5e2:	ldr	r6, [r5, #0]
    a5e4:	b.n	a5f4 <Stream::timedPeek()+0x18>
  int c;
  unsigned long startMillis = millis();
  do {
    c = peek();
    if (c >= 0) return c;
    yield();
    a5e6:	bl	a37c <yield>
    a5ea:	ldr	r3, [r5, #0]
// private method to peek stream with timeout
int Stream::timedPeek()
{
  int c;
  unsigned long startMillis = millis();
  do {
    a5ec:	ldr	r2, [r4, #8]
    a5ee:	subs	r3, r3, r6
    a5f0:	cmp	r3, r2
    a5f2:	bcs.n	a602 <Stream::timedPeek()+0x26>
    c = peek();
    a5f4:	ldr	r3, [r4, #0]
    a5f6:	mov	r0, r4
    a5f8:	ldr	r3, [r3, #24]
    a5fa:	blx	r3
    if (c >= 0) return c;
    a5fc:	cmp	r0, #0
    a5fe:	blt.n	a5e6 <Stream::timedPeek()+0xa>
    yield();
  } while(millis() - startMillis < _timeout);
  return -1;     // -1 indicates timeout
}
    a600:	pop	{r4, r5, r6, pc}
  do {
    c = peek();
    if (c >= 0) return c;
    yield();
  } while(millis() - startMillis < _timeout);
  return -1;     // -1 indicates timeout
    a602:	mov.w	r0, #4294967295
}
    a606:	pop	{r4, r5, r6, pc}
    a608:	.word	0x2000e684

0000a60c <Stream::peekNextDigit()>:

// returns peek of the next digit in the stream or -1 if timeout
// discards non-numeric characters
int Stream::peekNextDigit()
{
    a60c:	push	{r4, lr}
    a60e:	mov	r4, r0
    a610:	b.n	a620 <Stream::peekNextDigit()+0x14>
  int c;
  while (1) {
    c = timedPeek();
    if (c < 0) return c;  // timeout
    if (c == '-') return c;
    a612:	cmp	r3, #45	; 0x2d
    a614:	beq.n	a630 <Stream::peekNextDigit()+0x24>
    if (c >= '0' && c <= '9') return c;
    a616:	cmp	r2, #9
    a618:	bls.n	a630 <Stream::peekNextDigit()+0x24>
    read();  // discard non-numeric
    a61a:	ldr	r3, [r4, #0]
    a61c:	ldr	r3, [r3, #20]
    a61e:	blx	r3
// discards non-numeric characters
int Stream::peekNextDigit()
{
  int c;
  while (1) {
    c = timedPeek();
    a620:	mov	r0, r4
    a622:	bl	a5dc <Stream::timedPeek()>
    if (c < 0) return c;  // timeout
    a626:	subs	r3, r0, #0
    if (c == '-') return c;
    if (c >= '0' && c <= '9') return c;
    read();  // discard non-numeric
    a628:	mov	r0, r4
  int c;
  while (1) {
    c = timedPeek();
    if (c < 0) return c;  // timeout
    if (c == '-') return c;
    if (c >= '0' && c <= '9') return c;
    a62a:	sub.w	r2, r3, #48	; 0x30
int Stream::peekNextDigit()
{
  int c;
  while (1) {
    c = timedPeek();
    if (c < 0) return c;  // timeout
    a62e:	bge.n	a612 <Stream::peekNextDigit()+0x6>
    if (c == '-') return c;
    if (c >= '0' && c <= '9') return c;
    read();  // discard non-numeric
  }
}
    a630:	mov	r0, r3
    a632:	pop	{r4, pc}

0000a634 <Stream::parseInt(char)>:
}

// as above but a given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
long Stream::parseInt(char skipChar)
{
    a634:	push	{r3, r4, r5, r6, r7, lr}
    a636:	mov	r5, r1
    a638:	mov	r4, r0
  boolean isNegative = false;
  long value = 0;
  int c;

  c = peekNextDigit();
    a63a:	bl	a60c <Stream::peekNextDigit()>
  // ignore non numeric leading characters
  if(c < 0)
    a63e:	cmp	r0, #0
    a640:	blt.n	a68a <Stream::parseInt(char)+0x56>
    a642:	movs	r6, #0
    a644:	mov	r7, r6
    return 0; // zero returned if timeout

  do{
    if(c == skipChar)
    a646:	cmp	r0, r5
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
    a648:	sub.w	r2, r0, #48	; 0x30
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout

  do{
    if(c == skipChar)
    a64c:	beq.n	a662 <Stream::parseInt(char)+0x2e>
      ; // ignore this charactor
    else if(c == '-')
    a64e:	cmp	r0, #45	; 0x2d
    a650:	beq.n	a682 <Stream::parseInt(char)+0x4e>
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
      value = value * 10 + c - '0';
    a652:	add.w	r3, r6, r6, lsl #2
  do{
    if(c == skipChar)
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
    a656:	cmp	r2, #9
      value = value * 10 + c - '0';
    a658:	add.w	r0, r0, r3, lsl #1
  do{
    if(c == skipChar)
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
    a65c:	bhi.n	a662 <Stream::parseInt(char)+0x2e>
      value = value * 10 + c - '0';
    a65e:	sub.w	r6, r0, #48	; 0x30
    read();  // consume the character we got with peek
    a662:	ldr	r3, [r4, #0]
    a664:	mov	r0, r4
    a666:	ldr	r3, [r3, #20]
    a668:	blx	r3
    c = timedPeek();
    a66a:	mov	r0, r4
    a66c:	bl	a5dc <Stream::timedPeek()>
  }
  while( (c >= '0' && c <= '9') || c == skipChar );
    a670:	sub.w	r3, r0, #48	; 0x30
    a674:	cmp	r3, #9
    a676:	bls.n	a646 <Stream::parseInt(char)+0x12>
    a678:	cmp	r0, r5
    a67a:	beq.n	a646 <Stream::parseInt(char)+0x12>

  if(isNegative)
    a67c:	cbz	r7, a686 <Stream::parseInt(char)+0x52>
    value = -value;
    a67e:	negs	r0, r6
    a680:	pop	{r3, r4, r5, r6, r7, pc}

  do{
    if(c == skipChar)
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    a682:	movs	r7, #1
    a684:	b.n	a662 <Stream::parseInt(char)+0x2e>
    a686:	mov	r0, r6
  while( (c >= '0' && c <= '9') || c == skipChar );

  if(isNegative)
    value = -value;
  return value;
}
    a688:	pop	{r3, r4, r5, r6, r7, pc}
  int c;

  c = peekNextDigit();
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout
    a68a:	movs	r0, #0
    a68c:	pop	{r3, r4, r5, r6, r7, pc}
    a68e:	nop

0000a690 <Stream::parseInt()>:
// returns the first valid (long) integer value from the current position.
// initial characters that are not digits (or the minus sign) are skipped
// function is terminated by the first character that is not a digit.
long Stream::parseInt()
{
  return parseInt(NO_SKIP_CHAR); // terminate on first non-digit character (or timeout)
    a690:	movs	r1, #1
    a692:	b.w	a634 <Stream::parseInt(char)>
    a696:	nop

0000a698 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
    a698:	bx	lr
    a69a:	nop

0000a69c <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    a69c:	ldr	r2, [pc, #600]	; (a8f8 <set_arm_clock+0x25c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    a69e:	ldr	r3, [pc, #604]	; (a8fc <set_arm_clock+0x260>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    a6a0:	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    a6a2:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
    a6a6:	ldr	r4, [pc, #600]	; (a900 <set_arm_clock+0x264>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    a6a8:	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    a6ac:	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    a6ae:	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    a6b0:	bls.n	a6ec <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    a6b2:	ldr	r3, [pc, #592]	; (a904 <set_arm_clock+0x268>)
    a6b4:	cmp	r0, r3
    a6b6:	bls.w	a8e4 <set_arm_clock+0x248>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    a6ba:	ldr	r3, [pc, #588]	; (a908 <set_arm_clock+0x26c>)
    a6bc:	movw	r5, #1575	; 0x627
    a6c0:	ldr	r7, [pc, #584]	; (a90c <set_arm_clock+0x270>)
    a6c2:	add	r3, r0
    a6c4:	ldr	r4, [pc, #584]	; (a910 <set_arm_clock+0x274>)
    a6c6:	lsrs	r2, r3, #8
    a6c8:	umull	r3, r2, r7, r2
    a6cc:	lsrs	r3, r2, #7
    a6ce:	add.w	r3, r3, r3, lsl #2
    a6d2:	add.w	r2, r3, r3, lsl #2
    a6d6:	addw	r3, r2, #1250	; 0x4e2
    a6da:	cmp	r3, r5
    a6dc:	it	cs
    a6de:	movcs	r3, r5
    a6e0:	sub.w	r3, r3, #800	; 0x320
    a6e4:	umull	r3, r5, r4, r3
    a6e8:	lsrs	r5, r5, #3
    a6ea:	b.n	a6f6 <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
    a6ec:	ldr	r5, [pc, #548]	; (a914 <set_arm_clock+0x278>)
    a6ee:	cmp	r0, r5
    a6f0:	ite	ls
    a6f2:	movls	r5, #6
    a6f4:	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a6f6:	ldr	r2, [pc, #516]	; (a8fc <set_arm_clock+0x260>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a6f8:	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a6fc:	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a700:	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    a702:	orr.w	r3, r3, #192	; 0xc0
    a706:	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    a70a:	bcs.n	a722 <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    a70c:	ldr	r3, [pc, #496]	; (a900 <set_arm_clock+0x264>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    a70e:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a712:	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    a714:	orrs	r6, r5
		DCDC_REG3 = dcdc;
    a716:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a718:	ldr	r3, [r2, #0]
    a71a:	cmp	r3, #0
    a71c:	bge.n	a718 <set_arm_clock+0x7c>
    a71e:	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    a722:	ands.w	r3, lr, #33554432	; 0x2000000
    a726:	bne.n	a78c <set_arm_clock+0xf0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    a728:	ldr	r4, [pc, #492]	; (a918 <set_arm_clock+0x27c>)
    a72a:	ldr	r2, [pc, #496]	; (a91c <set_arm_clock+0x280>)
    a72c:	ldr.w	ip, [r4, #16]
    a730:	mov	r4, r2
    a732:	and.w	r2, ip, r2
    a736:	cmp	r2, r4
    a738:	itet	eq
    a73a:	moveq.w	r3, #402653184	; 0x18000000
    a73e:	movne.w	r2, #4096	; 0x1000
    a742:	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    a744:	eor.w	r4, lr, r3
    a748:	tst.w	r4, #939524096	; 0x38000000
    a74c:	beq.n	a760 <set_arm_clock+0xc4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    a74e:	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    a752:	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
    a756:	ldr	r4, [pc, #420]	; (a8fc <set_arm_clock+0x260>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    a758:	orr.w	lr, r3, lr
			CCM_CBCDR = cbcdr;
    a75c:	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    a760:	eor.w	r3, r1, r2
    a764:	tst.w	r3, #12288	; 0x3000
    a768:	beq.n	a77c <set_arm_clock+0xe0>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    a76a:	ldr	r3, [pc, #400]	; (a8fc <set_arm_clock+0x260>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    a76c:	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    a770:	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    a772:	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    a774:	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    a776:	ldr	r3, [r2, #72]	; 0x48
    a778:	lsls	r4, r3, #28
    a77a:	bmi.n	a776 <set_arm_clock+0xda>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    a77c:	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    a780:	ldr	r2, [pc, #376]	; (a8fc <set_arm_clock+0x260>)
    a782:	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    a786:	ldr	r3, [r2, #72]	; 0x48
    a788:	lsls	r1, r3, #26
    a78a:	bmi.n	a786 <set_arm_clock+0xea>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    a78c:	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    a78e:	ldr	r4, [pc, #400]	; (a920 <set_arm_clock+0x284>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    a790:	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    a792:	mul.w	r3, r1, r2
    a796:	mul.w	r3, r0, r3
    a79a:	cmp	r3, r4
    a79c:	bhi.n	a7b2 <set_arm_clock+0x116>
		if (div_arm < 8) {
    a79e:	cmp	r2, #7
    a7a0:	bhi.w	a8ce <set_arm_clock+0x232>
			div_arm = div_arm + 1;
    a7a4:	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    a7a6:	mul.w	r3, r1, r2
    a7aa:	mul.w	r3, r0, r3
    a7ae:	cmp	r3, r4
    a7b0:	bls.n	a79e <set_arm_clock+0x102>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    a7b2:	ldr	r0, [pc, #368]	; (a924 <set_arm_clock+0x288>)
    a7b4:	ldr	r4, [pc, #368]	; (a928 <set_arm_clock+0x28c>)
    a7b6:	add	r0, r3
    a7b8:	umull	r0, r3, r4, r0
    a7bc:	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
    a7be:	cmp	r3, #108	; 0x6c
    a7c0:	bhi.w	a8da <set_arm_clock+0x23e>
	if (mult < 54) mult = 54;
    a7c4:	cmp	r3, #53	; 0x35
    a7c6:	bhi.w	a8e8 <set_arm_clock+0x24c>
    a7ca:	ldr.w	r8, [pc, #392]	; a954 <set_arm_clock+0x2b8>
    a7ce:	movs	r3, #54	; 0x36
    a7d0:	ldr	r0, [pc, #344]	; (a92c <set_arm_clock+0x290>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a7d2:	ldr.w	ip, [pc, #324]	; a918 <set_arm_clock+0x27c>
    a7d6:	ldr	r4, [pc, #344]	; (a930 <set_arm_clock+0x294>)
    a7d8:	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    a7dc:	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a7e0:	and.w	r4, r9, r4
    a7e4:	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    a7e6:	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    a7ea:	beq.n	a804 <set_arm_clock+0x168>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    a7ec:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    a7f0:	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    a7f4:	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    a7f6:	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    a7fa:	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    a7fe:	ldr	r3, [r4, #0]
    a800:	cmp	r3, #0
    a802:	bge.n	a7fe <set_arm_clock+0x162>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    a804:	ldr.w	ip, [pc, #244]	; a8fc <set_arm_clock+0x260>
    a808:	subs	r2, #1
    a80a:	ldr.w	r3, [ip, #16]
    a80e:	and.w	r3, r3, #7
    a812:	cmp	r3, r2
    a814:	beq.n	a826 <set_arm_clock+0x18a>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    a816:	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    a81a:	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    a81c:	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    a820:	ldr	r3, [r4, #72]	; 0x48
    a822:	lsls	r3, r3, #15
    a824:	bmi.n	a820 <set_arm_clock+0x184>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    a826:	subs	r1, #1
    a828:	lsls	r1, r1, #10
    a82a:	eor.w	r3, lr, r1
    a82e:	tst.w	r3, #7168	; 0x1c00
    a832:	beq.n	a84e <set_arm_clock+0x1b2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
    a834:	ldr	r3, [pc, #196]	; (a8fc <set_arm_clock+0x260>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    a836:	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    a83a:	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    a83e:	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    a840:	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
    a844:	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    a848:	ldr	r3, [r2, #72]	; 0x48
    a84a:	lsls	r1, r3, #30
    a84c:	bmi.n	a848 <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    a84e:	ldr	r3, [pc, #228]	; (a934 <set_arm_clock+0x298>)
    a850:	ldr	r1, [pc, #228]	; (a938 <set_arm_clock+0x29c>)
    a852:	add	r3, r0
    a854:	lsrs	r3, r3, #7
    a856:	umull	r3, r1, r1, r3
    a85a:	lsrs	r1, r1, #12
    a85c:	cmp	r1, #4
    a85e:	it	cs
    a860:	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    a862:	subs	r3, r1, #1
    a864:	lsls	r3, r3, #8
    a866:	eor.w	r2, lr, r3
    a86a:	tst.w	r2, #768	; 0x300
    a86e:	beq.n	a880 <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    a870:	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    a874:	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    a878:	ldr	r2, [pc, #128]	; (a8fc <set_arm_clock+0x260>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    a87a:	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    a87e:	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    a880:	ldr	r3, [pc, #120]	; (a8fc <set_arm_clock+0x260>)
    a882:	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    a884:	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    a886:	bic.w	r4, r4, #33554432	; 0x2000000
    a88a:	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    a88c:	ldr	r3, [r2, #72]	; 0x48
    a88e:	lsls	r3, r3, #26
    a890:	bmi.n	a88c <set_arm_clock+0x1f0>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a892:	ldr	r3, [pc, #168]	; (a93c <set_arm_clock+0x2a0>)
    a894:	mov.w	r2, #4294967295
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    a898:	ldr	r4, [pc, #164]	; (a940 <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    a89a:	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a89c:	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    a8a0:	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a8a2:	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    a8a6:	ldr	r4, [pc, #156]	; (a944 <set_arm_clock+0x2a8>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a8a8:	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    a8ac:	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a8b0:	ldr	r2, [pc, #148]	; (a948 <set_arm_clock+0x2ac>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    a8b2:	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    a8b4:	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    a8b6:	bcs.n	a8ca <set_arm_clock+0x22e>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    a8b8:	ldr	r3, [pc, #68]	; (a900 <set_arm_clock+0x264>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    a8ba:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a8be:	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    a8c0:	orrs	r6, r5
		DCDC_REG3 = dcdc;
    a8c2:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    a8c4:	ldr	r3, [r2, #0]
    a8c6:	cmp	r3, #0
    a8c8:	bge.n	a8c4 <set_arm_clock+0x228>
	}

	return frequency;
}
    a8ca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    a8ce:	cmp	r1, #4
    a8d0:	bhi.w	a7b2 <set_arm_clock+0x116>
				div_ahb = div_ahb + 1;
    a8d4:	adds	r1, #1
				div_arm = 1;
    a8d6:	movs	r2, #1
    a8d8:	b.n	a792 <set_arm_clock+0xf6>
    a8da:	ldr.w	r8, [pc, #124]	; a958 <set_arm_clock+0x2bc>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    a8de:	movs	r3, #108	; 0x6c
    a8e0:	ldr	r0, [pc, #104]	; (a94c <set_arm_clock+0x2b0>)
    a8e2:	b.n	a7d2 <set_arm_clock+0x136>
    a8e4:	movs	r5, #18
    a8e6:	b.n	a6f6 <set_arm_clock+0x5a>
    a8e8:	ldr	r0, [pc, #100]	; (a950 <set_arm_clock+0x2b4>)
    a8ea:	ldr.w	r8, [pc, #112]	; a95c <set_arm_clock+0x2c0>
    a8ee:	mul.w	r0, r0, r3
    a8f2:	orr.w	r8, r3, r8
    a8f6:	b.n	a7d2 <set_arm_clock+0x136>
    a8f8:	.word	0x1f78a400
    a8fc:	.word	0x400fc000
    a900:	.word	0x40080000
    a904:	.word	0x23c34600
    a908:	.word	0xdc3cba00
    a90c:	.word	0x004cb223
    a910:	.word	0x51eb851f
    a914:	.word	0x016e3600
    a918:	.word	0x400d8000
    a91c:	.word	0x80003040
    a920:	.word	0x269fb1ff
    a924:	.word	0x005b8d80
    a928:	.word	0x165e9f81
    a92c:	.word	0x269fb200
    a930:	.word	0x8001307f
    a934:	.word	0x08f0d17f
    a938:	.word	0x00e5109f
    a93c:	.word	0x431bde83
    a940:	.word	0x20000b34
    a944:	.word	0x20000b30
    a948:	.word	0x2000e680
    a94c:	.word	0x4d3f6400
    a950:	.word	0x00b71b00
    a954:	.word	0x80002036
    a958:	.word	0x8000206c
    a95c:	.word	0x80002000

0000a960 <__aeabi_drsub>:
    a960:	eor.w	r1, r1, #2147483648	; 0x80000000
    a964:	b.n	a96c <__adddf3>
    a966:	nop

0000a968 <__aeabi_dsub>:
    a968:	eor.w	r3, r3, #2147483648	; 0x80000000

0000a96c <__adddf3>:
    a96c:	push	{r4, r5, lr}
    a96e:	mov.w	r4, r1, lsl #1
    a972:	mov.w	r5, r3, lsl #1
    a976:	teq	r4, r5
    a97a:	it	eq
    a97c:	teqeq	r0, r2
    a980:	itttt	ne
    a982:	orrsne.w	ip, r4, r0
    a986:	orrsne.w	ip, r5, r2
    a98a:	mvnsne.w	ip, r4, asr #21
    a98e:	mvnsne.w	ip, r5, asr #21
    a992:	beq.w	ab5a <__adddf3+0x1ee>
    a996:	mov.w	r4, r4, lsr #21
    a99a:	rsbs	r5, r4, r5, lsr #21
    a99e:	it	lt
    a9a0:	neglt	r5, r5
    a9a2:	ble.n	a9be <__adddf3+0x52>
    a9a4:	add	r4, r5
    a9a6:	eor.w	r2, r0, r2
    a9aa:	eor.w	r3, r1, r3
    a9ae:	eor.w	r0, r2, r0
    a9b2:	eor.w	r1, r3, r1
    a9b6:	eor.w	r2, r0, r2
    a9ba:	eor.w	r3, r1, r3
    a9be:	cmp	r5, #54	; 0x36
    a9c0:	it	hi
    a9c2:	pophi	{r4, r5, pc}
    a9c4:	tst.w	r1, #2147483648	; 0x80000000
    a9c8:	mov.w	r1, r1, lsl #12
    a9cc:	mov.w	ip, #1048576	; 0x100000
    a9d0:	orr.w	r1, ip, r1, lsr #12
    a9d4:	beq.n	a9dc <__adddf3+0x70>
    a9d6:	negs	r0, r0
    a9d8:	sbc.w	r1, r1, r1, lsl #1
    a9dc:	tst.w	r3, #2147483648	; 0x80000000
    a9e0:	mov.w	r3, r3, lsl #12
    a9e4:	orr.w	r3, ip, r3, lsr #12
    a9e8:	beq.n	a9f0 <__adddf3+0x84>
    a9ea:	negs	r2, r2
    a9ec:	sbc.w	r3, r3, r3, lsl #1
    a9f0:	teq	r4, r5
    a9f4:	beq.w	ab46 <__adddf3+0x1da>
    a9f8:	sub.w	r4, r4, #1
    a9fc:	rsbs	lr, r5, #32
    aa00:	blt.n	aa1e <__adddf3+0xb2>
    aa02:	lsl.w	ip, r2, lr
    aa06:	lsr.w	r2, r2, r5
    aa0a:	adds	r0, r0, r2
    aa0c:	adc.w	r1, r1, #0
    aa10:	lsl.w	r2, r3, lr
    aa14:	adds	r0, r0, r2
    aa16:	asr.w	r3, r3, r5
    aa1a:	adcs	r1, r3
    aa1c:	b.n	aa3c <__adddf3+0xd0>
    aa1e:	sub.w	r5, r5, #32
    aa22:	add.w	lr, lr, #32
    aa26:	cmp	r2, #1
    aa28:	lsl.w	ip, r3, lr
    aa2c:	it	cs
    aa2e:	orrcs.w	ip, ip, #2
    aa32:	asr.w	r3, r3, r5
    aa36:	adds	r0, r0, r3
    aa38:	adcs.w	r1, r1, r3, asr #31
    aa3c:	and.w	r5, r1, #2147483648	; 0x80000000
    aa40:	bpl.n	aa52 <__adddf3+0xe6>
    aa42:	mov.w	lr, #0
    aa46:	rsbs	ip, ip, #0
    aa4a:	sbcs.w	r0, lr, r0
    aa4e:	sbc.w	r1, lr, r1
    aa52:	cmp.w	r1, #1048576	; 0x100000
    aa56:	bcc.n	aa90 <__adddf3+0x124>
    aa58:	cmp.w	r1, #2097152	; 0x200000
    aa5c:	bcc.n	aa78 <__adddf3+0x10c>
    aa5e:	lsrs	r1, r1, #1
    aa60:	movs.w	r0, r0, rrx
    aa64:	mov.w	ip, ip, rrx
    aa68:	add.w	r4, r4, #1
    aa6c:	mov.w	r2, r4, lsl #21
    aa70:	cmn.w	r2, #4194304	; 0x400000
    aa74:	bcs.w	abac <__adddf3+0x240>
    aa78:	cmp.w	ip, #2147483648	; 0x80000000
    aa7c:	it	eq
    aa7e:	movseq.w	ip, r0, lsr #1
    aa82:	adcs.w	r0, r0, #0
    aa86:	adc.w	r1, r1, r4, lsl #20
    aa8a:	orr.w	r1, r1, r5
    aa8e:	pop	{r4, r5, pc}
    aa90:	movs.w	ip, ip, lsl #1
    aa94:	adcs	r0, r0
    aa96:	adc.w	r1, r1, r1
    aa9a:	tst.w	r1, #1048576	; 0x100000
    aa9e:	sub.w	r4, r4, #1
    aaa2:	bne.n	aa78 <__adddf3+0x10c>
    aaa4:	teq	r1, #0
    aaa8:	itt	eq
    aaaa:	moveq	r1, r0
    aaac:	moveq	r0, #0
    aaae:	clz	r3, r1
    aab2:	it	eq
    aab4:	addeq	r3, #32
    aab6:	sub.w	r3, r3, #11
    aaba:	subs.w	r2, r3, #32
    aabe:	bge.n	aada <__adddf3+0x16e>
    aac0:	adds	r2, #12
    aac2:	ble.n	aad6 <__adddf3+0x16a>
    aac4:	add.w	ip, r2, #20
    aac8:	rsb	r2, r2, #12
    aacc:	lsl.w	r0, r1, ip
    aad0:	lsr.w	r1, r1, r2
    aad4:	b.n	aaf0 <__adddf3+0x184>
    aad6:	add.w	r2, r2, #20
    aada:	it	le
    aadc:	rsble	ip, r2, #32
    aae0:	lsl.w	r1, r1, r2
    aae4:	lsr.w	ip, r0, ip
    aae8:	itt	le
    aaea:	orrle.w	r1, r1, ip
    aaee:	lslle	r0, r2
    aaf0:	subs	r4, r4, r3
    aaf2:	ittt	ge
    aaf4:	addge.w	r1, r1, r4, lsl #20
    aaf8:	orrge	r1, r5
    aafa:	popge	{r4, r5, pc}
    aafc:	mvn.w	r4, r4
    ab00:	subs	r4, #31
    ab02:	bge.n	ab3e <__adddf3+0x1d2>
    ab04:	adds	r4, #12
    ab06:	bgt.n	ab26 <__adddf3+0x1ba>
    ab08:	add.w	r4, r4, #20
    ab0c:	rsb	r2, r4, #32
    ab10:	lsr.w	r0, r0, r4
    ab14:	lsl.w	r3, r1, r2
    ab18:	orr.w	r0, r0, r3
    ab1c:	lsr.w	r3, r1, r4
    ab20:	orr.w	r1, r5, r3
    ab24:	pop	{r4, r5, pc}
    ab26:	rsb	r4, r4, #12
    ab2a:	rsb	r2, r4, #32
    ab2e:	lsr.w	r0, r0, r2
    ab32:	lsl.w	r3, r1, r4
    ab36:	orr.w	r0, r0, r3
    ab3a:	mov	r1, r5
    ab3c:	pop	{r4, r5, pc}
    ab3e:	lsr.w	r0, r1, r4
    ab42:	mov	r1, r5
    ab44:	pop	{r4, r5, pc}
    ab46:	teq	r4, #0
    ab4a:	eor.w	r3, r3, #1048576	; 0x100000
    ab4e:	itte	eq
    ab50:	eoreq.w	r1, r1, #1048576	; 0x100000
    ab54:	addeq	r4, #1
    ab56:	subne	r5, #1
    ab58:	b.n	a9f8 <__adddf3+0x8c>
    ab5a:	mvns.w	ip, r4, asr #21
    ab5e:	it	ne
    ab60:	mvnsne.w	ip, r5, asr #21
    ab64:	beq.n	abba <__adddf3+0x24e>
    ab66:	teq	r4, r5
    ab6a:	it	eq
    ab6c:	teqeq	r0, r2
    ab70:	beq.n	ab7e <__adddf3+0x212>
    ab72:	orrs.w	ip, r4, r0
    ab76:	itt	eq
    ab78:	moveq	r1, r3
    ab7a:	moveq	r0, r2
    ab7c:	pop	{r4, r5, pc}
    ab7e:	teq	r1, r3
    ab82:	ittt	ne
    ab84:	movne	r1, #0
    ab86:	movne	r0, #0
    ab88:	popne	{r4, r5, pc}
    ab8a:	movs.w	ip, r4, lsr #21
    ab8e:	bne.n	ab9c <__adddf3+0x230>
    ab90:	lsls	r0, r0, #1
    ab92:	adcs	r1, r1
    ab94:	it	cs
    ab96:	orrcs.w	r1, r1, #2147483648	; 0x80000000
    ab9a:	pop	{r4, r5, pc}
    ab9c:	adds.w	r4, r4, #4194304	; 0x400000
    aba0:	itt	cc
    aba2:	addcc.w	r1, r1, #1048576	; 0x100000
    aba6:	popcc	{r4, r5, pc}
    aba8:	and.w	r5, r1, #2147483648	; 0x80000000
    abac:	orr.w	r1, r5, #2130706432	; 0x7f000000
    abb0:	orr.w	r1, r1, #15728640	; 0xf00000
    abb4:	mov.w	r0, #0
    abb8:	pop	{r4, r5, pc}
    abba:	mvns.w	ip, r4, asr #21
    abbe:	itte	ne
    abc0:	movne	r1, r3
    abc2:	movne	r0, r2
    abc4:	mvnseq.w	ip, r5, asr #21
    abc8:	itt	ne
    abca:	movne	r3, r1
    abcc:	movne	r2, r0
    abce:	orrs.w	r4, r0, r1, lsl #12
    abd2:	itte	eq
    abd4:	orrseq.w	r5, r2, r3, lsl #12
    abd8:	teqeq	r1, r3
    abdc:	orrne.w	r1, r1, #524288	; 0x80000
    abe0:	pop	{r4, r5, pc}
    abe2:	nop

0000abe4 <__aeabi_ui2d>:
    abe4:	teq	r0, #0
    abe8:	itt	eq
    abea:	moveq	r1, #0
    abec:	bxeq	lr
    abee:	push	{r4, r5, lr}
    abf0:	mov.w	r4, #1024	; 0x400
    abf4:	add.w	r4, r4, #50	; 0x32
    abf8:	mov.w	r5, #0
    abfc:	mov.w	r1, #0
    ac00:	b.n	aaa4 <__adddf3+0x138>
    ac02:	nop

0000ac04 <__aeabi_i2d>:
    ac04:	teq	r0, #0
    ac08:	itt	eq
    ac0a:	moveq	r1, #0
    ac0c:	bxeq	lr
    ac0e:	push	{r4, r5, lr}
    ac10:	mov.w	r4, #1024	; 0x400
    ac14:	add.w	r4, r4, #50	; 0x32
    ac18:	ands.w	r5, r0, #2147483648	; 0x80000000
    ac1c:	it	mi
    ac1e:	negmi	r0, r0
    ac20:	mov.w	r1, #0
    ac24:	b.n	aaa4 <__adddf3+0x138>
    ac26:	nop

0000ac28 <__aeabi_f2d>:
    ac28:	lsls	r2, r0, #1
    ac2a:	mov.w	r1, r2, asr #3
    ac2e:	mov.w	r1, r1, rrx
    ac32:	mov.w	r0, r2, lsl #28
    ac36:	itttt	ne
    ac38:	andsne.w	r3, r2, #4278190080	; 0xff000000
    ac3c:	teqne	r3, #4278190080	; 0xff000000
    ac40:	eorne.w	r1, r1, #939524096	; 0x38000000
    ac44:	bxne	lr
    ac46:	teq	r2, #0
    ac4a:	ite	ne
    ac4c:	teqne	r3, #4278190080	; 0xff000000
    ac50:	bxeq	lr
    ac52:	push	{r4, r5, lr}
    ac54:	mov.w	r4, #896	; 0x380
    ac58:	and.w	r5, r1, #2147483648	; 0x80000000
    ac5c:	bic.w	r1, r1, #2147483648	; 0x80000000
    ac60:	b.n	aaa4 <__adddf3+0x138>
    ac62:	nop

0000ac64 <__aeabi_ul2d>:
    ac64:	orrs.w	r2, r0, r1
    ac68:	it	eq
    ac6a:	bxeq	lr
    ac6c:	push	{r4, r5, lr}
    ac6e:	mov.w	r5, #0
    ac72:	b.n	ac8a <__aeabi_l2d+0x16>

0000ac74 <__aeabi_l2d>:
    ac74:	orrs.w	r2, r0, r1
    ac78:	it	eq
    ac7a:	bxeq	lr
    ac7c:	push	{r4, r5, lr}
    ac7e:	ands.w	r5, r1, #2147483648	; 0x80000000
    ac82:	bpl.n	ac8a <__aeabi_l2d+0x16>
    ac84:	negs	r0, r0
    ac86:	sbc.w	r1, r1, r1, lsl #1
    ac8a:	mov.w	r4, #1024	; 0x400
    ac8e:	add.w	r4, r4, #50	; 0x32
    ac92:	movs.w	ip, r1, lsr #22
    ac96:	beq.w	aa52 <__adddf3+0xe6>
    ac9a:	mov.w	r2, #3
    ac9e:	movs.w	ip, ip, lsr #3
    aca2:	it	ne
    aca4:	addne	r2, #3
    aca6:	movs.w	ip, ip, lsr #3
    acaa:	it	ne
    acac:	addne	r2, #3
    acae:	add.w	r2, r2, ip, lsr #3
    acb2:	rsb	r3, r2, #32
    acb6:	lsl.w	ip, r0, r3
    acba:	lsr.w	r0, r0, r2
    acbe:	lsl.w	lr, r1, r3
    acc2:	orr.w	r0, r0, lr
    acc6:	lsr.w	r1, r1, r2
    acca:	add	r4, r2
    accc:	b.n	aa52 <__adddf3+0xe6>
    acce:	nop

0000acd0 <__aeabi_dmul>:
    acd0:	push	{r4, r5, r6, lr}
    acd2:	mov.w	ip, #255	; 0xff
    acd6:	orr.w	ip, ip, #1792	; 0x700
    acda:	ands.w	r4, ip, r1, lsr #20
    acde:	ittte	ne
    ace0:	andsne.w	r5, ip, r3, lsr #20
    ace4:	teqne	r4, ip
    ace8:	teqne	r5, ip
    acec:	bleq	aeac <__aeabi_dmul+0x1dc>
    acf0:	add	r4, r5
    acf2:	eor.w	r6, r1, r3
    acf6:	bic.w	r1, r1, ip, lsl #21
    acfa:	bic.w	r3, r3, ip, lsl #21
    acfe:	orrs.w	r5, r0, r1, lsl #12
    ad02:	it	ne
    ad04:	orrsne.w	r5, r2, r3, lsl #12
    ad08:	orr.w	r1, r1, #1048576	; 0x100000
    ad0c:	orr.w	r3, r3, #1048576	; 0x100000
    ad10:	beq.n	ad84 <__aeabi_dmul+0xb4>
    ad12:	umull	ip, lr, r0, r2
    ad16:	mov.w	r5, #0
    ad1a:	umlal	lr, r5, r1, r2
    ad1e:	and.w	r2, r6, #2147483648	; 0x80000000
    ad22:	umlal	lr, r5, r0, r3
    ad26:	mov.w	r6, #0
    ad2a:	umlal	r5, r6, r1, r3
    ad2e:	teq	ip, #0
    ad32:	it	ne
    ad34:	orrne.w	lr, lr, #1
    ad38:	sub.w	r4, r4, #255	; 0xff
    ad3c:	cmp.w	r6, #512	; 0x200
    ad40:	sbc.w	r4, r4, #768	; 0x300
    ad44:	bcs.n	ad50 <__aeabi_dmul+0x80>
    ad46:	movs.w	lr, lr, lsl #1
    ad4a:	adcs	r5, r5
    ad4c:	adc.w	r6, r6, r6
    ad50:	orr.w	r1, r2, r6, lsl #11
    ad54:	orr.w	r1, r1, r5, lsr #21
    ad58:	mov.w	r0, r5, lsl #11
    ad5c:	orr.w	r0, r0, lr, lsr #21
    ad60:	mov.w	lr, lr, lsl #11
    ad64:	subs.w	ip, r4, #253	; 0xfd
    ad68:	it	hi
    ad6a:	cmphi.w	ip, #1792	; 0x700
    ad6e:	bhi.n	adae <__aeabi_dmul+0xde>
    ad70:	cmp.w	lr, #2147483648	; 0x80000000
    ad74:	it	eq
    ad76:	movseq.w	lr, r0, lsr #1
    ad7a:	adcs.w	r0, r0, #0
    ad7e:	adc.w	r1, r1, r4, lsl #20
    ad82:	pop	{r4, r5, r6, pc}
    ad84:	and.w	r6, r6, #2147483648	; 0x80000000
    ad88:	orr.w	r1, r6, r1
    ad8c:	orr.w	r0, r0, r2
    ad90:	eor.w	r1, r1, r3
    ad94:	subs.w	r4, r4, ip, lsr #1
    ad98:	ittt	gt
    ad9a:	rsbsgt	r5, r4, ip
    ad9e:	orrgt.w	r1, r1, r4, lsl #20
    ada2:	popgt	{r4, r5, r6, pc}
    ada4:	orr.w	r1, r1, #1048576	; 0x100000
    ada8:	mov.w	lr, #0
    adac:	subs	r4, #1
    adae:	bgt.w	af08 <__aeabi_dmul+0x238>
    adb2:	cmn.w	r4, #54	; 0x36
    adb6:	ittt	le
    adb8:	movle	r0, #0
    adba:	andle.w	r1, r1, #2147483648	; 0x80000000
    adbe:	pople	{r4, r5, r6, pc}
    adc0:	rsb	r4, r4, #0
    adc4:	subs	r4, #32
    adc6:	bge.n	ae34 <__aeabi_dmul+0x164>
    adc8:	adds	r4, #12
    adca:	bgt.n	ae04 <__aeabi_dmul+0x134>
    adcc:	add.w	r4, r4, #20
    add0:	rsb	r5, r4, #32
    add4:	lsl.w	r3, r0, r5
    add8:	lsr.w	r0, r0, r4
    addc:	lsl.w	r2, r1, r5
    ade0:	orr.w	r0, r0, r2
    ade4:	and.w	r2, r1, #2147483648	; 0x80000000
    ade8:	bic.w	r1, r1, #2147483648	; 0x80000000
    adec:	adds.w	r0, r0, r3, lsr #31
    adf0:	lsr.w	r6, r1, r4
    adf4:	adc.w	r1, r2, r6
    adf8:	orrs.w	lr, lr, r3, lsl #1
    adfc:	it	eq
    adfe:	biceq.w	r0, r0, r3, lsr #31
    ae02:	pop	{r4, r5, r6, pc}
    ae04:	rsb	r4, r4, #12
    ae08:	rsb	r5, r4, #32
    ae0c:	lsl.w	r3, r0, r4
    ae10:	lsr.w	r0, r0, r5
    ae14:	lsl.w	r2, r1, r4
    ae18:	orr.w	r0, r0, r2
    ae1c:	and.w	r1, r1, #2147483648	; 0x80000000
    ae20:	adds.w	r0, r0, r3, lsr #31
    ae24:	adc.w	r1, r1, #0
    ae28:	orrs.w	lr, lr, r3, lsl #1
    ae2c:	it	eq
    ae2e:	biceq.w	r0, r0, r3, lsr #31
    ae32:	pop	{r4, r5, r6, pc}
    ae34:	rsb	r5, r4, #32
    ae38:	lsl.w	r2, r0, r5
    ae3c:	orr.w	lr, lr, r2
    ae40:	lsr.w	r3, r0, r4
    ae44:	lsl.w	r2, r1, r5
    ae48:	orr.w	r3, r3, r2
    ae4c:	lsr.w	r0, r1, r4
    ae50:	and.w	r1, r1, #2147483648	; 0x80000000
    ae54:	lsr.w	r2, r1, r4
    ae58:	bic.w	r0, r0, r2
    ae5c:	add.w	r0, r0, r3, lsr #31
    ae60:	orrs.w	lr, lr, r3, lsl #1
    ae64:	it	eq
    ae66:	biceq.w	r0, r0, r3, lsr #31
    ae6a:	pop	{r4, r5, r6, pc}
    ae6c:	teq	r4, #0
    ae70:	bne.n	ae92 <__aeabi_dmul+0x1c2>
    ae72:	and.w	r6, r1, #2147483648	; 0x80000000
    ae76:	lsls	r0, r0, #1
    ae78:	adc.w	r1, r1, r1
    ae7c:	tst.w	r1, #1048576	; 0x100000
    ae80:	it	eq
    ae82:	subeq	r4, #1
    ae84:	beq.n	ae76 <__aeabi_dmul+0x1a6>
    ae86:	orr.w	r1, r1, r6
    ae8a:	teq	r5, #0
    ae8e:	it	ne
    ae90:	bxne	lr
    ae92:	and.w	r6, r3, #2147483648	; 0x80000000
    ae96:	lsls	r2, r2, #1
    ae98:	adc.w	r3, r3, r3
    ae9c:	tst.w	r3, #1048576	; 0x100000
    aea0:	it	eq
    aea2:	subeq	r5, #1
    aea4:	beq.n	ae96 <__aeabi_dmul+0x1c6>
    aea6:	orr.w	r3, r3, r6
    aeaa:	bx	lr
    aeac:	teq	r4, ip
    aeb0:	and.w	r5, ip, r3, lsr #20
    aeb4:	it	ne
    aeb6:	teqne	r5, ip
    aeba:	beq.n	aed6 <__aeabi_dmul+0x206>
    aebc:	orrs.w	r6, r0, r1, lsl #1
    aec0:	it	ne
    aec2:	orrsne.w	r6, r2, r3, lsl #1
    aec6:	bne.n	ae6c <__aeabi_dmul+0x19c>
    aec8:	eor.w	r1, r1, r3
    aecc:	and.w	r1, r1, #2147483648	; 0x80000000
    aed0:	mov.w	r0, #0
    aed4:	pop	{r4, r5, r6, pc}
    aed6:	orrs.w	r6, r0, r1, lsl #1
    aeda:	itte	eq
    aedc:	moveq	r0, r2
    aede:	moveq	r1, r3
    aee0:	orrsne.w	r6, r2, r3, lsl #1
    aee4:	beq.n	af1a <__aeabi_dmul+0x24a>
    aee6:	teq	r4, ip
    aeea:	bne.n	aef2 <__aeabi_dmul+0x222>
    aeec:	orrs.w	r6, r0, r1, lsl #12
    aef0:	bne.n	af1a <__aeabi_dmul+0x24a>
    aef2:	teq	r5, ip
    aef6:	bne.n	af04 <__aeabi_dmul+0x234>
    aef8:	orrs.w	r6, r2, r3, lsl #12
    aefc:	itt	ne
    aefe:	movne	r0, r2
    af00:	movne	r1, r3
    af02:	bne.n	af1a <__aeabi_dmul+0x24a>
    af04:	eor.w	r1, r1, r3
    af08:	and.w	r1, r1, #2147483648	; 0x80000000
    af0c:	orr.w	r1, r1, #2130706432	; 0x7f000000
    af10:	orr.w	r1, r1, #15728640	; 0xf00000
    af14:	mov.w	r0, #0
    af18:	pop	{r4, r5, r6, pc}
    af1a:	orr.w	r1, r1, #2130706432	; 0x7f000000
    af1e:	orr.w	r1, r1, #16252928	; 0xf80000
    af22:	pop	{r4, r5, r6, pc}

0000af24 <__aeabi_ddiv>:
    af24:	push	{r4, r5, r6, lr}
    af26:	mov.w	ip, #255	; 0xff
    af2a:	orr.w	ip, ip, #1792	; 0x700
    af2e:	ands.w	r4, ip, r1, lsr #20
    af32:	ittte	ne
    af34:	andsne.w	r5, ip, r3, lsr #20
    af38:	teqne	r4, ip
    af3c:	teqne	r5, ip
    af40:	bleq	b092 <__aeabi_ddiv+0x16e>
    af44:	sub.w	r4, r4, r5
    af48:	eor.w	lr, r1, r3
    af4c:	orrs.w	r5, r2, r3, lsl #12
    af50:	mov.w	r1, r1, lsl #12
    af54:	beq.w	b068 <__aeabi_ddiv+0x144>
    af58:	mov.w	r3, r3, lsl #12
    af5c:	mov.w	r5, #268435456	; 0x10000000
    af60:	orr.w	r3, r5, r3, lsr #4
    af64:	orr.w	r3, r3, r2, lsr #24
    af68:	mov.w	r2, r2, lsl #8
    af6c:	orr.w	r5, r5, r1, lsr #4
    af70:	orr.w	r5, r5, r0, lsr #24
    af74:	mov.w	r6, r0, lsl #8
    af78:	and.w	r1, lr, #2147483648	; 0x80000000
    af7c:	cmp	r5, r3
    af7e:	it	eq
    af80:	cmpeq	r6, r2
    af82:	adc.w	r4, r4, #253	; 0xfd
    af86:	add.w	r4, r4, #768	; 0x300
    af8a:	bcs.n	af92 <__aeabi_ddiv+0x6e>
    af8c:	lsrs	r3, r3, #1
    af8e:	mov.w	r2, r2, rrx
    af92:	subs	r6, r6, r2
    af94:	sbc.w	r5, r5, r3
    af98:	lsrs	r3, r3, #1
    af9a:	mov.w	r2, r2, rrx
    af9e:	mov.w	r0, #1048576	; 0x100000
    afa2:	mov.w	ip, #524288	; 0x80000
    afa6:	subs.w	lr, r6, r2
    afaa:	sbcs.w	lr, r5, r3
    afae:	ittt	cs
    afb0:	subcs	r6, r6, r2
    afb2:	movcs	r5, lr
    afb4:	orrcs.w	r0, r0, ip
    afb8:	lsrs	r3, r3, #1
    afba:	mov.w	r2, r2, rrx
    afbe:	subs.w	lr, r6, r2
    afc2:	sbcs.w	lr, r5, r3
    afc6:	ittt	cs
    afc8:	subcs	r6, r6, r2
    afca:	movcs	r5, lr
    afcc:	orrcs.w	r0, r0, ip, lsr #1
    afd0:	lsrs	r3, r3, #1
    afd2:	mov.w	r2, r2, rrx
    afd6:	subs.w	lr, r6, r2
    afda:	sbcs.w	lr, r5, r3
    afde:	ittt	cs
    afe0:	subcs	r6, r6, r2
    afe2:	movcs	r5, lr
    afe4:	orrcs.w	r0, r0, ip, lsr #2
    afe8:	lsrs	r3, r3, #1
    afea:	mov.w	r2, r2, rrx
    afee:	subs.w	lr, r6, r2
    aff2:	sbcs.w	lr, r5, r3
    aff6:	ittt	cs
    aff8:	subcs	r6, r6, r2
    affa:	movcs	r5, lr
    affc:	orrcs.w	r0, r0, ip, lsr #3
    b000:	orrs.w	lr, r5, r6
    b004:	beq.n	b038 <__aeabi_ddiv+0x114>
    b006:	mov.w	r5, r5, lsl #4
    b00a:	orr.w	r5, r5, r6, lsr #28
    b00e:	mov.w	r6, r6, lsl #4
    b012:	mov.w	r3, r3, lsl #3
    b016:	orr.w	r3, r3, r2, lsr #29
    b01a:	mov.w	r2, r2, lsl #3
    b01e:	movs.w	ip, ip, lsr #4
    b022:	bne.n	afa6 <__aeabi_ddiv+0x82>
    b024:	tst.w	r1, #1048576	; 0x100000
    b028:	bne.n	b042 <__aeabi_ddiv+0x11e>
    b02a:	orr.w	r1, r1, r0
    b02e:	mov.w	r0, #0
    b032:	mov.w	ip, #2147483648	; 0x80000000
    b036:	b.n	afa6 <__aeabi_ddiv+0x82>
    b038:	tst.w	r1, #1048576	; 0x100000
    b03c:	itt	eq
    b03e:	orreq	r1, r0
    b040:	moveq	r0, #0
    b042:	subs.w	ip, r4, #253	; 0xfd
    b046:	it	hi
    b048:	cmphi.w	ip, #1792	; 0x700
    b04c:	bhi.w	adae <__aeabi_dmul+0xde>
    b050:	subs.w	ip, r5, r3
    b054:	itt	eq
    b056:	subseq.w	ip, r6, r2
    b05a:	movseq.w	ip, r0, lsr #1
    b05e:	adcs.w	r0, r0, #0
    b062:	adc.w	r1, r1, r4, lsl #20
    b066:	pop	{r4, r5, r6, pc}
    b068:	and.w	lr, lr, #2147483648	; 0x80000000
    b06c:	orr.w	r1, lr, r1, lsr #12
    b070:	adds.w	r4, r4, ip, lsr #1
    b074:	ittt	gt
    b076:	rsbsgt	r5, r4, ip
    b07a:	orrgt.w	r1, r1, r4, lsl #20
    b07e:	popgt	{r4, r5, r6, pc}
    b080:	orr.w	r1, r1, #1048576	; 0x100000
    b084:	mov.w	lr, #0
    b088:	subs	r4, #1
    b08a:	b.n	adae <__aeabi_dmul+0xde>
    b08c:	orr.w	lr, r5, r6
    b090:	b.n	adae <__aeabi_dmul+0xde>
    b092:	and.w	r5, ip, r3, lsr #20
    b096:	teq	r4, ip
    b09a:	it	eq
    b09c:	teqeq	r5, ip
    b0a0:	beq.w	af1a <__aeabi_dmul+0x24a>
    b0a4:	teq	r4, ip
    b0a8:	bne.n	b0c0 <__aeabi_ddiv+0x19c>
    b0aa:	orrs.w	r4, r0, r1, lsl #12
    b0ae:	bne.w	af1a <__aeabi_dmul+0x24a>
    b0b2:	teq	r5, ip
    b0b6:	bne.w	af04 <__aeabi_dmul+0x234>
    b0ba:	mov	r0, r2
    b0bc:	mov	r1, r3
    b0be:	b.n	af1a <__aeabi_dmul+0x24a>
    b0c0:	teq	r5, ip
    b0c4:	bne.n	b0d4 <__aeabi_ddiv+0x1b0>
    b0c6:	orrs.w	r5, r2, r3, lsl #12
    b0ca:	beq.w	aec8 <__aeabi_dmul+0x1f8>
    b0ce:	mov	r0, r2
    b0d0:	mov	r1, r3
    b0d2:	b.n	af1a <__aeabi_dmul+0x24a>
    b0d4:	orrs.w	r6, r0, r1, lsl #1
    b0d8:	it	ne
    b0da:	orrsne.w	r6, r2, r3, lsl #1
    b0de:	bne.w	ae6c <__aeabi_dmul+0x19c>
    b0e2:	orrs.w	r4, r0, r1, lsl #1
    b0e6:	bne.w	af04 <__aeabi_dmul+0x234>
    b0ea:	orrs.w	r5, r2, r3, lsl #1
    b0ee:	bne.w	aec8 <__aeabi_dmul+0x1f8>
    b0f2:	b.n	af1a <__aeabi_dmul+0x24a>

0000b0f4 <__gedf2>:
    b0f4:	mov.w	ip, #4294967295
    b0f8:	b.n	b108 <__cmpdf2+0x4>
    b0fa:	nop

0000b0fc <__ledf2>:
    b0fc:	mov.w	ip, #1
    b100:	b.n	b108 <__cmpdf2+0x4>
    b102:	nop

0000b104 <__cmpdf2>:
    b104:	mov.w	ip, #1
    b108:	str.w	ip, [sp, #-4]!
    b10c:	mov.w	ip, r1, lsl #1
    b110:	mvns.w	ip, ip, asr #21
    b114:	mov.w	ip, r3, lsl #1
    b118:	it	ne
    b11a:	mvnsne.w	ip, ip, asr #21
    b11e:	beq.n	b158 <__cmpdf2+0x54>
    b120:	add	sp, #4
    b122:	orrs.w	ip, r0, r1, lsl #1
    b126:	ite	eq
    b128:	orrseq.w	ip, r2, r3, lsl #1
    b12c:	teqne	r1, r3
    b130:	ittt	eq
    b132:	teqeq	r0, r2
    b136:	moveq	r0, #0
    b138:	bxeq	lr
    b13a:	cmn.w	r0, #0
    b13e:	teq	r1, r3
    b142:	it	pl
    b144:	cmppl	r1, r3
    b146:	it	eq
    b148:	cmpeq	r0, r2
    b14a:	ite	cs
    b14c:	asrcs	r0, r3, #31
    b14e:	mvncc.w	r0, r3, asr #31
    b152:	orr.w	r0, r0, #1
    b156:	bx	lr
    b158:	mov.w	ip, r1, lsl #1
    b15c:	mvns.w	ip, ip, asr #21
    b160:	bne.n	b168 <__cmpdf2+0x64>
    b162:	orrs.w	ip, r0, r1, lsl #12
    b166:	bne.n	b178 <__cmpdf2+0x74>
    b168:	mov.w	ip, r3, lsl #1
    b16c:	mvns.w	ip, ip, asr #21
    b170:	bne.n	b120 <__cmpdf2+0x1c>
    b172:	orrs.w	ip, r2, r3, lsl #12
    b176:	beq.n	b120 <__cmpdf2+0x1c>
    b178:	ldr.w	r0, [sp], #4
    b17c:	bx	lr
    b17e:	nop

0000b180 <__aeabi_cdrcmple>:
    b180:	mov	ip, r0
    b182:	mov	r0, r2
    b184:	mov	r2, ip
    b186:	mov	ip, r1
    b188:	mov	r1, r3
    b18a:	mov	r3, ip
    b18c:	b.n	b190 <__aeabi_cdcmpeq>
    b18e:	nop

0000b190 <__aeabi_cdcmpeq>:
    b190:	push	{r0, lr}
    b192:	bl	b104 <__cmpdf2>
    b196:	cmp	r0, #0
    b198:	it	mi
    b19a:	cmnmi.w	r0, #0
    b19e:	pop	{r0, pc}

0000b1a0 <__aeabi_dcmpeq>:
    b1a0:	str.w	lr, [sp, #-8]!
    b1a4:	bl	b190 <__aeabi_cdcmpeq>
    b1a8:	ite	eq
    b1aa:	moveq	r0, #1
    b1ac:	movne	r0, #0
    b1ae:	ldr.w	pc, [sp], #8
    b1b2:	nop

0000b1b4 <__aeabi_dcmplt>:
    b1b4:	str.w	lr, [sp, #-8]!
    b1b8:	bl	b190 <__aeabi_cdcmpeq>
    b1bc:	ite	cc
    b1be:	movcc	r0, #1
    b1c0:	movcs	r0, #0
    b1c2:	ldr.w	pc, [sp], #8
    b1c6:	nop

0000b1c8 <__aeabi_dcmple>:
    b1c8:	str.w	lr, [sp, #-8]!
    b1cc:	bl	b190 <__aeabi_cdcmpeq>
    b1d0:	ite	ls
    b1d2:	movls	r0, #1
    b1d4:	movhi	r0, #0
    b1d6:	ldr.w	pc, [sp], #8
    b1da:	nop

0000b1dc <__aeabi_dcmpge>:
    b1dc:	str.w	lr, [sp, #-8]!
    b1e0:	bl	b180 <__aeabi_cdrcmple>
    b1e4:	ite	ls
    b1e6:	movls	r0, #1
    b1e8:	movhi	r0, #0
    b1ea:	ldr.w	pc, [sp], #8
    b1ee:	nop

0000b1f0 <__aeabi_dcmpgt>:
    b1f0:	str.w	lr, [sp, #-8]!
    b1f4:	bl	b180 <__aeabi_cdrcmple>
    b1f8:	ite	cc
    b1fa:	movcc	r0, #1
    b1fc:	movcs	r0, #0
    b1fe:	ldr.w	pc, [sp], #8
    b202:	nop

0000b204 <__aeabi_dcmpun>:
    b204:	mov.w	ip, r1, lsl #1
    b208:	mvns.w	ip, ip, asr #21
    b20c:	bne.n	b214 <__aeabi_dcmpun+0x10>
    b20e:	orrs.w	ip, r0, r1, lsl #12
    b212:	bne.n	b22a <__aeabi_dcmpun+0x26>
    b214:	mov.w	ip, r3, lsl #1
    b218:	mvns.w	ip, ip, asr #21
    b21c:	bne.n	b224 <__aeabi_dcmpun+0x20>
    b21e:	orrs.w	ip, r2, r3, lsl #12
    b222:	bne.n	b22a <__aeabi_dcmpun+0x26>
    b224:	mov.w	r0, #0
    b228:	bx	lr
    b22a:	mov.w	r0, #1
    b22e:	bx	lr

0000b230 <__aeabi_uldivmod>:
    b230:	cbnz	r3, b248 <__aeabi_uldivmod+0x18>
    b232:	cbnz	r2, b248 <__aeabi_uldivmod+0x18>
    b234:	cmp	r1, #0
    b236:	it	eq
    b238:	cmpeq	r0, #0
    b23a:	itt	ne
    b23c:	movne.w	r1, #4294967295
    b240:	movne.w	r0, #4294967295
    b244:	b.w	b544 <__aeabi_idiv0>
    b248:	sub.w	ip, sp, #8
    b24c:	strd	ip, lr, [sp, #-16]!
    b250:	bl	b260 <__udivmoddi4>
    b254:	ldr.w	lr, [sp, #4]
    b258:	ldrd	r2, r3, [sp, #8]
    b25c:	add	sp, #16
    b25e:	bx	lr

0000b260 <__udivmoddi4>:
    b260:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b264:	mov	ip, r1
    b266:	mov	r6, r1
    b268:	mov	r4, r0
    b26a:	ldr	r5, [sp, #32]
    b26c:	cmp	r3, #0
    b26e:	bne.n	b312 <__udivmoddi4+0xb2>
    b270:	cmp	r2, r1
    b272:	mov	r7, r2
    b274:	bls.n	b350 <__udivmoddi4+0xf0>
    b276:	clz	lr, r2
    b27a:	cmp.w	lr, #0
    b27e:	beq.n	b298 <__udivmoddi4+0x38>
    b280:	rsb	r4, lr, #32
    b284:	lsr.w	r4, r0, r4
    b288:	lsl.w	r6, r1, lr
    b28c:	orr.w	ip, r4, r6
    b290:	lsl.w	r7, r2, lr
    b294:	lsl.w	r4, r0, lr
    b298:	mov.w	r9, r7, lsr #16
    b29c:	lsrs	r2, r4, #16
    b29e:	udiv	r0, ip, r9
    b2a2:	uxth.w	r8, r7
    b2a6:	mls	r6, r9, r0, ip
    b2aa:	orr.w	r6, r2, r6, lsl #16
    b2ae:	mul.w	r3, r0, r8
    b2b2:	cmp	r3, r6
    b2b4:	bls.n	b2ca <__udivmoddi4+0x6a>
    b2b6:	adds	r6, r6, r7
    b2b8:	add.w	r2, r0, #4294967295
    b2bc:	bcs.w	b504 <__udivmoddi4+0x2a4>
    b2c0:	cmp	r3, r6
    b2c2:	bls.w	b504 <__udivmoddi4+0x2a4>
    b2c6:	subs	r0, #2
    b2c8:	add	r6, r7
    b2ca:	subs	r6, r6, r3
    b2cc:	uxth	r2, r4
    b2ce:	udiv	r3, r6, r9
    b2d2:	mls	r6, r9, r3, r6
    b2d6:	orr.w	r4, r2, r6, lsl #16
    b2da:	mul.w	r8, r3, r8
    b2de:	cmp	r8, r4
    b2e0:	bls.n	b2f6 <__udivmoddi4+0x96>
    b2e2:	adds	r4, r4, r7
    b2e4:	add.w	r2, r3, #4294967295
    b2e8:	bcs.w	b500 <__udivmoddi4+0x2a0>
    b2ec:	cmp	r8, r4
    b2ee:	bls.w	b500 <__udivmoddi4+0x2a0>
    b2f2:	subs	r3, #2
    b2f4:	add	r4, r7
    b2f6:	rsb	r4, r8, r4
    b2fa:	orr.w	r0, r3, r0, lsl #16
    b2fe:	movs	r1, #0
    b300:	cmp	r5, #0
    b302:	beq.n	b3ca <__udivmoddi4+0x16a>
    b304:	lsr.w	r4, r4, lr
    b308:	movs	r3, #0
    b30a:	str	r4, [r5, #0]
    b30c:	str	r3, [r5, #4]
    b30e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b312:	cmp	r3, r1
    b314:	bls.n	b326 <__udivmoddi4+0xc6>
    b316:	cmp	r5, #0
    b318:	beq.n	b3c6 <__udivmoddi4+0x166>
    b31a:	movs	r1, #0
    b31c:	stmia.w	r5, {r0, r6}
    b320:	mov	r0, r1
    b322:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b326:	clz	r1, r3
    b32a:	cmp	r1, #0
    b32c:	bne.w	b450 <__udivmoddi4+0x1f0>
    b330:	cmp	r3, r6
    b332:	bcc.n	b33a <__udivmoddi4+0xda>
    b334:	cmp	r2, r0
    b336:	bhi.w	b52a <__udivmoddi4+0x2ca>
    b33a:	subs	r4, r0, r2
    b33c:	sbc.w	r6, r6, r3
    b340:	movs	r0, #1
    b342:	mov	ip, r6
    b344:	cmp	r5, #0
    b346:	beq.n	b3ca <__udivmoddi4+0x16a>
    b348:	stmia.w	r5, {r4, ip}
    b34c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b350:	cbnz	r2, b358 <__udivmoddi4+0xf8>
    b352:	movs	r7, #1
    b354:	udiv	r7, r7, r2
    b358:	clz	lr, r7
    b35c:	cmp.w	lr, #0
    b360:	bne.n	b3ce <__udivmoddi4+0x16e>
    b362:	subs	r3, r6, r7
    b364:	mov.w	r8, r7, lsr #16
    b368:	uxth.w	ip, r7
    b36c:	movs	r1, #1
    b36e:	udiv	r0, r3, r8
    b372:	lsrs	r2, r4, #16
    b374:	mls	r6, r8, r0, r3
    b378:	orr.w	r6, r2, r6, lsl #16
    b37c:	mul.w	r3, ip, r0
    b380:	cmp	r3, r6
    b382:	bls.n	b394 <__udivmoddi4+0x134>
    b384:	adds	r6, r6, r7
    b386:	add.w	r2, r0, #4294967295
    b38a:	bcs.n	b392 <__udivmoddi4+0x132>
    b38c:	cmp	r3, r6
    b38e:	bhi.w	b52e <__udivmoddi4+0x2ce>
    b392:	mov	r0, r2
    b394:	subs	r6, r6, r3
    b396:	uxth	r2, r4
    b398:	udiv	r3, r6, r8
    b39c:	mls	r6, r8, r3, r6
    b3a0:	orr.w	r4, r2, r6, lsl #16
    b3a4:	mul.w	ip, ip, r3
    b3a8:	cmp	ip, r4
    b3aa:	bls.n	b3bc <__udivmoddi4+0x15c>
    b3ac:	adds	r4, r4, r7
    b3ae:	add.w	r2, r3, #4294967295
    b3b2:	bcs.n	b3ba <__udivmoddi4+0x15a>
    b3b4:	cmp	ip, r4
    b3b6:	bhi.w	b524 <__udivmoddi4+0x2c4>
    b3ba:	mov	r3, r2
    b3bc:	rsb	r4, ip, r4
    b3c0:	orr.w	r0, r3, r0, lsl #16
    b3c4:	b.n	b300 <__udivmoddi4+0xa0>
    b3c6:	mov	r1, r5
    b3c8:	mov	r0, r5
    b3ca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b3ce:	rsb	r1, lr, #32
    b3d2:	lsl.w	r3, r6, lr
    b3d6:	lsl.w	r7, r7, lr
    b3da:	lsr.w	r9, r0, r1
    b3de:	mov.w	r8, r7, lsr #16
    b3e2:	lsrs	r6, r1
    b3e4:	orr.w	r9, r9, r3
    b3e8:	udiv	sl, r6, r8
    b3ec:	mov.w	r4, r9, lsr #16
    b3f0:	mls	r6, r8, sl, r6
    b3f4:	uxth.w	ip, r7
    b3f8:	orr.w	r3, r4, r6, lsl #16
    b3fc:	mul.w	r2, sl, ip
    b400:	cmp	r2, r3
    b402:	lsl.w	r4, r0, lr
    b406:	bls.n	b41e <__udivmoddi4+0x1be>
    b408:	adds	r3, r3, r7
    b40a:	add.w	r1, sl, #4294967295
    b40e:	bcs.w	b520 <__udivmoddi4+0x2c0>
    b412:	cmp	r2, r3
    b414:	bls.w	b520 <__udivmoddi4+0x2c0>
    b418:	sub.w	sl, sl, #2
    b41c:	add	r3, r7
    b41e:	subs	r3, r3, r2
    b420:	uxth.w	r9, r9
    b424:	udiv	r1, r3, r8
    b428:	mls	r3, r8, r1, r3
    b42c:	orr.w	r3, r9, r3, lsl #16
    b430:	mul.w	r6, r1, ip
    b434:	cmp	r6, r3
    b436:	bls.n	b448 <__udivmoddi4+0x1e8>
    b438:	adds	r3, r3, r7
    b43a:	add.w	r2, r1, #4294967295
    b43e:	bcs.n	b518 <__udivmoddi4+0x2b8>
    b440:	cmp	r6, r3
    b442:	bls.n	b518 <__udivmoddi4+0x2b8>
    b444:	subs	r1, #2
    b446:	add	r3, r7
    b448:	subs	r3, r3, r6
    b44a:	orr.w	r1, r1, sl, lsl #16
    b44e:	b.n	b36e <__udivmoddi4+0x10e>
    b450:	rsb	lr, r1, #32
    b454:	lsr.w	r4, r2, lr
    b458:	lsls	r3, r1
    b45a:	orrs	r3, r4
    b45c:	lsr.w	r7, r0, lr
    b460:	lsl.w	r4, r6, r1
    b464:	mov.w	ip, r3, lsr #16
    b468:	lsr.w	r6, r6, lr
    b46c:	orrs	r4, r7
    b46e:	udiv	r9, r6, ip
    b472:	lsrs	r7, r4, #16
    b474:	mls	r6, ip, r9, r6
    b478:	uxth.w	r8, r3
    b47c:	orr.w	r6, r7, r6, lsl #16
    b480:	mul.w	r7, r9, r8
    b484:	cmp	r7, r6
    b486:	lsl.w	r2, r2, r1
    b48a:	lsl.w	sl, r0, r1
    b48e:	bls.n	b4a2 <__udivmoddi4+0x242>
    b490:	adds	r6, r6, r3
    b492:	add.w	r0, r9, #4294967295
    b496:	bcs.n	b51c <__udivmoddi4+0x2bc>
    b498:	cmp	r7, r6
    b49a:	bls.n	b51c <__udivmoddi4+0x2bc>
    b49c:	sub.w	r9, r9, #2
    b4a0:	add	r6, r3
    b4a2:	subs	r6, r6, r7
    b4a4:	uxth	r0, r4
    b4a6:	udiv	r4, r6, ip
    b4aa:	mls	r6, ip, r4, r6
    b4ae:	orr.w	r7, r0, r6, lsl #16
    b4b2:	mul.w	r8, r4, r8
    b4b6:	cmp	r8, r7
    b4b8:	bls.n	b4ca <__udivmoddi4+0x26a>
    b4ba:	adds	r7, r7, r3
    b4bc:	add.w	r0, r4, #4294967295
    b4c0:	bcs.n	b514 <__udivmoddi4+0x2b4>
    b4c2:	cmp	r8, r7
    b4c4:	bls.n	b514 <__udivmoddi4+0x2b4>
    b4c6:	subs	r4, #2
    b4c8:	add	r7, r3
    b4ca:	orr.w	r0, r4, r9, lsl #16
    b4ce:	rsb	r7, r8, r7
    b4d2:	umull	r8, r9, r0, r2
    b4d6:	cmp	r7, r9
    b4d8:	mov	r4, r8
    b4da:	mov	r6, r9
    b4dc:	bcc.n	b508 <__udivmoddi4+0x2a8>
    b4de:	beq.n	b534 <__udivmoddi4+0x2d4>
    b4e0:	cbz	r5, b53c <__udivmoddi4+0x2dc>
    b4e2:	subs.w	r3, sl, r4
    b4e6:	sbc.w	r7, r7, r6
    b4ea:	lsl.w	lr, r7, lr
    b4ee:	lsrs	r3, r1
    b4f0:	lsrs	r7, r1
    b4f2:	orr.w	r3, lr, r3
    b4f6:	stmia.w	r5, {r3, r7}
    b4fa:	movs	r1, #0
    b4fc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b500:	mov	r3, r2
    b502:	b.n	b2f6 <__udivmoddi4+0x96>
    b504:	mov	r0, r2
    b506:	b.n	b2ca <__udivmoddi4+0x6a>
    b508:	subs.w	r4, r8, r2
    b50c:	sbc.w	r6, r9, r3
    b510:	subs	r0, #1
    b512:	b.n	b4e0 <__udivmoddi4+0x280>
    b514:	mov	r4, r0
    b516:	b.n	b4ca <__udivmoddi4+0x26a>
    b518:	mov	r1, r2
    b51a:	b.n	b448 <__udivmoddi4+0x1e8>
    b51c:	mov	r9, r0
    b51e:	b.n	b4a2 <__udivmoddi4+0x242>
    b520:	mov	sl, r1
    b522:	b.n	b41e <__udivmoddi4+0x1be>
    b524:	subs	r3, #2
    b526:	add	r4, r7
    b528:	b.n	b3bc <__udivmoddi4+0x15c>
    b52a:	mov	r0, r1
    b52c:	b.n	b344 <__udivmoddi4+0xe4>
    b52e:	subs	r0, #2
    b530:	add	r6, r7
    b532:	b.n	b394 <__udivmoddi4+0x134>
    b534:	cmp	sl, r8
    b536:	bcc.n	b508 <__udivmoddi4+0x2a8>
    b538:	mov	r6, r7
    b53a:	b.n	b4e0 <__udivmoddi4+0x280>
    b53c:	mov	r1, r5
    b53e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b542:	nop

0000b544 <__aeabi_idiv0>:
    b544:	bx	lr
    b546:	nop

0000b548 <fcvtf>:
    b548:	push	{r4, r5, r6, lr}
    b54a:	mov	r4, r0
    b54c:	vmov	r0, s0
    b550:	mov	r5, r1
    b552:	mov	r6, r2
    b554:	bl	ac28 <__aeabi_f2d>
    b558:	mov	r2, r6
    b55a:	vmov	d0, r0, r1
    b55e:	movs	r3, #0
    b560:	mov	r1, r5
    b562:	mov	r0, r4
    b564:	ldmia.w	sp!, {r4, r5, r6, lr}
    b568:	b.w	ea4c <fcvtbuf>

0000b56c <__errno>:
    b56c:	ldr	r3, [pc, #4]	; (b574 <__errno+0x8>)
    b56e:	ldr	r0, [r3, #0]
    b570:	bx	lr
    b572:	nop
    b574:	.word	0x20000f60

0000b578 <__libc_init_array>:
    b578:	push	{r4, r5, r6, lr}
    b57a:	ldr	r6, [pc, #60]	; (b5b8 <__libc_init_array+0x40>)
    b57c:	ldr	r5, [pc, #60]	; (b5bc <__libc_init_array+0x44>)
    b57e:	subs	r6, r6, r5
    b580:	asrs	r6, r6, #2
    b582:	it	ne
    b584:	movne	r4, #0
    b586:	beq.n	b594 <__libc_init_array+0x1c>
    b588:	adds	r4, #1
    b58a:	ldr.w	r3, [r5], #4
    b58e:	blx	r3
    b590:	cmp	r6, r4
    b592:	bne.n	b588 <__libc_init_array+0x10>
    b594:	ldr	r6, [pc, #40]	; (b5c0 <__libc_init_array+0x48>)
    b596:	ldr	r5, [pc, #44]	; (b5c4 <__libc_init_array+0x4c>)
    b598:	subs	r6, r6, r5
    b59a:	bl	f6b8 <___init_veneer>
    b59e:	asrs	r6, r6, #2
    b5a0:	it	ne
    b5a2:	movne	r4, #0
    b5a4:	beq.n	b5b4 <__libc_init_array+0x3c>
    b5a6:	adds	r4, #1
    b5a8:	ldr.w	r3, [r5], #4
    b5ac:	blx	r3
    b5ae:	cmp	r6, r4
    b5b0:	bne.n	b5a6 <__libc_init_array+0x2e>
    b5b2:	pop	{r4, r5, r6, pc}
    b5b4:	pop	{r4, r5, r6, pc}
    b5b6:	nop
    b5b8:	.word	0x600017e0
    b5bc:	.word	0x600017e0
    b5c0:	.word	0x600017e8
    b5c4:	.word	0x600017e0

0000b5c8 <_malloc_r>:
    b5c8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b5cc:	add.w	r5, r1, #11
    b5d0:	cmp	r5, #22
    b5d2:	sub	sp, #12
    b5d4:	mov	r6, r0
    b5d6:	bls.w	b718 <_malloc_r+0x150>
    b5da:	bics.w	r5, r5, #7
    b5de:	bmi.w	b760 <_malloc_r+0x198>
    b5e2:	cmp	r1, r5
    b5e4:	bhi.w	b760 <_malloc_r+0x198>
    b5e8:	bl	bcc8 <__malloc_lock>
    b5ec:	cmp.w	r5, #504	; 0x1f8
    b5f0:	bcc.w	bb2c <_malloc_r+0x564>
    b5f4:	lsrs	r3, r5, #9
    b5f6:	beq.w	b76e <_malloc_r+0x1a6>
    b5fa:	cmp	r3, #4
    b5fc:	bhi.w	b906 <_malloc_r+0x33e>
    b600:	lsrs	r0, r5, #6
    b602:	add.w	lr, r0, #57	; 0x39
    b606:	mov.w	r3, lr, lsl #1
    b60a:	adds	r0, #56	; 0x38
    b60c:	ldr	r7, [pc, #784]	; (b920 <_malloc_r+0x358>)
    b60e:	add.w	r3, r7, r3, lsl #2
    b612:	sub.w	r1, r3, #8
    b616:	ldr	r4, [r3, #4]
    b618:	cmp	r1, r4
    b61a:	bne.n	b62c <_malloc_r+0x64>
    b61c:	b.n	b778 <_malloc_r+0x1b0>
    b61e:	cmp	r2, #0
    b620:	bge.w	b77c <_malloc_r+0x1b4>
    b624:	ldr	r4, [r4, #12]
    b626:	cmp	r1, r4
    b628:	beq.w	b778 <_malloc_r+0x1b0>
    b62c:	ldr	r3, [r4, #4]
    b62e:	bic.w	r3, r3, #3
    b632:	subs	r2, r3, r5
    b634:	cmp	r2, #15
    b636:	ble.n	b61e <_malloc_r+0x56>
    b638:	ldr	r1, [pc, #740]	; (b920 <_malloc_r+0x358>)
    b63a:	ldr	r4, [r7, #16]
    b63c:	add.w	lr, r1, #8
    b640:	cmp	r4, lr
    b642:	beq.w	b9ac <_malloc_r+0x3e4>
    b646:	ldr	r3, [r4, #4]
    b648:	bic.w	r3, r3, #3
    b64c:	subs	r2, r3, r5
    b64e:	cmp	r2, #15
    b650:	bgt.w	b986 <_malloc_r+0x3be>
    b654:	cmp	r2, #0
    b656:	str.w	lr, [r1, #20]
    b65a:	str.w	lr, [r1, #16]
    b65e:	bge.w	b79e <_malloc_r+0x1d6>
    b662:	cmp.w	r3, #512	; 0x200
    b666:	bcs.w	b938 <_malloc_r+0x370>
    b66a:	lsrs	r3, r3, #3
    b66c:	add.w	ip, r3, #1
    b670:	movs	r2, #1
    b672:	asrs	r3, r3, #2
    b674:	lsl.w	r3, r2, r3
    b678:	ldr	r2, [r1, #4]
    b67a:	ldr.w	r8, [r1, ip, lsl #3]
    b67e:	str.w	r8, [r4, #8]
    b682:	add.w	r9, r1, ip, lsl #3
    b686:	orrs	r2, r3
    b688:	sub.w	r3, r9, #8
    b68c:	str	r3, [r4, #12]
    b68e:	str	r2, [r1, #4]
    b690:	str.w	r4, [r1, ip, lsl #3]
    b694:	str.w	r4, [r8, #12]
    b698:	asrs	r3, r0, #2
    b69a:	movs	r4, #1
    b69c:	lsls	r4, r3
    b69e:	cmp	r4, r2
    b6a0:	bhi.w	b7b8 <_malloc_r+0x1f0>
    b6a4:	tst	r4, r2
    b6a6:	bne.n	b6b6 <_malloc_r+0xee>
    b6a8:	bic.w	r0, r0, #3
    b6ac:	lsls	r4, r4, #1
    b6ae:	tst	r4, r2
    b6b0:	add.w	r0, r0, #4
    b6b4:	beq.n	b6ac <_malloc_r+0xe4>
    b6b6:	add.w	r9, r7, r0, lsl #3
    b6ba:	mov	ip, r9
    b6bc:	mov	r8, r0
    b6be:	ldr.w	r1, [ip, #12]
    b6c2:	cmp	ip, r1
    b6c4:	bne.n	b6d6 <_malloc_r+0x10e>
    b6c6:	b.n	b9b0 <_malloc_r+0x3e8>
    b6c8:	cmp	r2, #0
    b6ca:	bge.w	b9d0 <_malloc_r+0x408>
    b6ce:	ldr	r1, [r1, #12]
    b6d0:	cmp	ip, r1
    b6d2:	beq.w	b9b0 <_malloc_r+0x3e8>
    b6d6:	ldr	r3, [r1, #4]
    b6d8:	bic.w	r3, r3, #3
    b6dc:	subs	r2, r3, r5
    b6de:	cmp	r2, #15
    b6e0:	ble.n	b6c8 <_malloc_r+0x100>
    b6e2:	mov	r4, r1
    b6e4:	ldr.w	ip, [r1, #12]
    b6e8:	ldr.w	r8, [r4, #8]!
    b6ec:	adds	r3, r1, r5
    b6ee:	orr.w	r5, r5, #1
    b6f2:	str	r5, [r1, #4]
    b6f4:	orr.w	r1, r2, #1
    b6f8:	str.w	ip, [r8, #12]
    b6fc:	mov	r0, r6
    b6fe:	str.w	r8, [ip, #8]
    b702:	str	r3, [r7, #20]
    b704:	str	r3, [r7, #16]
    b706:	str.w	lr, [r3, #12]
    b70a:	str.w	lr, [r3, #8]
    b70e:	str	r1, [r3, #4]
    b710:	str	r2, [r3, r2]
    b712:	bl	bccc <__malloc_unlock>
    b716:	b.n	b758 <_malloc_r+0x190>
    b718:	cmp	r1, #16
    b71a:	bhi.n	b760 <_malloc_r+0x198>
    b71c:	bl	bcc8 <__malloc_lock>
    b720:	movs	r5, #16
    b722:	movs	r3, #6
    b724:	movs	r0, #2
    b726:	ldr	r7, [pc, #504]	; (b920 <_malloc_r+0x358>)
    b728:	add.w	r3, r7, r3, lsl #2
    b72c:	sub.w	r2, r3, #8
    b730:	ldr	r4, [r3, #4]
    b732:	cmp	r4, r2
    b734:	beq.w	b9c2 <_malloc_r+0x3fa>
    b738:	ldr	r3, [r4, #4]
    b73a:	ldr	r1, [r4, #12]
    b73c:	ldr	r5, [r4, #8]
    b73e:	bic.w	r3, r3, #3
    b742:	add	r3, r4
    b744:	mov	r0, r6
    b746:	ldr	r2, [r3, #4]
    b748:	str	r1, [r5, #12]
    b74a:	orr.w	r2, r2, #1
    b74e:	str	r5, [r1, #8]
    b750:	str	r2, [r3, #4]
    b752:	bl	bccc <__malloc_unlock>
    b756:	adds	r4, #8
    b758:	mov	r0, r4
    b75a:	add	sp, #12
    b75c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b760:	movs	r4, #0
    b762:	movs	r3, #12
    b764:	mov	r0, r4
    b766:	str	r3, [r6, #0]
    b768:	add	sp, #12
    b76a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b76e:	movs	r3, #128	; 0x80
    b770:	mov.w	lr, #64	; 0x40
    b774:	movs	r0, #63	; 0x3f
    b776:	b.n	b60c <_malloc_r+0x44>
    b778:	mov	r0, lr
    b77a:	b.n	b638 <_malloc_r+0x70>
    b77c:	add	r3, r4
    b77e:	ldr	r1, [r4, #12]
    b780:	ldr	r2, [r3, #4]
    b782:	ldr	r5, [r4, #8]
    b784:	orr.w	r2, r2, #1
    b788:	str	r1, [r5, #12]
    b78a:	mov	r0, r6
    b78c:	str	r5, [r1, #8]
    b78e:	str	r2, [r3, #4]
    b790:	bl	bccc <__malloc_unlock>
    b794:	adds	r4, #8
    b796:	mov	r0, r4
    b798:	add	sp, #12
    b79a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b79e:	add	r3, r4
    b7a0:	mov	r0, r6
    b7a2:	ldr	r2, [r3, #4]
    b7a4:	orr.w	r2, r2, #1
    b7a8:	str	r2, [r3, #4]
    b7aa:	bl	bccc <__malloc_unlock>
    b7ae:	adds	r4, #8
    b7b0:	mov	r0, r4
    b7b2:	add	sp, #12
    b7b4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b7b8:	ldr	r4, [r7, #8]
    b7ba:	ldr	r3, [r4, #4]
    b7bc:	bic.w	r8, r3, #3
    b7c0:	cmp	r8, r5
    b7c2:	bcc.n	b7ce <_malloc_r+0x206>
    b7c4:	rsb	r3, r5, r8
    b7c8:	cmp	r3, #15
    b7ca:	bgt.w	b8e6 <_malloc_r+0x31e>
    b7ce:	ldr	r3, [pc, #340]	; (b924 <_malloc_r+0x35c>)
    b7d0:	ldr.w	r9, [pc, #352]	; b934 <_malloc_r+0x36c>
    b7d4:	ldr	r2, [r3, #0]
    b7d6:	ldr.w	r3, [r9]
    b7da:	adds	r3, #1
    b7dc:	add	r2, r5
    b7de:	add.w	sl, r4, r8
    b7e2:	beq.w	baa6 <_malloc_r+0x4de>
    b7e6:	add.w	r2, r2, #4096	; 0x1000
    b7ea:	adds	r2, #15
    b7ec:	bic.w	r2, r2, #4080	; 0xff0
    b7f0:	bic.w	r2, r2, #15
    b7f4:	mov	r1, r2
    b7f6:	mov	r0, r6
    b7f8:	str	r2, [sp, #4]
    b7fa:	bl	c0b0 <_sbrk_r>
    b7fe:	cmp.w	r0, #4294967295
    b802:	mov	fp, r0
    b804:	ldr	r2, [sp, #4]
    b806:	beq.w	baba <_malloc_r+0x4f2>
    b80a:	cmp	sl, r0
    b80c:	bhi.w	ba08 <_malloc_r+0x440>
    b810:	ldr	r3, [pc, #276]	; (b928 <_malloc_r+0x360>)
    b812:	ldr	r1, [r3, #0]
    b814:	cmp	sl, fp
    b816:	add	r1, r2
    b818:	str	r1, [r3, #0]
    b81a:	beq.w	bac4 <_malloc_r+0x4fc>
    b81e:	ldr.w	r0, [r9]
    b822:	ldr.w	lr, [pc, #272]	; b934 <_malloc_r+0x36c>
    b826:	adds	r0, #1
    b828:	ittet	ne
    b82a:	rsbne	sl, sl, fp
    b82e:	addne	r1, sl
    b830:	streq.w	fp, [lr]
    b834:	strne	r1, [r3, #0]
    b836:	ands.w	r1, fp, #7
    b83a:	beq.w	ba6c <_malloc_r+0x4a4>
    b83e:	rsb	r0, r1, #8
    b842:	rsb	r1, r1, #4096	; 0x1000
    b846:	add	fp, r0
    b848:	adds	r1, #8
    b84a:	add	r2, fp
    b84c:	ubfx	r2, r2, #0, #12
    b850:	rsb	r9, r2, r1
    b854:	mov	r1, r9
    b856:	mov	r0, r6
    b858:	str	r3, [sp, #4]
    b85a:	bl	c0b0 <_sbrk_r>
    b85e:	adds	r3, r0, #1
    b860:	ldr	r3, [sp, #4]
    b862:	beq.w	bae4 <_malloc_r+0x51c>
    b866:	rsb	r2, fp, r0
    b86a:	add	r2, r9
    b86c:	orr.w	r2, r2, #1
    b870:	ldr	r1, [r3, #0]
    b872:	str.w	fp, [r7, #8]
    b876:	add	r1, r9
    b878:	cmp	r4, r7
    b87a:	str.w	r2, [fp, #4]
    b87e:	str	r1, [r3, #0]
    b880:	ldr.w	r9, [pc, #164]	; b928 <_malloc_r+0x360>
    b884:	beq.n	b8b4 <_malloc_r+0x2ec>
    b886:	cmp.w	r8, #15
    b88a:	bls.w	ba88 <_malloc_r+0x4c0>
    b88e:	ldr	r2, [r4, #4]
    b890:	sub.w	r3, r8, #12
    b894:	bic.w	r3, r3, #7
    b898:	adds	r0, r4, r3
    b89a:	and.w	r2, r2, #1
    b89e:	mov.w	lr, #5
    b8a2:	orrs	r2, r3
    b8a4:	cmp	r3, #15
    b8a6:	str	r2, [r4, #4]
    b8a8:	str.w	lr, [r0, #4]
    b8ac:	str.w	lr, [r0, #8]
    b8b0:	bhi.w	baec <_malloc_r+0x524>
    b8b4:	ldr	r3, [pc, #116]	; (b92c <_malloc_r+0x364>)
    b8b6:	ldr	r4, [r7, #8]
    b8b8:	ldr	r2, [r3, #0]
    b8ba:	cmp	r1, r2
    b8bc:	it	hi
    b8be:	strhi	r1, [r3, #0]
    b8c0:	ldr	r3, [pc, #108]	; (b930 <_malloc_r+0x368>)
    b8c2:	ldr	r2, [r3, #0]
    b8c4:	cmp	r1, r2
    b8c6:	ldr	r2, [r4, #4]
    b8c8:	it	hi
    b8ca:	strhi	r1, [r3, #0]
    b8cc:	bic.w	r2, r2, #3
    b8d0:	cmp	r5, r2
    b8d2:	sub.w	r3, r2, r5
    b8d6:	bhi.n	b8dc <_malloc_r+0x314>
    b8d8:	cmp	r3, #15
    b8da:	bgt.n	b8e6 <_malloc_r+0x31e>
    b8dc:	mov	r0, r6
    b8de:	bl	bccc <__malloc_unlock>
    b8e2:	movs	r4, #0
    b8e4:	b.n	b758 <_malloc_r+0x190>
    b8e6:	adds	r2, r4, r5
    b8e8:	orr.w	r3, r3, #1
    b8ec:	orr.w	r5, r5, #1
    b8f0:	str	r5, [r4, #4]
    b8f2:	mov	r0, r6
    b8f4:	str	r2, [r7, #8]
    b8f6:	str	r3, [r2, #4]
    b8f8:	bl	bccc <__malloc_unlock>
    b8fc:	adds	r4, #8
    b8fe:	mov	r0, r4
    b900:	add	sp, #12
    b902:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b906:	cmp	r3, #20
    b908:	bls.n	b9ee <_malloc_r+0x426>
    b90a:	cmp	r3, #84	; 0x54
    b90c:	bhi.w	ba58 <_malloc_r+0x490>
    b910:	lsrs	r0, r5, #12
    b912:	add.w	lr, r0, #111	; 0x6f
    b916:	mov.w	r3, lr, lsl #1
    b91a:	adds	r0, #110	; 0x6e
    b91c:	b.n	b60c <_malloc_r+0x44>
    b91e:	nop
    b920:	.word	0x200010d0
    b924:	.word	0x2000e800
    b928:	.word	0x2000e804
    b92c:	.word	0x2000e7fc
    b930:	.word	0x2000e7f8
    b934:	.word	0x200014dc
    b938:	lsrs	r2, r3, #9
    b93a:	cmp	r2, #4
    b93c:	bls.n	b9fc <_malloc_r+0x434>
    b93e:	cmp	r2, #20
    b940:	bhi.w	baaa <_malloc_r+0x4e2>
    b944:	add.w	r1, r2, #92	; 0x5c
    b948:	lsls	r1, r1, #1
    b94a:	adds	r2, #91	; 0x5b
    b94c:	add.w	ip, r7, r1, lsl #2
    b950:	ldr.w	r1, [r7, r1, lsl #2]
    b954:	ldr.w	r8, [pc, #476]	; bb34 <_malloc_r+0x56c>
    b958:	sub.w	ip, ip, #8
    b95c:	cmp	ip, r1
    b95e:	beq.w	ba72 <_malloc_r+0x4aa>
    b962:	ldr	r2, [r1, #4]
    b964:	bic.w	r2, r2, #3
    b968:	cmp	r3, r2
    b96a:	bcs.n	b972 <_malloc_r+0x3aa>
    b96c:	ldr	r1, [r1, #8]
    b96e:	cmp	ip, r1
    b970:	bne.n	b962 <_malloc_r+0x39a>
    b972:	ldr.w	ip, [r1, #12]
    b976:	ldr	r2, [r7, #4]
    b978:	str.w	ip, [r4, #12]
    b97c:	str	r1, [r4, #8]
    b97e:	str.w	r4, [ip, #8]
    b982:	str	r4, [r1, #12]
    b984:	b.n	b698 <_malloc_r+0xd0>
    b986:	adds	r3, r4, r5
    b988:	orr.w	r7, r2, #1
    b98c:	orr.w	r5, r5, #1
    b990:	str	r5, [r4, #4]
    b992:	mov	r0, r6
    b994:	str	r3, [r1, #20]
    b996:	str	r3, [r1, #16]
    b998:	str.w	lr, [r3, #12]
    b99c:	str.w	lr, [r3, #8]
    b9a0:	str	r7, [r3, #4]
    b9a2:	str	r2, [r3, r2]
    b9a4:	adds	r4, #8
    b9a6:	bl	bccc <__malloc_unlock>
    b9aa:	b.n	b758 <_malloc_r+0x190>
    b9ac:	ldr	r2, [r1, #4]
    b9ae:	b.n	b698 <_malloc_r+0xd0>
    b9b0:	add.w	r8, r8, #1
    b9b4:	tst.w	r8, #3
    b9b8:	add.w	ip, ip, #8
    b9bc:	bne.w	b6be <_malloc_r+0xf6>
    b9c0:	b.n	ba24 <_malloc_r+0x45c>
    b9c2:	ldr	r4, [r3, #12]
    b9c4:	cmp	r3, r4
    b9c6:	it	eq
    b9c8:	addeq	r0, #2
    b9ca:	beq.w	b638 <_malloc_r+0x70>
    b9ce:	b.n	b738 <_malloc_r+0x170>
    b9d0:	add	r3, r1
    b9d2:	mov	r4, r1
    b9d4:	ldr	r2, [r3, #4]
    b9d6:	ldr	r1, [r1, #12]
    b9d8:	ldr.w	r5, [r4, #8]!
    b9dc:	orr.w	r2, r2, #1
    b9e0:	str	r2, [r3, #4]
    b9e2:	mov	r0, r6
    b9e4:	str	r1, [r5, #12]
    b9e6:	str	r5, [r1, #8]
    b9e8:	bl	bccc <__malloc_unlock>
    b9ec:	b.n	b758 <_malloc_r+0x190>
    b9ee:	add.w	lr, r3, #92	; 0x5c
    b9f2:	add.w	r0, r3, #91	; 0x5b
    b9f6:	mov.w	r3, lr, lsl #1
    b9fa:	b.n	b60c <_malloc_r+0x44>
    b9fc:	lsrs	r2, r3, #6
    b9fe:	add.w	r1, r2, #57	; 0x39
    ba02:	lsls	r1, r1, #1
    ba04:	adds	r2, #56	; 0x38
    ba06:	b.n	b94c <_malloc_r+0x384>
    ba08:	cmp	r4, r7
    ba0a:	ldr	r3, [pc, #296]	; (bb34 <_malloc_r+0x56c>)
    ba0c:	beq.w	b810 <_malloc_r+0x248>
    ba10:	ldr	r4, [r3, #8]
    ba12:	ldr	r2, [r4, #4]
    ba14:	bic.w	r2, r2, #3
    ba18:	b.n	b8d0 <_malloc_r+0x308>
    ba1a:	ldr.w	r3, [r9], #-8
    ba1e:	cmp	r9, r3
    ba20:	bne.w	bb28 <_malloc_r+0x560>
    ba24:	tst.w	r0, #3
    ba28:	add.w	r0, r0, #4294967295
    ba2c:	bne.n	ba1a <_malloc_r+0x452>
    ba2e:	ldr	r3, [r7, #4]
    ba30:	bic.w	r3, r3, r4
    ba34:	str	r3, [r7, #4]
    ba36:	lsls	r4, r4, #1
    ba38:	cmp	r4, r3
    ba3a:	bhi.w	b7b8 <_malloc_r+0x1f0>
    ba3e:	cmp	r4, #0
    ba40:	beq.w	b7b8 <_malloc_r+0x1f0>
    ba44:	tst	r4, r3
    ba46:	mov	r0, r8
    ba48:	bne.w	b6b6 <_malloc_r+0xee>
    ba4c:	lsls	r4, r4, #1
    ba4e:	tst	r4, r3
    ba50:	add.w	r0, r0, #4
    ba54:	beq.n	ba4c <_malloc_r+0x484>
    ba56:	b.n	b6b6 <_malloc_r+0xee>
    ba58:	cmp.w	r3, #340	; 0x154
    ba5c:	bhi.n	ba90 <_malloc_r+0x4c8>
    ba5e:	lsrs	r0, r5, #15
    ba60:	add.w	lr, r0, #120	; 0x78
    ba64:	mov.w	r3, lr, lsl #1
    ba68:	adds	r0, #119	; 0x77
    ba6a:	b.n	b60c <_malloc_r+0x44>
    ba6c:	mov.w	r1, #4096	; 0x1000
    ba70:	b.n	b84a <_malloc_r+0x282>
    ba72:	movs	r1, #1
    ba74:	ldr.w	r3, [r8, #4]
    ba78:	asrs	r2, r2, #2
    ba7a:	lsl.w	r2, r1, r2
    ba7e:	orrs	r2, r3
    ba80:	str.w	r2, [r8, #4]
    ba84:	mov	r1, ip
    ba86:	b.n	b978 <_malloc_r+0x3b0>
    ba88:	movs	r3, #1
    ba8a:	str.w	r3, [fp, #4]
    ba8e:	b.n	b8dc <_malloc_r+0x314>
    ba90:	movw	r2, #1364	; 0x554
    ba94:	cmp	r3, r2
    ba96:	bhi.n	bada <_malloc_r+0x512>
    ba98:	lsrs	r0, r5, #18
    ba9a:	add.w	lr, r0, #125	; 0x7d
    ba9e:	mov.w	r3, lr, lsl #1
    baa2:	adds	r0, #124	; 0x7c
    baa4:	b.n	b60c <_malloc_r+0x44>
    baa6:	adds	r2, #16
    baa8:	b.n	b7f4 <_malloc_r+0x22c>
    baaa:	cmp	r2, #84	; 0x54
    baac:	bhi.n	bafc <_malloc_r+0x534>
    baae:	lsrs	r2, r3, #12
    bab0:	add.w	r1, r2, #111	; 0x6f
    bab4:	lsls	r1, r1, #1
    bab6:	adds	r2, #110	; 0x6e
    bab8:	b.n	b94c <_malloc_r+0x384>
    baba:	ldr	r4, [r7, #8]
    babc:	ldr	r2, [r4, #4]
    babe:	bic.w	r2, r2, #3
    bac2:	b.n	b8d0 <_malloc_r+0x308>
    bac4:	ubfx	r0, sl, #0, #12
    bac8:	cmp	r0, #0
    baca:	bne.w	b81e <_malloc_r+0x256>
    bace:	add	r2, r8
    bad0:	ldr	r3, [r7, #8]
    bad2:	orr.w	r2, r2, #1
    bad6:	str	r2, [r3, #4]
    bad8:	b.n	b8b4 <_malloc_r+0x2ec>
    bada:	movs	r3, #254	; 0xfe
    badc:	mov.w	lr, #127	; 0x7f
    bae0:	movs	r0, #126	; 0x7e
    bae2:	b.n	b60c <_malloc_r+0x44>
    bae4:	movs	r2, #1
    bae6:	mov.w	r9, #0
    baea:	b.n	b870 <_malloc_r+0x2a8>
    baec:	add.w	r1, r4, #8
    baf0:	mov	r0, r6
    baf2:	bl	ebe8 <_free_r>
    baf6:	ldr.w	r1, [r9]
    bafa:	b.n	b8b4 <_malloc_r+0x2ec>
    bafc:	cmp.w	r2, #340	; 0x154
    bb00:	bhi.n	bb0e <_malloc_r+0x546>
    bb02:	lsrs	r2, r3, #15
    bb04:	add.w	r1, r2, #120	; 0x78
    bb08:	lsls	r1, r1, #1
    bb0a:	adds	r2, #119	; 0x77
    bb0c:	b.n	b94c <_malloc_r+0x384>
    bb0e:	movw	r1, #1364	; 0x554
    bb12:	cmp	r2, r1
    bb14:	bhi.n	bb22 <_malloc_r+0x55a>
    bb16:	lsrs	r2, r3, #18
    bb18:	add.w	r1, r2, #125	; 0x7d
    bb1c:	lsls	r1, r1, #1
    bb1e:	adds	r2, #124	; 0x7c
    bb20:	b.n	b94c <_malloc_r+0x384>
    bb22:	movs	r1, #254	; 0xfe
    bb24:	movs	r2, #126	; 0x7e
    bb26:	b.n	b94c <_malloc_r+0x384>
    bb28:	ldr	r3, [r7, #4]
    bb2a:	b.n	ba36 <_malloc_r+0x46e>
    bb2c:	lsrs	r0, r5, #3
    bb2e:	adds	r3, r0, #1
    bb30:	lsls	r3, r3, #1
    bb32:	b.n	b726 <_malloc_r+0x15e>
    bb34:	.word	0x200010d0

0000bb38 <__ascii_mbtowc>:
    bb38:	sub	sp, #8
    bb3a:	cbz	r1, bb50 <__ascii_mbtowc+0x18>
    bb3c:	cbz	r2, bb56 <__ascii_mbtowc+0x1e>
    bb3e:	cbz	r3, bb5c <__ascii_mbtowc+0x24>
    bb40:	ldrb	r3, [r2, #0]
    bb42:	str	r3, [r1, #0]
    bb44:	ldrb	r2, [r2, #0]
    bb46:	adds	r0, r2, #0
    bb48:	it	ne
    bb4a:	movne	r0, #1
    bb4c:	add	sp, #8
    bb4e:	bx	lr
    bb50:	add	r1, sp, #4
    bb52:	cmp	r2, #0
    bb54:	bne.n	bb3e <__ascii_mbtowc+0x6>
    bb56:	mov	r0, r2
    bb58:	add	sp, #8
    bb5a:	bx	lr
    bb5c:	mvn.w	r0, #1
    bb60:	b.n	bb4c <__ascii_mbtowc+0x14>
    bb62:	nop

0000bb64 <memmove>:
    bb64:	cmp	r0, r1
    bb66:	push	{r4, r5, r6, r7, lr}
    bb68:	bls.n	bb86 <memmove+0x22>
    bb6a:	adds	r3, r1, r2
    bb6c:	cmp	r0, r3
    bb6e:	bcs.n	bb86 <memmove+0x22>
    bb70:	adds	r1, r0, r2
    bb72:	cmp	r2, #0
    bb74:	beq.n	bc1a <memmove+0xb6>
    bb76:	subs	r2, r3, r2
    bb78:	ldrb.w	r4, [r3, #-1]!
    bb7c:	strb.w	r4, [r1, #-1]!
    bb80:	cmp	r3, r2
    bb82:	bne.n	bb78 <memmove+0x14>
    bb84:	pop	{r4, r5, r6, r7, pc}
    bb86:	cmp	r2, #15
    bb88:	bls.n	bc1c <memmove+0xb8>
    bb8a:	orr.w	r3, r1, r0
    bb8e:	lsls	r3, r3, #30
    bb90:	bne.n	bc20 <memmove+0xbc>
    bb92:	add.w	r4, r0, #16
    bb96:	add.w	r3, r1, #16
    bb9a:	mov	r5, r2
    bb9c:	ldr.w	r6, [r3, #-16]
    bba0:	str.w	r6, [r4, #-16]
    bba4:	ldr.w	r6, [r3, #-12]
    bba8:	str.w	r6, [r4, #-12]
    bbac:	ldr.w	r6, [r3, #-8]
    bbb0:	str.w	r6, [r4, #-8]
    bbb4:	subs	r5, #16
    bbb6:	ldr.w	r6, [r3, #-4]
    bbba:	str.w	r6, [r4, #-4]
    bbbe:	cmp	r5, #15
    bbc0:	add.w	r3, r3, #16
    bbc4:	add.w	r4, r4, #16
    bbc8:	bhi.n	bb9c <memmove+0x38>
    bbca:	sub.w	r3, r2, #16
    bbce:	bic.w	r3, r3, #15
    bbd2:	and.w	lr, r2, #15
    bbd6:	adds	r3, #16
    bbd8:	cmp.w	lr, #3
    bbdc:	add	r1, r3
    bbde:	add	r3, r0
    bbe0:	bls.n	bc26 <memmove+0xc2>
    bbe2:	subs	r6, r3, #4
    bbe4:	mov	r5, r1
    bbe6:	mov	r4, lr
    bbe8:	subs	r4, #4
    bbea:	ldr.w	r7, [r5], #4
    bbee:	str.w	r7, [r6, #4]!
    bbf2:	cmp	r4, #3
    bbf4:	bhi.n	bbe8 <memmove+0x84>
    bbf6:	sub.w	r4, lr, #4
    bbfa:	bic.w	r4, r4, #3
    bbfe:	adds	r4, #4
    bc00:	add	r3, r4
    bc02:	add	r1, r4
    bc04:	and.w	r2, r2, #3
    bc08:	cbz	r2, bc24 <memmove+0xc0>
    bc0a:	subs	r3, #1
    bc0c:	add	r2, r1
    bc0e:	ldrb.w	r4, [r1], #1
    bc12:	strb.w	r4, [r3, #1]!
    bc16:	cmp	r2, r1
    bc18:	bne.n	bc0e <memmove+0xaa>
    bc1a:	pop	{r4, r5, r6, r7, pc}
    bc1c:	mov	r3, r0
    bc1e:	b.n	bc08 <memmove+0xa4>
    bc20:	mov	r3, r0
    bc22:	b.n	bc0a <memmove+0xa6>
    bc24:	pop	{r4, r5, r6, r7, pc}
    bc26:	mov	r2, lr
    bc28:	b.n	bc08 <memmove+0xa4>
    bc2a:	nop

0000bc2c <memset>:
    bc2c:	push	{r4, r5, r6}
    bc2e:	lsls	r4, r0, #30
    bc30:	beq.n	bcc0 <memset+0x94>
    bc32:	subs	r4, r2, #1
    bc34:	cmp	r2, #0
    bc36:	beq.n	bcbc <memset+0x90>
    bc38:	uxtb	r5, r1
    bc3a:	mov	r3, r0
    bc3c:	b.n	bc44 <memset+0x18>
    bc3e:	subs	r2, r4, #1
    bc40:	cbz	r4, bcbc <memset+0x90>
    bc42:	mov	r4, r2
    bc44:	strb.w	r5, [r3], #1
    bc48:	lsls	r2, r3, #30
    bc4a:	bne.n	bc3e <memset+0x12>
    bc4c:	cmp	r4, #3
    bc4e:	bls.n	bcae <memset+0x82>
    bc50:	uxtb	r5, r1
    bc52:	orr.w	r5, r5, r5, lsl #8
    bc56:	cmp	r4, #15
    bc58:	orr.w	r5, r5, r5, lsl #16
    bc5c:	bls.n	bc92 <memset+0x66>
    bc5e:	add.w	r2, r3, #16
    bc62:	mov	r6, r4
    bc64:	subs	r6, #16
    bc66:	cmp	r6, #15
    bc68:	str.w	r5, [r2, #-16]
    bc6c:	str.w	r5, [r2, #-12]
    bc70:	str.w	r5, [r2, #-8]
    bc74:	str.w	r5, [r2, #-4]
    bc78:	add.w	r2, r2, #16
    bc7c:	bhi.n	bc64 <memset+0x38>
    bc7e:	sub.w	r2, r4, #16
    bc82:	bic.w	r2, r2, #15
    bc86:	and.w	r4, r4, #15
    bc8a:	adds	r2, #16
    bc8c:	cmp	r4, #3
    bc8e:	add	r3, r2
    bc90:	bls.n	bcae <memset+0x82>
    bc92:	mov	r6, r3
    bc94:	mov	r2, r4
    bc96:	subs	r2, #4
    bc98:	cmp	r2, #3
    bc9a:	str.w	r5, [r6], #4
    bc9e:	bhi.n	bc96 <memset+0x6a>
    bca0:	subs	r2, r4, #4
    bca2:	bic.w	r2, r2, #3
    bca6:	adds	r2, #4
    bca8:	add	r3, r2
    bcaa:	and.w	r4, r4, #3
    bcae:	cbz	r4, bcbc <memset+0x90>
    bcb0:	uxtb	r1, r1
    bcb2:	add	r4, r3
    bcb4:	strb.w	r1, [r3], #1
    bcb8:	cmp	r3, r4
    bcba:	bne.n	bcb4 <memset+0x88>
    bcbc:	pop	{r4, r5, r6}
    bcbe:	bx	lr
    bcc0:	mov	r4, r2
    bcc2:	mov	r3, r0
    bcc4:	b.n	bc4c <memset+0x20>
    bcc6:	nop

0000bcc8 <__malloc_lock>:
    bcc8:	bx	lr
    bcca:	nop

0000bccc <__malloc_unlock>:
    bccc:	bx	lr
    bcce:	nop

0000bcd0 <_realloc_r>:
    bcd0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bcd4:	mov	r7, r2
    bcd6:	sub	sp, #12
    bcd8:	cmp	r1, #0
    bcda:	beq.w	be60 <_realloc_r+0x190>
    bcde:	mov	r6, r1
    bce0:	mov	r9, r0
    bce2:	add.w	r5, r7, #11
    bce6:	bl	bcc8 <__malloc_lock>
    bcea:	ldr.w	lr, [r6, #-4]
    bcee:	cmp	r5, #22
    bcf0:	bic.w	r4, lr, #3
    bcf4:	sub.w	r8, r6, #8
    bcf8:	bhi.n	bd7c <_realloc_r+0xac>
    bcfa:	movs	r2, #16
    bcfc:	mov	r5, r2
    bcfe:	cmp	r7, r5
    bd00:	bhi.n	bd86 <_realloc_r+0xb6>
    bd02:	cmp	r4, r2
    bd04:	bge.n	bdf2 <_realloc_r+0x122>
    bd06:	ldr	r3, [pc, #804]	; (c02c <_realloc_r+0x35c>)
    bd08:	ldr	r1, [r3, #8]
    bd0a:	add.w	r0, r8, r4
    bd0e:	cmp	r0, r1
    bd10:	ldr	r1, [r0, #4]
    bd12:	beq.w	bec8 <_realloc_r+0x1f8>
    bd16:	bic.w	r3, r1, #1
    bd1a:	add	r3, r0
    bd1c:	ldr	r3, [r3, #4]
    bd1e:	lsls	r3, r3, #31
    bd20:	bpl.n	be1e <_realloc_r+0x14e>
    bd22:	tst.w	lr, #1
    bd26:	beq.n	bd94 <_realloc_r+0xc4>
    bd28:	mov	r1, r7
    bd2a:	mov	r0, r9
    bd2c:	bl	b5c8 <_malloc_r>
    bd30:	mov	r7, r0
    bd32:	cbz	r0, bd6e <_realloc_r+0x9e>
    bd34:	ldr.w	r3, [r6, #-4]
    bd38:	bic.w	r3, r3, #1
    bd3c:	add	r3, r8
    bd3e:	sub.w	r2, r0, #8
    bd42:	cmp	r2, r3
    bd44:	beq.w	bfd0 <_realloc_r+0x300>
    bd48:	subs	r2, r4, #4
    bd4a:	cmp	r2, #36	; 0x24
    bd4c:	bhi.w	bfb2 <_realloc_r+0x2e2>
    bd50:	cmp	r2, #19
    bd52:	bhi.w	bf5e <_realloc_r+0x28e>
    bd56:	mov	r3, r0
    bd58:	mov	r2, r6
    bd5a:	ldr	r1, [r2, #0]
    bd5c:	str	r1, [r3, #0]
    bd5e:	ldr	r1, [r2, #4]
    bd60:	str	r1, [r3, #4]
    bd62:	ldr	r2, [r2, #8]
    bd64:	str	r2, [r3, #8]
    bd66:	mov	r1, r6
    bd68:	mov	r0, r9
    bd6a:	bl	ebe8 <_free_r>
    bd6e:	mov	r0, r9
    bd70:	bl	bccc <__malloc_unlock>
    bd74:	mov	r0, r7
    bd76:	add	sp, #12
    bd78:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bd7c:	bic.w	r5, r5, #7
    bd80:	cmp	r5, #0
    bd82:	mov	r2, r5
    bd84:	bge.n	bcfe <_realloc_r+0x2e>
    bd86:	movs	r3, #12
    bd88:	movs	r0, #0
    bd8a:	str.w	r3, [r9]
    bd8e:	add	sp, #12
    bd90:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bd94:	ldr.w	r3, [r6, #-8]
    bd98:	rsb	sl, r3, r8
    bd9c:	ldr.w	r3, [sl, #4]
    bda0:	bic.w	ip, r3, #3
    bda4:	add.w	r3, r4, ip
    bda8:	cmp	r3, r2
    bdaa:	blt.n	bd28 <_realloc_r+0x58>
    bdac:	mov	r7, sl
    bdae:	ldr.w	r1, [sl, #12]
    bdb2:	ldr.w	r0, [r7, #8]!
    bdb6:	subs	r2, r4, #4
    bdb8:	cmp	r2, #36	; 0x24
    bdba:	str	r1, [r0, #12]
    bdbc:	str	r0, [r1, #8]
    bdbe:	bhi.w	bff0 <_realloc_r+0x320>
    bdc2:	cmp	r2, #19
    bdc4:	bls.w	bfec <_realloc_r+0x31c>
    bdc8:	ldr	r1, [r6, #0]
    bdca:	str.w	r1, [sl, #8]
    bdce:	ldr	r1, [r6, #4]
    bdd0:	str.w	r1, [sl, #12]
    bdd4:	cmp	r2, #27
    bdd6:	bhi.w	c030 <_realloc_r+0x360>
    bdda:	adds	r6, #8
    bddc:	add.w	r2, sl, #16
    bde0:	ldr	r1, [r6, #0]
    bde2:	str	r1, [r2, #0]
    bde4:	ldr	r1, [r6, #4]
    bde6:	str	r1, [r2, #4]
    bde8:	ldr	r1, [r6, #8]
    bdea:	str	r1, [r2, #8]
    bdec:	mov	r6, r7
    bdee:	mov	r4, r3
    bdf0:	mov	r8, sl
    bdf2:	subs	r3, r4, r5
    bdf4:	cmp	r3, #15
    bdf6:	bhi.n	be34 <_realloc_r+0x164>
    bdf8:	ldr.w	r3, [r8, #4]
    bdfc:	and.w	r3, r3, #1
    be00:	orrs	r3, r4
    be02:	add	r4, r8
    be04:	str.w	r3, [r8, #4]
    be08:	ldr	r3, [r4, #4]
    be0a:	orr.w	r3, r3, #1
    be0e:	str	r3, [r4, #4]
    be10:	mov	r0, r9
    be12:	bl	bccc <__malloc_unlock>
    be16:	mov	r0, r6
    be18:	add	sp, #12
    be1a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    be1e:	bic.w	r1, r1, #3
    be22:	add	r1, r4
    be24:	cmp	r1, r2
    be26:	blt.n	be6c <_realloc_r+0x19c>
    be28:	ldr	r3, [r0, #12]
    be2a:	ldr	r2, [r0, #8]
    be2c:	mov	r4, r1
    be2e:	str	r3, [r2, #12]
    be30:	str	r2, [r3, #8]
    be32:	b.n	bdf2 <_realloc_r+0x122>
    be34:	ldr.w	r2, [r8, #4]
    be38:	add.w	r1, r8, r5
    be3c:	and.w	r2, r2, #1
    be40:	orrs	r5, r2
    be42:	orr.w	r2, r3, #1
    be46:	add	r3, r1
    be48:	str.w	r5, [r8, #4]
    be4c:	str	r2, [r1, #4]
    be4e:	ldr	r2, [r3, #4]
    be50:	orr.w	r2, r2, #1
    be54:	adds	r1, #8
    be56:	str	r2, [r3, #4]
    be58:	mov	r0, r9
    be5a:	bl	ebe8 <_free_r>
    be5e:	b.n	be10 <_realloc_r+0x140>
    be60:	mov	r1, r2
    be62:	add	sp, #12
    be64:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    be68:	b.w	b5c8 <_malloc_r>
    be6c:	tst.w	lr, #1
    be70:	bne.w	bd28 <_realloc_r+0x58>
    be74:	ldr.w	r3, [r6, #-8]
    be78:	rsb	sl, r3, r8
    be7c:	ldr.w	r3, [sl, #4]
    be80:	bic.w	ip, r3, #3
    be84:	add.w	lr, r1, ip
    be88:	cmp	lr, r2
    be8a:	blt.n	bda4 <_realloc_r+0xd4>
    be8c:	ldr	r3, [r0, #12]
    be8e:	ldr	r2, [r0, #8]
    be90:	mov	r7, sl
    be92:	str	r3, [r2, #12]
    be94:	str	r2, [r3, #8]
    be96:	ldr.w	r1, [r7, #8]!
    be9a:	ldr.w	r3, [sl, #12]
    be9e:	str	r3, [r1, #12]
    bea0:	subs	r2, r4, #4
    bea2:	cmp	r2, #36	; 0x24
    bea4:	str	r1, [r3, #8]
    bea6:	bhi.w	bfdc <_realloc_r+0x30c>
    beaa:	cmp	r2, #19
    beac:	bls.n	bf74 <_realloc_r+0x2a4>
    beae:	ldr	r3, [r6, #0]
    beb0:	str.w	r3, [sl, #8]
    beb4:	ldr	r3, [r6, #4]
    beb6:	str.w	r3, [sl, #12]
    beba:	cmp	r2, #27
    bebc:	bhi.w	c000 <_realloc_r+0x330>
    bec0:	adds	r6, #8
    bec2:	add.w	r3, sl, #16
    bec6:	b.n	bf76 <_realloc_r+0x2a6>
    bec8:	bic.w	fp, r1, #3
    becc:	add	fp, r4
    bece:	add.w	r0, r5, #16
    bed2:	cmp	fp, r0
    bed4:	bge.n	bf8a <_realloc_r+0x2ba>
    bed6:	tst.w	lr, #1
    beda:	bne.w	bd28 <_realloc_r+0x58>
    bede:	ldr.w	r1, [r6, #-8]
    bee2:	rsb	sl, r1, r8
    bee6:	ldr.w	r1, [sl, #4]
    beea:	bic.w	ip, r1, #3
    beee:	add	fp, ip
    bef0:	cmp	r0, fp
    bef2:	bgt.w	bda4 <_realloc_r+0xd4>
    bef6:	mov	r7, sl
    bef8:	ldr.w	r1, [sl, #12]
    befc:	ldr.w	r0, [r7, #8]!
    bf00:	subs	r2, r4, #4
    bf02:	cmp	r2, #36	; 0x24
    bf04:	str	r1, [r0, #12]
    bf06:	str	r0, [r1, #8]
    bf08:	bhi.w	c074 <_realloc_r+0x3a4>
    bf0c:	cmp	r2, #19
    bf0e:	bls.w	c05c <_realloc_r+0x38c>
    bf12:	ldr	r1, [r6, #0]
    bf14:	str.w	r1, [sl, #8]
    bf18:	ldr	r1, [r6, #4]
    bf1a:	str.w	r1, [sl, #12]
    bf1e:	cmp	r2, #27
    bf20:	bhi.w	c082 <_realloc_r+0x3b2>
    bf24:	adds	r6, #8
    bf26:	add.w	r2, sl, #16
    bf2a:	ldr	r1, [r6, #0]
    bf2c:	str	r1, [r2, #0]
    bf2e:	ldr	r1, [r6, #4]
    bf30:	str	r1, [r2, #4]
    bf32:	ldr	r1, [r6, #8]
    bf34:	str	r1, [r2, #8]
    bf36:	add.w	r1, sl, r5
    bf3a:	rsb	r2, r5, fp
    bf3e:	orr.w	r2, r2, #1
    bf42:	str	r1, [r3, #8]
    bf44:	str	r2, [r1, #4]
    bf46:	ldr.w	r3, [sl, #4]
    bf4a:	and.w	r3, r3, #1
    bf4e:	orrs	r5, r3
    bf50:	mov	r0, r9
    bf52:	str.w	r5, [sl, #4]
    bf56:	bl	bccc <__malloc_unlock>
    bf5a:	mov	r0, r7
    bf5c:	b.n	be18 <_realloc_r+0x148>
    bf5e:	ldr	r3, [r6, #0]
    bf60:	str	r3, [r0, #0]
    bf62:	ldr	r3, [r6, #4]
    bf64:	str	r3, [r0, #4]
    bf66:	cmp	r2, #27
    bf68:	bhi.n	bfba <_realloc_r+0x2ea>
    bf6a:	add.w	r3, r0, #8
    bf6e:	add.w	r2, r6, #8
    bf72:	b.n	bd5a <_realloc_r+0x8a>
    bf74:	mov	r3, r7
    bf76:	ldr	r2, [r6, #0]
    bf78:	str	r2, [r3, #0]
    bf7a:	ldr	r2, [r6, #4]
    bf7c:	str	r2, [r3, #4]
    bf7e:	ldr	r2, [r6, #8]
    bf80:	str	r2, [r3, #8]
    bf82:	mov	r6, r7
    bf84:	mov	r4, lr
    bf86:	mov	r8, sl
    bf88:	b.n	bdf2 <_realloc_r+0x122>
    bf8a:	add.w	r1, r8, r5
    bf8e:	rsb	fp, r5, fp
    bf92:	orr.w	r2, fp, #1
    bf96:	str	r1, [r3, #8]
    bf98:	str	r2, [r1, #4]
    bf9a:	ldr.w	r3, [r6, #-4]
    bf9e:	and.w	r3, r3, #1
    bfa2:	orrs	r5, r3
    bfa4:	mov	r0, r9
    bfa6:	str.w	r5, [r6, #-4]
    bfaa:	bl	bccc <__malloc_unlock>
    bfae:	mov	r0, r6
    bfb0:	b.n	be18 <_realloc_r+0x148>
    bfb2:	mov	r1, r6
    bfb4:	bl	bb64 <memmove>
    bfb8:	b.n	bd66 <_realloc_r+0x96>
    bfba:	ldr	r3, [r6, #8]
    bfbc:	str	r3, [r0, #8]
    bfbe:	ldr	r3, [r6, #12]
    bfc0:	str	r3, [r0, #12]
    bfc2:	cmp	r2, #36	; 0x24
    bfc4:	beq.n	c018 <_realloc_r+0x348>
    bfc6:	add.w	r3, r0, #16
    bfca:	add.w	r2, r6, #16
    bfce:	b.n	bd5a <_realloc_r+0x8a>
    bfd0:	ldr.w	r3, [r0, #-4]
    bfd4:	bic.w	r3, r3, #3
    bfd8:	add	r4, r3
    bfda:	b.n	bdf2 <_realloc_r+0x122>
    bfdc:	mov	r1, r6
    bfde:	mov	r0, r7
    bfe0:	mov	r4, lr
    bfe2:	mov	r8, sl
    bfe4:	bl	bb64 <memmove>
    bfe8:	mov	r6, r7
    bfea:	b.n	bdf2 <_realloc_r+0x122>
    bfec:	mov	r2, r7
    bfee:	b.n	bde0 <_realloc_r+0x110>
    bff0:	mov	r1, r6
    bff2:	mov	r0, r7
    bff4:	mov	r4, r3
    bff6:	mov	r8, sl
    bff8:	bl	bb64 <memmove>
    bffc:	mov	r6, r7
    bffe:	b.n	bdf2 <_realloc_r+0x122>
    c000:	ldr	r3, [r6, #8]
    c002:	str.w	r3, [sl, #16]
    c006:	ldr	r3, [r6, #12]
    c008:	str.w	r3, [sl, #20]
    c00c:	cmp	r2, #36	; 0x24
    c00e:	beq.n	c048 <_realloc_r+0x378>
    c010:	adds	r6, #16
    c012:	add.w	r3, sl, #24
    c016:	b.n	bf76 <_realloc_r+0x2a6>
    c018:	ldr	r3, [r6, #16]
    c01a:	str	r3, [r0, #16]
    c01c:	ldr	r3, [r6, #20]
    c01e:	str	r3, [r0, #20]
    c020:	add.w	r2, r6, #24
    c024:	add.w	r3, r0, #24
    c028:	b.n	bd5a <_realloc_r+0x8a>
    c02a:	nop
    c02c:	.word	0x200010d0
    c030:	ldr	r1, [r6, #8]
    c032:	str.w	r1, [sl, #16]
    c036:	ldr	r1, [r6, #12]
    c038:	str.w	r1, [sl, #20]
    c03c:	cmp	r2, #36	; 0x24
    c03e:	beq.n	c060 <_realloc_r+0x390>
    c040:	adds	r6, #16
    c042:	add.w	r2, sl, #24
    c046:	b.n	bde0 <_realloc_r+0x110>
    c048:	ldr	r3, [r6, #16]
    c04a:	str.w	r3, [sl, #24]
    c04e:	ldr	r3, [r6, #20]
    c050:	str.w	r3, [sl, #28]
    c054:	adds	r6, #24
    c056:	add.w	r3, sl, #32
    c05a:	b.n	bf76 <_realloc_r+0x2a6>
    c05c:	mov	r2, r7
    c05e:	b.n	bf2a <_realloc_r+0x25a>
    c060:	ldr	r2, [r6, #16]
    c062:	str.w	r2, [sl, #24]
    c066:	ldr	r2, [r6, #20]
    c068:	str.w	r2, [sl, #28]
    c06c:	adds	r6, #24
    c06e:	add.w	r2, sl, #32
    c072:	b.n	bde0 <_realloc_r+0x110>
    c074:	mov	r1, r6
    c076:	mov	r0, r7
    c078:	str	r3, [sp, #4]
    c07a:	bl	bb64 <memmove>
    c07e:	ldr	r3, [sp, #4]
    c080:	b.n	bf36 <_realloc_r+0x266>
    c082:	ldr	r1, [r6, #8]
    c084:	str.w	r1, [sl, #16]
    c088:	ldr	r1, [r6, #12]
    c08a:	str.w	r1, [sl, #20]
    c08e:	cmp	r2, #36	; 0x24
    c090:	beq.n	c09a <_realloc_r+0x3ca>
    c092:	adds	r6, #16
    c094:	add.w	r2, sl, #24
    c098:	b.n	bf2a <_realloc_r+0x25a>
    c09a:	ldr	r2, [r6, #16]
    c09c:	str.w	r2, [sl, #24]
    c0a0:	ldr	r2, [r6, #20]
    c0a2:	str.w	r2, [sl, #28]
    c0a6:	adds	r6, #24
    c0a8:	add.w	r2, sl, #32
    c0ac:	b.n	bf2a <_realloc_r+0x25a>
    c0ae:	nop

0000c0b0 <_sbrk_r>:
    c0b0:	push	{r3, r4, r5, lr}
    c0b2:	ldr	r4, [pc, #28]	; (c0d0 <_sbrk_r+0x20>)
    c0b4:	movs	r3, #0
    c0b6:	mov	r5, r0
    c0b8:	mov	r0, r1
    c0ba:	str	r3, [r4, #0]
    c0bc:	bl	98e0 <_sbrk>
    c0c0:	adds	r3, r0, #1
    c0c2:	beq.n	c0c6 <_sbrk_r+0x16>
    c0c4:	pop	{r3, r4, r5, pc}
    c0c6:	ldr	r3, [r4, #0]
    c0c8:	cmp	r3, #0
    c0ca:	beq.n	c0c4 <_sbrk_r+0x14>
    c0cc:	str	r3, [r5, #0]
    c0ce:	pop	{r3, r4, r5, pc}
    c0d0:	.word	0x200106c0

0000c0d4 <sprintf>:
    c0d4:	push	{r1, r2, r3}
    c0d6:	push	{r4, r5, r6, r7, lr}
    c0d8:	sub	sp, #112	; 0x70
    c0da:	add	r3, sp, #132	; 0x84
    c0dc:	ldr	r1, [pc, #60]	; (c11c <sprintf+0x48>)
    c0de:	ldr.w	r2, [r3], #4
    c0e2:	str	r3, [sp, #4]
    c0e4:	mov	r5, r0
    c0e6:	mvn.w	r4, #2147483648	; 0x80000000
    c0ea:	ldr	r0, [r1, #0]
    c0ec:	str	r5, [sp, #8]
    c0ee:	mov.w	r7, #520	; 0x208
    c0f2:	movw	r6, #65535	; 0xffff
    c0f6:	add	r1, sp, #8
    c0f8:	str	r5, [sp, #24]
    c0fa:	strh.w	r7, [sp, #20]
    c0fe:	str	r4, [sp, #16]
    c100:	str	r4, [sp, #28]
    c102:	strh.w	r6, [sp, #22]
    c106:	bl	c360 <_svfprintf_r>
    c10a:	ldr	r3, [sp, #8]
    c10c:	movs	r2, #0
    c10e:	strb	r2, [r3, #0]
    c110:	add	sp, #112	; 0x70
    c112:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    c116:	add	sp, #12
    c118:	bx	lr
    c11a:	nop
    c11c:	.word	0x20000f60

0000c120 <strcpy>:
    c120:	eor.w	r2, r0, r1
    c124:	mov	ip, r0
    c126:	tst.w	r2, #3
    c12a:	bne.n	c1cc <strcpy+0xac>
    c12c:	tst.w	r1, #3
    c130:	bne.n	c198 <strcpy+0x78>
    c132:	str.w	r4, [sp, #-4]!
    c136:	tst.w	r1, #4
    c13a:	ldr.w	r3, [r1], #4
    c13e:	beq.n	c158 <strcpy+0x38>
    c140:	sub.w	r2, r3, #16843009	; 0x1010101
    c144:	bics	r2, r3
    c146:	tst.w	r2, #2155905152	; 0x80808080
    c14a:	itt	eq
    c14c:	streq.w	r3, [ip], #4
    c150:	ldreq.w	r3, [r1], #4
    c154:	bne.n	c184 <strcpy+0x64>
    c156:	nop
    c158:	ldr.w	r4, [r1], #4
    c15c:	sub.w	r2, r3, #16843009	; 0x1010101
    c160:	bics	r2, r3
    c162:	tst.w	r2, #2155905152	; 0x80808080
    c166:	sub.w	r2, r4, #16843009	; 0x1010101
    c16a:	bne.n	c184 <strcpy+0x64>
    c16c:	str.w	r3, [ip], #4
    c170:	bics	r2, r4
    c172:	tst.w	r2, #2155905152	; 0x80808080
    c176:	itt	eq
    c178:	ldreq.w	r3, [r1], #4
    c17c:	streq.w	r4, [ip], #4
    c180:	beq.n	c158 <strcpy+0x38>
    c182:	mov	r3, r4
    c184:	strb.w	r3, [ip], #1
    c188:	tst.w	r3, #255	; 0xff
    c18c:	mov.w	r3, r3, ror #8
    c190:	bne.n	c184 <strcpy+0x64>
    c192:	ldr.w	r4, [sp], #4
    c196:	bx	lr
    c198:	tst.w	r1, #1
    c19c:	beq.n	c1ac <strcpy+0x8c>
    c19e:	ldrb.w	r2, [r1], #1
    c1a2:	strb.w	r2, [ip], #1
    c1a6:	cmp	r2, #0
    c1a8:	it	eq
    c1aa:	bxeq	lr
    c1ac:	tst.w	r1, #2
    c1b0:	beq.n	c132 <strcpy+0x12>
    c1b2:	ldrh.w	r2, [r1], #2
    c1b6:	tst.w	r2, #255	; 0xff
    c1ba:	itet	ne
    c1bc:	strhne.w	r2, [ip], #2
    c1c0:	strbeq.w	r2, [ip]
    c1c4:	tstne.w	r2, #65280	; 0xff00
    c1c8:	bne.n	c132 <strcpy+0x12>
    c1ca:	bx	lr
    c1cc:	ldrb.w	r2, [r1], #1
    c1d0:	strb.w	r2, [ip], #1
    c1d4:	cmp	r2, #0
    c1d6:	bne.n	c1cc <strcpy+0xac>
    c1d8:	bx	lr
    c1da:	nop

0000c1dc <strlcat>:
    c1dc:	push	{r4, r5, r6, lr}
    c1de:	cbz	r2, c21e <strlcat+0x42>
    c1e0:	ldrb	r6, [r0, #0]
    c1e2:	cbz	r6, c22a <strlcat+0x4e>
    c1e4:	adds	r3, r0, #1
    c1e6:	adds	r6, r0, r2
    c1e8:	b.n	c1f0 <strlcat+0x14>
    c1ea:	ldrb	r5, [r3, #0]
    c1ec:	adds	r3, #1
    c1ee:	cbz	r5, c1f6 <strlcat+0x1a>
    c1f0:	cmp	r6, r3
    c1f2:	mov	r4, r3
    c1f4:	bne.n	c1ea <strlcat+0xe>
    c1f6:	subs	r6, r4, r0
    c1f8:	subs	r2, r2, r6
    c1fa:	beq.n	c220 <strlcat+0x44>
    c1fc:	ldrb	r3, [r1, #0]
    c1fe:	mov	r5, r1
    c200:	cbz	r3, c216 <strlcat+0x3a>
    c202:	cmp	r2, #1
    c204:	beq.n	c20c <strlcat+0x30>
    c206:	strb	r3, [r4, #0]
    c208:	subs	r2, #1
    c20a:	adds	r4, #1
    c20c:	ldrb.w	r3, [r5, #1]!
    c210:	cmp	r3, #0
    c212:	bne.n	c202 <strlcat+0x26>
    c214:	subs	r3, r5, r1
    c216:	movs	r2, #0
    c218:	strb	r2, [r4, #0]
    c21a:	adds	r0, r6, r3
    c21c:	pop	{r4, r5, r6, pc}
    c21e:	mov	r6, r2
    c220:	mov	r0, r1
    c222:	bl	c280 <strlen>
    c226:	add	r0, r6
    c228:	pop	{r4, r5, r6, pc}
    c22a:	mov	r4, r0
    c22c:	b.n	c1fc <strlcat+0x20>
    c22e:	nop

0000c230 <strlcpy>:
    c230:	push	{r4}
    c232:	mov	r3, r1
    c234:	cbz	r2, c24a <strlcpy+0x1a>
    c236:	b.n	c242 <strlcpy+0x12>
    c238:	ldrb.w	r4, [r3], #1
    c23c:	strb.w	r4, [r0], #1
    c240:	cbz	r4, c252 <strlcpy+0x22>
    c242:	subs	r2, #1
    c244:	bne.n	c238 <strlcpy+0x8>
    c246:	movs	r2, #0
    c248:	strb	r2, [r0, #0]
    c24a:	ldrb.w	r2, [r3], #1
    c24e:	cmp	r2, #0
    c250:	bne.n	c24a <strlcpy+0x1a>
    c252:	subs	r0, r3, r1
    c254:	subs	r0, #1
    c256:	ldr.w	r4, [sp], #4
    c25a:	bx	lr
	...

0000c280 <strlen>:
    c280:	pld	[r0]
    c284:	strd	r4, r5, [sp, #-8]!
    c288:	bic.w	r1, r0, #7
    c28c:	mvn.w	ip, #0
    c290:	ands.w	r4, r0, #7
    c294:	pld	[r1, #32]
    c298:	bne.w	c32e <strlen+0xae>
    c29c:	mov.w	r4, #0
    c2a0:	mvn.w	r0, #7
    c2a4:	ldrd	r2, r3, [r1]
    c2a8:	pld	[r1, #64]	; 0x40
    c2ac:	add.w	r0, r0, #8
    c2b0:	uadd8	r2, r2, ip
    c2b4:	sel	r2, r4, ip
    c2b8:	uadd8	r3, r3, ip
    c2bc:	sel	r3, r2, ip
    c2c0:	cbnz	r3, c316 <strlen+0x96>
    c2c2:	ldrd	r2, r3, [r1, #8]
    c2c6:	uadd8	r2, r2, ip
    c2ca:	add.w	r0, r0, #8
    c2ce:	sel	r2, r4, ip
    c2d2:	uadd8	r3, r3, ip
    c2d6:	sel	r3, r2, ip
    c2da:	cbnz	r3, c316 <strlen+0x96>
    c2dc:	ldrd	r2, r3, [r1, #16]
    c2e0:	uadd8	r2, r2, ip
    c2e4:	add.w	r0, r0, #8
    c2e8:	sel	r2, r4, ip
    c2ec:	uadd8	r3, r3, ip
    c2f0:	sel	r3, r2, ip
    c2f4:	cbnz	r3, c316 <strlen+0x96>
    c2f6:	ldrd	r2, r3, [r1, #24]
    c2fa:	add.w	r1, r1, #32
    c2fe:	uadd8	r2, r2, ip
    c302:	add.w	r0, r0, #8
    c306:	sel	r2, r4, ip
    c30a:	uadd8	r3, r3, ip
    c30e:	sel	r3, r2, ip
    c312:	cmp	r3, #0
    c314:	beq.n	c2a4 <strlen+0x24>
    c316:	cmp	r2, #0
    c318:	itt	eq
    c31a:	addeq	r0, #4
    c31c:	moveq	r2, r3
    c31e:	rev	r2, r2
    c320:	clz	r2, r2
    c324:	ldrd	r4, r5, [sp], #8
    c328:	add.w	r0, r0, r2, lsr #3
    c32c:	bx	lr
    c32e:	ldrd	r2, r3, [r1]
    c332:	and.w	r5, r4, #3
    c336:	rsb	r0, r4, #0
    c33a:	mov.w	r5, r5, lsl #3
    c33e:	tst.w	r4, #4
    c342:	pld	[r1, #64]	; 0x40
    c346:	lsl.w	r5, ip, r5
    c34a:	orn	r2, r2, r5
    c34e:	itt	ne
    c350:	ornne	r3, r3, r5
    c354:	movne	r2, ip
    c356:	mov.w	r4, #0
    c35a:	b.n	c2b0 <strlen+0x30>
    c35c:	movs	r0, r0
	...

0000c360 <_svfprintf_r>:
    c360:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c364:	sub	sp, #260	; 0x104
    c366:	mov	r4, r1
    c368:	str	r1, [sp, #20]
    c36a:	mov	r5, r2
    c36c:	str	r3, [sp, #40]	; 0x28
    c36e:	str	r0, [sp, #24]
    c370:	bl	edb8 <_localeconv_r>
    c374:	ldr	r3, [r0, #0]
    c376:	str	r3, [sp, #76]	; 0x4c
    c378:	mov	r0, r3
    c37a:	bl	c280 <strlen>
    c37e:	ldrh	r3, [r4, #12]
    c380:	str	r0, [sp, #72]	; 0x48
    c382:	lsls	r6, r3, #24
    c384:	bpl.n	c38e <_svfprintf_r+0x2e>
    c386:	ldr	r3, [r4, #16]
    c388:	cmp	r3, #0
    c38a:	beq.w	d5f0 <_svfprintf_r+0x1290>
    c38e:	vldr	d7, [pc, #664]	; c628 <_svfprintf_r+0x2c8>
    c392:	movs	r3, #0
    c394:	vstr	d7, [sp, #64]	; 0x40
    c398:	str	r3, [sp, #56]	; 0x38
    c39a:	str	r3, [sp, #148]	; 0x94
    c39c:	str	r3, [sp, #144]	; 0x90
    c39e:	str	r3, [sp, #84]	; 0x54
    c3a0:	str	r3, [sp, #28]
    c3a2:	ldr.w	sl, [pc, #656]	; c634 <_svfprintf_r+0x2d4>
    c3a6:	add	r3, sp, #192	; 0xc0
    c3a8:	str	r3, [sp, #140]	; 0x8c
    c3aa:	mov	r9, r3
    c3ac:	mov	r8, r5
    c3ae:	ldrb.w	r3, [r8]
    c3b2:	mov	r4, r8
    c3b4:	cbz	r3, c3f2 <_svfprintf_r+0x92>
    c3b6:	cmp	r3, #37	; 0x25
    c3b8:	bne.n	c3c0 <_svfprintf_r+0x60>
    c3ba:	b.n	c3f2 <_svfprintf_r+0x92>
    c3bc:	cmp	r3, #37	; 0x25
    c3be:	beq.n	c3c8 <_svfprintf_r+0x68>
    c3c0:	ldrb.w	r3, [r4, #1]!
    c3c4:	cmp	r3, #0
    c3c6:	bne.n	c3bc <_svfprintf_r+0x5c>
    c3c8:	rsb	r5, r8, r4
    c3cc:	cbz	r5, c3f2 <_svfprintf_r+0x92>
    c3ce:	ldr	r3, [sp, #144]	; 0x90
    c3d0:	ldr	r2, [sp, #148]	; 0x94
    c3d2:	str.w	r8, [r9]
    c3d6:	adds	r3, #1
    c3d8:	add	r2, r5
    c3da:	cmp	r3, #7
    c3dc:	str.w	r5, [r9, #4]
    c3e0:	str	r2, [sp, #148]	; 0x94
    c3e2:	str	r3, [sp, #144]	; 0x90
    c3e4:	bgt.w	c534 <_svfprintf_r+0x1d4>
    c3e8:	add.w	r9, r9, #8
    c3ec:	ldr	r3, [sp, #28]
    c3ee:	add	r3, r5
    c3f0:	str	r3, [sp, #28]
    c3f2:	ldrb	r3, [r4, #0]
    c3f4:	cmp	r3, #0
    c3f6:	beq.w	c546 <_svfprintf_r+0x1e6>
    c3fa:	movs	r3, #0
    c3fc:	mov	r2, r3
    c3fe:	strb.w	r3, [sp, #111]	; 0x6f
    c402:	mov	r1, r3
    c404:	str	r3, [sp, #32]
    c406:	str	r3, [sp, #12]
    c408:	mov.w	fp, #4294967295
    c40c:	ldrb	r3, [r4, #1]
    c40e:	add.w	r8, r4, #1
    c412:	mov	r5, fp
    c414:	add.w	r8, r8, #1
    c418:	sub.w	r0, r3, #32
    c41c:	cmp	r0, #88	; 0x58
    c41e:	bhi.w	cc8a <_svfprintf_r+0x92a>
    c422:	tbh	[pc, r0, lsl #1]
    c426:	.short	0x03a0
    c428:	.word	0x04320432
    c42c:	.word	0x043203a8
    c430:	.word	0x04320432
    c434:	.word	0x04320432
    c438:	.word	0x03af0432
    c43c:	.word	0x043203bd
    c440:	.word	0x00e2005d
    c444:	.word	0x01090432
    c448:	.word	0x01100110
    c44c:	.word	0x01100110
    c450:	.word	0x01100110
    c454:	.word	0x01100110
    c458:	.word	0x04320110
    c45c:	.word	0x04320432
    c460:	.word	0x04320432
    c464:	.word	0x04320432
    c468:	.word	0x04320432
    c46c:	.word	0x01200432
    c470:	.word	0x04320286
    c474:	.word	0x04320286
    c478:	.word	0x04320432
    c47c:	.word	0x02d40432
    c480:	.word	0x04320432
    c484:	.word	0x043202e5
    c488:	.word	0x04320432
    c48c:	.word	0x04320432
    c490:	.word	0x0432030f
    c494:	.word	0x033d0432
    c498:	.word	0x04320432
    c49c:	.word	0x04320432
    c4a0:	.word	0x04320432
    c4a4:	.word	0x04320432
    c4a8:	.word	0x04320432
    c4ac:	.word	0x0391037e
    c4b0:	.word	0x02860286
    c4b4:	.word	0x03990286
    c4b8:	.word	0x04320391
    c4bc:	.word	0x04070432
    c4c0:	.word	0x04120432
    c4c4:	.word	0x006400a3
    c4c8:	.word	0x043203c2
    c4cc:	.word	0x043203c9
    c4d0:	.word	0x043203ea
    c4d4:	.word	0x03f20432
    c4d8:	ldr	r0, [sp, #32]
    c4da:	str	r3, [sp, #40]	; 0x28
    c4dc:	negs	r0, r0
    c4de:	str	r0, [sp, #32]
    c4e0:	ldr	r3, [sp, #12]
    c4e2:	orr.w	r3, r3, #4
    c4e6:	str	r3, [sp, #12]
    c4e8:	ldrb.w	r3, [r8]
    c4ec:	b.n	c414 <_svfprintf_r+0xb4>
    c4ee:	ldr	r0, [sp, #40]	; 0x28
    c4f0:	mov	fp, r5
    c4f2:	movs	r1, #0
    c4f4:	ldr	r4, [r0, #0]
    c4f6:	strb.w	r1, [sp, #111]	; 0x6f
    c4fa:	adds	r7, r0, #4
    c4fc:	ldr	r0, [sp, #12]
    c4fe:	movs	r3, #48	; 0x30
    c500:	movs	r2, #120	; 0x78
    c502:	cmp	fp, r1
    c504:	strb.w	r3, [sp, #112]	; 0x70
    c508:	mov.w	r5, #0
    c50c:	strb.w	r2, [sp, #113]	; 0x71
    c510:	orr.w	r3, r0, #2
    c514:	blt.w	ccc4 <_svfprintf_r+0x964>
    c518:	bic.w	r3, r0, #128	; 0x80
    c51c:	orr.w	r3, r3, #2
    c520:	str	r3, [sp, #12]
    c522:	orrs.w	r3, r4, r5
    c526:	str	r7, [sp, #40]	; 0x28
    c528:	beq.w	cc70 <_svfprintf_r+0x910>
    c52c:	mov	r7, r1
    c52e:	str	r2, [sp, #52]	; 0x34
    c530:	ldr	r0, [pc, #252]	; (c630 <_svfprintf_r+0x2d0>)
    c532:	b.n	cb02 <_svfprintf_r+0x7a2>
    c534:	add	r2, sp, #140	; 0x8c
    c536:	ldr	r1, [sp, #20]
    c538:	ldr	r0, [sp, #24]
    c53a:	bl	f4a4 <__ssprint_r>
    c53e:	cbnz	r0, c554 <_svfprintf_r+0x1f4>
    c540:	add.w	r9, sp, #192	; 0xc0
    c544:	b.n	c3ec <_svfprintf_r+0x8c>
    c546:	ldr	r3, [sp, #148]	; 0x94
    c548:	cbz	r3, c554 <_svfprintf_r+0x1f4>
    c54a:	ldr	r0, [sp, #24]
    c54c:	ldr	r1, [sp, #20]
    c54e:	add	r2, sp, #140	; 0x8c
    c550:	bl	f4a4 <__ssprint_r>
    c554:	ldr	r3, [sp, #20]
    c556:	ldrh	r3, [r3, #12]
    c558:	tst.w	r3, #64	; 0x40
    c55c:	ldr	r3, [sp, #28]
    c55e:	it	ne
    c560:	movne.w	r3, #4294967295
    c564:	mov	r0, r3
    c566:	add	sp, #260	; 0x104
    c568:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c56c:	str	r3, [sp, #52]	; 0x34
    c56e:	mov	fp, r5
    c570:	cmp	r2, #0
    c572:	bne.w	d9dc <_svfprintf_r+0x167c>
    c576:	ldr	r2, [sp, #12]
    c578:	ands.w	r3, r2, #32
    c57c:	beq.w	ca0c <_svfprintf_r+0x6ac>
    c580:	ldr	r7, [sp, #40]	; 0x28
    c582:	adds	r7, #7
    c584:	bic.w	r3, r7, #7
    c588:	movs	r7, #0
    c58a:	add.w	r1, r3, #8
    c58e:	cmp	fp, r7
    c590:	str	r1, [sp, #40]	; 0x28
    c592:	ldrd	r4, r5, [r3]
    c596:	strb.w	r7, [sp, #111]	; 0x6f
    c59a:	blt.w	d462 <_svfprintf_r+0x1102>
    c59e:	bic.w	r3, r2, #128	; 0x80
    c5a2:	str	r3, [sp, #12]
    c5a4:	orrs.w	r3, r4, r5
    c5a8:	beq.w	ccb4 <_svfprintf_r+0x954>
    c5ac:	add	r6, sp, #192	; 0xc0
    c5ae:	lsrs	r2, r4, #3
    c5b0:	orr.w	r2, r2, r5, lsl #29
    c5b4:	lsrs	r1, r5, #3
    c5b6:	and.w	r3, r4, #7
    c5ba:	mov	r5, r1
    c5bc:	mov	r4, r2
    c5be:	adds	r3, #48	; 0x30
    c5c0:	orrs.w	r2, r4, r5
    c5c4:	strb.w	r3, [r6, #-1]!
    c5c8:	bne.n	c5ae <_svfprintf_r+0x24e>
    c5ca:	ldr	r2, [sp, #12]
    c5cc:	lsls	r1, r2, #31
    c5ce:	bpl.w	c6f0 <_svfprintf_r+0x390>
    c5d2:	cmp	r3, #48	; 0x30
    c5d4:	beq.w	c6f0 <_svfprintf_r+0x390>
    c5d8:	movs	r2, #48	; 0x30
    c5da:	subs	r3, r6, #1
    c5dc:	strb.w	r2, [r6, #-1]
    c5e0:	add	r2, sp, #192	; 0xc0
    c5e2:	subs	r2, r2, r3
    c5e4:	str	r2, [sp, #36]	; 0x24
    c5e6:	mov	r6, r3
    c5e8:	b.n	c6f6 <_svfprintf_r+0x396>
    c5ea:	ldrb.w	r3, [r8]
    c5ee:	cmp	r3, #42	; 0x2a
    c5f0:	add.w	r4, r8, #1
    c5f4:	beq.w	d9c0 <_svfprintf_r+0x1660>
    c5f8:	sub.w	r0, r3, #48	; 0x30
    c5fc:	cmp	r0, #9
    c5fe:	it	ls
    c600:	movls	r5, #0
    c602:	bhi.w	d912 <_svfprintf_r+0x15b2>
    c606:	ldrb.w	r3, [r4], #1
    c60a:	add.w	r5, r5, r5, lsl #2
    c60e:	add.w	r5, r0, r5, lsl #1
    c612:	sub.w	r0, r3, #48	; 0x30
    c616:	cmp	r0, #9
    c618:	bls.n	c606 <_svfprintf_r+0x2a6>
    c61a:	orr.w	r5, r5, r5, asr #31
    c61e:	mov	r8, r4
    c620:	b.n	c418 <_svfprintf_r+0xb8>
    c622:	nop
    c624:	nop.w
	...
    c630:	.word	0x200008a0
    c634:	.word	0x2000086c
    c638:	ldr	r3, [sp, #12]
    c63a:	orr.w	r3, r3, #128	; 0x80
    c63e:	str	r3, [sp, #12]
    c640:	ldrb.w	r3, [r8]
    c644:	b.n	c414 <_svfprintf_r+0xb4>
    c646:	sub.w	r0, r3, #48	; 0x30
    c64a:	movs	r3, #0
    c64c:	mov	r4, r3
    c64e:	ldrb.w	r3, [r8], #1
    c652:	add.w	r4, r4, r4, lsl #2
    c656:	add.w	r4, r0, r4, lsl #1
    c65a:	sub.w	r0, r3, #48	; 0x30
    c65e:	cmp	r0, #9
    c660:	bls.n	c64e <_svfprintf_r+0x2ee>
    c662:	str	r4, [sp, #32]
    c664:	b.n	c418 <_svfprintf_r+0xb8>
    c666:	str	r3, [sp, #52]	; 0x34
    c668:	mov	fp, r5
    c66a:	cmp	r2, #0
    c66c:	bne.w	d9f8 <_svfprintf_r+0x1698>
    c670:	ldr	r3, [sp, #12]
    c672:	orr.w	r3, r3, #16
    c676:	str	r3, [sp, #12]
    c678:	ldr	r3, [sp, #12]
    c67a:	lsls	r4, r3, #26
    c67c:	bpl.w	d0ee <_svfprintf_r+0xd8e>
    c680:	ldr	r7, [sp, #40]	; 0x28
    c682:	adds	r7, #7
    c684:	bic.w	r7, r7, #7
    c688:	ldrd	r2, r3, [r7]
    c68c:	add.w	r1, r7, #8
    c690:	str	r1, [sp, #40]	; 0x28
    c692:	mov	r4, r2
    c694:	mov	r5, r3
    c696:	cmp	r2, #0
    c698:	sbcs.w	r3, r3, #0
    c69c:	blt.w	d164 <_svfprintf_r+0xe04>
    c6a0:	cmp.w	fp, #0
    c6a4:	ldrb.w	r7, [sp, #111]	; 0x6f
    c6a8:	blt.w	d12a <_svfprintf_r+0xdca>
    c6ac:	ldr	r3, [sp, #12]
    c6ae:	bic.w	r3, r3, #128	; 0x80
    c6b2:	str	r3, [sp, #12]
    c6b4:	orrs.w	r3, r4, r5
    c6b8:	beq.w	ca8c <_svfprintf_r+0x72c>
    c6bc:	cmp	r5, #0
    c6be:	it	eq
    c6c0:	cmpeq	r4, #10
    c6c2:	bcc.w	ca96 <_svfprintf_r+0x736>
    c6c6:	add	r6, sp, #192	; 0xc0
    c6c8:	mov	r0, r4
    c6ca:	mov	r1, r5
    c6cc:	movs	r2, #10
    c6ce:	movs	r3, #0
    c6d0:	bl	b230 <__aeabi_uldivmod>
    c6d4:	adds	r2, #48	; 0x30
    c6d6:	strb.w	r2, [r6, #-1]!
    c6da:	mov	r0, r4
    c6dc:	mov	r1, r5
    c6de:	movs	r3, #0
    c6e0:	movs	r2, #10
    c6e2:	bl	b230 <__aeabi_uldivmod>
    c6e6:	mov	r4, r0
    c6e8:	mov	r5, r1
    c6ea:	orrs.w	r3, r4, r5
    c6ee:	bne.n	c6c8 <_svfprintf_r+0x368>
    c6f0:	add	r3, sp, #192	; 0xc0
    c6f2:	subs	r3, r3, r6
    c6f4:	str	r3, [sp, #36]	; 0x24
    c6f6:	ldr	r3, [sp, #36]	; 0x24
    c6f8:	cmp	r3, fp
    c6fa:	it	lt
    c6fc:	movlt	r3, fp
    c6fe:	str	r3, [sp, #16]
    c700:	movs	r3, #0
    c702:	str	r3, [sp, #60]	; 0x3c
    c704:	cbz	r7, c70c <_svfprintf_r+0x3ac>
    c706:	ldr	r3, [sp, #16]
    c708:	adds	r3, #1
    c70a:	str	r3, [sp, #16]
    c70c:	ldr	r3, [sp, #12]
    c70e:	ands.w	r3, r3, #2
    c712:	str	r3, [sp, #44]	; 0x2c
    c714:	beq.n	c71c <_svfprintf_r+0x3bc>
    c716:	ldr	r3, [sp, #16]
    c718:	adds	r3, #2
    c71a:	str	r3, [sp, #16]
    c71c:	ldr	r3, [sp, #12]
    c71e:	ands.w	r3, r3, #132	; 0x84
    c722:	str	r3, [sp, #48]	; 0x30
    c724:	bne.w	ccde <_svfprintf_r+0x97e>
    c728:	ldr	r3, [sp, #32]
    c72a:	ldr	r2, [sp, #16]
    c72c:	subs	r5, r3, r2
    c72e:	cmp	r5, #0
    c730:	ble.w	ccde <_svfprintf_r+0x97e>
    c734:	cmp	r5, #16
    c736:	ldr	r1, [sp, #148]	; 0x94
    c738:	ldr	r2, [sp, #144]	; 0x90
    c73a:	ldr	r7, [pc, #672]	; (c9dc <_svfprintf_r+0x67c>)
    c73c:	ble.n	c78e <_svfprintf_r+0x42e>
    c73e:	str	r6, [sp, #80]	; 0x50
    c740:	mov	r0, r9
    c742:	movs	r4, #16
    c744:	mov	r9, r7
    c746:	ldr	r6, [sp, #20]
    c748:	mov	r7, r5
    c74a:	ldr	r5, [sp, #24]
    c74c:	b.n	c758 <_svfprintf_r+0x3f8>
    c74e:	subs	r7, #16
    c750:	cmp	r7, #16
    c752:	add.w	r0, r0, #8
    c756:	ble.n	c786 <_svfprintf_r+0x426>
    c758:	adds	r2, #1
    c75a:	ldr	r3, [pc, #640]	; (c9dc <_svfprintf_r+0x67c>)
    c75c:	str	r2, [sp, #144]	; 0x90
    c75e:	adds	r1, #16
    c760:	cmp	r2, #7
    c762:	str	r1, [sp, #148]	; 0x94
    c764:	stmia.w	r0, {r3, r4}
    c768:	ble.n	c74e <_svfprintf_r+0x3ee>
    c76a:	add	r2, sp, #140	; 0x8c
    c76c:	mov	r1, r6
    c76e:	mov	r0, r5
    c770:	bl	f4a4 <__ssprint_r>
    c774:	cmp	r0, #0
    c776:	bne.w	c554 <_svfprintf_r+0x1f4>
    c77a:	subs	r7, #16
    c77c:	cmp	r7, #16
    c77e:	ldr	r1, [sp, #148]	; 0x94
    c780:	ldr	r2, [sp, #144]	; 0x90
    c782:	add	r0, sp, #192	; 0xc0
    c784:	bgt.n	c758 <_svfprintf_r+0x3f8>
    c786:	ldr	r6, [sp, #80]	; 0x50
    c788:	mov	r5, r7
    c78a:	mov	r7, r9
    c78c:	mov	r9, r0
    c78e:	adds	r2, #1
    c790:	adds	r4, r5, r1
    c792:	cmp	r2, #7
    c794:	str	r4, [sp, #148]	; 0x94
    c796:	str	r2, [sp, #144]	; 0x90
    c798:	str.w	r7, [r9]
    c79c:	str.w	r5, [r9, #4]
    c7a0:	bgt.w	cffe <_svfprintf_r+0xc9e>
    c7a4:	ldrb.w	r7, [sp, #111]	; 0x6f
    c7a8:	add.w	r9, r9, #8
    c7ac:	cbz	r7, c7cc <_svfprintf_r+0x46c>
    c7ae:	ldr	r3, [sp, #144]	; 0x90
    c7b0:	adds	r3, #1
    c7b2:	adds	r4, #1
    c7b4:	add.w	r1, sp, #111	; 0x6f
    c7b8:	movs	r2, #1
    c7ba:	cmp	r3, #7
    c7bc:	str	r4, [sp, #148]	; 0x94
    c7be:	str	r3, [sp, #144]	; 0x90
    c7c0:	stmia.w	r9, {r1, r2}
    c7c4:	bgt.w	cf12 <_svfprintf_r+0xbb2>
    c7c8:	add.w	r9, r9, #8
    c7cc:	ldr	r3, [sp, #44]	; 0x2c
    c7ce:	cbz	r3, c7ec <_svfprintf_r+0x48c>
    c7d0:	ldr	r3, [sp, #144]	; 0x90
    c7d2:	adds	r3, #1
    c7d4:	adds	r4, #2
    c7d6:	add	r1, sp, #112	; 0x70
    c7d8:	movs	r2, #2
    c7da:	cmp	r3, #7
    c7dc:	str	r4, [sp, #148]	; 0x94
    c7de:	str	r3, [sp, #144]	; 0x90
    c7e0:	stmia.w	r9, {r1, r2}
    c7e4:	bgt.w	cf2a <_svfprintf_r+0xbca>
    c7e8:	add.w	r9, r9, #8
    c7ec:	ldr	r3, [sp, #48]	; 0x30
    c7ee:	cmp	r3, #128	; 0x80
    c7f0:	beq.w	cdb6 <_svfprintf_r+0xa56>
    c7f4:	ldr	r3, [sp, #36]	; 0x24
    c7f6:	rsb	r7, r3, fp
    c7fa:	cmp	r7, #0
    c7fc:	ble.n	c866 <_svfprintf_r+0x506>
    c7fe:	ldr	r2, [pc, #480]	; (c9e0 <_svfprintf_r+0x680>)
    c800:	ldr	r3, [sp, #144]	; 0x90
    c802:	str	r2, [sp, #44]	; 0x2c
    c804:	cmp	r7, #16
    c806:	ble.n	c84e <_svfprintf_r+0x4ee>
    c808:	mov	r2, r4
    c80a:	mov.w	fp, #16
    c80e:	ldr	r5, [sp, #24]
    c810:	ldr	r4, [sp, #20]
    c812:	b.n	c81e <_svfprintf_r+0x4be>
    c814:	subs	r7, #16
    c816:	cmp	r7, #16
    c818:	add.w	r9, r9, #8
    c81c:	ble.n	c84c <_svfprintf_r+0x4ec>
    c81e:	adds	r3, #1
    c820:	adds	r2, #16
    c822:	cmp	r3, #7
    c824:	str	r2, [sp, #148]	; 0x94
    c826:	str	r3, [sp, #144]	; 0x90
    c828:	stmia.w	r9, {sl, fp}
    c82c:	ble.n	c814 <_svfprintf_r+0x4b4>
    c82e:	add	r2, sp, #140	; 0x8c
    c830:	mov	r1, r4
    c832:	mov	r0, r5
    c834:	bl	f4a4 <__ssprint_r>
    c838:	cmp	r0, #0
    c83a:	bne.w	c554 <_svfprintf_r+0x1f4>
    c83e:	subs	r7, #16
    c840:	cmp	r7, #16
    c842:	ldr	r2, [sp, #148]	; 0x94
    c844:	ldr	r3, [sp, #144]	; 0x90
    c846:	add.w	r9, sp, #192	; 0xc0
    c84a:	bgt.n	c81e <_svfprintf_r+0x4be>
    c84c:	mov	r4, r2
    c84e:	adds	r3, #1
    c850:	ldr	r2, [sp, #44]	; 0x2c
    c852:	str	r3, [sp, #144]	; 0x90
    c854:	add	r4, r7
    c856:	cmp	r3, #7
    c858:	str	r4, [sp, #148]	; 0x94
    c85a:	stmia.w	r9, {r2, r7}
    c85e:	bgt.w	cefa <_svfprintf_r+0xb9a>
    c862:	add.w	r9, r9, #8
    c866:	ldr	r3, [sp, #12]
    c868:	lsls	r2, r3, #23
    c86a:	bmi.w	cce2 <_svfprintf_r+0x982>
    c86e:	ldr	r3, [sp, #144]	; 0x90
    c870:	ldr	r1, [sp, #36]	; 0x24
    c872:	str.w	r6, [r9]
    c876:	adds	r3, #1
    c878:	add	r4, r1
    c87a:	cmp	r3, #7
    c87c:	str	r4, [sp, #148]	; 0x94
    c87e:	str.w	r1, [r9, #4]
    c882:	str	r3, [sp, #144]	; 0x90
    c884:	bgt.w	cece <_svfprintf_r+0xb6e>
    c888:	add.w	r9, r9, #8
    c88c:	ldr	r3, [sp, #12]
    c88e:	lsls	r1, r3, #29
    c890:	bpl.n	c912 <_svfprintf_r+0x5b2>
    c892:	ldr	r3, [sp, #32]
    c894:	ldr	r2, [sp, #16]
    c896:	subs	r5, r3, r2
    c898:	cmp	r5, #0
    c89a:	ble.n	c912 <_svfprintf_r+0x5b2>
    c89c:	cmp	r5, #16
    c89e:	ldr	r3, [sp, #144]	; 0x90
    c8a0:	ldr	r7, [pc, #312]	; (c9dc <_svfprintf_r+0x67c>)
    c8a2:	ble.n	c8ec <_svfprintf_r+0x58c>
    c8a4:	mov	r2, r4
    c8a6:	movs	r6, #16
    c8a8:	ldr.w	fp, [sp, #24]
    c8ac:	ldr	r4, [sp, #20]
    c8ae:	b.n	c8ba <_svfprintf_r+0x55a>
    c8b0:	subs	r5, #16
    c8b2:	cmp	r5, #16
    c8b4:	add.w	r9, r9, #8
    c8b8:	ble.n	c8ea <_svfprintf_r+0x58a>
    c8ba:	adds	r3, #1
    c8bc:	ldr	r1, [pc, #284]	; (c9dc <_svfprintf_r+0x67c>)
    c8be:	str	r3, [sp, #144]	; 0x90
    c8c0:	adds	r2, #16
    c8c2:	cmp	r3, #7
    c8c4:	str	r2, [sp, #148]	; 0x94
    c8c6:	stmia.w	r9, {r1, r6}
    c8ca:	ble.n	c8b0 <_svfprintf_r+0x550>
    c8cc:	add	r2, sp, #140	; 0x8c
    c8ce:	mov	r1, r4
    c8d0:	mov	r0, fp
    c8d2:	bl	f4a4 <__ssprint_r>
    c8d6:	cmp	r0, #0
    c8d8:	bne.w	c554 <_svfprintf_r+0x1f4>
    c8dc:	subs	r5, #16
    c8de:	cmp	r5, #16
    c8e0:	ldr	r2, [sp, #148]	; 0x94
    c8e2:	ldr	r3, [sp, #144]	; 0x90
    c8e4:	add.w	r9, sp, #192	; 0xc0
    c8e8:	bgt.n	c8ba <_svfprintf_r+0x55a>
    c8ea:	mov	r4, r2
    c8ec:	adds	r3, #1
    c8ee:	add	r4, r5
    c8f0:	cmp	r3, #7
    c8f2:	str	r4, [sp, #148]	; 0x94
    c8f4:	str	r3, [sp, #144]	; 0x90
    c8f6:	str.w	r7, [r9]
    c8fa:	str.w	r5, [r9, #4]
    c8fe:	ble.n	c912 <_svfprintf_r+0x5b2>
    c900:	add	r2, sp, #140	; 0x8c
    c902:	ldr	r1, [sp, #20]
    c904:	ldr	r0, [sp, #24]
    c906:	bl	f4a4 <__ssprint_r>
    c90a:	cmp	r0, #0
    c90c:	bne.w	c554 <_svfprintf_r+0x1f4>
    c910:	ldr	r4, [sp, #148]	; 0x94
    c912:	ldr	r3, [sp, #28]
    c914:	ldr	r2, [sp, #32]
    c916:	ldr	r1, [sp, #16]
    c918:	cmp	r2, r1
    c91a:	ite	ge
    c91c:	addge	r3, r3, r2
    c91e:	addlt	r3, r3, r1
    c920:	str	r3, [sp, #28]
    c922:	cmp	r4, #0
    c924:	bne.w	cee6 <_svfprintf_r+0xb86>
    c928:	movs	r3, #0
    c92a:	str	r3, [sp, #144]	; 0x90
    c92c:	add.w	r9, sp, #192	; 0xc0
    c930:	b.n	c3ae <_svfprintf_r+0x4e>
    c932:	str	r3, [sp, #52]	; 0x34
    c934:	mov	fp, r5
    c936:	cmp	r2, #0
    c938:	bne.w	da00 <_svfprintf_r+0x16a0>
    c93c:	ldr	r3, [sp, #12]
    c93e:	ldr	r7, [sp, #40]	; 0x28
    c940:	lsls	r2, r3, #28
    c942:	add.w	r7, r7, #7
    c946:	bpl.w	d432 <_svfprintf_r+0x10d2>
    c94a:	bic.w	r3, r7, #7
    c94e:	vldr	d7, [r3]
    c952:	vstr	d7, [sp, #64]	; 0x40
    c956:	add.w	r2, r3, #8
    c95a:	str	r2, [sp, #40]	; 0x28
    c95c:	ldrd	r1, r2, [sp, #64]	; 0x40
    c960:	bic.w	r3, r2, #2147483648	; 0x80000000
    c964:	str	r1, [sp, #88]	; 0x58
    c966:	str	r3, [sp, #92]	; 0x5c
    c968:	ldrd	r4, r5, [sp, #88]	; 0x58
    c96c:	mov.w	r2, #4294967295
    c970:	mov	r0, r4
    c972:	mov	r1, r5
    c974:	ldr	r3, [pc, #108]	; (c9e4 <_svfprintf_r+0x684>)
    c976:	bl	b204 <__aeabi_dcmpun>
    c97a:	cmp	r0, #0
    c97c:	bne.w	d334 <_svfprintf_r+0xfd4>
    c980:	mov.w	r2, #4294967295
    c984:	ldr	r3, [pc, #92]	; (c9e4 <_svfprintf_r+0x684>)
    c986:	mov	r0, r4
    c988:	mov	r1, r5
    c98a:	bl	b1c8 <__aeabi_dcmple>
    c98e:	cmp	r0, #0
    c990:	bne.w	d334 <_svfprintf_r+0xfd4>
    c994:	movs	r2, #0
    c996:	movs	r3, #0
    c998:	ldrd	r0, r1, [sp, #64]	; 0x40
    c99c:	bl	b1b4 <__aeabi_dcmplt>
    c9a0:	cmp	r0, #0
    c9a2:	bne.w	d84a <_svfprintf_r+0x14ea>
    c9a6:	ldrb.w	r7, [sp, #111]	; 0x6f
    c9aa:	ldr	r6, [pc, #60]	; (c9e8 <_svfprintf_r+0x688>)
    c9ac:	ldr	r3, [pc, #60]	; (c9ec <_svfprintf_r+0x68c>)
    c9ae:	ldr	r1, [sp, #12]
    c9b0:	bic.w	r1, r1, #128	; 0x80
    c9b4:	str	r1, [sp, #12]
    c9b6:	ldr	r1, [sp, #52]	; 0x34
    c9b8:	movs	r2, #3
    c9ba:	mov.w	fp, #0
    c9be:	str	r2, [sp, #16]
    c9c0:	cmp	r1, #71	; 0x47
    c9c2:	it	le
    c9c4:	movle	r6, r3
    c9c6:	str	r2, [sp, #36]	; 0x24
    c9c8:	str.w	fp, [sp, #60]	; 0x3c
    c9cc:	b.n	c704 <_svfprintf_r+0x3a4>
    c9ce:	ldr	r3, [sp, #12]
    c9d0:	orr.w	r3, r3, #8
    c9d4:	str	r3, [sp, #12]
    c9d6:	ldrb.w	r3, [r8]
    c9da:	b.n	c414 <_svfprintf_r+0xb4>
    c9dc:	.word	0x200008bc
    c9e0:	.word	0x2000086c
    c9e4:	.word	0x7fefffff
    c9e8:	.word	0x20000880
    c9ec:	.word	0x2000087c
    c9f0:	str	r3, [sp, #52]	; 0x34
    c9f2:	mov	fp, r5
    c9f4:	cmp	r2, #0
    c9f6:	bne.w	da18 <_svfprintf_r+0x16b8>
    c9fa:	ldr	r3, [sp, #12]
    c9fc:	orr.w	r3, r3, #16
    ca00:	str	r3, [sp, #12]
    ca02:	ldr	r2, [sp, #12]
    ca04:	ands.w	r3, r2, #32
    ca08:	bne.w	c580 <_svfprintf_r+0x220>
    ca0c:	ldr	r1, [sp, #12]
    ca0e:	ands.w	r2, r1, #16
    ca12:	beq.w	d2cc <_svfprintf_r+0xf6c>
    ca16:	ldr	r0, [sp, #40]	; 0x28
    ca18:	strb.w	r3, [sp, #111]	; 0x6f
    ca1c:	cmp.w	fp, #0
    ca20:	ldr	r4, [r0, #0]
    ca22:	add.w	r7, r0, #4
    ca26:	mov.w	r5, #0
    ca2a:	blt.w	d460 <_svfprintf_r+0x1100>
    ca2e:	mov	r2, r1
    ca30:	bic.w	r2, r2, #128	; 0x80
    ca34:	str	r2, [sp, #12]
    ca36:	orrs.w	r2, r4, r5
    ca3a:	str	r7, [sp, #40]	; 0x28
    ca3c:	beq.w	ccb4 <_svfprintf_r+0x954>
    ca40:	mov	r7, r3
    ca42:	b.n	c5ac <_svfprintf_r+0x24c>
    ca44:	str	r3, [sp, #52]	; 0x34
    ca46:	mov	fp, r5
    ca48:	cmp	r2, #0
    ca4a:	bne.w	da10 <_svfprintf_r+0x16b0>
    ca4e:	ldr	r3, [sp, #12]
    ca50:	orr.w	r3, r3, #16
    ca54:	str	r3, [sp, #12]
    ca56:	ldr	r2, [sp, #12]
    ca58:	ands.w	r3, r2, #32
    ca5c:	beq.w	d0b8 <_svfprintf_r+0xd58>
    ca60:	ldr	r7, [sp, #40]	; 0x28
    ca62:	adds	r7, #7
    ca64:	bic.w	r3, r7, #7
    ca68:	movs	r7, #0
    ca6a:	add.w	r1, r3, #8
    ca6e:	cmp	fp, r7
    ca70:	str	r1, [sp, #40]	; 0x28
    ca72:	ldrd	r4, r5, [r3]
    ca76:	strb.w	r7, [sp, #111]	; 0x6f
    ca7a:	blt.w	d12a <_svfprintf_r+0xdca>
    ca7e:	bic.w	r3, r2, #128	; 0x80
    ca82:	str	r3, [sp, #12]
    ca84:	orrs.w	r3, r4, r5
    ca88:	bne.w	c6bc <_svfprintf_r+0x35c>
    ca8c:	cmp.w	fp, #0
    ca90:	beq.w	cc7e <_svfprintf_r+0x91e>
    ca94:	movs	r4, #0
    ca96:	add	r6, sp, #256	; 0x100
    ca98:	adds	r4, #48	; 0x30
    ca9a:	strb.w	r4, [r6, #-65]!
    ca9e:	b.n	c6f0 <_svfprintf_r+0x390>
    caa0:	str	r3, [sp, #52]	; 0x34
    caa2:	mov	fp, r5
    caa4:	cmp	r2, #0
    caa6:	bne.w	da08 <_svfprintf_r+0x16a8>
    caaa:	ldr	r3, [sp, #12]
    caac:	ldr	r0, [pc, #700]	; (cd6c <_svfprintf_r+0xa0c>)
    caae:	lsls	r5, r3, #26
    cab0:	bpl.w	cc1e <_svfprintf_r+0x8be>
    cab4:	ldr	r7, [sp, #40]	; 0x28
    cab6:	adds	r7, #7
    cab8:	bic.w	r3, r7, #7
    cabc:	ldrd	r4, r5, [r3]
    cac0:	add.w	r2, r3, #8
    cac4:	str	r2, [sp, #40]	; 0x28
    cac6:	ldr	r2, [sp, #12]
    cac8:	ands.w	r7, r2, #1
    cacc:	beq.w	cf42 <_svfprintf_r+0xbe2>
    cad0:	orrs.w	r3, r4, r5
    cad4:	beq.w	d4dc <_svfprintf_r+0x117c>
    cad8:	ldrb.w	r2, [sp, #52]	; 0x34
    cadc:	strb.w	r2, [sp, #113]	; 0x71
    cae0:	movs	r7, #0
    cae2:	ldr	r2, [sp, #12]
    cae4:	strb.w	r7, [sp, #111]	; 0x6f
    cae8:	movs	r3, #48	; 0x30
    caea:	cmp	fp, r7
    caec:	strb.w	r3, [sp, #112]	; 0x70
    caf0:	orr.w	r3, r2, #2
    caf4:	blt.w	d854 <_svfprintf_r+0x14f4>
    caf8:	bic.w	r3, r2, #128	; 0x80
    cafc:	orr.w	r3, r3, #2
    cb00:	str	r3, [sp, #12]
    cb02:	add	r6, sp, #192	; 0xc0
    cb04:	lsrs	r3, r4, #4
    cb06:	and.w	r1, r4, #15
    cb0a:	orr.w	r3, r3, r5, lsl #28
    cb0e:	lsrs	r2, r5, #4
    cb10:	mov	r4, r3
    cb12:	mov	r5, r2
    cb14:	ldrb	r3, [r0, r1]
    cb16:	strb.w	r3, [r6, #-1]!
    cb1a:	orrs.w	r3, r4, r5
    cb1e:	bne.n	cb04 <_svfprintf_r+0x7a4>
    cb20:	b.n	c6f0 <_svfprintf_r+0x390>
    cb22:	ldr	r1, [sp, #40]	; 0x28
    cb24:	str	r3, [sp, #52]	; 0x34
    cb26:	ldr	r2, [r1, #0]
    cb28:	strb.w	r2, [sp, #152]	; 0x98
    cb2c:	movs	r3, #0
    cb2e:	mov	r2, r1
    cb30:	mov	r7, r3
    cb32:	strb.w	r3, [sp, #111]	; 0x6f
    cb36:	adds	r2, #4
    cb38:	movs	r3, #1
    cb3a:	str	r3, [sp, #16]
    cb3c:	mov	fp, r7
    cb3e:	str	r7, [sp, #60]	; 0x3c
    cb40:	str	r2, [sp, #40]	; 0x28
    cb42:	str	r3, [sp, #36]	; 0x24
    cb44:	add	r6, sp, #152	; 0x98
    cb46:	b.n	c70c <_svfprintf_r+0x3ac>
    cb48:	str	r3, [sp, #52]	; 0x34
    cb4a:	mov	fp, r5
    cb4c:	cmp	r2, #0
    cb4e:	beq.w	c678 <_svfprintf_r+0x318>
    cb52:	strb.w	r1, [sp, #111]	; 0x6f
    cb56:	b.n	c678 <_svfprintf_r+0x318>
    cb58:	ldr	r3, [sp, #12]
    cb5a:	orr.w	r3, r3, #64	; 0x40
    cb5e:	str	r3, [sp, #12]
    cb60:	ldrb.w	r3, [r8]
    cb64:	b.n	c414 <_svfprintf_r+0xb4>
    cb66:	ldrb.w	r3, [r8]
    cb6a:	cmp	r1, #0
    cb6c:	bne.w	c414 <_svfprintf_r+0xb4>
    cb70:	movs	r2, #1
    cb72:	movs	r1, #32
    cb74:	b.n	c414 <_svfprintf_r+0xb4>
    cb76:	ldr	r3, [sp, #12]
    cb78:	orr.w	r3, r3, #1
    cb7c:	str	r3, [sp, #12]
    cb7e:	ldrb.w	r3, [r8]
    cb82:	b.n	c414 <_svfprintf_r+0xb4>
    cb84:	ldr	r4, [sp, #40]	; 0x28
    cb86:	ldr	r3, [r4, #0]
    cb88:	str	r3, [sp, #32]
    cb8a:	mov	r0, r3
    cb8c:	cmp	r0, #0
    cb8e:	mov	r3, r4
    cb90:	add.w	r3, r3, #4
    cb94:	blt.w	c4d8 <_svfprintf_r+0x178>
    cb98:	str	r3, [sp, #40]	; 0x28
    cb9a:	ldrb.w	r3, [r8]
    cb9e:	b.n	c414 <_svfprintf_r+0xb4>
    cba0:	ldrb.w	r3, [r8]
    cba4:	movs	r2, #1
    cba6:	movs	r1, #43	; 0x2b
    cba8:	b.n	c414 <_svfprintf_r+0xb4>
    cbaa:	ldr	r3, [sp, #12]
    cbac:	orr.w	r3, r3, #32
    cbb0:	str	r3, [sp, #12]
    cbb2:	ldrb.w	r3, [r8]
    cbb6:	b.n	c414 <_svfprintf_r+0xb4>
    cbb8:	ldr	r2, [sp, #40]	; 0x28
    cbba:	str	r3, [sp, #52]	; 0x34
    cbbc:	ldr	r6, [r2, #0]
    cbbe:	movs	r4, #0
    cbc0:	strb.w	r4, [sp, #111]	; 0x6f
    cbc4:	adds	r7, r2, #4
    cbc6:	cmp	r6, #0
    cbc8:	beq.w	d804 <_svfprintf_r+0x14a4>
    cbcc:	cmp	r5, #0
    cbce:	blt.w	d694 <_svfprintf_r+0x1334>
    cbd2:	mov	r2, r5
    cbd4:	mov	r1, r4
    cbd6:	mov	r0, r6
    cbd8:	bl	ede0 <memchr>
    cbdc:	cmp	r0, #0
    cbde:	beq.w	d8a8 <_svfprintf_r+0x1548>
    cbe2:	subs	r3, r0, r6
    cbe4:	str	r3, [sp, #36]	; 0x24
    cbe6:	mov	fp, r4
    cbe8:	bic.w	r3, r3, r3, asr #31
    cbec:	str	r7, [sp, #40]	; 0x28
    cbee:	str	r3, [sp, #16]
    cbf0:	str.w	fp, [sp, #60]	; 0x3c
    cbf4:	ldrb.w	r7, [sp, #111]	; 0x6f
    cbf8:	b.n	c704 <_svfprintf_r+0x3a4>
    cbfa:	str	r3, [sp, #52]	; 0x34
    cbfc:	mov	fp, r5
    cbfe:	cmp	r2, #0
    cc00:	beq.w	ca56 <_svfprintf_r+0x6f6>
    cc04:	strb.w	r1, [sp, #111]	; 0x6f
    cc08:	b.n	ca56 <_svfprintf_r+0x6f6>
    cc0a:	str	r3, [sp, #52]	; 0x34
    cc0c:	mov	fp, r5
    cc0e:	cmp	r2, #0
    cc10:	bne.w	da30 <_svfprintf_r+0x16d0>
    cc14:	ldr	r3, [sp, #12]
    cc16:	ldr	r0, [pc, #344]	; (cd70 <_svfprintf_r+0xa10>)
    cc18:	lsls	r5, r3, #26
    cc1a:	bmi.w	cab4 <_svfprintf_r+0x754>
    cc1e:	ldr	r3, [sp, #12]
    cc20:	lsls	r4, r3, #27
    cc22:	bpl.w	d4a2 <_svfprintf_r+0x1142>
    cc26:	ldr	r2, [sp, #40]	; 0x28
    cc28:	mov	r3, r2
    cc2a:	adds	r3, #4
    cc2c:	ldr	r4, [r2, #0]
    cc2e:	str	r3, [sp, #40]	; 0x28
    cc30:	movs	r5, #0
    cc32:	b.n	cac6 <_svfprintf_r+0x766>
    cc34:	ldrb.w	r3, [r8]
    cc38:	cmp	r3, #108	; 0x6c
    cc3a:	beq.w	d5c2 <_svfprintf_r+0x1262>
    cc3e:	ldr	r0, [sp, #12]
    cc40:	orr.w	r0, r0, #16
    cc44:	str	r0, [sp, #12]
    cc46:	b.w	c414 <_svfprintf_r+0xb4>
    cc4a:	cmp	r2, #0
    cc4c:	bne.w	da28 <_svfprintf_r+0x16c8>
    cc50:	ldr	r3, [sp, #12]
    cc52:	lsls	r3, r3, #26
    cc54:	bpl.w	d306 <_svfprintf_r+0xfa6>
    cc58:	ldr	r2, [sp, #40]	; 0x28
    cc5a:	ldr	r1, [sp, #28]
    cc5c:	ldr	r3, [r2, #0]
    cc5e:	asrs	r5, r1, #31
    cc60:	mov	r0, r1
    cc62:	adds	r2, #4
    cc64:	mov	r1, r5
    cc66:	str	r2, [sp, #40]	; 0x28
    cc68:	strd	r0, r1, [r3]
    cc6c:	b.w	c3ae <_svfprintf_r+0x4e>
    cc70:	ldr	r0, [pc, #252]	; (cd70 <_svfprintf_r+0xa10>)
    cc72:	str	r2, [sp, #52]	; 0x34
    cc74:	cmp.w	fp, #0
    cc78:	bne.w	cf64 <_svfprintf_r+0xc04>
    cc7c:	mov	r7, fp
    cc7e:	mov.w	fp, #0
    cc82:	str.w	fp, [sp, #36]	; 0x24
    cc86:	add	r6, sp, #192	; 0xc0
    cc88:	b.n	c6f6 <_svfprintf_r+0x396>
    cc8a:	str	r3, [sp, #52]	; 0x34
    cc8c:	cmp	r2, #0
    cc8e:	bne.w	da20 <_svfprintf_r+0x16c0>
    cc92:	ldr	r2, [sp, #52]	; 0x34
    cc94:	cmp	r2, #0
    cc96:	beq.w	c546 <_svfprintf_r+0x1e6>
    cc9a:	movs	r3, #0
    cc9c:	movs	r1, #1
    cc9e:	mov	r7, r3
    cca0:	str	r1, [sp, #16]
    cca2:	strb.w	r2, [sp, #152]	; 0x98
    cca6:	strb.w	r3, [sp, #111]	; 0x6f
    ccaa:	mov	fp, r3
    ccac:	str	r3, [sp, #60]	; 0x3c
    ccae:	str	r1, [sp, #36]	; 0x24
    ccb0:	add	r6, sp, #152	; 0x98
    ccb2:	b.n	c70c <_svfprintf_r+0x3ac>
    ccb4:	cmp.w	fp, #0
    ccb8:	beq.w	d8d8 <_svfprintf_r+0x1578>
    ccbc:	movs	r7, #0
    ccbe:	movs	r4, #0
    ccc0:	movs	r5, #0
    ccc2:	b.n	c5ac <_svfprintf_r+0x24c>
    ccc4:	ldr	r0, [pc, #168]	; (cd70 <_svfprintf_r+0xa10>)
    ccc6:	str	r3, [sp, #12]
    ccc8:	str	r2, [sp, #52]	; 0x34
    ccca:	orrs.w	r3, r4, r5
    ccce:	str	r7, [sp, #40]	; 0x28
    ccd0:	mov.w	r7, #0
    ccd4:	bne.w	cb02 <_svfprintf_r+0x7a2>
    ccd8:	movs	r4, #0
    ccda:	movs	r5, #0
    ccdc:	b.n	cb02 <_svfprintf_r+0x7a2>
    ccde:	ldr	r4, [sp, #148]	; 0x94
    cce0:	b.n	c7ac <_svfprintf_r+0x44c>
    cce2:	ldr	r3, [sp, #52]	; 0x34
    cce4:	cmp	r3, #101	; 0x65
    cce6:	ble.w	ce3e <_svfprintf_r+0xade>
    ccea:	movs	r2, #0
    ccec:	movs	r3, #0
    ccee:	ldrd	r0, r1, [sp, #64]	; 0x40
    ccf2:	bl	b1a0 <__aeabi_dcmpeq>
    ccf6:	cmp	r0, #0
    ccf8:	beq.w	cf68 <_svfprintf_r+0xc08>
    ccfc:	ldr	r3, [sp, #144]	; 0x90
    ccfe:	ldr	r2, [pc, #116]	; (cd74 <_svfprintf_r+0xa14>)
    cd00:	str.w	r2, [r9]
    cd04:	adds	r3, #1
    cd06:	adds	r4, #1
    cd08:	movs	r2, #1
    cd0a:	cmp	r3, #7
    cd0c:	str	r4, [sp, #148]	; 0x94
    cd0e:	str	r3, [sp, #144]	; 0x90
    cd10:	str.w	r2, [r9, #4]
    cd14:	bgt.w	d4f4 <_svfprintf_r+0x1194>
    cd18:	add.w	r9, r9, #8
    cd1c:	ldr	r3, [sp, #116]	; 0x74
    cd1e:	ldr	r2, [sp, #56]	; 0x38
    cd20:	cmp	r3, r2
    cd22:	blt.n	cd2c <_svfprintf_r+0x9cc>
    cd24:	ldr	r3, [sp, #12]
    cd26:	lsls	r3, r3, #31
    cd28:	bpl.w	c88c <_svfprintf_r+0x52c>
    cd2c:	ldr	r3, [sp, #144]	; 0x90
    cd2e:	ldr	r1, [sp, #72]	; 0x48
    cd30:	ldr	r2, [sp, #76]	; 0x4c
    cd32:	str.w	r2, [r9]
    cd36:	adds	r3, #1
    cd38:	add	r4, r1
    cd3a:	cmp	r3, #7
    cd3c:	str	r4, [sp, #148]	; 0x94
    cd3e:	str.w	r1, [r9, #4]
    cd42:	str	r3, [sp, #144]	; 0x90
    cd44:	bgt.w	d5d6 <_svfprintf_r+0x1276>
    cd48:	add.w	r9, r9, #8
    cd4c:	ldr	r3, [sp, #56]	; 0x38
    cd4e:	subs	r5, r3, #1
    cd50:	cmp	r5, #0
    cd52:	ble.w	c88c <_svfprintf_r+0x52c>
    cd56:	ldr	r2, [pc, #32]	; (cd78 <_svfprintf_r+0xa18>)
    cd58:	ldr	r3, [sp, #144]	; 0x90
    cd5a:	str	r2, [sp, #44]	; 0x2c
    cd5c:	cmp	r5, #16
    cd5e:	ble.w	d134 <_svfprintf_r+0xdd4>
    cd62:	movs	r6, #16
    cd64:	ldr	r7, [sp, #24]
    cd66:	ldr.w	fp, [sp, #20]
    cd6a:	b.n	cd88 <_svfprintf_r+0xa28>
    cd6c:	.word	0x2000088c
    cd70:	.word	0x200008a0
    cd74:	.word	0x20000534
    cd78:	.word	0x2000086c
    cd7c:	add.w	r9, r9, #8
    cd80:	subs	r5, #16
    cd82:	cmp	r5, #16
    cd84:	ble.w	d134 <_svfprintf_r+0xdd4>
    cd88:	adds	r3, #1
    cd8a:	adds	r4, #16
    cd8c:	cmp	r3, #7
    cd8e:	str	r4, [sp, #148]	; 0x94
    cd90:	str	r3, [sp, #144]	; 0x90
    cd92:	str.w	sl, [r9]
    cd96:	str.w	r6, [r9, #4]
    cd9a:	ble.n	cd7c <_svfprintf_r+0xa1c>
    cd9c:	add	r2, sp, #140	; 0x8c
    cd9e:	mov	r1, fp
    cda0:	mov	r0, r7
    cda2:	bl	f4a4 <__ssprint_r>
    cda6:	cmp	r0, #0
    cda8:	bne.w	c554 <_svfprintf_r+0x1f4>
    cdac:	ldr	r4, [sp, #148]	; 0x94
    cdae:	ldr	r3, [sp, #144]	; 0x90
    cdb0:	add.w	r9, sp, #192	; 0xc0
    cdb4:	b.n	cd80 <_svfprintf_r+0xa20>
    cdb6:	ldr	r3, [sp, #32]
    cdb8:	ldr	r2, [sp, #16]
    cdba:	subs	r7, r3, r2
    cdbc:	cmp	r7, #0
    cdbe:	ble.w	c7f4 <_svfprintf_r+0x494>
    cdc2:	ldr	r2, [pc, #752]	; (d0b4 <_svfprintf_r+0xd54>)
    cdc4:	ldr	r3, [sp, #144]	; 0x90
    cdc6:	str	r2, [sp, #44]	; 0x2c
    cdc8:	cmp	r7, #16
    cdca:	ble.n	ce24 <_svfprintf_r+0xac4>
    cdcc:	mov	r2, r9
    cdce:	mov	r1, r4
    cdd0:	mov	r9, r7
    cdd2:	movs	r5, #16
    cdd4:	mov	r7, r6
    cdd6:	ldr	r4, [sp, #24]
    cdd8:	ldr	r6, [sp, #20]
    cdda:	b.n	cdea <_svfprintf_r+0xa8a>
    cddc:	sub.w	r9, r9, #16
    cde0:	cmp.w	r9, #16
    cde4:	add.w	r2, r2, #8
    cde8:	ble.n	ce1c <_svfprintf_r+0xabc>
    cdea:	adds	r3, #1
    cdec:	adds	r1, #16
    cdee:	cmp	r3, #7
    cdf0:	str	r1, [sp, #148]	; 0x94
    cdf2:	str	r3, [sp, #144]	; 0x90
    cdf4:	str.w	sl, [r2]
    cdf8:	str	r5, [r2, #4]
    cdfa:	ble.n	cddc <_svfprintf_r+0xa7c>
    cdfc:	add	r2, sp, #140	; 0x8c
    cdfe:	mov	r1, r6
    ce00:	mov	r0, r4
    ce02:	bl	f4a4 <__ssprint_r>
    ce06:	cmp	r0, #0
    ce08:	bne.w	c554 <_svfprintf_r+0x1f4>
    ce0c:	sub.w	r9, r9, #16
    ce10:	cmp.w	r9, #16
    ce14:	ldr	r1, [sp, #148]	; 0x94
    ce16:	ldr	r3, [sp, #144]	; 0x90
    ce18:	add	r2, sp, #192	; 0xc0
    ce1a:	bgt.n	cdea <_svfprintf_r+0xa8a>
    ce1c:	mov	r6, r7
    ce1e:	mov	r4, r1
    ce20:	mov	r7, r9
    ce22:	mov	r9, r2
    ce24:	adds	r3, #1
    ce26:	ldr	r2, [sp, #44]	; 0x2c
    ce28:	str	r3, [sp, #144]	; 0x90
    ce2a:	add	r4, r7
    ce2c:	cmp	r3, #7
    ce2e:	str	r4, [sp, #148]	; 0x94
    ce30:	stmia.w	r9, {r2, r7}
    ce34:	bgt.w	d2b2 <_svfprintf_r+0xf52>
    ce38:	add.w	r9, r9, #8
    ce3c:	b.n	c7f4 <_svfprintf_r+0x494>
    ce3e:	ldr	r3, [sp, #56]	; 0x38
    ce40:	ldr	r5, [sp, #144]	; 0x90
    ce42:	cmp	r3, #1
    ce44:	ble.w	d25c <_svfprintf_r+0xefc>
    ce48:	adds	r5, #1
    ce4a:	adds	r4, #1
    ce4c:	movs	r3, #1
    ce4e:	cmp	r5, #7
    ce50:	str	r4, [sp, #148]	; 0x94
    ce52:	str	r5, [sp, #144]	; 0x90
    ce54:	str.w	r6, [r9]
    ce58:	str.w	r3, [r9, #4]
    ce5c:	bgt.w	d27e <_svfprintf_r+0xf1e>
    ce60:	add.w	r9, r9, #8
    ce64:	ldr	r2, [sp, #72]	; 0x48
    ce66:	ldr	r3, [sp, #76]	; 0x4c
    ce68:	str.w	r3, [r9]
    ce6c:	adds	r5, #1
    ce6e:	add	r4, r2
    ce70:	cmp	r5, #7
    ce72:	str	r4, [sp, #148]	; 0x94
    ce74:	str	r5, [sp, #144]	; 0x90
    ce76:	str.w	r2, [r9, #4]
    ce7a:	bgt.w	d298 <_svfprintf_r+0xf38>
    ce7e:	add.w	r9, r9, #8
    ce82:	movs	r3, #0
    ce84:	movs	r2, #0
    ce86:	ldrd	r0, r1, [sp, #64]	; 0x40
    ce8a:	bl	b1a0 <__aeabi_dcmpeq>
    ce8e:	ldr	r3, [sp, #56]	; 0x38
    ce90:	cmp	r0, #0
    ce92:	bne.w	d01c <_svfprintf_r+0xcbc>
    ce96:	subs	r3, #1
    ce98:	adds	r5, #1
    ce9a:	adds	r6, #1
    ce9c:	add	r4, r3
    ce9e:	cmp	r5, #7
    cea0:	str	r5, [sp, #144]	; 0x90
    cea2:	str	r4, [sp, #148]	; 0x94
    cea4:	str.w	r6, [r9]
    cea8:	str.w	r3, [r9, #4]
    ceac:	bgt.w	d09a <_svfprintf_r+0xd3a>
    ceb0:	add.w	r9, r9, #8
    ceb4:	ldr	r2, [sp, #84]	; 0x54
    ceb6:	str.w	r2, [r9, #4]
    ceba:	adds	r5, #1
    cebc:	add	r4, r2
    cebe:	add	r3, sp, #124	; 0x7c
    cec0:	cmp	r5, #7
    cec2:	str	r4, [sp, #148]	; 0x94
    cec4:	str	r5, [sp, #144]	; 0x90
    cec6:	str.w	r3, [r9]
    ceca:	ble.w	c888 <_svfprintf_r+0x528>
    cece:	add	r2, sp, #140	; 0x8c
    ced0:	ldr	r1, [sp, #20]
    ced2:	ldr	r0, [sp, #24]
    ced4:	bl	f4a4 <__ssprint_r>
    ced8:	cmp	r0, #0
    ceda:	bne.w	c554 <_svfprintf_r+0x1f4>
    cede:	ldr	r4, [sp, #148]	; 0x94
    cee0:	add.w	r9, sp, #192	; 0xc0
    cee4:	b.n	c88c <_svfprintf_r+0x52c>
    cee6:	add	r2, sp, #140	; 0x8c
    cee8:	ldr	r1, [sp, #20]
    ceea:	ldr	r0, [sp, #24]
    ceec:	bl	f4a4 <__ssprint_r>
    cef0:	cmp	r0, #0
    cef2:	beq.w	c928 <_svfprintf_r+0x5c8>
    cef6:	b.w	c554 <_svfprintf_r+0x1f4>
    cefa:	add	r2, sp, #140	; 0x8c
    cefc:	ldr	r1, [sp, #20]
    cefe:	ldr	r0, [sp, #24]
    cf00:	bl	f4a4 <__ssprint_r>
    cf04:	cmp	r0, #0
    cf06:	bne.w	c554 <_svfprintf_r+0x1f4>
    cf0a:	ldr	r4, [sp, #148]	; 0x94
    cf0c:	add.w	r9, sp, #192	; 0xc0
    cf10:	b.n	c866 <_svfprintf_r+0x506>
    cf12:	add	r2, sp, #140	; 0x8c
    cf14:	ldr	r1, [sp, #20]
    cf16:	ldr	r0, [sp, #24]
    cf18:	bl	f4a4 <__ssprint_r>
    cf1c:	cmp	r0, #0
    cf1e:	bne.w	c554 <_svfprintf_r+0x1f4>
    cf22:	ldr	r4, [sp, #148]	; 0x94
    cf24:	add.w	r9, sp, #192	; 0xc0
    cf28:	b.n	c7cc <_svfprintf_r+0x46c>
    cf2a:	add	r2, sp, #140	; 0x8c
    cf2c:	ldr	r1, [sp, #20]
    cf2e:	ldr	r0, [sp, #24]
    cf30:	bl	f4a4 <__ssprint_r>
    cf34:	cmp	r0, #0
    cf36:	bne.w	c554 <_svfprintf_r+0x1f4>
    cf3a:	ldr	r4, [sp, #148]	; 0x94
    cf3c:	add.w	r9, sp, #192	; 0xc0
    cf40:	b.n	c7ec <_svfprintf_r+0x48c>
    cf42:	cmp.w	fp, #0
    cf46:	strb.w	r7, [sp, #111]	; 0x6f
    cf4a:	blt.w	d50c <_svfprintf_r+0x11ac>
    cf4e:	bic.w	r3, r2, #128	; 0x80
    cf52:	str	r3, [sp, #12]
    cf54:	orrs.w	r3, r4, r5
    cf58:	bne.w	cb02 <_svfprintf_r+0x7a2>
    cf5c:	cmp.w	fp, #0
    cf60:	beq.w	cc7c <_svfprintf_r+0x91c>
    cf64:	movs	r7, #0
    cf66:	b.n	ccd8 <_svfprintf_r+0x978>
    cf68:	ldr	r5, [sp, #116]	; 0x74
    cf6a:	cmp	r5, #0
    cf6c:	ble.w	d512 <_svfprintf_r+0x11b2>
    cf70:	ldr	r3, [sp, #60]	; 0x3c
    cf72:	ldr	r2, [sp, #56]	; 0x38
    cf74:	cmp	r3, r2
    cf76:	it	ge
    cf78:	movge	r3, r2
    cf7a:	cmp	r3, #0
    cf7c:	mov	r5, r3
    cf7e:	ble.n	cf9c <_svfprintf_r+0xc3c>
    cf80:	ldr	r3, [sp, #144]	; 0x90
    cf82:	str.w	r6, [r9]
    cf86:	adds	r3, #1
    cf88:	add	r4, r5
    cf8a:	cmp	r3, #7
    cf8c:	str	r4, [sp, #148]	; 0x94
    cf8e:	str.w	r5, [r9, #4]
    cf92:	str	r3, [sp, #144]	; 0x90
    cf94:	bgt.w	d6ea <_svfprintf_r+0x138a>
    cf98:	add.w	r9, r9, #8
    cf9c:	ldr	r3, [sp, #60]	; 0x3c
    cf9e:	cmp	r5, #0
    cfa0:	it	ge
    cfa2:	subge	r3, r3, r5
    cfa4:	cmp	r3, #0
    cfa6:	mov	r5, r3
    cfa8:	ble.w	d19c <_svfprintf_r+0xe3c>
    cfac:	ldr	r2, [pc, #260]	; (d0b4 <_svfprintf_r+0xd54>)
    cfae:	ldr	r3, [sp, #144]	; 0x90
    cfb0:	str	r2, [sp, #44]	; 0x2c
    cfb2:	cmp	r5, #16
    cfb4:	ble.w	d4be <_svfprintf_r+0x115e>
    cfb8:	mov	r2, r4
    cfba:	movs	r7, #16
    cfbc:	ldr.w	fp, [sp, #24]
    cfc0:	ldr	r4, [sp, #20]
    cfc2:	b.n	cfd0 <_svfprintf_r+0xc70>
    cfc4:	add.w	r9, r9, #8
    cfc8:	subs	r5, #16
    cfca:	cmp	r5, #16
    cfcc:	ble.w	d4bc <_svfprintf_r+0x115c>
    cfd0:	adds	r3, #1
    cfd2:	adds	r2, #16
    cfd4:	cmp	r3, #7
    cfd6:	str	r2, [sp, #148]	; 0x94
    cfd8:	str	r3, [sp, #144]	; 0x90
    cfda:	str.w	sl, [r9]
    cfde:	str.w	r7, [r9, #4]
    cfe2:	ble.n	cfc4 <_svfprintf_r+0xc64>
    cfe4:	add	r2, sp, #140	; 0x8c
    cfe6:	mov	r1, r4
    cfe8:	mov	r0, fp
    cfea:	bl	f4a4 <__ssprint_r>
    cfee:	cmp	r0, #0
    cff0:	bne.w	c554 <_svfprintf_r+0x1f4>
    cff4:	ldr	r2, [sp, #148]	; 0x94
    cff6:	ldr	r3, [sp, #144]	; 0x90
    cff8:	add.w	r9, sp, #192	; 0xc0
    cffc:	b.n	cfc8 <_svfprintf_r+0xc68>
    cffe:	add	r2, sp, #140	; 0x8c
    d000:	ldr	r1, [sp, #20]
    d002:	ldr	r0, [sp, #24]
    d004:	bl	f4a4 <__ssprint_r>
    d008:	cmp	r0, #0
    d00a:	bne.w	c554 <_svfprintf_r+0x1f4>
    d00e:	ldrb.w	r7, [sp, #111]	; 0x6f
    d012:	ldr	r4, [sp, #148]	; 0x94
    d014:	add.w	r9, sp, #192	; 0xc0
    d018:	b.w	c7ac <_svfprintf_r+0x44c>
    d01c:	subs	r6, r3, #1
    d01e:	cmp	r6, #0
    d020:	ble.w	ceb4 <_svfprintf_r+0xb54>
    d024:	ldr	r3, [pc, #140]	; (d0b4 <_svfprintf_r+0xd54>)
    d026:	str	r3, [sp, #44]	; 0x2c
    d028:	cmp	r6, #16
    d02a:	ble.n	d086 <_svfprintf_r+0xd26>
    d02c:	str.w	r8, [sp, #36]	; 0x24
    d030:	movs	r7, #16
    d032:	mov	r8, r6
    d034:	ldr.w	fp, [sp, #24]
    d038:	ldr	r6, [sp, #20]
    d03a:	b.n	d04a <_svfprintf_r+0xcea>
    d03c:	sub.w	r8, r8, #16
    d040:	cmp.w	r8, #16
    d044:	add.w	r9, r9, #8
    d048:	ble.n	d080 <_svfprintf_r+0xd20>
    d04a:	adds	r5, #1
    d04c:	adds	r4, #16
    d04e:	cmp	r5, #7
    d050:	str	r4, [sp, #148]	; 0x94
    d052:	str	r5, [sp, #144]	; 0x90
    d054:	str.w	sl, [r9]
    d058:	str.w	r7, [r9, #4]
    d05c:	ble.n	d03c <_svfprintf_r+0xcdc>
    d05e:	add	r2, sp, #140	; 0x8c
    d060:	mov	r1, r6
    d062:	mov	r0, fp
    d064:	bl	f4a4 <__ssprint_r>
    d068:	cmp	r0, #0
    d06a:	bne.w	c554 <_svfprintf_r+0x1f4>
    d06e:	sub.w	r8, r8, #16
    d072:	cmp.w	r8, #16
    d076:	ldr	r4, [sp, #148]	; 0x94
    d078:	ldr	r5, [sp, #144]	; 0x90
    d07a:	add.w	r9, sp, #192	; 0xc0
    d07e:	bgt.n	d04a <_svfprintf_r+0xcea>
    d080:	mov	r6, r8
    d082:	ldr.w	r8, [sp, #36]	; 0x24
    d086:	ldr	r3, [sp, #44]	; 0x2c
    d088:	adds	r5, #1
    d08a:	add	r4, r6
    d08c:	cmp	r5, #7
    d08e:	str	r4, [sp, #148]	; 0x94
    d090:	str	r5, [sp, #144]	; 0x90
    d092:	stmia.w	r9, {r3, r6}
    d096:	ble.w	ceb0 <_svfprintf_r+0xb50>
    d09a:	add	r2, sp, #140	; 0x8c
    d09c:	ldr	r1, [sp, #20]
    d09e:	ldr	r0, [sp, #24]
    d0a0:	bl	f4a4 <__ssprint_r>
    d0a4:	cmp	r0, #0
    d0a6:	bne.w	c554 <_svfprintf_r+0x1f4>
    d0aa:	ldr	r4, [sp, #148]	; 0x94
    d0ac:	ldr	r5, [sp, #144]	; 0x90
    d0ae:	add.w	r9, sp, #192	; 0xc0
    d0b2:	b.n	ceb4 <_svfprintf_r+0xb54>
    d0b4:	.word	0x2000086c
    d0b8:	ldr	r1, [sp, #12]
    d0ba:	ands.w	r2, r1, #16
    d0be:	beq.w	d468 <_svfprintf_r+0x1108>
    d0c2:	ldr	r0, [sp, #40]	; 0x28
    d0c4:	strb.w	r3, [sp, #111]	; 0x6f
    d0c8:	cmp.w	fp, #0
    d0cc:	ldr	r4, [r0, #0]
    d0ce:	add.w	r7, r0, #4
    d0d2:	mov.w	r5, #0
    d0d6:	blt.n	d126 <_svfprintf_r+0xdc6>
    d0d8:	mov	r2, r1
    d0da:	bic.w	r2, r2, #128	; 0x80
    d0de:	str	r2, [sp, #12]
    d0e0:	orrs.w	r2, r4, r5
    d0e4:	str	r7, [sp, #40]	; 0x28
    d0e6:	mov	r7, r3
    d0e8:	bne.w	c6bc <_svfprintf_r+0x35c>
    d0ec:	b.n	ca8c <_svfprintf_r+0x72c>
    d0ee:	ldr	r3, [sp, #12]
    d0f0:	lsls	r0, r3, #27
    d0f2:	bmi.n	d14a <_svfprintf_r+0xdea>
    d0f4:	ldr	r3, [sp, #12]
    d0f6:	lsls	r1, r3, #25
    d0f8:	bpl.n	d14a <_svfprintf_r+0xdea>
    d0fa:	ldr	r1, [sp, #40]	; 0x28
    d0fc:	ldrsh.w	r4, [r1]
    d100:	adds	r1, #4
    d102:	asrs	r5, r4, #31
    d104:	mov	r2, r4
    d106:	mov	r3, r5
    d108:	str	r1, [sp, #40]	; 0x28
    d10a:	b.w	c696 <_svfprintf_r+0x336>
    d10e:	ldr	r1, [sp, #40]	; 0x28
    d110:	strb.w	r3, [sp, #111]	; 0x6f
    d114:	cmp.w	fp, #0
    d118:	ldr	r4, [r1, #0]
    d11a:	add.w	r7, r1, #4
    d11e:	mov.w	r5, #0
    d122:	bge.w	d5be <_svfprintf_r+0x125e>
    d126:	str	r7, [sp, #40]	; 0x28
    d128:	mov	r7, r3
    d12a:	orrs.w	r3, r4, r5
    d12e:	bne.w	c6bc <_svfprintf_r+0x35c>
    d132:	b.n	ca96 <_svfprintf_r+0x736>
    d134:	adds	r3, #1
    d136:	ldr	r2, [sp, #44]	; 0x2c
    d138:	str	r3, [sp, #144]	; 0x90
    d13a:	add	r4, r5
    d13c:	cmp	r3, #7
    d13e:	str	r4, [sp, #148]	; 0x94
    d140:	stmia.w	r9, {r2, r5}
    d144:	ble.w	c888 <_svfprintf_r+0x528>
    d148:	b.n	cece <_svfprintf_r+0xb6e>
    d14a:	ldr	r2, [sp, #40]	; 0x28
    d14c:	ldr	r4, [r2, #0]
    d14e:	mov	r3, r2
    d150:	adds	r3, #4
    d152:	asrs	r5, r4, #31
    d154:	mov	r2, r4
    d156:	str	r3, [sp, #40]	; 0x28
    d158:	cmp	r2, #0
    d15a:	mov	r3, r5
    d15c:	sbcs.w	r3, r3, #0
    d160:	bge.w	c6a0 <_svfprintf_r+0x340>
    d164:	negs	r4, r4
    d166:	mov.w	r7, #45	; 0x2d
    d16a:	sbc.w	r5, r5, r5, lsl #1
    d16e:	cmp.w	fp, #0
    d172:	strb.w	r7, [sp, #111]	; 0x6f
    d176:	blt.w	c6bc <_svfprintf_r+0x35c>
    d17a:	ldr	r3, [sp, #12]
    d17c:	bic.w	r3, r3, #128	; 0x80
    d180:	str	r3, [sp, #12]
    d182:	b.w	c6bc <_svfprintf_r+0x35c>
    d186:	add	r2, sp, #140	; 0x8c
    d188:	ldr	r1, [sp, #20]
    d18a:	ldr	r0, [sp, #24]
    d18c:	bl	f4a4 <__ssprint_r>
    d190:	cmp	r0, #0
    d192:	bne.w	c554 <_svfprintf_r+0x1f4>
    d196:	ldr	r4, [sp, #148]	; 0x94
    d198:	add.w	r9, sp, #192	; 0xc0
    d19c:	ldr	r2, [sp, #60]	; 0x3c
    d19e:	ldr	r3, [sp, #116]	; 0x74
    d1a0:	add	r2, r6
    d1a2:	mov	r7, r2
    d1a4:	ldr	r2, [sp, #56]	; 0x38
    d1a6:	cmp	r3, r2
    d1a8:	blt.n	d23a <_svfprintf_r+0xeda>
    d1aa:	ldr	r2, [sp, #12]
    d1ac:	lsls	r5, r2, #31
    d1ae:	bmi.n	d23a <_svfprintf_r+0xeda>
    d1b0:	ldr	r1, [sp, #56]	; 0x38
    d1b2:	add	r6, r1
    d1b4:	subs	r5, r6, r7
    d1b6:	subs	r3, r1, r3
    d1b8:	cmp	r5, r3
    d1ba:	it	ge
    d1bc:	movge	r5, r3
    d1be:	cmp	r5, #0
    d1c0:	mov	r6, r5
    d1c2:	ble.n	d1e0 <_svfprintf_r+0xe80>
    d1c4:	ldr	r2, [sp, #144]	; 0x90
    d1c6:	str.w	r7, [r9]
    d1ca:	adds	r2, #1
    d1cc:	add	r4, r5
    d1ce:	cmp	r2, #7
    d1d0:	str	r4, [sp, #148]	; 0x94
    d1d2:	str.w	r5, [r9, #4]
    d1d6:	str	r2, [sp, #144]	; 0x90
    d1d8:	bgt.w	d7d8 <_svfprintf_r+0x1478>
    d1dc:	add.w	r9, r9, #8
    d1e0:	cmp	r6, #0
    d1e2:	ite	ge
    d1e4:	subge	r5, r3, r6
    d1e6:	movlt	r5, r3
    d1e8:	cmp	r5, #0
    d1ea:	ble.w	c88c <_svfprintf_r+0x52c>
    d1ee:	ldr	r2, [pc, #744]	; (d4d8 <_svfprintf_r+0x1178>)
    d1f0:	ldr	r3, [sp, #144]	; 0x90
    d1f2:	str	r2, [sp, #44]	; 0x2c
    d1f4:	cmp	r5, #16
    d1f6:	ble.n	d134 <_svfprintf_r+0xdd4>
    d1f8:	movs	r6, #16
    d1fa:	ldr	r7, [sp, #24]
    d1fc:	ldr.w	fp, [sp, #20]
    d200:	b.n	d20c <_svfprintf_r+0xeac>
    d202:	add.w	r9, r9, #8
    d206:	subs	r5, #16
    d208:	cmp	r5, #16
    d20a:	ble.n	d134 <_svfprintf_r+0xdd4>
    d20c:	adds	r3, #1
    d20e:	adds	r4, #16
    d210:	cmp	r3, #7
    d212:	str	r4, [sp, #148]	; 0x94
    d214:	str	r3, [sp, #144]	; 0x90
    d216:	str.w	sl, [r9]
    d21a:	str.w	r6, [r9, #4]
    d21e:	ble.n	d202 <_svfprintf_r+0xea2>
    d220:	add	r2, sp, #140	; 0x8c
    d222:	mov	r1, fp
    d224:	mov	r0, r7
    d226:	bl	f4a4 <__ssprint_r>
    d22a:	cmp	r0, #0
    d22c:	bne.w	c554 <_svfprintf_r+0x1f4>
    d230:	ldr	r4, [sp, #148]	; 0x94
    d232:	ldr	r3, [sp, #144]	; 0x90
    d234:	add.w	r9, sp, #192	; 0xc0
    d238:	b.n	d206 <_svfprintf_r+0xea6>
    d23a:	ldr	r2, [sp, #144]	; 0x90
    d23c:	ldr	r0, [sp, #72]	; 0x48
    d23e:	ldr	r1, [sp, #76]	; 0x4c
    d240:	str.w	r1, [r9]
    d244:	adds	r2, #1
    d246:	add	r4, r0
    d248:	cmp	r2, #7
    d24a:	str	r4, [sp, #148]	; 0x94
    d24c:	str.w	r0, [r9, #4]
    d250:	str	r2, [sp, #144]	; 0x90
    d252:	bgt.w	d7be <_svfprintf_r+0x145e>
    d256:	add.w	r9, r9, #8
    d25a:	b.n	d1b0 <_svfprintf_r+0xe50>
    d25c:	ldr	r3, [sp, #12]
    d25e:	lsls	r0, r3, #31
    d260:	bmi.w	ce48 <_svfprintf_r+0xae8>
    d264:	adds	r5, #1
    d266:	adds	r4, #1
    d268:	movs	r3, #1
    d26a:	cmp	r5, #7
    d26c:	str	r4, [sp, #148]	; 0x94
    d26e:	str	r5, [sp, #144]	; 0x90
    d270:	str.w	r6, [r9]
    d274:	str.w	r3, [r9, #4]
    d278:	ble.w	ceb0 <_svfprintf_r+0xb50>
    d27c:	b.n	d09a <_svfprintf_r+0xd3a>
    d27e:	add	r2, sp, #140	; 0x8c
    d280:	ldr	r1, [sp, #20]
    d282:	ldr	r0, [sp, #24]
    d284:	bl	f4a4 <__ssprint_r>
    d288:	cmp	r0, #0
    d28a:	bne.w	c554 <_svfprintf_r+0x1f4>
    d28e:	ldr	r4, [sp, #148]	; 0x94
    d290:	ldr	r5, [sp, #144]	; 0x90
    d292:	add.w	r9, sp, #192	; 0xc0
    d296:	b.n	ce64 <_svfprintf_r+0xb04>
    d298:	add	r2, sp, #140	; 0x8c
    d29a:	ldr	r1, [sp, #20]
    d29c:	ldr	r0, [sp, #24]
    d29e:	bl	f4a4 <__ssprint_r>
    d2a2:	cmp	r0, #0
    d2a4:	bne.w	c554 <_svfprintf_r+0x1f4>
    d2a8:	ldr	r4, [sp, #148]	; 0x94
    d2aa:	ldr	r5, [sp, #144]	; 0x90
    d2ac:	add.w	r9, sp, #192	; 0xc0
    d2b0:	b.n	ce82 <_svfprintf_r+0xb22>
    d2b2:	add	r2, sp, #140	; 0x8c
    d2b4:	ldr	r1, [sp, #20]
    d2b6:	ldr	r0, [sp, #24]
    d2b8:	bl	f4a4 <__ssprint_r>
    d2bc:	cmp	r0, #0
    d2be:	bne.w	c554 <_svfprintf_r+0x1f4>
    d2c2:	ldr	r4, [sp, #148]	; 0x94
    d2c4:	add.w	r9, sp, #192	; 0xc0
    d2c8:	b.w	c7f4 <_svfprintf_r+0x494>
    d2cc:	ldr	r1, [sp, #12]
    d2ce:	ands.w	r3, r1, #64	; 0x40
    d2d2:	beq.w	d448 <_svfprintf_r+0x10e8>
    d2d6:	ldr	r0, [sp, #40]	; 0x28
    d2d8:	strb.w	r2, [sp, #111]	; 0x6f
    d2dc:	mov	r3, r0
    d2de:	cmp.w	fp, #0
    d2e2:	add.w	r3, r3, #4
    d2e6:	ldrh	r4, [r0, #0]
    d2e8:	mov.w	r5, #0
    d2ec:	blt.w	d670 <_svfprintf_r+0x1310>
    d2f0:	bic.w	r1, r1, #128	; 0x80
    d2f4:	str	r1, [sp, #12]
    d2f6:	orrs.w	r1, r4, r5
    d2fa:	str	r3, [sp, #40]	; 0x28
    d2fc:	beq.w	ccb4 <_svfprintf_r+0x954>
    d300:	mov	r7, r2
    d302:	b.w	c5ac <_svfprintf_r+0x24c>
    d306:	ldr	r3, [sp, #12]
    d308:	lsls	r7, r3, #27
    d30a:	bmi.n	d324 <_svfprintf_r+0xfc4>
    d30c:	ldr	r3, [sp, #12]
    d30e:	lsls	r6, r3, #25
    d310:	bpl.n	d324 <_svfprintf_r+0xfc4>
    d312:	ldr	r2, [sp, #40]	; 0x28
    d314:	ldr	r3, [r2, #0]
    d316:	adds	r2, #4
    d318:	str	r2, [sp, #40]	; 0x28
    d31a:	ldrh.w	r2, [sp, #28]
    d31e:	strh	r2, [r3, #0]
    d320:	b.w	c3ae <_svfprintf_r+0x4e>
    d324:	ldr	r2, [sp, #40]	; 0x28
    d326:	ldr	r3, [r2, #0]
    d328:	adds	r2, #4
    d32a:	str	r2, [sp, #40]	; 0x28
    d32c:	ldr	r2, [sp, #28]
    d32e:	str	r2, [r3, #0]
    d330:	b.w	c3ae <_svfprintf_r+0x4e>
    d334:	ldrd	r0, r1, [sp, #64]	; 0x40
    d338:	mov	r2, r0
    d33a:	mov	r3, r1
    d33c:	bl	b204 <__aeabi_dcmpun>
    d340:	cmp	r0, #0
    d342:	bne.w	d940 <_svfprintf_r+0x15e0>
    d346:	ldr	r3, [sp, #52]	; 0x34
    d348:	cmp.w	fp, #4294967295
    d34c:	bic.w	r7, r3, #32
    d350:	beq.w	d822 <_svfprintf_r+0x14c2>
    d354:	cmp	r7, #71	; 0x47
    d356:	beq.w	d65e <_svfprintf_r+0x12fe>
    d35a:	ldr	r3, [sp, #68]	; 0x44
    d35c:	ldr	r2, [sp, #12]
    d35e:	cmp	r3, #0
    d360:	orr.w	r2, r2, #256	; 0x100
    d364:	str	r2, [sp, #44]	; 0x2c
    d366:	blt.w	d85a <_svfprintf_r+0x14fa>
    d36a:	vldr	d7, [sp, #64]	; 0x40
    d36e:	vstr	d7, [sp, #96]	; 0x60
    d372:	movs	r3, #0
    d374:	str	r3, [sp, #16]
    d376:	ldr	r3, [sp, #52]	; 0x34
    d378:	cmp	r3, #102	; 0x66
    d37a:	beq.w	d828 <_svfprintf_r+0x14c8>
    d37e:	cmp	r3, #70	; 0x46
    d380:	beq.w	d60e <_svfprintf_r+0x12ae>
    d384:	cmp	r7, #69	; 0x45
    d386:	ite	eq
    d388:	addeq.w	r5, fp, #1
    d38c:	movne	r5, fp
    d38e:	add	r2, sp, #132	; 0x84
    d390:	add	r3, sp, #120	; 0x78
    d392:	str	r2, [sp, #4]
    d394:	str	r3, [sp, #0]
    d396:	mov	r2, r5
    d398:	add	r3, sp, #116	; 0x74
    d39a:	movs	r1, #2
    d39c:	vldr	d0, [sp, #96]	; 0x60
    d3a0:	ldr	r0, [sp, #24]
    d3a2:	bl	dc18 <_dtoa_r>
    d3a6:	ldr	r3, [sp, #52]	; 0x34
    d3a8:	cmp	r3, #103	; 0x67
    d3aa:	mov	r6, r0
    d3ac:	bne.w	d886 <_svfprintf_r+0x1526>
    d3b0:	ldr	r3, [sp, #12]
    d3b2:	lsls	r2, r3, #31
    d3b4:	bpl.w	d92a <_svfprintf_r+0x15ca>
    d3b8:	adds	r4, r6, r5
    d3ba:	movs	r2, #0
    d3bc:	movs	r3, #0
    d3be:	ldrd	r0, r1, [sp, #96]	; 0x60
    d3c2:	bl	b1a0 <__aeabi_dcmpeq>
    d3c6:	cmp	r0, #0
    d3c8:	bne.w	d6e6 <_svfprintf_r+0x1386>
    d3cc:	ldr	r3, [sp, #132]	; 0x84
    d3ce:	cmp	r4, r3
    d3d0:	bls.n	d3e0 <_svfprintf_r+0x1080>
    d3d2:	movs	r1, #48	; 0x30
    d3d4:	adds	r2, r3, #1
    d3d6:	str	r2, [sp, #132]	; 0x84
    d3d8:	strb	r1, [r3, #0]
    d3da:	ldr	r3, [sp, #132]	; 0x84
    d3dc:	cmp	r4, r3
    d3de:	bhi.n	d3d4 <_svfprintf_r+0x1074>
    d3e0:	subs	r3, r3, r6
    d3e2:	cmp	r7, #71	; 0x47
    d3e4:	str	r3, [sp, #56]	; 0x38
    d3e6:	beq.w	d6d8 <_svfprintf_r+0x1378>
    d3ea:	ldr	r3, [sp, #52]	; 0x34
    d3ec:	cmp	r3, #101	; 0x65
    d3ee:	ble.w	d8a4 <_svfprintf_r+0x1544>
    d3f2:	ldr	r3, [sp, #52]	; 0x34
    d3f4:	cmp	r3, #102	; 0x66
    d3f6:	ldr	r3, [sp, #116]	; 0x74
    d3f8:	str	r3, [sp, #60]	; 0x3c
    d3fa:	beq.w	d8be <_svfprintf_r+0x155e>
    d3fe:	ldr	r2, [sp, #60]	; 0x3c
    d400:	ldr	r1, [sp, #56]	; 0x38
    d402:	cmp	r2, r1
    d404:	blt.w	d86c <_svfprintf_r+0x150c>
    d408:	ldr	r3, [sp, #12]
    d40a:	lsls	r1, r3, #31
    d40c:	bmi.w	d92e <_svfprintf_r+0x15ce>
    d410:	bic.w	r3, r2, r2, asr #31
    d414:	str	r2, [sp, #36]	; 0x24
    d416:	movs	r2, #103	; 0x67
    d418:	str	r2, [sp, #52]	; 0x34
    d41a:	ldr	r2, [sp, #16]
    d41c:	cmp	r2, #0
    d41e:	bne.w	d680 <_svfprintf_r+0x1320>
    d422:	str	r3, [sp, #16]
    d424:	ldr	r3, [sp, #44]	; 0x2c
    d426:	str	r3, [sp, #12]
    d428:	mov	fp, r2
    d42a:	ldrb.w	r7, [sp, #111]	; 0x6f
    d42e:	b.w	c704 <_svfprintf_r+0x3a4>
    d432:	bic.w	r7, r7, #7
    d436:	vldr	d7, [r7]
    d43a:	add.w	r3, r7, #8
    d43e:	vstr	d7, [sp, #64]	; 0x40
    d442:	str	r3, [sp, #40]	; 0x28
    d444:	b.w	c95c <_svfprintf_r+0x5fc>
    d448:	ldr	r1, [sp, #40]	; 0x28
    d44a:	strb.w	r3, [sp, #111]	; 0x6f
    d44e:	cmp.w	fp, #0
    d452:	ldr	r4, [r1, #0]
    d454:	add.w	r7, r1, #4
    d458:	mov.w	r5, #0
    d45c:	bge.w	d5b8 <_svfprintf_r+0x1258>
    d460:	str	r7, [sp, #40]	; 0x28
    d462:	movs	r7, #0
    d464:	b.w	c5ac <_svfprintf_r+0x24c>
    d468:	ldr	r1, [sp, #12]
    d46a:	ands.w	r3, r1, #64	; 0x40
    d46e:	beq.w	d10e <_svfprintf_r+0xdae>
    d472:	ldr	r0, [sp, #40]	; 0x28
    d474:	strb.w	r2, [sp, #111]	; 0x6f
    d478:	mov	r3, r0
    d47a:	cmp.w	fp, #0
    d47e:	add.w	r3, r3, #4
    d482:	ldrh	r4, [r0, #0]
    d484:	mov.w	r5, #0
    d488:	blt.w	d66a <_svfprintf_r+0x130a>
    d48c:	bic.w	r1, r1, #128	; 0x80
    d490:	str	r1, [sp, #12]
    d492:	orrs.w	r1, r4, r5
    d496:	str	r3, [sp, #40]	; 0x28
    d498:	mov	r7, r2
    d49a:	bne.w	c6bc <_svfprintf_r+0x35c>
    d49e:	b.w	ca8c <_svfprintf_r+0x72c>
    d4a2:	ldr	r3, [sp, #12]
    d4a4:	ldr	r2, [sp, #40]	; 0x28
    d4a6:	tst.w	r3, #64	; 0x40
    d4aa:	mov	r3, r2
    d4ac:	beq.w	d674 <_svfprintf_r+0x1314>
    d4b0:	adds	r3, #4
    d4b2:	ldrh	r4, [r2, #0]
    d4b4:	str	r3, [sp, #40]	; 0x28
    d4b6:	movs	r5, #0
    d4b8:	b.w	cac6 <_svfprintf_r+0x766>
    d4bc:	mov	r4, r2
    d4be:	adds	r3, #1
    d4c0:	ldr	r2, [sp, #44]	; 0x2c
    d4c2:	str	r3, [sp, #144]	; 0x90
    d4c4:	add	r4, r5
    d4c6:	cmp	r3, #7
    d4c8:	str	r4, [sp, #148]	; 0x94
    d4ca:	stmia.w	r9, {r2, r5}
    d4ce:	bgt.w	d186 <_svfprintf_r+0xe26>
    d4d2:	add.w	r9, r9, #8
    d4d6:	b.n	d19c <_svfprintf_r+0xe3c>
    d4d8:	.word	0x2000086c
    d4dc:	movs	r7, #0
    d4de:	cmp	fp, r7
    d4e0:	strb.w	r7, [sp, #111]	; 0x6f
    d4e4:	blt.w	ccd8 <_svfprintf_r+0x978>
    d4e8:	ldr	r3, [sp, #12]
    d4ea:	bic.w	r3, r3, #128	; 0x80
    d4ee:	str	r3, [sp, #12]
    d4f0:	b.w	cc74 <_svfprintf_r+0x914>
    d4f4:	add	r2, sp, #140	; 0x8c
    d4f6:	ldr	r1, [sp, #20]
    d4f8:	ldr	r0, [sp, #24]
    d4fa:	bl	f4a4 <__ssprint_r>
    d4fe:	cmp	r0, #0
    d500:	bne.w	c554 <_svfprintf_r+0x1f4>
    d504:	ldr	r4, [sp, #148]	; 0x94
    d506:	add.w	r9, sp, #192	; 0xc0
    d50a:	b.n	cd1c <_svfprintf_r+0x9bc>
    d50c:	ldr	r7, [sp, #40]	; 0x28
    d50e:	b.w	ccca <_svfprintf_r+0x96a>
    d512:	ldr	r3, [sp, #144]	; 0x90
    d514:	ldr	r2, [pc, #736]	; (d7f8 <_svfprintf_r+0x1498>)
    d516:	str.w	r2, [r9]
    d51a:	adds	r3, #1
    d51c:	adds	r4, #1
    d51e:	movs	r2, #1
    d520:	cmp	r3, #7
    d522:	str	r4, [sp, #148]	; 0x94
    d524:	str	r3, [sp, #144]	; 0x90
    d526:	str.w	r2, [r9, #4]
    d52a:	bgt.w	d644 <_svfprintf_r+0x12e4>
    d52e:	add.w	r9, r9, #8
    d532:	cbnz	r5, d540 <_svfprintf_r+0x11e0>
    d534:	ldr	r3, [sp, #56]	; 0x38
    d536:	cbnz	r3, d540 <_svfprintf_r+0x11e0>
    d538:	ldr	r3, [sp, #12]
    d53a:	lsls	r7, r3, #31
    d53c:	bpl.w	c88c <_svfprintf_r+0x52c>
    d540:	ldr	r3, [sp, #144]	; 0x90
    d542:	ldr	r1, [sp, #72]	; 0x48
    d544:	ldr	r2, [sp, #76]	; 0x4c
    d546:	str.w	r2, [r9]
    d54a:	adds	r3, #1
    d54c:	add	r4, r1
    d54e:	cmp	r3, #7
    d550:	str	r4, [sp, #148]	; 0x94
    d552:	str.w	r1, [r9, #4]
    d556:	str	r3, [sp, #144]	; 0x90
    d558:	bgt.w	d8f6 <_svfprintf_r+0x1596>
    d55c:	add.w	r9, r9, #8
    d560:	negs	r5, r5
    d562:	cmp	r5, #0
    d564:	ble.w	d6bc <_svfprintf_r+0x135c>
    d568:	ldr	r2, [pc, #656]	; (d7fc <_svfprintf_r+0x149c>)
    d56a:	str	r2, [sp, #44]	; 0x2c
    d56c:	cmp	r5, #16
    d56e:	ble.w	d704 <_svfprintf_r+0x13a4>
    d572:	mov	r2, r4
    d574:	movs	r7, #16
    d576:	ldr.w	fp, [sp, #24]
    d57a:	ldr	r4, [sp, #20]
    d57c:	b.n	d58a <_svfprintf_r+0x122a>
    d57e:	add.w	r9, r9, #8
    d582:	subs	r5, #16
    d584:	cmp	r5, #16
    d586:	ble.w	d702 <_svfprintf_r+0x13a2>
    d58a:	adds	r3, #1
    d58c:	adds	r2, #16
    d58e:	cmp	r3, #7
    d590:	str	r2, [sp, #148]	; 0x94
    d592:	str	r3, [sp, #144]	; 0x90
    d594:	str.w	sl, [r9]
    d598:	str.w	r7, [r9, #4]
    d59c:	ble.n	d57e <_svfprintf_r+0x121e>
    d59e:	add	r2, sp, #140	; 0x8c
    d5a0:	mov	r1, r4
    d5a2:	mov	r0, fp
    d5a4:	bl	f4a4 <__ssprint_r>
    d5a8:	cmp	r0, #0
    d5aa:	bne.w	c554 <_svfprintf_r+0x1f4>
    d5ae:	ldr	r2, [sp, #148]	; 0x94
    d5b0:	ldr	r3, [sp, #144]	; 0x90
    d5b2:	add.w	r9, sp, #192	; 0xc0
    d5b6:	b.n	d582 <_svfprintf_r+0x1222>
    d5b8:	ldr	r2, [sp, #12]
    d5ba:	b.w	ca30 <_svfprintf_r+0x6d0>
    d5be:	ldr	r2, [sp, #12]
    d5c0:	b.n	d0da <_svfprintf_r+0xd7a>
    d5c2:	ldr	r3, [sp, #12]
    d5c4:	orr.w	r3, r3, #32
    d5c8:	str	r3, [sp, #12]
    d5ca:	add.w	r8, r8, #1
    d5ce:	ldrb.w	r3, [r8]
    d5d2:	b.w	c414 <_svfprintf_r+0xb4>
    d5d6:	add	r2, sp, #140	; 0x8c
    d5d8:	ldr	r1, [sp, #20]
    d5da:	ldr	r0, [sp, #24]
    d5dc:	bl	f4a4 <__ssprint_r>
    d5e0:	cmp	r0, #0
    d5e2:	bne.w	c554 <_svfprintf_r+0x1f4>
    d5e6:	ldr	r4, [sp, #148]	; 0x94
    d5e8:	add.w	r9, sp, #192	; 0xc0
    d5ec:	b.w	cd4c <_svfprintf_r+0x9ec>
    d5f0:	movs	r1, #64	; 0x40
    d5f2:	ldr	r0, [sp, #24]
    d5f4:	bl	b5c8 <_malloc_r>
    d5f8:	ldr	r2, [sp, #20]
    d5fa:	str	r0, [r2, #0]
    d5fc:	str	r0, [r2, #16]
    d5fe:	cmp	r0, #0
    d600:	beq.w	d9ea <_svfprintf_r+0x168a>
    d604:	ldr	r2, [sp, #20]
    d606:	movs	r3, #64	; 0x40
    d608:	str	r3, [r2, #20]
    d60a:	b.w	c38e <_svfprintf_r+0x2e>
    d60e:	add	r2, sp, #132	; 0x84
    d610:	add	r3, sp, #120	; 0x78
    d612:	str	r2, [sp, #4]
    d614:	str	r3, [sp, #0]
    d616:	mov	r2, fp
    d618:	add	r3, sp, #116	; 0x74
    d61a:	movs	r1, #3
    d61c:	vldr	d0, [sp, #96]	; 0x60
    d620:	ldr	r0, [sp, #24]
    d622:	bl	dc18 <_dtoa_r>
    d626:	mov	r5, fp
    d628:	mov	r6, r0
    d62a:	ldr	r3, [sp, #52]	; 0x34
    d62c:	cmp	r3, #70	; 0x46
    d62e:	add.w	r4, r6, r5
    d632:	bne.w	d3ba <_svfprintf_r+0x105a>
    d636:	ldrb	r3, [r6, #0]
    d638:	cmp	r3, #48	; 0x30
    d63a:	beq.w	d94c <_svfprintf_r+0x15ec>
    d63e:	ldr	r5, [sp, #116]	; 0x74
    d640:	add	r4, r5
    d642:	b.n	d3ba <_svfprintf_r+0x105a>
    d644:	add	r2, sp, #140	; 0x8c
    d646:	ldr	r1, [sp, #20]
    d648:	ldr	r0, [sp, #24]
    d64a:	bl	f4a4 <__ssprint_r>
    d64e:	cmp	r0, #0
    d650:	bne.w	c554 <_svfprintf_r+0x1f4>
    d654:	ldr	r5, [sp, #116]	; 0x74
    d656:	ldr	r4, [sp, #148]	; 0x94
    d658:	add.w	r9, sp, #192	; 0xc0
    d65c:	b.n	d532 <_svfprintf_r+0x11d2>
    d65e:	cmp.w	fp, #0
    d662:	it	eq
    d664:	moveq.w	fp, #1
    d668:	b.n	d35a <_svfprintf_r+0xffa>
    d66a:	str	r3, [sp, #40]	; 0x28
    d66c:	mov	r7, r2
    d66e:	b.n	d12a <_svfprintf_r+0xdca>
    d670:	str	r3, [sp, #40]	; 0x28
    d672:	b.n	d462 <_svfprintf_r+0x1102>
    d674:	adds	r3, #4
    d676:	ldr	r4, [r2, #0]
    d678:	str	r3, [sp, #40]	; 0x28
    d67a:	movs	r5, #0
    d67c:	b.w	cac6 <_svfprintf_r+0x766>
    d680:	movs	r7, #45	; 0x2d
    d682:	str	r3, [sp, #16]
    d684:	ldr	r3, [sp, #44]	; 0x2c
    d686:	str	r3, [sp, #12]
    d688:	strb.w	r7, [sp, #111]	; 0x6f
    d68c:	mov.w	fp, #0
    d690:	b.w	c706 <_svfprintf_r+0x3a6>
    d694:	mov	r0, r6
    d696:	bl	c280 <strlen>
    d69a:	mov	fp, r4
    d69c:	mov	r3, r0
    d69e:	str	r0, [sp, #36]	; 0x24
    d6a0:	b.w	cbe8 <_svfprintf_r+0x888>
    d6a4:	add	r2, sp, #140	; 0x8c
    d6a6:	ldr	r1, [sp, #20]
    d6a8:	ldr	r0, [sp, #24]
    d6aa:	bl	f4a4 <__ssprint_r>
    d6ae:	cmp	r0, #0
    d6b0:	bne.w	c554 <_svfprintf_r+0x1f4>
    d6b4:	ldr	r4, [sp, #148]	; 0x94
    d6b6:	ldr	r3, [sp, #144]	; 0x90
    d6b8:	add.w	r9, sp, #192	; 0xc0
    d6bc:	ldr	r1, [sp, #56]	; 0x38
    d6be:	str.w	r6, [r9]
    d6c2:	adds	r3, #1
    d6c4:	add	r4, r1
    d6c6:	cmp	r3, #7
    d6c8:	str	r4, [sp, #148]	; 0x94
    d6ca:	str	r3, [sp, #144]	; 0x90
    d6cc:	str.w	r1, [r9, #4]
    d6d0:	ble.w	c888 <_svfprintf_r+0x528>
    d6d4:	b.w	cece <_svfprintf_r+0xb6e>
    d6d8:	ldr	r3, [sp, #116]	; 0x74
    d6da:	adds	r5, r3, #3
    d6dc:	blt.n	d71c <_svfprintf_r+0x13bc>
    d6de:	cmp	fp, r3
    d6e0:	blt.n	d71c <_svfprintf_r+0x13bc>
    d6e2:	str	r3, [sp, #60]	; 0x3c
    d6e4:	b.n	d3fe <_svfprintf_r+0x109e>
    d6e6:	mov	r3, r4
    d6e8:	b.n	d3e0 <_svfprintf_r+0x1080>
    d6ea:	add	r2, sp, #140	; 0x8c
    d6ec:	ldr	r1, [sp, #20]
    d6ee:	ldr	r0, [sp, #24]
    d6f0:	bl	f4a4 <__ssprint_r>
    d6f4:	cmp	r0, #0
    d6f6:	bne.w	c554 <_svfprintf_r+0x1f4>
    d6fa:	ldr	r4, [sp, #148]	; 0x94
    d6fc:	add.w	r9, sp, #192	; 0xc0
    d700:	b.n	cf9c <_svfprintf_r+0xc3c>
    d702:	mov	r4, r2
    d704:	adds	r3, #1
    d706:	ldr	r2, [sp, #44]	; 0x2c
    d708:	str	r3, [sp, #144]	; 0x90
    d70a:	add	r4, r5
    d70c:	cmp	r3, #7
    d70e:	str	r4, [sp, #148]	; 0x94
    d710:	stmia.w	r9, {r2, r5}
    d714:	bgt.n	d6a4 <_svfprintf_r+0x1344>
    d716:	add.w	r9, r9, #8
    d71a:	b.n	d6bc <_svfprintf_r+0x135c>
    d71c:	ldr	r2, [sp, #52]	; 0x34
    d71e:	subs	r2, #2
    d720:	str	r2, [sp, #52]	; 0x34
    d722:	subs	r3, #1
    d724:	cmp	r3, #0
    d726:	ldrb.w	r2, [sp, #52]	; 0x34
    d72a:	str	r3, [sp, #116]	; 0x74
    d72c:	it	lt
    d72e:	neglt	r3, r3
    d730:	strb.w	r2, [sp, #124]	; 0x7c
    d734:	ite	lt
    d736:	movlt	r2, #45	; 0x2d
    d738:	movge	r2, #43	; 0x2b
    d73a:	cmp	r3, #9
    d73c:	strb.w	r2, [sp, #125]	; 0x7d
    d740:	ble.w	d91a <_svfprintf_r+0x15ba>
    d744:	add.w	r0, sp, #139	; 0x8b
    d748:	mov	r4, r0
    d74a:	ldr	r2, [pc, #180]	; (d800 <_svfprintf_r+0x14a0>)
    d74c:	smull	r2, r1, r2, r3
    d750:	asrs	r2, r3, #31
    d752:	rsb	r2, r2, r1, asr #2
    d756:	add.w	r1, r2, r2, lsl #2
    d75a:	sub.w	r3, r3, r1, lsl #1
    d75e:	add.w	r1, r3, #48	; 0x30
    d762:	cmp	r2, #9
    d764:	mov	r3, r2
    d766:	strb.w	r1, [r4, #-1]!
    d76a:	bgt.n	d74a <_svfprintf_r+0x13ea>
    d76c:	mov	r1, r4
    d76e:	adds	r3, #48	; 0x30
    d770:	uxtb	r2, r3
    d772:	strb.w	r2, [r1, #-1]!
    d776:	cmp	r0, r1
    d778:	bls.w	d9e4 <_svfprintf_r+0x1684>
    d77c:	add.w	r1, sp, #126	; 0x7e
    d780:	mov	r3, r4
    d782:	b.n	d788 <_svfprintf_r+0x1428>
    d784:	ldrb.w	r2, [r3], #1
    d788:	strb.w	r2, [r1], #1
    d78c:	cmp	r0, r3
    d78e:	bne.n	d784 <_svfprintf_r+0x1424>
    d790:	adds	r3, r0, #1
    d792:	subs	r3, r3, r4
    d794:	add.w	r2, sp, #126	; 0x7e
    d798:	add	r3, r2
    d79a:	add	r2, sp, #124	; 0x7c
    d79c:	subs	r3, r3, r2
    d79e:	ldr	r2, [sp, #56]	; 0x38
    d7a0:	str	r3, [sp, #84]	; 0x54
    d7a2:	cmp	r2, #1
    d7a4:	add	r3, r2
    d7a6:	str	r3, [sp, #36]	; 0x24
    d7a8:	ble.w	d97a <_svfprintf_r+0x161a>
    d7ac:	ldr	r3, [sp, #36]	; 0x24
    d7ae:	ldr	r2, [sp, #72]	; 0x48
    d7b0:	add	r3, r2
    d7b2:	movs	r2, #0
    d7b4:	str	r3, [sp, #36]	; 0x24
    d7b6:	str	r2, [sp, #60]	; 0x3c
    d7b8:	bic.w	r3, r3, r3, asr #31
    d7bc:	b.n	d41a <_svfprintf_r+0x10ba>
    d7be:	add	r2, sp, #140	; 0x8c
    d7c0:	ldr	r1, [sp, #20]
    d7c2:	ldr	r0, [sp, #24]
    d7c4:	bl	f4a4 <__ssprint_r>
    d7c8:	cmp	r0, #0
    d7ca:	bne.w	c554 <_svfprintf_r+0x1f4>
    d7ce:	ldr	r3, [sp, #116]	; 0x74
    d7d0:	ldr	r4, [sp, #148]	; 0x94
    d7d2:	add.w	r9, sp, #192	; 0xc0
    d7d6:	b.n	d1b0 <_svfprintf_r+0xe50>
    d7d8:	add	r2, sp, #140	; 0x8c
    d7da:	ldr	r1, [sp, #20]
    d7dc:	ldr	r0, [sp, #24]
    d7de:	bl	f4a4 <__ssprint_r>
    d7e2:	cmp	r0, #0
    d7e4:	bne.w	c554 <_svfprintf_r+0x1f4>
    d7e8:	ldr	r3, [sp, #116]	; 0x74
    d7ea:	ldr	r2, [sp, #56]	; 0x38
    d7ec:	ldr	r4, [sp, #148]	; 0x94
    d7ee:	subs	r3, r2, r3
    d7f0:	add.w	r9, sp, #192	; 0xc0
    d7f4:	b.n	d1e0 <_svfprintf_r+0xe80>
    d7f6:	nop
    d7f8:	.word	0x20000534
    d7fc:	.word	0x2000086c
    d800:	.word	0x66666667
    d804:	cmp	r5, #6
    d806:	mov	r3, r5
    d808:	it	cs
    d80a:	movcs	r3, #6
    d80c:	str	r3, [sp, #36]	; 0x24
    d80e:	bic.w	r3, r3, r3, asr #31
    d812:	mov	fp, r6
    d814:	str	r7, [sp, #40]	; 0x28
    d816:	str	r6, [sp, #60]	; 0x3c
    d818:	mov	r7, r6
    d81a:	str	r3, [sp, #16]
    d81c:	ldr	r6, [pc, #536]	; (da38 <_svfprintf_r+0x16d8>)
    d81e:	b.w	c704 <_svfprintf_r+0x3a4>
    d822:	mov.w	fp, #6
    d826:	b.n	d35a <_svfprintf_r+0xffa>
    d828:	add	r2, sp, #132	; 0x84
    d82a:	add	r3, sp, #120	; 0x78
    d82c:	str	r2, [sp, #4]
    d82e:	str	r3, [sp, #0]
    d830:	mov	r2, fp
    d832:	add	r3, sp, #116	; 0x74
    d834:	movs	r1, #3
    d836:	vldr	d0, [sp, #96]	; 0x60
    d83a:	ldr	r0, [sp, #24]
    d83c:	bl	dc18 <_dtoa_r>
    d840:	mov	r5, fp
    d842:	mov	r6, r0
    d844:	add.w	r4, r0, fp
    d848:	b.n	d636 <_svfprintf_r+0x12d6>
    d84a:	movs	r7, #45	; 0x2d
    d84c:	strb.w	r7, [sp, #111]	; 0x6f
    d850:	b.w	c9aa <_svfprintf_r+0x64a>
    d854:	str	r3, [sp, #12]
    d856:	b.w	cb02 <_svfprintf_r+0x7a2>
    d85a:	ldrd	r1, r2, [sp, #64]	; 0x40
    d85e:	add.w	r3, r2, #2147483648	; 0x80000000
    d862:	str	r3, [sp, #100]	; 0x64
    d864:	movs	r3, #45	; 0x2d
    d866:	str	r1, [sp, #96]	; 0x60
    d868:	str	r3, [sp, #16]
    d86a:	b.n	d376 <_svfprintf_r+0x1016>
    d86c:	ldr	r2, [sp, #72]	; 0x48
    d86e:	ldr	r3, [sp, #56]	; 0x38
    d870:	add	r3, r2
    d872:	ldr	r2, [sp, #60]	; 0x3c
    d874:	str	r3, [sp, #36]	; 0x24
    d876:	cmp	r2, #0
    d878:	ble.w	d98e <_svfprintf_r+0x162e>
    d87c:	movs	r2, #103	; 0x67
    d87e:	bic.w	r3, r3, r3, asr #31
    d882:	str	r2, [sp, #52]	; 0x34
    d884:	b.n	d41a <_svfprintf_r+0x10ba>
    d886:	ldr	r3, [sp, #52]	; 0x34
    d888:	cmp	r3, #71	; 0x47
    d88a:	bne.w	d3b8 <_svfprintf_r+0x1058>
    d88e:	ldr	r3, [sp, #12]
    d890:	lsls	r3, r3, #31
    d892:	bmi.w	d62a <_svfprintf_r+0x12ca>
    d896:	ldr	r3, [sp, #132]	; 0x84
    d898:	cmp	r7, #71	; 0x47
    d89a:	sub.w	r3, r3, r6
    d89e:	str	r3, [sp, #56]	; 0x38
    d8a0:	beq.w	d6d8 <_svfprintf_r+0x1378>
    d8a4:	ldr	r3, [sp, #116]	; 0x74
    d8a6:	b.n	d722 <_svfprintf_r+0x13c2>
    d8a8:	bic.w	r3, r5, r5, asr #31
    d8ac:	str	r7, [sp, #40]	; 0x28
    d8ae:	str	r3, [sp, #16]
    d8b0:	str	r5, [sp, #36]	; 0x24
    d8b2:	mov	fp, r0
    d8b4:	str	r0, [sp, #60]	; 0x3c
    d8b6:	ldrb.w	r7, [sp, #111]	; 0x6f
    d8ba:	b.w	c704 <_svfprintf_r+0x3a4>
    d8be:	cmp	r3, #0
    d8c0:	ble.n	d99e <_svfprintf_r+0x163e>
    d8c2:	cmp.w	fp, #0
    d8c6:	bne.n	d968 <_svfprintf_r+0x1608>
    d8c8:	ldr	r2, [sp, #12]
    d8ca:	lsls	r4, r2, #31
    d8cc:	bmi.n	d968 <_svfprintf_r+0x1608>
    d8ce:	mov	r2, r3
    d8d0:	str	r2, [sp, #36]	; 0x24
    d8d2:	bic.w	r3, r3, r3, asr #31
    d8d6:	b.n	d41a <_svfprintf_r+0x10ba>
    d8d8:	ldr	r3, [sp, #12]
    d8da:	lsls	r3, r3, #31
    d8dc:	mov	r7, fp
    d8de:	bpl.n	d8ec <_svfprintf_r+0x158c>
    d8e0:	add	r6, sp, #256	; 0x100
    d8e2:	movs	r3, #48	; 0x30
    d8e4:	strb.w	r3, [r6, #-65]!
    d8e8:	b.w	c6f0 <_svfprintf_r+0x390>
    d8ec:	str.w	fp, [sp, #36]	; 0x24
    d8f0:	add	r6, sp, #192	; 0xc0
    d8f2:	b.w	c6f6 <_svfprintf_r+0x396>
    d8f6:	add	r2, sp, #140	; 0x8c
    d8f8:	ldr	r1, [sp, #20]
    d8fa:	ldr	r0, [sp, #24]
    d8fc:	bl	f4a4 <__ssprint_r>
    d900:	cmp	r0, #0
    d902:	bne.w	c554 <_svfprintf_r+0x1f4>
    d906:	ldr	r5, [sp, #116]	; 0x74
    d908:	ldr	r4, [sp, #148]	; 0x94
    d90a:	ldr	r3, [sp, #144]	; 0x90
    d90c:	add.w	r9, sp, #192	; 0xc0
    d910:	b.n	d560 <_svfprintf_r+0x1200>
    d912:	mov	r8, r4
    d914:	movs	r5, #0
    d916:	b.w	c418 <_svfprintf_r+0xb8>
    d91a:	adds	r3, #48	; 0x30
    d91c:	movs	r2, #48	; 0x30
    d91e:	strb.w	r3, [sp, #127]	; 0x7f
    d922:	strb.w	r2, [sp, #126]	; 0x7e
    d926:	add	r3, sp, #128	; 0x80
    d928:	b.n	d79a <_svfprintf_r+0x143a>
    d92a:	ldr	r3, [sp, #132]	; 0x84
    d92c:	b.n	d3e0 <_svfprintf_r+0x1080>
    d92e:	ldr	r2, [sp, #72]	; 0x48
    d930:	ldr	r3, [sp, #60]	; 0x3c
    d932:	add	r3, r2
    d934:	movs	r2, #103	; 0x67
    d936:	str	r3, [sp, #36]	; 0x24
    d938:	str	r2, [sp, #52]	; 0x34
    d93a:	bic.w	r3, r3, r3, asr #31
    d93e:	b.n	d41a <_svfprintf_r+0x10ba>
    d940:	ldr	r6, [pc, #248]	; (da3c <_svfprintf_r+0x16dc>)
    d942:	ldr	r3, [pc, #252]	; (da40 <_svfprintf_r+0x16e0>)
    d944:	ldrb.w	r7, [sp, #111]	; 0x6f
    d948:	b.w	c9ae <_svfprintf_r+0x64e>
    d94c:	movs	r2, #0
    d94e:	movs	r3, #0
    d950:	ldrd	r0, r1, [sp, #96]	; 0x60
    d954:	bl	b1a0 <__aeabi_dcmpeq>
    d958:	cmp	r0, #0
    d95a:	bne.w	d63e <_svfprintf_r+0x12de>
    d95e:	rsb	r5, r5, #1
    d962:	str	r5, [sp, #116]	; 0x74
    d964:	add	r4, r5
    d966:	b.n	d3ba <_svfprintf_r+0x105a>
    d968:	ldr	r3, [sp, #60]	; 0x3c
    d96a:	ldr	r2, [sp, #72]	; 0x48
    d96c:	adds	r5, r3, r2
    d96e:	add.w	r3, r5, fp
    d972:	str	r3, [sp, #36]	; 0x24
    d974:	bic.w	r3, r3, r3, asr #31
    d978:	b.n	d41a <_svfprintf_r+0x10ba>
    d97a:	ldr	r3, [sp, #12]
    d97c:	ands.w	r3, r3, #1
    d980:	bne.w	d7ac <_svfprintf_r+0x144c>
    d984:	str	r3, [sp, #60]	; 0x3c
    d986:	ldr	r3, [sp, #36]	; 0x24
    d988:	bic.w	r3, r3, r3, asr #31
    d98c:	b.n	d41a <_svfprintf_r+0x10ba>
    d98e:	ldr	r3, [sp, #60]	; 0x3c
    d990:	ldr	r2, [sp, #36]	; 0x24
    d992:	rsb	r3, r3, #1
    d996:	add	r2, r3
    d998:	mov	r3, r2
    d99a:	str	r2, [sp, #36]	; 0x24
    d99c:	b.n	d87c <_svfprintf_r+0x151c>
    d99e:	cmp.w	fp, #0
    d9a2:	bne.n	d9aa <_svfprintf_r+0x164a>
    d9a4:	ldr	r3, [sp, #12]
    d9a6:	lsls	r0, r3, #31
    d9a8:	bpl.n	d9ba <_svfprintf_r+0x165a>
    d9aa:	ldr	r3, [sp, #72]	; 0x48
    d9ac:	adds	r5, r3, #1
    d9ae:	add.w	r3, r5, fp
    d9b2:	str	r3, [sp, #36]	; 0x24
    d9b4:	bic.w	r3, r3, r3, asr #31
    d9b8:	b.n	d41a <_svfprintf_r+0x10ba>
    d9ba:	movs	r3, #1
    d9bc:	str	r3, [sp, #36]	; 0x24
    d9be:	b.n	d41a <_svfprintf_r+0x10ba>
    d9c0:	ldr	r0, [sp, #40]	; 0x28
    d9c2:	ldrb.w	r3, [r8, #1]
    d9c6:	ldr	r5, [r0, #0]
    d9c8:	adds	r0, #4
    d9ca:	cmp	r5, #0
    d9cc:	str	r0, [sp, #40]	; 0x28
    d9ce:	mov	r8, r4
    d9d0:	bge.w	c414 <_svfprintf_r+0xb4>
    d9d4:	mov.w	r5, #4294967295
    d9d8:	b.w	c414 <_svfprintf_r+0xb4>
    d9dc:	strb.w	r1, [sp, #111]	; 0x6f
    d9e0:	b.w	c576 <_svfprintf_r+0x216>
    d9e4:	add.w	r3, sp, #126	; 0x7e
    d9e8:	b.n	d79a <_svfprintf_r+0x143a>
    d9ea:	ldr	r2, [sp, #24]
    d9ec:	movs	r3, #12
    d9ee:	str	r3, [r2, #0]
    d9f0:	mov.w	r0, #4294967295
    d9f4:	b.w	c566 <_svfprintf_r+0x206>
    d9f8:	strb.w	r1, [sp, #111]	; 0x6f
    d9fc:	b.w	c670 <_svfprintf_r+0x310>
    da00:	strb.w	r1, [sp, #111]	; 0x6f
    da04:	b.w	c93c <_svfprintf_r+0x5dc>
    da08:	strb.w	r1, [sp, #111]	; 0x6f
    da0c:	b.w	caaa <_svfprintf_r+0x74a>
    da10:	strb.w	r1, [sp, #111]	; 0x6f
    da14:	b.w	ca4e <_svfprintf_r+0x6ee>
    da18:	strb.w	r1, [sp, #111]	; 0x6f
    da1c:	b.w	c9fa <_svfprintf_r+0x69a>
    da20:	strb.w	r1, [sp, #111]	; 0x6f
    da24:	b.w	cc92 <_svfprintf_r+0x932>
    da28:	strb.w	r1, [sp, #111]	; 0x6f
    da2c:	b.w	cc50 <_svfprintf_r+0x8f0>
    da30:	strb.w	r1, [sp, #111]	; 0x6f
    da34:	b.w	cc14 <_svfprintf_r+0x8b4>
    da38:	.word	0x200008b4
    da3c:	.word	0x20000888
    da40:	.word	0x20000884

0000da44 <_vdprintf_r>:
    da44:	push	{r4, r5, r6, r7, lr}
    da46:	sub.w	sp, sp, #532	; 0x214
    da4a:	add	r5, sp, #16
    da4c:	str	r3, [sp, #0]
    da4e:	mov	r7, r1
    da50:	mov	r3, r2
    da52:	mov.w	r4, #512	; 0x200
    da56:	add	r2, sp, #12
    da58:	mov	r1, r5
    da5a:	str	r4, [sp, #12]
    da5c:	mov	r6, r0
    da5e:	bl	f5a4 <_vasnprintf_r>
    da62:	cbz	r0, da88 <_vdprintf_r+0x44>
    da64:	mov	r4, r0
    da66:	mov	r2, r0
    da68:	mov	r1, r7
    da6a:	ldr	r3, [sp, #12]
    da6c:	mov	r0, r6
    da6e:	bl	dac4 <_write_r>
    da72:	cmp	r4, r5
    da74:	str	r0, [sp, #12]
    da76:	beq.n	da82 <_vdprintf_r+0x3e>
    da78:	mov	r0, r6
    da7a:	mov	r1, r4
    da7c:	bl	ebe8 <_free_r>
    da80:	ldr	r0, [sp, #12]
    da82:	add.w	sp, sp, #532	; 0x214
    da86:	pop	{r4, r5, r6, r7, pc}
    da88:	mov.w	r0, #4294967295
    da8c:	b.n	da82 <_vdprintf_r+0x3e>
    da8e:	nop

0000da90 <vdprintf>:
    da90:	push	{r4}
    da92:	ldr	r4, [pc, #16]	; (daa4 <vdprintf+0x14>)
    da94:	mov	r3, r2
    da96:	mov	r2, r1
    da98:	mov	r1, r0
    da9a:	ldr	r0, [r4, #0]
    da9c:	ldr.w	r4, [sp], #4
    daa0:	b.w	da44 <_vdprintf_r>
    daa4:	.word	0x20000f60

0000daa8 <__ascii_wctomb>:
    daa8:	cbz	r1, dab4 <__ascii_wctomb+0xc>
    daaa:	cmp	r2, #255	; 0xff
    daac:	bhi.n	dab8 <__ascii_wctomb+0x10>
    daae:	strb	r2, [r1, #0]
    dab0:	movs	r0, #1
    dab2:	bx	lr
    dab4:	mov	r0, r1
    dab6:	bx	lr
    dab8:	movs	r3, #138	; 0x8a
    daba:	str	r3, [r0, #0]
    dabc:	mov.w	r0, #4294967295
    dac0:	bx	lr
    dac2:	nop

0000dac4 <_write_r>:
    dac4:	push	{r4, r5, r6, lr}
    dac6:	mov	r5, r1
    dac8:	ldr	r4, [pc, #32]	; (daec <_write_r+0x28>)
    daca:	mov	r1, r2
    dacc:	mov	r6, r0
    dace:	mov	r2, r3
    dad0:	mov	r0, r5
    dad2:	movs	r3, #0
    dad4:	str	r3, [r4, #0]
    dad6:	bl	a51c <_write>
    dada:	adds	r3, r0, #1
    dadc:	beq.n	dae0 <_write_r+0x1c>
    dade:	pop	{r4, r5, r6, pc}
    dae0:	ldr	r3, [r4, #0]
    dae2:	cmp	r3, #0
    dae4:	beq.n	dade <_write_r+0x1a>
    dae6:	str	r3, [r6, #0]
    dae8:	pop	{r4, r5, r6, pc}
    daea:	nop
    daec:	.word	0x200106c0

0000daf0 <quorem>:
    daf0:	ldr	r2, [r0, #16]
    daf2:	ldr	r3, [r1, #16]
    daf4:	cmp	r3, r2
    daf6:	bgt.w	dc14 <quorem+0x124>
    dafa:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dafe:	add.w	r8, r3, #4294967295
    db02:	add.w	r7, r1, #20
    db06:	add.w	fp, r0, #20
    db0a:	ldr.w	r2, [r7, r8, lsl #2]
    db0e:	ldr.w	r3, [fp, r8, lsl #2]
    db12:	mov.w	r4, r8, lsl #2
    db16:	sub	sp, #12
    db18:	adds	r2, #1
    db1a:	udiv	r9, r3, r2
    db1e:	add.w	r3, fp, r4
    db22:	str	r4, [sp, #0]
    db24:	add.w	sl, r7, r4
    db28:	str	r3, [sp, #4]
    db2a:	cmp.w	r9, #0
    db2e:	beq.n	dba4 <quorem+0xb4>
    db30:	movs	r5, #0
    db32:	mov	ip, r7
    db34:	mov	lr, fp
    db36:	mov	r3, r5
    db38:	ldr.w	r6, [ip], #4
    db3c:	ldr.w	r2, [lr]
    db40:	uxth	r4, r6
    db42:	mla	r5, r9, r4, r5
    db46:	lsrs	r6, r6, #16
    db48:	lsrs	r4, r5, #16
    db4a:	mla	r4, r9, r6, r4
    db4e:	uxth	r5, r5
    db50:	subs	r3, r3, r5
    db52:	uxth	r6, r4
    db54:	uxtah	r3, r3, r2
    db58:	rsb	r6, r6, r2, lsr #16
    db5c:	add.w	r6, r6, r3, asr #16
    db60:	uxth	r3, r3
    db62:	orr.w	r3, r3, r6, lsl #16
    db66:	cmp	sl, ip
    db68:	str.w	r3, [lr], #4
    db6c:	mov.w	r5, r4, lsr #16
    db70:	mov.w	r3, r6, asr #16
    db74:	bcs.n	db38 <quorem+0x48>
    db76:	ldr	r3, [sp, #0]
    db78:	ldr.w	r3, [fp, r3]
    db7c:	cbnz	r3, dba4 <quorem+0xb4>
    db7e:	ldr	r4, [sp, #4]
    db80:	subs	r3, r4, #4
    db82:	cmp	fp, r3
    db84:	bcs.n	dba0 <quorem+0xb0>
    db86:	ldr.w	r3, [r4, #-4]
    db8a:	cbnz	r3, dba0 <quorem+0xb0>
    db8c:	sub.w	r3, r4, #8
    db90:	b.n	db98 <quorem+0xa8>
    db92:	ldr	r2, [r3, #0]
    db94:	subs	r3, #4
    db96:	cbnz	r2, dba0 <quorem+0xb0>
    db98:	cmp	fp, r3
    db9a:	add.w	r8, r8, #4294967295
    db9e:	bcc.n	db92 <quorem+0xa2>
    dba0:	str.w	r8, [r0, #16]
    dba4:	mov	r4, r0
    dba6:	bl	f290 <__mcmp>
    dbaa:	cmp	r0, #0
    dbac:	blt.n	dc0c <quorem+0x11c>
    dbae:	add.w	r9, r9, #1
    dbb2:	mov	r5, fp
    dbb4:	movs	r3, #0
    dbb6:	ldr.w	r1, [r7], #4
    dbba:	ldr	r0, [r5, #0]
    dbbc:	uxth	r2, r1
    dbbe:	subs	r2, r3, r2
    dbc0:	lsrs	r1, r1, #16
    dbc2:	uxtah	r2, r2, r0
    dbc6:	rsb	r3, r1, r0, lsr #16
    dbca:	add.w	r3, r3, r2, asr #16
    dbce:	uxth	r1, r2
    dbd0:	orr.w	r1, r1, r3, lsl #16
    dbd4:	cmp	sl, r7
    dbd6:	str.w	r1, [r5], #4
    dbda:	mov.w	r3, r3, asr #16
    dbde:	bcs.n	dbb6 <quorem+0xc6>
    dbe0:	ldr.w	r2, [fp, r8, lsl #2]
    dbe4:	add.w	r3, fp, r8, lsl #2
    dbe8:	cbnz	r2, dc0c <quorem+0x11c>
    dbea:	subs	r2, r3, #4
    dbec:	cmp	fp, r2
    dbee:	bcs.n	dc08 <quorem+0x118>
    dbf0:	ldr.w	r2, [r3, #-4]
    dbf4:	cbnz	r2, dc08 <quorem+0x118>
    dbf6:	subs	r3, #8
    dbf8:	b.n	dc00 <quorem+0x110>
    dbfa:	ldr	r2, [r3, #0]
    dbfc:	subs	r3, #4
    dbfe:	cbnz	r2, dc08 <quorem+0x118>
    dc00:	cmp	fp, r3
    dc02:	add.w	r8, r8, #4294967295
    dc06:	bcc.n	dbfa <quorem+0x10a>
    dc08:	str.w	r8, [r4, #16]
    dc0c:	mov	r0, r9
    dc0e:	add	sp, #12
    dc10:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dc14:	movs	r0, #0
    dc16:	bx	lr

0000dc18 <_dtoa_r>:
    dc18:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dc1c:	vmov	r6, r7, d0
    dc20:	sub	sp, #108	; 0x6c
    dc22:	ldr	r4, [r0, #64]	; 0x40
    dc24:	ldr	r5, [sp, #144]	; 0x90
    dc26:	str	r1, [sp, #0]
    dc28:	mov	r9, r0
    dc2a:	str	r2, [sp, #20]
    dc2c:	str	r3, [sp, #12]
    dc2e:	vmov	sl, s0
    dc32:	mov	fp, r7
    dc34:	cbz	r4, dc4c <_dtoa_r+0x34>
    dc36:	ldr	r2, [r0, #68]	; 0x44
    dc38:	str	r2, [r4, #4]
    dc3a:	movs	r3, #1
    dc3c:	lsls	r3, r2
    dc3e:	str	r3, [r4, #8]
    dc40:	mov	r1, r4
    dc42:	bl	eecc <_Bfree>
    dc46:	movs	r3, #0
    dc48:	str.w	r3, [r9, #64]	; 0x40
    dc4c:	cmp.w	fp, #0
    dc50:	mov	r4, fp
    dc52:	blt.n	dcbe <_dtoa_r+0xa6>
    dc54:	movs	r3, #0
    dc56:	str	r3, [r5, #0]
    dc58:	ldr	r3, [pc, #644]	; (dee0 <_dtoa_r+0x2c8>)
    dc5a:	mov	r2, r3
    dc5c:	ands	r3, r4
    dc5e:	cmp	r3, r2
    dc60:	beq.n	dc90 <_dtoa_r+0x78>
    dc62:	movs	r2, #0
    dc64:	movs	r3, #0
    dc66:	mov	r0, sl
    dc68:	mov	r1, fp
    dc6a:	bl	b1a0 <__aeabi_dcmpeq>
    dc6e:	mov	r6, sl
    dc70:	mov	r7, fp
    dc72:	mov	r8, r0
    dc74:	cbz	r0, dcca <_dtoa_r+0xb2>
    dc76:	ldr	r2, [sp, #12]
    dc78:	movs	r3, #1
    dc7a:	str	r3, [r2, #0]
    dc7c:	ldr	r3, [sp, #148]	; 0x94
    dc7e:	cmp	r3, #0
    dc80:	beq.w	de00 <_dtoa_r+0x1e8>
    dc84:	ldr	r0, [pc, #604]	; (dee4 <_dtoa_r+0x2cc>)
    dc86:	str	r0, [r3, #0]
    dc88:	subs	r0, #1
    dc8a:	add	sp, #108	; 0x6c
    dc8c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dc90:	ldr	r2, [sp, #12]
    dc92:	movw	r3, #9999	; 0x270f
    dc96:	str	r3, [r2, #0]
    dc98:	cmp.w	sl, #0
    dc9c:	beq.w	ddd4 <_dtoa_r+0x1bc>
    dca0:	ldr	r0, [pc, #580]	; (dee8 <_dtoa_r+0x2d0>)
    dca2:	ldr	r3, [sp, #148]	; 0x94
    dca4:	cmp	r3, #0
    dca6:	beq.n	dc8a <_dtoa_r+0x72>
    dca8:	ldrb	r3, [r0, #3]
    dcaa:	cmp	r3, #0
    dcac:	beq.w	de04 <_dtoa_r+0x1ec>
    dcb0:	add.w	r3, r0, #8
    dcb4:	ldr	r2, [sp, #148]	; 0x94
    dcb6:	str	r3, [r2, #0]
    dcb8:	add	sp, #108	; 0x6c
    dcba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dcbe:	movs	r3, #1
    dcc0:	bic.w	r4, fp, #2147483648	; 0x80000000
    dcc4:	str	r3, [r5, #0]
    dcc6:	mov	fp, r4
    dcc8:	b.n	dc58 <_dtoa_r+0x40>
    dcca:	add	r2, sp, #96	; 0x60
    dccc:	add	r1, sp, #100	; 0x64
    dcce:	vmov	d0, r6, r7
    dcd2:	mov	r0, r9
    dcd4:	bl	f3e8 <__d2b>
    dcd8:	lsrs	r5, r4, #20
    dcda:	str	r0, [sp, #40]	; 0x28
    dcdc:	bne.w	dde6 <_dtoa_r+0x1ce>
    dce0:	ldr	r5, [sp, #96]	; 0x60
    dce2:	ldr	r6, [sp, #100]	; 0x64
    dce4:	add	r6, r5
    dce6:	addw	r3, r6, #1074	; 0x432
    dcea:	cmp	r3, #32
    dcec:	ble.w	e200 <_dtoa_r+0x5e8>
    dcf0:	rsb	r3, r3, #64	; 0x40
    dcf4:	addw	r0, r6, #1042	; 0x412
    dcf8:	lsls	r4, r3
    dcfa:	lsr.w	r0, sl, r0
    dcfe:	orrs	r0, r4
    dd00:	bl	abe4 <__aeabi_ui2d>
    dd04:	movs	r3, #1
    dd06:	subs	r4, r6, #1
    dd08:	sub.w	r1, r1, #32505856	; 0x1f00000
    dd0c:	str	r3, [sp, #60]	; 0x3c
    dd0e:	movs	r2, #0
    dd10:	ldr	r3, [pc, #472]	; (deec <_dtoa_r+0x2d4>)
    dd12:	bl	a968 <__aeabi_dsub>
    dd16:	add	r3, pc, #432	; (adr r3, dec8 <_dtoa_r+0x2b0>)
    dd18:	ldrd	r2, r3, [r3]
    dd1c:	bl	acd0 <__aeabi_dmul>
    dd20:	add	r3, pc, #428	; (adr r3, ded0 <_dtoa_r+0x2b8>)
    dd22:	ldrd	r2, r3, [r3]
    dd26:	bl	a96c <__adddf3>
    dd2a:	mov	r6, r0
    dd2c:	mov	r0, r4
    dd2e:	mov	r7, r1
    dd30:	bl	ac04 <__aeabi_i2d>
    dd34:	add	r3, pc, #416	; (adr r3, ded8 <_dtoa_r+0x2c0>)
    dd36:	ldrd	r2, r3, [r3]
    dd3a:	bl	acd0 <__aeabi_dmul>
    dd3e:	mov	r2, r0
    dd40:	mov	r3, r1
    dd42:	mov	r0, r6
    dd44:	mov	r1, r7
    dd46:	bl	a96c <__adddf3>
    dd4a:	mov	r6, r0
    dd4c:	mov	r7, r1
    dd4e:	bl	f664 <__aeabi_d2iz>
    dd52:	movs	r2, #0
    dd54:	str	r0, [sp, #16]
    dd56:	movs	r3, #0
    dd58:	mov	r0, r6
    dd5a:	mov	r1, r7
    dd5c:	bl	b1b4 <__aeabi_dcmplt>
    dd60:	cmp	r0, #0
    dd62:	bne.w	e1b6 <_dtoa_r+0x59e>
    dd66:	ldr	r6, [sp, #16]
    dd68:	cmp	r6, #22
    dd6a:	bhi.w	e1b0 <_dtoa_r+0x598>
    dd6e:	ldr	r3, [pc, #384]	; (def0 <_dtoa_r+0x2d8>)
    dd70:	add.w	r3, r3, r6, lsl #3
    dd74:	ldrd	r0, r1, [r3]
    dd78:	mov	r2, sl
    dd7a:	mov	r3, fp
    dd7c:	bl	b1f0 <__aeabi_dcmpgt>
    dd80:	cmp	r0, #0
    dd82:	beq.w	e20a <_dtoa_r+0x5f2>
    dd86:	subs	r3, r6, #1
    dd88:	str	r3, [sp, #16]
    dd8a:	movs	r3, #0
    dd8c:	str	r3, [sp, #52]	; 0x34
    dd8e:	subs	r5, r5, r4
    dd90:	subs.w	r8, r5, #1
    dd94:	bmi.w	e1ec <_dtoa_r+0x5d4>
    dd98:	movs	r3, #0
    dd9a:	str	r3, [sp, #28]
    dd9c:	ldr	r3, [sp, #16]
    dd9e:	cmp	r3, #0
    dda0:	blt.w	e1da <_dtoa_r+0x5c2>
    dda4:	add	r8, r3
    dda6:	str	r3, [sp, #48]	; 0x30
    dda8:	movs	r3, #0
    ddaa:	str	r3, [sp, #24]
    ddac:	ldr	r3, [sp, #0]
    ddae:	cmp	r3, #9
    ddb0:	bhi.n	de08 <_dtoa_r+0x1f0>
    ddb2:	cmp	r3, #5
    ddb4:	ble.w	ea40 <_dtoa_r+0xe28>
    ddb8:	subs	r3, #4
    ddba:	str	r3, [sp, #0]
    ddbc:	movs	r6, #0
    ddbe:	ldr	r3, [sp, #0]
    ddc0:	subs	r3, #2
    ddc2:	cmp	r3, #3
    ddc4:	bhi.w	ea0e <_dtoa_r+0xdf6>
    ddc8:	tbh	[pc, r3, lsl #1]
    ddcc:	.word	0x0224032b
    ddd0:	.word	0x04500336
    ddd4:	ldr	r3, [pc, #272]	; (dee8 <_dtoa_r+0x2d0>)
    ddd6:	ldr	r2, [pc, #284]	; (def4 <_dtoa_r+0x2dc>)
    ddd8:	ubfx	r0, r4, #0, #20
    dddc:	cmp	r0, #0
    ddde:	ite	ne
    dde0:	movne	r0, r3
    dde2:	moveq	r0, r2
    dde4:	b.n	dca2 <_dtoa_r+0x8a>
    dde6:	ubfx	r3, fp, #0, #20
    ddea:	orr.w	r1, r3, #1069547520	; 0x3fc00000
    ddee:	subw	r4, r5, #1023	; 0x3ff
    ddf2:	mov	r0, sl
    ddf4:	str.w	r8, [sp, #60]	; 0x3c
    ddf8:	orr.w	r1, r1, #3145728	; 0x300000
    ddfc:	ldr	r5, [sp, #96]	; 0x60
    ddfe:	b.n	dd0e <_dtoa_r+0xf6>
    de00:	ldr	r0, [pc, #244]	; (def8 <_dtoa_r+0x2e0>)
    de02:	b.n	dc8a <_dtoa_r+0x72>
    de04:	adds	r3, r0, #3
    de06:	b.n	dcb4 <_dtoa_r+0x9c>
    de08:	movs	r1, #0
    de0a:	str.w	r1, [r9, #68]	; 0x44
    de0e:	mov	r0, r9
    de10:	mov	r4, r1
    de12:	str	r1, [sp, #0]
    de14:	bl	ee80 <_Balloc>
    de18:	mov.w	r3, #4294967295
    de1c:	str	r3, [sp, #32]
    de1e:	str	r3, [sp, #56]	; 0x38
    de20:	movs	r3, #1
    de22:	str	r0, [sp, #36]	; 0x24
    de24:	str.w	r0, [r9, #64]	; 0x40
    de28:	str	r4, [sp, #20]
    de2a:	str	r3, [sp, #44]	; 0x2c
    de2c:	ldr	r3, [sp, #100]	; 0x64
    de2e:	cmp	r3, #0
    de30:	blt.w	dfd4 <_dtoa_r+0x3bc>
    de34:	ldr	r2, [sp, #16]
    de36:	cmp	r2, #14
    de38:	bgt.w	dfd4 <_dtoa_r+0x3bc>
    de3c:	ldr	r3, [pc, #176]	; (def0 <_dtoa_r+0x2d8>)
    de3e:	add.w	r3, r3, r2, lsl #3
    de42:	vldr	d7, [r3]
    de46:	ldr	r3, [sp, #20]
    de48:	cmp	r3, #0
    de4a:	vstr	d7, [sp]
    de4e:	blt.w	e44e <_dtoa_r+0x836>
    de52:	mov	r6, sl
    de54:	mov	r7, fp
    de56:	ldrd	sl, fp, [sp]
    de5a:	mov	r0, r6
    de5c:	mov	r2, sl
    de5e:	mov	r3, fp
    de60:	mov	r1, r7
    de62:	bl	af24 <__aeabi_ddiv>
    de66:	bl	f664 <__aeabi_d2iz>
    de6a:	mov	r4, r0
    de6c:	bl	ac04 <__aeabi_i2d>
    de70:	mov	r2, sl
    de72:	mov	r3, fp
    de74:	bl	acd0 <__aeabi_dmul>
    de78:	mov	r3, r1
    de7a:	mov	r2, r0
    de7c:	mov	r1, r7
    de7e:	mov	r0, r6
    de80:	bl	a968 <__aeabi_dsub>
    de84:	ldr	r5, [sp, #36]	; 0x24
    de86:	add.w	r3, r4, #48	; 0x30
    de8a:	strb	r3, [r5, #0]
    de8c:	ldr	r3, [sp, #32]
    de8e:	cmp	r3, #1
    de90:	mov	r6, r0
    de92:	mov	r7, r1
    de94:	add.w	r5, r5, #1
    de98:	beq.n	df5e <_dtoa_r+0x346>
    de9a:	movs	r2, #0
    de9c:	ldr	r3, [pc, #92]	; (defc <_dtoa_r+0x2e4>)
    de9e:	bl	acd0 <__aeabi_dmul>
    dea2:	movs	r2, #0
    dea4:	movs	r3, #0
    dea6:	mov	r6, r0
    dea8:	mov	r7, r1
    deaa:	bl	b1a0 <__aeabi_dcmpeq>
    deae:	cmp	r0, #0
    deb0:	bne.n	dfae <_dtoa_r+0x396>
    deb2:	str.w	r9, [sp, #20]
    deb6:	ldr.w	sl, [sp, #32]
    deba:	ldr.w	fp, [sp, #36]	; 0x24
    debe:	ldrd	r8, r9, [sp]
    dec2:	b.n	df16 <_dtoa_r+0x2fe>
    dec4:	nop.w
    dec8:	.word	0x636f4361
    decc:	.word	0x3fd287a7
    ded0:	.word	0x8b60c8b3
    ded4:	.word	0x3fc68a28
    ded8:	.word	0x509f79fb
    dedc:	.word	0x3fd34413
    dee0:	.word	0x7ff00000
    dee4:	.word	0x20000535
    dee8:	.word	0x200009dc
    deec:	.word	0x3ff80000
    def0:	.word	0x200009e0
    def4:	.word	0x200009d0
    def8:	.word	0x20000534
    defc:	.word	0x40240000
    df00:	bl	acd0 <__aeabi_dmul>
    df04:	movs	r2, #0
    df06:	movs	r3, #0
    df08:	mov	r6, r0
    df0a:	mov	r7, r1
    df0c:	bl	b1a0 <__aeabi_dcmpeq>
    df10:	cmp	r0, #0
    df12:	bne.w	e672 <_dtoa_r+0xa5a>
    df16:	mov	r2, r8
    df18:	mov	r3, r9
    df1a:	mov	r0, r6
    df1c:	mov	r1, r7
    df1e:	bl	af24 <__aeabi_ddiv>
    df22:	bl	f664 <__aeabi_d2iz>
    df26:	mov	r4, r0
    df28:	bl	ac04 <__aeabi_i2d>
    df2c:	mov	r2, r8
    df2e:	mov	r3, r9
    df30:	bl	acd0 <__aeabi_dmul>
    df34:	mov	r2, r0
    df36:	mov	r3, r1
    df38:	mov	r0, r6
    df3a:	mov	r1, r7
    df3c:	bl	a968 <__aeabi_dsub>
    df40:	add.w	lr, r4, #48	; 0x30
    df44:	strb.w	lr, [r5], #1
    df48:	rsb	lr, fp, r5
    df4c:	cmp	lr, sl
    df4e:	mov	r6, r0
    df50:	mov	r7, r1
    df52:	mov.w	r2, #0
    df56:	ldr	r3, [pc, #696]	; (e210 <_dtoa_r+0x5f8>)
    df58:	bne.n	df00 <_dtoa_r+0x2e8>
    df5a:	ldr.w	r9, [sp, #20]
    df5e:	mov	r2, r6
    df60:	mov	r3, r7
    df62:	mov	r0, r6
    df64:	mov	r1, r7
    df66:	bl	a96c <__adddf3>
    df6a:	mov	r6, r0
    df6c:	mov	r7, r1
    df6e:	mov	r2, r0
    df70:	mov	r3, r1
    df72:	ldrd	r0, r1, [sp]
    df76:	bl	b1b4 <__aeabi_dcmplt>
    df7a:	cbnz	r0, df8e <_dtoa_r+0x376>
    df7c:	mov	r2, r6
    df7e:	mov	r3, r7
    df80:	ldrd	r0, r1, [sp]
    df84:	bl	b1a0 <__aeabi_dcmpeq>
    df88:	cbz	r0, dfae <_dtoa_r+0x396>
    df8a:	lsls	r3, r4, #31
    df8c:	bpl.n	dfae <_dtoa_r+0x396>
    df8e:	ldrb.w	r4, [r5, #-1]
    df92:	ldr	r2, [sp, #36]	; 0x24
    df94:	subs	r3, r5, #1
    df96:	b.n	dfa2 <_dtoa_r+0x38a>
    df98:	cmp	r2, r3
    df9a:	beq.w	e796 <_dtoa_r+0xb7e>
    df9e:	ldrb.w	r4, [r3, #-1]!
    dfa2:	cmp	r4, #57	; 0x39
    dfa4:	add.w	r5, r3, #1
    dfa8:	beq.n	df98 <_dtoa_r+0x380>
    dfaa:	adds	r4, #1
    dfac:	strb	r4, [r3, #0]
    dfae:	ldr	r1, [sp, #40]	; 0x28
    dfb0:	mov	r0, r9
    dfb2:	bl	eecc <_Bfree>
    dfb6:	movs	r2, #0
    dfb8:	ldr	r3, [sp, #16]
    dfba:	strb	r2, [r5, #0]
    dfbc:	ldr	r2, [sp, #12]
    dfbe:	adds	r3, #1
    dfc0:	str	r3, [r2, #0]
    dfc2:	ldr	r3, [sp, #148]	; 0x94
    dfc4:	cmp	r3, #0
    dfc6:	beq.w	e700 <_dtoa_r+0xae8>
    dfca:	ldr	r0, [sp, #36]	; 0x24
    dfcc:	str	r5, [r3, #0]
    dfce:	add	sp, #108	; 0x6c
    dfd0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dfd4:	ldr	r2, [sp, #44]	; 0x2c
    dfd6:	cmp	r2, #0
    dfd8:	beq.w	e1f8 <_dtoa_r+0x5e0>
    dfdc:	ldr	r2, [sp, #0]
    dfde:	cmp	r2, #1
    dfe0:	ble.w	e492 <_dtoa_r+0x87a>
    dfe4:	ldr	r3, [sp, #32]
    dfe6:	ldr	r2, [sp, #24]
    dfe8:	subs	r7, r3, #1
    dfea:	cmp	r2, r7
    dfec:	blt.w	e706 <_dtoa_r+0xaee>
    dff0:	subs	r7, r2, r7
    dff2:	ldr	r3, [sp, #32]
    dff4:	cmp	r3, #0
    dff6:	blt.w	e8fa <_dtoa_r+0xce2>
    dffa:	ldr	r5, [sp, #28]
    dffc:	ldr	r3, [sp, #32]
    dffe:	ldr	r2, [sp, #28]
    e000:	movs	r1, #1
    e002:	add	r2, r3
    e004:	mov	r0, r9
    e006:	str	r2, [sp, #28]
    e008:	add	r8, r3
    e00a:	bl	effc <__i2b>
    e00e:	mov	r6, r0
    e010:	cbz	r5, e02c <_dtoa_r+0x414>
    e012:	cmp.w	r8, #0
    e016:	ble.n	e02c <_dtoa_r+0x414>
    e018:	cmp	r5, r8
    e01a:	ldr	r2, [sp, #28]
    e01c:	mov	r3, r5
    e01e:	it	ge
    e020:	movge	r3, r8
    e022:	subs	r2, r2, r3
    e024:	str	r2, [sp, #28]
    e026:	subs	r5, r5, r3
    e028:	rsb	r8, r3, r8
    e02c:	ldr	r3, [sp, #24]
    e02e:	cmp	r3, #0
    e030:	ble.w	e61e <_dtoa_r+0xa06>
    e034:	ldr	r2, [sp, #44]	; 0x2c
    e036:	cmp	r2, #0
    e038:	beq.w	e440 <_dtoa_r+0x828>
    e03c:	cmp	r7, #0
    e03e:	beq.w	e440 <_dtoa_r+0x828>
    e042:	mov	r1, r6
    e044:	mov	r2, r7
    e046:	mov	r0, r9
    e048:	bl	f140 <__pow5mult>
    e04c:	ldr	r2, [sp, #40]	; 0x28
    e04e:	mov	r1, r0
    e050:	mov	r6, r0
    e052:	mov	r0, r9
    e054:	bl	f010 <__multiply>
    e058:	ldr	r1, [sp, #40]	; 0x28
    e05a:	mov	r4, r0
    e05c:	mov	r0, r9
    e05e:	bl	eecc <_Bfree>
    e062:	ldr	r3, [sp, #24]
    e064:	subs	r3, r3, r7
    e066:	str	r3, [sp, #24]
    e068:	bne.w	e43e <_dtoa_r+0x826>
    e06c:	movs	r1, #1
    e06e:	mov	r0, r9
    e070:	bl	effc <__i2b>
    e074:	ldr	r3, [sp, #48]	; 0x30
    e076:	str	r0, [sp, #24]
    e078:	cmp	r3, #0
    e07a:	beq.w	e4a8 <_dtoa_r+0x890>
    e07e:	mov	r1, r0
    e080:	mov	r2, r3
    e082:	mov	r0, r9
    e084:	bl	f140 <__pow5mult>
    e088:	ldr	r3, [sp, #0]
    e08a:	str	r0, [sp, #24]
    e08c:	cmp	r3, #1
    e08e:	ble.w	e678 <_dtoa_r+0xa60>
    e092:	movs	r7, #0
    e094:	ldr	r2, [sp, #24]
    e096:	ldr	r3, [r2, #16]
    e098:	add.w	r3, r2, r3, lsl #2
    e09c:	ldr	r0, [r3, #16]
    e09e:	bl	ef60 <__hi0bits>
    e0a2:	rsb	r0, r0, #32
    e0a6:	add	r0, r8
    e0a8:	ands.w	r0, r0, #31
    e0ac:	beq.w	e4a4 <_dtoa_r+0x88c>
    e0b0:	rsb	r3, r0, #32
    e0b4:	cmp	r3, #4
    e0b6:	ble.w	ea34 <_dtoa_r+0xe1c>
    e0ba:	rsb	r0, r0, #28
    e0be:	ldr	r3, [sp, #28]
    e0c0:	add	r3, r0
    e0c2:	str	r3, [sp, #28]
    e0c4:	add	r5, r0
    e0c6:	add	r8, r0
    e0c8:	ldr	r3, [sp, #28]
    e0ca:	cmp	r3, #0
    e0cc:	ble.n	e0da <_dtoa_r+0x4c2>
    e0ce:	mov	r1, r4
    e0d0:	mov	r2, r3
    e0d2:	mov	r0, r9
    e0d4:	bl	f1e0 <__lshift>
    e0d8:	mov	r4, r0
    e0da:	cmp.w	r8, #0
    e0de:	ble.n	e0ec <_dtoa_r+0x4d4>
    e0e0:	mov	r2, r8
    e0e2:	ldr	r1, [sp, #24]
    e0e4:	mov	r0, r9
    e0e6:	bl	f1e0 <__lshift>
    e0ea:	str	r0, [sp, #24]
    e0ec:	ldr	r3, [sp, #52]	; 0x34
    e0ee:	cmp	r3, #0
    e0f0:	bne.w	e5e8 <_dtoa_r+0x9d0>
    e0f4:	ldr	r3, [sp, #32]
    e0f6:	cmp	r3, #0
    e0f8:	ble.w	e622 <_dtoa_r+0xa0a>
    e0fc:	ldr	r3, [sp, #44]	; 0x2c
    e0fe:	cmp	r3, #0
    e100:	bne.w	e4ec <_dtoa_r+0x8d4>
    e104:	ldr.w	fp, [sp, #36]	; 0x24
    e108:	ldr	r7, [sp, #32]
    e10a:	ldr.w	r8, [sp, #24]
    e10e:	mov	r5, fp
    e110:	b.n	e118 <_dtoa_r+0x500>
    e112:	bl	eee0 <__multadd>
    e116:	mov	r4, r0
    e118:	mov	r1, r8
    e11a:	mov	r0, r4
    e11c:	bl	daf0 <quorem>
    e120:	add.w	sl, r0, #48	; 0x30
    e124:	strb.w	sl, [r5], #1
    e128:	rsb	r3, fp, r5
    e12c:	cmp	r3, r7
    e12e:	mov.w	r2, #10
    e132:	mov.w	r3, #0
    e136:	mov	r1, r4
    e138:	mov	r0, r9
    e13a:	blt.n	e112 <_dtoa_r+0x4fa>
    e13c:	ldr	r3, [sp, #36]	; 0x24
    e13e:	ldr	r2, [sp, #32]
    e140:	cmp	r2, #1
    e142:	ite	ge
    e144:	addge	r3, r3, r2
    e146:	addlt	r3, #1
    e148:	mov	r5, r3
    e14a:	mov.w	fp, #0
    e14e:	mov	r1, r4
    e150:	movs	r2, #1
    e152:	mov	r0, r9
    e154:	bl	f1e0 <__lshift>
    e158:	ldr	r1, [sp, #24]
    e15a:	str	r0, [sp, #40]	; 0x28
    e15c:	bl	f290 <__mcmp>
    e160:	cmp	r0, #0
    e162:	ble.w	e770 <_dtoa_r+0xb58>
    e166:	ldrb.w	r2, [r5, #-1]
    e16a:	ldr	r1, [sp, #36]	; 0x24
    e16c:	subs	r3, r5, #1
    e16e:	b.n	e17a <_dtoa_r+0x562>
    e170:	cmp	r3, r1
    e172:	beq.w	e65e <_dtoa_r+0xa46>
    e176:	ldrb.w	r2, [r3, #-1]!
    e17a:	cmp	r2, #57	; 0x39
    e17c:	add.w	r5, r3, #1
    e180:	beq.n	e170 <_dtoa_r+0x558>
    e182:	adds	r2, #1
    e184:	strb	r2, [r3, #0]
    e186:	ldr	r1, [sp, #24]
    e188:	mov	r0, r9
    e18a:	bl	eecc <_Bfree>
    e18e:	cmp	r6, #0
    e190:	beq.w	dfae <_dtoa_r+0x396>
    e194:	cmp.w	fp, #0
    e198:	beq.n	e1a6 <_dtoa_r+0x58e>
    e19a:	cmp	fp, r6
    e19c:	beq.n	e1a6 <_dtoa_r+0x58e>
    e19e:	mov	r1, fp
    e1a0:	mov	r0, r9
    e1a2:	bl	eecc <_Bfree>
    e1a6:	mov	r1, r6
    e1a8:	mov	r0, r9
    e1aa:	bl	eecc <_Bfree>
    e1ae:	b.n	dfae <_dtoa_r+0x396>
    e1b0:	movs	r3, #1
    e1b2:	str	r3, [sp, #52]	; 0x34
    e1b4:	b.n	dd8e <_dtoa_r+0x176>
    e1b6:	ldr.w	r8, [sp, #16]
    e1ba:	mov	r0, r8
    e1bc:	bl	ac04 <__aeabi_i2d>
    e1c0:	mov	r2, r0
    e1c2:	mov	r3, r1
    e1c4:	mov	r0, r6
    e1c6:	mov	r1, r7
    e1c8:	bl	b1a0 <__aeabi_dcmpeq>
    e1cc:	cmp	r0, #0
    e1ce:	bne.w	dd66 <_dtoa_r+0x14e>
    e1d2:	add.w	r3, r8, #4294967295
    e1d6:	str	r3, [sp, #16]
    e1d8:	b.n	dd66 <_dtoa_r+0x14e>
    e1da:	ldr	r2, [sp, #28]
    e1dc:	ldr	r3, [sp, #16]
    e1de:	subs	r2, r2, r3
    e1e0:	negs	r3, r3
    e1e2:	str	r3, [sp, #24]
    e1e4:	movs	r3, #0
    e1e6:	str	r2, [sp, #28]
    e1e8:	str	r3, [sp, #48]	; 0x30
    e1ea:	b.n	ddac <_dtoa_r+0x194>
    e1ec:	rsb	r3, r8, #0
    e1f0:	str	r3, [sp, #28]
    e1f2:	mov.w	r8, #0
    e1f6:	b.n	dd9c <_dtoa_r+0x184>
    e1f8:	ldr	r7, [sp, #24]
    e1fa:	ldr	r5, [sp, #28]
    e1fc:	ldr	r6, [sp, #44]	; 0x2c
    e1fe:	b.n	e010 <_dtoa_r+0x3f8>
    e200:	rsb	r4, r3, #32
    e204:	lsl.w	r0, sl, r4
    e208:	b.n	dd00 <_dtoa_r+0xe8>
    e20a:	str	r0, [sp, #52]	; 0x34
    e20c:	b.n	dd8e <_dtoa_r+0x176>
    e20e:	nop
    e210:	.word	0x40240000
    e214:	movs	r3, #0
    e216:	str	r3, [sp, #44]	; 0x2c
    e218:	ldr	r3, [sp, #16]
    e21a:	ldr	r2, [sp, #20]
    e21c:	add	r3, r2
    e21e:	str	r3, [sp, #56]	; 0x38
    e220:	adds	r3, #1
    e222:	cmp	r3, #0
    e224:	str	r3, [sp, #32]
    e226:	ble.w	e724 <_dtoa_r+0xb0c>
    e22a:	ldr	r4, [sp, #32]
    e22c:	mov	r5, r4
    e22e:	movs	r1, #0
    e230:	cmp	r5, #23
    e232:	str.w	r1, [r9, #68]	; 0x44
    e236:	bls.n	e250 <_dtoa_r+0x638>
    e238:	movs	r2, #1
    e23a:	movs	r3, #4
    e23c:	lsls	r3, r3, #1
    e23e:	add.w	r0, r3, #20
    e242:	cmp	r0, r5
    e244:	mov	r1, r2
    e246:	add.w	r2, r2, #1
    e24a:	bls.n	e23c <_dtoa_r+0x624>
    e24c:	str.w	r1, [r9, #68]	; 0x44
    e250:	mov	r0, r9
    e252:	bl	ee80 <_Balloc>
    e256:	cmp	r4, #14
    e258:	str	r0, [sp, #36]	; 0x24
    e25a:	str.w	r0, [r9, #64]	; 0x40
    e25e:	bhi.w	de2c <_dtoa_r+0x214>
    e262:	cmp	r6, #0
    e264:	beq.w	de2c <_dtoa_r+0x214>
    e268:	ldr	r1, [sp, #16]
    e26a:	cmp	r1, #0
    e26c:	strd	sl, fp, [sp, #64]	; 0x40
    e270:	ble.w	e7a8 <_dtoa_r+0xb90>
    e274:	ldr	r3, [pc, #576]	; (e4b8 <_dtoa_r+0x8a0>)
    e276:	and.w	r2, r1, #15
    e27a:	asrs	r6, r1, #4
    e27c:	add.w	r3, r3, r2, lsl #3
    e280:	lsls	r0, r6, #27
    e282:	ldrd	r4, r5, [r3]
    e286:	bpl.w	e716 <_dtoa_r+0xafe>
    e28a:	ldr	r3, [pc, #560]	; (e4bc <_dtoa_r+0x8a4>)
    e28c:	mov	r0, sl
    e28e:	mov	r1, fp
    e290:	ldrd	r2, r3, [r3, #32]
    e294:	bl	af24 <__aeabi_ddiv>
    e298:	strd	r0, r1, [sp, #72]	; 0x48
    e29c:	and.w	r6, r6, #15
    e2a0:	mov.w	sl, #3
    e2a4:	cbz	r6, e2c8 <_dtoa_r+0x6b0>
    e2a6:	ldr	r7, [pc, #532]	; (e4bc <_dtoa_r+0x8a4>)
    e2a8:	lsls	r1, r6, #31
    e2aa:	bpl.n	e2c0 <_dtoa_r+0x6a8>
    e2ac:	mov	r0, r4
    e2ae:	mov	r1, r5
    e2b0:	ldrd	r2, r3, [r7]
    e2b4:	bl	acd0 <__aeabi_dmul>
    e2b8:	add.w	sl, sl, #1
    e2bc:	mov	r4, r0
    e2be:	mov	r5, r1
    e2c0:	asrs	r6, r6, #1
    e2c2:	add.w	r7, r7, #8
    e2c6:	bne.n	e2a8 <_dtoa_r+0x690>
    e2c8:	mov	r2, r4
    e2ca:	mov	r3, r5
    e2cc:	ldrd	r0, r1, [sp, #72]	; 0x48
    e2d0:	bl	af24 <__aeabi_ddiv>
    e2d4:	mov	r6, r0
    e2d6:	mov	r7, r1
    e2d8:	ldr	r3, [sp, #52]	; 0x34
    e2da:	cbz	r3, e2ee <_dtoa_r+0x6d6>
    e2dc:	movs	r2, #0
    e2de:	ldr	r3, [pc, #480]	; (e4c0 <_dtoa_r+0x8a8>)
    e2e0:	mov	r0, r6
    e2e2:	mov	r1, r7
    e2e4:	bl	b1b4 <__aeabi_dcmplt>
    e2e8:	cmp	r0, #0
    e2ea:	bne.w	e922 <_dtoa_r+0xd0a>
    e2ee:	mov	r0, sl
    e2f0:	bl	ac04 <__aeabi_i2d>
    e2f4:	mov	r2, r6
    e2f6:	mov	r3, r7
    e2f8:	bl	acd0 <__aeabi_dmul>
    e2fc:	ldr	r3, [pc, #452]	; (e4c4 <_dtoa_r+0x8ac>)
    e2fe:	movs	r2, #0
    e300:	bl	a96c <__adddf3>
    e304:	ldr	r3, [sp, #32]
    e306:	mov	r4, r0
    e308:	sub.w	r5, r1, #54525952	; 0x3400000
    e30c:	cmp	r3, #0
    e30e:	beq.w	e6c8 <_dtoa_r+0xab0>
    e312:	ldr	r3, [sp, #16]
    e314:	str	r3, [sp, #88]	; 0x58
    e316:	ldr	r3, [sp, #32]
    e318:	str	r3, [sp, #72]	; 0x48
    e31a:	ldr	r3, [sp, #44]	; 0x2c
    e31c:	cmp	r3, #0
    e31e:	beq.w	e84a <_dtoa_r+0xc32>
    e322:	ldr	r2, [sp, #72]	; 0x48
    e324:	ldr	r3, [pc, #400]	; (e4b8 <_dtoa_r+0x8a0>)
    e326:	ldr	r1, [pc, #416]	; (e4c8 <_dtoa_r+0x8b0>)
    e328:	add.w	r3, r3, r2, lsl #3
    e32c:	ldrd	r2, r3, [r3, #-8]
    e330:	movs	r0, #0
    e332:	bl	af24 <__aeabi_ddiv>
    e336:	mov	r2, r4
    e338:	mov	r3, r5
    e33a:	bl	a968 <__aeabi_dsub>
    e33e:	mov	sl, r0
    e340:	mov	fp, r1
    e342:	mov	r0, r6
    e344:	mov	r1, r7
    e346:	bl	f664 <__aeabi_d2iz>
    e34a:	mov	r4, r0
    e34c:	bl	ac04 <__aeabi_i2d>
    e350:	mov	r2, r0
    e352:	mov	r3, r1
    e354:	mov	r0, r6
    e356:	mov	r1, r7
    e358:	bl	a968 <__aeabi_dsub>
    e35c:	adds	r4, #48	; 0x30
    e35e:	ldr	r5, [sp, #36]	; 0x24
    e360:	uxtb	r4, r4
    e362:	mov	r6, r0
    e364:	mov	r7, r1
    e366:	strb	r4, [r5, #0]
    e368:	mov	r2, r0
    e36a:	mov	r3, r1
    e36c:	mov	r0, sl
    e36e:	mov	r1, fp
    e370:	adds	r5, #1
    e372:	bl	b1f0 <__aeabi_dcmpgt>
    e376:	cmp	r0, #0
    e378:	bne.n	e41c <_dtoa_r+0x804>
    e37a:	mov	r2, r6
    e37c:	mov	r3, r7
    e37e:	movs	r0, #0
    e380:	ldr	r1, [pc, #316]	; (e4c0 <_dtoa_r+0x8a8>)
    e382:	bl	a968 <__aeabi_dsub>
    e386:	mov	r2, r0
    e388:	mov	r3, r1
    e38a:	mov	r0, sl
    e38c:	mov	r1, fp
    e38e:	bl	b1f0 <__aeabi_dcmpgt>
    e392:	cmp	r0, #0
    e394:	bne.w	e9a8 <_dtoa_r+0xd90>
    e398:	ldr	r2, [sp, #72]	; 0x48
    e39a:	cmp	r2, #1
    e39c:	ble.w	e78e <_dtoa_r+0xb76>
    e3a0:	ldr	r3, [sp, #72]	; 0x48
    e3a2:	ldr	r2, [sp, #36]	; 0x24
    e3a4:	str.w	r8, [sp, #72]	; 0x48
    e3a8:	add	r3, r2
    e3aa:	mov	r8, r3
    e3ac:	b.n	e3ca <_dtoa_r+0x7b2>
    e3ae:	movs	r0, #0
    e3b0:	ldr	r1, [pc, #268]	; (e4c0 <_dtoa_r+0x8a8>)
    e3b2:	bl	a968 <__aeabi_dsub>
    e3b6:	mov	r2, sl
    e3b8:	mov	r3, fp
    e3ba:	bl	b1b4 <__aeabi_dcmplt>
    e3be:	cmp	r0, #0
    e3c0:	bne.w	e9a8 <_dtoa_r+0xd90>
    e3c4:	cmp	r5, r8
    e3c6:	beq.w	e78a <_dtoa_r+0xb72>
    e3ca:	mov	r0, sl
    e3cc:	mov	r1, fp
    e3ce:	movs	r2, #0
    e3d0:	ldr	r3, [pc, #248]	; (e4cc <_dtoa_r+0x8b4>)
    e3d2:	bl	acd0 <__aeabi_dmul>
    e3d6:	movs	r2, #0
    e3d8:	ldr	r3, [pc, #240]	; (e4cc <_dtoa_r+0x8b4>)
    e3da:	mov	sl, r0
    e3dc:	mov	fp, r1
    e3de:	mov	r0, r6
    e3e0:	mov	r1, r7
    e3e2:	bl	acd0 <__aeabi_dmul>
    e3e6:	mov	r7, r1
    e3e8:	mov	r6, r0
    e3ea:	bl	f664 <__aeabi_d2iz>
    e3ee:	mov	r4, r0
    e3f0:	bl	ac04 <__aeabi_i2d>
    e3f4:	mov	r2, r0
    e3f6:	mov	r3, r1
    e3f8:	mov	r0, r6
    e3fa:	mov	r1, r7
    e3fc:	bl	a968 <__aeabi_dsub>
    e400:	adds	r4, #48	; 0x30
    e402:	uxtb	r4, r4
    e404:	mov	r2, sl
    e406:	mov	r3, fp
    e408:	strb.w	r4, [r5], #1
    e40c:	mov	r6, r0
    e40e:	mov	r7, r1
    e410:	bl	b1b4 <__aeabi_dcmplt>
    e414:	mov	r2, r6
    e416:	mov	r3, r7
    e418:	cmp	r0, #0
    e41a:	beq.n	e3ae <_dtoa_r+0x796>
    e41c:	ldr	r3, [sp, #88]	; 0x58
    e41e:	str	r3, [sp, #16]
    e420:	b.n	dfae <_dtoa_r+0x396>
    e422:	movs	r3, #0
    e424:	str	r3, [sp, #44]	; 0x2c
    e426:	ldr	r3, [sp, #20]
    e428:	cmp	r3, #0
    e42a:	ble.w	e72e <_dtoa_r+0xb16>
    e42e:	mov	r5, r3
    e430:	mov	r4, r3
    e432:	str	r3, [sp, #56]	; 0x38
    e434:	str	r3, [sp, #32]
    e436:	b.n	e22e <_dtoa_r+0x616>
    e438:	movs	r3, #1
    e43a:	str	r3, [sp, #44]	; 0x2c
    e43c:	b.n	e426 <_dtoa_r+0x80e>
    e43e:	str	r4, [sp, #40]	; 0x28
    e440:	ldr	r2, [sp, #24]
    e442:	ldr	r1, [sp, #40]	; 0x28
    e444:	mov	r0, r9
    e446:	bl	f140 <__pow5mult>
    e44a:	mov	r4, r0
    e44c:	b.n	e06c <_dtoa_r+0x454>
    e44e:	ldr	r3, [sp, #32]
    e450:	cmp	r3, #0
    e452:	bgt.w	de52 <_dtoa_r+0x23a>
    e456:	bne.w	e6f8 <_dtoa_r+0xae0>
    e45a:	movs	r2, #0
    e45c:	ldr	r3, [pc, #112]	; (e4d0 <_dtoa_r+0x8b8>)
    e45e:	ldrd	r0, r1, [sp]
    e462:	bl	acd0 <__aeabi_dmul>
    e466:	mov	r3, fp
    e468:	mov	r2, sl
    e46a:	bl	b1dc <__aeabi_dcmpge>
    e46e:	ldr	r3, [sp, #32]
    e470:	str	r3, [sp, #24]
    e472:	mov	r6, r3
    e474:	cmp	r0, #0
    e476:	beq.w	e64e <_dtoa_r+0xa36>
    e47a:	ldr	r3, [sp, #20]
    e47c:	ldr	r5, [sp, #36]	; 0x24
    e47e:	mvns	r3, r3
    e480:	str	r3, [sp, #16]
    e482:	ldr	r1, [sp, #24]
    e484:	mov	r0, r9
    e486:	bl	eecc <_Bfree>
    e48a:	cmp	r6, #0
    e48c:	beq.w	dfae <_dtoa_r+0x396>
    e490:	b.n	e1a6 <_dtoa_r+0x58e>
    e492:	ldr	r2, [sp, #60]	; 0x3c
    e494:	cmp	r2, #0
    e496:	beq.w	e90a <_dtoa_r+0xcf2>
    e49a:	addw	r3, r3, #1075	; 0x433
    e49e:	ldr	r7, [sp, #24]
    e4a0:	ldr	r5, [sp, #28]
    e4a2:	b.n	dffe <_dtoa_r+0x3e6>
    e4a4:	movs	r0, #28
    e4a6:	b.n	e0be <_dtoa_r+0x4a6>
    e4a8:	ldr	r3, [sp, #0]
    e4aa:	cmp	r3, #1
    e4ac:	ble.w	e9b0 <_dtoa_r+0xd98>
    e4b0:	ldr	r7, [sp, #48]	; 0x30
    e4b2:	movs	r0, #1
    e4b4:	b.n	e0a6 <_dtoa_r+0x48e>
    e4b6:	nop
    e4b8:	.word	0x200009e0
    e4bc:	.word	0x20000aa8
    e4c0:	.word	0x3ff00000
    e4c4:	.word	0x401c0000
    e4c8:	.word	0x3fe00000
    e4cc:	.word	0x40240000
    e4d0:	.word	0x40140000
    e4d4:	mov	r1, r6
    e4d6:	movs	r3, #0
    e4d8:	movs	r2, #10
    e4da:	mov	r0, r9
    e4dc:	bl	eee0 <__multadd>
    e4e0:	ldr	r3, [sp, #56]	; 0x38
    e4e2:	cmp	r3, #0
    e4e4:	mov	r6, r0
    e4e6:	ble.w	ea04 <_dtoa_r+0xdec>
    e4ea:	str	r3, [sp, #32]
    e4ec:	cmp	r5, #0
    e4ee:	ble.n	e4fc <_dtoa_r+0x8e4>
    e4f0:	mov	r1, r6
    e4f2:	mov	r2, r5
    e4f4:	mov	r0, r9
    e4f6:	bl	f1e0 <__lshift>
    e4fa:	mov	r6, r0
    e4fc:	cmp	r7, #0
    e4fe:	bne.w	e7fa <_dtoa_r+0xbe2>
    e502:	mov	r8, r6
    e504:	ldr	r3, [sp, #32]
    e506:	ldr	r2, [sp, #36]	; 0x24
    e508:	subs	r3, #1
    e50a:	adds	r3, r2, r3
    e50c:	str	r3, [sp, #32]
    e50e:	and.w	r3, sl, #1
    e512:	str	r3, [sp, #40]	; 0x28
    e514:	mov	r7, r2
    e516:	ldr.w	fp, [sp, #24]
    e51a:	mov	r0, r4
    e51c:	mov	r1, fp
    e51e:	bl	daf0 <quorem>
    e522:	mov	r1, r6
    e524:	mov	r5, r0
    e526:	mov	r0, r4
    e528:	bl	f290 <__mcmp>
    e52c:	mov	r2, r8
    e52e:	mov	r1, fp
    e530:	mov	sl, r0
    e532:	mov	r0, r9
    e534:	bl	f2d4 <__mdiff>
    e538:	ldr	r2, [r0, #12]
    e53a:	mov	fp, r0
    e53c:	add.w	r3, r5, #48	; 0x30
    e540:	cmp	r2, #0
    e542:	bne.n	e5d8 <_dtoa_r+0x9c0>
    e544:	mov	r1, r0
    e546:	mov	r0, r4
    e548:	str	r3, [sp, #28]
    e54a:	bl	f290 <__mcmp>
    e54e:	mov	r1, fp
    e550:	str	r0, [sp, #20]
    e552:	mov	r0, r9
    e554:	bl	eecc <_Bfree>
    e558:	ldr	r2, [sp, #20]
    e55a:	ldr	r3, [sp, #28]
    e55c:	cbnz	r2, e56a <_dtoa_r+0x952>
    e55e:	ldr	r1, [sp, #0]
    e560:	cbnz	r1, e56a <_dtoa_r+0x952>
    e562:	ldr	r1, [sp, #40]	; 0x28
    e564:	cmp	r1, #0
    e566:	beq.w	e9d4 <_dtoa_r+0xdbc>
    e56a:	cmp.w	sl, #0
    e56e:	blt.w	e738 <_dtoa_r+0xb20>
    e572:	bne.n	e580 <_dtoa_r+0x968>
    e574:	ldr	r1, [sp, #0]
    e576:	cbnz	r1, e580 <_dtoa_r+0x968>
    e578:	ldr	r1, [sp, #40]	; 0x28
    e57a:	cmp	r1, #0
    e57c:	beq.w	e738 <_dtoa_r+0xb20>
    e580:	cmp	r2, #0
    e582:	bgt.w	e822 <_dtoa_r+0xc0a>
    e586:	ldr	r2, [sp, #32]
    e588:	strb	r3, [r7, #0]
    e58a:	add.w	sl, r7, #1
    e58e:	cmp	r7, r2
    e590:	mov	r5, sl
    e592:	beq.w	e83a <_dtoa_r+0xc22>
    e596:	mov	r1, r4
    e598:	movs	r3, #0
    e59a:	movs	r2, #10
    e59c:	mov	r0, r9
    e59e:	bl	eee0 <__multadd>
    e5a2:	cmp	r6, r8
    e5a4:	mov	r4, r0
    e5a6:	mov	r1, r6
    e5a8:	mov.w	r3, #0
    e5ac:	mov.w	r2, #10
    e5b0:	mov	r0, r9
    e5b2:	beq.n	e5cc <_dtoa_r+0x9b4>
    e5b4:	bl	eee0 <__multadd>
    e5b8:	mov	r1, r8
    e5ba:	mov	r6, r0
    e5bc:	movs	r3, #0
    e5be:	movs	r2, #10
    e5c0:	mov	r0, r9
    e5c2:	bl	eee0 <__multadd>
    e5c6:	mov	r7, sl
    e5c8:	mov	r8, r0
    e5ca:	b.n	e516 <_dtoa_r+0x8fe>
    e5cc:	bl	eee0 <__multadd>
    e5d0:	mov	r7, sl
    e5d2:	mov	r6, r0
    e5d4:	mov	r8, r0
    e5d6:	b.n	e516 <_dtoa_r+0x8fe>
    e5d8:	mov	r1, r0
    e5da:	mov	r0, r9
    e5dc:	str	r3, [sp, #20]
    e5de:	bl	eecc <_Bfree>
    e5e2:	movs	r2, #1
    e5e4:	ldr	r3, [sp, #20]
    e5e6:	b.n	e56a <_dtoa_r+0x952>
    e5e8:	ldr	r1, [sp, #24]
    e5ea:	mov	r0, r4
    e5ec:	bl	f290 <__mcmp>
    e5f0:	cmp	r0, #0
    e5f2:	bge.w	e0f4 <_dtoa_r+0x4dc>
    e5f6:	mov	r1, r4
    e5f8:	ldr	r4, [sp, #16]
    e5fa:	movs	r3, #0
    e5fc:	subs	r4, #1
    e5fe:	movs	r2, #10
    e600:	mov	r0, r9
    e602:	str	r4, [sp, #16]
    e604:	bl	eee0 <__multadd>
    e608:	ldr	r3, [sp, #44]	; 0x2c
    e60a:	mov	r4, r0
    e60c:	cmp	r3, #0
    e60e:	bne.w	e4d4 <_dtoa_r+0x8bc>
    e612:	ldr	r3, [sp, #56]	; 0x38
    e614:	cmp	r3, #0
    e616:	ble.w	e9f4 <_dtoa_r+0xddc>
    e61a:	str	r3, [sp, #32]
    e61c:	b.n	e104 <_dtoa_r+0x4ec>
    e61e:	ldr	r4, [sp, #40]	; 0x28
    e620:	b.n	e06c <_dtoa_r+0x454>
    e622:	ldr	r3, [sp, #0]
    e624:	cmp	r3, #2
    e626:	ble.w	e0fc <_dtoa_r+0x4e4>
    e62a:	ldr	r3, [sp, #32]
    e62c:	cmp	r3, #0
    e62e:	bne.w	e96c <_dtoa_r+0xd54>
    e632:	ldr	r1, [sp, #24]
    e634:	movs	r2, #5
    e636:	mov	r0, r9
    e638:	bl	eee0 <__multadd>
    e63c:	mov	r1, r0
    e63e:	str	r0, [sp, #24]
    e640:	mov	r0, r4
    e642:	bl	f290 <__mcmp>
    e646:	cmp	r0, #0
    e648:	str	r4, [sp, #40]	; 0x28
    e64a:	ble.w	e47a <_dtoa_r+0x862>
    e64e:	ldr	r2, [sp, #16]
    e650:	ldr	r1, [sp, #36]	; 0x24
    e652:	movs	r3, #49	; 0x31
    e654:	adds	r2, #1
    e656:	str	r2, [sp, #16]
    e658:	strb	r3, [r1, #0]
    e65a:	adds	r5, r1, #1
    e65c:	b.n	e482 <_dtoa_r+0x86a>
    e65e:	ldr	r2, [sp, #16]
    e660:	adds	r2, #1
    e662:	str	r2, [sp, #16]
    e664:	ldr	r2, [sp, #36]	; 0x24
    e666:	movs	r3, #49	; 0x31
    e668:	strb	r3, [r2, #0]
    e66a:	b.n	e186 <_dtoa_r+0x56e>
    e66c:	movs	r3, #1
    e66e:	str	r3, [sp, #44]	; 0x2c
    e670:	b.n	e218 <_dtoa_r+0x600>
    e672:	ldr.w	r9, [sp, #20]
    e676:	b.n	dfae <_dtoa_r+0x396>
    e678:	cmp.w	sl, #0
    e67c:	bne.w	e092 <_dtoa_r+0x47a>
    e680:	ubfx	r3, fp, #0, #20
    e684:	cmp	r3, #0
    e686:	bne.w	e906 <_dtoa_r+0xcee>
    e68a:	bic.w	r7, fp, #2147483648	; 0x80000000
    e68e:	lsrs	r7, r7, #20
    e690:	lsls	r7, r7, #20
    e692:	cbz	r7, e6a0 <_dtoa_r+0xa88>
    e694:	ldr	r3, [sp, #28]
    e696:	adds	r3, #1
    e698:	str	r3, [sp, #28]
    e69a:	add.w	r8, r8, #1
    e69e:	movs	r7, #1
    e6a0:	ldr	r3, [sp, #48]	; 0x30
    e6a2:	movs	r0, #1
    e6a4:	cmp	r3, #0
    e6a6:	beq.w	e0a6 <_dtoa_r+0x48e>
    e6aa:	b.n	e094 <_dtoa_r+0x47c>
    e6ac:	mov	r0, sl
    e6ae:	bl	ac04 <__aeabi_i2d>
    e6b2:	mov	r2, r6
    e6b4:	mov	r3, r7
    e6b6:	bl	acd0 <__aeabi_dmul>
    e6ba:	movs	r2, #0
    e6bc:	ldr	r3, [pc, #764]	; (e9bc <_dtoa_r+0xda4>)
    e6be:	bl	a96c <__adddf3>
    e6c2:	mov	r4, r0
    e6c4:	sub.w	r5, r1, #54525952	; 0x3400000
    e6c8:	mov	r0, r6
    e6ca:	mov	r1, r7
    e6cc:	movs	r2, #0
    e6ce:	ldr	r3, [pc, #752]	; (e9c0 <_dtoa_r+0xda8>)
    e6d0:	bl	a968 <__aeabi_dsub>
    e6d4:	mov	r2, r4
    e6d6:	mov	r3, r5
    e6d8:	mov	r6, r0
    e6da:	mov	r7, r1
    e6dc:	bl	b1f0 <__aeabi_dcmpgt>
    e6e0:	cmp	r0, #0
    e6e2:	bne.w	e842 <_dtoa_r+0xc2a>
    e6e6:	mov	r2, r4
    e6e8:	add.w	r3, r5, #2147483648	; 0x80000000
    e6ec:	mov	r0, r6
    e6ee:	mov	r1, r7
    e6f0:	bl	b1b4 <__aeabi_dcmplt>
    e6f4:	cmp	r0, #0
    e6f6:	beq.n	e78e <_dtoa_r+0xb76>
    e6f8:	movs	r3, #0
    e6fa:	str	r3, [sp, #24]
    e6fc:	mov	r6, r3
    e6fe:	b.n	e47a <_dtoa_r+0x862>
    e700:	ldr	r0, [sp, #36]	; 0x24
    e702:	b.w	dc8a <_dtoa_r+0x72>
    e706:	ldr	r3, [sp, #24]
    e708:	ldr	r2, [sp, #48]	; 0x30
    e70a:	str	r7, [sp, #24]
    e70c:	subs	r3, r7, r3
    e70e:	add	r2, r3
    e710:	str	r2, [sp, #48]	; 0x30
    e712:	movs	r7, #0
    e714:	b.n	dff2 <_dtoa_r+0x3da>
    e716:	vldr	d7, [sp, #64]	; 0x40
    e71a:	mov.w	sl, #2
    e71e:	vstr	d7, [sp, #72]	; 0x48
    e722:	b.n	e2a4 <_dtoa_r+0x68c>
    e724:	mov	r4, r3
    e726:	movs	r1, #0
    e728:	str.w	r1, [r9, #68]	; 0x44
    e72c:	b.n	e250 <_dtoa_r+0x638>
    e72e:	movs	r4, #1
    e730:	str	r4, [sp, #56]	; 0x38
    e732:	str	r4, [sp, #32]
    e734:	str	r4, [sp, #20]
    e736:	b.n	e726 <_dtoa_r+0xb0e>
    e738:	cmp	r2, #0
    e73a:	mov	sl, r3
    e73c:	ble.n	e762 <_dtoa_r+0xb4a>
    e73e:	mov	r1, r4
    e740:	movs	r2, #1
    e742:	mov	r0, r9
    e744:	bl	f1e0 <__lshift>
    e748:	ldr	r1, [sp, #24]
    e74a:	mov	r4, r0
    e74c:	bl	f290 <__mcmp>
    e750:	cmp	r0, #0
    e752:	ble.w	e9e6 <_dtoa_r+0xdce>
    e756:	cmp.w	sl, #57	; 0x39
    e75a:	beq.w	e970 <_dtoa_r+0xd58>
    e75e:	add.w	sl, r5, #49	; 0x31
    e762:	mov	fp, r6
    e764:	strb.w	sl, [r7]
    e768:	adds	r5, r7, #1
    e76a:	mov	r6, r8
    e76c:	str	r4, [sp, #40]	; 0x28
    e76e:	b.n	e186 <_dtoa_r+0x56e>
    e770:	bne.n	e77c <_dtoa_r+0xb64>
    e772:	tst.w	sl, #1
    e776:	beq.n	e77c <_dtoa_r+0xb64>
    e778:	b.n	e166 <_dtoa_r+0x54e>
    e77a:	mov	r5, r2
    e77c:	ldrb.w	r3, [r5, #-1]
    e780:	cmp	r3, #48	; 0x30
    e782:	add.w	r2, r5, #4294967295
    e786:	beq.n	e77a <_dtoa_r+0xb62>
    e788:	b.n	e186 <_dtoa_r+0x56e>
    e78a:	ldr.w	r8, [sp, #72]	; 0x48
    e78e:	ldrd	sl, fp, [sp, #64]	; 0x40
    e792:	b.w	de2c <_dtoa_r+0x214>
    e796:	ldr	r1, [sp, #36]	; 0x24
    e798:	movs	r2, #48	; 0x30
    e79a:	strb	r2, [r1, #0]
    e79c:	ldr	r2, [sp, #16]
    e79e:	ldrb.w	r4, [r5, #-1]
    e7a2:	adds	r2, #1
    e7a4:	str	r2, [sp, #16]
    e7a6:	b.n	dfaa <_dtoa_r+0x392>
    e7a8:	ldr	r3, [sp, #16]
    e7aa:	negs	r4, r3
    e7ac:	cmp	r4, #0
    e7ae:	beq.w	e918 <_dtoa_r+0xd00>
    e7b2:	ldr	r3, [pc, #528]	; (e9c4 <_dtoa_r+0xdac>)
    e7b4:	and.w	r2, r4, #15
    e7b8:	add.w	r3, r3, r2, lsl #3
    e7bc:	ldrd	r2, r3, [r3]
    e7c0:	ldrd	r0, r1, [sp, #64]	; 0x40
    e7c4:	bl	acd0 <__aeabi_dmul>
    e7c8:	asrs	r4, r4, #4
    e7ca:	mov	r6, r0
    e7cc:	mov	r7, r1
    e7ce:	beq.w	e9fe <_dtoa_r+0xde6>
    e7d2:	ldr	r5, [pc, #500]	; (e9c8 <_dtoa_r+0xdb0>)
    e7d4:	mov.w	sl, #2
    e7d8:	lsls	r2, r4, #31
    e7da:	bpl.n	e7f0 <_dtoa_r+0xbd8>
    e7dc:	mov	r0, r6
    e7de:	mov	r1, r7
    e7e0:	ldrd	r2, r3, [r5]
    e7e4:	bl	acd0 <__aeabi_dmul>
    e7e8:	add.w	sl, sl, #1
    e7ec:	mov	r6, r0
    e7ee:	mov	r7, r1
    e7f0:	asrs	r4, r4, #1
    e7f2:	add.w	r5, r5, #8
    e7f6:	bne.n	e7d8 <_dtoa_r+0xbc0>
    e7f8:	b.n	e2d8 <_dtoa_r+0x6c0>
    e7fa:	ldr	r1, [r6, #4]
    e7fc:	mov	r0, r9
    e7fe:	bl	ee80 <_Balloc>
    e802:	ldr	r3, [r6, #16]
    e804:	adds	r2, r3, #2
    e806:	mov	r5, r0
    e808:	lsls	r2, r2, #2
    e80a:	add.w	r1, r6, #12
    e80e:	adds	r0, #12
    e810:	bl	8568 <memcpy>
    e814:	mov	r1, r5
    e816:	movs	r2, #1
    e818:	mov	r0, r9
    e81a:	bl	f1e0 <__lshift>
    e81e:	mov	r8, r0
    e820:	b.n	e504 <_dtoa_r+0x8ec>
    e822:	cmp	r3, #57	; 0x39
    e824:	beq.w	e970 <_dtoa_r+0xd58>
    e828:	add.w	sl, r3, #1
    e82c:	mov	fp, r6
    e82e:	strb.w	sl, [r7]
    e832:	adds	r5, r7, #1
    e834:	mov	r6, r8
    e836:	str	r4, [sp, #40]	; 0x28
    e838:	b.n	e186 <_dtoa_r+0x56e>
    e83a:	mov	fp, r6
    e83c:	mov	sl, r3
    e83e:	mov	r6, r8
    e840:	b.n	e14e <_dtoa_r+0x536>
    e842:	movs	r3, #0
    e844:	str	r3, [sp, #24]
    e846:	mov	r6, r3
    e848:	b.n	e64e <_dtoa_r+0xa36>
    e84a:	ldr	r3, [sp, #72]	; 0x48
    e84c:	ldr	r1, [pc, #372]	; (e9c4 <_dtoa_r+0xdac>)
    e84e:	subs	r2, r3, #1
    e850:	add.w	r1, r1, r2, lsl #3
    e854:	mov	r3, r5
    e856:	str	r2, [sp, #92]	; 0x5c
    e858:	ldrd	r0, r1, [r1]
    e85c:	mov	r2, r4
    e85e:	bl	acd0 <__aeabi_dmul>
    e862:	strd	r0, r1, [sp, #80]	; 0x50
    e866:	mov	r1, r7
    e868:	mov	r0, r6
    e86a:	bl	f664 <__aeabi_d2iz>
    e86e:	mov	r4, r0
    e870:	bl	ac04 <__aeabi_i2d>
    e874:	mov	r3, r1
    e876:	mov	r2, r0
    e878:	mov	r1, r7
    e87a:	mov	r0, r6
    e87c:	bl	a968 <__aeabi_dsub>
    e880:	ldr	r3, [sp, #72]	; 0x48
    e882:	mov	r7, r1
    e884:	ldr	r1, [sp, #36]	; 0x24
    e886:	adds	r4, #48	; 0x30
    e888:	cmp	r3, #1
    e88a:	mov	r6, r0
    e88c:	strb	r4, [r1, #0]
    e88e:	add.w	r5, r1, #1
    e892:	beq.n	e8d6 <_dtoa_r+0xcbe>
    e894:	ldr	r3, [sp, #72]	; 0x48
    e896:	ldr	r2, [sp, #36]	; 0x24
    e898:	add	r3, r2
    e89a:	mov	sl, r3
    e89c:	mov	fp, r5
    e89e:	movs	r2, #0
    e8a0:	ldr	r3, [pc, #296]	; (e9cc <_dtoa_r+0xdb4>)
    e8a2:	mov	r0, r6
    e8a4:	mov	r1, r7
    e8a6:	bl	acd0 <__aeabi_dmul>
    e8aa:	mov	r7, r1
    e8ac:	mov	r6, r0
    e8ae:	bl	f664 <__aeabi_d2iz>
    e8b2:	mov	r4, r0
    e8b4:	bl	ac04 <__aeabi_i2d>
    e8b8:	adds	r4, #48	; 0x30
    e8ba:	mov	r2, r0
    e8bc:	mov	r3, r1
    e8be:	mov	r0, r6
    e8c0:	mov	r1, r7
    e8c2:	bl	a968 <__aeabi_dsub>
    e8c6:	strb.w	r4, [fp], #1
    e8ca:	cmp	sl, fp
    e8cc:	mov	r6, r0
    e8ce:	mov	r7, r1
    e8d0:	bne.n	e89e <_dtoa_r+0xc86>
    e8d2:	ldr	r3, [sp, #92]	; 0x5c
    e8d4:	add	r5, r3
    e8d6:	movs	r2, #0
    e8d8:	ldr	r3, [pc, #244]	; (e9d0 <_dtoa_r+0xdb8>)
    e8da:	ldrd	r0, r1, [sp, #80]	; 0x50
    e8de:	bl	a96c <__adddf3>
    e8e2:	mov	r2, r6
    e8e4:	mov	r3, r7
    e8e6:	bl	b1b4 <__aeabi_dcmplt>
    e8ea:	cmp	r0, #0
    e8ec:	beq.n	e980 <_dtoa_r+0xd68>
    e8ee:	ldr	r3, [sp, #88]	; 0x58
    e8f0:	str	r3, [sp, #16]
    e8f2:	ldrb.w	r4, [r5, #-1]
    e8f6:	b.w	df92 <_dtoa_r+0x37a>
    e8fa:	ldr	r3, [sp, #28]
    e8fc:	ldr	r2, [sp, #32]
    e8fe:	subs	r5, r3, r2
    e900:	movs	r3, #0
    e902:	b.w	dffe <_dtoa_r+0x3e6>
    e906:	movs	r7, #0
    e908:	b.n	e6a0 <_dtoa_r+0xa88>
    e90a:	ldr	r3, [sp, #96]	; 0x60
    e90c:	ldr	r7, [sp, #24]
    e90e:	ldr	r5, [sp, #28]
    e910:	rsb	r3, r3, #54	; 0x36
    e914:	b.w	dffe <_dtoa_r+0x3e6>
    e918:	ldrd	r6, r7, [sp, #64]	; 0x40
    e91c:	mov.w	sl, #2
    e920:	b.n	e2d8 <_dtoa_r+0x6c0>
    e922:	ldr	r3, [sp, #32]
    e924:	cmp	r3, #0
    e926:	beq.w	e6ac <_dtoa_r+0xa94>
    e92a:	ldr	r3, [sp, #56]	; 0x38
    e92c:	cmp	r3, #0
    e92e:	ble.w	e78e <_dtoa_r+0xb76>
    e932:	movs	r2, #0
    e934:	ldr	r3, [pc, #148]	; (e9cc <_dtoa_r+0xdb4>)
    e936:	mov	r0, r6
    e938:	mov	r1, r7
    e93a:	bl	acd0 <__aeabi_dmul>
    e93e:	mov	r6, r0
    e940:	mov	r7, r1
    e942:	add.w	r0, sl, #1
    e946:	bl	ac04 <__aeabi_i2d>
    e94a:	mov	r2, r6
    e94c:	mov	r3, r7
    e94e:	bl	acd0 <__aeabi_dmul>
    e952:	movs	r2, #0
    e954:	ldr	r3, [pc, #100]	; (e9bc <_dtoa_r+0xda4>)
    e956:	bl	a96c <__adddf3>
    e95a:	ldr	r2, [sp, #16]
    e95c:	ldr	r3, [sp, #56]	; 0x38
    e95e:	str	r3, [sp, #72]	; 0x48
    e960:	subs	r2, #1
    e962:	mov	r4, r0
    e964:	sub.w	r5, r1, #54525952	; 0x3400000
    e968:	str	r2, [sp, #88]	; 0x58
    e96a:	b.n	e31a <_dtoa_r+0x702>
    e96c:	str	r4, [sp, #40]	; 0x28
    e96e:	b.n	e47a <_dtoa_r+0x862>
    e970:	movs	r2, #57	; 0x39
    e972:	mov	fp, r6
    e974:	str	r4, [sp, #40]	; 0x28
    e976:	mov	r6, r8
    e978:	strb	r2, [r7, #0]
    e97a:	adds	r5, r7, #1
    e97c:	b.w	e16a <_dtoa_r+0x552>
    e980:	ldrd	r2, r3, [sp, #80]	; 0x50
    e984:	movs	r0, #0
    e986:	ldr	r1, [pc, #72]	; (e9d0 <_dtoa_r+0xdb8>)
    e988:	bl	a968 <__aeabi_dsub>
    e98c:	mov	r2, r6
    e98e:	mov	r3, r7
    e990:	bl	b1f0 <__aeabi_dcmpgt>
    e994:	cbnz	r0, e99a <_dtoa_r+0xd82>
    e996:	b.n	e78e <_dtoa_r+0xb76>
    e998:	mov	r5, r2
    e99a:	ldrb.w	r3, [r5, #-1]
    e99e:	cmp	r3, #48	; 0x30
    e9a0:	add.w	r2, r5, #4294967295
    e9a4:	beq.n	e998 <_dtoa_r+0xd80>
    e9a6:	b.n	e41c <_dtoa_r+0x804>
    e9a8:	ldr	r3, [sp, #88]	; 0x58
    e9aa:	str	r3, [sp, #16]
    e9ac:	b.w	df92 <_dtoa_r+0x37a>
    e9b0:	cmp.w	sl, #0
    e9b4:	bne.w	e4b0 <_dtoa_r+0x898>
    e9b8:	b.n	e680 <_dtoa_r+0xa68>
    e9ba:	nop
    e9bc:	.word	0x401c0000
    e9c0:	.word	0x40140000
    e9c4:	.word	0x200009e0
    e9c8:	.word	0x20000aa8
    e9cc:	.word	0x40240000
    e9d0:	.word	0x3fe00000
    e9d4:	cmp	r3, #57	; 0x39
    e9d6:	mov	fp, sl
    e9d8:	mov	sl, r3
    e9da:	beq.n	e970 <_dtoa_r+0xd58>
    e9dc:	cmp.w	fp, #0
    e9e0:	bgt.w	e75e <_dtoa_r+0xb46>
    e9e4:	b.n	e762 <_dtoa_r+0xb4a>
    e9e6:	bne.w	e762 <_dtoa_r+0xb4a>
    e9ea:	tst.w	sl, #1
    e9ee:	beq.w	e762 <_dtoa_r+0xb4a>
    e9f2:	b.n	e756 <_dtoa_r+0xb3e>
    e9f4:	ldr	r3, [sp, #0]
    e9f6:	cmp	r3, #2
    e9f8:	bgt.n	ea46 <_dtoa_r+0xe2e>
    e9fa:	ldr	r3, [sp, #56]	; 0x38
    e9fc:	b.n	e61a <_dtoa_r+0xa02>
    e9fe:	mov.w	sl, #2
    ea02:	b.n	e2d8 <_dtoa_r+0x6c0>
    ea04:	ldr	r3, [sp, #0]
    ea06:	cmp	r3, #2
    ea08:	bgt.n	ea46 <_dtoa_r+0xe2e>
    ea0a:	ldr	r3, [sp, #56]	; 0x38
    ea0c:	b.n	e4ea <_dtoa_r+0x8d2>
    ea0e:	movs	r4, #0
    ea10:	str.w	r4, [r9, #68]	; 0x44
    ea14:	mov	r1, r4
    ea16:	mov	r0, r9
    ea18:	bl	ee80 <_Balloc>
    ea1c:	mov.w	r3, #4294967295
    ea20:	str	r3, [sp, #32]
    ea22:	str	r3, [sp, #56]	; 0x38
    ea24:	movs	r3, #1
    ea26:	str	r0, [sp, #36]	; 0x24
    ea28:	str	r4, [sp, #20]
    ea2a:	str.w	r0, [r9, #64]	; 0x40
    ea2e:	str	r3, [sp, #44]	; 0x2c
    ea30:	b.w	de2c <_dtoa_r+0x214>
    ea34:	beq.w	e0c8 <_dtoa_r+0x4b0>
    ea38:	rsb	r0, r0, #60	; 0x3c
    ea3c:	b.w	e0be <_dtoa_r+0x4a6>
    ea40:	movs	r6, #1
    ea42:	b.w	ddbe <_dtoa_r+0x1a6>
    ea46:	ldr	r3, [sp, #56]	; 0x38
    ea48:	str	r3, [sp, #32]
    ea4a:	b.n	e62a <_dtoa_r+0xa12>

0000ea4c <fcvtbuf>:
    ea4c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ea50:	vpush	{d8}
    ea54:	vmov.f32	s16, s0
    ea58:	vmov.f32	s17, s1
    ea5c:	ldr	r5, [pc, #224]	; (eb40 <fcvtbuf+0xf4>)
    ea5e:	sub	sp, #20
    ea60:	ldr	r7, [r5, #0]
    ea62:	mov	r4, r0
    ea64:	mov	r6, r1
    ea66:	mov	r8, r2
    ea68:	mov	r5, r3
    ea6a:	cmp	r3, #0
    ea6c:	beq.n	eb0a <fcvtbuf+0xbe>
    ea6e:	movs	r2, #0
    ea70:	ldr	r3, [pc, #208]	; (eb44 <fcvtbuf+0xf8>)
    ea72:	vmov	r0, r1, d8
    ea76:	bl	b1b4 <__aeabi_dcmplt>
    ea7a:	cbnz	r0, eadc <fcvtbuf+0x90>
    ea7c:	vmov.f32	s0, s16
    ea80:	vmov.f32	s1, s17
    ea84:	add	r3, sp, #12
    ea86:	str	r3, [sp, #4]
    ea88:	str.w	r8, [sp]
    ea8c:	mov	r0, r7
    ea8e:	mov	r3, r6
    ea90:	mov	r2, r4
    ea92:	movs	r1, #3
    ea94:	bl	dc18 <_dtoa_r>
    ea98:	ldr	r3, [sp, #12]
    ea9a:	ldr	r1, [r6, #0]
    ea9c:	cmp	r0, r3
    ea9e:	rsb	r1, r1, #0
    eaa2:	bcs.n	eb18 <fcvtbuf+0xcc>
    eaa4:	subs	r1, r1, r5
    eaa6:	mov	r3, r5
    eaa8:	ldrb.w	r2, [r0], #1
    eaac:	strb.w	r2, [r3], #1
    eab0:	ldr	r2, [sp, #12]
    eab2:	cmp	r2, r0
    eab4:	add.w	r6, r3, r1
    eab8:	bhi.n	eaa8 <fcvtbuf+0x5c>
    eaba:	cmp	r4, r6
    eabc:	ble.n	eb1e <fcvtbuf+0xd2>
    eabe:	subs	r2, r4, r6
    eac0:	add	r2, r3
    eac2:	movs	r1, #48	; 0x30
    eac4:	strb.w	r1, [r3], #1
    eac8:	cmp	r2, r3
    eaca:	bne.n	eac4 <fcvtbuf+0x78>
    eacc:	movs	r3, #0
    eace:	strb	r3, [r2, #0]
    ead0:	mov	r0, r5
    ead2:	add	sp, #20
    ead4:	vpop	{d8}
    ead8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    eadc:	movs	r2, #0
    eade:	ldr	r3, [pc, #104]	; (eb48 <fcvtbuf+0xfc>)
    eae0:	vmov	r0, r1, d8
    eae4:	bl	b1f0 <__aeabi_dcmpgt>
    eae8:	cmp	r0, #0
    eaea:	beq.n	ea7c <fcvtbuf+0x30>
    eaec:	vmov.f32	s0, s16
    eaf0:	vmov.f32	s1, s17
    eaf4:	add	r3, sp, #12
    eaf6:	str	r3, [sp, #4]
    eaf8:	str.w	r8, [sp]
    eafc:	mov	r0, r7
    eafe:	mov	r3, r6
    eb00:	mov	r2, r4
    eb02:	movs	r1, #2
    eb04:	bl	dc18 <_dtoa_r>
    eb08:	b.n	ea98 <fcvtbuf+0x4c>
    eb0a:	ldr	r2, [r7, #80]	; 0x50
    eb0c:	add.w	r3, r0, #35	; 0x23
    eb10:	cmp	r2, r3
    eb12:	ble.n	eb22 <fcvtbuf+0xd6>
    eb14:	ldr	r5, [r7, #84]	; 0x54
    eb16:	b.n	ea6e <fcvtbuf+0x22>
    eb18:	mov	r6, r1
    eb1a:	mov	r3, r5
    eb1c:	b.n	eaba <fcvtbuf+0x6e>
    eb1e:	mov	r2, r3
    eb20:	b.n	eacc <fcvtbuf+0x80>
    eb22:	add.w	r9, r0, #36	; 0x24
    eb26:	mov	r2, r9
    eb28:	ldr	r1, [r7, #84]	; 0x54
    eb2a:	mov	r0, r7
    eb2c:	bl	bcd0 <_realloc_r>
    eb30:	mov	r5, r0
    eb32:	cmp	r0, #0
    eb34:	beq.n	ead0 <fcvtbuf+0x84>
    eb36:	str.w	r9, [r7, #80]	; 0x50
    eb3a:	str	r0, [r7, #84]	; 0x54
    eb3c:	b.n	ea6e <fcvtbuf+0x22>
    eb3e:	nop
    eb40:	.word	0x20000f60
    eb44:	.word	0x3ff00000
    eb48:	.word	0xbff00000

0000eb4c <_malloc_trim_r>:
    eb4c:	push	{r3, r4, r5, r6, r7, lr}
    eb4e:	ldr	r7, [pc, #140]	; (ebdc <_malloc_trim_r+0x90>)
    eb50:	mov	r4, r1
    eb52:	mov	r6, r0
    eb54:	bl	bcc8 <__malloc_lock>
    eb58:	ldr	r3, [r7, #8]
    eb5a:	ldr	r5, [r3, #4]
    eb5c:	bic.w	r5, r5, #3
    eb60:	subs	r1, r5, r4
    eb62:	addw	r1, r1, #4079	; 0xfef
    eb66:	bic.w	r1, r1, #4080	; 0xff0
    eb6a:	bic.w	r1, r1, #15
    eb6e:	sub.w	r4, r1, #4096	; 0x1000
    eb72:	cmp.w	r4, #4096	; 0x1000
    eb76:	blt.n	eb88 <_malloc_trim_r+0x3c>
    eb78:	movs	r1, #0
    eb7a:	mov	r0, r6
    eb7c:	bl	c0b0 <_sbrk_r>
    eb80:	ldr	r3, [r7, #8]
    eb82:	add	r3, r5
    eb84:	cmp	r0, r3
    eb86:	beq.n	eb92 <_malloc_trim_r+0x46>
    eb88:	mov	r0, r6
    eb8a:	bl	bccc <__malloc_unlock>
    eb8e:	movs	r0, #0
    eb90:	pop	{r3, r4, r5, r6, r7, pc}
    eb92:	negs	r1, r4
    eb94:	mov	r0, r6
    eb96:	bl	c0b0 <_sbrk_r>
    eb9a:	adds	r0, #1
    eb9c:	beq.n	ebba <_malloc_trim_r+0x6e>
    eb9e:	ldr	r3, [pc, #64]	; (ebe0 <_malloc_trim_r+0x94>)
    eba0:	ldr	r2, [r7, #8]
    eba2:	ldr	r1, [r3, #0]
    eba4:	subs	r5, r5, r4
    eba6:	orr.w	r5, r5, #1
    ebaa:	mov	r0, r6
    ebac:	subs	r1, r1, r4
    ebae:	str	r5, [r2, #4]
    ebb0:	str	r1, [r3, #0]
    ebb2:	bl	bccc <__malloc_unlock>
    ebb6:	movs	r0, #1
    ebb8:	pop	{r3, r4, r5, r6, r7, pc}
    ebba:	movs	r1, #0
    ebbc:	mov	r0, r6
    ebbe:	bl	c0b0 <_sbrk_r>
    ebc2:	ldr	r2, [r7, #8]
    ebc4:	subs	r3, r0, r2
    ebc6:	cmp	r3, #15
    ebc8:	ble.n	eb88 <_malloc_trim_r+0x3c>
    ebca:	ldr	r4, [pc, #24]	; (ebe4 <_malloc_trim_r+0x98>)
    ebcc:	ldr	r1, [pc, #16]	; (ebe0 <_malloc_trim_r+0x94>)
    ebce:	ldr	r4, [r4, #0]
    ebd0:	orr.w	r3, r3, #1
    ebd4:	subs	r0, r0, r4
    ebd6:	str	r3, [r2, #4]
    ebd8:	str	r0, [r1, #0]
    ebda:	b.n	eb88 <_malloc_trim_r+0x3c>
    ebdc:	.word	0x200010d0
    ebe0:	.word	0x2000e804
    ebe4:	.word	0x200014dc

0000ebe8 <_free_r>:
    ebe8:	cmp	r1, #0
    ebea:	beq.n	ec78 <_free_r+0x90>
    ebec:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ebf0:	mov	r5, r1
    ebf2:	mov	r8, r0
    ebf4:	bl	bcc8 <__malloc_lock>
    ebf8:	ldr.w	r7, [r5, #-4]
    ebfc:	ldr	r1, [pc, #424]	; (eda8 <_free_r+0x1c0>)
    ebfe:	bic.w	r3, r7, #1
    ec02:	sub.w	r4, r5, #8
    ec06:	adds	r2, r4, r3
    ec08:	ldr	r6, [r1, #8]
    ec0a:	ldr	r0, [r2, #4]
    ec0c:	cmp	r2, r6
    ec0e:	bic.w	r0, r0, #3
    ec12:	beq.n	ecda <_free_r+0xf2>
    ec14:	lsls	r6, r7, #31
    ec16:	str	r0, [r2, #4]
    ec18:	bmi.n	ec32 <_free_r+0x4a>
    ec1a:	ldr.w	r7, [r5, #-8]
    ec1e:	subs	r4, r4, r7
    ec20:	add.w	lr, r1, #8
    ec24:	ldr	r5, [r4, #8]
    ec26:	cmp	r5, lr
    ec28:	add	r3, r7
    ec2a:	beq.n	ed0c <_free_r+0x124>
    ec2c:	ldr	r7, [r4, #12]
    ec2e:	str	r7, [r5, #12]
    ec30:	str	r5, [r7, #8]
    ec32:	adds	r5, r2, r0
    ec34:	ldr	r5, [r5, #4]
    ec36:	lsls	r5, r5, #31
    ec38:	bpl.n	ecc0 <_free_r+0xd8>
    ec3a:	orr.w	r2, r3, #1
    ec3e:	str	r2, [r4, #4]
    ec40:	str	r3, [r4, r3]
    ec42:	cmp.w	r3, #512	; 0x200
    ec46:	bcs.n	ec7a <_free_r+0x92>
    ec48:	lsrs	r3, r3, #3
    ec4a:	adds	r2, r3, #1
    ec4c:	ldr	r5, [r1, #4]
    ec4e:	ldr.w	r7, [r1, r2, lsl #3]
    ec52:	str	r7, [r4, #8]
    ec54:	movs	r0, #1
    ec56:	asrs	r3, r3, #2
    ec58:	lsl.w	r3, r0, r3
    ec5c:	add.w	r0, r1, r2, lsl #3
    ec60:	orrs	r5, r3
    ec62:	subs	r0, #8
    ec64:	str	r0, [r4, #12]
    ec66:	str	r5, [r1, #4]
    ec68:	str.w	r4, [r1, r2, lsl #3]
    ec6c:	str	r4, [r7, #12]
    ec6e:	mov	r0, r8
    ec70:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ec74:	b.w	bccc <__malloc_unlock>
    ec78:	bx	lr
    ec7a:	lsrs	r2, r3, #9
    ec7c:	cmp	r2, #4
    ec7e:	bhi.n	ed28 <_free_r+0x140>
    ec80:	lsrs	r2, r3, #6
    ec82:	add.w	r7, r2, #57	; 0x39
    ec86:	lsls	r7, r7, #1
    ec88:	add.w	r5, r2, #56	; 0x38
    ec8c:	add.w	r0, r1, r7, lsl #2
    ec90:	ldr.w	r2, [r1, r7, lsl #2]
    ec94:	ldr	r1, [pc, #272]	; (eda8 <_free_r+0x1c0>)
    ec96:	subs	r0, #8
    ec98:	cmp	r0, r2
    ec9a:	beq.n	ed38 <_free_r+0x150>
    ec9c:	ldr	r1, [r2, #4]
    ec9e:	bic.w	r1, r1, #3
    eca2:	cmp	r3, r1
    eca4:	bcs.n	ecac <_free_r+0xc4>
    eca6:	ldr	r2, [r2, #8]
    eca8:	cmp	r0, r2
    ecaa:	bne.n	ec9c <_free_r+0xb4>
    ecac:	ldr	r0, [r2, #12]
    ecae:	str	r0, [r4, #12]
    ecb0:	str	r2, [r4, #8]
    ecb2:	str	r4, [r0, #8]
    ecb4:	str	r4, [r2, #12]
    ecb6:	mov	r0, r8
    ecb8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ecbc:	b.w	bccc <__malloc_unlock>
    ecc0:	ldr	r5, [r2, #8]
    ecc2:	ldr	r7, [pc, #232]	; (edac <_free_r+0x1c4>)
    ecc4:	cmp	r5, r7
    ecc6:	add	r3, r0
    ecc8:	beq.n	ed4a <_free_r+0x162>
    ecca:	ldr	r0, [r2, #12]
    eccc:	str	r0, [r5, #12]
    ecce:	orr.w	r2, r3, #1
    ecd2:	str	r5, [r0, #8]
    ecd4:	str	r2, [r4, #4]
    ecd6:	str	r3, [r4, r3]
    ecd8:	b.n	ec42 <_free_r+0x5a>
    ecda:	lsls	r7, r7, #31
    ecdc:	add	r3, r0
    ecde:	bmi.n	ecf0 <_free_r+0x108>
    ece0:	ldr.w	r2, [r5, #-8]
    ece4:	subs	r4, r4, r2
    ece6:	add	r3, r2
    ece8:	ldr	r0, [r4, #8]
    ecea:	ldr	r2, [r4, #12]
    ecec:	str	r2, [r0, #12]
    ecee:	str	r0, [r2, #8]
    ecf0:	ldr	r2, [pc, #188]	; (edb0 <_free_r+0x1c8>)
    ecf2:	ldr	r2, [r2, #0]
    ecf4:	orr.w	r0, r3, #1
    ecf8:	cmp	r3, r2
    ecfa:	str	r0, [r4, #4]
    ecfc:	str	r4, [r1, #8]
    ecfe:	bcc.n	ec6e <_free_r+0x86>
    ed00:	ldr	r3, [pc, #176]	; (edb4 <_free_r+0x1cc>)
    ed02:	mov	r0, r8
    ed04:	ldr	r1, [r3, #0]
    ed06:	bl	eb4c <_malloc_trim_r>
    ed0a:	b.n	ec6e <_free_r+0x86>
    ed0c:	adds	r1, r2, r0
    ed0e:	ldr	r1, [r1, #4]
    ed10:	lsls	r1, r1, #31
    ed12:	bmi.n	ed9e <_free_r+0x1b6>
    ed14:	ldr	r1, [r2, #8]
    ed16:	ldr	r2, [r2, #12]
    ed18:	str	r2, [r1, #12]
    ed1a:	add	r3, r0
    ed1c:	orr.w	r0, r3, #1
    ed20:	str	r1, [r2, #8]
    ed22:	str	r0, [r4, #4]
    ed24:	str	r3, [r4, r3]
    ed26:	b.n	ec6e <_free_r+0x86>
    ed28:	cmp	r2, #20
    ed2a:	bhi.n	ed5c <_free_r+0x174>
    ed2c:	add.w	r7, r2, #92	; 0x5c
    ed30:	lsls	r7, r7, #1
    ed32:	add.w	r5, r2, #91	; 0x5b
    ed36:	b.n	ec8c <_free_r+0xa4>
    ed38:	asrs	r2, r5, #2
    ed3a:	ldr	r3, [r1, #4]
    ed3c:	movs	r5, #1
    ed3e:	lsl.w	r2, r5, r2
    ed42:	orrs	r3, r2
    ed44:	str	r3, [r1, #4]
    ed46:	mov	r2, r0
    ed48:	b.n	ecae <_free_r+0xc6>
    ed4a:	orr.w	r2, r3, #1
    ed4e:	str	r4, [r1, #20]
    ed50:	str	r4, [r1, #16]
    ed52:	str	r5, [r4, #12]
    ed54:	str	r5, [r4, #8]
    ed56:	str	r2, [r4, #4]
    ed58:	str	r3, [r4, r3]
    ed5a:	b.n	ec6e <_free_r+0x86>
    ed5c:	cmp	r2, #84	; 0x54
    ed5e:	bhi.n	ed6e <_free_r+0x186>
    ed60:	lsrs	r2, r3, #12
    ed62:	add.w	r7, r2, #111	; 0x6f
    ed66:	lsls	r7, r7, #1
    ed68:	add.w	r5, r2, #110	; 0x6e
    ed6c:	b.n	ec8c <_free_r+0xa4>
    ed6e:	cmp.w	r2, #340	; 0x154
    ed72:	bhi.n	ed82 <_free_r+0x19a>
    ed74:	lsrs	r2, r3, #15
    ed76:	add.w	r7, r2, #120	; 0x78
    ed7a:	lsls	r7, r7, #1
    ed7c:	add.w	r5, r2, #119	; 0x77
    ed80:	b.n	ec8c <_free_r+0xa4>
    ed82:	movw	r0, #1364	; 0x554
    ed86:	cmp	r2, r0
    ed88:	bhi.n	ed98 <_free_r+0x1b0>
    ed8a:	lsrs	r2, r3, #18
    ed8c:	add.w	r7, r2, #125	; 0x7d
    ed90:	lsls	r7, r7, #1
    ed92:	add.w	r5, r2, #124	; 0x7c
    ed96:	b.n	ec8c <_free_r+0xa4>
    ed98:	movs	r7, #254	; 0xfe
    ed9a:	movs	r5, #126	; 0x7e
    ed9c:	b.n	ec8c <_free_r+0xa4>
    ed9e:	orr.w	r2, r3, #1
    eda2:	str	r2, [r4, #4]
    eda4:	str	r3, [r4, r3]
    eda6:	b.n	ec6e <_free_r+0x86>
    eda8:	.word	0x200010d0
    edac:	.word	0x200010d8
    edb0:	.word	0x200014d8
    edb4:	.word	0x2000e800

0000edb8 <_localeconv_r>:
    edb8:	ldr	r2, [pc, #16]	; (edcc <_localeconv_r+0x14>)
    edba:	ldr	r3, [pc, #20]	; (edd0 <_localeconv_r+0x18>)
    edbc:	ldr	r2, [r2, #0]
    edbe:	ldr	r0, [r2, #52]	; 0x34
    edc0:	cmp	r0, #0
    edc2:	it	eq
    edc4:	moveq	r0, r3
    edc6:	adds	r0, #240	; 0xf0
    edc8:	bx	lr
    edca:	nop
    edcc:	.word	0x20000f60
    edd0:	.word	0x20000f64
	...

0000ede0 <memchr>:
    ede0:	and.w	r1, r1, #255	; 0xff
    ede4:	cmp	r2, #16
    ede6:	blt.n	ee40 <memchr+0x60>
    ede8:	tst.w	r0, #7
    edec:	beq.n	ee00 <memchr+0x20>
    edee:	ldrb.w	r3, [r0], #1
    edf2:	subs	r2, #1
    edf4:	cmp	r3, r1
    edf6:	beq.n	ee54 <memchr+0x74>
    edf8:	tst.w	r0, #7
    edfc:	cbz	r2, ee50 <memchr+0x70>
    edfe:	bne.n	edee <memchr+0xe>
    ee00:	push	{r4, r5, r6, r7}
    ee02:	orr.w	r1, r1, r1, lsl #8
    ee06:	orr.w	r1, r1, r1, lsl #16
    ee0a:	bic.w	r4, r2, #7
    ee0e:	mvns.w	r7, #0
    ee12:	movs	r3, #0
    ee14:	ldrd	r5, r6, [r0], #8
    ee18:	subs	r4, #8
    ee1a:	eor.w	r5, r5, r1
    ee1e:	eor.w	r6, r6, r1
    ee22:	uadd8	r5, r5, r7
    ee26:	sel	r5, r3, r7
    ee2a:	uadd8	r6, r6, r7
    ee2e:	sel	r6, r5, r7
    ee32:	cbnz	r6, ee58 <memchr+0x78>
    ee34:	bne.n	ee14 <memchr+0x34>
    ee36:	pop	{r4, r5, r6, r7}
    ee38:	and.w	r1, r1, #255	; 0xff
    ee3c:	and.w	r2, r2, #7
    ee40:	cbz	r2, ee50 <memchr+0x70>
    ee42:	ldrb.w	r3, [r0], #1
    ee46:	subs	r2, #1
    ee48:	eor.w	r3, r3, r1
    ee4c:	cbz	r3, ee54 <memchr+0x74>
    ee4e:	bne.n	ee42 <memchr+0x62>
    ee50:	movs	r0, #0
    ee52:	bx	lr
    ee54:	subs	r0, #1
    ee56:	bx	lr
    ee58:	cmp	r5, #0
    ee5a:	itte	eq
    ee5c:	moveq	r5, r6
    ee5e:	subeq	r0, #3
    ee60:	subne	r0, #7
    ee62:	tst.w	r5, #1
    ee66:	bne.n	ee78 <memchr+0x98>
    ee68:	adds	r0, #1
    ee6a:	tst.w	r5, #256	; 0x100
    ee6e:	ittt	eq
    ee70:	addeq	r0, #1
    ee72:	tsteq.w	r5, #98304	; 0x18000
    ee76:	addeq	r0, #1
    ee78:	pop	{r4, r5, r6, r7}
    ee7a:	subs	r0, #1
    ee7c:	bx	lr
    ee7e:	nop

0000ee80 <_Balloc>:
    ee80:	ldr	r3, [r0, #76]	; 0x4c
    ee82:	push	{r4, r5, r6, lr}
    ee84:	mov	r5, r0
    ee86:	mov	r4, r1
    ee88:	cbz	r3, ee9e <_Balloc+0x1e>
    ee8a:	ldr.w	r0, [r3, r4, lsl #2]
    ee8e:	cbz	r0, eeb2 <_Balloc+0x32>
    ee90:	ldr	r2, [r0, #0]
    ee92:	str.w	r2, [r3, r4, lsl #2]
    ee96:	movs	r3, #0
    ee98:	str	r3, [r0, #16]
    ee9a:	str	r3, [r0, #12]
    ee9c:	pop	{r4, r5, r6, pc}
    ee9e:	movs	r2, #33	; 0x21
    eea0:	movs	r1, #4
    eea2:	bl	f604 <_calloc_r>
    eea6:	str	r0, [r5, #76]	; 0x4c
    eea8:	mov	r3, r0
    eeaa:	cmp	r0, #0
    eeac:	bne.n	ee8a <_Balloc+0xa>
    eeae:	movs	r0, #0
    eeb0:	pop	{r4, r5, r6, pc}
    eeb2:	movs	r1, #1
    eeb4:	lsl.w	r6, r1, r4
    eeb8:	adds	r2, r6, #5
    eeba:	mov	r0, r5
    eebc:	lsls	r2, r2, #2
    eebe:	bl	f604 <_calloc_r>
    eec2:	cmp	r0, #0
    eec4:	beq.n	eeae <_Balloc+0x2e>
    eec6:	str	r4, [r0, #4]
    eec8:	str	r6, [r0, #8]
    eeca:	b.n	ee96 <_Balloc+0x16>

0000eecc <_Bfree>:
    eecc:	cbz	r1, eedc <_Bfree+0x10>
    eece:	ldr	r3, [r0, #76]	; 0x4c
    eed0:	ldr	r2, [r1, #4]
    eed2:	ldr.w	r0, [r3, r2, lsl #2]
    eed6:	str	r0, [r1, #0]
    eed8:	str.w	r1, [r3, r2, lsl #2]
    eedc:	bx	lr
    eede:	nop

0000eee0 <__multadd>:
    eee0:	push	{r4, r5, r6, r7, lr}
    eee2:	ldr	r4, [r1, #16]
    eee4:	sub	sp, #12
    eee6:	mov	r5, r1
    eee8:	mov	r6, r0
    eeea:	add.w	lr, r1, #20
    eeee:	movs	r7, #0
    eef0:	ldr.w	r0, [lr]
    eef4:	uxth	r1, r0
    eef6:	mla	r1, r2, r1, r3
    eefa:	lsrs	r3, r1, #16
    eefc:	lsrs	r0, r0, #16
    eefe:	mla	r3, r2, r0, r3
    ef02:	uxth	r1, r1
    ef04:	adds	r7, #1
    ef06:	add.w	r1, r1, r3, lsl #16
    ef0a:	cmp	r4, r7
    ef0c:	str.w	r1, [lr], #4
    ef10:	mov.w	r3, r3, lsr #16
    ef14:	bgt.n	eef0 <__multadd+0x10>
    ef16:	cbz	r3, ef28 <__multadd+0x48>
    ef18:	ldr	r2, [r5, #8]
    ef1a:	cmp	r4, r2
    ef1c:	bge.n	ef2e <__multadd+0x4e>
    ef1e:	add.w	r2, r5, r4, lsl #2
    ef22:	adds	r4, #1
    ef24:	str	r3, [r2, #20]
    ef26:	str	r4, [r5, #16]
    ef28:	mov	r0, r5
    ef2a:	add	sp, #12
    ef2c:	pop	{r4, r5, r6, r7, pc}
    ef2e:	ldr	r1, [r5, #4]
    ef30:	str	r3, [sp, #4]
    ef32:	adds	r1, #1
    ef34:	mov	r0, r6
    ef36:	bl	ee80 <_Balloc>
    ef3a:	ldr	r2, [r5, #16]
    ef3c:	adds	r2, #2
    ef3e:	add.w	r1, r5, #12
    ef42:	mov	r7, r0
    ef44:	lsls	r2, r2, #2
    ef46:	adds	r0, #12
    ef48:	bl	8568 <memcpy>
    ef4c:	ldr	r2, [r6, #76]	; 0x4c
    ef4e:	ldr	r1, [r5, #4]
    ef50:	ldr	r3, [sp, #4]
    ef52:	ldr.w	r0, [r2, r1, lsl #2]
    ef56:	str	r0, [r5, #0]
    ef58:	str.w	r5, [r2, r1, lsl #2]
    ef5c:	mov	r5, r7
    ef5e:	b.n	ef1e <__multadd+0x3e>

0000ef60 <__hi0bits>:
    ef60:	lsrs	r3, r0, #16
    ef62:	lsls	r3, r3, #16
    ef64:	cbnz	r3, ef94 <__hi0bits+0x34>
    ef66:	lsls	r0, r0, #16
    ef68:	movs	r3, #16
    ef6a:	tst.w	r0, #4278190080	; 0xff000000
    ef6e:	itt	eq
    ef70:	lsleq	r0, r0, #8
    ef72:	addeq	r3, #8
    ef74:	tst.w	r0, #4026531840	; 0xf0000000
    ef78:	itt	eq
    ef7a:	lsleq	r0, r0, #4
    ef7c:	addeq	r3, #4
    ef7e:	tst.w	r0, #3221225472	; 0xc0000000
    ef82:	itt	eq
    ef84:	lsleq	r0, r0, #2
    ef86:	addeq	r3, #2
    ef88:	cmp	r0, #0
    ef8a:	blt.n	ef9c <__hi0bits+0x3c>
    ef8c:	lsls	r2, r0, #1
    ef8e:	bmi.n	ef98 <__hi0bits+0x38>
    ef90:	movs	r0, #32
    ef92:	bx	lr
    ef94:	movs	r3, #0
    ef96:	b.n	ef6a <__hi0bits+0xa>
    ef98:	adds	r0, r3, #1
    ef9a:	bx	lr
    ef9c:	mov	r0, r3
    ef9e:	bx	lr

0000efa0 <__lo0bits>:
    efa0:	ldr	r3, [r0, #0]
    efa2:	ands.w	r2, r3, #7
    efa6:	beq.n	efb8 <__lo0bits+0x18>
    efa8:	lsls	r1, r3, #31
    efaa:	bmi.n	efee <__lo0bits+0x4e>
    efac:	lsls	r2, r3, #30
    efae:	bmi.n	eff2 <__lo0bits+0x52>
    efb0:	lsrs	r3, r3, #2
    efb2:	str	r3, [r0, #0]
    efb4:	movs	r0, #2
    efb6:	bx	lr
    efb8:	uxth	r1, r3
    efba:	cbnz	r1, efc0 <__lo0bits+0x20>
    efbc:	lsrs	r3, r3, #16
    efbe:	movs	r2, #16
    efc0:	tst.w	r3, #255	; 0xff
    efc4:	itt	eq
    efc6:	lsreq	r3, r3, #8
    efc8:	addeq	r2, #8
    efca:	lsls	r1, r3, #28
    efcc:	itt	eq
    efce:	lsreq	r3, r3, #4
    efd0:	addeq	r2, #4
    efd2:	lsls	r1, r3, #30
    efd4:	itt	eq
    efd6:	lsreq	r3, r3, #2
    efd8:	addeq	r2, #2
    efda:	lsls	r1, r3, #31
    efdc:	bmi.n	efe8 <__lo0bits+0x48>
    efde:	lsrs	r3, r3, #1
    efe0:	bne.n	efe6 <__lo0bits+0x46>
    efe2:	movs	r0, #32
    efe4:	bx	lr
    efe6:	adds	r2, #1
    efe8:	str	r3, [r0, #0]
    efea:	mov	r0, r2
    efec:	bx	lr
    efee:	movs	r0, #0
    eff0:	bx	lr
    eff2:	lsrs	r3, r3, #1
    eff4:	str	r3, [r0, #0]
    eff6:	movs	r0, #1
    eff8:	bx	lr
    effa:	nop

0000effc <__i2b>:
    effc:	push	{r4, lr}
    effe:	mov	r4, r1
    f000:	movs	r1, #1
    f002:	bl	ee80 <_Balloc>
    f006:	movs	r2, #1
    f008:	str	r4, [r0, #20]
    f00a:	str	r2, [r0, #16]
    f00c:	pop	{r4, pc}
    f00e:	nop

0000f010 <__multiply>:
    f010:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f014:	ldr	r5, [r1, #16]
    f016:	ldr	r7, [r2, #16]
    f018:	cmp	r5, r7
    f01a:	sub	sp, #12
    f01c:	mov	r4, r1
    f01e:	mov	r6, r2
    f020:	bge.n	f02c <__multiply+0x1c>
    f022:	mov	r2, r5
    f024:	mov	r4, r6
    f026:	mov	r5, r7
    f028:	mov	r6, r1
    f02a:	mov	r7, r2
    f02c:	ldr	r3, [r4, #8]
    f02e:	ldr	r1, [r4, #4]
    f030:	add.w	r8, r5, r7
    f034:	cmp	r8, r3
    f036:	it	gt
    f038:	addgt	r1, #1
    f03a:	bl	ee80 <_Balloc>
    f03e:	add.w	ip, r0, #20
    f042:	add.w	r9, ip, r8, lsl #2
    f046:	cmp	ip, r9
    f048:	str	r0, [sp, #0]
    f04a:	bcs.n	f058 <__multiply+0x48>
    f04c:	mov	r3, ip
    f04e:	movs	r1, #0
    f050:	str.w	r1, [r3], #4
    f054:	cmp	r9, r3
    f056:	bhi.n	f050 <__multiply+0x40>
    f058:	add.w	r2, r6, #20
    f05c:	add.w	sl, r2, r7, lsl #2
    f060:	add.w	r3, r4, #20
    f064:	cmp	r2, sl
    f066:	add.w	lr, r3, r5, lsl #2
    f06a:	bcs.n	f116 <__multiply+0x106>
    f06c:	str.w	r9, [sp, #4]
    f070:	mov	r9, r3
    f072:	ldr.w	r3, [r2], #4
    f076:	uxth.w	fp, r3
    f07a:	cmp.w	fp, #0
    f07e:	beq.n	f0c2 <__multiply+0xb2>
    f080:	movs	r0, #0
    f082:	mov	r7, r9
    f084:	mov	r6, ip
    f086:	mov	r5, r0
    f088:	b.n	f08c <__multiply+0x7c>
    f08a:	mov	r6, r3
    f08c:	ldr.w	r4, [r7], #4
    f090:	ldr	r0, [r6, #0]
    f092:	uxth	r1, r4
    f094:	uxth	r3, r0
    f096:	mla	r1, fp, r1, r3
    f09a:	lsrs	r4, r4, #16
    f09c:	lsrs	r0, r0, #16
    f09e:	adds	r3, r1, r5
    f0a0:	mla	r0, fp, r4, r0
    f0a4:	add.w	r0, r0, r3, lsr #16
    f0a8:	uxth	r1, r3
    f0aa:	mov	r3, r6
    f0ac:	orr.w	r1, r1, r0, lsl #16
    f0b0:	cmp	lr, r7
    f0b2:	mov.w	r5, r0, lsr #16
    f0b6:	str.w	r1, [r3], #4
    f0ba:	bhi.n	f08a <__multiply+0x7a>
    f0bc:	str	r5, [r6, #4]
    f0be:	ldr.w	r3, [r2, #-4]
    f0c2:	movs.w	fp, r3, lsr #16
    f0c6:	beq.n	f10a <__multiply+0xfa>
    f0c8:	ldr.w	r3, [ip]
    f0cc:	mov	r7, ip
    f0ce:	mov	r0, r3
    f0d0:	mov	r5, r9
    f0d2:	movs	r1, #0
    f0d4:	b.n	f0d8 <__multiply+0xc8>
    f0d6:	mov	r7, r6
    f0d8:	ldrh	r4, [r5, #0]
    f0da:	lsrs	r0, r0, #16
    f0dc:	mla	r0, fp, r4, r0
    f0e0:	add	r1, r0
    f0e2:	uxth	r4, r3
    f0e4:	mov	r6, r7
    f0e6:	orr.w	r3, r4, r1, lsl #16
    f0ea:	str.w	r3, [r6], #4
    f0ee:	ldr	r0, [r7, #4]
    f0f0:	ldr.w	r4, [r5], #4
    f0f4:	uxth	r3, r0
    f0f6:	lsrs	r4, r4, #16
    f0f8:	mla	r4, fp, r4, r3
    f0fc:	add.w	r3, r4, r1, lsr #16
    f100:	cmp	lr, r5
    f102:	mov.w	r1, r3, lsr #16
    f106:	bhi.n	f0d6 <__multiply+0xc6>
    f108:	str	r3, [r7, #4]
    f10a:	cmp	sl, r2
    f10c:	add.w	ip, ip, #4
    f110:	bhi.n	f072 <__multiply+0x62>
    f112:	ldr.w	r9, [sp, #4]
    f116:	cmp.w	r8, #0
    f11a:	ble.n	f134 <__multiply+0x124>
    f11c:	ldr.w	r3, [r9, #-4]
    f120:	sub.w	r9, r9, #4
    f124:	cbz	r3, f12e <__multiply+0x11e>
    f126:	b.n	f134 <__multiply+0x124>
    f128:	ldr.w	r3, [r9, #-4]!
    f12c:	cbnz	r3, f134 <__multiply+0x124>
    f12e:	subs.w	r8, r8, #1
    f132:	bne.n	f128 <__multiply+0x118>
    f134:	ldr	r0, [sp, #0]
    f136:	str.w	r8, [r0, #16]
    f13a:	add	sp, #12
    f13c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000f140 <__pow5mult>:
    f140:	ands.w	r3, r2, #3
    f144:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f148:	mov	r4, r2
    f14a:	mov	r7, r0
    f14c:	bne.n	f1ac <__pow5mult+0x6c>
    f14e:	mov	r6, r1
    f150:	asrs	r4, r4, #2
    f152:	beq.n	f18e <__pow5mult+0x4e>
    f154:	ldr	r5, [r7, #72]	; 0x48
    f156:	cbz	r5, f1be <__pow5mult+0x7e>
    f158:	lsls	r3, r4, #31
    f15a:	mov.w	r8, #0
    f15e:	bmi.n	f16e <__pow5mult+0x2e>
    f160:	asrs	r4, r4, #1
    f162:	beq.n	f18e <__pow5mult+0x4e>
    f164:	ldr	r0, [r5, #0]
    f166:	cbz	r0, f194 <__pow5mult+0x54>
    f168:	mov	r5, r0
    f16a:	lsls	r3, r4, #31
    f16c:	bpl.n	f160 <__pow5mult+0x20>
    f16e:	mov	r2, r5
    f170:	mov	r1, r6
    f172:	mov	r0, r7
    f174:	bl	f010 <__multiply>
    f178:	cbz	r6, f1a8 <__pow5mult+0x68>
    f17a:	ldr	r2, [r6, #4]
    f17c:	ldr	r3, [r7, #76]	; 0x4c
    f17e:	asrs	r4, r4, #1
    f180:	ldr.w	r1, [r3, r2, lsl #2]
    f184:	str	r1, [r6, #0]
    f186:	str.w	r6, [r3, r2, lsl #2]
    f18a:	mov	r6, r0
    f18c:	bne.n	f164 <__pow5mult+0x24>
    f18e:	mov	r0, r6
    f190:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f194:	mov	r2, r5
    f196:	mov	r1, r5
    f198:	mov	r0, r7
    f19a:	bl	f010 <__multiply>
    f19e:	str	r0, [r5, #0]
    f1a0:	str.w	r8, [r0]
    f1a4:	mov	r5, r0
    f1a6:	b.n	f16a <__pow5mult+0x2a>
    f1a8:	mov	r6, r0
    f1aa:	b.n	f160 <__pow5mult+0x20>
    f1ac:	subs	r2, r3, #1
    f1ae:	ldr	r5, [pc, #44]	; (f1dc <__pow5mult+0x9c>)
    f1b0:	movs	r3, #0
    f1b2:	ldr.w	r2, [r5, r2, lsl #2]
    f1b6:	bl	eee0 <__multadd>
    f1ba:	mov	r6, r0
    f1bc:	b.n	f150 <__pow5mult+0x10>
    f1be:	movs	r1, #1
    f1c0:	mov	r0, r7
    f1c2:	bl	ee80 <_Balloc>
    f1c6:	movw	r1, #625	; 0x271
    f1ca:	movs	r2, #1
    f1cc:	movs	r3, #0
    f1ce:	str	r1, [r0, #20]
    f1d0:	str	r2, [r0, #16]
    f1d2:	mov	r5, r0
    f1d4:	str	r0, [r7, #72]	; 0x48
    f1d6:	str	r3, [r0, #0]
    f1d8:	b.n	f158 <__pow5mult+0x18>
    f1da:	nop
    f1dc:	.word	0x20000ad0

0000f1e0 <__lshift>:
    f1e0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f1e4:	mov	r9, r2
    f1e6:	ldr	r2, [r1, #16]
    f1e8:	ldr	r3, [r1, #8]
    f1ea:	mov.w	r4, r9, asr #5
    f1ee:	add.w	r8, r4, r2
    f1f2:	add.w	r5, r8, #1
    f1f6:	cmp	r5, r3
    f1f8:	mov	r6, r1
    f1fa:	mov	sl, r0
    f1fc:	ldr	r1, [r1, #4]
    f1fe:	ble.n	f20a <__lshift+0x2a>
    f200:	lsls	r3, r3, #1
    f202:	cmp	r5, r3
    f204:	add.w	r1, r1, #1
    f208:	bgt.n	f200 <__lshift+0x20>
    f20a:	mov	r0, sl
    f20c:	bl	ee80 <_Balloc>
    f210:	cmp	r4, #0
    f212:	add.w	r2, r0, #20
    f216:	ble.n	f28a <__lshift+0xaa>
    f218:	add.w	r3, r2, r4, lsl #2
    f21c:	movs	r1, #0
    f21e:	str.w	r1, [r2], #4
    f222:	cmp	r3, r2
    f224:	bne.n	f21e <__lshift+0x3e>
    f226:	ldr	r4, [r6, #16]
    f228:	add.w	r1, r6, #20
    f22c:	ands.w	r9, r9, #31
    f230:	add.w	lr, r1, r4, lsl #2
    f234:	beq.n	f27a <__lshift+0x9a>
    f236:	rsb	r2, r9, #32
    f23a:	movs	r4, #0
    f23c:	ldr	r7, [r1, #0]
    f23e:	lsl.w	ip, r7, r9
    f242:	orr.w	r4, ip, r4
    f246:	mov	ip, r3
    f248:	str.w	r4, [r3], #4
    f24c:	ldr.w	r4, [r1], #4
    f250:	cmp	lr, r1
    f252:	lsr.w	r4, r4, r2
    f256:	bhi.n	f23c <__lshift+0x5c>
    f258:	str.w	r4, [ip, #4]
    f25c:	cbz	r4, f262 <__lshift+0x82>
    f25e:	add.w	r5, r8, #2
    f262:	ldr.w	r3, [sl, #76]	; 0x4c
    f266:	ldr	r2, [r6, #4]
    f268:	subs	r5, #1
    f26a:	ldr.w	r1, [r3, r2, lsl #2]
    f26e:	str	r5, [r0, #16]
    f270:	str	r1, [r6, #0]
    f272:	str.w	r6, [r3, r2, lsl #2]
    f276:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f27a:	subs	r3, #4
    f27c:	ldr.w	r2, [r1], #4
    f280:	str.w	r2, [r3, #4]!
    f284:	cmp	lr, r1
    f286:	bhi.n	f27c <__lshift+0x9c>
    f288:	b.n	f262 <__lshift+0x82>
    f28a:	mov	r3, r2
    f28c:	b.n	f226 <__lshift+0x46>
    f28e:	nop

0000f290 <__mcmp>:
    f290:	ldr	r2, [r0, #16]
    f292:	ldr	r3, [r1, #16]
    f294:	subs	r2, r2, r3
    f296:	bne.n	f2c0 <__mcmp+0x30>
    f298:	lsls	r3, r3, #2
    f29a:	adds	r0, #20
    f29c:	adds	r1, #20
    f29e:	add	r1, r3
    f2a0:	push	{r4}
    f2a2:	add	r3, r0
    f2a4:	b.n	f2aa <__mcmp+0x1a>
    f2a6:	cmp	r0, r3
    f2a8:	bcs.n	f2c4 <__mcmp+0x34>
    f2aa:	ldr.w	r4, [r3, #-4]!
    f2ae:	ldr.w	r2, [r1, #-4]!
    f2b2:	cmp	r4, r2
    f2b4:	beq.n	f2a6 <__mcmp+0x16>
    f2b6:	bcc.n	f2cc <__mcmp+0x3c>
    f2b8:	movs	r0, #1
    f2ba:	ldr.w	r4, [sp], #4
    f2be:	bx	lr
    f2c0:	mov	r0, r2
    f2c2:	bx	lr
    f2c4:	movs	r0, #0
    f2c6:	ldr.w	r4, [sp], #4
    f2ca:	bx	lr
    f2cc:	mov.w	r0, #4294967295
    f2d0:	b.n	f2ba <__mcmp+0x2a>
    f2d2:	nop

0000f2d4 <__mdiff>:
    f2d4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f2d8:	ldr	r3, [r1, #16]
    f2da:	mov	r7, r1
    f2dc:	ldr	r1, [r2, #16]
    f2de:	subs	r3, r3, r1
    f2e0:	cmp	r3, #0
    f2e2:	mov	r8, r2
    f2e4:	bne.n	f316 <__mdiff+0x42>
    f2e6:	lsls	r1, r1, #2
    f2e8:	add.w	r2, r7, #20
    f2ec:	add.w	r5, r8, #20
    f2f0:	adds	r3, r2, r1
    f2f2:	add	r1, r5
    f2f4:	b.n	f2fa <__mdiff+0x26>
    f2f6:	cmp	r2, r3
    f2f8:	bcs.n	f3b8 <__mdiff+0xe4>
    f2fa:	ldr.w	r6, [r3, #-4]!
    f2fe:	ldr.w	r4, [r1, #-4]!
    f302:	cmp	r6, r4
    f304:	beq.n	f2f6 <__mdiff+0x22>
    f306:	bcs.n	f3ca <__mdiff+0xf6>
    f308:	mov	r3, r7
    f30a:	mov	r4, r2
    f30c:	mov	r7, r8
    f30e:	mov.w	r9, #1
    f312:	mov	r8, r3
    f314:	b.n	f324 <__mdiff+0x50>
    f316:	blt.n	f3d4 <__mdiff+0x100>
    f318:	add.w	r5, r7, #20
    f31c:	add.w	r4, r2, #20
    f320:	mov.w	r9, #0
    f324:	ldr	r1, [r7, #4]
    f326:	bl	ee80 <_Balloc>
    f32a:	ldr.w	r3, [r8, #16]
    f32e:	ldr	r6, [r7, #16]
    f330:	str.w	r9, [r0, #12]
    f334:	add.w	ip, r4, r3, lsl #2
    f338:	mov	lr, r4
    f33a:	add.w	r7, r5, r6, lsl #2
    f33e:	add.w	r4, r0, #20
    f342:	movs	r3, #0
    f344:	ldr.w	r1, [lr], #4
    f348:	ldr.w	r8, [r5], #4
    f34c:	uxth	r2, r1
    f34e:	uxtah	r3, r3, r8
    f352:	lsrs	r1, r1, #16
    f354:	subs	r2, r3, r2
    f356:	rsb	r3, r1, r8, lsr #16
    f35a:	add.w	r3, r3, r2, asr #16
    f35e:	uxth	r2, r2
    f360:	orr.w	r2, r2, r3, lsl #16
    f364:	cmp	ip, lr
    f366:	str.w	r2, [r4], #4
    f36a:	mov.w	r3, r3, asr #16
    f36e:	bhi.n	f344 <__mdiff+0x70>
    f370:	cmp	r7, r5
    f372:	bls.n	f3a4 <__mdiff+0xd0>
    f374:	mov	ip, r4
    f376:	mov	r1, r5
    f378:	ldr.w	lr, [r1], #4
    f37c:	uxtah	r2, r3, lr
    f380:	asrs	r3, r2, #16
    f382:	add.w	r3, r3, lr, lsr #16
    f386:	uxth	r2, r2
    f388:	orr.w	r2, r2, r3, lsl #16
    f38c:	cmp	r7, r1
    f38e:	str.w	r2, [ip], #4
    f392:	mov.w	r3, r3, asr #16
    f396:	bhi.n	f378 <__mdiff+0xa4>
    f398:	mvns	r5, r5
    f39a:	add	r5, r7
    f39c:	bic.w	r5, r5, #3
    f3a0:	adds	r5, #4
    f3a2:	add	r4, r5
    f3a4:	subs	r4, #4
    f3a6:	cbnz	r2, f3b2 <__mdiff+0xde>
    f3a8:	ldr.w	r3, [r4, #-4]!
    f3ac:	subs	r6, #1
    f3ae:	cmp	r3, #0
    f3b0:	beq.n	f3a8 <__mdiff+0xd4>
    f3b2:	str	r6, [r0, #16]
    f3b4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f3b8:	movs	r1, #0
    f3ba:	bl	ee80 <_Balloc>
    f3be:	movs	r2, #1
    f3c0:	movs	r3, #0
    f3c2:	str	r2, [r0, #16]
    f3c4:	str	r3, [r0, #20]
    f3c6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f3ca:	mov	r4, r5
    f3cc:	mov.w	r9, #0
    f3d0:	mov	r5, r2
    f3d2:	b.n	f324 <__mdiff+0x50>
    f3d4:	mov	r3, r7
    f3d6:	add.w	r4, r7, #20
    f3da:	add.w	r5, r8, #20
    f3de:	mov	r7, r8
    f3e0:	mov.w	r9, #1
    f3e4:	mov	r8, r3
    f3e6:	b.n	f324 <__mdiff+0x50>

0000f3e8 <__d2b>:
    f3e8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f3ec:	vmov	r6, r7, d0
    f3f0:	sub	sp, #12
    f3f2:	mov	r8, r1
    f3f4:	movs	r1, #1
    f3f6:	mov	r4, r7
    f3f8:	ubfx	r5, r7, #20, #11
    f3fc:	mov	r7, r2
    f3fe:	bl	ee80 <_Balloc>
    f402:	ubfx	r4, r4, #0, #20
    f406:	mov	r9, r0
    f408:	cbz	r5, f40e <__d2b+0x26>
    f40a:	orr.w	r4, r4, #1048576	; 0x100000
    f40e:	str	r4, [sp, #4]
    f410:	cbz	r6, f45a <__d2b+0x72>
    f412:	add	r0, sp, #8
    f414:	str.w	r6, [r0, #-8]!
    f418:	bl	efa0 <__lo0bits>
    f41c:	cmp	r0, #0
    f41e:	bne.n	f48a <__d2b+0xa2>
    f420:	ldmia.w	sp, {r2, r3}
    f424:	str.w	r2, [r9, #20]
    f428:	cmp	r3, #0
    f42a:	ite	eq
    f42c:	moveq	r1, #1
    f42e:	movne	r1, #2
    f430:	str.w	r3, [r9, #24]
    f434:	str.w	r1, [r9, #16]
    f438:	cbnz	r5, f472 <__d2b+0x8a>
    f43a:	add.w	r3, r9, r1, lsl #2
    f43e:	subw	r0, r0, #1074	; 0x432
    f442:	str.w	r0, [r8]
    f446:	ldr	r0, [r3, #16]
    f448:	bl	ef60 <__hi0bits>
    f44c:	rsb	r0, r0, r1, lsl #5
    f450:	str	r0, [r7, #0]
    f452:	mov	r0, r9
    f454:	add	sp, #12
    f456:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f45a:	add	r0, sp, #4
    f45c:	bl	efa0 <__lo0bits>
    f460:	ldr	r3, [sp, #4]
    f462:	str.w	r3, [r9, #20]
    f466:	movs	r1, #1
    f468:	adds	r0, #32
    f46a:	str.w	r1, [r9, #16]
    f46e:	cmp	r5, #0
    f470:	beq.n	f43a <__d2b+0x52>
    f472:	subw	r5, r5, #1075	; 0x433
    f476:	add	r5, r0
    f478:	rsb	r0, r0, #53	; 0x35
    f47c:	str.w	r5, [r8]
    f480:	str	r0, [r7, #0]
    f482:	mov	r0, r9
    f484:	add	sp, #12
    f486:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f48a:	ldmia.w	sp, {r2, r3}
    f48e:	rsb	r1, r0, #32
    f492:	lsl.w	r1, r3, r1
    f496:	orrs	r2, r1
    f498:	lsrs	r3, r0
    f49a:	str	r3, [sp, #4]
    f49c:	str.w	r2, [r9, #20]
    f4a0:	b.n	f428 <__d2b+0x40>
    f4a2:	nop

0000f4a4 <__ssprint_r>:
    f4a4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f4a8:	ldr	r3, [r2, #8]
    f4aa:	sub	sp, #12
    f4ac:	mov	r8, r2
    f4ae:	cmp	r3, #0
    f4b0:	beq.n	f598 <__ssprint_r+0xf4>
    f4b2:	mov	fp, r0
    f4b4:	mov.w	r9, #0
    f4b8:	ldr	r6, [r2, #0]
    f4ba:	ldr	r0, [r1, #0]
    f4bc:	ldr	r3, [r1, #8]
    f4be:	mov	r5, r1
    f4c0:	mov	r4, r9
    f4c2:	cmp	r4, #0
    f4c4:	beq.n	f552 <__ssprint_r+0xae>
    f4c6:	cmp	r4, r3
    f4c8:	mov	r7, r3
    f4ca:	mov	sl, r3
    f4cc:	bcc.n	f55c <__ssprint_r+0xb8>
    f4ce:	ldrh	r3, [r5, #12]
    f4d0:	tst.w	r3, #1152	; 0x480
    f4d4:	beq.n	f532 <__ssprint_r+0x8e>
    f4d6:	ldr	r7, [r5, #20]
    f4d8:	ldr	r1, [r5, #16]
    f4da:	add.w	r7, r7, r7, lsl #1
    f4de:	rsb	sl, r1, r0
    f4e2:	add.w	r7, r7, r7, lsr #31
    f4e6:	adds	r0, r4, #1
    f4e8:	asrs	r7, r7, #1
    f4ea:	add	r0, sl
    f4ec:	cmp	r0, r7
    f4ee:	mov	r2, r7
    f4f0:	itt	hi
    f4f2:	movhi	r7, r0
    f4f4:	movhi	r2, r7
    f4f6:	lsls	r3, r3, #21
    f4f8:	bpl.n	f562 <__ssprint_r+0xbe>
    f4fa:	mov	r1, r2
    f4fc:	mov	r0, fp
    f4fe:	bl	b5c8 <_malloc_r>
    f502:	cmp	r0, #0
    f504:	beq.n	f576 <__ssprint_r+0xd2>
    f506:	mov	r2, sl
    f508:	ldr	r1, [r5, #16]
    f50a:	str	r0, [sp, #4]
    f50c:	bl	8568 <memcpy>
    f510:	ldrh	r2, [r5, #12]
    f512:	ldr	r3, [sp, #4]
    f514:	bic.w	r2, r2, #1152	; 0x480
    f518:	orr.w	r2, r2, #128	; 0x80
    f51c:	strh	r2, [r5, #12]
    f51e:	rsb	r2, sl, r7
    f522:	add.w	r0, r3, sl
    f526:	str	r7, [r5, #20]
    f528:	str	r3, [r5, #16]
    f52a:	str	r0, [r5, #0]
    f52c:	str	r2, [r5, #8]
    f52e:	mov	r7, r4
    f530:	mov	sl, r4
    f532:	mov	r2, sl
    f534:	mov	r1, r9
    f536:	bl	bb64 <memmove>
    f53a:	ldr.w	r2, [r8, #8]
    f53e:	ldr	r3, [r5, #8]
    f540:	ldr	r0, [r5, #0]
    f542:	subs	r3, r3, r7
    f544:	add	r0, sl
    f546:	subs	r4, r2, r4
    f548:	str	r3, [r5, #8]
    f54a:	str	r0, [r5, #0]
    f54c:	str.w	r4, [r8, #8]
    f550:	cbz	r4, f598 <__ssprint_r+0xf4>
    f552:	ldr.w	r9, [r6]
    f556:	ldr	r4, [r6, #4]
    f558:	adds	r6, #8
    f55a:	b.n	f4c2 <__ssprint_r+0x1e>
    f55c:	mov	r7, r4
    f55e:	mov	sl, r4
    f560:	b.n	f532 <__ssprint_r+0x8e>
    f562:	mov	r0, fp
    f564:	bl	bcd0 <_realloc_r>
    f568:	mov	r3, r0
    f56a:	cmp	r0, #0
    f56c:	bne.n	f51e <__ssprint_r+0x7a>
    f56e:	ldr	r1, [r5, #16]
    f570:	mov	r0, fp
    f572:	bl	ebe8 <_free_r>
    f576:	movs	r3, #12
    f578:	str.w	r3, [fp]
    f57c:	ldrh	r3, [r5, #12]
    f57e:	movs	r2, #0
    f580:	orr.w	r3, r3, #64	; 0x40
    f584:	mov.w	r0, #4294967295
    f588:	strh	r3, [r5, #12]
    f58a:	str.w	r2, [r8, #8]
    f58e:	str.w	r2, [r8, #4]
    f592:	add	sp, #12
    f594:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f598:	movs	r0, #0
    f59a:	str.w	r0, [r8, #4]
    f59e:	add	sp, #12
    f5a0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000f5a4 <_vasnprintf_r>:
    f5a4:	push	{r4, r5, r6, lr}
    f5a6:	mov	r5, r2
    f5a8:	sub	sp, #104	; 0x68
    f5aa:	ldr	r4, [r2, #0]
    f5ac:	cbz	r1, f5b2 <_vasnprintf_r+0xe>
    f5ae:	cmp	r4, #0
    f5b0:	bne.n	f5e8 <_vasnprintf_r+0x44>
    f5b2:	movs	r4, #0
    f5b4:	mov.w	r2, #648	; 0x288
    f5b8:	strh.w	r2, [sp, #12]
    f5bc:	str	r4, [sp, #0]
    f5be:	str	r4, [sp, #16]
    f5c0:	mov	r2, r3
    f5c2:	movw	r6, #65535	; 0xffff
    f5c6:	ldr	r3, [sp, #120]	; 0x78
    f5c8:	str	r4, [sp, #8]
    f5ca:	mov	r1, sp
    f5cc:	str	r4, [sp, #20]
    f5ce:	strh.w	r6, [sp, #14]
    f5d2:	bl	c360 <_svfprintf_r>
    f5d6:	cmp	r0, #0
    f5d8:	blt.n	f5fe <_vasnprintf_r+0x5a>
    f5da:	ldr	r3, [sp, #0]
    f5dc:	str	r0, [r5, #0]
    f5de:	movs	r2, #0
    f5e0:	strb	r2, [r3, #0]
    f5e2:	ldr	r0, [sp, #16]
    f5e4:	add	sp, #104	; 0x68
    f5e6:	pop	{r4, r5, r6, pc}
    f5e8:	mov.w	r2, #1544	; 0x608
    f5ec:	str	r1, [sp, #0]
    f5ee:	str	r1, [sp, #16]
    f5f0:	strh.w	r2, [sp, #12]
    f5f4:	bge.n	f5c0 <_vasnprintf_r+0x1c>
    f5f6:	movs	r3, #139	; 0x8b
    f5f8:	str	r3, [r0, #0]
    f5fa:	movs	r0, #0
    f5fc:	b.n	f5e4 <_vasnprintf_r+0x40>
    f5fe:	movs	r0, #0
    f600:	b.n	f5e4 <_vasnprintf_r+0x40>
    f602:	nop

0000f604 <_calloc_r>:
    f604:	push	{r4, lr}
    f606:	mul.w	r1, r2, r1
    f60a:	bl	b5c8 <_malloc_r>
    f60e:	mov	r4, r0
    f610:	cbz	r0, f64a <_calloc_r+0x46>
    f612:	ldr.w	r2, [r0, #-4]
    f616:	bic.w	r2, r2, #3
    f61a:	subs	r2, #4
    f61c:	cmp	r2, #36	; 0x24
    f61e:	bhi.n	f652 <_calloc_r+0x4e>
    f620:	cmp	r2, #19
    f622:	bls.n	f64e <_calloc_r+0x4a>
    f624:	movs	r3, #0
    f626:	cmp	r2, #27
    f628:	str	r3, [r0, #0]
    f62a:	str	r3, [r0, #4]
    f62c:	bls.n	f65c <_calloc_r+0x58>
    f62e:	cmp	r2, #36	; 0x24
    f630:	str	r3, [r0, #8]
    f632:	str	r3, [r0, #12]
    f634:	iteee	ne
    f636:	addne.w	r2, r0, #16
    f63a:	streq	r3, [r0, #16]
    f63c:	streq	r3, [r0, #20]
    f63e:	addeq.w	r2, r0, #24
    f642:	movs	r3, #0
    f644:	str	r3, [r2, #0]
    f646:	str	r3, [r2, #4]
    f648:	str	r3, [r2, #8]
    f64a:	mov	r0, r4
    f64c:	pop	{r4, pc}
    f64e:	mov	r2, r0
    f650:	b.n	f642 <_calloc_r+0x3e>
    f652:	movs	r1, #0
    f654:	bl	bc2c <memset>
    f658:	mov	r0, r4
    f65a:	pop	{r4, pc}
    f65c:	add.w	r2, r0, #8
    f660:	b.n	f642 <_calloc_r+0x3e>
    f662:	nop

0000f664 <__aeabi_d2iz>:
    f664:	mov.w	r2, r1, lsl #1
    f668:	adds.w	r2, r2, #2097152	; 0x200000
    f66c:	bcs.n	f69a <__aeabi_d2iz+0x36>
    f66e:	bpl.n	f694 <__aeabi_d2iz+0x30>
    f670:	mvn.w	r3, #992	; 0x3e0
    f674:	subs.w	r2, r3, r2, asr #21
    f678:	bls.n	f6a0 <__aeabi_d2iz+0x3c>
    f67a:	mov.w	r3, r1, lsl #11
    f67e:	orr.w	r3, r3, #2147483648	; 0x80000000
    f682:	orr.w	r3, r3, r0, lsr #21
    f686:	tst.w	r1, #2147483648	; 0x80000000
    f68a:	lsr.w	r0, r3, r2
    f68e:	it	ne
    f690:	negne	r0, r0
    f692:	bx	lr
    f694:	mov.w	r0, #0
    f698:	bx	lr
    f69a:	orrs.w	r0, r0, r1, lsl #12
    f69e:	bne.n	f6ac <__aeabi_d2iz+0x48>
    f6a0:	ands.w	r0, r1, #2147483648	; 0x80000000
    f6a4:	it	eq
    f6a6:	mvneq.w	r0, #2147483648	; 0x80000000
    f6aa:	bx	lr
    f6ac:	mov.w	r0, #0
    f6b0:	bx	lr
    f6b2:	nop
    f6b4:	movs	r0, r0
	...

0000f6b8 <___init_veneer>:
    f6b8:	ldr.w	pc, [pc]	; f6bc <___init_veneer+0x4>
    f6bc:	.word	0x6000178d

Disassembly of section .fini:

0000f6c0 <_fini>:
    f6c0:	push	{r3, r4, r5, r6, r7, lr}
    f6c2:	nop

Disassembly of section .text.csf:

6001239c <hab_csf>:
	...
