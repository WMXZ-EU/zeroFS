
.vsteensy/build/zeroTest_V0_T41.elf:     file format elf32-littlearm

SYMBOL TABLE:
60000000 l    d  .text.headers	00000000 .text.headers
60001400 l    d  .text.code	00000000 .text.code
60001e70 l    d  .text.progmem	00000000 .text.progmem
00000000 l    d  .text.itcm	00000000 .text.itcm
00008e50 l    d  .fini	00000000 .fini
00008e54 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .data	00000000 .data
20001ac0 l    d  .bss	00000000 .bss
20200000 l    d  .bss.dma	00000000 .bss.dma
70000000 l    d  .bss.extram	00000000 .bss.extram
6000c864 l    d  .text.csf	00000000 .text.csf
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 bootdata.c
00000000 l    df *ABS*	00000000 startup.c
60001400 l     F .text.code	00000016 memory_copy
60001418 l     F .text.code	00000010 memory_clear
00000000 l    df *ABS*	00000000 usb.c
00002b04 l     F .text.itcm	00000090 schedule_transfer
00002b94 l     F .text.itcm	00000036 run_callbacks
00002bcc l     F .text.itcm	000000a0 endpoint0_transmit.constprop.1
20009d00 l     O .bss	00000004 endpointN_notify_mask
2000c7ee l     O .bss	00000001 sof_usage
20009cfc l     O .bss	00000004 endpoint0_notify_mask
2000c7f5 l     O .bss	00000001 usb_reboot_timer
20001c40 l     O .bss	00000008 endpoint0_setupdata
20009d08 l     O .bss	00000008 reply_buffer
20009cf4 l     O .bss	00000008 endpoint0_buffer
00000000 l    df *ABS*	00000000 tempmon.c
20009d44 l     O .bss	00000004 s_hotTemp
20009d48 l     O .bss	00000004 s_hot_ROOM
20009d4c l     O .bss	00000004 s_roomC_hotC
20009d40 l     O .bss	00000004 s_hotCount
00000000 l    df *ABS*	00000000 analog.c
2000c7ea l     O .bss	00000001 calibrating
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.19/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 c:/users/zimme/documents/arduino-1.8.19/hardware/tools/arm/bin/../lib/gcc/arm-none-eabi/5.4.1/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000020 l     F .text.itcm	00000000 __do_global_dtors_aux
20001c48 l       .bss	00000000 completed.8605
00000044 l     F .text.itcm	00000000 frame_dummy
20001c4c l       .bss	00000000 object.8610
60001e68 l     O .text.code	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 zeroTest.cpp
000004f8 l     F .text.itcm	00000014 _GLOBAL__sub_I_zFS
2000c7d4 l     O .bss	00000002 setup::open1
2000c7d6 l     O .bss	00000002 setup::open2
2000c7d8 l     O .bss	00000002 setup::open3
200017dc l     O .data	00000002 newFile()::old
200017da l     O .data	00000002 newDay()::old
200017de l     O .data	00000002 newHour()::old
00000000 l    df *ABS*	00000000 usb_desc.c
60001f3c l     O .text.progmem	0000000a qualifier_descriptor
200017b0 l     O .data	00000012 device_descriptor
00000000 l    df *ABS*	00000000 serialEvent.cpp
00000000 l    df *ABS*	00000000 Time.cpp
000006b4 l     F .text.itcm	00000018 refreshCache(long) [clone .part.0]
20001c8c l     O .bss	00000004 cacheTime
20001c7c l     O .bss	00000007 tm
20001c88 l     O .bss	00000004 sysTime
2000c7e6 l     O .bss	00000001 Status
20001c64 l     O .bss	00000004 prevMillis
20001228 l     O .data	00000004 syncInterval
20000584 l     O .data	0000000c monthDays
20001c78 l     O .bss	00000004 nextSyncTime
00000000 l    df *ABS*	00000000 zeroFS.cpp
00000000 l    df *ABS*	00000000 diskio.cpp
00000000 l    df *ABS*	00000000 sd_sdhc.cpp
00000f5c l     F .text.itcm	000000b4 setSdclk(unsigned long)
00001060 l     F .text.itcm	0000005c sd_CMD(unsigned long, unsigned long)
000010bc l     F .text.itcm	00000020 sd_ACMD(unsigned long, unsigned long, unsigned long)
000010dc l     F .text.itcm	00000040 sd_CMD12_StopTransferWaitForBusy()
20001c84 l     O .bss	00000004 dmaDone
20001c68 l     O .bss	00000010 sdCardDesc
00000000 l    df *ABS*	00000000 sd_spi.cpp
00001774 l     F .text.itcm	00000050 sd_chipSelect(unsigned short) [clone .part.0]
000017c4 l     F .text.itcm	00000058 spi_transfer(void const*, void*, unsigned int) [clone .part.4]
20000384 l     O .data	00000200 crctab
00000000 l    df *ABS*	00000000 sd_msc.cpp
00000000 l    df *ABS*	00000000 memcpy-armv7m.o
00000000 l    df *ABS*	00000000 usb_serial.c
000023a4 l     F .text.itcm	0000006c rx_queue_transfer
00002410 l     F .text.itcm	000000b4 rx_event
000024c4 l     F .text.itcm	00000098 usb_serial_flush_callback
0000255c l     F .text.itcm	00000194 usb_serial_write.part.1
20009d24 l     O .bss	00000010 rx_index
2000c7e4 l     O .bss	00000002 tx_packet_size
2000c7f1 l     O .bss	00000001 tx_noautoflush
2000c7f0 l     O .bss	00000001 tx_head
20001ac0 l     O .bss	00000100 rx_transfer
2000c7ed l     O .bss	00000001 rx_tail
20009d34 l     O .bss	00000009 rx_list
2000c7e0 l     O .bss	00000002 rx_packet_size
20200000 l     O .bss.dma	00001000 rx_buffer
20201000 l     O .bss.dma	00002000 txbuffer
20009d14 l     O .bss	00000010 rx_count
20009d10 l     O .bss	00000004 rx_available
2000c7ec l     O .bss	00000001 rx_head
2000c7ef l     O .bss	00000001 transmit_previous_timeout
2000c7e2 l     O .bss	00000002 tx_available
20001bc0 l     O .bss	00000080 tx_transfer
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 sm_pool.c
00000000 l    df *ABS*	00000000 digital.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 yield.cpp
2000c7e9 l     O .bss	00000001 yield::running
00000000 l    df *ABS*	00000000 EventResponder.cpp
00000000 l    df *ABS*	00000000 usb_inst.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 Stream.cpp
00000000 l    df *ABS*	00000000 Print.cpp
00000000 l    df *ABS*	00000000 clockspeed.c
00000000 l    df *ABS*	00000000 nonstd.c
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlcpy.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 vfprintf.c
20000dd4 l     O .data	00000010 zeroes.7258
200006bc l     O .data	00000010 blanks.7257
00000000 l    df *ABS*	00000000 vdprintf.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 dtoa.c
00007370 l     F .text.itcm	00000128 quorem
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 mprec.c
20000a3c l     O .data	0000000c p05.6087
00000000 l    df *ABS*	00000000 vfprintf.c
00000000 l    df *ABS*	00000000 vasnprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 impure.c
20000de8 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 HardwareSerial.cpp
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 __fini_array_end
00000000 l       *UND*	00000000 __bss_start__
6000d800 l       .text.csf	00000000 __text_csf_end
00000000 l       *UND*	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
00000000 l       *UND*	00000000 __fini_array_start
00000000 l       *UND*	00000000 hardware_init_hook
00000000 l       *UND*	00000000 __libc_fini
00000000 l       *UND*	00000000 __stack
00000000 l       *UND*	00000000 makeTime(tmElements_t const&)
60001e28 l     F .text.code	00000008 __pwm_init_veneer
60001e30 l     F .text.code	00000008 ____libc_init_array_veneer
60001e38 l     F .text.code	00000008 __set_arm_clock_veneer
60001e40 l     F .text.code	00000008 __usb_init_serialnumber_veneer
60001e48 l     F .text.code	00000008 __main_veneer
60001e50 l     F .text.code	00000008 __sm_set_pool_veneer
60001e58 l     F .text.code	00000008 __delay_veneer
60001e60 l     F .text.code	00000008 __memset_veneer
00008e38 l     F .text.itcm	00000008 ___init_veneer
00008e40 l     F .text.itcm	00000008 ___reboot_Teensyduino__veneer
00004af0 g     F .text.itcm	0000002c .hidden __aeabi_dcmpun
0000292c g     F .text.itcm	0000000c usb_serial_available
00000854 g     F .text.itcm	0000002c die(char const*, DRESULT)
00004ab4 g     F .text.itcm	00000012 .hidden __aeabi_dcmple
000059e8 g     F .text.itcm	000000ba strcpy
000049f0 g     F .text.itcm	0000007a .hidden __cmpdf2
6000179c g     F .text.code	00000002 startup_default_late_hook
00003c00  w    F .text.itcm	000000f0 yield
00001d84 g     F .text.itcm	00000040 sd_readStop()
20009d60 g     O .bss	00000004 usb_timer1_callback
000049f0 g     F .text.itcm	0000007a .hidden __eqdf2
60001e88 g     O .text.progmem	00000018 usb_string_manufacturer_name_default
60001884 g     F .text.code	000003bc configure_external_ram
00004560 g     F .text.itcm	0000005a .hidden __floatdidf
00003e4c g     F .text.itcm	00000020 Print::println()
00005594 g     F .text.itcm	00000002 __malloc_unlock
00001830 g     F .text.itcm	00000120 sd_cardCommand(unsigned char, unsigned long)
60001dc0 g     F .text.code	00000058 analog_init
000072c4 g     F .text.itcm	0000004a _vdprintf_r
20001214 g     O .data	00000004 F_CPU_ACTUAL
0000226c g     F .text.itcm	00000004 MSC_disk_write
0000542c g     F .text.itcm	000000c6 memmove
00008600 g     F .text.itcm	0000004c _Balloc
00008e5c g       .ARM.exidx	00000000 __exidx_end
00001cc8 g     F .text.itcm	0000004c sd_readBlock(unsigned long, unsigned char*)
00001f48 g     F .text.itcm	0000006c sd_writeStart(unsigned long, unsigned long)
2000c7e7 g     O .bss	00000001 EventResponder::runningFromYield
00003810 g     F .text.itcm	00000060 tempmonGetTemp
000049e0 g     F .text.itcm	0000008a .hidden __gtdf2
00004e34 g     F .text.itcm	0000000c __errno
60001000 g     O .text.headers	00000020 ImageVectorTable
00001e10 g     F .text.itcm	000000b8 sd_writeData(unsigned char, unsigned char const*)
20001c98 g     O .bss	00000004 EventResponder::firstInterrupt
00003408 g     F .text.itcm	00000004 usb_transfer_status
0000377c g     F .text.itcm	00000090 sm_set_pool
00000be8 g     F .text.itcm	000000f0 zeroFS_class::ListAll()
00003d70  w    F .text.itcm	00000008 usb_serial_class::write(unsigned char const*, unsigned int)
200006cc g     O .data	00000370 digital_pin_to_info_PGM
2000c860 g     O .bss	00000004 errno
00008e58 g       .text.itcm	00000000 _etext
20001ac0 g       .bss	00000000 _sbss
00004a7c g     F .text.itcm	00000010 .hidden __aeabi_cdcmple
60001f48 g       *ABS*	00000000 _stextload
000004f4 g     F .text.itcm	00000002 loop
000032c0 g     F .text.itcm	00000064 usb_config_rx
00000880 g     F .text.itcm	000000d4 zeroFS_class::Init(unsigned char, unsigned char, char const*)
00003dc0 g     F .text.itcm	00000028 Stream::peekNextDigit()
20001c94 g     O .bss	00000004 EventResponder::lastInterrupt
00002270 g     F .text.itcm	00000134 memcpy
00004a6c g     F .text.itcm	00000020 .hidden __aeabi_cdrcmple
00005be0 g     F .text.itcm	000016e4 _svfprintf_r
000044f0 g     F .text.itcm	00000022 .hidden __floatsidf
20009d58 g     O .bss	00000004 systick_millis_count
000049e8 g     F .text.itcm	00000082 .hidden __ltdf2
00000e80 g     F .text.itcm	00000032 disk_initialize
00004b1c g     F .text.itcm	00000000 .hidden __aeabi_uldivmod
000014dc g     F .text.itcm	00000004 SDHC_disk_initialize
2000c7f3 g     O .bss	00000001 usb_configuration
60000000 g     O .text.headers	00000200 FlexSPI_NOR_Config
0000372c g     F .text.itcm	00000050 sm_align_pool
60001e88  w    O .text.progmem	00000018 usb_string_manufacturer_name
00001fb4 g     F .text.itcm	000000b8 sd_writeStop()
200002a8 g     O .data	000000c8 __mprec_tens
60001654 g     F .text.code	000000ec usb_init
00000cd8 g     F .text.itcm	000000f4 zeroFS_class::Create(HDR_TYPE, unsigned long, int)
20001cf0 g     O .bss	00000004 __malloc_top_pad
2000c84c g     O .bss	00000004 systick_safe_read
aaaaaaaf g       *ABS*	00000000 _flexram_bank_config
000044d0 g     F .text.itcm	0000001e .hidden __aeabi_ui2d
00008538 g     F .text.itcm	0000001c _localeconv_r
0000877c g     F .text.itcm	00000012 __i2b
20000000 g       .data	00000000 _sdata
60001ef0 g     O .text.progmem	0000004b usb_config_descriptor_480
00004b4c g     F .text.itcm	000002e2 .hidden __udivmoddi4
0000424c g     F .text.itcm	00000000 .hidden __aeabi_drsub
00005978 g     F .text.itcm	00000024 _sbrk_r
60001794 g     F .text.code	00000002 startup_default_early_hook
60001428 g     F .text.code	0000022c ResetHandler
000029ac g     F .text.itcm	00000020 usb_serial_getchar
2000c840 g     O .bss	00000008 usb_cdc_line_coding
00000954 g     F .text.itcm	000001d0 zeroFS_class::Create(HDR_TYPE, char const*)
20001c9c g     O .bss	00000004 EventResponder::lastYield
00000838  w    F .text.itcm	0000001c Print::write(char const*)
00000f3c g     F .text.itcm	00000020 disk_ioctl
00004aa0 g     F .text.itcm	00000012 .hidden __aeabi_dcmplt
2000c850 g     O .bss	00000010 extmem_smalloc_pool
2000c7dc g     O .bss	00000002 m_sd_status
20001ce8 g     O .bss	00000004 __malloc_max_sbrked_mem
00003870 g     F .text.itcm	00000080 pinMode
00004514 g     F .text.itcm	0000003a .hidden __extendsfdf2
00004810 g     F .text.itcm	000001d0 .hidden __aeabi_ddiv
00004258 g     F .text.itcm	00000276 .hidden __adddf3
6000cc00 g     O .text.csf	00000c00 hab_csf
20280000 g       .text.csf	00000000 _heap_end
2000c7da g     O .bss	00000002 m_sd_errorCode
00008e54 g       .ARM.exidx	00000000 __exidx_start
70000000 g       .bss.extram	00000000 _extram_end
000045bc g     F .text.itcm	00000254 .hidden __aeabi_dmul
20001c90 g     O .bss	00000004 EventResponder::firstYield
00001a58 g     F .text.itcm	0000003c sd_readRegister(unsigned char, void*)
00005598 g     F .text.itcm	000003de _realloc_r
00004e40 g     F .text.itcm	00000050 __libc_init_array
000020ac g     F .text.itcm	000000a8 spi_begin(unsigned long, unsigned char, unsigned char)
00002254 g     F .text.itcm	0000000e SPI_disk_initialize()
20000280 g     O .data	00000028 __mprec_bigtens
00003d58  w    F .text.itcm	00000004 usb_serial_class::clear()
000044d0 g     F .text.itcm	0000001e .hidden __floatunsidf
000036cc g     F .text.itcm	00000030 _sbrk
6000ada4 g       *ABS*	00000000 _sdataload
00008a10 g     F .text.itcm	00000042 __mcmp
2000122c g     O .data	00000004 __brkval
2000c7f2 g     O .bss	00000001 usb_cdc_line_rtsdtr
60001e18 g     F .text.code	00000000 _init
00000b24 g     F .text.itcm	00000088 zeroFS_class::Close(HDR_TYPE)
000026f0 g     F .text.itcm	00000002 usb_serial_reset
20009d64 g     O .bss	00002a70 zFS
00001010 g     F .text.itcm	00000050 sd_isr()
000007b8 g     F .text.itcm	00000020 day()
60001ea4 g     O .text.progmem	0000004b usb_config_descriptor_12
00001120 g     F .text.itcm	000003bc sd_CardInit()
2000c8a0 g       .bss	00000000 _ebss
000086e0 g     F .text.itcm	00000040 __hi0bits
00008de4 g     F .text.itcm	0000004e .hidden __fixdfsi
20203060 g       .bss.dma	00000000 _heap_start
200017e0 g     O .data	00000002 m_chipSelectPin
00000002 g       *ABS*	00000000 _itcm_block_count
2000c800 g     O .bss	00000020 endpoint0_transfer_data
000007f8 g     F .text.itcm	00000024 year()
000038f0 g     F .text.itcm	000002b8 pwm_init
00004258 g     F .text.itcm	00000276 .hidden __aeabi_dadd
000049e8 g     F .text.itcm	00000082 .hidden __ledf2
00000e3c g     F .text.itcm	00000044 zeroFS_class::fixEOF()
60001c40 g     F .text.code	00000064 usb_pll_start
000088c0 g     F .text.itcm	000000a0 __pow5mult
00004550 g     F .text.itcm	0000006a .hidden __aeabi_ul2d
00001600 g     F .text.itcm	00000168 sd_CardWriteBlocks(void const*, unsigned long, unsigned long)
00000000  w      *UND*	00000000 __deregister_frame_info
2000c820 g     O .bss	00000020 endpoint0_transfer_ack
2000c848 g     O .bss	00000004 usb_cdc_line_rtsdtr_millis
000033bc g     F .text.itcm	00000028 usb_transmit
00003d38 g     F .text.itcm	00000020 systick_isr
20001218 g     O .data	00000010 Serial
000014e0 g     F .text.itcm	00000114 sd_CardReadBlocks(void*, unsigned long, unsigned long)
00003d78  w    F .text.itcm	00000006 usb_serial_class::write(unsigned char)
60001794  w    F .text.code	00000002 startup_early_hook
00004adc g     F .text.itcm	00000012 .hidden __aeabi_dcmpgt
000028e8 g     F .text.itcm	00000044 usb_serial_peekchar
000021b0 g     F .text.itcm	000000a4 sd_init()
00008560 g     F .text.itcm	00000000 memchr
00003f38 g     F .text.itcm	000002c4 set_arm_clock
20009d54 g     O .bss	00000004 systick_cycle_count
200017c4 g     O .data	00000016 usb_string_serial_number_default
00008368 g     F .text.itcm	000001d0 _free_r
00004ac8 g     F .text.itcm	00000012 .hidden __aeabi_dcmpge
00003d68  w    F .text.itcm	00000004 usb_serial_class::flush()
00004254 g     F .text.itcm	0000027a .hidden __aeabi_dsub
200017a4 g     O .data	00000004 __malloc_sbrk_base
00003d60  w    F .text.itcm	00000004 usb_serial_class::read()
00001d14 g     F .text.itcm	00000024 sd_readData2(unsigned char*)
00004550 g     F .text.itcm	0000006a .hidden __floatundidf
00008960 g     F .text.itcm	000000ae __lshift
0000338c g     F .text.itcm	0000002e usb_prepare_transfer
0000353c g     F .text.itcm	00000190 unused_interrupt_vector
00008c24 g     F .text.itcm	00000100 __ssprint_r
60001ca4 g     F .text.code	0000011c tempmon_init
20009d5c g     O .bss	00000004 usb_timer0_callback
00008d24 g     F .text.itcm	0000005e _vasnprintf_r
00003f34  w    F .text.itcm	00000002 serialEvent()
00005aa4 g     F .text.itcm	0000002c strlcpy
0000081c g     F .text.itcm	0000001c setSyncProvider(long (*)())
00002938 g     F .text.itcm	00000074 usb_serial_flush_input
2000c7de g     O .bss	00000002 m_sd_type
00008790 g     F .text.itcm	00000130 __multiply
000029cc g     F .text.itcm	0000002c usb_serial_putchar
00000025 g       *ABS*	00000000 _teensy_model_identifier
20001cc0 g     O .bss	00000028 __malloc_current_mallinfo
00008b68 g     F .text.itcm	000000ba __d2b
20001ca0 g     O .bss	00000020 HardwareSerial::s_serials_with_serial_events
60001740 g     F .text.code	00000054 _reboot_Teensyduino_
60001798 g     F .text.code	00000002 startup_default_middle_hook
00000dcc g     F .text.itcm	00000070 zeroFS_class::findEOF()
00002c6c g     F .text.itcm	00000654 usb_isr
000015f4 g     F .text.itcm	0000000a SDHC_disk_read
000044f0 g     F .text.itcm	00000022 .hidden __aeabi_i2d
00003e44 g     F .text.itcm	00000006 Stream::parseInt()
20000590  w    O .data	00000028 vtable for usb_serial_class
00003d90 g     F .text.itcm	00000030 Stream::timedPeek()
20009d50 g     O .bss	00000004 scale_cpu_cycles_to_microseconds
00004e30  w    F .text.itcm	00000002 .hidden __aeabi_ldiv0
00004810 g     F .text.itcm	000001d0 .hidden __divdf3
2000139c g     O .data	00000408 __malloc_av_
000045bc g     F .text.itcm	00000254 .hidden __muldf3
00002a60 g     F .text.itcm	000000a4 usb_serial_flush_output
00005590 g     F .text.itcm	00000002 __malloc_lock
20001800 g     O .data	000002c0 _VectorsRam
00008d84 g     F .text.itcm	0000005e _calloc_r
20009d04 g     O .bss	00000004 getTimePtr
200017e4 g     O .data	00000001 yield_active_check_flags
2000c7f4 g     O .bss	00000001 usb_high_speed
20001cf4 g     O .bss	00008000 data
000054f4 g     F .text.itcm	0000009a memset
00003d80 g     F .text.itcm	00000010 main
20001cec g     O .bss	00000004 __malloc_max_total_mem
20203000 g     O .bss.dma	0000004b usb_descriptor_buffer
00002268 g     F .text.itcm	00000004 MSC_disk_read
000006cc g     F .text.itcm	0000008c now()
00003ba8 g     F .text.itcm	00000058 usb_init_serialnumber
60001e70 g       .text.code	00000000 __init_array_end
00007498 g     F .text.itcm	00000e34 _dtoa_r
00004e90 g     F .text.itcm	00000570 _malloc_r
2000c7e8 g     O .bss	00000001 HardwareSerial::s_count_serials_with_serial_events
00007328 g     F .text.itcm	0000001a __ascii_wctomb
00001ec8 g     F .text.itcm	00000080 sd_writeData2(unsigned char const*)
00004560 g     F .text.itcm	0000005a .hidden __aeabi_l2d
00000031 g       *ABS*	00000000 __rtc_localtime
000034d8 g     F .text.itcm	00000064 micros
000082cc g     F .text.itcm	0000009c _malloc_trim_r
60001ea0 g     O .text.progmem	00000004 string0
000029f8 g     F .text.itcm	00000018 usb_serial_write
6000179c  w    F .text.code	00000002 startup_late_hook
00003d64  w    F .text.itcm	00000004 usb_serial_class::available()
60001f46 g     O .text.progmem	00000001 _serialEvent_default
20000000 g     O .data	00000280 endpoint_queue_head
60001e70  w    O .text.progmem	00000016 usb_string_product_name
200017e2 g     O .data	00000002 m_enableChipSelect
0000340c g     F .text.itcm	000000cc delay
000049f0 g     F .text.itcm	0000007a .hidden __nedf2
00001950 g     F .text.itcm	00000108 sd_readData(unsigned char*, unsigned int)
00008e50 g     F .fini	00000000 _fini
60001020 g     O .text.headers	0000000c BootData
000007d8 g     F .text.itcm	00000020 month()
0000599c g     F .text.itcm	0000004c sprintf
00003e7c g     F .text.itcm	0000001e Print::printf(char const*, ...)
00003f1c g     F .text.itcm	00000016 Print::print(long)
0000380c g     F .text.itcm	00000004 Panic_Temp_isr
00007344 g     F .text.itcm	0000002c _write_r
00001dc4 g     F .text.itcm	0000004c SPI_disk_read(unsigned char*, unsigned long, unsigned int)
200017ac g     O .data	00000004 _impure_ptr
60001e68 g       .text.code	00000000 __preinit_array_end
00000778 g     F .text.itcm	00000020 minute()
00005400 g     F .text.itcm	0000002a __ascii_mbtowc
0000007c g     F .text.itcm	00000478 setup
20000d68 g     O .data	0000006c usb_descriptor_list
00001a94 g     F .text.itcm	000001a8 sd_connect()
20070000 g       .text.csf	00000000 _estack
00002a10 g     F .text.itcm	00000050 usb_serial_write_buffer_free
00004a8c g     F .text.itcm	00000012 .hidden __aeabi_dcmpeq
000026f4 g     F .text.itcm	00000108 usb_serial_configure
00003e6c  w    F .text.itcm	0000000e _write
20001ac0 g       .data	00000000 _edata
2000c7eb g     O .bss	00000001 external_psram_size
00003d6c  w    F .text.itcm	00000004 usb_serial_class::availableForWrite()
00001768 g     F .text.itcm	0000000a SDHC_disk_write
000041fc g     F .text.itcm	0000004e ultoa
00000798 g     F .text.itcm	00000020 second()
00003cf0 g     F .text.itcm	00000044 EventResponder::runFromInterrupt()
200017a8 g     O .data	00000004 __malloc_trim_threshold
00003d5c  w    F .text.itcm	00000004 usb_serial_class::peek()
00000ef8 g     F .text.itcm	00000042 disk_write
0000206c g     F .text.itcm	00000040 SPI_disk_write(unsigned char const*, unsigned long, unsigned int)
00008a54 g     F .text.itcm	00000114 __mdiff
00000bac g     F .text.itcm	0000003c zeroFS_class::Write(void*, unsigned long)
00008de4 g     F .text.itcm	0000004e .hidden __aeabi_d2iz
0000181c g     F .text.itcm	00000014 SPI_disk_ioctl(unsigned char, unsigned char*)
0000111c g     F .text.itcm	00000004 SDHC_disk_ioctl
00000758 g     F .text.itcm	00000020 hour()
200005b8 g     O .data	00000101 _ctype_
60001e68 g       .text.code	00000000 __init_array_start
00004e30  w    F .text.itcm	00000002 .hidden __aeabi_idiv0
00004af0 g     F .text.itcm	0000002c .hidden __unorddf2
20001210 g     O .data	00000004 F_BUS_ACTUAL
00003de8 g     F .text.itcm	0000005a Stream::parseInt(char)
00002264 g     F .text.itcm	00000004 MSC_disk_initialize
00000000 g       .text.itcm	00000000 _stext
00002154 g     F .text.itcm	0000005c spi_setup(unsigned long)
00005b00 g     F .text.itcm	000000dc strlen
00000eb4 g     F .text.itcm	00000042 disk_read
00001d38 g     F .text.itcm	0000004c sd_readStart(unsigned long)
00004a7c g     F .text.itcm	00000010 .hidden __aeabi_cdcmpeq
000049e0 g     F .text.itcm	0000008a .hidden __gedf2
60001e70 g     O .text.progmem	00000016 usb_string_product_name_default
00007310 g     F .text.itcm	00000018 vdprintf
60001798  w    F .text.code	00000002 startup_middle_hook
00004514 g     F .text.itcm	0000003a .hidden __aeabi_f2d
600017a0 g     F .text.code	000000e4 configure_cache
00000000  w      *UND*	00000000 _Jv_RegisterClasses
00004254 g     F .text.itcm	0000027a .hidden __subdf3
60001e68 g       .text.code	00000000 __preinit_array_start
000033e4 g     F .text.itcm	00000024 usb_receive
00008720 g     F .text.itcm	0000005a __lo0bits
0000d800 g       *ABS*	00000000 _flashimagelen
00000000  w      *UND*	00000000 __register_frame_info
000036fc g     F .text.itcm	00000030 rtc_get
70000000 g       .bss.extram	00000000 _extram_start
00003d34 g     F .text.itcm	00000004 pendablesrvreq_isr
20001230 g     O .data	0000016c __global_locale
00001c3c g     F .text.itcm	0000008c sd_cardSize()
000027fc g     F .text.itcm	000000ec usb_serial_read
0000050c g     F .text.itcm	000001a8 breakTime(long, tmElements_t&)
00003e9c g     F .text.itcm	0000007e Print::printNumber(unsigned long, unsigned char, unsigned char)
00003324 g     F .text.itcm	00000068 usb_config_tx
00008660 g     F .text.itcm	00000080 __multadd
0000864c g     F .text.itcm	00000012 _Bfree
200017c4  w    O .data	00000016 usb_string_serial_number



Disassembly of section .text.code:

60001400 <memory_copy>:
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001400:	cmp	r0, r1
60001402:	beq.n	60001414 <memory_copy+0x14>
	while (dest < dest_end) {
60001404:	cmp	r0, r2
60001406:	bcs.n	60001414 <memory_copy+0x14>
		*dest++ = *src++;
60001408:	ldr.w	r3, [r1], #4
6000140c:	str.w	r3, [r0], #4

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001410:	cmp	r2, r0
60001412:	bhi.n	60001408 <memory_copy+0x8>
60001414:	bx	lr
60001416:	nop

60001418 <memory_clear>:
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001418:	cmp	r0, r1
6000141a:	bcs.n	60001426 <memory_clear+0xe>
		*dest++ = 0;
6000141c:	movs	r3, #0
6000141e:	str.w	r3, [r0], #4
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001422:	cmp	r1, r0
60001424:	bhi.n	6000141e <memory_clear+0x6>
60001426:	bx	lr

60001428 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001428:	ldr	r3, [pc, #408]	; (600015c4 <ResetHandler+0x19c>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000142a:	mov.w	r1, #11141120	; 0xaa0000
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000142e:	ldr	r2, [pc, #408]	; (600015c8 <ResetHandler+0x1a0>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001430:	ldr	r0, [pc, #408]	; (600015cc <ResetHandler+0x1a4>)
void startup_middle_hook(void)	__attribute__ ((weak, alias("startup_default_middle_hook")));
FLASHMEM void startup_default_late_hook(void) {}
void startup_late_hook(void)	__attribute__ ((weak, alias("startup_default_late_hook")));
__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
void ResetHandler(void)
{
60001432:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001436:	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001438:	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
6000143a:	ldr	r2, [pc, #404]	; (600015d0 <ResetHandler+0x1a8>)
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000143c:	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
6000143e:	mov	sp, r2
	__asm__ volatile("dsb":::"memory");
60001440:	dsb	sy
	__asm__ volatile("isb":::"memory");
60001444:	isb	sy
#endif
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001448:	bl	60001794 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000144c:	ldr	r3, [pc, #388]	; (600015d4 <ResetHandler+0x1ac>)
6000144e:	movs	r0, #8
	//IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
	//GPIO7_GDIR |= (1<<3);
	//GPIO7_DR_SET = (1<<3); // digitalWrite(13, HIGH);

	// Initialize memory
	memory_copy(&_stext, &_stextload, &_etext);
60001450:	ldr	r2, [pc, #388]	; (600015d8 <ResetHandler+0x1b0>)
60001452:	ldr	r1, [pc, #392]	; (600015dc <ResetHandler+0x1b4>)
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
	__asm__ volatile("dsb":::"memory");
	__asm__ volatile("isb":::"memory");
#endif
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001454:	str.w	r0, [r3, #340]	; 0x154
	//IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
	//GPIO7_GDIR |= (1<<3);
	//GPIO7_DR_SET = (1<<3); // digitalWrite(13, HIGH);

	// Initialize memory
	memory_copy(&_stext, &_stextload, &_etext);
60001458:	ldr	r0, [pc, #388]	; (600015e0 <ResetHandler+0x1b8>)
6000145a:	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
6000145e:	ldr	r2, [pc, #388]	; (600015e4 <ResetHandler+0x1bc>)
60001460:	ldr	r1, [pc, #388]	; (600015e8 <ResetHandler+0x1c0>)
60001462:	ldr	r0, [pc, #392]	; (600015ec <ResetHandler+0x1c4>)
60001464:	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001468:	ldr	r1, [pc, #388]	; (600015f0 <ResetHandler+0x1c8>)
6000146a:	ldr	r0, [pc, #392]	; (600015f4 <ResetHandler+0x1cc>)
6000146c:	bl	60001418 <memory_clear>
60001470:	ldr	r4, [pc, #388]	; (600015f8 <ResetHandler+0x1d0>)

	// enable FPU
	SCB_CPACR = 0x00F00000;
60001472:	ldr	r1, [pc, #392]	; (600015fc <ResetHandler+0x1d4>)
60001474:	mov.w	r0, #15728640	; 0xf00000

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001478:	movs	r3, #0
6000147a:	ldr	r2, [pc, #388]	; (60001600 <ResetHandler+0x1d8>)
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
6000147c:	str	r0, [r1, #0]

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000147e:	str.w	r2, [r4, r3, lsl #2]
60001482:	adds	r3, #1
60001484:	cmp	r3, #176	; 0xb0
60001486:	bne.n	6000147e <ResetHandler+0x56>
60001488:	ldr	r3, [pc, #376]	; (60001604 <ResetHandler+0x1dc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
6000148a:	movs	r1, #128	; 0x80
6000148c:	ldr	r2, [pc, #376]	; (60001608 <ResetHandler+0x1e0>)
6000148e:	strb.w	r1, [r3], #1
60001492:	cmp	r3, r2
60001494:	bne.n	6000148e <ResetHandler+0x66>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001496:	ldr	r5, [pc, #316]	; (600015d4 <ResetHandler+0x1ac>)
60001498:	mov.w	r8, #2155905152	; 0x80808080
	SCB_VTOR = (uint32_t)_VectorsRam;

	reset_PFD();

	// enable exception handling
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
6000149c:	ldr	r1, [pc, #364]	; (6000160c <ResetHandler+0x1e4>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000149e:	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600014a2:	ldr	r3, [pc, #364]	; (60001610 <ResetHandler+0x1e8>)
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600014a4:	movs	r6, #0

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014a6:	ldr.w	sl, [pc, #420]	; 6000164c <ResetHandler+0x224>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014aa:	ldr.w	r9, [pc, #420]	; 60001650 <ResetHandler+0x228>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600014ae:	str	r4, [r3, #0]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b0:	str.w	r8, [r5, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b4:	str.w	sl, [r5, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014b8:	str.w	r8, [r5, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014bc:	str.w	r9, [r5, #240]	; 0xf0
	SCB_VTOR = (uint32_t)_VectorsRam;

	reset_PFD();

	// enable exception handling
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014c0:	ldr	r3, [r1, #0]

	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014c2:	ldr	r7, [pc, #336]	; (60001614 <ResetHandler+0x1ec>)
	SCB_VTOR = (uint32_t)_VectorsRam;

	reset_PFD();

	// enable exception handling
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014c4:	orr.w	r3, r3, #458752	; 0x70000
600014c8:	str	r3, [r1, #0]

	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ca:	ldr	r3, [r7, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014cc:	ldr	r1, [pc, #244]	; (600015c4 <ResetHandler+0x19c>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;

	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ce:	bic.w	r3, r3, #127	; 0x7f
600014d2:	orr.w	r3, r3, #64	; 0x40
600014d6:	str	r3, [r7, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014d8:	ldr	r3, [r7, #36]	; 0x24
600014da:	bic.w	r3, r3, #127	; 0x7f
600014de:	orr.w	r3, r3, #64	; 0x40
600014e2:	str	r3, [r7, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014e4:	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
600014e6:	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
600014e8:	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
600014ea:	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
600014ec:	bl	600017a0 <configure_cache>
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
600014f0:	ldr	r2, [pc, #292]	; (60001618 <ResetHandler+0x1f0>)
	_VectorsRam[15] = systick_isr;
600014f2:	ldr	r3, [pc, #296]	; (6000161c <ResetHandler+0x1f4>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
600014f4:	movs	r0, #99	; 0x63
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
600014f6:	str	r2, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014f8:	movs	r1, #3

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
600014fa:	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
600014fc:	ldr	r2, [pc, #288]	; (60001620 <ResetHandler+0x1f8>)
	SYST_CVR = 0;
600014fe:	ldr	r3, [pc, #292]	; (60001624 <ResetHandler+0x1fc>)
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001500:	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001502:	add.w	r0, r0, #3758096384	; 0xe0000000
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
60001506:	str	r6, [r3, #0]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001508:	str.w	r1, [r2, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000150c:	addw	r0, r0, #4001	; 0xfa1
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001510:	ldr	r1, [pc, #276]	; (60001628 <ResetHandler+0x200>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001512:	ldr	r2, [pc, #280]	; (6000162c <ResetHandler+0x204>)
60001514:	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001518:	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000151a:	ldr	r2, [pc, #276]	; (60001630 <ResetHandler+0x208>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000151c:	orr.w	r3, r3, #16777216	; 0x1000000
60001520:	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001522:	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001524:	ldr	r1, [pc, #268]	; (60001634 <ResetHandler+0x20c>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001526:	orr.w	r3, r3, #1
6000152a:	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000152c:	ldr	r3, [r0, #0]
6000152e:	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
60001530:	bl	60001c40 <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001534:	str.w	r8, [r5, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001538:	ldr	r0, [pc, #252]	; (60001638 <ResetHandler+0x210>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000153a:	str.w	sl, [r5, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000153e:	str.w	r8, [r5, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001542:	str.w	r9, [r5, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001546:	bl	60001e38 <__set_arm_clock_veneer>
#endif

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000154a:	ldr	r1, [r7, #108]	; 0x6c
	PIT_MCR = 0;
6000154c:	ldr	r2, [pc, #236]	; (6000163c <ResetHandler+0x214>)
#ifdef F_CPU
	set_arm_clock(F_CPU);
#endif

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000154e:	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001552:	ldr	r3, [pc, #236]	; (60001640 <ResetHandler+0x218>)
#ifdef F_CPU
	set_arm_clock(F_CPU);
#endif

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001554:	str	r1, [r7, #108]	; 0x6c
	PIT_MCR = 0;
60001556:	str	r6, [r2, #0]
	PIT_TCTRL0 = 0;
60001558:	str.w	r6, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000155c:	str.w	r6, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001560:	str.w	r6, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001564:	str.w	r6, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001568:	ldr	r2, [r3, #56]	; 0x38
6000156a:	lsls	r2, r2, #31
6000156c:	bmi.n	60001580 <ResetHandler+0x158>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000156e:	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
60001572:	ldr	r1, [pc, #208]	; (60001644 <ResetHandler+0x21c>)
60001574:	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001576:	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001578:	ldr	r2, [r3, #56]	; 0x38
6000157a:	orr.w	r2, r2, #1
6000157e:	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
60001580:	ldr	r2, [pc, #188]	; (60001640 <ResetHandler+0x218>)
60001582:	ldr	r4, [pc, #196]	; (60001648 <ResetHandler+0x220>)
60001584:	ldr	r3, [r2, #8]
60001586:	orr.w	r3, r3, #65537	; 0x10001
6000158a:	str	r3, [r2, #8]

#ifdef ARDUINO_TEENSY41
	configure_external_ram();
6000158c:	bl	60001884 <configure_external_ram>
#endif
	analog_init();
60001590:	bl	60001dc0 <analog_init>
	pwm_init();
60001594:	bl	60001e28 <__pwm_init_veneer>
	tempmon_init();
60001598:	bl	60001ca4 <tempmon_init>
	startup_middle_hook();
6000159c:	bl	60001798 <startup_default_middle_hook>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015a0:	ldr	r3, [r4, #0]
	while (millis() < 20) ; // wait at least 20ms before starting USB
600015a2:	cmp	r3, #19
600015a4:	bls.n	600015a0 <ResetHandler+0x178>
	usb_init();
600015a6:	bl	60001654 <usb_init>
600015aa:	ldr	r3, [r4, #0]

	while (millis() < 300) ; // wait at least 300ms before calling user code
600015ac:	cmp.w	r3, #300	; 0x12c
600015b0:	bcc.n	600015aa <ResetHandler+0x182>
	//printf("before C++ constructors\n");
	startup_late_hook();
600015b2:	bl	6000179c <startup_default_late_hook>
	__libc_init_array();
600015b6:	bl	60001e30 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
600015ba:	bl	60001e48 <__main_veneer>
	
	while (1) asm("WFI");
600015be:	wfi
600015c0:	b.n	600015be <ResetHandler+0x196>
600015c2:	nop
600015c4:	.word	0x400ac000
600015c8:	.word	0xaaaaaaaf
600015cc:	.word	0x00200007
600015d0:	.word	0x20070000
600015d4:	.word	0x400d8000
600015d8:	.word	0x00008e58
600015dc:	.word	0x60001f48
600015e0:	.word	0x00000000
600015e4:	.word	0x20001ac0
600015e8:	.word	0x6000ada4
600015ec:	.word	0x20000000
600015f0:	.word	0x2000c8a0
600015f4:	.word	0x20001ac0
600015f8:	.word	0x20001800
600015fc:	.word	0xe000ed88
60001600:	.word	0x0000353d
60001604:	.word	0xe000e400
60001608:	.word	0xe000e4a0
6000160c:	.word	0xe000ed24
60001610:	.word	0xe000ed08
60001614:	.word	0x400fc000
60001618:	.word	0x00003d35
6000161c:	.word	0x00003d39
60001620:	.word	0xe000e014
60001624:	.word	0xe000e018
60001628:	.word	0xe000edfc
6000162c:	.word	0x20200000
60001630:	.word	0xe0001000
60001634:	.word	0x20009d54
60001638:	.word	0x179a7b00
6000163c:	.word	0x40084000
60001640:	.word	0x400d4000
60001644:	.word	0x56c00000
60001648:	.word	0x20009d58
6000164c:	.word	0x2018101b
60001650:	.word	0x13110d0c

60001654 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001654:	ldr	r3, [pc, #192]	; (60001718 <usb_init+0xc4>)
60001656:	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
6000165a:	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
6000165c:	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001660:	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
60001664:	bl	60001e40 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001668:	ldr	r1, [pc, #176]	; (6000171c <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
6000166a:	ldr	r0, [pc, #180]	; (60001720 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000166c:	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001670:	ldr	r4, [pc, #176]	; (60001724 <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001672:	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001676:	ldr	r3, [pc, #176]	; (60001728 <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001678:	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
6000167c:	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001680:	ldr	r2, [r4, #0]
60001682:	ands	r3, r2
60001684:	cbnz	r3, 6000168e <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60001686:	ldr.w	r3, [r0, #424]	; 0x1a8
6000168a:	lsls	r2, r3, #30
6000168c:	beq.n	600016c4 <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
6000168e:	ldr	r3, [pc, #144]	; (60001720 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001690:	mov.w	r1, #2147483648	; 0x80000000
60001694:	ldr	r2, [pc, #140]	; (60001724 <usb_init+0xd0>)
60001696:	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001698:	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
6000169a:	ldr.w	r1, [r3, #320]	; 0x140
6000169e:	orr.w	r1, r1, #2
600016a2:	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600016a6:	ldr.w	r3, [r2, #320]	; 0x140
600016aa:	lsls	r3, r3, #30
600016ac:	bmi.n	600016a6 <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600016ae:	mov.w	r0, #131072	; 0x20000
600016b2:	ldr	r1, [pc, #120]	; (6000172c <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600016b4:	ldr	r3, [pc, #108]	; (60001724 <usb_init+0xd0>)
600016b6:	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
600016ba:	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600016bc:	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600016be:	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
600016c0:	bl	60001e58 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600016c4:	ldr	r5, [pc, #104]	; (60001730 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
600016c6:	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600016c8:	ldr	r3, [pc, #88]	; (60001724 <usb_init+0xd0>)
600016ca:	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600016ce:	ldr	r4, [pc, #80]	; (60001720 <usb_init+0xcc>)
600016d0:	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
600016d2:	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600016d4:	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
600016d6:	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600016d8:	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600016da:	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600016de:	mov.w	r2, #640	; 0x280
600016e2:	bl	60001e60 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600016e6:	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600016ea:	movw	r1, #323	; 0x143
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
600016ee:	mov.w	r0, #4194304	; 0x400000
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
600016f2:	ldr	r3, [pc, #64]	; (60001734 <usb_init+0xe0>)
600016f4:	ldr	r2, [pc, #64]	; (60001738 <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600016f6:	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
600016f8:	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
600016fa:	str.w	r5, [r4, #344]	; 0x158
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600016fe:	str.w	r1, [r4, #328]	; 0x148
60001702:	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001706:	ldr	r2, [pc, #52]	; (6000173c <usb_init+0xe8>)
60001708:	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
6000170c:	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
6000170e:	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001710:	str.w	r3, [r4, #320]	; 0x140
60001714:	pop	{r4, r5, r6, pc}
60001716:	nop
60001718:	.word	0x400d8000
6000171c:	.word	0x400fc000
60001720:	.word	0x402e0000
60001724:	.word	0x400d9000
60001728:	.word	0x001e1c00
6000172c:	.word	0xe000e28c
60001730:	.word	0x20000000
60001734:	.word	0x20001800
60001738:	.word	0x00002c6d
6000173c:	.word	0xe000e10c

60001740 <_reboot_Teensyduino_>:
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


FLASHMEM void _reboot_Teensyduino_(void)
{
60001740:	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001742:	ldr	r3, [pc, #56]	; (6000177c <_reboot_Teensyduino_+0x3c>)
60001744:	ldr	r3, [r3, #96]	; 0x60
60001746:	lsls	r3, r3, #30
60001748:	bmi.n	6000174c <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
6000174a:	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
6000174c:	cpsid	i
		USB1_USBCMD = 0;
6000174e:	ldr	r3, [pc, #48]	; (60001780 <_reboot_Teensyduino_+0x40>)
60001750:	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001752:	ldr	r2, [pc, #48]	; (60001784 <_reboot_Teensyduino_+0x44>)
{
	if (!(HW_OCOTP_CFG5 & 0x02)) {
		asm("bkpt #251"); // run bootloader
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
		USB1_USBCMD = 0;
60001754:	str.w	r0, [r3, #320]	; 0x140
		IOMUXC_GPR_GPR16 = 0x00200003;
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001758:	add.w	r3, r3, #3758096384	; 0xe0000000
	if (!(HW_OCOTP_CFG5 & 0x02)) {
		asm("bkpt #251"); // run bootloader
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
		USB1_USBCMD = 0;
		IOMUXC_GPR_GPR16 = 0x00200003;
6000175c:	ldr	r1, [pc, #40]	; (60001788 <_reboot_Teensyduino_+0x48>)
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
6000175e:	sub.w	r3, r3, #913408	; 0xdf000
	if (!(HW_OCOTP_CFG5 & 0x02)) {
		asm("bkpt #251"); // run bootloader
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
		USB1_USBCMD = 0;
		IOMUXC_GPR_GPR16 = 0x00200003;
60001762:	str	r1, [r2, #64]	; 0x40
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001764:	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001766:	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
6000176a:	ldr	r2, [pc, #32]	; (6000178c <_reboot_Teensyduino_+0x4c>)
		IOMUXC_GPR_GPR16 = 0x00200003;
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
		__asm__ volatile("dsb":::"memory");
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
6000176c:	add.w	r3, r3, #28672	; 0x7000
60001770:	ldr	r1, [pc, #28]	; (60001790 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001772:	ldr	r2, [r2, #0]
60001774:	mov	r0, r3
		IOMUXC_GPR_GPR16 = 0x00200003;
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
		__asm__ volatile("dsb":::"memory");
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
60001776:	str	r1, [r3, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001778:	ldr	r3, [r2, #8]
6000177a:	blx	r3
6000177c:	.word	0x401f4400
60001780:	.word	0x402e0000
60001784:	.word	0x400ac000
60001788:	.word	0x00200003
6000178c:	.word	0x0020001c
60001790:	.word	0xeb120000

60001794 <startup_default_early_hook>:
60001794:	bx	lr
60001796:	nop

60001798 <startup_default_middle_hook>:
60001798:	bx	lr
6000179a:	nop

6000179c <startup_default_late_hook>:
extern int main (void);
FLASHMEM void startup_default_early_hook(void) {}
void startup_early_hook(void)	__attribute__ ((weak, alias("startup_default_early_hook")));
FLASHMEM void startup_default_middle_hook(void) {}
void startup_middle_hook(void)	__attribute__ ((weak, alias("startup_default_middle_hook")));
FLASHMEM void startup_default_late_hook(void) {}
6000179c:	bx	lr
6000179e:	nop

600017a0 <configure_cache>:
#define SIZE_2G		(SCB_MPU_RASR_SIZE(30) | SCB_MPU_RASR_ENABLE)
#define SIZE_4G		(SCB_MPU_RASR_SIZE(31) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
600017a0:	push	{r4, r5, r6, r7, lr}
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600017a2:	ldr	r2, [pc, #144]	; (60001834 <configure_cache+0x94>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600017a4:	movs	r0, #0

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600017a6:	ldr	r3, [pc, #144]	; (60001838 <configure_cache+0x98>)
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600017a8:	mov.w	ip, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600017ac:	ldr	r4, [pc, #140]	; (6000183c <configure_cache+0x9c>)

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600017ae:	movs	r6, #17

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600017b0:	ldr.w	lr, [pc, #200]	; 6000187c <configure_cache+0xdc>
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600017b4:	movs	r7, #18
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600017b6:	str	r0, [r4, #0]
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600017b8:	movs	r5, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600017ba:	str.w	ip, [r2]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600017be:	str.w	lr, [r3]
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600017c2:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600017c4:	ldr.w	lr, [pc, #184]	; 60001880 <configure_cache+0xe0>

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600017c8:	ldr	r6, [pc, #116]	; (60001840 <configure_cache+0xa0>)
	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600017ca:	str.w	lr, [r3]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600017ce:	ldr	r1, [pc, #116]	; (60001844 <configure_cache+0xa4>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600017d0:	str	r7, [r2, #0]
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600017d2:	str	r6, [r3, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600017d4:	orr.w	r1, r1, #21
	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600017d8:	ldr	r7, [pc, #108]	; (60001848 <configure_cache+0xa8>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600017da:	ldr	r6, [pc, #112]	; (6000184c <configure_cache+0xac>)
	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600017dc:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600017de:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600017e0:	ldr	r7, [pc, #108]	; (60001850 <configure_cache+0xb0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600017e2:	ldr	r6, [pc, #112]	; (60001854 <configure_cache+0xb4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600017e4:	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600017e6:	str	r6, [r3, #0]
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600017e8:	ldr	r7, [pc, #108]	; (60001858 <configure_cache+0xb8>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600017ea:	str	r1, [r2, #0]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600017ec:	ldr	r6, [pc, #108]	; (6000185c <configure_cache+0xbc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600017ee:	ldr	r1, [pc, #112]	; (60001860 <configure_cache+0xc0>)

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600017f0:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600017f2:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600017f4:	ldr	r7, [pc, #108]	; (60001864 <configure_cache+0xc4>)
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600017f6:	str	r1, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600017f8:	ldr	r6, [pc, #108]	; (60001868 <configure_cache+0xc8>)

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600017fa:	ldr	r1, [pc, #112]	; (6000186c <configure_cache+0xcc>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600017fc:	str	r7, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600017fe:	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001800:	ldr	r7, [pc, #108]	; (60001870 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001802:	str	r1, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001804:	ldr	r6, [pc, #108]	; (60001874 <configure_cache+0xd4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001806:	ldr	r1, [pc, #112]	; (60001878 <configure_cache+0xd8>)

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001808:	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000180a:	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000180c:	str	r1, [r3, #0]

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
6000180e:	str	r5, [r4, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
60001810:	dsb	sy
	asm("isb");
60001814:	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001818:	str.w	r0, [r3, #432]	; 0x1b0

	asm("dsb");
6000181c:	dsb	sy
	asm("isb");
60001820:	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001824:	ldr.w	r3, [r2, #-136]
60001828:	orr.w	r3, r3, #196608	; 0x30000
6000182c:	str.w	r3, [r2, #-136]
60001830:	pop	{r4, r5, r6, r7, pc}
60001832:	nop
60001834:	.word	0xe000ed9c
60001838:	.word	0xe000eda0
6000183c:	.word	0xe000ed94
60001840:	.word	0x00100009
60001844:	.word	0x2000c8a0
60001848:	.word	0x00200013
6000184c:	.word	0x07020021
60001850:	.word	0x20000014
60001854:	.word	0x13080025
60001858:	.word	0x10000009
6000185c:	.word	0x20200016
60001860:	.word	0x130b0027
60001864:	.word	0x40000017
60001868:	.word	0x13100033
6000186c:	.word	0x60000018
60001870:	.word	0x070b002f
60001874:	.word	0x70000019
60001878:	.word	0x130b002f
6000187c:	.word	0x1000003f
60001880:	.word	0x03080025

60001884 <configure_external_ram>:
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
	return id & 0xFFFF;
}

FLASHMEM void configure_external_ram()
{
60001884:	push	{r4, r5, r6, r7, lr}
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001886:	ldr	r3, [pc, #564]	; (60001abc <configure_external_ram+0x238>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst

	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001888:	movs	r2, #24
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
6000188a:	ldr	r6, [pc, #564]	; (60001ac0 <configure_external_ram+0x23c>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
6000188c:	movs	r0, #1
}

FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000188e:	ldr	r1, [pc, #564]	; (60001ac4 <configure_external_ram+0x240>)
		 | FLEXSPI_MCR0_IPGRANTWAIT_MASK | FLEXSPI_MCR0_SCKFREERUNEN
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001890:	movw	lr, #34572	; 0x870c

FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001894:	ldr	r5, [pc, #560]	; (60001ac8 <configure_external_ram+0x244>)
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001896:	mov.w	r7, #4294967295
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
6000189a:	ldr	r4, [pc, #560]	; (60001acc <configure_external_ram+0x248>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
	return id & 0xFFFF;
}

FLASHMEM void configure_external_ram()
{
6000189c:	sub	sp, #12
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
6000189e:	str.w	r1, [r3, #604]	; 0x25c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600018a2:	str.w	r5, [r3, #608]	; 0x260
	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
600018a6:	movs	r5, #0
FLASHMEM void configure_external_ram()
{
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600018a8:	str.w	r1, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
600018ac:	str.w	r4, [r3, #616]	; 0x268
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
600018b0:	mov.w	r4, #8192	; 0x2000
	// initialize pins
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600018b4:	str.w	r6, [r3, #620]	; 0x26c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600018b8:	ldr	r1, [pc, #532]	; (60001ad0 <configure_external_ram+0x24c>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600018ba:	str.w	r6, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600018be:	str.w	r6, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
600018c2:	str.w	r6, [r3, #632]	; 0x278
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600018c6:	ldr	r6, [pc, #524]	; (60001ad4 <configure_external_ram+0x250>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst

	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600018c8:	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
600018ca:	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
600018cc:	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
600018ce:	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
600018d0:	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
600018d2:	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
600018d6:	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
600018da:	str.w	r2, [r3, #136]	; 0x88

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
600018de:	movw	r2, #1541	; 0x605
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3

	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600018e2:	str.w	r0, [r1, #812]	; 0x32c
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
600018e6:	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
600018ea:	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
600018ee:	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
600018f2:	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
600018f6:	str.w	r0, [r1, #848]	; 0x350
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
600018fa:	mov	r1, r5
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600018fc:	ldr	r3, [r6, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
600018fe:	ldr	r0, [pc, #472]	; (60001ad8 <configure_external_ram+0x254>)
60001900:	ands	r0, r3
60001902:	ldr	r3, [pc, #472]	; (60001adc <configure_external_ram+0x258>)
60001904:	orrs	r3, r0
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001906:	ldr	r0, [pc, #472]	; (60001ae0 <configure_external_ram+0x25c>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8

	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001908:	str	r3, [r6, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
6000190a:	ldr.w	r3, [r6, #132]	; 0x84
6000190e:	orr.w	r3, r3, #12
60001912:	str.w	r3, [r6, #132]	; 0x84
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001916:	movs	r6, #2
	// turn on clock  (TODO: increase clock speed later, slow & cautious for first release)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001918:	ldr	r3, [r0, #0]
6000191a:	orrs	r3, r6
6000191c:	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
6000191e:	ldr	r3, [r0, #0]
		 | FLEXSPI_MCR0_IPGRANTWAIT_MASK | FLEXSPI_MCR0_SCKFREERUNEN
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001920:	and.w	lr, r3, lr
60001924:	ldr	r3, [pc, #444]	; (60001ae4 <configure_external_ram+0x260>)
60001926:	orr.w	r3, lr, r3
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000192a:	ldr.w	lr, [pc, #496]	; 60001b1c <configure_external_ram+0x298>
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);

	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
6000192e:	str	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001930:	ldr	r3, [pc, #436]	; (60001ae8 <configure_external_ram+0x264>)
		 | FLEXSPI_MCR0_COMBINATIONEN | FLEXSPI_MCR0_DOZEEN
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001932:	str	r7, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001934:	ldr.w	r7, [lr, #8]
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001938:	ands	r3, r7
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000193a:	ldr	r7, [pc, #432]	; (60001aec <configure_external_ram+0x268>)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
6000193c:	orr.w	r3, r3, #536870912	; 0x20000000
		 | FLEXSPI_MCR0_HSEN | FLEXSPI_MCR0_ATDFEN | FLEXSPI_MCR0_ARDFEN
		 | FLEXSPI_MCR0_RXCLKSRC_MASK | FLEXSPI_MCR0_SWRESET))
		| FLEXSPI_MCR0_AHBGRANTWAIT(0xFF) | FLEXSPI_MCR0_IPGRANTWAIT(0xFF)
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001940:	str	r3, [r0, #8]
		 | FLEXSPI_MCR2_SCKBDIFFOPT | FLEXSPI_MCR2_SAMEDEVICEEN
		 | FLEXSPI_MCR2_CLRLEARNPHASE | FLEXSPI_MCR2_CLRAHBBUFOPT))
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;

	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
60001942:	ldr	r3, [r0, #12]
60001944:	bic.w	r3, r3, #120	; 0x78
60001948:	str	r3, [r0, #12]
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000194a:	ldr	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000194c:	ands	r7, r3
6000194e:	ldr	r3, [pc, #416]	; (60001af0 <configure_external_ram+0x26c>)
60001950:	orrs	r3, r7
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001952:	ldr	r7, [pc, #408]	; (60001aec <configure_external_ram+0x268>)

	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001954:	str	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001956:	ldr	r3, [r0, #32]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001958:	ands	r7, r3
6000195a:	ldr	r3, [pc, #404]	; (60001af0 <configure_external_ram+0x26c>)
6000195c:	orrs	r3, r7
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000195e:	ldr	r7, [pc, #404]	; (60001af4 <configure_external_ram+0x270>)
		| FLEXSPI_AHBCR_BUFFERABLEEN | FLEXSPI_AHBCR_CACHABLEEN);
	uint32_t mask = (FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_PRIORITY_MASK
		| FLEXSPI_AHBRXBUFCR0_MSTRID_MASK | FLEXSPI_AHBRXBUFCR0_BUFSZ_MASK);
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001960:	str	r3, [r0, #36]	; 0x24
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001962:	str	r7, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
60001964:	str	r7, [r0, #44]	; 0x2c

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001966:	ldr.w	r3, [lr, #184]	; 0xb8
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;

	FLEXSPI2_INTEN = 0;
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000196a:	ldr	r7, [pc, #396]	; (60001af8 <configure_external_ram+0x274>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
	FLEXSPI2_AHBRXBUF2CR0 = mask;
	FLEXSPI2_AHBRXBUF3CR0 = mask;

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
6000196c:	bic.w	r3, r3, #63	; 0x3f
60001970:	orr.w	r3, r3, #1
60001974:	str.w	r3, [r0, #184]	; 0xb8
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001978:	ldr.w	r3, [lr, #188]	; 0xbc
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
6000197c:	ldr.w	lr, [pc, #388]	; 60001b04 <configure_external_ram+0x280>
	FLEXSPI2_AHBRXBUF3CR0 = mask;

	// RX watermark = one 64 bit line
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
	// TX watermark = one 64 bit line
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001980:	bic.w	r3, r3, #63	; 0x3f
60001984:	orr.w	r3, r3, #1
60001988:	str.w	r3, [r0, #188]	; 0xbc

	FLEXSPI2_INTEN = 0;
6000198c:	str	r5, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
6000198e:	str	r4, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001990:	str	r7, [r0, #112]	; 0x70
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001992:	str.w	r2, [r0, #128]	; 0x80
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60001996:	str	r4, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001998:	str	r7, [r0, #116]	; 0x74
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
6000199a:	str.w	r2, [r0, #132]	; 0x84
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
6000199e:	ldr	r4, [r0, #0]

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019a0:	ldr	r3, [pc, #344]	; (60001afc <configure_external_ram+0x278>)
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600019a2:	bic.w	r4, r4, #2

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
600019a6:	ldr	r2, [pc, #344]	; (60001b00 <configure_external_ram+0x27c>)
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
		| FLEXSPI_FLSHCR1_TCSH(3) | FLEXSPI_FLSHCR1_TCSS(3);
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
		| FLEXSPI_FLSHCR2_ARDSEQID(5) | FLEXSPI_FLSHCR2_ARDSEQNUM(0);

	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
600019a8:	str	r4, [r0, #0]

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600019aa:	str.w	lr, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019ae:	str	r6, [r0, #28]
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
600019b0:	str.w	r1, [r3], #4
600019b4:	cmp	r3, r2
600019b6:	bne.n	600019b0 <configure_external_ram+0x12c>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600019b8:	ldr	r3, [pc, #292]	; (60001ae0 <configure_external_ram+0x25c>)
600019ba:	ldr	r2, [r3, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600019bc:	mov	r1, r3

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
600019be:	orr.w	r2, r2, #1
600019c2:	str	r2, [r3, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
600019c4:	ldr	r3, [r1, #0]
600019c6:	ldr	r2, [pc, #280]	; (60001ae0 <configure_external_ram+0x25c>)
600019c8:	ands.w	r3, r3, #1
600019cc:	bne.n	600019c4 <configure_external_ram+0x140>

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600019ce:	ldr	r6, [pc, #308]	; (60001b04 <configure_external_ram+0x280>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019d0:	movs	r5, #2

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600019d2:	movw	r4, #1781	; 0x6f5
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600019d6:	movw	r0, #1126	; 0x466
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600019da:	movw	r1, #1177	; 0x499
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600019de:	ldr	r7, [pc, #296]	; (60001b08 <configure_external_ram+0x284>)
	volatile uint32_t *luttable = &FLEXSPI2_LUT0;
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600019e0:	str	r6, [r2, #24]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600019e2:	movw	r6, #9217	; 0x2401
	for (int i=0; i < 64; i++) luttable[i] = 0;
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600019e6:	str	r5, [r2, #28]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600019e8:	movw	r5, #1077	; 0x435

	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600019ec:	str.w	r4, [r2, #512]	; 0x200
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
600019f0:	movw	r4, #8705	; 0x2201
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;

	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600019f4:	str.w	r0, [r2, #528]	; 0x210

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600019f8:	movs	r0, #1
	// cmd index 0 = exit QPI mode
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600019fa:	str.w	r1, [r2, #544]	; 0x220
FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600019fe:	mov	r1, r2
	// cmd index 1 = reset enable
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001a00:	str.w	r7, [r2, #560]	; 0x230
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001a04:	add.w	r7, r7, #3657433088	; 0xda000000
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
	// cmd index 2 = reset
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001a08:	str.w	r6, [r2, #564]	; 0x234
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001a0c:	add.w	r7, r7, #588	; 0x24c
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
	// cmd index 3 = read ID bytes
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001a10:	str.w	r5, [r2, #576]	; 0x240
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001a14:	ldr	r6, [pc, #244]	; (60001b0c <configure_external_ram+0x288>)
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001a16:	ldr	r5, [pc, #248]	; (60001b10 <configure_external_ram+0x28c>)
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
	// cmd index 4 = enter QPI mode
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
	// cmd index 5 = read QPI
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001a18:	str.w	r7, [r2, #592]	; 0x250
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001a1c:	str.w	r6, [r2, #596]	; 0x254
	// cmd index 6 = write QPI
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001a20:	str.w	r5, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001a24:	str.w	r4, [r2, #612]	; 0x264
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001a28:	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a2c:	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a30:	str.w	r0, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a34:	ldr	r3, [r1, #20]
60001a36:	ldr	r2, [pc, #168]	; (60001ae0 <configure_external_ram+0x25c>)
60001a38:	lsls	r5, r3, #31
60001a3a:	bpl.n	60001a34 <configure_external_ram+0x1b0>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a3c:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001a3e:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a40:	mov.w	r0, #65536	; 0x10000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a44:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a46:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001a48:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a4c:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a50:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a54:	ldr	r3, [r1, #20]
60001a56:	ldr	r2, [pc, #136]	; (60001ae0 <configure_external_ram+0x25c>)
60001a58:	lsls	r4, r3, #31
60001a5a:	bpl.n	60001a54 <configure_external_ram+0x1d0>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a5c:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001a5e:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a60:	mov.w	r0, #131072	; 0x20000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a64:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a66:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001a68:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001a6c:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a70:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a74:	ldr	r3, [r1, #20]
60001a76:	ldr	r2, [pc, #104]	; (60001ae0 <configure_external_ram+0x25c>)
60001a78:	lsls	r0, r3, #31
60001a7a:	bpl.n	60001a74 <configure_external_ram+0x1f0>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a7c:	movs	r3, #1
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001a7e:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001a80:	ldr	r0, [pc, #144]	; (60001b14 <configure_external_ram+0x290>)
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a82:	mov	r1, r2
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001a84:	str	r3, [r2, #20]
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001a86:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001a8a:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001a8e:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001a92:	ldr	r3, [r1, #20]
60001a94:	ldr	r2, [pc, #72]	; (60001ae0 <configure_external_ram+0x25c>)
60001a96:	lsls	r3, r3, #31
60001a98:	bpl.n	60001a92 <configure_external_ram+0x20e>
	uint32_t id = FLEXSPI2_RFDR0;
60001a9a:	ldr.w	r3, [r2, #256]	; 0x100

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001a9e:	movw	r1, #23821	; 0x5d0d
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001aa2:	movs	r0, #33	; 0x21

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001aa4:	uxth	r3, r3
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001aa6:	str	r0, [r2, #20]

	// look for the first PSRAM chip
	flexspi2_command(0, 0); // exit quad mode
	flexspi2_command(1, 0); // reset enable
	flexspi2_command(2, 0); // reset (is this really necessary?)
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001aa8:	cmp	r3, r1
60001aaa:	beq.n	60001b20 <configure_external_ram+0x29c>
			external_psram_size * 0x100000 -
			((uint32_t)&_extram_end - (uint32_t)&_extram_start),
			1, NULL);
	} else {
		// No PSRAM
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001aac:	ldr	r3, [pc, #104]	; (60001b18 <configure_external_ram+0x294>)
60001aae:	movs	r2, #0
60001ab0:	str	r2, [r3, #0]
60001ab2:	str	r2, [r3, #4]
60001ab4:	str	r2, [r3, #8]
60001ab6:	str	r2, [r3, #12]
	}
}
60001ab8:	add	sp, #12
60001aba:	pop	{r4, r5, r6, r7, pc}
60001abc:	.word	0x401f8000
60001ac0:	.word	0x000170f9
60001ac4:	.word	0x0001b0f9
60001ac8:	.word	0x000110f9
60001acc:	.word	0x000100f9
60001ad0:	.word	0x401f8400
60001ad4:	.word	0x400fc000
60001ad8:	.word	0x1ffffcff
60001adc:	.word	0xa0000300
60001ae0:	.word	0x402a4000
60001ae4:	.word	0xffff0012
60001ae8:	.word	0x00f737ff
60001aec:	.word	0x7cf0ff00
60001af0:	.word	0x80000040
60001af4:	.word	0x830f00ff
60001af8:	.word	0x00020063
60001afc:	.word	0x402a4200
60001b00:	.word	0x402a4300
60001b04:	.word	0x5af05af0
60001b08:	.word	0x3018049f
60001b0c:	.word	0x26013206
60001b10:	.word	0x0a180638
60001b14:	.word	0x00030004
60001b18:	.word	0x2000c850
60001b1c:	.word	0x402a8000
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001b20:	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b22:	mov.w	r0, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b26:	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b28:	mov	r1, r2
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001b2a:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b2e:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b32:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b36:	ldr	r3, [r1, #20]
60001b38:	ldr	r2, [pc, #236]	; (60001c28 <configure_external_ram+0x3a4>)
60001b3a:	lsls	r7, r3, #31
60001b3c:	bpl.n	60001b36 <configure_external_ram+0x2b2>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b3e:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001b40:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b44:	movs	r0, #0
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b46:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b48:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001b4a:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b4e:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b52:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b56:	ldr	r3, [r1, #20]
60001b58:	ldr	r2, [pc, #204]	; (60001c28 <configure_external_ram+0x3a4>)
60001b5a:	lsls	r6, r3, #31
60001b5c:	bpl.n	60001b56 <configure_external_ram+0x2d2>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b5e:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001b60:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b64:	mov.w	r0, #65536	; 0x10000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b68:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b6a:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001b6c:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b70:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b74:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b78:	ldr	r3, [r1, #20]
60001b7a:	ldr	r2, [pc, #172]	; (60001c28 <configure_external_ram+0x3a4>)
60001b7c:	lsls	r5, r3, #31
60001b7e:	bpl.n	60001b78 <configure_external_ram+0x2f4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b80:	movs	r3, #1
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001b82:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b86:	mov.w	r0, #131072	; 0x20000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b8a:	mov	r1, r2
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b8c:	str	r3, [r2, #20]
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001b8e:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b92:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b96:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b9a:	ldr	r3, [r1, #20]
60001b9c:	ldr	r2, [pc, #136]	; (60001c28 <configure_external_ram+0x3a4>)
60001b9e:	lsls	r4, r3, #31
60001ba0:	bpl.n	60001b9a <configure_external_ram+0x316>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001ba2:	movs	r3, #1
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001ba4:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001ba8:	ldr	r0, [pc, #128]	; (60001c2c <configure_external_ram+0x3a8>)
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001baa:	mov	r1, r2
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001bac:	str	r3, [r2, #20]
}

FLASHMEM static uint32_t flexspi2_psram_id(uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001bae:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001bb2:	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001bb6:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001bba:	ldr	r3, [r1, #20]
60001bbc:	ldr	r2, [pc, #104]	; (60001c28 <configure_external_ram+0x3a4>)
60001bbe:	lsls	r0, r3, #31
60001bc0:	bpl.n	60001bba <configure_external_ram+0x336>
	uint32_t id = FLEXSPI2_RFDR0;
60001bc2:	ldr.w	r3, [r2, #256]	; 0x100
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001bc6:	movw	r1, #23821	; 0x5d0d
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001bca:	movs	r0, #33	; 0x21
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001bcc:	uxth	r3, r3
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	uint32_t id = FLEXSPI2_RFDR0;
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001bce:	str	r0, [r2, #20]
		// first PSRAM chip is present, look for a second PSRAM chip
		flexspi2_command(4, 0);
		flexspi2_command(0, 0x800000); // exit quad mode
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001bd0:	cmp	r3, r1
60001bd2:	beq.n	60001bf6 <configure_external_ram+0x372>
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
		} else {
			// One PSRAM chip is present, 8 MByte
			external_psram_size = 8;
60001bd4:	ldr	r3, [pc, #88]	; (60001c30 <configure_external_ram+0x3ac>)
60001bd6:	movs	r2, #8
60001bd8:	mov.w	r4, #8388608	; 0x800000
60001bdc:	strb	r2, [r3, #0]
		}
		// TODO: zero uninitialized EXTMEM variables
		// TODO: copy from flash to initialize EXTMEM variables
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001bde:	ldr	r1, [pc, #84]	; (60001c34 <configure_external_ram+0x3b0>)
60001be0:	movs	r0, #0
60001be2:	ldr	r2, [pc, #84]	; (60001c38 <configure_external_ram+0x3b4>)
60001be4:	movs	r3, #1
60001be6:	str	r0, [sp, #0]
60001be8:	subs	r2, r2, r1
60001bea:	ldr	r0, [pc, #80]	; (60001c3c <configure_external_ram+0x3b8>)
60001bec:	add	r2, r4
60001bee:	bl	60001e50 <__sm_set_pool_veneer>
			1, NULL);
	} else {
		// No PSRAM
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
	}
}
60001bf2:	add	sp, #12
60001bf4:	pop	{r4, r5, r6, r7, pc}
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001bf6:	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001bfa:	mov.w	r1, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001bfe:	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001c00:	mov	r0, r2
#define PINS1           FLEXSPI_LUT_NUM_PADS_1
#define PINS4           FLEXSPI_LUT_NUM_PADS_4

FLASHMEM static void flexspi2_command(uint32_t index, uint32_t addr)
{
	FLEXSPI2_IPCR0 = addr;
60001c02:	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001c06:	str.w	r1, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001c0a:	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001c0e:	ldr	r3, [r0, #20]
60001c10:	ldr	r1, [pc, #20]	; (60001c28 <configure_external_ram+0x3a4>)
60001c12:	lsls	r3, r3, #31
60001c14:	bpl.n	60001c0e <configure_external_ram+0x38a>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001c16:	movs	r0, #1
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
60001c18:	ldr	r3, [pc, #20]	; (60001c30 <configure_external_ram+0x3ac>)
60001c1a:	movs	r2, #16
60001c1c:	mov.w	r4, #16777216	; 0x1000000
{
	FLEXSPI2_IPCR0 = addr;
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001c20:	str	r0, [r1, #20]
		flexspi2_command(1, 0x800000); // reset enable
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
			flexspi2_command(4, 0x800000);
			// Two PSRAM chips are present, 16 MByte
			external_psram_size = 16;
60001c22:	strb	r2, [r3, #0]
60001c24:	b.n	60001bde <configure_external_ram+0x35a>
60001c26:	nop
60001c28:	.word	0x402a4000
60001c2c:	.word	0x00030004
60001c30:	.word	0x2000c7eb
60001c34:	.word	0x70000000
60001c38:	.word	0x70000000
60001c3c:	.word	0x2000c850

60001c40 <usb_pll_start>:

#endif // ARDUINO_TEENSY41


FLASHMEM void usb_pll_start()
{
60001c40:	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001c42:	ldr	r2, [pc, #92]	; (60001ca0 <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001c44:	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001c46:	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001c4a:	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001c4e:	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001c52:	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001c56:	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001c5a:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001c5c:	tst.w	r3, #2
60001c60:	beq.n	60001c70 <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001c62:	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001c64:	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001c66:	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001c68:	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001c6a:	tst.w	r3, #2
60001c6e:	bne.n	60001c62 <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001c70:	tst.w	r3, #8192	; 0x2000
60001c74:	bne.n	60001c7a <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001c76:	str	r5, [r2, #20]
			continue;
60001c78:	b.n	60001c5a <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001c7a:	tst.w	r3, #4096	; 0x1000
60001c7e:	bne.n	60001c84 <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001c80:	str	r6, [r2, #20]
			continue;
60001c82:	b.n	60001c5a <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001c84:	cmp	r3, #0
60001c86:	bge.n	60001c5a <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001c88:	tst.w	r3, #65536	; 0x10000
60001c8c:	beq.n	60001c92 <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001c8e:	str	r1, [r2, #24]
			continue;
60001c90:	b.n	60001c5a <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001c92:	lsls	r3, r3, #25
60001c94:	bmi.n	60001c9a <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001c96:	str	r7, [r2, #20]
			continue;
60001c98:	b.n	60001c5a <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
60001c9a:	pop	{r4, r5, r6, r7}
60001c9c:	bx	lr
60001c9e:	nop
60001ca0:	.word	0x400d8000

60001ca4 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001ca4:	ldr	r2, [pc, #228]	; (60001d8c <tempmon_init+0xe8>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001ca6:	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001ca8:	ldr	r1, [pc, #228]	; (60001d90 <tempmon_init+0xec>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001caa:	vmov.f32	s11, #57	; 0x41c80000  25.0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001cae:	ldr	r3, [r2, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001cb0:	vldr	s12, [pc, #224]	; 60001d94 <tempmon_init+0xf0>
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001cb4:	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001cb8:	vldr	s13, [pc, #220]	; 60001d98 <tempmon_init+0xf4>
  //asm volatile ("dsb":::"memory");
  //while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
60001cbc:	push	{r4, r5, r6, r7}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001cbe:	str	r3, [r2, #0]
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001cc0:	movs	r4, #0
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001cc2:	str	r0, [r2, #16]
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001cc4:	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001cc8:	ldr	r7, [pc, #208]	; (60001d9c <tempmon_init+0xf8>)
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001cca:	uxtb	r0, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001ccc:	ubfx	r1, r3, #8, #12
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001cd0:	lsrs	r3, r3, #20
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001cd2:	ldr	r6, [pc, #204]	; (60001da0 <tempmon_init+0xfc>)
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001cd4:	vmov	s14, r0
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001cd8:	vmov	s10, r1
60001cdc:	vmov	s15, r3
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001ce0:	ldr	r3, [pc, #192]	; (60001da4 <tempmon_init+0x100>)
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001ce2:	vcvt.f32.s32	s10, s10
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001ce6:	ldr	r5, [pc, #192]	; (60001da8 <tempmon_init+0x104>)
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001ce8:	vcvt.f32.s32	s14, s14
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001cec:	str	r0, [r6, #0]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001cee:	vcvt.f32.s32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001cf2:	str	r1, [r5, #0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001cf4:	ldr	r1, [pc, #180]	; (60001dac <tempmon_init+0x108>)
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001cf6:	vsub.f32	s12, s14, s12
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001cfa:	ldr	r6, [pc, #180]	; (60001db0 <tempmon_init+0x10c>)
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001cfc:	vsub.f32	s15, s15, s10
60001d00:	ldr	r0, [pc, #176]	; (60001db4 <tempmon_init+0x110>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d02:	vsub.f32	s13, s14, s13
60001d06:	ldr	r5, [pc, #176]	; (60001db8 <tempmon_init+0x114>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d08:	vsub.f32	s14, s14, s11
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d0c:	vmul.f32	s12, s12, s15
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001d10:	vstr	s15, [r7]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d14:	vmul.f32	s13, s13, s15
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d18:	ldr	r7, [r2, #0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001d1a:	vmul.f32	s15, s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001d1e:	vstr	s14, [r3]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d22:	vdiv.f32	s11, s12, s14
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d26:	vdiv.f32	s12, s13, s14
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001d2a:	vdiv.f32	s13, s15, s14
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d2e:	vadd.f32	s14, s11, s10
60001d32:	vcvt.u32.f32	s15, s14
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d36:	vadd.f32	s14, s12, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d3a:	vmov	r3, s15
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d3e:	vcvt.u32.f32	s14, s14
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d42:	orr.w	r3, r7, r3, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001d46:	vadd.f32	s15, s13, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001d4a:	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d4c:	vmov	r3, s14
60001d50:	ldr.w	r7, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001d54:	vcvt.u32.f32	s15, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d58:	and.w	r1, r1, r3, lsl #16
60001d5c:	orrs	r1, r7
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001d5e:	vmov	r3, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001d62:	str.w	r1, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001d66:	ubfx	r3, r3, #0, #12
60001d6a:	ldr.w	r1, [r2, #272]	; 0x110
60001d6e:	orrs	r3, r1
60001d70:	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001d74:	ldr	r3, [r2, #0]
60001d76:	orr.w	r3, r3, #2
60001d7a:	str	r3, [r2, #0]

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001d7c:	strb	r4, [r6, #0]
60001d7e:	str.w	r5, [r0, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001d82:	ldr	r3, [pc, #56]	; (60001dbc <tempmon_init+0x118>)
60001d84:	movs	r2, #1
}
60001d86:	pop	{r4, r5, r6, r7}
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001d88:	str	r2, [r3, #0]
}
60001d8a:	bx	lr
60001d8c:	.word	0x400d8180
60001d90:	.word	0x401f4400
60001d94:	.word	0x42aa0000
60001d98:	.word	0x42b40000
60001d9c:	.word	0x20009d4c
60001da0:	.word	0x20009d44
60001da4:	.word	0x20009d48
60001da8:	.word	0x20009d40
60001dac:	.word	0x0fff0000
60001db0:	.word	0xe000e440
60001db4:	.word	0x20001800
60001db8:	.word	0x0000380d
60001dbc:	.word	0xe000e108

60001dc0 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001dc0:	ldr	r3, [pc, #68]	; (60001e08 <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001dc2:	ldr	r1, [pc, #72]	; (60001e0c <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001dc4:	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
60001dc6:	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001dc8:	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
60001dcc:	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001dce:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001dd0:	movw	r5, #1591	; 0x637
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001dd4:	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001dd6:	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001dd8:	orr.w	r0, r0, #768	; 0x300
60001ddc:	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001dde:	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001de0:	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
60001de2:	ldr	r3, [r2, #72]	; 0x48
60001de4:	lsls	r3, r3, #24
60001de6:	bmi.n	60001de2 <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001de8:	ldr	r3, [pc, #36]	; (60001e10 <analog_init+0x50>)
60001dea:	movw	r0, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001dee:	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
60001df0:	mov	r2, r3
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001df2:	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001df4:	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
60001df6:	ldr	r3, [r2, #72]	; 0x48
60001df8:	ands.w	r3, r3, #128	; 0x80
60001dfc:	bne.n	60001df6 <analog_init+0x36>
	calibrating = 0;
60001dfe:	ldr	r2, [pc, #20]	; (60001e14 <analog_init+0x54>)
60001e00:	strb	r3, [r2, #0]
}
60001e02:	pop	{r4, r5}
60001e04:	bx	lr
60001e06:	nop
60001e08:	.word	0x400fc000
60001e0c:	.word	0x400c4000
60001e10:	.word	0x400c8000
60001e14:	.word	0x2000c7ea

60001e18 <_init>:
60001e18:	push	{r3, r4, r5, r6, r7, lr}
60001e1a:	nop
60001e1c:	pop	{r3, r4, r5, r6, r7}
60001e1e:	pop	{r3}
60001e20:	mov	lr, r3
60001e22:	bx	lr
60001e24:	movs	r0, r0
	...

60001e28 <__pwm_init_veneer>:
60001e28:	ldr.w	pc, [pc]	; 60001e2c <__pwm_init_veneer+0x4>
60001e2c:	.word	0x000038f1

60001e30 <____libc_init_array_veneer>:
60001e30:	ldr.w	pc, [pc]	; 60001e34 <____libc_init_array_veneer+0x4>
60001e34:	.word	0x00004e41

60001e38 <__set_arm_clock_veneer>:
60001e38:	ldr.w	pc, [pc]	; 60001e3c <__set_arm_clock_veneer+0x4>
60001e3c:	.word	0x00003f39

60001e40 <__usb_init_serialnumber_veneer>:
60001e40:	ldr.w	pc, [pc]	; 60001e44 <__usb_init_serialnumber_veneer+0x4>
60001e44:	.word	0x00003ba9

60001e48 <__main_veneer>:
60001e48:	ldr.w	pc, [pc]	; 60001e4c <__main_veneer+0x4>
60001e4c:	.word	0x00003d81

60001e50 <__sm_set_pool_veneer>:
60001e50:	ldr.w	pc, [pc]	; 60001e54 <__sm_set_pool_veneer+0x4>
60001e54:	.word	0x0000377d

60001e58 <__delay_veneer>:
60001e58:	ldr.w	pc, [pc]	; 60001e5c <__delay_veneer+0x4>
60001e5c:	.word	0x0000340d

60001e60 <__memset_veneer>:
60001e60:	ldr.w	pc, [pc]	; 60001e64 <__memset_veneer+0x4>
60001e64:	.word	0x000054f5

60001e68 <__init_array_start>:
60001e68:	.word	0x00000045
60001e6c:	.word	0x000004f9

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
void usb_config_tx_iso(uint32_t ep, uint32_t packet_size, int mult, void (*cb)(transfer_t *))
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
      20:	.word	0x4c05b510
      24:	ldrb	r3, [r4, #0]
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
      26:	.short	0xb933
      28:	ldr	r3, [pc, #16]	; (3c <__rtc_localtime+0xb>)
void usb_config_tx_iso(uint32_t ep, uint32_t packet_size, int mult, void (*cb)(transfer_t *))
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
      2a:	cbz	r3, 32 <__rtc_localtime+0x1>
      2c:	ldr	r0, [pc, #16]	; (40 <__rtc_localtime+0xf>)
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
      2e:	nop.w
      32:	movs	r3, #1
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
      34:	strb	r3, [r4, #0]
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
      36:	pop	{r4, pc}
      38:	adds	r0, r1, #1
      3a:	movs	r0, #0
      3c:	.word	0x00000000
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
      40:	ldrh	r4, [r2, #50]	; 0x32
	...

00000044 <frame_dummy>:

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
      44:	ldr	r3, [pc, #32]	; (68 <frame_dummy+0x24>)
      46:	push	{r4, lr}
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      48:	cbz	r3, 52 <frame_dummy+0xe>
      4a:	ldr	r1, [pc, #32]	; (6c <frame_dummy+0x28>)
      4c:	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	nop.w
      52:	ldr	r0, [pc, #32]	; (74 <frame_dummy+0x30>)
      54:	ldr	r3, [r0, #0]
      56:	.short	0xb903
      58:	pop	{r4, pc}
      5a:	.short	0x4b07
      5c:	cmp	r3, #0
      5e:	.short	0xd0fb
      60:	ldmia.w	sp!, {r4, lr}
      64:	bx	r3
      66:	.short	0xbf00
      mode |= ADC_CFG_AVGS(2);
      mode1 |= ADC_CFG_AVGS(2);

    } else if (num >= 8) {
      mode |= ADC_CFG_AVGS(1);
      mode1 |= ADC_CFG_AVGS(1);
      68:	movs	r0, r0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      6a:	.short	0x0000
  ADC2_CFG = mode1;
  
  if(num >= 4){
      6c:	adds	r4, r1, #1
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
  ADC2_CFG = mode1;
      6e:	.short	0x2000
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      70:	ldrh	r4, [r2, #50]	; 0x32
  ADC2_CFG = mode1;
      72:	.short	0x0000
  
  if(num >= 4){
      74:	subs	r0, r0, r3
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
      76:	.short	0x2000
      78:	movs	r0, r0
	...

0000007c <setup>:
      7c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      80:	.word	0xb0c348a3
	int bestdiv = 1;
	int bestosr = 4;
	for (int osr=4; osr <= 32; osr++) {
		float div = base / (float)osr;
		int divint = (int)(div + 0.5f);
		if (divint < 1) divint = 1;
      84:	ldr	r5, [pc, #652]	; (314 <setup+0x298>)
      86:	ldr	r4, [pc, #656]	; (318 <setup+0x29c>)
			bestdiv = divint;
			bestosr = osr;
		}
	}
	//printf(" baud %d: osr=%d, div=%d\n", baud, bestosr, bestdiv);
	rx_buffer_head_ = 0;
      88:	.word	0x782b49a4
	rx_buffer_tail_ = 0;
	tx_buffer_head_ = 0;
	tx_buffer_tail_ = 0;
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
      8c:	cmp	r3, #0
      8e:	beq.n	8a <setup+0xe>
      90:	.word	0x07db7823
      94:	bpl.n	8a <setup+0xe>
      96:	.short	0x6803
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
      98:	ldr	r2, [r1, #0]
      9a:	.short	0x1a9b
	hardware->ccm_register |= hardware->ccm_value;

//	uint32_t fastio = IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);

	// Maybe different pin configs if half duplex
	half_duplex_mode_ = (format & SERIAL_HALF_DUPLEX) != 0;
      9c:	cmp	r3, #14
			bestdiv = divint;
			bestosr = osr;
		}
	}
	//printf(" baud %d: osr=%d, div=%d\n", baud, bestosr, bestdiv);
	rx_buffer_head_ = 0;
      9e:	.short	0xd9f4
      a0:	movs	r1, #11
	rx_buffer_tail_ = 0;
	tx_buffer_head_ = 0;
	tx_buffer_tail_ = 0;
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
      a2:	.short	0x489f
      a4:	bl	29f8 <usb_serial_write>
			bestosr = osr;
		}
	}
	//printf(" baud %d: osr=%d, div=%d\n", baud, bestosr, bestdiv);
	rx_buffer_head_ = 0;
	rx_buffer_tail_ = 0;
      a8:	.word	0xf003489e
	hardware->ccm_register |= hardware->ccm_value;

//	uint32_t fastio = IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);

	// Maybe different pin configs if half duplex
	half_duplex_mode_ = (format & SERIAL_HALF_DUPLEX) != 0;
      ac:	mcr2	8, 6, r4, cr15, cr14, {4}
		}
	}
	//printf(" baud %d: osr=%d, div=%d\n", baud, bestosr, bestdiv);
	rx_buffer_head_ = 0;
	rx_buffer_tail_ = 0;
	tx_buffer_head_ = 0;
      b0:	.word	0xfbb4f000
	hardware->ccm_register |= hardware->ccm_value;

//	uint32_t fastio = IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);

	// Maybe different pin configs if half duplex
	half_duplex_mode_ = (format & SERIAL_HALF_DUPLEX) != 0;
      b4:	bl	7f8 <year()>
	}
	//printf(" baud %d: osr=%d, div=%d\n", baud, bestosr, bestdiv);
	rx_buffer_head_ = 0;
	rx_buffer_tail_ = 0;
	tx_buffer_head_ = 0;
	tx_buffer_tail_ = 0;
      b8:	.word	0xf0004605
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;

	transmitting_ = 0;
      bc:	smull	r4, r6, sp, r7

	hardware->ccm_register |= hardware->ccm_value;
      c0:	bl	7b8 <day()>
      c4:	mov	r8, r0
      c6:	bl	758 <hour()>
	//printf(" baud %d: osr=%d, div=%d\n", baud, bestosr, bestdiv);
	rx_buffer_head_ = 0;
	rx_buffer_tail_ = 0;
	tx_buffer_head_ = 0;
	tx_buffer_tail_ = 0;
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
      ca:	.short	0x4604
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;

	transmitting_ = 0;

	hardware->ccm_register |= hardware->ccm_value;
      cc:	bl	778 <minute()>
	rx_buffer_head_ = 0;
	rx_buffer_tail_ = 0;
	tx_buffer_head_ = 0;
	tx_buffer_tail_ = 0;
	rts_low_watermark_ = rx_buffer_total_size_ - hardware->rts_low_watermark;
	rts_high_watermark_ = rx_buffer_total_size_ - hardware->rts_high_watermark;
      d0:	.word	0xf0004606
      d4:			; <UNDEFINED> instruction: 0xfb61463b

	transmitting_ = 0;

	hardware->ccm_register |= hardware->ccm_value;
      d8:	str	r0, [sp, #12]

//	uint32_t fastio = IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);

	// Maybe different pin configs if half duplex
	half_duplex_mode_ = (format & SERIAL_HALF_DUPLEX) != 0;
      da:	.short	0x462a
      dc:	ldr	r1, [pc, #588]	; (32c <setup+0x2b0>)
	if (!half_duplex_mode_)  {
      de:	str.w	r8, [sp]
		*(portControlRegister(hardware->rx_pins[rx_pin_index_].pin)) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
      e2:	str	r6, [sp, #8]
      e4:	str	r4, [sp, #4]
      e6:	ldr	r0, [pc, #572]	; (324 <setup+0x2a8>)
      e8:	bl	3e7c <Print::printf(char const*, ...)>
      ec:	.word	0x48902143
      f0:	bl	29f8 <usb_serial_write>
      f4:	.word	0xf003488b
		*(portConfigRegister(hardware->rx_pins[rx_pin_index_].pin)) = hardware->rx_pins[rx_pin_index_].mux_val;
      f8:	cdp2	0, 10, cr15, cr9, cr2, {0}
      fc:	.word	0x2800fc17
     100:	beq.n	fa <setup+0x7e>
     102:	.short	0x4888
     104:	bl	3e44 <Stream::parseInt()>
     108:	mov	r4, r0
     10a:	cbnz	r0, 150 <setup+0xd4>
     10c:	bl	2a60 <usb_serial_flush_output>
     110:	mov	r1, r4
		if (hardware->rx_pins[rx_pin_index_].select_input_register) {
     112:	ldr	r3, [pc, #544]	; (334 <setup+0x2b8>)
     114:	movs	r2, #10
		 	*(hardware->rx_pins[rx_pin_index_].select_input_register) =  hardware->rx_pins[rx_pin_index_].select_val;		
     116:	ldr	r0, [pc, #544]	; (338 <setup+0x2bc>)
     118:	bl	880 <zeroFS_class::Init(unsigned char, unsigned char, char const*)>
		}	

		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
     11c:	.word	0x4887210b
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
	} else {
		// Half duplex maybe different pin pad config like PU...		
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
     120:	bl	29f8 <usb_serial_write>
     124:	ldr	r0, [pc, #508]	; (324 <setup+0x2a8>)
     126:	bl	3e4c <Print::println()>
     12a:	ldr	r0, [pc, #524]	; (338 <setup+0x2bc>)
				| IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3);
     12c:	bl	dcc <zeroFS_class::findEOF()>
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
     130:	ldr	r0, [pc, #516]	; (338 <setup+0x2bc>)
     132:	.short	0xf000
     134:	cdp2	1, 8, cr2, cr3, cr8, {0}
     138:	ldr	r0, [pc, #516]	; (340 <setup+0x2c4>)
     13a:	bl	29f8 <usb_serial_write>
     13e:	ldr	r0, [pc, #484]	; (324 <setup+0x2a8>)
     140:	.word	0xfe84f003
     144:	ldr	r0, [pc, #496]	; (338 <setup+0x2bc>)
     146:	bl	be8 <zeroFS_class::ListAll()>
	}
	if (hardware->tx_pins[tx_pin_index_].select_input_register) {
     14a:	add	sp, #268	; 0x10c
	 	*(hardware->tx_pins[tx_pin_index_].select_input_register) =  hardware->tx_pins[tx_pin_index_].select_val;		
     14c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}	
	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
     150:	movs	r1, #74	; 0x4a


#ifdef __cplusplus
extern "C" void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
     152:	ldr	r0, [pc, #496]	; (344 <setup+0x2c8>)
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
	port->PINCFG = 0;

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
     154:	bl	29f8 <usb_serial_write>
	 	*(hardware->tx_pins[tx_pin_index_].select_input_register) =  hardware->tx_pins[tx_pin_index_].select_val;		
	}	
	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
     158:	ldr	r0, [pc, #456]	; (324 <setup+0x2a8>)
     15a:	bl	3e4c <Print::println()>
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
	port->PINCFG = 0;
     15e:	bl	292c <usb_serial_available>
	}	
	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
     162:	.short	0x2800
     164:	beq.n	15e <setup+0xe2>
     166:	ldr	r0, [pc, #444]	; (324 <setup+0x2a8>)
     168:	.word	0xfe6cf003
	 	*(hardware->tx_pins[tx_pin_index_].select_input_register) =  hardware->tx_pins[tx_pin_index_].select_val;		
	}	
	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
     16c:	mov	r9, r0
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
     16e:	.short	0xf002
     170:	ldc2l	11, cr4, [r7], #-448	; 0xfffffe40
	 	*(hardware->tx_pins[tx_pin_index_].select_input_register) =  hardware->tx_pins[tx_pin_index_].select_val;		
	}	
	//hardware->rx_mux_register = hardware->rx_mux_val;
	//hardware->tx_mux_register = hardware->tx_mux_val;

	port->BAUD = LPUART_BAUD_OSR(bestosr - 1) | LPUART_BAUD_SBR(bestdiv)
     174:	.word	0x2100220a
		| (bestosr <= 8 ? LPUART_BAUD_BOTHEDGE : 0);
     178:	ldr	r0, [pc, #444]	; (338 <setup+0x2bc>)
     17a:	.short	0xf000
     17c:	smull	r2, r1, r1, fp
     180:	.word	0xf002486e
	port->PINCFG = 0;

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
     184:	ldc2	8, cr4, [r9], #-412	; 0xfffffe64
     188:	.word	0xfe60f003
     18c:	cmp	r4, #1
     18e:	beq.w	378 <setup+0x2fc>
     192:	.short	0x2c02
	NVIC_ENABLE_IRQ(hardware->irq);
     194:	bne.n	12a <setup+0xae>
	uint16_t tx_fifo_size = (((port->FIFO >> 4) & 0x7) << 2);
     196:	.short	0x2700
	port->PINCFG = 0;

	// Enable the transmitter, receiver and enable receiver interrupt
	attachInterruptVector(hardware->irq, hardware->irq_handler);
	NVIC_SET_PRIORITY(hardware->irq, hardware->irq_priority);	// maybe should put into hardware...
	NVIC_ENABLE_IRQ(hardware->irq);
     198:	mov	r2, r9
     19a:	.short	0x4867
     19c:	mov.w	r5, #4294967295
     1a0:	.word	0x4639463b
     1a4:	ldr.w	r8, [pc, #424]	; 350 <setup+0x2d4>
	uint16_t tx_fifo_size = (((port->FIFO >> 4) & 0x7) << 2);
     1a8:	.word	0x9704463c
     1ac:	add.w	sl, sp, #184	; 0xb8
	uint8_t tx_water = (tx_fifo_size < 16) ? tx_fifo_size >> 1 : 7;
     1b0:	.word	0xf0004e65
     1b4:	ldc2	0, cr15, [r1]
     1b8:	.word	0x4b64faef
	uint16_t rx_fifo_size = (((port->FIFO >> 0) & 0x7) << 2);
     1bc:	ldrsh.w	r2, [r8]
     1c0:	smull	r1, r3, r3, r0
	uint8_t rx_water = (rx_fifo_size < 16) ? rx_fifo_size >> 1 : 7;
     1c4:	.word	0xebc017c0
     1c8:	lsls	r3, r4, #15
     1ca:	.short	0xb21b
	/*
	Serial.printf("SerialX::begin stat:%x ctrl:%x fifo:%x water:%x\n", port->STAT, port->CTRL, port->FIFO, port->WATER );
	Serial.printf("  FIFO sizes: tx:%d rx:%d\n",tx_fifo_size, rx_fifo_size);	
	Serial.printf("  Watermark tx:%d, rx: %d\n", tx_water, rx_water);
	*/
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
     1cc:	cmp	r2, r3
	// lets configure up our CTRL register value
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
     1ce:	beq.w	494 <setup+0x418>
	/*
	Serial.printf("SerialX::begin stat:%x ctrl:%x fifo:%x water:%x\n", port->STAT, port->CTRL, port->FIFO, port->WATER );
	Serial.printf("  FIFO sizes: tx:%d rx:%d\n",tx_fifo_size, rx_fifo_size);	
	Serial.printf("  Watermark tx:%d, rx: %d\n", tx_water, rx_water);
	*/
	port->WATER = LPUART_WATER_RXWATER(rx_water) | LPUART_WATER_TXWATER(tx_water);
     1d2:	.short	0x495f
	port->FIFO |= LPUART_FIFO_TXFE | LPUART_FIFO_RXFE;
     1d4:	ldrh	r2, [r6, #0]
     1d6:	.short	0x800b
     1d8:	cmp	r2, #0
     1da:	.short	0xf040
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
     1dc:	strh	r5, [r3, #10]
     1de:	.short	0xf000
	// lets configure up our CTRL register value
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
     1e0:			; <UNDEFINED> instruction: 0xfaeb4b5c
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
	if ((format & 0x0F) == 0x04) ctrl |=  LPUART_CTRL_R9T8; // 8N2 is 9 bit with 9th bit always 1
     1e4:	.word	0x4a5bb200
     1e8:	ldrsh.w	r3, [r3]
     1ec:	cmp	r3, r0
     1ee:	.short	0xd026
     1f0:	ldr	r3, [pc, #356]	; (358 <setup+0x2dc>)

	// Bit 5 TXINVERT
	if (format & 0x20) ctrl |= LPUART_CTRL_TXINV;		// tx invert
     1f2:	.short	0x8010
     1f4:	ldrh	r3, [r3, #0]
     1f6:	.short	0x2b00
     1f8:	bne.w	4c4 <setup+0x448>

	// Now see if the user asked for Half duplex:
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);
     1fc:	.word	0xfafcf000
	// write out computed CTRL
	port->CTRL = ctrl;

	// Bit 3 10 bit - Will assume that begin already cleared it.
	// process some other bits which change other registers.
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
     200:	mov	r5, r0

	// Now see if the user asked for Half duplex:
	if (half_duplex_mode_) ctrl |= (LPUART_CTRL_LOOPS | LPUART_CTRL_RSRC);

	// write out computed CTRL
	port->CTRL = ctrl;
     202:	.short	0xf000

	// Bit 3 10 bit - Will assume that begin already cleared it.
	// process some other bits which change other registers.
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;
     204:			; <UNDEFINED> instruction: 0xfae94604
     208:	bl	7b8 <day()>
     20c:	.word	0x4623462a

	// Bit 4 RXINVERT 
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
     210:	ldr	r1, [pc, #328]	; (35c <setup+0x2e0>)
	// Bit 3 10 bit - Will assume that begin already cleared it.
	// process some other bits which change other registers.
	if (format & 0x08) 	port->BAUD |= LPUART_BAUD_M10;

	// Bit 4 RXINVERT 
	uint32_t c = port->STAT & ~LPUART_STAT_RXINV;
     212:	.short	0x9000
     214:	mov	r0, sl
	if (format & 0x10) c |= LPUART_STAT_RXINV;		// rx invert
     216:	.short	0xf005
     218:			; <UNDEFINED> instruction: 0xfbc14650
	port->STAT = c;
     21c:	.word	0xfc70f005

	// bit 8 can turn on 2 stop bit mote
	if ( format & 0x100) port->BAUD |= LPUART_BAUD_SBNS;	
     220:	mov	r1, r0
     222:	.short	0x4650
     224:	bl	29f8 <usb_serial_write>
     228:	ldr	r0, [pc, #248]	; (324 <setup+0x2a8>)

	//Serial.printf("    stat:%x ctrl:%x fifo:%x water:%x\n", port->STAT, port->CTRL, port->FIFO, port->WATER );
	// Only if the user implemented their own...
	if (!(*hardware->serial_event_handler_default)) addToSerialEventsList(); 		// Enable the processing of serialEvent for this object
     22a:	.short	0xf003
     22c:	mcr2	6, 0, r4, cr15, cr2, {2}
	//digitalWrite(4, LOW);
}


void HardwareSerial::addToSerialEventsList() {
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
     230:	.word	0x48412101
     234:	bl	954 <zeroFS_class::Create(HDR_TYPE, char const*)>
		if (s_serials_with_serial_events[i] == this) return; // already in the list.
     238:	.word	0x4a472301
     23c:	strh	r3, [r2, #0]
     23e:	.short	0xf000
     240:			; <UNDEFINED> instruction: 0xfa8b4b47
     244:	sxth	r0, r0
     246:	ldr	r2, [pc, #280]	; (360 <setup+0x2e4>)
     248:	ldrsh.w	r3, [r3]
     24c:	cmp	r3, r0
     24e:	beq.n	28e <setup+0x212>
     250:	.word	0x80104b44
	//digitalWrite(4, LOW);
}


void HardwareSerial::addToSerialEventsList() {
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
     254:	ldrh	r3, [r3, #0]
     256:	.short	0x2b00
     258:	bne.w	4ba <setup+0x43e>
		if (s_serials_with_serial_events[i] == this) return; // already in the list.
	}
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
     25c:	.word	0xfa7cf000
     260:	ldr	r1, [pc, #260]	; (368 <setup+0x2ec>)
     262:	mov	r2, r0
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
     264:	.word	0xf0054650
     268:			; <UNDEFINED> instruction: 0xfb994650
     26c:	.word	0xfc48f005
     270:	mov	r1, r0
     272:	.short	0x4650
     274:	bl	29f8 <usb_serial_write>
	uint32_t ctrl = CTRL_TX_INACTIVE;

	// Now process the bits in the Format value passed in
	// Bits 0-2 - Parity plus 9  bit. 
	ctrl |= (format & (LPUART_CTRL_PT | LPUART_CTRL_PE) );	// configure parity - turn off PT, PE, M and configure PT, PE
	if (format & 0x04) ctrl |= LPUART_CTRL_M;		// 9 bits (might include parity)
     278:	.word	0xf003482a
     27c:	stc2l	6, cr4, [r7, #328]!	; 0x148
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
	} else {
		// Half duplex maybe different pin pad config like PU...		
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
				| IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3);
     280:	movs	r1, #2
     282:	.short	0x482d

		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
		*(portConfigRegister(hardware->tx_pins[tx_pin_index_].pin)) = hardware->tx_pins[tx_pin_index_].mux_val;
	} else {
		// Half duplex maybe different pin pad config like PU...		
		*(portControlRegister(hardware->tx_pins[tx_pin_index_].pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3) 
     284:	bl	954 <zeroFS_class::Create(HDR_TYPE, char const*)>
     288:	.word	0x4a362301
     28c:	strh	r3, [r2, #0]
     28e:	.short	0xf000
	//digitalWrite(4, LOW);
}


void HardwareSerial::addToSerialEventsList() {
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
     290:			; <UNDEFINED> instruction: 0xfa634605
     294:	.word	0xfa70f000
     298:	mov	r4, r0
     29a:	.short	0xf000
     29c:			; <UNDEFINED> instruction: 0xfa7d462a
     2a0:	.word	0x49324623
     2a4:	str	r0, [sp, #0]
     2a6:	.short	0x4650
     2a8:	bl	599c <sprintf>
     2ac:	.word	0xf0054650
     2b0:	stc2	6, cr4, [r7], #-4
     2b4:	.word	0x27204650
     2b8:	bl	29f8 <usb_serial_write>
     2bc:	.word	0xf0032400
     2c0:	vst1.16	{d4-d6}, [fp :64], r2
        }
        // new file
        char filename[80];
        sprintf(filename,"File_%02d%02d%02d.dat",hour(),minute(),second());
        Serial.print(filename);
        t0 = micros();
     2c4:	.word	0x21039004
        zFS.Create(T_FILE,filename);
     2c8:	ldr	r0, [pc, #108]	; (338 <setup+0x2bc>)
        open3=1;

        tmn=0xFFFFFFFF;
     2ca:	.short	0xf04f
     2cc:	adds	r5, #255	; 0xff
        // new file
        char filename[80];
        sprintf(filename,"File_%02d%02d%02d.dat",hour(),minute(),second());
        Serial.print(filename);
        t0 = micros();
        zFS.Create(T_FILE,filename);
     2ce:	bl	954 <zeroFS_class::Create(HDR_TYPE, char const*)>
        open3=1;
     2d2:	.short	0x2301
     2d4:	strh	r3, [r6, #0]
     2d6:	ldr	r3, [pc, #152]	; (370 <setup+0x2f4>)
        tmn=0xFFFFFFFF;
        tmx=0;
        nsect=0;
      }
      
      for(int nn=0; nn<NDAT; nn++) data[nn]=(nn)%256;
     2d8:	.word	0x0900f04f
     2dc:	strb.w	r9, [r3, #1]!
     2e0:	add.w	r9, r9, #1
     2e4:	.word	0x4f00f5b9
     2e8:	bne.n	2dc <setup+0x260>
      uint32_t tx = micros();
     2ea:	.short	0xf003
     2ec:	ldr??.w	r4, [r5, #1667]	; 0x683
      zFS.Write((void *)data,NDAT);
     2f0:	mov	r2, r9
     2f2:	.short	0x4920
     2f4:	ldr	r0, [pc, #64]	; (338 <setup+0x2bc>)
     2f6:	.short	0xf000
     2f8:	mrrc2	0, 0, pc, r9, cr3	; <UNPREDICTABLE>
      tx=micros()-tx;
     2fc:	.word	0xebcbf8ed
     300:	movs	r0, r0
     302:	.short	0x4284
     304:	it	cc
     306:	.short	0x4604
     308:	cmp	r5, r0
     30a:	it	cs	; unpredictable <IT:cc>
     30c:	movcs	r5, r0
    //
      uint32_t t0=0,t3=0;
      uint32_t tmn=0xFFFFFFFF,tmx=0;
      uint32_t nsect=0;

    while(1)
     30e:	b.n	1b6 <setup+0x13a>
     310:	ldr	r5, [sp, #352]	; 0x160
     312:	.short	0x2000
     314:	stmia	r7!, {r0, r1, r4, r5, r6, r7}
     316:	.short	0x2000
     318:	stmia	r7!, {r1, r4, r5, r6, r7}
     31a:	.short	0x2000
     31c:	ldmia	r0!, {r3, r6}
     31e:	.short	0x2000
     320:	lsrs	r4, r6, #12
     322:	.short	0x2000
     324:	asrs	r0, r3, #8
     326:	.short	0x2000
     328:	adds	r6, #253	; 0xfd
     32a:	.short	0x0000
     32c:	lsrs	r0, r0, #13
     32e:	.short	0x2000
     330:	lsrs	r0, r5, #13
     332:	.short	0x2000
     334:	lsrs	r4, r2, #10
     336:	movs	r0, #0
     338:	.word	0x20009d64
     33c:	lsrs	r4, r3, #10
     33e:	.short	0x2000
     340:	lsrs	r0, r5, #12
     342:	.short	0x2000
     344:	lsrs	r0, r1, #9
     346:	.short	0x2000
     348:	stmia	r7!, {r3, r4, r6, r7}
     34a:	.short	0x2000
     34c:	str	r7, [r4, #100]	; 0x64
     34e:	.short	0x6666
     350:	asrs	r4, r3, #31
     352:	.short	0x2000
     354:	asrs	r2, r3, #31
     356:	.short	0x2000
     358:	stmia	r7!, {r2, r4, r6, r7}
     35a:	.short	0x2000
     35c:	lsrs	r0, r1, #12
     35e:	.short	0x2000
     360:	asrs	r6, r3, #31
     362:	.short	0x2000
     364:	stmia	r7!, {r1, r2, r4, r6, r7}
     366:	movs	r0, #0
     368:	.word	0x20000b1c
     36c:	lsrs	r4, r0, #11
     36e:	.short	0x2000
     370:	.word	0x20001cf3
     374:	.word	0x20001cf4
  Serial.println("Initialized"); //while(1);

  if(mode==1)
  {
    //
    zFS.Create(T_ROOT,flag);  // 0 starts from beginning
     378:	movs	r3, #0
     37a:	mov	r2, r9
     37c:	ldr	r0, [pc, #336]	; (4d0 <setup+0x454>)
     37e:	add.w	sl, sp, #184	; 0xb8
     382:	mov	r1, r3
    for(int i1=0; i1<5; i1++)
     384:	mov	r4, r3
  Serial.println("Initialized"); //while(1);

  if(mode==1)
  {
    //
    zFS.Create(T_ROOT,flag);  // 0 starts from beginning
     386:	bl	cd8 <zeroFS_class::Create(HDR_TYPE, unsigned long, int)>
    for(int i1=0; i1<5; i1++)
    { char trialname[80];
      sprintf(trialname,"Day_%02d",i1);
     38a:	mov	r2, r4
     38c:	ldr	r1, [pc, #324]	; (4d4 <setup+0x458>)
     38e:	add	r0, sp, #24
      zFS.Create(T_DAY, trialname);
      
      for(int i2=0; i2<5; i2++)
     390:	movs	r5, #0
  {
    //
    zFS.Create(T_ROOT,flag);  // 0 starts from beginning
    for(int i1=0; i1<5; i1++)
    { char trialname[80];
      sprintf(trialname,"Day_%02d",i1);
     392:	bl	599c <sprintf>
      zFS.Create(T_DAY, trialname);
     396:	add	r2, sp, #24
     398:	movs	r1, #1
     39a:	ldr	r0, [pc, #308]	; (4d0 <setup+0x454>)
     39c:	bl	954 <zeroFS_class::Create(HDR_TYPE, char const*)>
      
      for(int i2=0; i2<5; i2++)
      {  char dayname[80];
        sprintf(dayname,"Hour_%02d%02d",i1,i2);
     3a0:	mov	r2, r4
     3a2:	ldr	r1, [pc, #308]	; (4d8 <setup+0x45c>)
     3a4:	mov	r3, r5
     3a6:	add	r0, sp, #104	; 0x68
     3a8:	bl	599c <sprintf>
        zFS.Create(T_HOUR,dayname);
     3ac:	add	r2, sp, #104	; 0x68
     3ae:	movs	r1, #2
     3b0:	ldr	r0, [pc, #284]	; (4d0 <setup+0x454>)
          
        for(int i3=0; i3<5; i3++)
     3b2:	movs	r7, #0
      zFS.Create(T_DAY, trialname);
      
      for(int i2=0; i2<5; i2++)
      {  char dayname[80];
        sprintf(dayname,"Hour_%02d%02d",i1,i2);
        zFS.Create(T_HOUR,dayname);
     3b4:	bl	954 <zeroFS_class::Create(HDR_TYPE, char const*)>
          
        for(int i3=0; i3<5; i3++)
        {  char filename[80];
            sprintf(filename,"File_%02d%02d%02d.dat",i1,i2,i3);
     3b8:	mov	r3, r5
     3ba:	mov	r2, r4
     3bc:	ldr	r1, [pc, #284]	; (4dc <setup+0x460>)
     3be:	mov	r0, sl
     3c0:	str	r7, [sp, #0]
            Serial.print(filename);
            uint32_t t0 = micros();
            zFS.Create(T_FILE,filename);
            uint32_t t1 = micros();
            uint32_t tmn=0xFFFFFFFF,tmx=0;
            for(int ii=0;ii<10;ii++)
     3c2:	movs	r6, #0
        sprintf(dayname,"Hour_%02d%02d",i1,i2);
        zFS.Create(T_HOUR,dayname);
          
        for(int i3=0; i3<5; i3++)
        {  char filename[80];
            sprintf(filename,"File_%02d%02d%02d.dat",i1,i2,i3);
     3c4:	bl	599c <sprintf>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     3c8:	mov	r0, sl
     3ca:	bl	5b00 <strlen>
            Serial.print(filename);
            uint32_t t0 = micros();
            zFS.Create(T_FILE,filename);
            uint32_t t1 = micros();
            uint32_t tmn=0xFFFFFFFF,tmx=0;
     3ce:	mov	r9, r6
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     3d0:	mov	r1, r0
     3d2:	mov.w	r8, #4294967295
     3d6:	mov	r0, sl
     3d8:	bl	29f8 <usb_serial_write>
          
        for(int i3=0; i3<5; i3++)
        {  char filename[80];
            sprintf(filename,"File_%02d%02d%02d.dat",i1,i2,i3);
            Serial.print(filename);
            uint32_t t0 = micros();
     3dc:	bl	34d8 <micros>
            zFS.Create(T_FILE,filename);
     3e0:	mov	r2, sl
     3e2:	movs	r1, #3
          
        for(int i3=0; i3<5; i3++)
        {  char filename[80];
            sprintf(filename,"File_%02d%02d%02d.dat",i1,i2,i3);
            Serial.print(filename);
            uint32_t t0 = micros();
     3e4:	mov	fp, r0
            zFS.Create(T_FILE,filename);
     3e6:	ldr	r0, [pc, #232]	; (4d0 <setup+0x454>)
     3e8:	bl	954 <zeroFS_class::Create(HDR_TYPE, char const*)>
            uint32_t t1 = micros();
     3ec:	bl	34d8 <micros>
     3f0:	str	r0, [sp, #16]
     3f2:	ldr	r3, [pc, #236]	; (4e0 <setup+0x464>)
     3f4:	uxtb	r2, r6
     3f6:	add.w	r0, r3, #32768	; 0x8000
            uint32_t tmn=0xFFFFFFFF,tmx=0;
            for(int ii=0;ii<10;ii++)
            {  for(int nn=0; nn<NDAT; nn++) data[nn]=(ii+nn)%256;
     3fa:	strb.w	r2, [r3, #1]!
     3fe:	adds	r1, r2, #1
     400:	cmp	r0, r3
     402:	uxtb	r2, r1
     404:	bne.n	3fa <setup+0x37e>
              uint32_t tx = micros();
     406:	bl	34d8 <micros>
              zFS.Write((void *)data,NDAT);
     40a:	mov.w	r2, #32768	; 0x8000
            zFS.Create(T_FILE,filename);
            uint32_t t1 = micros();
            uint32_t tmn=0xFFFFFFFF,tmx=0;
            for(int ii=0;ii<10;ii++)
            {  for(int nn=0; nn<NDAT; nn++) data[nn]=(ii+nn)%256;
              uint32_t tx = micros();
     40e:	str	r0, [sp, #20]
            Serial.print(filename);
            uint32_t t0 = micros();
            zFS.Create(T_FILE,filename);
            uint32_t t1 = micros();
            uint32_t tmn=0xFFFFFFFF,tmx=0;
            for(int ii=0;ii<10;ii++)
     410:	adds	r6, #1
            {  for(int nn=0; nn<NDAT; nn++) data[nn]=(ii+nn)%256;
              uint32_t tx = micros();
              zFS.Write((void *)data,NDAT);
     412:	ldr	r1, [pc, #208]	; (4e4 <setup+0x468>)
     414:	ldr	r0, [pc, #184]	; (4d0 <setup+0x454>)
     416:	bl	bac <zeroFS_class::Write(void*, unsigned long)>
              tx=micros()-tx;
     41a:	bl	34d8 <micros>
     41e:	ldr	r3, [sp, #20]
     420:	subs	r0, r0, r3
     422:	cmp	r9, r0
     424:	it	cc
     426:	movcc	r9, r0
     428:	cmp	r8, r0
     42a:	it	cs
     42c:	movcs	r8, r0
            Serial.print(filename);
            uint32_t t0 = micros();
            zFS.Create(T_FILE,filename);
            uint32_t t1 = micros();
            uint32_t tmn=0xFFFFFFFF,tmx=0;
            for(int ii=0;ii<10;ii++)
     42e:	cmp	r6, #10
     430:	bne.n	3f2 <setup+0x376>
              zFS.Write((void *)data,NDAT);
              tx=micros()-tx;
              if(tx>tmx) tmx=tx;
              if(tx<tmn) tmn=tx;
            }
            uint32_t t2 = micros();
     432:	bl	34d8 <micros>
     436:	mov	r6, r0
            zFS.Close(T_FILE);
     438:	movs	r1, #3
     43a:	ldr	r0, [pc, #148]	; (4d0 <setup+0x454>)
     43c:	bl	b24 <zeroFS_class::Close(HDR_TYPE)>
      for(int i2=0; i2<5; i2++)
      {  char dayname[80];
        sprintf(dayname,"Hour_%02d%02d",i1,i2);
        zFS.Create(T_HOUR,dayname);
          
        for(int i3=0; i3<5; i3++)
     440:	adds	r7, #1
              if(tx>tmx) tmx=tx;
              if(tx<tmn) tmn=tx;
            }
            uint32_t t2 = micros();
            zFS.Close(T_FILE);
            uint32_t t3 = micros();
     442:	bl	34d8 <micros>
            Serial.printf(" %7d %7d %7d %7d %7d\n",(t1-t0),tmn,tmx,(t3-t2),(t3-t0));
     446:	ldr	r2, [sp, #16]
     448:	subs	r6, r0, r6
     44a:	rsb	r0, fp, r0
     44e:	str.w	r9, [sp]
     452:	mov	r3, r8
     454:	str	r0, [sp, #8]
     456:	rsb	r2, fp, r2
     45a:	ldr	r1, [pc, #140]	; (4e8 <setup+0x46c>)
     45c:	str	r6, [sp, #4]
     45e:	ldr	r0, [pc, #140]	; (4ec <setup+0x470>)
     460:	bl	3e7c <Print::printf(char const*, ...)>
      for(int i2=0; i2<5; i2++)
      {  char dayname[80];
        sprintf(dayname,"Hour_%02d%02d",i1,i2);
        zFS.Create(T_HOUR,dayname);
          
        for(int i3=0; i3<5; i3++)
     464:	cmp	r7, #5
     466:	bne.n	3b8 <setup+0x33c>
    for(int i1=0; i1<5; i1++)
    { char trialname[80];
      sprintf(trialname,"Day_%02d",i1);
      zFS.Create(T_DAY, trialname);
      
      for(int i2=0; i2<5; i2++)
     468:	adds	r5, #1
            uint32_t t2 = micros();
            zFS.Close(T_FILE);
            uint32_t t3 = micros();
            Serial.printf(" %7d %7d %7d %7d %7d\n",(t1-t0),tmn,tmx,(t3-t2),(t3-t0));
        }
        zFS.Close(T_HOUR);
     46a:	movs	r1, #2
     46c:	ldr	r0, [pc, #96]	; (4d0 <setup+0x454>)
     46e:	bl	b24 <zeroFS_class::Close(HDR_TYPE)>
    for(int i1=0; i1<5; i1++)
    { char trialname[80];
      sprintf(trialname,"Day_%02d",i1);
      zFS.Create(T_DAY, trialname);
      
      for(int i2=0; i2<5; i2++)
     472:	cmp	r5, #5
     474:	bne.n	3a0 <setup+0x324>

  if(mode==1)
  {
    //
    zFS.Create(T_ROOT,flag);  // 0 starts from beginning
    for(int i1=0; i1<5; i1++)
     476:	adds	r4, #1
            uint32_t t3 = micros();
            Serial.printf(" %7d %7d %7d %7d %7d\n",(t1-t0),tmn,tmx,(t3-t2),(t3-t0));
        }
        zFS.Close(T_HOUR);
      }
      zFS.Close(T_DAY);
     478:	movs	r1, #1
     47a:	ldr	r0, [pc, #84]	; (4d0 <setup+0x454>)
     47c:	bl	b24 <zeroFS_class::Close(HDR_TYPE)>

  if(mode==1)
  {
    //
    zFS.Create(T_ROOT,flag);  // 0 starts from beginning
    for(int i1=0; i1<5; i1++)
     480:	cmp	r4, #5
     482:	bne.n	38a <setup+0x30e>
        }
        zFS.Close(T_HOUR);
      }
      zFS.Close(T_DAY);
    }
    zFS.Close(T_ROOT);
     484:	movs	r1, #0
     486:	ldr	r0, [pc, #72]	; (4d0 <setup+0x454>)
     488:	bl	b24 <zeroFS_class::Close(HDR_TYPE)>

    zFS.findEOF();
     48c:	ldr	r0, [pc, #64]	; (4d0 <setup+0x454>)
     48e:	bl	dcc <zeroFS_class::findEOF()>
     492:	b.n	12a <setup+0xae>
     494:	adds	r7, #32
     496:	b.n	2d6 <setup+0x25a>
    { 
      if(newFile())
      {
        if(open3) 
        { 
          zFS.Close(T_FILE);
     498:	movs	r1, #3
     49a:	ldr	r0, [pc, #52]	; (4d0 <setup+0x454>)
     49c:	bl	b24 <zeroFS_class::Close(HDR_TYPE)>
          t3=micros();
     4a0:	bl	34d8 <micros>
          Serial.printf(" %7d %7d %7d %10d\n",tmn,tmx,(t3-t0),nsect);
     4a4:	ldr	r3, [sp, #16]
     4a6:	str	r7, [sp, #4]
     4a8:	mov	r2, r5
     4aa:	subs	r0, r0, r3
     4ac:	ldr	r1, [pc, #64]	; (4f0 <setup+0x474>)
     4ae:	mov	r3, r4
     4b0:	str	r0, [sp, #0]
     4b2:	ldr	r0, [pc, #56]	; (4ec <setup+0x470>)
     4b4:	bl	3e7c <Print::printf(char const*, ...)>
     4b8:	b.n	1de <setup+0x162>
          zFS.Create(T_DAY, dayName);
          open1=1;
        }
        if(newHour())
        { // new day
          if(open2) zFS.Close(T_HOUR);
     4ba:	movs	r1, #2
     4bc:	ldr	r0, [pc, #16]	; (4d0 <setup+0x454>)
     4be:	bl	b24 <zeroFS_class::Close(HDR_TYPE)>
     4c2:	b.n	25c <setup+0x1e0>
          Serial.printf(" %7d %7d %7d %10d\n",tmn,tmx,(t3-t0),nsect);
        }

        if(newDay())
        { // new day
          if(open1) zFS.Close(T_DAY);
     4c4:	movs	r1, #1
     4c6:	ldr	r0, [pc, #8]	; (4d0 <setup+0x454>)
     4c8:	bl	b24 <zeroFS_class::Close(HDR_TYPE)>
     4cc:	b.n	1fc <setup+0x180>
     4ce:	nop
     4d0:	.word	0x20009d64
     4d4:	.word	0x20000aa8
     4d8:	.word	0x20000ab4
     4dc:	.word	0x20000ac4
     4e0:	.word	0x20001cf3
     4e4:	.word	0x20001cf4
     4e8:	.word	0x20000adc
     4ec:	.word	0x20001218
     4f0:	.word	0x20000af4

000004f4 <loop>:
    printSector(data);
    Serial.println();
    printSector(data+512);
*/
}
extern "C" void loop() {
     4f4:	bx	lr
     4f6:	nop

000004f8 <_GLOBAL__sub_I_zFS>:
  // put your main code here, to run repeatedly:
}
     4f8:	push	{r3, lr}
} HDR_TYPE;

#define Sector2Index(x) (x>>4)
#define Index2Sector(x) (x<<4)

class zeroFS_class
     4fa:	mov.w	r2, #2048	; 0x800
     4fe:	movs	r1, #0
     500:	ldr	r0, [pc, #4]	; (508 <_GLOBAL__sub_I_zFS+0x10>)
     502:	bl	54f4 <memset>
     506:	pop	{r3, pc}
     508:	.word	0x2000bfd4

0000050c <breakTime(long, tmElements_t&)>:
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
     50c:	ldr	r3, [pc, #392]	; (698 <breakTime(long, tmElements_t&)+0x18c>)
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
     50e:	ldr	r2, [pc, #396]	; (69c <breakTime(long, tmElements_t&)+0x190>)
  time /= 24; // now it is days
     510:	umull	r3, ip, r3, r0
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
     514:	ldr	r3, [pc, #392]	; (6a0 <breakTime(long, tmElements_t&)+0x194>)
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
     516:	mov.w	ip, ip, lsr #16
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0
 
void breakTime(time_t timeInput, tmElements_t &tm){
     51a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
     51e:	umull	r4, r8, r3, r0
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
     522:	add.w	lr, ip, #4
     526:	ldr	r6, [pc, #380]	; (6a4 <breakTime(long, tmElements_t&)+0x198>)
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
     528:	umull	r4, r2, r2, r0
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
     52c:	mov.w	r8, r8, lsr #5
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
     530:	ldr.w	r9, [pc, #380]	; 6b0 <breakTime(long, tmElements_t&)+0x1a4>
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
     534:	umull	r6, r7, lr, r6
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
     538:	lsrs	r2, r2, #11
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
     53a:	umull	r4, r3, r3, r8
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
     53e:	movs	r5, #0
     540:	rsb	r4, r7, lr
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
     544:	umull	r9, r6, r9, r2
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
     548:	lsrs	r3, r3, #5
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
     54a:	ldr.w	r9, [pc, #348]	; 6a8 <breakTime(long, tmElements_t&)+0x19c>
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
     54e:	add.w	r4, r7, r4, lsr #1
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
     552:	mov.w	fp, #100	; 0x64
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
     556:	lsrs	r6, r6, #4
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
     558:	mov.w	sl, #400	; 0x190
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
     55c:	lsrs	r4, r4, #2
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
     55e:	rsb	r3, r3, r3, lsl #4
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
     562:	rsb	r4, r4, r4, lsl #3
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
     566:	add.w	r6, r6, r6, lsl #1
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
     56a:	rsb	r4, r4, lr
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
     56e:	rsb	r7, r8, r8, lsl #4
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
     572:	sub.w	r6, r2, r6, lsl #3
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
     576:	mov	r2, r5
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
     578:	sub.w	r3, r8, r3, lsl #2
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
     57c:	adds	r4, #1
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
     57e:	sub.w	r0, r0, r7, lsl #2
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
     582:	strb	r6, [r1, #2]
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
     584:	strb	r3, [r1, #1]
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
     586:	strb	r0, [r1, #0]
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
     588:	strb	r4, [r1, #3]
     58a:	uxtb	r7, r5
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
     58c:	movw	r4, #365	; 0x16d
     590:	addw	r3, r7, #1970	; 0x7b2
     594:	smull	r0, lr, r9, r3
     598:	ands.w	r8, r3, #3
     59c:	mov.w	r0, r3, asr #31
     5a0:	rsb	r6, r0, lr, asr #5
     5a4:	bne.n	5c2 <breakTime(long, tmElements_t&)+0xb6>
     5a6:	rsb	r0, r0, lr, asr #7
     5aa:	mls	r6, fp, r6, r3
     5ae:	mov.w	r4, #366	; 0x16e
     5b2:	mls	r0, sl, r0, r3
     5b6:	cbnz	r6, 5c2 <breakTime(long, tmElements_t&)+0xb6>
     5b8:	cmp	r0, #0
     5ba:	movw	r0, #365	; 0x16d
     5be:	it	ne
     5c0:	movne	r4, r0
     5c2:	add	r2, r4
     5c4:	adds	r5, #1
     5c6:	cmp	ip, r2
     5c8:	bcs.n	58a <breakTime(long, tmElements_t&)+0x7e>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
     5ca:	strb	r7, [r1, #6]
  
  days -= LEAP_YEAR(year) ? 366 : 365;
     5cc:	cmp.w	r8, #0
     5d0:	bne.n	5ec <breakTime(long, tmElements_t&)+0xe0>
     5d2:	ldr	r0, [pc, #212]	; (6a8 <breakTime(long, tmElements_t&)+0x19c>)
     5d4:	asrs	r6, r3, #31
     5d6:	movs	r5, #100	; 0x64
     5d8:	smull	r4, r0, r0, r3
     5dc:	rsb	r4, r6, r0, asr #5
     5e0:	mls	r4, r5, r4, r3
     5e4:	cbz	r4, 658 <breakTime(long, tmElements_t&)+0x14c>
     5e6:	mov.w	r4, #366	; 0x16e
     5ea:	b.n	5f2 <breakTime(long, tmElements_t&)+0xe6>
     5ec:	movw	r4, #365	; 0x16d
     5f0:	asrs	r6, r3, #31
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
     5f2:	ldr	r0, [pc, #180]	; (6a8 <breakTime(long, tmElements_t&)+0x19c>)
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
  time  -= days; // now it is days in this year, starting at 0
     5f4:	subs	r2, r2, r4
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
     5f6:	movs	r5, #100	; 0x64
     5f8:	mov.w	r4, #400	; 0x190
     5fc:	smull	r7, r0, r0, r3
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
  time  -= days; // now it is days in this year, starting at 0
     600:	rsb	ip, r2, ip
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
     604:	movs	r2, #0
     606:	rsb	r7, r6, r0, asr #5
     60a:	rsb	r6, r6, r0, asr #7
     60e:	movs	r0, #1
     610:	mls	r7, r5, r7, r3
        monthLength=29;
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
     614:	ldr	r5, [pc, #148]	; (6ac <breakTime(long, tmElements_t&)+0x1a0>)
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
     616:	mls	r6, r4, r6, r3
     61a:	b.n	622 <breakTime(long, tmElements_t&)+0x116>
     61c:	adds	r0, #1
     61e:	adds	r2, #1
     620:	uxtb	r0, r0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
     622:	cmp	r2, #1
     624:	uxtb	r4, r2
     626:	beq.n	672 <breakTime(long, tmElements_t&)+0x166>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
     628:	ldrb	r3, [r2, r5]
     62a:	cmp	r3, ip
     62c:	bhi.n	646 <breakTime(long, tmElements_t&)+0x13a>
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
     62e:	cmp	r0, #12
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
      time -= monthLength;
     630:	rsb	ip, r3, ip
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
     634:	bne.n	61c <breakTime(long, tmElements_t&)+0x110>
     636:	movs	r4, #13
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
     638:	add.w	ip, ip, #1
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
     63c:	strb	r4, [r1, #5]
  tm.Day = time + 1;     // day of month
     63e:	strb.w	ip, [r1, #4]
}
     642:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     646:	adds	r4, #1
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
     648:	add.w	ip, ip, #1
     64c:	uxtb	r4, r4
     64e:	strb.w	ip, [r1, #4]
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
     652:	strb	r4, [r1, #5]
  tm.Day = time + 1;     // day of month
}
     654:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
     658:	rsb	r0, r6, r0, asr #7
     65c:	mov.w	r5, #400	; 0x190
     660:	movw	r4, #365	; 0x16d
     664:	mls	r0, r5, r0, r3
     668:	cmp	r0, #0
     66a:	it	eq
     66c:	moveq.w	r4, #366	; 0x16e
     670:	b.n	5f2 <breakTime(long, tmElements_t&)+0xe6>
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
     672:	cmp.w	r8, #0
     676:	bne.n	68c <breakTime(long, tmElements_t&)+0x180>
     678:	cbnz	r7, 694 <breakTime(long, tmElements_t&)+0x188>
     67a:	cmp	r6, #0
     67c:	ite	ne
     67e:	movne	r3, #28
     680:	moveq	r3, #29
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
     682:	cmp	ip, r3
     684:	bcc.n	690 <breakTime(long, tmElements_t&)+0x184>
      time -= monthLength;
     686:	rsb	ip, r3, ip
     68a:	b.n	61c <breakTime(long, tmElements_t&)+0x110>
     68c:	movs	r3, #28
     68e:	b.n	682 <breakTime(long, tmElements_t&)+0x176>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
     690:	movs	r4, #2
     692:	b.n	638 <breakTime(long, tmElements_t&)+0x12c>
     694:	movs	r3, #29
     696:	b.n	682 <breakTime(long, tmElements_t&)+0x176>
     698:	.word	0xc22e4507
     69c:	.word	0x91a2b3c5
     6a0:	.word	0x88888889
     6a4:	.word	0x24924925
     6a8:	.word	0x51eb851f
     6ac:	.word	0x20000584
     6b0:	.word	0xaaaaaaab

000006b4 <refreshCache(long) [clone .part.0]>:

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
     6b4:	push	{r4, lr}
  if (t != cacheTime) {
    breakTime(t, tm); 
     6b6:	ldr	r1, [pc, #12]	; (6c4 <refreshCache(long) [clone .part.0]+0x10>)

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
     6b8:	mov	r4, r0
  if (t != cacheTime) {
    breakTime(t, tm); 
     6ba:	bl	50c <breakTime(long, tmElements_t&)>
    cacheTime = t; 
     6be:	ldr	r3, [pc, #8]	; (6c8 <refreshCache(long) [clone .part.0]+0x14>)
     6c0:	str	r4, [r3, #0]
     6c2:	pop	{r4, pc}
     6c4:	.word	0x20001c7c
     6c8:	.word	0x20001c8c

000006cc <now()>:
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
     6cc:	push	{r3, r4, r5, r6, r7, lr}
     6ce:	ldr	r4, [pc, #108]	; (73c <now()+0x70>)
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
     6d0:	ldr	r5, [pc, #108]	; (740 <now()+0x74>)
     6d2:	ldr	r3, [r4, #0]
     6d4:	ldr	r2, [r5, #0]
     6d6:	ldr	r7, [pc, #108]	; (744 <now()+0x78>)
     6d8:	subs	r3, r3, r2
     6da:	ldr	r0, [r7, #0]
     6dc:	cmp.w	r3, #1000	; 0x3e8
     6e0:	bcc.n	6fc <now()+0x30>
     6e2:	adds	r0, #1
     6e4:	b.n	6e8 <now()+0x1c>
     6e6:	mov	r0, r1
		// millis() and prevMillis are both unsigned ints thus the subtraction will always be the absolute value of the difference
    sysTime++;
    prevMillis += 1000;	
     6e8:	add.w	r2, r2, #1000	; 0x3e8
     6ec:	ldr	r3, [r4, #0]
     6ee:	adds	r1, r0, #1
#endif


time_t now() {
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
     6f0:	subs	r3, r3, r2
     6f2:	cmp.w	r3, #1000	; 0x3e8
     6f6:	bcs.n	6e6 <now()+0x1a>
     6f8:	str	r0, [r7, #0]
     6fa:	str	r2, [r5, #0]
    prevMillis += 1000;	
#ifdef TIME_DRIFT_INFO
    sysUnsyncedTime++; // this can be compared to the synced time to measure long term drift     
#endif
  }
  if (nextSyncTime <= sysTime) {
     6fc:	ldr	r6, [pc, #72]	; (748 <now()+0x7c>)
     6fe:	ldr	r3, [r6, #0]
     700:	cmp	r0, r3
     702:	bcc.n	724 <now()+0x58>
    if (getTimePtr != 0) {
     704:	ldr	r3, [pc, #68]	; (74c <now()+0x80>)
     706:	ldr	r3, [r3, #0]
     708:	cbz	r3, 724 <now()+0x58>
      time_t t = getTimePtr();
     70a:	blx	r3
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
     70c:	ldr	r3, [pc, #64]	; (750 <now()+0x84>)
#endif
  }
  if (nextSyncTime <= sysTime) {
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
     70e:	cbnz	r0, 726 <now()+0x5a>
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
     710:	ldr	r1, [pc, #64]	; (754 <now()+0x88>)
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
     712:	ldr	r2, [r3, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
     714:	ldrb	r3, [r1, #0]
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
     716:	ldr	r0, [r7, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
     718:	adds	r3, #0
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
     71a:	add	r2, r0
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
     71c:	it	ne
     71e:	movne	r3, #1
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
     720:	str	r2, [r6, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
     722:	strb	r3, [r1, #0]
      }
    }
  }  
  return (time_t)sysTime;
}
     724:	pop	{r3, r4, r5, r6, r7, pc}
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
     726:	ldr	r3, [r3, #0]
  Status = timeSet;
     728:	movs	r1, #2
     72a:	ldr	r4, [r4, #0]
     72c:	ldr	r2, [pc, #36]	; (754 <now()+0x88>)
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
     72e:	add	r3, r0
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
     730:	str	r0, [r7, #0]
  nextSyncTime = (uint32_t)t + syncInterval;
  Status = timeSet;
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
     732:	str	r4, [r5, #0]
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
     734:	str	r3, [r6, #0]
  Status = timeSet;
     736:	strb	r1, [r2, #0]
     738:	pop	{r3, r4, r5, r6, r7, pc}
     73a:	nop
     73c:	.word	0x20009d58
     740:	.word	0x20001c64
     744:	.word	0x20001c88
     748:	.word	0x20001c78
     74c:	.word	0x20009d04
     750:	.word	0x20001228
     754:	.word	0x2000c7e6

00000758 <hour()>:
    breakTime(t, tm); 
    cacheTime = t; 
  }
}

int hour() { // the hour now 
     758:	push	{r3, lr}
  return hour(now()); 
     75a:	bl	6cc <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
     75e:	ldr	r3, [pc, #16]	; (770 <hour()+0x18>)
     760:	ldr	r3, [r3, #0]
     762:	cmp	r0, r3
     764:	beq.n	76a <hour()+0x12>
     766:	bl	6b4 <refreshCache(long) [clone .part.0]>
  return hour(now()); 
}

int hour(time_t t) { // the hour for the given time
  refreshCache(t);
  return tm.Hour;  
     76a:	ldr	r3, [pc, #8]	; (774 <hour()+0x1c>)
  }
}

int hour() { // the hour now 
  return hour(now()); 
}
     76c:	ldrb	r0, [r3, #2]
     76e:	pop	{r3, pc}
     770:	.word	0x20001c8c
     774:	.word	0x20001c7c

00000778 <minute()>:

uint8_t isPM(time_t t) { // returns true if PM
  return (hour(t) >= 12); 
}

int minute() {
     778:	push	{r3, lr}
  return minute(now()); 
     77a:	bl	6cc <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
     77e:	ldr	r3, [pc, #16]	; (790 <minute()+0x18>)
     780:	ldr	r3, [r3, #0]
     782:	cmp	r0, r3
     784:	beq.n	78a <minute()+0x12>
     786:	bl	6b4 <refreshCache(long) [clone .part.0]>
  return minute(now()); 
}

int minute(time_t t) { // the minute for the given time
  refreshCache(t);
  return tm.Minute;  
     78a:	ldr	r3, [pc, #8]	; (794 <minute()+0x1c>)
  return (hour(t) >= 12); 
}

int minute() {
  return minute(now()); 
}
     78c:	ldrb	r0, [r3, #1]
     78e:	pop	{r3, pc}
     790:	.word	0x20001c8c
     794:	.word	0x20001c7c

00000798 <second()>:
int minute(time_t t) { // the minute for the given time
  refreshCache(t);
  return tm.Minute;  
}

int second() {
     798:	push	{r3, lr}
  return second(now()); 
     79a:	bl	6cc <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
     79e:	ldr	r3, [pc, #16]	; (7b0 <second()+0x18>)
     7a0:	ldr	r3, [r3, #0]
     7a2:	cmp	r0, r3
     7a4:	beq.n	7aa <second()+0x12>
     7a6:	bl	6b4 <refreshCache(long) [clone .part.0]>
  return second(now()); 
}

int second(time_t t) {  // the second for the given time
  refreshCache(t);
  return tm.Second;
     7aa:	ldr	r3, [pc, #8]	; (7b4 <second()+0x1c>)
  return tm.Minute;  
}

int second() {
  return second(now()); 
}
     7ac:	ldrb	r0, [r3, #0]
     7ae:	pop	{r3, pc}
     7b0:	.word	0x20001c8c
     7b4:	.word	0x20001c7c

000007b8 <day()>:
int second(time_t t) {  // the second for the given time
  refreshCache(t);
  return tm.Second;
}

int day(){
     7b8:	push	{r3, lr}
  return(day(now())); 
     7ba:	bl	6cc <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
     7be:	ldr	r3, [pc, #16]	; (7d0 <day()+0x18>)
     7c0:	ldr	r3, [r3, #0]
     7c2:	cmp	r0, r3
     7c4:	beq.n	7ca <day()+0x12>
     7c6:	bl	6b4 <refreshCache(long) [clone .part.0]>
  return(day(now())); 
}

int day(time_t t) { // the day for the given time (0-6)
  refreshCache(t);
  return tm.Day;
     7ca:	ldr	r3, [pc, #8]	; (7d4 <day()+0x1c>)
  return tm.Second;
}

int day(){
  return(day(now())); 
}
     7cc:	ldrb	r0, [r3, #4]
     7ce:	pop	{r3, pc}
     7d0:	.word	0x20001c8c
     7d4:	.word	0x20001c7c

000007d8 <month()>:
int weekday(time_t t) {
  refreshCache(t);
  return tm.Wday;
}
   
int month(){
     7d8:	push	{r3, lr}
  return month(now()); 
     7da:	bl	6cc <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
     7de:	ldr	r3, [pc, #16]	; (7f0 <month()+0x18>)
     7e0:	ldr	r3, [r3, #0]
     7e2:	cmp	r0, r3
     7e4:	beq.n	7ea <month()+0x12>
     7e6:	bl	6b4 <refreshCache(long) [clone .part.0]>
  return month(now()); 
}

int month(time_t t) {  // the month for the given time
  refreshCache(t);
  return tm.Month;
     7ea:	ldr	r3, [pc, #8]	; (7f4 <month()+0x1c>)
  return tm.Wday;
}
   
int month(){
  return month(now()); 
}
     7ec:	ldrb	r0, [r3, #5]
     7ee:	pop	{r3, pc}
     7f0:	.word	0x20001c8c
     7f4:	.word	0x20001c7c

000007f8 <year()>:
int month(time_t t) {  // the month for the given time
  refreshCache(t);
  return tm.Month;
}

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
     7f8:	push	{r3, lr}
  return year(now()); 
     7fa:	bl	6cc <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
     7fe:	ldr	r3, [pc, #20]	; (814 <year()+0x1c>)
     800:	ldr	r3, [r3, #0]
     802:	cmp	r0, r3
     804:	beq.n	80a <year()+0x12>
     806:	bl	6b4 <refreshCache(long) [clone .part.0]>
  return year(now()); 
}

int year(time_t t) { // the year for the given time
  refreshCache(t);
  return tmYearToCalendar(tm.Year);
     80a:	ldr	r3, [pc, #12]	; (818 <year()+0x20>)
  refreshCache(t);
  return tm.Month;
}

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
  return year(now()); 
     80c:	ldrb	r0, [r3, #6]
}
     80e:	addw	r0, r0, #1970	; 0x7b2
     812:	pop	{r3, pc}
     814:	.word	0x20001c8c
     818:	.word	0x20001c7c

0000081c <setSyncProvider(long (*)())>:
  return Status;
}

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
  nextSyncTime = sysTime;
     81c:	ldr	r3, [pc, #12]	; (82c <setSyncProvider(long (*)())+0x10>)
     81e:	ldr	r2, [pc, #16]	; (830 <setSyncProvider(long (*)())+0x14>)
     820:	ldr	r1, [r3, #0]
  now(); // required to actually update the status
  return Status;
}

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
     822:	ldr	r3, [pc, #16]	; (834 <setSyncProvider(long (*)())+0x18>)
  nextSyncTime = sysTime;
     824:	str	r1, [r2, #0]
  now(); // required to actually update the status
  return Status;
}

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
     826:	str	r0, [r3, #0]
  nextSyncTime = sysTime;
  now(); // this will sync the clock
     828:	b.w	6cc <now()>
     82c:	.word	0x20001c88
     830:	.word	0x20001c78
     834:	.word	0x20009d04

00000838 <Print::write(char const*)>:
     838:	push	{r4, r5, r6, lr}
     83a:	mov	r4, r0
     83c:	mov	r0, r1
     83e:	mov	r5, r1
     840:	bl	5b00 <strlen>
     844:	ldr	r3, [r4, #0]
     846:	mov	r2, r0
     848:	mov	r1, r5
     84a:	mov	r0, r4
     84c:	ldr	r3, [r3, #4]
     84e:	ldmia.w	sp!, {r4, r5, r6, lr}
     852:	bx	r3

00000854 <die(char const*, DRESULT)>:
  for(int ii=0;ii<512; ii++)
  if((ii+1)%16) Serial.printf("%02x ",buff[ii]); else Serial.printf("%02x\n",buff[ii]);
}

void die(const char * txt, DRESULT res)
{
     854:	push	{r3, lr}
     856:	mov	r4, r1
	virtual int availableForWrite(void)		{ return 0; }
	virtual void flush()				{ }
	size_t write(const char *buffer, size_t size)	{ return write((const uint8_t *)buffer, size); }
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
     858:	mov	r1, r0
     85a:	ldr	r0, [pc, #28]	; (878 <die(char const*, DRESULT)+0x24>)
     85c:	bl	838 <Print::write(char const*)>
     860:	ldr	r1, [pc, #24]	; (87c <die(char const*, DRESULT)+0x28>)
     862:	ldr	r0, [pc, #20]	; (878 <die(char const*, DRESULT)+0x24>)
     864:	bl	838 <Print::write(char const*)>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
	size_t print(int64_t n);
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
     868:	mov	r1, r4
     86a:	movs	r3, #0
     86c:	movs	r2, #16
     86e:	ldr	r0, [pc, #8]	; (878 <die(char const*, DRESULT)+0x24>)
     870:	bl	3e9c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     874:	b.n	874 <die(char const*, DRESULT)+0x20>
     876:	nop
     878:	.word	0x20001218
     87c:	.word	0x20000bb0

00000880 <zeroFS_class::Init(unsigned char, unsigned char, char const*)>:
  Serial.print(txt); Serial.print(" "); Serial.print(res,HEX); while(1);
}

bool zeroFS_class::Init(BYTE device, BYTE cs, const char *str)
{
     880:	push	{r4, r5, r6, lr}
     882:	mov	r4, r0
// DEV_SPI
// DEV_SDHC
// DEV_MSC
// DEV_USB

  pdrv = device;
     884:	strb	r1, [r0, #28]
{
  Serial.print(txt); Serial.print(" "); Serial.print(res,HEX); while(1);
}

bool zeroFS_class::Init(BYTE device, BYTE cs, const char *str)
{
     886:	mov	r6, r2
     888:	sub.w	sp, sp, #512	; 0x200
// DEV_SDHC
// DEV_MSC
// DEV_USB

  pdrv = device;
  strlcpy(devName,str,80);
     88c:	movs	r2, #80	; 0x50
     88e:	adds	r0, #32
     890:	mov	r1, r3
{
  Serial.print(txt); Serial.print(" "); Serial.print(res,HEX); while(1);
}

bool zeroFS_class::Init(BYTE device, BYTE cs, const char *str)
{
     892:	mov	r5, r3
// DEV_SDHC
// DEV_MSC
// DEV_USB

  pdrv = device;
  strlcpy(devName,str,80);
     894:	bl	5aa4 <strlcpy>

  csel=cs;
  if(pdrv==DEV_SPI) disk_ioctl(pdrv,1,(void *)&csel); // set cs for spi mode
     898:	ldrb	r0, [r4, #28]
// DEV_USB

  pdrv = device;
  strlcpy(devName,str,80);

  csel=cs;
     89a:	strh	r6, [r4, #30]
  if(pdrv==DEV_SPI) disk_ioctl(pdrv,1,(void *)&csel); // set cs for spi mode
     89c:	cbnz	r0, 8a8 <zeroFS_class::Init(unsigned char, unsigned char, char const*)+0x28>
     89e:	add.w	r2, r4, #30
     8a2:	movs	r1, #1
     8a4:	bl	f3c <disk_ioctl>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     8a8:	movs	r3, #0
     8aa:	movs	r2, #10
     8ac:	mov	r1, r6
     8ae:	ldr	r0, [pc, #148]	; (944 <zeroFS_class::Init(unsigned char, unsigned char, char const*)+0xc4>)
     8b0:	bl	3e9c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     8b4:	movs	r1, #1
     8b6:	ldr	r0, [pc, #144]	; (948 <zeroFS_class::Init(unsigned char, unsigned char, char const*)+0xc8>)
     8b8:	bl	29f8 <usb_serial_write>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     8bc:	mov	r0, r5
     8be:	bl	5b00 <strlen>
     8c2:	mov	r1, r0
     8c4:	mov	r0, r5
     8c6:	bl	29f8 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     8ca:	ldr	r0, [pc, #120]	; (944 <zeroFS_class::Init(unsigned char, unsigned char, char const*)+0xc4>)
     8cc:	bl	3e4c <Print::println()>
  
  Serial.print(cs); Serial.print(" "); Serial.println(str);
  
  MBR_t mbr;
  if(DSTATUS stat = disk_initialize(pdrv))
     8d0:	ldrb	r0, [r4, #28]
     8d2:	bl	e80 <disk_initialize>
     8d6:	mov	r5, r0
     8d8:	cbz	r0, 8f6 <zeroFS_class::Init(unsigned char, unsigned char, char const*)+0x76>
     8da:	movs	r1, #24
     8dc:	ldr	r0, [pc, #108]	; (94c <zeroFS_class::Init(unsigned char, unsigned char, char const*)+0xcc>)
     8de:	bl	29f8 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     8e2:	mov	r1, r5
     8e4:	movs	r3, #0
     8e6:	movs	r2, #10
     8e8:	ldr	r0, [pc, #88]	; (944 <zeroFS_class::Init(unsigned char, unsigned char, char const*)+0xc4>)
     8ea:	bl	3e9c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
     8ee:	ldr	r0, [pc, #84]	; (944 <zeroFS_class::Init(unsigned char, unsigned char, char const*)+0xc4>)
     8f0:	bl	3e4c <Print::println()>
     8f4:	b.n	8f4 <zeroFS_class::Init(unsigned char, unsigned char, char const*)+0x74>

  BYTE* buff = (BYTE *) &mbr;
  DWORD sector = 0;
  UINT count = 1;
  
  if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("init",res);
     8f6:	mov	r2, r0
     8f8:	movs	r3, #1
     8fa:	ldrb	r0, [r4, #28]
     8fc:	mov	r1, sp
     8fe:	bl	eb4 <disk_read>
     902:	mov	r5, r0
     904:	cbnz	r0, 93c <zeroFS_class::Init(unsigned char, unsigned char, char const*)+0xbc>
  Serial.println(mbr.mbrSig0,HEX); //0x55
  Serial.println(mbr.mbrSig1,HEX); //0xAA
  }  
  #endif

  root_sector=mbr.part[0].firstSector;
     906:	ldr.w	r1, [sp, #454]	; 0x1c6

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
     90a:	mov	r3, r0
  total_sectors=mbr.part[0].totalSectors;
     90c:	ldr.w	r0, [sp, #458]	; 0x1ca
     910:	movs	r2, #16
  Serial.println(mbr.mbrSig0,HEX); //0x55
  Serial.println(mbr.mbrSig1,HEX); //0xAA
  }  
  #endif

  root_sector=mbr.part[0].firstSector;
     912:	str	r1, [r4, #0]
  total_sectors=mbr.part[0].totalSectors;
     914:	str	r0, [r4, #24]
     916:	ldr	r0, [pc, #44]	; (944 <zeroFS_class::Init(unsigned char, unsigned char, char const*)+0xc4>)
     918:	bl	3e9c <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
     91c:	ldr	r0, [pc, #36]	; (944 <zeroFS_class::Init(unsigned char, unsigned char, char const*)+0xc4>)
     91e:	bl	3e4c <Print::println()>

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
     922:	mov	r3, r5
     924:	ldr	r1, [r4, #24]
     926:	movs	r2, #16
     928:	ldr	r0, [pc, #24]	; (944 <zeroFS_class::Init(unsigned char, unsigned char, char const*)+0xc4>)
     92a:	bl	3e9c <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
     92e:	ldr	r0, [pc, #20]	; (944 <zeroFS_class::Init(unsigned char, unsigned char, char const*)+0xc4>)
     930:	bl	3e4c <Print::println()>
  Serial.println(total_sectors,HEX);
  // clean up earlier disk usage

//  findEOF();
  return true;
}
     934:	movs	r0, #1
     936:	add.w	sp, sp, #512	; 0x200
     93a:	pop	{r4, r5, r6, pc}

  BYTE* buff = (BYTE *) &mbr;
  DWORD sector = 0;
  UINT count = 1;
  
  if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("init",res);
     93c:	mov	r1, r0
     93e:	ldr	r0, [pc, #16]	; (950 <zeroFS_class::Init(unsigned char, unsigned char, char const*)+0xd0>)
     940:	bl	854 <die(char const*, DRESULT)>
     944:	.word	0x20001218
     948:	.word	0x20000bb0
     94c:	.word	0x20000bbc
     950:	.word	0x20000bd8

00000954 <zeroFS_class::Create(HDR_TYPE, char const*)>:
    sprintf(name,"R%03X_0X%08x",sernum,(unsigned int)write_sector);
    Create(type, name);
  }
}
void zeroFS_class::Create(HDR_TYPE type, const char *name)
{
     954:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  //
  memset(&hdr,0,sizeof(hdr));
     958:	movw	r5, #8304	; 0x2070
    sprintf(name,"R%03X_0X%08x",sernum,(unsigned int)write_sector);
    Create(type, name);
  }
}
void zeroFS_class::Create(HDR_TYPE type, const char *name)
{
     95c:	mov	r4, r0
     95e:	mov	r6, r1
     960:	mov	r8, r2
  //
  memset(&hdr,0,sizeof(hdr));
     962:	add	r5, r0
     964:	mov.w	r2, #512	; 0x200
     968:	movs	r1, #0
     96a:	movw	r9, #8304	; 0x2070
     96e:	mov	r0, r5
  hdr.magic=MAGIC;
     970:	ldr	r7, [pc, #412]	; (b10 <zeroFS_class::Create(HDR_TYPE, char const*)+0x1bc>)
  }
}
void zeroFS_class::Create(HDR_TYPE type, const char *name)
{
  //
  memset(&hdr,0,sizeof(hdr));
     972:	bl	54f4 <memset>
  hdr.magic=MAGIC;
  hdr.type=type;
  hdr.prev=write_sector;
     976:	movw	sl, #8316	; 0x207c
     97a:	ldr	r3, [r4, #4]
void zeroFS_class::Create(HDR_TYPE type, const char *name)
{
  //
  memset(&hdr,0,sizeof(hdr));
  hdr.magic=MAGIC;
  hdr.type=type;
     97c:	movw	r0, #8308	; 0x2074
  hdr.prev=write_sector;
  hdr.sect=write_sector;
     980:	movw	r2, #8312	; 0x2078
}
void zeroFS_class::Create(HDR_TYPE type, const char *name)
{
  //
  memset(&hdr,0,sizeof(hdr));
  hdr.magic=MAGIC;
     984:	str.w	r7, [r4, r9]
  hdr.type=type;
  hdr.prev=write_sector;
  hdr.sect=write_sector;
  hdr.size=0;
     988:	movw	r1, #8328	; 0x2088
void zeroFS_class::Create(HDR_TYPE type, const char *name)
{
  //
  memset(&hdr,0,sizeof(hdr));
  hdr.magic=MAGIC;
  hdr.type=type;
     98c:	str	r6, [r4, r0]
  hdr.prev=write_sector;
  hdr.sect=write_sector;
     98e:	str	r3, [r4, r2]
  hdr.size=0;
     990:	movs	r0, #0
{
  //
  memset(&hdr,0,sizeof(hdr));
  hdr.magic=MAGIC;
  hdr.type=type;
  hdr.prev=write_sector;
     992:	str.w	r3, [r4, sl]
  hdr.sect=write_sector;
  hdr.size=0;
  hdr.next=0xFFFFFFFF;
     996:	add.w	r2, r4, #8320	; 0x2080
     99a:	mov.w	r3, #4294967295
  memset(&hdr,0,sizeof(hdr));
  hdr.magic=MAGIC;
  hdr.type=type;
  hdr.prev=write_sector;
  hdr.sect=write_sector;
  hdr.size=0;
     99e:	str	r0, [r4, r1]
  hdr.millis=millis();
  hdr.micros=micros();
  strcpy(hdr.name,name);
  
  {    
    if(hdr_list[type].magic==MAGIC)
     9a0:	mov.w	r9, r6, lsl #9
  hdr.magic=MAGIC;
  hdr.type=type;
  hdr.prev=write_sector;
  hdr.sect=write_sector;
  hdr.size=0;
  hdr.next=0xFFFFFFFF;
     9a4:	str	r3, [r2, #0]
  hdr.ctime=rtc_get();
     9a6:	bl	36fc <rtc_get>
     9aa:	ldr	r2, [pc, #360]	; (b14 <zeroFS_class::Create(HDR_TYPE, char const*)+0x1c0>)
     9ac:	movw	r1, #8332	; 0x208c
  hdr.millis=millis();
     9b0:	movw	r3, #8336	; 0x2090
     9b4:	ldr	r2, [r2, #0]
  hdr.type=type;
  hdr.prev=write_sector;
  hdr.sect=write_sector;
  hdr.size=0;
  hdr.next=0xFFFFFFFF;
  hdr.ctime=rtc_get();
     9b6:	str	r0, [r4, r1]
  hdr.millis=millis();
     9b8:	str	r2, [r4, r3]
  hdr.micros=micros();
     9ba:	bl	34d8 <micros>
     9be:	movw	r3, #8340	; 0x2094
  strcpy(hdr.name,name);
     9c2:	mov	r1, r8
  hdr.sect=write_sector;
  hdr.size=0;
  hdr.next=0xFFFFFFFF;
  hdr.ctime=rtc_get();
  hdr.millis=millis();
  hdr.micros=micros();
     9c4:	str	r0, [r4, r3]
  strcpy(hdr.name,name);
     9c6:	movw	r0, #8344	; 0x2098
     9ca:	add	r0, r4
     9cc:	bl	59e8 <strcpy>
  
  {    
    if(hdr_list[type].magic==MAGIC)
     9d0:	add.w	r3, r4, r9
     9d4:	movw	r2, #8816	; 0x2270
     9d8:	ldr	r2, [r3, r2]
     9da:	cmp	r2, r7
     9dc:	beq.w	afa <zeroFS_class::Create(HDR_TYPE, char const*)+0x1a6>
    {  hdr.prev = hdr_list[type].sect;
    }
    
    hdr.parent = (type==T_ROOT)? 0xFFFFFFFFUL : hdr_list[type-1].sect;
     9e0:	cmp	r6, #0
     9e2:	beq.n	a76 <zeroFS_class::Create(HDR_TYPE, char const*)+0x122>
     9e4:	subs	r3, r6, #1
     9e6:	movw	r2, #8824	; 0x2278

    // write hdr to disk
    DWORD sector = hdr.sect;
     9ea:	movw	lr, #8312	; 0x2078
  {    
    if(hdr_list[type].magic==MAGIC)
    {  hdr.prev = hdr_list[type].sect;
    }
    
    hdr.parent = (type==T_ROOT)? 0xFFFFFFFFUL : hdr_list[type-1].sect;
     9ee:	movw	r1, #8324	; 0x2084
     9f2:	add.w	r3, r4, r3, lsl #9

    // write hdr to disk
    DWORD sector = hdr.sect;
    memset(buff,0,NBUF);
     9f6:	add.w	r7, r4, #112	; 0x70
    }
    
    hdr.parent = (type==T_ROOT)? 0xFFFFFFFFUL : hdr_list[type-1].sect;

    // write hdr to disk
    DWORD sector = hdr.sect;
     9fa:	ldr.w	sl, [r4, lr]
  {    
    if(hdr_list[type].magic==MAGIC)
    {  hdr.prev = hdr_list[type].sect;
    }
    
    hdr.parent = (type==T_ROOT)? 0xFFFFFFFFUL : hdr_list[type-1].sect;
     9fe:	ldr	r3, [r3, r2]

    // write hdr to disk
    DWORD sector = hdr.sect;
    memset(buff,0,NBUF);
     a00:	mov	r0, r7
     a02:	mov.w	r2, #8192	; 0x2000
  {    
    if(hdr_list[type].magic==MAGIC)
    {  hdr.prev = hdr_list[type].sect;
    }
    
    hdr.parent = (type==T_ROOT)? 0xFFFFFFFFUL : hdr_list[type-1].sect;
     a06:	str	r3, [r4, r1]

    // write hdr to disk
    DWORD sector = hdr.sect;
    memset(buff,0,NBUF);
     a08:	movs	r1, #0
     a0a:	bl	54f4 <memset>
    memcpy(buff,&hdr,sizeof(HDR_t));
     a0e:	mov	r0, r7
     a10:	mov.w	r2, #512	; 0x200
     a14:	mov	r1, r5
     a16:	bl	2270 <memcpy>
//    BYTE* buff = (BYTE *) &hdr;
    UINT count = (type==T_FILE)? 1: MCOUNT;
     a1a:	cmp	r6, #3
     a1c:	bne.n	aa4 <zeroFS_class::Create(HDR_TYPE, char const*)+0x150>
    if(DRESULT res = disk_write (pdrv, buff, sector, count)) die("write1",res);
     a1e:	mov	r2, sl
     a20:	mov	r1, r7
     a22:	movs	r3, #1
     a24:	ldrb	r0, [r4, #28]
     a26:	bl	ef8 <disk_write>
     a2a:	mov	r6, r0
     a2c:	cmp	r0, #0
     a2e:	bne.n	b06 <zeroFS_class::Create(HDR_TYPE, char const*)+0x1b2>

    memcpy(&hdr_list[type],&hdr, sizeof(HDR_t));
     a30:	movw	r0, #10352	; 0x2870
     a34:	mov.w	r2, #512	; 0x200
     a38:	mov	r1, r5
     a3a:	add	r0, r4
     a3c:	bl	2270 <memcpy>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     a40:	mov	r0, r8
     a42:	bl	5b00 <strlen>
     a46:	mov	r1, r0
     a48:	mov	r0, r8
     a4a:	bl	29f8 <usb_serial_write>
     a4e:	movs	r1, #1
     a50:	ldr	r0, [pc, #196]	; (b18 <zeroFS_class::Create(HDR_TYPE, char const*)+0x1c4>)
     a52:	bl	29f8 <usb_serial_write>

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
     a56:	mov	r3, r6
     a58:	movs	r2, #16
     a5a:	ldr	r1, [r4, #4]
     a5c:	ldr	r0, [pc, #188]	; (b1c <zeroFS_class::Create(HDR_TYPE, char const*)+0x1c8>)
     a5e:	bl	3e9c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     a62:	movs	r1, #1
     a64:	ldr	r0, [pc, #176]	; (b18 <zeroFS_class::Create(HDR_TYPE, char const*)+0x1c4>)
     a66:	bl	29f8 <usb_serial_write>

    Serial.print(name); Serial.print(" "); Serial.print(write_sector,HEX); 
    if(type ==T_FILE) Serial.print(" "); else Serial.println();

    write_sector=write_sector+count;
     a6a:	ldr	r2, [r4, #4]
    // write hdr to disk
    DWORD sector = hdr.sect;
    memset(buff,0,NBUF);
    memcpy(buff,&hdr,sizeof(HDR_t));
//    BYTE* buff = (BYTE *) &hdr;
    UINT count = (type==T_FILE)? 1: MCOUNT;
     a6c:	movs	r3, #1
    memcpy(&hdr_list[type],&hdr, sizeof(HDR_t));

    Serial.print(name); Serial.print(" "); Serial.print(write_sector,HEX); 
    if(type ==T_FILE) Serial.print(" "); else Serial.println();

    write_sector=write_sector+count;
     a6e:	add	r3, r2
     a70:	str	r3, [r4, #4]
//    {
//      for(int nn=0; nn<NBUF; nn++) buff[nn]=0;
//      Write(buff,NBUF-512);
//    }
  }
}
     a72:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  {    
    if(hdr_list[type].magic==MAGIC)
    {  hdr.prev = hdr_list[type].sect;
    }
    
    hdr.parent = (type==T_ROOT)? 0xFFFFFFFFUL : hdr_list[type-1].sect;
     a76:	movw	r2, #8324	; 0x2084
     a7a:	mov.w	r0, #4294967295

    // write hdr to disk
    DWORD sector = hdr.sect;
    memset(buff,0,NBUF);
     a7e:	add.w	r7, r4, #112	; 0x70
    }
    
    hdr.parent = (type==T_ROOT)? 0xFFFFFFFFUL : hdr_list[type-1].sect;

    // write hdr to disk
    DWORD sector = hdr.sect;
     a82:	movw	r3, #8312	; 0x2078
  {    
    if(hdr_list[type].magic==MAGIC)
    {  hdr.prev = hdr_list[type].sect;
    }
    
    hdr.parent = (type==T_ROOT)? 0xFFFFFFFFUL : hdr_list[type-1].sect;
     a86:	str	r0, [r4, r2]

    // write hdr to disk
    DWORD sector = hdr.sect;
    memset(buff,0,NBUF);
     a88:	mov	r1, r6
     a8a:	mov.w	r2, #8192	; 0x2000
     a8e:	mov	r0, r7
    }
    
    hdr.parent = (type==T_ROOT)? 0xFFFFFFFFUL : hdr_list[type-1].sect;

    // write hdr to disk
    DWORD sector = hdr.sect;
     a90:	ldr.w	sl, [r4, r3]
    memset(buff,0,NBUF);
     a94:	bl	54f4 <memset>
    memcpy(buff,&hdr,sizeof(HDR_t));
     a98:	mov	r0, r7
     a9a:	mov.w	r2, #512	; 0x200
     a9e:	mov	r1, r5
     aa0:	bl	2270 <memcpy>
//    BYTE* buff = (BYTE *) &hdr;
    UINT count = (type==T_FILE)? 1: MCOUNT;
    if(DRESULT res = disk_write (pdrv, buff, sector, count)) die("write1",res);
     aa4:	mov	r2, sl
     aa6:	mov	r1, r7
     aa8:	movs	r3, #16
     aaa:	ldrb	r0, [r4, #28]
     aac:	bl	ef8 <disk_write>
     ab0:	mov	r6, r0
     ab2:	cbnz	r0, b06 <zeroFS_class::Create(HDR_TYPE, char const*)+0x1b2>

    memcpy(&hdr_list[type],&hdr, sizeof(HDR_t));
     ab4:	movw	r0, #8816	; 0x2270
     ab8:	mov.w	r2, #512	; 0x200
     abc:	mov	r1, r5
     abe:	add	r0, r9
     ac0:	add	r0, r4
     ac2:	bl	2270 <memcpy>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     ac6:	mov	r0, r8
     ac8:	bl	5b00 <strlen>
     acc:	mov	r1, r0
     ace:	mov	r0, r8
     ad0:	bl	29f8 <usb_serial_write>
     ad4:	movs	r1, #1
     ad6:	ldr	r0, [pc, #64]	; (b18 <zeroFS_class::Create(HDR_TYPE, char const*)+0x1c4>)
     ad8:	bl	29f8 <usb_serial_write>

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
     adc:	mov	r3, r6
     ade:	movs	r2, #16
     ae0:	ldr	r1, [r4, #4]
     ae2:	ldr	r0, [pc, #56]	; (b1c <zeroFS_class::Create(HDR_TYPE, char const*)+0x1c8>)
     ae4:	bl	3e9c <Print::printNumber(unsigned long, unsigned char, unsigned char)>

    Serial.print(name); Serial.print(" "); Serial.print(write_sector,HEX); 
    if(type ==T_FILE) Serial.print(" "); else Serial.println();
     ae8:	ldr	r0, [pc, #48]	; (b1c <zeroFS_class::Create(HDR_TYPE, char const*)+0x1c8>)
     aea:	bl	3e4c <Print::println()>

    write_sector=write_sector+count;
     aee:	ldr	r2, [r4, #4]
    if(DRESULT res = disk_write (pdrv, buff, sector, count)) die("write1",res);

    memcpy(&hdr_list[type],&hdr, sizeof(HDR_t));

    Serial.print(name); Serial.print(" "); Serial.print(write_sector,HEX); 
    if(type ==T_FILE) Serial.print(" "); else Serial.println();
     af0:	movs	r3, #16

    write_sector=write_sector+count;
     af2:	add	r3, r2
     af4:	str	r3, [r4, #4]
//    {
//      for(int nn=0; nn<NBUF; nn++) buff[nn]=0;
//      Write(buff,NBUF-512);
//    }
  }
}
     af6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hdr.micros=micros();
  strcpy(hdr.name,name);
  
  {    
    if(hdr_list[type].magic==MAGIC)
    {  hdr.prev = hdr_list[type].sect;
     afa:	movw	r2, #8824	; 0x2278
     afe:	ldr	r3, [r3, r2]
     b00:	str.w	r3, [r4, sl]
     b04:	b.n	9e0 <zeroFS_class::Create(HDR_TYPE, char const*)+0x8c>
    DWORD sector = hdr.sect;
    memset(buff,0,NBUF);
    memcpy(buff,&hdr,sizeof(HDR_t));
//    BYTE* buff = (BYTE *) &hdr;
    UINT count = (type==T_FILE)? 1: MCOUNT;
    if(DRESULT res = disk_write (pdrv, buff, sector, count)) die("write1",res);
     b06:	mov	r1, r6
     b08:	ldr	r0, [pc, #20]	; (b20 <zeroFS_class::Create(HDR_TYPE, char const*)+0x1cc>)
     b0a:	bl	854 <die(char const*, DRESULT)>
     b0e:	nop
     b10:	.word	0x6f72657a
     b14:	.word	0x20009d58
     b18:	.word	0x20000bb0
     b1c:	.word	0x20001218
     b20:	.word	0x20000be0

00000b24 <zeroFS_class::Close(HDR_TYPE)>:
  hdr_sector=hdr.sect;
  read_sector=hdr_sector+(type==T_FILE)? 1: MCOUNT;
}

void zeroFS_class::Close(HDR_TYPE type)
{
     b24:	push	{r4, r5, r6, lr}
     b26:	mov	r4, r0
  if(type==T_ROOT)
     b28:	cbz	r1, b68 <zeroFS_class::Close(HDR_TYPE)+0x44>
    BYTE* buff = (BYTE *) &hdr;
    UINT count = 1;      
    if(DRESULT res = disk_write (pdrv, buff, sector, count)) die("close1 ",res);
  }
  
  hdr_list[type].next=write_sector;
     b2a:	add.w	r2, r4, r1, lsl #9
     b2e:	ldr	r3, [r4, #4]
  if(type==T_FILE) hdr_list[type].size= (hdr_list[type].next-hdr_list[type].sect);
     b30:	cmp	r1, #3
    BYTE* buff = (BYTE *) &hdr;
    UINT count = 1;      
    if(DRESULT res = disk_write (pdrv, buff, sector, count)) die("close1 ",res);
  }
  
  hdr_list[type].next=write_sector;
     b32:	add.w	r0, r2, #8832	; 0x2280
     b36:	str	r3, [r0, #0]
  if(type==T_FILE) hdr_list[type].size= (hdr_list[type].next-hdr_list[type].sect);
     b38:	beq.n	b58 <zeroFS_class::Close(HDR_TYPE)+0x34>
  //
  DWORD sector = hdr_list[type].sect;
     b3a:	lsls	r1, r1, #9
  BYTE* buff = (BYTE *) &hdr_list[type];
     b3c:	movw	r5, #8816	; 0x2270
  }
  
  hdr_list[type].next=write_sector;
  if(type==T_FILE) hdr_list[type].size= (hdr_list[type].next-hdr_list[type].sect);
  //
  DWORD sector = hdr_list[type].sect;
     b40:	movw	r2, #8824	; 0x2278
  BYTE* buff = (BYTE *) &hdr_list[type];
  UINT count = 1;      
  if(DRESULT res = disk_write (pdrv, buff, sector, count)) die("close2 ",res);
     b44:	ldrb	r0, [r4, #28]
  }
  
  hdr_list[type].next=write_sector;
  if(type==T_FILE) hdr_list[type].size= (hdr_list[type].next-hdr_list[type].sect);
  //
  DWORD sector = hdr_list[type].sect;
     b46:	adds	r6, r4, r1
  BYTE* buff = (BYTE *) &hdr_list[type];
     b48:	add	r5, r1
  UINT count = 1;      
  if(DRESULT res = disk_write (pdrv, buff, sector, count)) die("close2 ",res);
     b4a:	movs	r3, #1
     b4c:	ldr	r2, [r6, r2]
     b4e:	adds	r1, r4, r5
     b50:	bl	ef8 <disk_write>
     b54:	cbnz	r0, b92 <zeroFS_class::Close(HDR_TYPE)+0x6e>
     b56:	pop	{r4, r5, r6, pc}
    UINT count = 1;      
    if(DRESULT res = disk_write (pdrv, buff, sector, count)) die("close1 ",res);
  }
  
  hdr_list[type].next=write_sector;
  if(type==T_FILE) hdr_list[type].size= (hdr_list[type].next-hdr_list[type].sect);
     b58:	movw	r5, #8824	; 0x2278
     b5c:	movw	r0, #8840	; 0x2288
     b60:	ldr	r5, [r2, r5]
     b62:	subs	r3, r3, r5
     b64:	str	r3, [r2, r0]
     b66:	b.n	b3a <zeroFS_class::Close(HDR_TYPE)+0x16>

void zeroFS_class::Close(HDR_TYPE type)
{
  if(type==T_ROOT)
  { // add an empty header to end of data
    memset(&hdr,0,sizeof(hdr));
     b68:	movw	r5, #8304	; 0x2070
     b6c:	mov.w	r2, #512	; 0x200
     b70:	add	r5, r0
     b72:	mov	r0, r5
     b74:	bl	54f4 <memset>
    DWORD sector = write_sector;
    BYTE* buff = (BYTE *) &hdr;
    UINT count = 1;      
    if(DRESULT res = disk_write (pdrv, buff, sector, count)) die("close1 ",res);
     b78:	mov	r1, r5
     b7a:	movs	r3, #1
     b7c:	ldr	r2, [r4, #4]
     b7e:	ldrb	r0, [r4, #28]
     b80:	bl	ef8 <disk_write>
     b84:	cbnz	r0, b9a <zeroFS_class::Close(HDR_TYPE)+0x76>
  }
  
  hdr_list[type].next=write_sector;
     b86:	add.w	r3, r4, #8832	; 0x2280
     b8a:	ldr	r2, [r4, #4]
     b8c:	mov	r1, r0
     b8e:	str	r2, [r3, #0]
     b90:	b.n	b3a <zeroFS_class::Close(HDR_TYPE)+0x16>
  if(type==T_FILE) hdr_list[type].size= (hdr_list[type].next-hdr_list[type].sect);
  //
  DWORD sector = hdr_list[type].sect;
  BYTE* buff = (BYTE *) &hdr_list[type];
  UINT count = 1;      
  if(DRESULT res = disk_write (pdrv, buff, sector, count)) die("close2 ",res);
     b92:	mov	r1, r0
     b94:	ldr	r0, [pc, #12]	; (ba4 <zeroFS_class::Close(HDR_TYPE)+0x80>)
     b96:	bl	854 <die(char const*, DRESULT)>
  { // add an empty header to end of data
    memset(&hdr,0,sizeof(hdr));
    DWORD sector = write_sector;
    BYTE* buff = (BYTE *) &hdr;
    UINT count = 1;      
    if(DRESULT res = disk_write (pdrv, buff, sector, count)) die("close1 ",res);
     b9a:	mov	r1, r0
     b9c:	ldr	r0, [pc, #8]	; (ba8 <zeroFS_class::Close(HDR_TYPE)+0x84>)
     b9e:	bl	854 <die(char const*, DRESULT)>
     ba2:	nop
     ba4:	.word	0x20000c04
     ba8:	.word	0x20000bfc

00000bac <zeroFS_class::Write(void*, unsigned long)>:
  UINT count = 1;      
  if(DRESULT res = disk_write (pdrv, buff, sector, count)) die("close2 ",res);
  
}
uint32_t zeroFS_class::Write(void * data, uint32_t ndat)
{
     bac:	push	{r3, r4, r5, lr}
     bae:	mov	r4, r2
    BYTE* buff = (BYTE *) data;
    DWORD sector = write_sector;
     bb0:	ldr	r2, [r0, #4]
    UINT count = ndat/512;
    if(!sector) {Serial.println("Error MBR"); while(1);}
     bb2:	cbnz	r2, bc4 <zeroFS_class::Write(void*, unsigned long)+0x18>
     bb4:	movs	r1, #9
     bb6:	ldr	r0, [pc, #40]	; (be0 <zeroFS_class::Write(void*, unsigned long)+0x34>)
     bb8:	bl	29f8 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     bbc:	ldr	r0, [pc, #36]	; (be4 <zeroFS_class::Write(void*, unsigned long)+0x38>)
     bbe:	bl	3e4c <Print::println()>
     bc2:	b.n	bc2 <zeroFS_class::Write(void*, unsigned long)+0x16>
}
uint32_t zeroFS_class::Write(void * data, uint32_t ndat)
{
    BYTE* buff = (BYTE *) data;
    DWORD sector = write_sector;
    UINT count = ndat/512;
     bc4:	lsrs	r4, r4, #9
     bc6:	mov	r5, r0
    if(!sector) {Serial.println("Error MBR"); while(1);}
    if(DRESULT res = disk_write (pdrv, buff, sector, count)) return 0;
     bc8:	ldrb	r0, [r0, #28]
     bca:	mov	r3, r4
     bcc:	bl	ef8 <disk_write>
     bd0:	cbnz	r0, bdc <zeroFS_class::Write(void*, unsigned long)+0x30>

    write_sector += count;
     bd2:	ldr	r3, [r5, #4]
    return count;
     bd4:	mov	r0, r4
    DWORD sector = write_sector;
    UINT count = ndat/512;
    if(!sector) {Serial.println("Error MBR"); while(1);}
    if(DRESULT res = disk_write (pdrv, buff, sector, count)) return 0;

    write_sector += count;
     bd6:	add	r4, r3
     bd8:	str	r4, [r5, #4]
    return count;
     bda:	pop	{r3, r4, r5, pc}
{
    BYTE* buff = (BYTE *) data;
    DWORD sector = write_sector;
    UINT count = ndat/512;
    if(!sector) {Serial.println("Error MBR"); while(1);}
    if(DRESULT res = disk_write (pdrv, buff, sector, count)) return 0;
     bdc:	movs	r0, #0

    write_sector += count;
    return count;
}
     bde:	pop	{r3, r4, r5, pc}
     be0:	.word	0x20000c0c
     be4:	.word	0x20001218

00000be8 <zeroFS_class::ListAll()>:
      if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read2",res);

      read_sector += count;
}
void zeroFS_class::ListAll(void)
{
     be8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t sector = root_sector;
     bec:	ldr	r7, [r0, #0]
      if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read2",res);

      read_sector += count;
}
void zeroFS_class::ListAll(void)
{
     bee:	sub	sp, #12
  uint32_t sector = root_sector;
  while(1)
  {
    if(sector==0xFFFFFFFFUL) break;
     bf0:	adds	r2, r7, #1
     bf2:	beq.n	c96 <zeroFS_class::ListAll()+0xae>
     bf4:	movw	fp, #8304	; 0x2070

    BYTE* buff = (BYTE *) &hdr;
    UINT count = 1;
    if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("ListAll ",res);
    //
    hdr.size= (hdr.type==T_FILE)? (hdr.next-hdr.sect): 0xfffffffful;
     bf8:	movw	r5, #8308	; 0x2074
     bfc:	movw	sl, #8328	; 0x2088
     c00:	mov	r6, r0
     c02:	add	fp, r0
     c04:	add	r5, r0
     c06:	add	sl, r0
  {
    if(sector==0xFFFFFFFFUL) break;

    BYTE* buff = (BYTE *) &hdr;
    UINT count = 1;
    if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("ListAll ",res);
     c08:	movs	r3, #1
     c0a:	mov	r2, r7
     c0c:	mov	r1, fp
     c0e:	ldrb	r0, [r6, #28]
     c10:	bl	eb4 <disk_read>
     c14:	cmp	r0, #0
     c16:	bne.n	cbc <zeroFS_class::ListAll()+0xd4>
    //
    hdr.size= (hdr.type==T_FILE)? (hdr.next-hdr.sect): 0xfffffffful;
     c18:	ldr	r3, [r5, #0]
     c1a:	cmp	r3, #3
     c1c:	beq.n	ca2 <zeroFS_class::ListAll()+0xba>
     c1e:	mov.w	r2, #4294967295
     c22:	movw	r8, #8312	; 0x2078
    for(int ii=0; ii<(int)(hdr.type); ii++) Serial.print("  ");
     c26:	cmp	r3, #0
     c28:	add.w	r9, r6, #8320	; 0x2080

    BYTE* buff = (BYTE *) &hdr;
    UINT count = 1;
    if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("ListAll ",res);
    //
    hdr.size= (hdr.type==T_FILE)? (hdr.next-hdr.sect): 0xfffffffful;
     c2c:	str.w	r2, [sl]
     c30:	add	r8, r6
    for(int ii=0; ii<(int)(hdr.type); ii++) Serial.print("  ");
     c32:	ble.n	c46 <zeroFS_class::ListAll()+0x5e>
      if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("read2",res);

      read_sector += count;
}
void zeroFS_class::ListAll(void)
{
     c34:	movs	r4, #0
     c36:	movs	r1, #2
     c38:	ldr	r0, [pc, #136]	; (cc4 <zeroFS_class::ListAll()+0xdc>)
     c3a:	bl	29f8 <usb_serial_write>
    BYTE* buff = (BYTE *) &hdr;
    UINT count = 1;
    if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("ListAll ",res);
    //
    hdr.size= (hdr.type==T_FILE)? (hdr.next-hdr.sect): 0xfffffffful;
    for(int ii=0; ii<(int)(hdr.type); ii++) Serial.print("  ");
     c3e:	adds	r4, #1
     c40:	ldr	r3, [r5, #0]
     c42:	cmp	r3, r4
     c44:	bgt.n	c36 <zeroFS_class::ListAll()+0x4e>
    Serial.printf("%x %x %x %x ",hdr.prev,hdr.sect,hdr.next,hdr.parent);
     c46:	movw	r1, #8324	; 0x2084
     c4a:	movw	r2, #8316	; 0x207c
     c4e:	ldr.w	r0, [r9]
     c52:	add	r1, r6
     c54:	add	r2, r6
     c56:	ldr.w	r3, [r8]
     c5a:	ldr	r1, [r1, #0]
     c5c:	ldr	r2, [r2, #0]
     c5e:	stmia.w	sp, {r0, r1}
     c62:	ldr	r1, [pc, #100]	; (cc8 <zeroFS_class::ListAll()+0xe0>)
     c64:	ldr	r0, [pc, #100]	; (ccc <zeroFS_class::ListAll()+0xe4>)
     c66:	bl	3e7c <Print::printf(char const*, ...)>
    Serial.printf("%d %x %s\n",hdr.type,hdr.size,hdr.name); Serial.flush();
     c6a:	movw	r0, #8344	; 0x2098
     c6e:	ldr.w	r3, [sl]
     c72:	add	r0, r6
     c74:	ldr	r2, [r5, #0]
     c76:	ldr	r1, [pc, #88]	; (cd0 <zeroFS_class::ListAll()+0xe8>)
     c78:	str	r0, [sp, #0]
     c7a:	ldr	r0, [pc, #80]	; (ccc <zeroFS_class::ListAll()+0xe4>)
     c7c:	bl	3e7c <Print::printf(char const*, ...)>
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
     c80:	bl	2a60 <usb_serial_flush_output>


    if(hdr.type==T_FILE) 
     c84:	ldr	r3, [r5, #0]
     c86:	cmp	r3, #3
     c88:	beq.n	c9c <zeroFS_class::ListAll()+0xb4>
    { 
      sector = hdr.next;
    }
    else
    { //increase hdr level up to file level
      sector+=MCOUNT;
     c8a:	adds	r7, #16
    }
    if(sector==eof_sector) break; // end of data reached
     c8c:	ldr	r3, [r6, #16]
     c8e:	cmp	r7, r3
     c90:	beq.n	c96 <zeroFS_class::ListAll()+0xae>
void zeroFS_class::ListAll(void)
{
  uint32_t sector = root_sector;
  while(1)
  {
    if(sector==0xFFFFFFFFUL) break;
     c92:	adds	r3, r7, #1
     c94:	bne.n	c08 <zeroFS_class::ListAll()+0x20>
    { //increase hdr level up to file level
      sector+=MCOUNT;
    }
    if(sector==eof_sector) break; // end of data reached
  }
}
     c96:	add	sp, #12
     c98:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Serial.printf("%d %x %s\n",hdr.type,hdr.size,hdr.name); Serial.flush();


    if(hdr.type==T_FILE) 
    { 
      sector = hdr.next;
     c9c:	ldr.w	r7, [r9]
     ca0:	b.n	c8c <zeroFS_class::ListAll()+0xa4>

    BYTE* buff = (BYTE *) &hdr;
    UINT count = 1;
    if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("ListAll ",res);
    //
    hdr.size= (hdr.type==T_FILE)? (hdr.next-hdr.sect): 0xfffffffful;
     ca2:	movw	r8, #8312	; 0x2078
     ca6:	add.w	r9, r6, #8320	; 0x2080
     caa:	add	r8, r6
     cac:	ldr.w	r3, [r9]
     cb0:	ldr.w	r2, [r8]
     cb4:	subs	r3, r3, r2
     cb6:	str.w	r3, [sl]
     cba:	b.n	c34 <zeroFS_class::ListAll()+0x4c>
  {
    if(sector==0xFFFFFFFFUL) break;

    BYTE* buff = (BYTE *) &hdr;
    UINT count = 1;
    if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("ListAll ",res);
     cbc:	mov	r1, r0
     cbe:	ldr	r0, [pc, #20]	; (cd4 <zeroFS_class::ListAll()+0xec>)
     cc0:	bl	854 <die(char const*, DRESULT)>
     cc4:	.word	0x20000c48
     cc8:	.word	0x20000c2c
     ccc:	.word	0x20001218
     cd0:	.word	0x20000c3c
     cd4:	.word	0x20000c20

00000cd8 <zeroFS_class::Create(HDR_TYPE, unsigned long, int)>:
  return true;
}

void zeroFS_class::Create(HDR_TYPE type, uint32_t sernum, int flag)
{
  if(type==T_ROOT)
     cd8:	cbz	r1, cdc <zeroFS_class::Create(HDR_TYPE, unsigned long, int)+0x4>
     cda:	bx	lr
//  findEOF();
  return true;
}

void zeroFS_class::Create(HDR_TYPE type, uint32_t sernum, int flag)
{
     cdc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(type==T_ROOT)
  {
    memset(&hdr_list,0,4*sizeof(HDR_t));
     ce0:	movw	r5, #8816	; 0x2270
     ce4:	mov	r6, r3
//  findEOF();
  return true;
}

void zeroFS_class::Create(HDR_TYPE type, uint32_t sernum, int flag)
{
     ce6:	sub	sp, #84	; 0x54
     ce8:	mov	r7, r2
  if(type==T_ROOT)
  {
    memset(&hdr_list,0,4*sizeof(HDR_t));
     cea:	add	r5, r0
     cec:	mov	r4, r0
     cee:	mov.w	r2, #2048	; 0x800
     cf2:	mov	r0, r5
     cf4:	bl	54f4 <memset>
    if(flag==0) // initialize start to root sector
     cf8:	cbz	r6, d2a <zeroFS_class::Create(HDR_TYPE, unsigned long, int)+0x52>
    { 
      write_sector = root_sector;
      eof_sector=total_sectors-(100000);
      hdr_list[type].prev=write_sector;
    }
    else if(flag==1)
     cfa:	cmp	r6, #1
     cfc:	beq.n	d3e <zeroFS_class::Create(HDR_TYPE, unsigned long, int)+0x66>
      return;
    }
    else        
    { // create new session
      write_sector = eof_sector;
      eof_sector=total_sectors-(100000);
     cfe:	ldr	r0, [r4, #24]
      hdr_list[type].prev=write_sector;
     d00:	movw	r1, #8828	; 0x227c
      return;
    }
    else        
    { // create new session
      write_sector = eof_sector;
      eof_sector=total_sectors-(100000);
     d04:	ldr	r2, [pc, #180]	; (dbc <zeroFS_class::Create(HDR_TYPE, unsigned long, int)+0xe4>)
      eof_sector=total_sectors-(100000);
      return;
    }
    else        
    { // create new session
      write_sector = eof_sector;
     d06:	ldr	r3, [r4, #16]
      eof_sector=total_sectors-(100000);
     d08:	add	r2, r0
      eof_sector=total_sectors-(100000);
      return;
    }
    else        
    { // create new session
      write_sector = eof_sector;
     d0a:	str	r3, [r4, #4]
      eof_sector=total_sectors-(100000);
     d0c:	str	r2, [r4, #16]
      hdr_list[type].prev=write_sector;
     d0e:	str	r3, [r4, r1]
            hdr_list[type].prev=write_sector;
        }
*/
    }
    char name[80];
    sprintf(name,"R%03X_0X%08x",sernum,(unsigned int)write_sector);
     d10:	mov	r2, r7
     d12:	ldr	r1, [pc, #172]	; (dc0 <zeroFS_class::Create(HDR_TYPE, unsigned long, int)+0xe8>)
     d14:	mov	r0, sp
     d16:	bl	599c <sprintf>
    Create(type, name);
     d1a:	mov	r2, sp
     d1c:	mov	r0, r4
     d1e:	movs	r1, #0
     d20:	bl	954 <zeroFS_class::Create(HDR_TYPE, char const*)>
  }
}
     d24:	add	sp, #84	; 0x54
     d26:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  {
    memset(&hdr_list,0,4*sizeof(HDR_t));
    if(flag==0) // initialize start to root sector
    { 
      write_sector = root_sector;
      eof_sector=total_sectors-(100000);
     d2a:	ldr	r0, [r4, #24]
      hdr_list[type].prev=write_sector;
     d2c:	movw	r1, #8828	; 0x227c
  {
    memset(&hdr_list,0,4*sizeof(HDR_t));
    if(flag==0) // initialize start to root sector
    { 
      write_sector = root_sector;
      eof_sector=total_sectors-(100000);
     d30:	ldr	r2, [pc, #136]	; (dbc <zeroFS_class::Create(HDR_TYPE, unsigned long, int)+0xe4>)
  if(type==T_ROOT)
  {
    memset(&hdr_list,0,4*sizeof(HDR_t));
    if(flag==0) // initialize start to root sector
    { 
      write_sector = root_sector;
     d32:	ldr	r3, [r4, #0]
      eof_sector=total_sectors-(100000);
     d34:	add	r2, r0
  if(type==T_ROOT)
  {
    memset(&hdr_list,0,4*sizeof(HDR_t));
    if(flag==0) // initialize start to root sector
    { 
      write_sector = root_sector;
     d36:	str	r3, [r4, #4]
      eof_sector=total_sectors-(100000);
     d38:	str	r2, [r4, #16]
      hdr_list[type].prev=write_sector;
     d3a:	str	r3, [r4, r1]
     d3c:	b.n	d10 <zeroFS_class::Create(HDR_TYPE, unsigned long, int)+0x38>
    else if(flag==1)
    { // continue at end of previous session
      ListAll(); // gives correct eof

      DWORD sector=root_sector;
      BYTE* buff = (BYTE *) &hdr;
     d3e:	movw	r6, #8304	; 0x2070
     d42:	movw	r9, #10864	; 0x2a70
        {
          if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("create1",res);
          sector=hdr.next;
        } while ((sector != 0xFFFFFFFFUL) && (sector != eof_sector));
        memcpy(&hdr_list[ii],&hdr,sizeof(HDR_t));
        Serial.println(hdr.sect,HEX);
     d46:	movw	r8, #8312	; 0x2078
      eof_sector=total_sectors-(100000);
      hdr_list[type].prev=write_sector;
    }
    else if(flag==1)
    { // continue at end of previous session
      ListAll(); // gives correct eof
     d4a:	mov	r0, r4
     d4c:	bl	be8 <zeroFS_class::ListAll()>

      DWORD sector=root_sector;
      BYTE* buff = (BYTE *) &hdr;
     d50:	add	r6, r4
     d52:	add	r9, r4
        {
          if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("create1",res);
          sector=hdr.next;
        } while ((sector != 0xFFFFFFFFUL) && (sector != eof_sector));
        memcpy(&hdr_list[ii],&hdr,sizeof(HDR_t));
        Serial.println(hdr.sect,HEX);
     d54:	add	r8, r4
    }
    else if(flag==1)
    { // continue at end of previous session
      ListAll(); // gives correct eof

      DWORD sector=root_sector;
     d56:	ldr	r2, [r4, #0]
      for(int ii=0; ii<4; ii++)
      {
        do
        {
          if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("create1",res);
          sector=hdr.next;
     d58:	add.w	r7, r4, #8320	; 0x2080
     d5c:	b.n	d64 <zeroFS_class::Create(HDR_TYPE, unsigned long, int)+0x8c>
        } while ((sector != 0xFFFFFFFFUL) && (sector != eof_sector));
     d5e:	ldr	r3, [r4, #16]
     d60:	cmp	r2, r3
     d62:	beq.n	d76 <zeroFS_class::Create(HDR_TYPE, unsigned long, int)+0x9e>
      UINT count = 1;
      for(int ii=0; ii<4; ii++)
      {
        do
        {
          if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("create1",res);
     d64:	movs	r3, #1
     d66:	mov	r1, r6
     d68:	ldrb	r0, [r4, #28]
     d6a:	bl	eb4 <disk_read>
     d6e:	cbnz	r0, db2 <zeroFS_class::Create(HDR_TYPE, unsigned long, int)+0xda>
          sector=hdr.next;
     d70:	ldr	r2, [r7, #0]
        } while ((sector != 0xFFFFFFFFUL) && (sector != eof_sector));
     d72:	adds	r3, r2, #1
     d74:	bne.n	d5e <zeroFS_class::Create(HDR_TYPE, unsigned long, int)+0x86>
        memcpy(&hdr_list[ii],&hdr,sizeof(HDR_t));
     d76:	mov.w	r2, #512	; 0x200
     d7a:	mov	r1, r6
     d7c:	mov	r0, r5
     d7e:	add	r5, r2
     d80:	bl	2270 <memcpy>

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
     d84:	movs	r2, #16
     d86:	movs	r3, #0
     d88:	ldr.w	r1, [r8]
     d8c:	ldr	r0, [pc, #52]	; (dc4 <zeroFS_class::Create(HDR_TYPE, unsigned long, int)+0xec>)
     d8e:	bl	3e9c <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
     d92:	ldr	r0, [pc, #48]	; (dc4 <zeroFS_class::Create(HDR_TYPE, unsigned long, int)+0xec>)
     d94:	bl	3e4c <Print::println()>
        Serial.println(hdr.sect,HEX);
        //
        sector=hdr.sect+MCOUNT;
     d98:	ldr.w	r2, [r8]
      ListAll(); // gives correct eof

      DWORD sector=root_sector;
      BYTE* buff = (BYTE *) &hdr;
      UINT count = 1;
      for(int ii=0; ii<4; ii++)
     d9c:	cmp	r9, r5
          sector=hdr.next;
        } while ((sector != 0xFFFFFFFFUL) && (sector != eof_sector));
        memcpy(&hdr_list[ii],&hdr,sizeof(HDR_t));
        Serial.println(hdr.sect,HEX);
        //
        sector=hdr.sect+MCOUNT;
     d9e:	add.w	r2, r2, #16
      ListAll(); // gives correct eof

      DWORD sector=root_sector;
      BYTE* buff = (BYTE *) &hdr;
      UINT count = 1;
      for(int ii=0; ii<4; ii++)
     da2:	bne.n	d64 <zeroFS_class::Create(HDR_TYPE, unsigned long, int)+0x8c>
        Serial.println(hdr.sect,HEX);
        //
        sector=hdr.sect+MCOUNT;
      }
      write_sector = eof_sector;
      eof_sector=total_sectors-(100000);
     da4:	ldr	r1, [r4, #24]
     da6:	ldr	r3, [pc, #20]	; (dbc <zeroFS_class::Create(HDR_TYPE, unsigned long, int)+0xe4>)
        memcpy(&hdr_list[ii],&hdr,sizeof(HDR_t));
        Serial.println(hdr.sect,HEX);
        //
        sector=hdr.sect+MCOUNT;
      }
      write_sector = eof_sector;
     da8:	ldr	r2, [r4, #16]
      eof_sector=total_sectors-(100000);
     daa:	add	r3, r1
        memcpy(&hdr_list[ii],&hdr,sizeof(HDR_t));
        Serial.println(hdr.sect,HEX);
        //
        sector=hdr.sect+MCOUNT;
      }
      write_sector = eof_sector;
     dac:	str	r2, [r4, #4]
      eof_sector=total_sectors-(100000);
     dae:	str	r3, [r4, #16]
     db0:	b.n	d24 <zeroFS_class::Create(HDR_TYPE, unsigned long, int)+0x4c>
      UINT count = 1;
      for(int ii=0; ii<4; ii++)
      {
        do
        {
          if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("create1",res);
     db2:	mov	r1, r0
     db4:	ldr	r0, [pc, #16]	; (dc8 <zeroFS_class::Create(HDR_TYPE, unsigned long, int)+0xf0>)
     db6:	bl	854 <die(char const*, DRESULT)>
     dba:	nop
     dbc:	.word	0xfffe7960
     dc0:	.word	0x20000c54
     dc4:	.word	0x20001218
     dc8:	.word	0x20000c4c

00000dcc <zeroFS_class::findEOF()>:
    if(sector==eof_sector) break; // end of data reached
  }
}

void zeroFS_class::findEOF(void)
{
     dcc:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     dd0:	movs	r1, #7
     dd2:	mov	r6, r0
  Serial.println("findEOF");

  uint32_t sector = root_sector;
    BYTE* buff = (BYTE *) &hdr;
     dd4:	movw	r5, #8304	; 0x2070
     dd8:	ldr	r0, [pc, #84]	; (e30 <zeroFS_class::findEOF()+0x64>)
    while(1)
    {DRESULT res;
      while(1) // should only be 1 root header, but ....
      {   if(res = disk_read (pdrv, buff, sector, count)) break;//die("read5",res);
          if(hdr.magic != MAGIC) break; // no header
          if(hdr.type==T_FILE)
     dda:	movw	r8, #8308	; 0x2074
     dde:	bl	29f8 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     de2:	ldr	r0, [pc, #80]	; (e34 <zeroFS_class::findEOF()+0x68>)
void zeroFS_class::findEOF(void)
{
  Serial.println("findEOF");

  uint32_t sector = root_sector;
    BYTE* buff = (BYTE *) &hdr;
     de4:	add	r5, r6
     de6:	bl	3e4c <Print::println()>
    while(1)
    {DRESULT res;
      while(1) // should only be 1 root header, but ....
      {   if(res = disk_read (pdrv, buff, sector, count)) break;//die("read5",res);
          if(hdr.magic != MAGIC) break; // no header
          if(hdr.type==T_FILE)
     dea:	add	r8, r6

void zeroFS_class::findEOF(void)
{
  Serial.println("findEOF");

  uint32_t sector = root_sector;
     dec:	ldr	r4, [r6, #0]
    //
    while(1)
    {DRESULT res;
      while(1) // should only be 1 root header, but ....
      {   if(res = disk_read (pdrv, buff, sector, count)) break;//die("read5",res);
          if(hdr.magic != MAGIC) break; // no header
     dee:	ldr	r7, [pc, #72]	; (e38 <zeroFS_class::findEOF()+0x6c>)
    UINT count = 1;
    //
    while(1)
    {DRESULT res;
      while(1) // should only be 1 root header, but ....
      {   if(res = disk_read (pdrv, buff, sector, count)) break;//die("read5",res);
     df0:	movs	r3, #1
     df2:	mov	r2, r4
     df4:	mov	r1, r5
     df6:	ldrb	r0, [r6, #28]
     df8:	bl	eb4 <disk_read>
     dfc:	cbz	r0, e0a <zeroFS_class::findEOF()+0x3e>
      #endif
      if(res) break;
      if(hdr.magic != MAGIC) break; // no header
      if(hdr.type==T_FILE && hdr.next==0xFFFFFFFF) break;
    }
    eof_sector=hdr.sect;
     dfe:	movw	r3, #8312	; 0x2078
     e02:	ldr	r3, [r6, r3]
     e04:	str	r3, [r6, #16]
     e06:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    //
    while(1)
    {DRESULT res;
      while(1) // should only be 1 root header, but ....
      {   if(res = disk_read (pdrv, buff, sector, count)) break;//die("read5",res);
          if(hdr.magic != MAGIC) break; // no header
     e0a:	ldr	r3, [r5, #0]
     e0c:	cmp	r3, r7
     e0e:	bne.n	dfe <zeroFS_class::findEOF()+0x32>
          if(hdr.type==T_FILE)
     e10:	ldr.w	r3, [r8]
            sector=hdr.next;
          else
            sector +=MCOUNT;
     e14:	adds	r4, #16
    while(1)
    {DRESULT res;
      while(1) // should only be 1 root header, but ....
      {   if(res = disk_read (pdrv, buff, sector, count)) break;//die("read5",res);
          if(hdr.magic != MAGIC) break; // no header
          if(hdr.type==T_FILE)
     e16:	cmp	r3, #3
     e18:	bne.n	df0 <zeroFS_class::findEOF()+0x24>
            sector=hdr.next;
     e1a:	add.w	r3, r6, #8320	; 0x2080
     e1e:	ldr	r4, [r3, #0]
        Serial.println(hdr.next,HEX);
        Serial.println(sector,HEX);
      #endif
      if(res) break;
      if(hdr.magic != MAGIC) break; // no header
      if(hdr.type==T_FILE && hdr.next==0xFFFFFFFF) break;
     e20:	adds	r3, r4, #1
     e22:	bne.n	df0 <zeroFS_class::findEOF()+0x24>
    }
    eof_sector=hdr.sect;
     e24:	movw	r3, #8312	; 0x2078
     e28:	ldr	r3, [r6, r3]
     e2a:	str	r3, [r6, #16]
     e2c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     e30:	.word	0x20000c78
     e34:	.word	0x20001218
     e38:	.word	0x6f72657a

00000e3c <zeroFS_class::fixEOF()>:
    #endif

}

void zeroFS_class::fixEOF(void)
{
     e3c:	push	{r4, r5, r6, lr}
  if(eof_sector==root_sector) return;
     e3e:	ldr	r3, [r0, #16]
     e40:	ldr	r5, [r0, #0]
     e42:	cmp	r3, r5
     e44:	beq.n	e72 <zeroFS_class::fixEOF()+0x36>
     e46:	mov	r4, r0
  DWORD sector = root_sector;
  BYTE* buff = (BYTE *) &hdr;
     e48:	movw	r6, #8304	; 0x2070
  UINT count = 1;
  if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("fixEOF ",res);
     e4c:	movs	r3, #1
     e4e:	mov	r2, r5

void zeroFS_class::fixEOF(void)
{
  if(eof_sector==root_sector) return;
  DWORD sector = root_sector;
  BYTE* buff = (BYTE *) &hdr;
     e50:	add	r6, r4
  UINT count = 1;
  if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("fixEOF ",res);
     e52:	ldrb	r0, [r0, #28]
     e54:	mov	r1, r6
     e56:	bl	eb4 <disk_read>
     e5a:	cbnz	r0, e74 <zeroFS_class::fixEOF()+0x38>
  hdr.next = eof_sector;
     e5c:	add.w	r3, r4, #8320	; 0x2080
     e60:	ldr	r0, [r4, #16]
  if(DRESULT res = disk_write (pdrv, buff, sector, count)) die("fixEOF ",res);
     e62:	mov	r2, r5
     e64:	mov	r1, r6
  if(eof_sector==root_sector) return;
  DWORD sector = root_sector;
  BYTE* buff = (BYTE *) &hdr;
  UINT count = 1;
  if(DRESULT res = disk_read (pdrv, buff, sector, count)) die("fixEOF ",res);
  hdr.next = eof_sector;
     e66:	str	r0, [r3, #0]
  if(DRESULT res = disk_write (pdrv, buff, sector, count)) die("fixEOF ",res);
     e68:	movs	r3, #1
     e6a:	ldrb	r0, [r4, #28]
     e6c:	bl	ef8 <disk_write>
     e70:	cbnz	r0, e74 <zeroFS_class::fixEOF()+0x38>
     e72:	pop	{r4, r5, r6, pc}
     e74:	mov	r1, r0
     e76:	ldr	r0, [pc, #4]	; (e7c <zeroFS_class::fixEOF()+0x40>)
     e78:	bl	854 <die(char const*, DRESULT)>
     e7c:	.word	0x20000c80

00000e80 <disk_initialize>:
)
{
	DSTATUS stat=STA_NOINIT;
	int result;

	switch (pdrv) {
     e80:	cmp	r0, #1
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
     e82:	push	{r3, lr}
	DSTATUS stat=STA_NOINIT;
	int result;

	switch (pdrv) {
     e84:	beq.n	ea6 <disk_initialize+0x26>
     e86:	bcc.n	e9a <disk_initialize+0x1a>
     e88:	cmp	r0, #2
     e8a:	bne.n	e96 <disk_initialize+0x16>
		if(result==RES_OK) stat=0; else stat=STA_NODISK;

		return stat;

	case DEV_MSC :
		result = MSC_disk_initialize();
     e8c:	bl	2264 <MSC_disk_initialize>

		// translate the reslut code here
		if(result==RES_OK) stat=0; else stat=STA_NODISK;
     e90:	cbz	r0, ea2 <disk_initialize+0x22>
	switch (pdrv) {
	case DEV_SPI :

		result = SPI_disk_initialize();
		// translate the reslut code here
		if(result==RES_OK) stat=0; else stat=STA_NODISK;
     e92:	movs	r0, #2
     e94:	pop	{r3, pc}
		// translate the reslut code here
		if(result==RES_OK) stat=0; else stat=STA_NODISK;

		return stat;
	}
	return STA_NOINIT;
     e96:	movs	r0, #1
}
     e98:	pop	{r3, pc}
	int result;

	switch (pdrv) {
	case DEV_SPI :

		result = SPI_disk_initialize();
     e9a:	bl	2254 <SPI_disk_initialize()>
		// translate the reslut code here
		if(result==RES_OK) stat=0; else stat=STA_NODISK;
     e9e:	cmp	r0, #0
     ea0:	bne.n	e92 <disk_initialize+0x12>
     ea2:	movs	r0, #0
     ea4:	pop	{r3, pc}

		return stat;

	case DEV_SDHC :
		result = SDHC_disk_initialize();
     ea6:	bl	14dc <SDHC_disk_initialize>

		// translate the reslut code here
		if(result==RES_OK) stat=0; else stat=STA_NODISK;
     eaa:	cmp	r0, #0
     eac:	beq.n	ea2 <disk_initialize+0x22>
	switch (pdrv) {
	case DEV_SPI :

		result = SPI_disk_initialize();
		// translate the reslut code here
		if(result==RES_OK) stat=0; else stat=STA_NODISK;
     eae:	movs	r0, #2
     eb0:	pop	{r3, pc}
     eb2:	nop

00000eb4 <disk_read>:
	UINT count		/* Number of sectors to read */
)
{
	DRESULT res=RES_OK;
	int result=0;
	switch (pdrv) {
     eb4:	cmp	r0, #1
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	/* Start sector in LBA */
	UINT count		/* Number of sectors to read */
)
{
     eb6:	push	{r4, lr}
     eb8:	mov	r4, r1
     eba:	mov	r1, r2
	DRESULT res=RES_OK;
	int result=0;
	switch (pdrv) {
     ebc:	beq.n	ee6 <disk_read+0x32>
     ebe:	bcc.n	ed6 <disk_read+0x22>
     ec0:	cmp	r0, #2
     ec2:	bne.n	ed2 <disk_read+0x1e>
		return res;

	case DEV_MSC :
		// translate the arguments here

		result = MSC_disk_read(buff, sector, count);
     ec4:	mov	r2, r3
     ec6:	mov	r0, r4
     ec8:	bl	2268 <MSC_disk_read>
		// translate the reslut code here
		if(result==0) res=RES_OK; else res=RES_READERROR;
     ecc:	cbz	r0, ee2 <disk_read+0x2e>
	switch (pdrv) {
	case DEV_SPI :
  
		result = SPI_disk_read(buff, sector, count);
		// translate the reslut code here
 	    if(result==0) res=RES_OK; else res=RES_READERROR;
     ece:	movs	r0, #6
     ed0:	pop	{r4, pc}

		return res;

	}

	return RES_PARERR;
     ed2:	movs	r0, #4
}
     ed4:	pop	{r4, pc}
	DRESULT res=RES_OK;
	int result=0;
	switch (pdrv) {
	case DEV_SPI :
  
		result = SPI_disk_read(buff, sector, count);
     ed6:	mov	r2, r3
     ed8:	mov	r0, r4
     eda:	bl	1dc4 <SPI_disk_read(unsigned char*, unsigned long, unsigned int)>
		// translate the reslut code here
 	    if(result==0) res=RES_OK; else res=RES_READERROR;
     ede:	cmp	r0, #0
     ee0:	bne.n	ece <disk_read+0x1a>
     ee2:	movs	r0, #0
     ee4:	pop	{r4, pc}
		return res;

	case DEV_SDHC :
		// translate the arguments here

		result = SDHC_disk_read(buff, sector, count);
     ee6:	mov	r2, r3
     ee8:	mov	r0, r4
     eea:	bl	15f4 <SDHC_disk_read>
		// translate the reslut code here
		if(result==0) res=RES_OK; else res=RES_READERROR;
     eee:	cmp	r0, #0
     ef0:	beq.n	ee2 <disk_read+0x2e>
	switch (pdrv) {
	case DEV_SPI :
  
		result = SPI_disk_read(buff, sector, count);
		// translate the reslut code here
 	    if(result==0) res=RES_OK; else res=RES_READERROR;
     ef2:	movs	r0, #6
     ef4:	pop	{r4, pc}
     ef6:	nop

00000ef8 <disk_write>:
)
{
	DRESULT res=RES_OK;
	int result;

	switch (pdrv) {
     ef8:	cmp	r0, #1
	BYTE pdrv,			/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Start sector in LBA */
	UINT count			/* Number of sectors to write */
)
{
     efa:	push	{r4, lr}
     efc:	mov	r4, r1
     efe:	mov	r1, r2
	DRESULT res=RES_OK;
	int result;

	switch (pdrv) {
     f00:	beq.n	f2a <disk_write+0x32>
     f02:	bcc.n	f1a <disk_write+0x22>
     f04:	cmp	r0, #2
     f06:	bne.n	f16 <disk_write+0x1e>
		return res;

	case DEV_MSC :
		// translate the arguments here

		result = MSC_disk_write(buff, sector, count);
     f08:	mov	r2, r3
     f0a:	mov	r0, r4
     f0c:	bl	226c <MSC_disk_write>
		// translate the reslut code here
		if(result==0) res=RES_OK; else res=RES_WRITEERROR;
     f10:	cbz	r0, f26 <disk_write+0x2e>
	case DEV_SPI :
		// translate the arguments here

		result = SPI_disk_write(buff, sector, count);
		// translate the reslut code here
		if(result==0) res=RES_OK; else res=RES_WRITEERROR;
     f12:	movs	r0, #7
     f14:	pop	{r4, pc}
		if(result==0) res=RES_OK; else res=RES_WRITEERROR;

		return res;
	}

	return RES_PARERR;
     f16:	movs	r0, #4
}
     f18:	pop	{r4, pc}

	switch (pdrv) {
	case DEV_SPI :
		// translate the arguments here

		result = SPI_disk_write(buff, sector, count);
     f1a:	mov	r2, r3
     f1c:	mov	r0, r4
     f1e:	bl	206c <SPI_disk_write(unsigned char const*, unsigned long, unsigned int)>
		// translate the reslut code here
		if(result==0) res=RES_OK; else res=RES_WRITEERROR;
     f22:	cmp	r0, #0
     f24:	bne.n	f12 <disk_write+0x1a>
     f26:	movs	r0, #0
     f28:	pop	{r4, pc}
		return res;

	case DEV_SDHC :
		// translate the arguments here

		result = SDHC_disk_write(buff, sector, count);
     f2a:	mov	r2, r3
     f2c:	mov	r0, r4
     f2e:	bl	1768 <SDHC_disk_write>
		// translate the reslut code here
		if(result==0) res=RES_OK; else res=RES_WRITEERROR;
     f32:	cmp	r0, #0
     f34:	beq.n	f26 <disk_write+0x2e>
	case DEV_SPI :
		// translate the arguments here

		result = SPI_disk_write(buff, sector, count);
		// translate the reslut code here
		if(result==0) res=RES_OK; else res=RES_WRITEERROR;
     f36:	movs	r0, #7
     f38:	pop	{r4, pc}
     f3a:	nop

00000f3c <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
//	DRESULT res=RES_OK;

	switch (pdrv) {
     f3c:	cmp	r0, #1
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
     f3e:	mov	r3, r1
//	DRESULT res=RES_OK;

	switch (pdrv) {
     f40:	beq.n	f48 <disk_ioctl+0xc>
     f42:	bcc.n	f54 <disk_ioctl+0x18>
     f44:	cmp	r0, #2
     f46:	bne.n	f50 <disk_ioctl+0x14>
		// Process of the command for the SDHC device

//		return res;

	case DEV_MSC :
		return SDHC_disk_ioctl(cmd,(BYTE*)buff);
     f48:	mov	r1, r2
     f4a:	mov	r0, r3
     f4c:	b.w	111c <SDHC_disk_ioctl>
//		return res;

		}

	return RES_PARERR;
}
     f50:	movs	r0, #4
     f52:	bx	lr
{
//	DRESULT res=RES_OK;

	switch (pdrv) {
	case DEV_SPI :
		return SPI_disk_ioctl(cmd,(BYTE*)buff);
     f54:	mov	r1, r2
     f56:	mov	r0, r3
     f58:	b.w	181c <SPI_disk_ioctl(unsigned char, unsigned char*)>

00000f5c <setSdclk(unsigned long)>:
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = 6; //CCM_CLKO2 (0 is USDHC1_DAT3)
  }
  
  static uint32_t sdClock()
  {
    uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
     f5c:	ldr	r2, [pc, #152]	; (ff8 <setSdclk(unsigned long)+0x9c>)
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000 * kHzMax;
     f5e:	mov.w	r1, #1000	; 0x3e8
  }
  
  static uint32_t sdClock()
  {
    uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    uint32_t PLL2PFD0 = (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
     f62:	ldr	r3, [pc, #152]	; (ffc <setSdclk(unsigned long)+0xa0>)
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = 6; //CCM_CLKO2 (0 is USDHC1_DAT3)
  }
  
  static uint32_t sdClock()
  {
    uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
     f64:	ldr	r2, [r2, #36]	; 0x24
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000 * kHzMax;
     f66:	mul.w	r0, r1, r0
  }
  
  static uint32_t sdClock()
  {
    uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    uint32_t PLL2PFD0 = (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
     f6a:	ldr.w	r3, [r3, #256]	; 0x100
     f6e:	ldr	r1, [pc, #144]	; (1000 <setSdclk(unsigned long)+0xa4>)
     f70:	and.w	r3, r3, #63	; 0x3f
     f74:	umull	r1, r3, r1, r3
    return PLL2PFD0;
  }

#endif

static void setSdclk(uint32_t kHzMax) {
     f78:	push	{r4, r5, r6, r7}
  }
  
  static uint32_t sdClock()
  {
    uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    uint32_t PLL2PFD0 = (528000000U * 3) / ((CCM_ANALOG_PFD_528 & 0x3F) / 6) / divider;
     f7a:	lsrs	r3, r3, #2
     f7c:	ubfx	r4, r2, #11, #3
     f80:	ldr	r2, [pc, #128]	; (1004 <setSdclk(unsigned long)+0xa8>)
     f82:	adds	r4, #1
     f84:	udiv	r3, r2, r3
     f88:	udiv	r4, r3, r4
  uint32_t maxSdclk = 1000 * kHzMax;

  //  uint32_t f_pll = F_CPU;
  uint32_t f_pll = sdClock();

  while ((f_pll / (sdclkfs * DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
     f8c:	cmp.w	r0, r4, lsr #4
     f90:	bcs.n	fee <setSdclk(unsigned long)+0x92>
     f92:	movs	r3, #1
     f94:	b.n	f9a <setSdclk(unsigned long)+0x3e>
     f96:	cmp	r3, #255	; 0xff
     f98:	bhi.n	fa6 <setSdclk(unsigned long)+0x4a>
    sdclkfs <<= 1;
     f9a:	lsls	r3, r3, #1
  uint32_t maxSdclk = 1000 * kHzMax;

  //  uint32_t f_pll = F_CPU;
  uint32_t f_pll = sdClock();

  while ((f_pll / (sdclkfs * DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
     f9c:	lsls	r2, r3, #4
     f9e:	udiv	r2, r4, r2
     fa2:	cmp	r0, r2
     fa4:	bcc.n	f96 <setSdclk(unsigned long)+0x3a>
     fa6:	lsrs	r2, r3, #1
     fa8:	lsls	r7, r2, #8
    sdclkfs <<= 1;
  }
  while ((f_pll / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
     faa:	udiv	r2, r4, r3
     fae:	cmp	r0, r2
     fb0:	bcs.n	ff4 <setSdclk(unsigned long)+0x98>
     fb2:	lsls	r1, r3, #1
     fb4:	movs	r2, #1
    dvs++;
     fb6:	adds	r6, r2, #1
  uint32_t f_pll = sdClock();

  while ((f_pll / (sdclkfs * DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((f_pll / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
     fb8:	udiv	r5, r4, r1
     fbc:	cmp	r0, r5
     fbe:	add	r1, r3
     fc0:	bcs.n	fea <setSdclk(unsigned long)+0x8e>
     fc2:	cmp	r6, #16
     fc4:	mov	r2, r6
     fc6:	bne.n	fb6 <setSdclk(unsigned long)+0x5a>
     fc8:	movs	r3, #240	; 0xf0
    // Disable SDHC clock.
    SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
  #endif

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
     fca:	ldr	r4, [pc, #60]	; (1008 <setSdclk(unsigned long)+0xac>)
                                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
     fcc:	ldr	r0, [pc, #60]	; (100c <setSdclk(unsigned long)+0xb0>)
    // Disable SDHC clock.
    SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
  #endif

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
     fce:	ldr	r2, [r4, #44]	; 0x2c

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) { }
     fd0:	mov	r1, r4
  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
                                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
     fd2:	ands	r0, r2
     fd4:	orr.w	r0, r0, #917504	; 0xe0000
     fd8:	orr.w	r2, r0, r7
     fdc:	orrs	r2, r3
     fde:	str	r2, [r4, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) { }
     fe0:	ldr	r3, [r1, #36]	; 0x24
     fe2:	lsls	r3, r3, #28
     fe4:	bpl.n	fe0 <setSdclk(unsigned long)+0x84>

  #if defined(__MK64FX512__) || defined(__MK66FX1M0__)
    // Enable the SDHC clock.
    SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
  #endif
}
     fe6:	pop	{r4, r5, r6, r7}
     fe8:	bx	lr
     fea:	lsls	r3, r2, #4
     fec:	b.n	fca <setSdclk(unsigned long)+0x6e>
  uint32_t maxSdclk = 1000 * kHzMax;

  //  uint32_t f_pll = F_CPU;
  uint32_t f_pll = sdClock();

  while ((f_pll / (sdclkfs * DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
     fee:	movs	r7, #0

static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
     ff0:	movs	r3, #1
     ff2:	b.n	faa <setSdclk(unsigned long)+0x4e>
  uint32_t f_pll = sdClock();

  while ((f_pll / (sdclkfs * DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((f_pll / (sdclkfs * dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
     ff4:	movs	r3, #0
     ff6:	b.n	fca <setSdclk(unsigned long)+0x6e>
     ff8:	.word	0x400fc000
     ffc:	.word	0x400d8000
    1000:	.word	0xaaaaaaab
    1004:	.word	0x5e69ec00
    1008:	.word	0x402c0000
    100c:	.word	0xfff0000f

00001010 <sd_isr()>:

static volatile uint32_t dmaDone=0;
//

void sd_isr(void)
{ SDHC_IRQSIGEN &= ~SDHC_IRQSIGEN_DMA_MASK;
    1010:	ldr	r3, [pc, #64]	; (1054 <sd_isr()+0x44>)
    1012:	ldr	r2, [pc, #68]	; (1058 <sd_isr()+0x48>)
    1014:	ldr	r0, [r3, #56]	; 0x38
  //
  while(!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC));//  SDHC_IRQSTAT &= ~SDHC_IRQSTAT_TC;
    1016:	mov	r1, r3

static volatile uint32_t dmaDone=0;
//

void sd_isr(void)
{ SDHC_IRQSIGEN &= ~SDHC_IRQSIGEN_DMA_MASK;
    1018:	ands	r2, r0
    101a:	str	r2, [r3, #56]	; 0x38
  //
  while(!(SDHC_IRQSTAT & SDHC_IRQSTAT_TC));//  SDHC_IRQSTAT &= ~SDHC_IRQSTAT_TC;
    101c:	ldr	r3, [r1, #48]	; 0x30
    101e:	ldr	r2, [pc, #52]	; (1054 <sd_isr()+0x44>)
    1020:	lsls	r0, r3, #30
    1022:	bpl.n	101c <sd_isr()+0xc>

  #if defined(__IMXRT1052__) || defined(__IMXRT1062__)
    SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN) ;  
    1024:	ldr	r3, [r2, #72]	; 0x48
    1026:	bic.w	r3, r3, #129	; 0x81
    102a:	str	r3, [r2, #72]	; 0x48
  #endif
  
  if(SDHC_SYSCTL & SDHC_SYSCTL_HCKEN) SDHC_SYSCTL &=  ~SDHC_SYSCTL_HCKEN;
    102c:	ldr	r3, [r2, #44]	; 0x2c
    102e:	lsls	r3, r3, #30
    1030:	bpl.n	103a <sd_isr()+0x2a>
    1032:	ldr	r3, [r2, #44]	; 0x2c
    1034:	bic.w	r3, r3, #2
    1038:	str	r3, [r2, #44]	; 0x2c
  SDHC_PROCTL &= ~SDHC_PROCTL_D3CD; SDHC_PROCTL |=  SDHC_PROCTL_D3CD;
    103a:	ldr	r3, [pc, #24]	; (1054 <sd_isr()+0x44>)

  dmaDone=1;
    103c:	movs	r0, #1
    103e:	ldr	r1, [pc, #28]	; (105c <sd_isr()+0x4c>)
  #if defined(__IMXRT1052__) || defined(__IMXRT1062__)
    SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN) ;  
  #endif
  
  if(SDHC_SYSCTL & SDHC_SYSCTL_HCKEN) SDHC_SYSCTL &=  ~SDHC_SYSCTL_HCKEN;
  SDHC_PROCTL &= ~SDHC_PROCTL_D3CD; SDHC_PROCTL |=  SDHC_PROCTL_D3CD;
    1040:	ldr	r2, [r3, #40]	; 0x28
    1042:	bic.w	r2, r2, #8
    1046:	str	r2, [r3, #40]	; 0x28
    1048:	ldr	r2, [r3, #40]	; 0x28
    104a:	orr.w	r2, r2, #8
    104e:	str	r2, [r3, #40]	; 0x28

  dmaDone=1;
    1050:	str	r0, [r1, #0]
    1052:	bx	lr
    1054:	.word	0x402c0000
    1058:	.word	0xeffffff5
    105c:	.word	0x20001c84

00001060 <sd_CMD(unsigned long, unsigned long)>:
/***************************** LOW Level SDHC interface ********************************/
// sends the command to SDcard
static int sd_CMD(uint32_t xfertyp, uint32_t arg)
{
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
    1060:	ldr	r3, [pc, #80]	; (10b4 <sd_CMD(unsigned long, unsigned long)+0x54>)
}

/***************************** LOW Level SDHC interface ********************************/
// sends the command to SDcard
static int sd_CMD(uint32_t xfertyp, uint32_t arg)
{
    1062:	push	{r4, r5, r6}
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
    1064:	ldr	r4, [r3, #48]	; 0x30

  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB));
    1066:	mov	r2, r3
    1068:	mov	r6, r3
/***************************** LOW Level SDHC interface ********************************/
// sends the command to SDcard
static int sd_CMD(uint32_t xfertyp, uint32_t arg)
{
  // Card removal check preparation
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CRM;
    106a:	orr.w	r4, r4, #128	; 0x80
    106e:	str	r4, [r3, #48]	; 0x30

  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB));
    1070:	ldr	r3, [r2, #36]	; 0x24
    1072:	ldr	r5, [pc, #64]	; (10b4 <sd_CMD(unsigned long, unsigned long)+0x54>)
    1074:	lsls	r4, r3, #31
    1076:	bmi.n	1070 <sd_CMD(unsigned long, unsigned long)+0x10>
    1078:	ldr	r3, [r6, #36]	; 0x24
    107a:	lsls	r3, r3, #30
    107c:	bmi.n	1070 <sd_CMD(unsigned long, unsigned long)+0x10>

  // send command
  SDHC_CMDARG = arg;
    107e:	str	r1, [r5, #8]
static uint32_t sd_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
  do
  { result = SDHC_IRQSTAT & mask;
    1080:	mov	r4, r5
  // Wait for cmd line idle // to do timeout PRSSTAT[CDIHB] and the PRSSTAT[CIHB]
  while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB));

  // send command
  SDHC_CMDARG = arg;
  SDHC_XFERTYP = xfertyp;
    1082:	str	r0, [r5, #12]
******************************************************************************/
// waits for status bits sets
static uint32_t sd_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
    1084:	mov.w	r2, #16777216	; 0x1000000
    1088:	b.n	108c <sd_CMD(unsigned long, unsigned long)+0x2c>
  do
  { result = SDHC_IRQSTAT & mask;
    timeout--;
  } while (!result && (timeout));
    108a:	cbz	r2, 109e <sd_CMD(unsigned long, unsigned long)+0x3e>
static uint32_t sd_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
  do
  { result = SDHC_IRQSTAT & mask;
    108c:	ldr	r1, [r4, #48]	; 0x30
    timeout--;
    108e:	subs	r2, #1
static uint32_t sd_WaitStatus(uint32_t mask)
{
  uint32_t             result;
  uint32_t             timeout = 1 << 24;
  do
  { result = SDHC_IRQSTAT & mask;
    1090:	ldr	r3, [pc, #36]	; (10b8 <sd_CMD(unsigned long, unsigned long)+0x58>)
    1092:	ands	r3, r1
    timeout--;
  } while (!result && (timeout));
    1094:	cmp	r3, #0
    1096:	beq.n	108a <sd_CMD(unsigned long, unsigned long)+0x2a>
  if (timeout) return result;
    1098:	cbz	r2, 109e <sd_CMD(unsigned long, unsigned long)+0x3e>
  SDHC_CMDARG = arg;
  SDHC_XFERTYP = xfertyp;

  /* Wait for response */
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (sd_WaitStatus(mask) != SDHC_IRQSTAT_CC)
    109a:	cmp	r3, #1
    109c:	beq.n	10ae <sd_CMD(unsigned long, unsigned long)+0x4e>
  { SDHC_IRQSTAT |= mask;
    109e:	ldr	r2, [pc, #20]	; (10b4 <sd_CMD(unsigned long, unsigned long)+0x54>)
    return SDHC_RESULT_ERROR;
    10a0:	movs	r0, #1
  SDHC_XFERTYP = xfertyp;

  /* Wait for response */
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (sd_WaitStatus(mask) != SDHC_IRQSTAT_CC)
  { SDHC_IRQSTAT |= mask;
    10a2:	ldr	r3, [pc, #20]	; (10b8 <sd_CMD(unsigned long, unsigned long)+0x58>)
    10a4:	ldr	r1, [r2, #48]	; 0x30
    10a6:	orrs	r3, r1
    return SDHC_RESULT_NO_RESPONSE;
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;

  return SDHC_RESULT_OK;
}
    10a8:	pop	{r4, r5, r6}
  SDHC_XFERTYP = xfertyp;

  /* Wait for response */
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (sd_WaitStatus(mask) != SDHC_IRQSTAT_CC)
  { SDHC_IRQSTAT |= mask;
    10aa:	str	r3, [r2, #48]	; 0x30
    return SDHC_RESULT_NO_RESPONSE;
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;

  return SDHC_RESULT_OK;
}
    10ac:	bx	lr
  const uint32_t mask = SDHC_IRQSTAT_CIE | SDHC_IRQSTAT_CEBE | SDHC_IRQSTAT_CCE | SDHC_IRQSTAT_CC;
  if (sd_WaitStatus(mask) != SDHC_IRQSTAT_CC)
  { SDHC_IRQSTAT |= mask;
    return SDHC_RESULT_ERROR;
  }
  return SDHC_RESULT_OK;
    10ae:	movs	r0, #0
    return SDHC_RESULT_NO_RESPONSE;
  }
  SDHC_IRQSTAT |= SDHC_IRQSTAT_CC;

  return SDHC_RESULT_OK;
}
    10b0:	pop	{r4, r5, r6}
    10b2:	bx	lr
    10b4:	.word	0x402c0000
    10b8:	.word	0x000e0001

000010bc <sd_ACMD(unsigned long, unsigned long, unsigned long)>:
// send CMD 55 Application specific command
#define SDHC_CMD55_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD55) | SDHC_XFERTYP_CICEN | \
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48))

static int sd_ACMD(uint32_t xfertyp, uint32_t arg1, uint32_t arg2)
{
    10bc:	push	{r3, r4, r5, lr}
    10be:	mov	r4, r0
  int result =sd_CMD(SDHC_CMD55_XFERTYP,arg1);
    10c0:	ldr	r0, [pc, #20]	; (10d8 <sd_ACMD(unsigned long, unsigned long, unsigned long)+0x1c>)
// send CMD 55 Application specific command
#define SDHC_CMD55_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD55) | SDHC_XFERTYP_CICEN | \
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48))

static int sd_ACMD(uint32_t xfertyp, uint32_t arg1, uint32_t arg2)
{
    10c2:	mov	r5, r2
  int result =sd_CMD(SDHC_CMD55_XFERTYP,arg1);
    10c4:	bl	1060 <sd_CMD(unsigned long, unsigned long)>
  if(!(result == SDHC_RESULT_OK)) return result;
    10c8:	cbz	r0, 10cc <sd_ACMD(unsigned long, unsigned long, unsigned long)+0x10>
  return sd_CMD(xfertyp,arg2);
}
    10ca:	pop	{r3, r4, r5, pc}

static int sd_ACMD(uint32_t xfertyp, uint32_t arg1, uint32_t arg2)
{
  int result =sd_CMD(SDHC_CMD55_XFERTYP,arg1);
  if(!(result == SDHC_RESULT_OK)) return result;
  return sd_CMD(xfertyp,arg2);
    10cc:	mov	r1, r5
    10ce:	mov	r0, r4
}
    10d0:	ldmia.w	sp!, {r3, r4, r5, lr}

static int sd_ACMD(uint32_t xfertyp, uint32_t arg1, uint32_t arg2)
{
  int result =sd_CMD(SDHC_CMD55_XFERTYP,arg1);
  if(!(result == SDHC_RESULT_OK)) return result;
  return sd_CMD(xfertyp,arg2);
    10d4:	b.w	1060 <sd_CMD(unsigned long, unsigned long)>
    10d8:	.word	0x371a0000

000010dc <sd_CMD12_StopTransferWaitForBusy()>:
//
static int sd_CMD12_StopTransfer(void){  return sd_CMD(SDHC_CMD12_XFERTYP, 0);}

// ---------- sends CMD12 to stop transfer and first waits to ready SDCard
static int sd_CMD12_StopTransferWaitForBusy(void)
{
    10dc:	push	{r3, r4, r5, lr}

// ---------- sends CMD12 to stop transfer
#define SDHC_CMD12_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) | \
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY))
//
static int sd_CMD12_StopTransfer(void){  return sd_CMD(SDHC_CMD12_XFERTYP, 0);}
    10de:	movs	r1, #0
    10e0:	ldr	r0, [pc, #48]	; (1114 <sd_CMD12_StopTransferWaitForBusy()+0x38>)
    10e2:	bl	1060 <sd_CMD(unsigned long, unsigned long)>
{
  uint32_t timeOut = 1000;
  int result;
  do 
  { result = sd_CMD12_StopTransfer();
    timeOut--;
    10e6:	movw	r4, #999	; 0x3e7

// ---------- sends CMD12 to stop transfer
#define SDHC_CMD12_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) | \
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY))
//
static int sd_CMD12_StopTransfer(void){  return sd_CMD(SDHC_CMD12_XFERTYP, 0);}
    10ea:	mov	r3, r0
  uint32_t timeOut = 1000;
  int result;
  do 
  { result = sd_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    10ec:	ldr	r5, [pc, #40]	; (1118 <sd_CMD12_StopTransferWaitForBusy()+0x3c>)
    10ee:	b.n	10fc <sd_CMD12_StopTransferWaitForBusy()+0x20>
    10f0:	cbnz	r3, 1106 <sd_CMD12_StopTransferWaitForBusy()+0x2a>

// ---------- sends CMD12 to stop transfer
#define SDHC_CMD12_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) | \
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY))
//
static int sd_CMD12_StopTransfer(void){  return sd_CMD(SDHC_CMD12_XFERTYP, 0);}
    10f2:	bl	1060 <sd_CMD(unsigned long, unsigned long)>
  uint32_t timeOut = 1000;
  int result;
  do 
  { result = sd_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    10f6:	subs	r4, #1

// ---------- sends CMD12 to stop transfer
#define SDHC_CMD12_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) | \
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY))
//
static int sd_CMD12_StopTransfer(void){  return sd_CMD(SDHC_CMD12_XFERTYP, 0);}
    10f8:	mov	r3, r0
  uint32_t timeOut = 1000;
  int result;
  do 
  { result = sd_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    10fa:	beq.n	110a <sd_CMD12_StopTransferWaitForBusy()+0x2e>
    10fc:	ldr	r2, [r5, #36]	; 0x24

// ---------- sends CMD12 to stop transfer
#define SDHC_CMD12_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD12) | SDHC_XFERTYP_CMDTYP(SDHC_XFERTYP_CMDTYP_ABORT) | \
             SDHC_XFERTYP_CICEN | SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY))
//
static int sd_CMD12_StopTransfer(void){  return sd_CMD(SDHC_CMD12_XFERTYP, 0);}
    10fe:	movs	r1, #0
    1100:	ldr	r0, [pc, #16]	; (1114 <sd_CMD12_StopTransferWaitForBusy()+0x38>)
  uint32_t timeOut = 1000;
  int result;
  do 
  { result = sd_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
    1102:	lsls	r2, r2, #29
    1104:	bmi.n	10f0 <sd_CMD12_StopTransferWaitForBusy()+0x14>
  
  if (result != SDHC_RESULT_OK)  return result;
  if (!timeOut)  return SDHC_RESULT_NO_RESPONSE;

  return SDHC_RESULT_OK;
}
    1106:	mov	r0, r3
    1108:	pop	{r3, r4, r5, pc}
  { result = sd_CMD12_StopTransfer();
    timeOut--;
  } while (timeOut && (SDHC_PRSSTAT & SDHC_PRSSTAT_DLA) && result == SDHC_RESULT_OK);
  
  if (result != SDHC_RESULT_OK)  return result;
  if (!timeOut)  return SDHC_RESULT_NO_RESPONSE;
    110a:	cmp	r0, #0
    110c:	it	eq
    110e:	moveq	r3, #5

  return SDHC_RESULT_OK;
}
    1110:	mov	r0, r3
    1112:	pop	{r3, r4, r5, pc}
    1114:	.word	0x0cdb0000
    1118:	.word	0x402c0000

0000111c <SDHC_disk_ioctl>:
{	return (DRESULT) sd_CardWriteBlocks((void *) buff, (uint32_t) sector, (uint32_t) count);
}

DRESULT SDHC_disk_ioctl(BYTE cmd, BYTE *buff)
{   return RES_OK;
}
    111c:	movs	r0, #0
    111e:	bx	lr

00001120 <sd_CardInit()>:
  }
  
  static void initClock()
  {
    /* set PDF_528 PLL2PFD0 */
    CCM_ANALOG_PFD_528 |= (1 << 7);
    1120:	ldr	r2, [pc, #408]	; (12bc <sd_CardInit()+0x19c>)
    CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0); // 12 - 35
    CCM_ANALOG_PFD_528 &= ~(1 << 7);
  
    /* Enable USDHC clock. */
    CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    1122:	ldr	r3, [pc, #412]	; (12c0 <sd_CardInit()+0x1a0>)
  }
  
  static void initClock()
  {
    /* set PDF_528 PLL2PFD0 */
    CCM_ANALOG_PFD_528 |= (1 << 7);
    1124:	ldr.w	r0, [r2, #256]	; 0x100
    CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((7)); // &0x7
  
    // for testing
    CCM_CCOSR = CCM_CCOSR_CLKO1_EN | CCM_CCOSR_CLKO1_DIV(7) | CCM_CCOSR_CLKO1_SEL(1); //(1: SYS_PLL/2)
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 6; //CCM_CLKO1 (0 is USDHC1_DAT2)
    1128:	ldr	r1, [pc, #408]	; (12c4 <sd_CardInit()+0x1a4>)
  }
  
  static void initClock()
  {
    /* set PDF_528 PLL2PFD0 */
    CCM_ANALOG_PFD_528 |= (1 << 7);
    112a:	orr.w	r0, r0, #128	; 0x80

//-----------------------------------------------------------------------------
// initialize the SDHC Controller and SD Card
// returns status of initialization(OK, nonInit, noCard, CardProtected)
uint8_t sd_CardInit(void)
{
    112e:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }
  
  static void initClock()
  {
    /* set PDF_528 PLL2PFD0 */
    CCM_ANALOG_PFD_528 |= (1 << 7);
    1132:	str.w	r0, [r2, #256]	; 0x100
    CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((7)); // &0x7
  
    // for testing
    CCM_CCOSR = CCM_CCOSR_CLKO1_EN | CCM_CCOSR_CLKO1_DIV(7) | CCM_CCOSR_CLKO1_SEL(1); //(1: SYS_PLL/2)
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 6; //CCM_CLKO1 (0 is USDHC1_DAT2)
    1136:	movs	r7, #6
  
  static void initClock()
  {
    /* set PDF_528 PLL2PFD0 */
    CCM_ANALOG_PFD_528 |= (1 << 7);
    CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    1138:	ldr.w	r5, [r2, #256]	; 0x100
    //  CCM_CSCMR1 &= ~(CCM_CSCMR1_USDHC1_CLK_SEL);     // PLL2PFD2
    CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((7)); // &0x7
  
    // for testing
    CCM_CCOSR = CCM_CCOSR_CLKO1_EN | CCM_CCOSR_CLKO1_DIV(7) | CCM_CCOSR_CLKO1_SEL(1); //(1: SYS_PLL/2)
    113c:	mov.w	lr, #241	; 0xf1
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 6; //CCM_CLKO1 (0 is USDHC1_DAT2)
    // for testing
    CCM_CCOSR |= (CCM_CCOSR_CLKO2_EN | CCM_CCOSR_CLKO2_DIV(7) | CCM_CCOSR_CLKO2_SEL(3)); //(3: usdhc1_clk_root))
    1140:	ldr	r6, [pc, #388]	; (12c8 <sd_CardInit()+0x1a8>)
    }
  }
  
  static void sd_ReleaseGPIO(void)
  {
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 5; //GPIO3_IO16
    1142:	movs	r4, #5
  
  static void initClock()
  {
    /* set PDF_528 PLL2PFD0 */
    CCM_ANALOG_PFD_528 |= (1 << 7);
    CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    1144:	bic.w	r5, r5, #63	; 0x3f
  initClock();

  // De-init GPIO - to prevent unwanted clocks on bus
  sd_ReleaseGPIO();
  #if defined (__IMXRT1052__) || defined (__IMXRT1062__)
    SDHC_SYSCTL   |= 0xF;
    1148:	ldr	r0, [pc, #384]	; (12cc <sd_CardInit()+0x1ac>)
  
  static void initClock()
  {
    /* set PDF_528 PLL2PFD0 */
    CCM_ANALOG_PFD_528 |= (1 << 7);
    CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    114a:	str.w	r5, [r2, #256]	; 0x100
    CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0); // 12 - 35
    114e:	ldr.w	r5, [r2, #256]	; 0x100
    1152:	orr.w	r5, r5, #24
    1156:	str.w	r5, [r2, #256]	; 0x100
    CCM_ANALOG_PFD_528 &= ~(1 << 7);
    115a:	ldr.w	r5, [r2, #256]	; 0x100
    115e:	bic.w	r5, r5, #128	; 0x80
    1162:	str.w	r5, [r2, #256]	; 0x100
    SDHC_MIX_CTRL |= 0x80000000;
  #endif  

  /* Reset SDHC */
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) ; // wait
    1166:	mov	r2, r0
    CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0); // 12 - 35
    CCM_ANALOG_PFD_528 &= ~(1 << 7);
  
    /* Enable USDHC clock. */
    CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    1168:	ldr.w	r5, [r3, #128]	; 0x80
    116c:	orr.w	r5, r5, #12
    1170:	str.w	r5, [r3, #128]	; 0x80
    CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    1174:	ldr	r5, [r3, #36]	; 0x24
    1176:	bic.w	r5, r5, #14336	; 0x3800
    117a:	str	r5, [r3, #36]	; 0x24
    //
    //  CCM_CSCMR1 &= ~(CCM_CSCMR1_USDHC1_CLK_SEL);     // PLL2PFD2
    CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    117c:	ldr	r5, [r3, #28]
    117e:	orr.w	r5, r5, #65536	; 0x10000
    1182:	str	r5, [r3, #28]
    CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((7)); // &0x7
    1184:	ldr	r5, [r3, #36]	; 0x24
    1186:	orr.w	r5, r5, #14336	; 0x3800
    118a:	str	r5, [r3, #36]	; 0x24
  
    // for testing
    CCM_CCOSR = CCM_CCOSR_CLKO1_EN | CCM_CCOSR_CLKO1_DIV(7) | CCM_CCOSR_CLKO1_SEL(1); //(1: SYS_PLL/2)
    118c:	str.w	lr, [r3, #96]	; 0x60
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 6; //CCM_CLKO1 (0 is USDHC1_DAT2)
    1190:	str.w	r7, [r1, #460]	; 0x1cc
    // for testing
    CCM_CCOSR |= (CCM_CCOSR_CLKO2_EN | CCM_CCOSR_CLKO2_DIV(7) | CCM_CCOSR_CLKO2_SEL(3)); //(3: usdhc1_clk_root))
    1194:	ldr	r5, [r3, #96]	; 0x60
    1196:	orrs	r6, r5
    SDHC_SYSCTL   |= 0xF;
    SDHC_MIX_CTRL |= 0x80000000;
  #endif  

  /* Reset SDHC */
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    1198:	ldr	r5, [pc, #308]	; (12d0 <sd_CardInit()+0x1b0>)
  
    // for testing
    CCM_CCOSR = CCM_CCOSR_CLKO1_EN | CCM_CCOSR_CLKO1_DIV(7) | CCM_CCOSR_CLKO1_SEL(1); //(1: SYS_PLL/2)
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 6; //CCM_CLKO1 (0 is USDHC1_DAT2)
    // for testing
    CCM_CCOSR |= (CCM_CCOSR_CLKO2_EN | CCM_CCOSR_CLKO2_DIV(7) | CCM_CCOSR_CLKO2_SEL(3)); //(3: usdhc1_clk_root))
    119a:	str	r6, [r3, #96]	; 0x60
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = 6; //CCM_CLKO2 (0 is USDHC1_DAT3)
    119c:	str.w	r7, [r1, #464]	; 0x1d0
    }
  }
  
  static void sd_ReleaseGPIO(void)
  {
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 5; //GPIO3_IO16
    11a0:	str.w	r4, [r1, #460]	; 0x1cc
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = 5; //GPIO3_IO17
    11a4:	str.w	r4, [r1, #464]	; 0x1d0
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = 5; //GPIO3_IO12
    11a8:	str.w	r4, [r1, #444]	; 0x1bc
    //3.3V
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = 5; //GPIO3_IO13
    11ac:	str.w	r4, [r1, #448]	; 0x1c0
    //GND
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = 5; //GPIO3_IO14
    11b0:	str.w	r4, [r1, #452]	; 0x1c4
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = 5; //GPIO3_IO15
    11b4:	str.w	r4, [r1, #456]	; 0x1c8
  initClock();

  // De-init GPIO - to prevent unwanted clocks on bus
  sd_ReleaseGPIO();
  #if defined (__IMXRT1052__) || defined (__IMXRT1062__)
    SDHC_SYSCTL   |= 0xF;
    11b8:	ldr	r3, [r0, #44]	; 0x2c
    11ba:	orr.w	r3, r3, #15
    11be:	str	r3, [r0, #44]	; 0x2c
    SDHC_MIX_CTRL |= 0x80000000;
    11c0:	ldr	r3, [r0, #72]	; 0x48
    11c2:	orr.w	r3, r3, #2147483648	; 0x80000000
    11c6:	str	r3, [r0, #72]	; 0x48
  #endif  

  /* Reset SDHC */
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    11c8:	ldr	r3, [r0, #44]	; 0x2c
    11ca:	orrs	r5, r3
    11cc:	str	r5, [r0, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) ; // wait
    11ce:	ldr	r3, [r2, #44]	; 0x2c
    11d0:	lsls	r0, r3, #7
    11d2:	bmi.n	11ce <sd_CardInit()+0xae>

  /* Set the SDHC initial baud rate divider and start */
  setSdclk(400);
    11d4:	mov.w	r0, #400	; 0x190
    11d8:	bl	f5c <setSdclk(unsigned long)>

  /* Poll inhibit bits */
  while (SDHC_PRSSTAT & (SDHC_PRSSTAT_CIHB | SDHC_PRSSTAT_CDIHB)) ;
    11dc:	ldr	r1, [pc, #236]	; (12cc <sd_CardInit()+0x1ac>)
    11de:	ldr	r3, [r1, #36]	; 0x24
    11e0:	ldr	r2, [pc, #232]	; (12cc <sd_CardInit()+0x1ac>)
    11e2:	ands.w	r3, r3, #3
    11e6:	bne.n	11de <sd_CardInit()+0xbe>
#else

  static void sd_InitGPIO(void)
  {
    { //T4                              // Inverted pins(T4)
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 0; //DAT2  
    11e8:	ldr	r1, [pc, #216]	; (12c4 <sd_CardInit()+0x1a4>)
                                  IOMUXC_SW_PAD_CTL_PAD_SPEED(2);
  
      const uint32_t DATA_MASK = CLOCK_MASK |
                                 (IOMUXC_SW_PAD_CTL_PAD_PUE | IOMUXC_SW_PAD_CTL_PAD_PUS(1));
  
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;
    11ea:	movw	r0, #28808	; 0x7088
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;
    11ee:	movw	r4, #4232	; 0x1088
  SDHC_PROCTL |=  SDHC_PROCTL_D3CD;
  // SDHC_PROCTL = SDHC_PROCTL_EMODE(SDHC_PROCTL_EMODE_INVARIANT) | SDHC_PROCTL_D3CD;
  //  SDHC_WML |= SDHC_WML_RDWML(SDHC_FIFO_BUFFER_SIZE) | SDHC_WML_WRWML(SDHC_FIFO_BUFFER_SIZE);

  #if defined(__IMXRT1052__) || defined (__IMXRT1062__)
    SDHC_VENDOR = 0x2000F801; // (1<<29 | 0x1F<<11 | 1);
    11f2:	ldr	r5, [pc, #224]	; (12d4 <sd_CardInit()+0x1b4>)
#else

  static void sd_InitGPIO(void)
  {
    { //T4                              // Inverted pins(T4)
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 0; //DAT2  
    11f4:	str.w	r3, [r1, #460]	; 0x1cc
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = 0; //DAT3  
    11f8:	str.w	r3, [r1, #464]	; 0x1d0
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = 0; //CMD   
    11fc:	str.w	r3, [r1, #444]	; 0x1bc
      //3.3V                                           
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = 0; //CLK   
    1200:	str.w	r3, [r1, #448]	; 0x1c0
      //GND                                           
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = 0; //DAT0 
    1204:	str.w	r3, [r1, #452]	; 0x1c4
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = 0; //DAT1 
    1208:	str.w	r3, [r1, #456]	; 0x1c8
                                  IOMUXC_SW_PAD_CTL_PAD_SPEED(2);
  
      const uint32_t DATA_MASK = CLOCK_MASK |
                                 (IOMUXC_SW_PAD_CTL_PAD_PUE | IOMUXC_SW_PAD_CTL_PAD_PUS(1));
  
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;
    120c:	str.w	r0, [r1, #956]	; 0x3bc
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;
    1210:	str.w	r0, [r1, #960]	; 0x3c0
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;
    1214:	str.w	r0, [r1, #940]	; 0x3ac
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;
    1218:	str.w	r4, [r1, #944]	; 0x3b0
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;
    121c:	str.w	r0, [r1, #948]	; 0x3b4
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;
    1220:	str.w	r0, [r1, #952]	; 0x3b8
  sd_InitGPIO();

  /* Initial values */ // to do - Check values
//  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(512);
  
  SDHC_PROCTL &= ~SDHC_PROCTL_DMAS(3); // clear ADMA
    1224:	ldr	r3, [r2, #40]	; 0x28
  // clear interrupt status
  SDHC_IRQSTAT = SDHC_IRQSTAT;

  /* Enable requests */
  SDHC_IRQSTATEN =  SDHC_IRQSTAT_CRM | SDHC_IRQSTATEN_CIESEN | 
                    SDHC_IRQSTATEN_TCSEN | SDHC_IRQSTATEN_CCSEN;
    1226:	ldr	r4, [pc, #176]	; (12d8 <sd_CardInit()+0x1b8>)
  sd_InitGPIO();

  /* Initial values */ // to do - Check values
//  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(512);
  
  SDHC_PROCTL &= ~SDHC_PROCTL_DMAS(3); // clear ADMA
    1228:	bic.w	r3, r3, #768	; 0x300
    122c:	ldr	r1, [pc, #172]	; (12dc <sd_CardInit()+0x1bc>)
    122e:	ldr	r0, [pc, #176]	; (12e0 <sd_CardInit()+0x1c0>)
    1230:	str	r3, [r2, #40]	; 0x28

  SDHC_PROCTL |=  SDHC_PROCTL_D3CD;
    1232:	ldr	r3, [r2, #40]	; 0x28
    1234:	orr.w	r3, r3, #8
    1238:	str	r3, [r2, #40]	; 0x28
  // SDHC_PROCTL = SDHC_PROCTL_EMODE(SDHC_PROCTL_EMODE_INVARIANT) | SDHC_PROCTL_D3CD;
  //  SDHC_WML |= SDHC_WML_RDWML(SDHC_FIFO_BUFFER_SIZE) | SDHC_WML_WRWML(SDHC_FIFO_BUFFER_SIZE);

  #if defined(__IMXRT1052__) || defined (__IMXRT1062__)
    SDHC_VENDOR = 0x2000F801; // (1<<29 | 0x1F<<11 | 1);
    123a:	str.w	r5, [r2, #192]	; 0xc0
    SDHC_VENDOR2 &= ~(1<<12); //switch off ACMD23 sharing SDMA
    123e:	ldr.w	r3, [r2, #200]	; 0xc8
    1242:	bic.w	r3, r3, #4096	; 0x1000
    1246:	str.w	r3, [r2, #200]	; 0xc8
  #endif
  
  // clear interrupt status
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    124a:	ldr	r3, [r2, #48]	; 0x30
    124c:	str	r3, [r2, #48]	; 0x30

  /* Enable requests */
  SDHC_IRQSTATEN =  SDHC_IRQSTAT_CRM | SDHC_IRQSTATEN_CIESEN | 
                    SDHC_IRQSTATEN_TCSEN | SDHC_IRQSTATEN_CCSEN;
    124e:	str	r4, [r2, #52]	; 0x34
    1250:	str.w	r0, [r1, #504]	; 0x1f8

  attachInterruptVector(IRQ_SDHC, sd_isr);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6 * 16);
    1254:	ldr	r0, [pc, #140]	; (12e4 <sd_CardInit()+0x1c4>)
    1256:	movs	r4, #96	; 0x60
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    1258:	ldr	r3, [pc, #140]	; (12e8 <sd_CardInit()+0x1c8>)
    125a:	mov.w	r1, #16384	; 0x4000
    125e:	mov.w	r5, #500	; 0x1f4
  /* Enable requests */
  SDHC_IRQSTATEN =  SDHC_IRQSTAT_CRM | SDHC_IRQSTATEN_CIESEN | 
                    SDHC_IRQSTATEN_TCSEN | SDHC_IRQSTATEN_CCSEN;

  attachInterruptVector(IRQ_SDHC, sd_isr);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6 * 16);
    1262:	strb	r4, [r0, #0]
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    1264:	str	r1, [r3, #0]

  // initial clocks... SD spec says only 74 clocks are needed, but if Teensy rebooted
  // while the card was in middle of an operation, thousands of clock cycles can be
  // needed to get the card to complete a prior command and return to a usable state.
  for (int ii = 0; ii < 500; ii++) {
    SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    1266:	ldr	r3, [r2, #44]	; 0x2c
    1268:	orr.w	r3, r3, #134217728	; 0x8000000
    126c:	str	r3, [r2, #44]	; 0x2c
    while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) ;
    126e:	ldr	r3, [r2, #44]	; 0x2c
    1270:	ldr	r4, [pc, #88]	; (12cc <sd_CardInit()+0x1ac>)
    1272:	lsls	r1, r3, #4
    1274:	bmi.n	126e <sd_CardInit()+0x14e>
  NVIC_ENABLE_IRQ(IRQ_SDHC);

  // initial clocks... SD spec says only 74 clocks are needed, but if Teensy rebooted
  // while the card was in middle of an operation, thousands of clock cycles can be
  // needed to get the card to complete a prior command and return to a usable state.
  for (int ii = 0; ii < 500; ii++) {
    1276:	subs	r5, #1
    1278:	bne.n	1266 <sd_CardInit()+0x146>
    SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) ;
  }

  if(!(SDHC_PRSSTAT & SDHC_PRSSTAT_CINS)) return SDHC_STATUS_NODISK;
    127a:	ldr	r3, [r4, #36]	; 0x24
    127c:	lsls	r2, r3, #15
    127e:	bmi.n	1294 <sd_CardInit()+0x174>
  uint8_t resS;
  int resR;

  resS = sd_Init();

  sdCardDesc.status = resS;
    1280:	ldr	r3, [pc, #104]	; (12ec <sd_CardInit()+0x1cc>)
    1282:	movs	r2, #2
  sdCardDesc.address = 0;
    1284:	str	r5, [r3, #4]
  for (int ii = 0; ii < 500; ii++) {
    SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) ;
  }

  if(!(SDHC_PRSSTAT & SDHC_PRSSTAT_CINS)) return SDHC_STATUS_NODISK;
    1286:	mov	r0, r2

  resS = sd_Init();

  sdCardDesc.status = resS;
  sdCardDesc.address = 0;
  sdCardDesc.highCapacity = 0;
    1288:	strb	r5, [r3, #1]
  sdCardDesc.version2 = 0;
    128a:	strb	r5, [r3, #2]
  sdCardDesc.numBlocks = 0;
    128c:	str	r5, [r3, #8]
  uint8_t resS;
  int resR;

  resS = sd_Init();

  sdCardDesc.status = resS;
    128e:	strb	r2, [r3, #0]
    1290:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1294:	ldr	r6, [pc, #84]	; (12ec <sd_CardInit()+0x1cc>)
    // mixCtrl |= SDHC_MIX_CTRL_BCEN; // does not hurt
    // mixCtrl |= SDHC_MIX_CTRL_DTDSEL; // write/read (will be set later
    // mixCtrl |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    // mixCtrl |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    // mixCtrl |= SDHC_MIX_CTRL_AC23EN;
    SDHC_MIX_CTRL = mixCtrl;
    1296:	mov.w	r3, #2147483648	; 0x80000000
 * Convenience interfaces
 */
// ---------- sends CMD0 to put SDCARD to idle
#define SDHC_CMD0_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD0) | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_NO))
//
static int sd_CMD0_GoToIdle(void){ return sd_CMD(SDHC_CMD0_XFERTYP,0); }
    129a:	mov	r1, r5
    129c:	mov	r0, r5
  uint8_t resS;
  int resR;

  resS = sd_Init();

  sdCardDesc.status = resS;
    129e:	strb	r5, [r6, #0]
  sdCardDesc.address = 0;
  sdCardDesc.highCapacity = 0;
    12a0:	strb	r5, [r6, #1]
  sdCardDesc.version2 = 0;
    12a2:	strb	r5, [r6, #2]
  sdCardDesc.numBlocks = 0;
  
  if (resS)  return resS;

  SDHC_IRQSIGEN = 0;
    12a4:	str	r5, [r4, #56]	; 0x38
    // mixCtrl |= SDHC_MIX_CTRL_BCEN; // does not hurt
    // mixCtrl |= SDHC_MIX_CTRL_DTDSEL; // write/read (will be set later
    // mixCtrl |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    // mixCtrl |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    // mixCtrl |= SDHC_MIX_CTRL_AC23EN;
    SDHC_MIX_CTRL = mixCtrl;
    12a6:	str	r3, [r4, #72]	; 0x48
  int resR;

  resS = sd_Init();

  sdCardDesc.status = resS;
  sdCardDesc.address = 0;
    12a8:	str	r5, [r6, #4]
  sdCardDesc.highCapacity = 0;
  sdCardDesc.version2 = 0;
  sdCardDesc.numBlocks = 0;
    12aa:	str	r5, [r6, #8]
 * Convenience interfaces
 */
// ---------- sends CMD0 to put SDCARD to idle
#define SDHC_CMD0_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD0) | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_NO))
//
static int sd_CMD0_GoToIdle(void){ return sd_CMD(SDHC_CMD0_XFERTYP,0); }
    12ac:	bl	1060 <sd_CMD(unsigned long, unsigned long)>
    SDHC_MIX_CTRL = mixCtrl;
  #endif

  resR = sd_CMD0_GoToIdle();

  if (resR) { return sdCardDesc.status = SDHC_STATUS_NOINIT;}
    12b0:	cbz	r0, 12f0 <sd_CardInit()+0x1d0>
    12b2:	movs	r0, #1
    12b4:	strb	r0, [r6, #0]
    12b6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    12ba:	nop
    12bc:	.word	0x400d8000
    12c0:	.word	0x400fc000
    12c4:	.word	0x401f8000
    12c8:	.word	0x01e30000
    12cc:	.word	0x402c0000
    12d0:	.word	0x01008000
    12d4:	.word	0x2000f801
    12d8:	.word	0x00080083
    12dc:	.word	0x20001800
    12e0:	.word	0x00001011
    12e4:	.word	0xe000e46e
    12e8:	.word	0xe000e10c
    12ec:	.word	0x20001c68
             
// ---------- CMD8 to send interface condition
#define SDHC_CMD8_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD8) | SDHC_XFERTYP_CICEN | \
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48))
//
static int sd_CMD8_SetInterface(uint32_t cond){  return sd_CMD(SDHC_CMD8_XFERTYP, cond); }
    12f0:	mov.w	r1, #426	; 0x1aa
    12f4:	ldr	r0, [pc, #428]	; (14a4 <sd_CardInit()+0x384>)
    12f6:	bl	1060 <sd_CMD(unsigned long, unsigned long)>

  resR = sd_CMD0_GoToIdle();

  if (resR) { return sdCardDesc.status = SDHC_STATUS_NOINIT;}
  resR = sd_CMD8_SetInterface(0x000001AA); // 3.3V and AA check pattern
  if (resR == SDHC_RESULT_OK) 
    12fa:	cmp	r0, #0
    12fc:	bne.w	147e <sd_CardInit()+0x35e>
  { if (!((SDHC_CMDRSP0 & 0x000001AA)== 0x000001AA)) return sdCardDesc.status = SDHC_STATUS_NOINIT;
    1300:	ldr	r3, [r4, #16]
    1302:	and.w	r3, r3, #426	; 0x1aa
    1306:	cmp.w	r3, #426	; 0x1aa
    130a:	bne.n	12b2 <sd_CardInit()+0x192>
    sdCardDesc.highCapacity = 1;
    130c:	movs	r3, #1
    130e:	strb	r3, [r6, #1]
static int sd_CMD16_SetBlockSize(uint32_t block_size){  return sd_CMD(SDHC_CMD16_XFERTYP, block_size);}

// ---------- ACMD 41 to send operation condition
#define SDHC_ACMD41_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_ACMD41) | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48))
//
static int sd_ACMD41_SendOperationCond(uint32_t cond){  return sd_ACMD(SDHC_ACMD41_XFERTYP,0, cond);}
    1310:	movs	r2, #0
    1312:	ldr	r0, [pc, #404]	; (14a8 <sd_CardInit()+0x388>)
    1314:	mov	r1, r2
    1316:	bl	10bc <sd_ACMD(unsigned long, unsigned long, unsigned long)>
  else if (resR == SDHC_RESULT_NO_RESPONSE) 
  { // version 1 cards do not respond to CMD8
  } 
  else return sdCardDesc.status = SDHC_STATUS_NOINIT;

  if (sd_ACMD41_SendOperationCond(0))  return sdCardDesc.status = SDHC_STATUS_NOINIT;
    131a:	cmp	r0, #0
    131c:	bne.n	12b2 <sd_CardInit()+0x192>

  if (SDHC_CMDRSP0 & 0x300000) {
    131e:	ldr	r3, [pc, #396]	; (14ac <sd_CardInit()+0x38c>)
    1320:	ldr	r2, [r3, #16]
    1322:	tst.w	r2, #3145728	; 0x300000
    1326:	beq.n	136a <sd_CardInit()+0x24a>
    uint32_t condition = 0x00300000;
    if (sdCardDesc.highCapacity) condition |= 0x40000000;
    1328:	ldrb	r2, [r6, #1]
    //
    uint32_t ii = 0;
    132a:	mov	r4, r0
  else return sdCardDesc.status = SDHC_STATUS_NOINIT;

  if (sd_ACMD41_SendOperationCond(0))  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  if (SDHC_CMDRSP0 & 0x300000) {
    uint32_t condition = 0x00300000;
    132c:	ldr	r7, [pc, #384]	; (14b0 <sd_CardInit()+0x390>)
      ii++;
      if (sd_ACMD41_SendOperationCond(condition)) {
        resS = SDHC_STATUS_NOINIT;
        break;
      }
    } while ((!(SDHC_CMDRSP0 & 0x80000000)) && (ii < SDHC_INITIALIZATION_MAX_CNT));
    132e:	mov	r5, r3
  else return sdCardDesc.status = SDHC_STATUS_NOINIT;

  if (sd_ACMD41_SendOperationCond(0))  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  if (SDHC_CMDRSP0 & 0x300000) {
    uint32_t condition = 0x00300000;
    1330:	cmp	r2, #0
      ii++;
      if (sd_ACMD41_SendOperationCond(condition)) {
        resS = SDHC_STATUS_NOINIT;
        break;
      }
    } while ((!(SDHC_CMDRSP0 & 0x80000000)) && (ii < SDHC_INITIALIZATION_MAX_CNT));
    1332:	ldr.w	r8, [pc, #384]	; 14b4 <sd_CardInit()+0x394>
  else return sdCardDesc.status = SDHC_STATUS_NOINIT;

  if (sd_ACMD41_SendOperationCond(0))  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  if (SDHC_CMDRSP0 & 0x300000) {
    uint32_t condition = 0x00300000;
    1336:	it	eq
    1338:	moveq.w	r7, #3145728	; 0x300000
static int sd_CMD16_SetBlockSize(uint32_t block_size){  return sd_CMD(SDHC_CMD16_XFERTYP, block_size);}

// ---------- ACMD 41 to send operation condition
#define SDHC_ACMD41_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_ACMD41) | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48))
//
static int sd_ACMD41_SendOperationCond(uint32_t cond){  return sd_ACMD(SDHC_ACMD41_XFERTYP,0, cond);}
    133c:	mov	r2, r7
    133e:	movs	r1, #0
    1340:	ldr	r0, [pc, #356]	; (14a8 <sd_CardInit()+0x388>)
    uint32_t condition = 0x00300000;
    if (sdCardDesc.highCapacity) condition |= 0x40000000;
    //
    uint32_t ii = 0;
    do {
      ii++;
    1342:	adds	r4, #1
static int sd_CMD16_SetBlockSize(uint32_t block_size){  return sd_CMD(SDHC_CMD16_XFERTYP, block_size);}

// ---------- ACMD 41 to send operation condition
#define SDHC_ACMD41_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_ACMD41) | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48))
//
static int sd_ACMD41_SendOperationCond(uint32_t cond){  return sd_ACMD(SDHC_ACMD41_XFERTYP,0, cond);}
    1344:	bl	10bc <sd_ACMD(unsigned long, unsigned long, unsigned long)>
    if (sdCardDesc.highCapacity) condition |= 0x40000000;
    //
    uint32_t ii = 0;
    do {
      ii++;
      if (sd_ACMD41_SendOperationCond(condition)) {
    1348:	cmp	r0, #0
    134a:	bne.w	148c <sd_CardInit()+0x36c>
        resS = SDHC_STATUS_NOINIT;
        break;
      }
    } while ((!(SDHC_CMDRSP0 & 0x80000000)) && (ii < SDHC_INITIALIZATION_MAX_CNT));
    134e:	cmp	r4, r8
    1350:	ldr	r3, [r5, #16]
    1352:	bhi.n	1358 <sd_CardInit()+0x238>
    1354:	cmp	r3, #0
    1356:	bge.n	133c <sd_CardInit()+0x21c>

    if (resS) return resS;

    if ((ii >= SDHC_INITIALIZATION_MAX_CNT) || (!(SDHC_CMDRSP0 & 0x40000000)))
    1358:	ldr	r3, [pc, #344]	; (14b4 <sd_CardInit()+0x394>)
    135a:	cmp	r4, r3
    135c:	bhi.n	1366 <sd_CardInit()+0x246>
    135e:	ldr	r3, [pc, #332]	; (14ac <sd_CardInit()+0x38c>)
    1360:	ldr	r3, [r3, #16]
    1362:	lsls	r3, r3, #1
    1364:	bmi.n	136a <sd_CardInit()+0x24a>
      sdCardDesc.highCapacity = 0;
    1366:	movs	r3, #0
    1368:	strb	r3, [r6, #1]
  }

  // Card identify
  SDHC_CMDRSP0=SDHC_CMDRSP1=SDHC_CMDRSP2=SDHC_CMDRSP3=0;
    136a:	movs	r3, #0
    136c:	ldr	r7, [pc, #316]	; (14ac <sd_CardInit()+0x38c>)

// ---------- sends CMD2 to identify card
#define SDHC_CMD2_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD2) | SDHC_XFERTYP_CCCEN \
                          | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_136))
//
static int sd_CMD2_Identify(void){  return sd_CMD(SDHC_CMD2_XFERTYP,0); }
    136e:	ldr	r0, [pc, #328]	; (14b8 <sd_CardInit()+0x398>)
    if ((ii >= SDHC_INITIALIZATION_MAX_CNT) || (!(SDHC_CMDRSP0 & 0x40000000)))
      sdCardDesc.highCapacity = 0;
  }

  // Card identify
  SDHC_CMDRSP0=SDHC_CMDRSP1=SDHC_CMDRSP2=SDHC_CMDRSP3=0;
    1370:	str	r3, [r7, #28]

// ---------- sends CMD2 to identify card
#define SDHC_CMD2_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD2) | SDHC_XFERTYP_CCCEN \
                          | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_136))
//
static int sd_CMD2_Identify(void){  return sd_CMD(SDHC_CMD2_XFERTYP,0); }
    1372:	mov	r1, r3
    if ((ii >= SDHC_INITIALIZATION_MAX_CNT) || (!(SDHC_CMDRSP0 & 0x40000000)))
      sdCardDesc.highCapacity = 0;
  }

  // Card identify
  SDHC_CMDRSP0=SDHC_CMDRSP1=SDHC_CMDRSP2=SDHC_CMDRSP3=0;
    1374:	str	r3, [r7, #24]
    1376:	str	r3, [r7, #20]
    1378:	str	r3, [r7, #16]

// ---------- sends CMD2 to identify card
#define SDHC_CMD2_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD2) | SDHC_XFERTYP_CCCEN \
                          | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_136))
//
static int sd_CMD2_Identify(void){  return sd_CMD(SDHC_CMD2_XFERTYP,0); }
    137a:	bl	1060 <sd_CMD(unsigned long, unsigned long)>
      sdCardDesc.highCapacity = 0;
  }

  // Card identify
  SDHC_CMDRSP0=SDHC_CMDRSP1=SDHC_CMDRSP2=SDHC_CMDRSP3=0;
  if (sd_CMD2_Identify())  return sdCardDesc.status = SDHC_STATUS_NOINIT;
    137e:	mov	r1, r0
    1380:	cmp	r0, #0
    1382:	bne.n	12b2 <sd_CardInit()+0x192>

// ---------- sends CMD 3 to get address
#define SDHC_CMD3_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD3) | SDHC_XFERTYP_CICEN | \
                         SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48))
//
static int sd_CMD3_GetAddress(void){  return sd_CMD(SDHC_CMD3_XFERTYP,0); }
    1384:	ldr	r0, [pc, #308]	; (14bc <sd_CardInit()+0x39c>)
    1386:	bl	1060 <sd_CMD(unsigned long, unsigned long)>
  // Card identify
  SDHC_CMDRSP0=SDHC_CMDRSP1=SDHC_CMDRSP2=SDHC_CMDRSP3=0;
  if (sd_CMD2_Identify())  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  // Get card address
  if (sd_CMD3_GetAddress())  return sdCardDesc.status = SDHC_STATUS_NOINIT;
    138a:	cmp	r0, #0
    138c:	bne.n	12b2 <sd_CardInit()+0x192>

  sdCardDesc.address = SDHC_CMDRSP0 & 0xFFFF0000;
    138e:	ldr	r3, [r7, #16]
    1390:	ldr	r4, [pc, #300]	; (14c0 <sd_CardInit()+0x3a0>)
#define SDHC_CMD9_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD9) | SDHC_XFERTYP_CCCEN | \
             SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_136))
//
static int sd_CMD9_GetParameters(uint32_t address)
{
  int result = sd_CMD(SDHC_CMD9_XFERTYP, address);
    1392:	ldr	r0, [pc, #304]	; (14c4 <sd_CardInit()+0x3a4>)
  if (sd_CMD2_Identify())  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  // Get card address
  if (sd_CMD3_GetAddress())  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  sdCardDesc.address = SDHC_CMDRSP0 & 0xFFFF0000;
    1394:	ands	r4, r3
    1396:	ldr	r5, [pc, #304]	; (14c8 <sd_CardInit()+0x3a8>)
#define SDHC_CMD9_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD9) | SDHC_XFERTYP_CCCEN | \
             SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_136))
//
static int sd_CMD9_GetParameters(uint32_t address)
{
  int result = sd_CMD(SDHC_CMD9_XFERTYP, address);
    1398:	mov	r1, r4
  if (sd_CMD2_Identify())  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  // Get card address
  if (sd_CMD3_GetAddress())  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  sdCardDesc.address = SDHC_CMDRSP0 & 0xFFFF0000;
    139a:	str	r4, [r6, #4]
#define SDHC_CMD9_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD9) | SDHC_XFERTYP_CCCEN | \
             SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_136))
//
static int sd_CMD9_GetParameters(uint32_t address)
{
  int result = sd_CMD(SDHC_CMD9_XFERTYP, address);
    139c:	bl	1060 <sd_CMD(unsigned long, unsigned long)>
  if (result == SDHC_RESULT_OK) { sdCardDesc.tranSpeed = SDHC_CMDRSP2 >> 24;}
    13a0:	cmp	r0, #0
    13a2:	bne.n	12b2 <sd_CardInit()+0x192>
    13a4:	ldr	r3, [r7, #24]
    13a6:	lsrs	r3, r3, #24
    13a8:	strb	r3, [r5, #3]
  sdCardDesc.address = SDHC_CMDRSP0 & 0xFFFF0000;

  // Get card parameters
  if (sd_CMD9_GetParameters(sdCardDesc.address))  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  if (!(SDHC_CMDRSP3 & 0x00C00000)) {
    13aa:	ldr	r3, [r7, #28]
    13ac:	tst.w	r3, #12582912	; 0xc00000
    13b0:	bne.n	1492 <sd_CardInit()+0x372>
    uint32_t read_bl_len, c_size, c_size_mult;

    read_bl_len = (SDHC_CMDRSP2 >> 8) & 0x0F;
    13b2:	ldr	r1, [r7, #24]
    c_size = SDHC_CMDRSP2 & 0x03;
    13b4:	ldr	r3, [r7, #24]
    c_size = (c_size << 10) | (SDHC_CMDRSP1 >> 22);
    13b6:	ldr	r0, [r7, #20]
    c_size_mult = (SDHC_CMDRSP1 >> 7) & 0x07;
    sdCardDesc.numBlocks = (c_size + 1) * (1 << (c_size_mult + 2)) * (1 << (read_bl_len - 9));
    13b8:	ubfx	r1, r1, #8, #4
    13bc:	lsls	r2, r3, #10
    uint32_t read_bl_len, c_size, c_size_mult;

    read_bl_len = (SDHC_CMDRSP2 >> 8) & 0x0F;
    c_size = SDHC_CMDRSP2 & 0x03;
    c_size = (c_size << 10) | (SDHC_CMDRSP1 >> 22);
    c_size_mult = (SDHC_CMDRSP1 >> 7) & 0x07;
    13be:	ldr	r3, [r7, #20]
    sdCardDesc.numBlocks = (c_size + 1) * (1 << (c_size_mult + 2)) * (1 << (read_bl_len - 9));
    13c0:	subs	r1, #9
    13c2:	and.w	r2, r2, #3072	; 0xc00
    13c6:	ubfx	r3, r3, #7, #3
    13ca:	orr.w	r2, r2, r0, lsr #22
    13ce:	adds	r3, #2
    13d0:	adds	r2, #1
    13d2:	lsl.w	r3, r2, r3
    13d6:	lsls	r3, r1
    13d8:	str	r3, [r5, #8]
             
// ---------- sends CMD 7 to select card
#define SDHC_CMD7_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD7) | SDHC_XFERTYP_CICEN | \
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48BUSY))
//
static int sd_CMD7_SelectCard(uint32_t address){  return sd_CMD(SDHC_CMD7_XFERTYP, address);}
    13da:	mov	r1, r4
    13dc:	ldr	r0, [pc, #236]	; (14cc <sd_CardInit()+0x3ac>)
    13de:	bl	1060 <sd_CMD(unsigned long, unsigned long)>
    c_size = (SDHC_CMDRSP1 >> 8) & 0x003FFFFF;
    sdCardDesc.numBlocks = (c_size + 1) << 10;
  }

  // Select card
  if (sd_CMD7_SelectCard(sdCardDesc.address)) return sdCardDesc.status = SDHC_STATUS_NOINIT;
    13e2:	cmp	r0, #0
    13e4:	bne.w	12b2 <sd_CardInit()+0x192>

// ---------- sends CMD16 to set block size
#define SDHC_CMD16_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD16) | SDHC_XFERTYP_CICEN | \
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48))
//
static int sd_CMD16_SetBlockSize(uint32_t block_size){  return sd_CMD(SDHC_CMD16_XFERTYP, block_size);}
    13e8:	mov.w	r1, #512	; 0x200
    13ec:	ldr	r0, [pc, #224]	; (14d0 <sd_CardInit()+0x3b0>)
    13ee:	bl	1060 <sd_CMD(unsigned long, unsigned long)>

  // Select card
  if (sd_CMD7_SelectCard(sdCardDesc.address)) return sdCardDesc.status = SDHC_STATUS_NOINIT;

  // Set 512 Block size in SD card
  if (sd_CMD16_SetBlockSize(SDHC_BLOCK_SIZE))  return sdCardDesc.status = SDHC_STATUS_NOINIT;
    13f2:	cmp	r0, #0
    13f4:	bne.w	12b2 <sd_CardInit()+0x192>
// ---------- sends ACMD6 to set bus width
#define SDHC_ACMD6_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_ACMD6) | SDHC_XFERTYP_CICEN | \
             SDHC_XFERTYP_CCCEN | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48))
//
static int sd_ACMD6_SetBusWidth(uint32_t address, uint32_t width) 
{ return sd_ACMD(SDHC_ACMD6_XFERTYP,address, width); }
    13f8:	mov	r1, r4
    13fa:	movs	r2, #2
    13fc:	ldr	r0, [pc, #212]	; (14d4 <sd_CardInit()+0x3b4>)
    13fe:	bl	10bc <sd_ACMD(unsigned long, unsigned long, unsigned long)>

  // Set 512 Block size in SD card
  if (sd_CMD16_SetBlockSize(SDHC_BLOCK_SIZE))  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  // Set 4 bit data bus width
  if (sd_ACMD6_SetBusWidth(sdCardDesc.address, 2))  return sdCardDesc.status = SDHC_STATUS_NOINIT;
    1402:	mov	r5, r0
    1404:	cmp	r0, #0
    1406:	bne.w	12b2 <sd_CardInit()+0x192>

  // Set Data bus width also in SDHC controller
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    140a:	ldr	r2, [pc, #160]	; (14ac <sd_CardInit()+0x38c>)
    }
  }
  
  static void sd_ReleaseGPIO(void)
  {
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 5; //GPIO3_IO16
    140c:	movs	r3, #5
    140e:	ldr	r4, [pc, #200]	; (14d8 <sd_CardInit()+0x3b8>)
  
  // De-Init GPIO
  sd_ReleaseGPIO();

  // Set the SDHC default baud rate
  setSdclk(60000);
    1410:	movw	r0, #60000	; 0xea60

  // Set 4 bit data bus width
  if (sd_ACMD6_SetBusWidth(sdCardDesc.address, 2))  return sdCardDesc.status = SDHC_STATUS_NOINIT;

  // Set Data bus width also in SDHC controller
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    1414:	ldr	r1, [r2, #40]	; 0x28
    1416:	bic.w	r1, r1, #6
    141a:	str	r1, [r2, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    141c:	ldr	r1, [r2, #40]	; 0x28
    141e:	orr.w	r1, r1, #2
    1422:	str	r1, [r2, #40]	; 0x28
    }
  }
  
  static void sd_ReleaseGPIO(void)
  {
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 5; //GPIO3_IO16
    1424:	str.w	r3, [r4, #460]	; 0x1cc
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = 5; //GPIO3_IO17
    1428:	str.w	r3, [r4, #464]	; 0x1d0
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = 5; //GPIO3_IO12
    142c:	str.w	r3, [r4, #444]	; 0x1bc
    //3.3V
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = 5; //GPIO3_IO13
    1430:	str.w	r3, [r4, #448]	; 0x1c0
    //GND
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = 5; //GPIO3_IO14
    1434:	str.w	r3, [r4, #452]	; 0x1c4
    IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = 5; //GPIO3_IO15
    1438:	str.w	r3, [r4, #456]	; 0x1c8
  
  // De-Init GPIO
  sd_ReleaseGPIO();

  // Set the SDHC default baud rate
  setSdclk(60000);
    143c:	bl	f5c <setSdclk(unsigned long)>
                                  IOMUXC_SW_PAD_CTL_PAD_SPEED(2);
  
      const uint32_t DATA_MASK = CLOCK_MASK |
                                 (IOMUXC_SW_PAD_CTL_PAD_PUE | IOMUXC_SW_PAD_CTL_PAD_PUS(1));
  
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;
    1440:	movw	r3, #28808	; 0x7088
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;
    1444:	movw	r2, #4232	; 0x1088
#else

  static void sd_InitGPIO(void)
  {
    { //T4                              // Inverted pins(T4)
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = 0; //DAT2  
    1448:	str.w	r5, [r4, #460]	; 0x1cc
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = 0; //DAT3  
    144c:	str.w	r5, [r4, #464]	; 0x1d0
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = 0; //CMD   
    1450:	str.w	r5, [r4, #444]	; 0x1bc
      //3.3V                                           
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = 0; //CLK   
    1454:	str.w	r5, [r4, #448]	; 0x1c0
      //GND                                           
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = 0; //DAT0 
    1458:	str.w	r5, [r4, #452]	; 0x1c4
      IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = 0; //DAT1 
    145c:	str.w	r5, [r4, #456]	; 0x1c8
                                  IOMUXC_SW_PAD_CTL_PAD_SPEED(2);
  
      const uint32_t DATA_MASK = CLOCK_MASK |
                                 (IOMUXC_SW_PAD_CTL_PAD_PUE | IOMUXC_SW_PAD_CTL_PAD_PUS(1));
  
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;
    1460:	str.w	r3, [r4, #956]	; 0x3bc
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;
    1464:	str.w	r3, [r4, #960]	; 0x3c0
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;
    1468:	str.w	r3, [r4, #940]	; 0x3ac
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;
    146c:	str.w	r2, [r4, #944]	; 0x3b0
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;
    1470:	str.w	r3, [r4, #948]	; 0x3b4
      IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;
    1474:	str.w	r3, [r4, #952]	; 0x3b8
  // and SDHC_SetClock() for 50 MHz config

  // Init GPIO
  sd_InitGPIO();

  return sdCardDesc.status;
    1478:	ldrb	r0, [r6, #0]
    147a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  resR = sd_CMD8_SetInterface(0x000001AA); // 3.3V and AA check pattern
  if (resR == SDHC_RESULT_OK) 
  { if (!((SDHC_CMDRSP0 & 0x000001AA)== 0x000001AA)) return sdCardDesc.status = SDHC_STATUS_NOINIT;
    sdCardDesc.highCapacity = 1;
  } 
  else if (resR == SDHC_RESULT_NO_RESPONSE) 
    147e:	cmp	r0, #5
    1480:	beq.w	1310 <sd_CardInit()+0x1f0>
    SDHC_MIX_CTRL = mixCtrl;
  #endif

  resR = sd_CMD0_GoToIdle();

  if (resR) { return sdCardDesc.status = SDHC_STATUS_NOINIT;}
    1484:	movs	r0, #1
    1486:	strb	r0, [r6, #0]
    1488:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    148c:	movs	r0, #1
    148e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c_size = (c_size << 10) | (SDHC_CMDRSP1 >> 22);
    c_size_mult = (SDHC_CMDRSP1 >> 7) & 0x07;
    sdCardDesc.numBlocks = (c_size + 1) * (1 << (c_size_mult + 2)) * (1 << (read_bl_len - 9));
  } else {
    uint32_t c_size;
    sdCardDesc.version2 = 1;
    1492:	movs	r3, #1
    1494:	strb	r3, [r5, #2]
    c_size = (SDHC_CMDRSP1 >> 8) & 0x003FFFFF;
    1496:	ldr	r3, [r7, #20]
    sdCardDesc.numBlocks = (c_size + 1) << 10;
    1498:	ubfx	r3, r3, #8, #22
    149c:	adds	r3, #1
    149e:	lsls	r3, r3, #10
    14a0:	str	r3, [r5, #8]
    14a2:	b.n	13da <sd_CardInit()+0x2ba>
    14a4:	.word	0x081a0000
    14a8:	.word	0x29020000
    14ac:	.word	0x402c0000
    14b0:	.word	0x40300000
    14b4:	.word	0x0001869f
    14b8:	.word	0x02090000
    14bc:	.word	0x031a0000
    14c0:	.word	0xffff0000
    14c4:	.word	0x09090000
    14c8:	.word	0x20001c68
    14cc:	.word	0x071b0000
    14d0:	.word	0x101a0000
    14d4:	.word	0x061a0000
    14d8:	.word	0x401f8000

000014dc <SDHC_disk_initialize>:
DSTATUS SDHC_disk_status()
{	return (DSTATUS) sdCardDesc.status;
}

DSTATUS SDHC_disk_initialize()
{	return (DSTATUS) sd_CardInit();
    14dc:	b.w	1120 <sd_CardInit()>

000014e0 <sd_CardReadBlocks(void*, unsigned long, unsigned long)>:
  int result=0;
  // unused // uint32_t* pData = (uint32_t*)buff;

  
  // Convert LBA to BYTE address if needed
  if (!sdCardDesc.highCapacity)  sector *= 512;
    14e0:	ldr	r3, [pc, #240]	; (15d4 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0xf4>)
#define SDHC_CMD18_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD18) | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) \
                            | SDHC_XFERTYP_DPSEL | SDHC_XFERTYP_DMAEN | SDHC_XFERTYP_DTDSEL \
                            | SDHC_XFERTYP_AC12EN| SDHC_XFERTYP_BCEN | SDHC_XFERTYP_MSBSEL )
//
int sd_CardReadBlocks(void * buff, uint32_t sector, uint32_t count)
{
    14e2:	push	{r4, r5, r6, r7, lr}
  int result=0;
  // unused // uint32_t* pData = (uint32_t*)buff;

  
  // Convert LBA to BYTE address if needed
  if (!sdCardDesc.highCapacity)  sector *= 512;
    14e4:	ldrb	r4, [r3, #1]
    14e6:	cbnz	r4, 14ea <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0xa>
    14e8:	lsls	r1, r1, #9

  // Check if this is ready
  if (sdCardDesc.status != 0) return SDHC_RESULT_NOT_READY;
    14ea:	ldrb	r3, [r3, #0]
    14ec:	cbz	r3, 14f2 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0x12>
    14ee:	movs	r0, #3
    14f0:	pop	{r4, r5, r6, r7, pc}

	while(SDHC_PRSSTAT & (SDHC_PRSSTAT_CIHB | SDHC_PRSSTAT_CDIHB | SDHC_PRSSTAT_DLA)) ;
    14f2:	ldr	r5, [pc, #228]	; (15d8 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0xf8>)
    14f4:	ldr	r3, [r5, #36]	; 0x24
    14f6:	ldr	r4, [pc, #224]	; (15d8 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0xf8>)
    14f8:	ands.w	r3, r3, #7
    14fc:	bne.n	14f4 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0x14>

  // clear status
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    14fe:	ldr	r5, [r4, #48]	; 0x30
    SDHC_MIX_CTRL |= SDHC_MIX_CTRL_DTDSEL ; // read
    SDHC_MIX_CTRL |= SDHC_MIX_CTRL_DMAEN ; // DMA
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_BCEN; // Block Count
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    if(count>1)
    1500:	cmp	r2, #1
  SDHC_IRQSTAT = SDHC_IRQSTAT;
  
  // use dma: disabling polling
  uint32_t irqstat = SDHC_IRQSTATEN;
  irqstat &= ~(SDHC_IRQSTATEN_BRRSEN | SDHC_IRQSTATEN_BWRSEN | SDHC_IRQSTATEN_CCSEN) ;
  irqstat &= ~(SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_CCESEN) ;
    1502:	ldr	r7, [pc, #216]	; (15dc <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0xfc>)
  if (sdCardDesc.status != 0) return SDHC_RESULT_NOT_READY;

	while(SDHC_PRSSTAT & (SDHC_PRSSTAT_CIHB | SDHC_PRSSTAT_CDIHB | SDHC_PRSSTAT_DLA)) ;

  // clear status
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    1504:	str	r5, [r4, #48]	; 0x30
  
  // use dma: disabling polling
  uint32_t irqstat = SDHC_IRQSTATEN;
    1506:	ldr	r5, [r4, #52]	; 0x34
  irqstat &= ~(SDHC_IRQSTATEN_BRRSEN | SDHC_IRQSTATEN_BWRSEN | SDHC_IRQSTATEN_CCSEN) ;
  irqstat &= ~(SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_CCESEN) ;
  // enable status
  irqstat |= /*SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_CCESEN |*/ SDHC_IRQSTATEN_DMAESEN ; 
  irqstat |= SDHC_IRQSTATEN_DINTSEN | SDHC_IRQSTATEN_TCSEN ;//| SDHC_IRQSTATEN_CCSEN ; 
    1508:	ldr	r6, [pc, #212]	; (15e0 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0x100>)
  SDHC_IRQSTAT = SDHC_IRQSTAT;
  
  // use dma: disabling polling
  uint32_t irqstat = SDHC_IRQSTATEN;
  irqstat &= ~(SDHC_IRQSTATEN_BRRSEN | SDHC_IRQSTATEN_BWRSEN | SDHC_IRQSTATEN_CCSEN) ;
  irqstat &= ~(SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_CCESEN) ;
    150a:	and.w	r7, r7, r5
  irqstat |= /*SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_CCESEN |*/ SDHC_IRQSTATEN_DMAESEN ; 
  irqstat |= SDHC_IRQSTATEN_DINTSEN | SDHC_IRQSTATEN_TCSEN ;//| SDHC_IRQSTATEN_CCSEN ; 
  SDHC_IRQSTATEN = irqstat;
  
  uint32_t sigen = SDHC_IRQSIGEN;
  sigen |= SDHC_IRQSIGEN_DMA_MASK ;
    150e:	mov	r5, r6
  uint32_t irqstat = SDHC_IRQSTATEN;
  irqstat &= ~(SDHC_IRQSTATEN_BRRSEN | SDHC_IRQSTATEN_BWRSEN | SDHC_IRQSTATEN_CCSEN) ;
  irqstat &= ~(SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_CCESEN) ;
  // enable status
  irqstat |= /*SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_CCESEN |*/ SDHC_IRQSTATEN_DMAESEN ; 
  irqstat |= SDHC_IRQSTATEN_DINTSEN | SDHC_IRQSTATEN_TCSEN ;//| SDHC_IRQSTATEN_CCSEN ; 
    1510:	orr.w	r6, r6, r7
  SDHC_IRQSTATEN = irqstat;
    1514:	str	r6, [r4, #52]	; 0x34
  
  uint32_t sigen = SDHC_IRQSIGEN;
    1516:	ldr	r6, [r4, #56]	; 0x38
  sigen |= SDHC_IRQSIGEN_DMA_MASK ;
    1518:	orr.w	r5, r5, r6
  SDHC_IRQSIGEN = sigen;
    151c:	str	r5, [r4, #56]	; 0x38
  
  SDHC_SYSCTL |= SDHC_SYSCTL_HCKEN;
    151e:	ldr	r5, [r4, #44]	; 0x2c
    1520:	orr.w	r5, r5, #2
    1524:	str	r5, [r4, #44]	; 0x2c
  #if defined(__IMXRT1052__) || defined(__IMXRT1062__)
    
    SDHC_MIX_CTRL |= SDHC_MIX_CTRL_DTDSEL ; // read
    1526:	ldr	r5, [r4, #72]	; 0x48
    1528:	orr.w	r5, r5, #16
    152c:	str	r5, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= SDHC_MIX_CTRL_DMAEN ; // DMA
    152e:	ldr	r5, [r4, #72]	; 0x48
    1530:	orr.w	r5, r5, #1
    1534:	str	r5, [r4, #72]	; 0x48
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_BCEN; // Block Count
    1536:	ldr	r5, [r4, #72]	; 0x48
    1538:	bic.w	r5, r5, #2
    153c:	str	r5, [r4, #72]	; 0x48
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    153e:	ldr	r5, [r4, #72]	; 0x48
    1540:	bic.w	r5, r5, #32
    1544:	str	r5, [r4, #72]	; 0x48
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    1546:	ldr	r5, [r4, #72]	; 0x48
    1548:	bic.w	r5, r5, #4
    154c:	str	r5, [r4, #72]	; 0x48
    if(count>1)
    154e:	bls.n	15ac <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0xcc>
    {
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
    1550:	ldr	r7, [r4, #72]	; 0x48
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    1552:	lsls	r5, r2, #16
    1554:	ldr	r6, [pc, #140]	; (15e4 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0x104>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_BCEN; // Block Count
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    if(count>1)
    {
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
    1556:	orr.w	r7, r7, #2
  dmaDone=0;
  SDHC_DSADDR  = (uint32_t)buff;

  // send command
    SDHC_CMDARG = sector;
    SDHC_XFERTYP = count==1 ? SDHC_CMD17_XFERTYP: SDHC_CMD18_XFERTYP; 
    155a:	ldr.w	lr, [pc, #144]	; 15ec <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0x10c>
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    155e:	ands	r6, r5

  // enable DMA
  dmaDone=0;
    1560:	ldr	r5, [pc, #132]	; (15e8 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0x108>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_BCEN; // Block Count
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    if(count>1)
    {
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
    1562:	str	r7, [r4, #72]	; 0x48
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    1564:	ldr	r7, [r4, #72]	; 0x48
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    1566:	orr.w	r6, r6, #512	; 0x200
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    if(count>1)
    {
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    156a:	orr.w	r7, r7, #32
    156e:	str	r7, [r4, #72]	; 0x48
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    1570:	ldr	r7, [r4, #72]	; 0x48
    1572:	orr.w	r7, r7, #4
    1576:	str	r7, [r4, #72]	; 0x48
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    1578:	str	r6, [r4, #4]

  // enable DMA
  dmaDone=0;
    157a:	str	r3, [r5, #0]
  SDHC_DSADDR  = (uint32_t)buff;
    157c:	str	r0, [r4, #0]

  // send command
    SDHC_CMDARG = sector;
    157e:	str	r1, [r4, #8]
    SDHC_XFERTYP = count==1 ? SDHC_CMD17_XFERTYP: SDHC_CMD18_XFERTYP; 
    1580:	ldr	r3, [pc, #84]	; (15d8 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0xf8>)
    1582:	str.w	lr, [r3, #12]

  // wait for DMA
  while(!dmaDone);
    1586:	ldr	r3, [r5, #0]
    1588:	cmp	r3, #0
    158a:	beq.n	1586 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0xa6>
  SDHC_IRQSTAT &= (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_TC);
    158c:	ldr	r3, [pc, #72]	; (15d8 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0xf8>)

	// Auto CMD12 is enabled for DMA so call it if DMA error
	if((SDHC_DSADDR < (uint32_t)((uint8_t *)buff+(count*512))) && (count>1))
    158e:	add.w	r0, r0, r2, lsl #9
    SDHC_CMDARG = sector;
    SDHC_XFERTYP = count==1 ? SDHC_CMD17_XFERTYP: SDHC_CMD18_XFERTYP; 

  // wait for DMA
  while(!dmaDone);
  SDHC_IRQSTAT &= (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_TC);
    1592:	ldr	r1, [r3, #48]	; 0x30
    1594:	and.w	r1, r1, #3
    1598:	str	r1, [r3, #48]	; 0x30

	// Auto CMD12 is enabled for DMA so call it if DMA error
	if((SDHC_DSADDR < (uint32_t)((uint8_t *)buff+(count*512))) && (count>1))
    159a:	ldr	r3, [r3, #0]
    159c:	cmp	r3, r0
    159e:	bcs.n	15d0 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0xf0>
    15a0:	cmp	r2, #1
    15a2:	bls.n	15d0 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0xf0>
		result=sd_CMD12_StopTransferWaitForBusy();

  return result;
}
    15a4:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  while(!dmaDone);
  SDHC_IRQSTAT &= (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_TC);

	// Auto CMD12 is enabled for DMA so call it if DMA error
	if((SDHC_DSADDR < (uint32_t)((uint8_t *)buff+(count*512))) && (count>1))
		result=sd_CMD12_StopTransferWaitForBusy();
    15a8:	b.w	10dc <sd_CMD12_StopTransferWaitForBusy()>
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    15ac:	mov.w	r7, r2, lsl #16
    15b0:	ldr	r6, [pc, #48]	; (15e4 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0x104>)

  // enable DMA
  dmaDone=0;
    15b2:	ldr	r5, [pc, #52]	; (15e8 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0x108>)
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    15b4:	and.w	r6, r6, r7
  dmaDone=0;
  SDHC_DSADDR  = (uint32_t)buff;

  // send command
    SDHC_CMDARG = sector;
    SDHC_XFERTYP = count==1 ? SDHC_CMD17_XFERTYP: SDHC_CMD18_XFERTYP; 
    15b8:	ite	ne
    15ba:	ldrne.w	lr, [pc, #48]	; 15ec <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0x10c>
    15be:	ldreq.w	lr, [pc, #48]	; 15f0 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0x110>
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    15c2:	orr.w	r6, r6, #512	; 0x200
    15c6:	str	r6, [r4, #4]

  // enable DMA
  dmaDone=0;
    15c8:	str	r3, [r5, #0]
  SDHC_DSADDR  = (uint32_t)buff;
    15ca:	str	r0, [r4, #0]

  // send command
    SDHC_CMDARG = sector;
    15cc:	str	r1, [r4, #8]
    15ce:	b.n	1580 <sd_CardReadBlocks(void*, unsigned long, unsigned long)+0xa0>
                            | SDHC_XFERTYP_DPSEL | SDHC_XFERTYP_DMAEN | SDHC_XFERTYP_DTDSEL \
                            | SDHC_XFERTYP_AC12EN| SDHC_XFERTYP_BCEN | SDHC_XFERTYP_MSBSEL )
//
int sd_CardReadBlocks(void * buff, uint32_t sector, uint32_t count)
{
  int result=0;
    15d0:	movs	r0, #0
    15d2:	pop	{r4, r5, r6, r7, pc}
    15d4:	.word	0x20001c68
    15d8:	.word	0x402c0000
    15dc:	.word	0xffddffce
    15e0:	.word	0x1000000a
    15e4:	.word	0x1fff0000
    15e8:	.word	0x20001c84
    15ec:	.word	0x12220037
    15f0:	.word	0x11220013

000015f4 <SDHC_disk_read>:
DSTATUS SDHC_disk_initialize()
{	return (DSTATUS) sd_CardInit();
}

DRESULT SDHC_disk_read(BYTE *buff, DWORD sector, UINT count)
{	return (DRESULT) sd_CardReadBlocks((void *) buff, (uint32_t) sector, (uint32_t) count);
    15f4:	push	{r3, lr}
    15f6:	bl	14e0 <sd_CardReadBlocks(void*, unsigned long, unsigned long)>
}
    15fa:	uxtb	r0, r0
    15fc:	pop	{r3, pc}
    15fe:	nop

00001600 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)>:
#define SDHC_CMD25_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD25) |SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) \
                            | SDHC_XFERTYP_DPSEL | SDHC_XFERTYP_DMAEN \
                            | SDHC_XFERTYP_AC12EN| SDHC_XFERTYP_BCEN | SDHC_XFERTYP_MSBSEL )
//
int sd_CardWriteBlocks(const void * buff, uint32_t sector, uint32_t count)
{
    1600:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int result=0;
  // unused // const uint32_t *pData = (const uint32_t *)buff;

  // Convert LBA to uint8_t address if needed
  if (!sdCardDesc.highCapacity) sector *= 512;
    1604:	ldr	r5, [pc, #312]	; (1740 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x140>)
#define SDHC_CMD25_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD25) |SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48) \
                            | SDHC_XFERTYP_DPSEL | SDHC_XFERTYP_DMAEN \
                            | SDHC_XFERTYP_AC12EN| SDHC_XFERTYP_BCEN | SDHC_XFERTYP_MSBSEL )
//
int sd_CardWriteBlocks(const void * buff, uint32_t sector, uint32_t count)
{
    1606:	mov	r6, r2
  int result=0;
  // unused // const uint32_t *pData = (const uint32_t *)buff;

  // Convert LBA to uint8_t address if needed
  if (!sdCardDesc.highCapacity) sector *= 512;
    1608:	ldrb	r3, [r5, #1]
    160a:	cbnz	r3, 160e <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0xe>
    160c:	lsls	r1, r1, #9

  // Check if this is ready
  if (sdCardDesc.status != 0) return SDHC_RESULT_NOT_READY;
    160e:	ldrb	r3, [r5, #0]
    1610:	cbz	r3, 1618 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x18>
    1612:	movs	r0, #3
    1614:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	while(SDHC_PRSSTAT & (SDHC_PRSSTAT_CIHB | SDHC_PRSSTAT_CDIHB | SDHC_PRSSTAT_DLA)) ;
    1618:	ldr	r4, [pc, #296]	; (1744 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x144>)
    161a:	ldr	r3, [r4, #36]	; 0x24
    161c:	ldr	r2, [pc, #292]	; (1744 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x144>)
    161e:	ands.w	r3, r3, #7
    1622:	bne.n	161a <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x1a>

  // clear status
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    1624:	ldr	r4, [r2, #48]	; 0x30
    SDHC_MIX_CTRL &= ~ SDHC_MIX_CTRL_DTDSEL;  // write
    SDHC_MIX_CTRL |=  SDHC_MIX_CTRL_DMAEN ;   //DMA
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_BCEN; // Block Count
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    if(count>1)
    1626:	cmp	r6, #1
  SDHC_IRQSTAT = SDHC_IRQSTAT;

  uint32_t irqstat = SDHC_IRQSTATEN;
  // use dma: disabling polling
  irqstat &= ~(SDHC_IRQSTATEN_BRRSEN | SDHC_IRQSTATEN_BWRSEN | SDHC_IRQSTATEN_CCSEN) ;
  irqstat &= ~(SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_CCESEN) ;
    1628:	ldr.w	lr, [pc, #304]	; 175c <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x15c>
  if (sdCardDesc.status != 0) return SDHC_RESULT_NOT_READY;

	while(SDHC_PRSSTAT & (SDHC_PRSSTAT_CIHB | SDHC_PRSSTAT_CDIHB | SDHC_PRSSTAT_DLA)) ;

  // clear status
  SDHC_IRQSTAT = SDHC_IRQSTAT;
    162c:	str	r4, [r2, #48]	; 0x30

  uint32_t irqstat = SDHC_IRQSTATEN;
    162e:	ldr	r4, [r2, #52]	; 0x34
  // use dma: disabling polling
  irqstat &= ~(SDHC_IRQSTATEN_BRRSEN | SDHC_IRQSTATEN_BWRSEN | SDHC_IRQSTATEN_CCSEN) ;
  irqstat &= ~(SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_CCESEN) ;
  // enable status
  irqstat |= SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_CCESEN | SDHC_IRQSTATEN_DMAESEN ; 
  irqstat |= SDHC_IRQSTATEN_DINTSEN | SDHC_IRQSTATEN_TCSEN ;//| SDHC_IRQSTATEN_CCSEN ; 
    1630:	ldr	r7, [pc, #276]	; (1748 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x148>)
  SDHC_IRQSTAT = SDHC_IRQSTAT;

  uint32_t irqstat = SDHC_IRQSTATEN;
  // use dma: disabling polling
  irqstat &= ~(SDHC_IRQSTATEN_BRRSEN | SDHC_IRQSTATEN_BWRSEN | SDHC_IRQSTATEN_CCSEN) ;
  irqstat &= ~(SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_CCESEN) ;
    1632:	and.w	lr, r4, lr
  irqstat |= SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_CCESEN | SDHC_IRQSTATEN_DMAESEN ; 
  irqstat |= SDHC_IRQSTATEN_DINTSEN | SDHC_IRQSTATEN_TCSEN ;//| SDHC_IRQSTATEN_CCSEN ; 
  SDHC_IRQSTATEN = irqstat;
  
  uint32_t sigen = SDHC_IRQSIGEN;
  sigen |= SDHC_IRQSIGEN_DMA_MASK ;
    1636:	ldr	r4, [pc, #276]	; (174c <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x14c>)
  // use dma: disabling polling
  irqstat &= ~(SDHC_IRQSTATEN_BRRSEN | SDHC_IRQSTATEN_BWRSEN | SDHC_IRQSTATEN_CCSEN) ;
  irqstat &= ~(SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_CCESEN) ;
  // enable status
  irqstat |= SDHC_IRQSTATEN_DCESEN | SDHC_IRQSTATEN_CCESEN | SDHC_IRQSTATEN_DMAESEN ; 
  irqstat |= SDHC_IRQSTATEN_DINTSEN | SDHC_IRQSTATEN_TCSEN ;//| SDHC_IRQSTATEN_CCSEN ; 
    1638:	orr.w	r7, lr, r7
  SDHC_IRQSTATEN = irqstat;
    163c:	str	r7, [r2, #52]	; 0x34
  
  uint32_t sigen = SDHC_IRQSIGEN;
    163e:	ldr	r7, [r2, #56]	; 0x38
  sigen |= SDHC_IRQSIGEN_DMA_MASK ;
    1640:	orr.w	r4, r4, r7
  SDHC_IRQSIGEN = sigen;
    1644:	str	r4, [r2, #56]	; 0x38
  
  SDHC_SYSCTL |= SDHC_SYSCTL_HCKEN;
    1646:	ldr	r4, [r2, #44]	; 0x2c
    1648:	orr.w	r4, r4, #2
    164c:	str	r4, [r2, #44]	; 0x2c
  #if defined(__IMXRT1052__) || defined(__IMXRT1062__)
    SDHC_MIX_CTRL &= ~ SDHC_MIX_CTRL_DTDSEL;  // write
    164e:	ldr	r4, [r2, #72]	; 0x48
    1650:	bic.w	r4, r4, #16
    1654:	str	r4, [r2, #72]	; 0x48
    SDHC_MIX_CTRL |=  SDHC_MIX_CTRL_DMAEN ;   //DMA
    1656:	ldr	r4, [r2, #72]	; 0x48
    1658:	orr.w	r4, r4, #1
    165c:	str	r4, [r2, #72]	; 0x48
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_BCEN; // Block Count
    165e:	ldr	r4, [r2, #72]	; 0x48
    1660:	bic.w	r4, r4, #2
    1664:	str	r4, [r2, #72]	; 0x48
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    1666:	ldr	r4, [r2, #72]	; 0x48
    1668:	bic.w	r4, r4, #32
    166c:	str	r4, [r2, #72]	; 0x48
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    166e:	ldr	r4, [r2, #72]	; 0x48
    1670:	bic.w	r4, r4, #4
    1674:	str	r4, [r2, #72]	; 0x48
    if(count>1)
    1676:	bls.n	171a <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x11a>
    {
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
    1678:	ldr	r4, [r2, #72]	; 0x48
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    167a:	mov.w	ip, r6, lsl #16
    167e:	ldr	r7, [pc, #208]	; (1750 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x150>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_BCEN; // Block Count
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    if(count>1)
    {
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
    1680:	orr.w	lr, r4, #2
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    1684:	mov	r4, ip
  dmaDone=0;
  SDHC_DSADDR  = (uint32_t)buff;
  //
  // send write command
  SDHC_CMDARG = sector;
  SDHC_XFERTYP = count==1 ? SDHC_CMD24_XFERTYP: SDHC_CMD25_XFERTYP; 
    1686:	ldr.w	ip, [pc, #216]	; 1760 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x160>
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_BCEN; // Block Count
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    if(count>1)
    {
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
    168a:	str.w	lr, [r2, #72]	; 0x48
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    168e:	ands	r7, r4
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    if(count>1)
    {
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    1690:	ldr.w	lr, [r2, #72]	; 0x48
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);

  // enable DMA
  dmaDone=0;
    1694:	ldr	r4, [pc, #188]	; (1754 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x154>)
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    1696:	orr.w	r7, r7, #512	; 0x200
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    if(count>1)
    {
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
    169a:	orr.w	lr, lr, #32
    169e:	str.w	lr, [r2, #72]	; 0x48
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    16a2:	ldr.w	lr, [r2, #72]	; 0x48
    16a6:	orr.w	lr, lr, #4
    16aa:	str.w	lr, [r2, #72]	; 0x48
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    16ae:	str	r7, [r2, #4]

  // enable DMA
  dmaDone=0;
    16b0:	str	r3, [r4, #0]
  SDHC_DSADDR  = (uint32_t)buff;
    16b2:	str	r0, [r2, #0]
  //
  // send write command
  SDHC_CMDARG = sector;
    16b4:	str	r1, [r2, #8]
  SDHC_XFERTYP = count==1 ? SDHC_CMD24_XFERTYP: SDHC_CMD25_XFERTYP; 
    16b6:	ldr	r3, [pc, #140]	; (1744 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x144>)
    16b8:	str.w	ip, [r3, #12]
  //
  // wait for  DMA to finish
  while(!dmaDone);
    16bc:	ldr	r3, [r4, #0]
    16be:	cmp	r3, #0
    16c0:	beq.n	16bc <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0xbc>

  SDHC_IRQSTAT &= (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_TC);
    16c2:	ldr	r3, [pc, #128]	; (1744 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x144>)
    16c4:	ldr	r1, [r3, #48]	; 0x30
  while(SDHC_PRSSTAT & SDHC_PRSSTAT_DLA);
    16c6:	mov	r2, r3
  SDHC_XFERTYP = count==1 ? SDHC_CMD24_XFERTYP: SDHC_CMD25_XFERTYP; 
  //
  // wait for  DMA to finish
  while(!dmaDone);

  SDHC_IRQSTAT &= (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_TC);
    16c8:	and.w	r1, r1, #3
    16cc:	str	r1, [r3, #48]	; 0x30
  while(SDHC_PRSSTAT & SDHC_PRSSTAT_DLA);
    16ce:	ldr	r3, [r2, #36]	; 0x24
    16d0:	lsls	r0, r3, #29
    16d2:	bmi.n	16ce <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0xce>
#define CARD_STATUS_READY_FOR_DATA	(1UL << 8)
// ---------- sends CMD13 to check uSD status and wait for ready
static int sd_CMD13_WaitForReady(uint32_t address)
{ int result;
  do
  { while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) ;
    16d4:	ldr	r4, [pc, #108]	; (1744 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x144>)
    16d6:	ldr	r7, [r5, #4]
    16d8:	mov	r8, r4
    16da:	mov	r5, r4
    16dc:	ldr	r3, [r4, #36]	; 0x24
    16de:	lsls	r1, r3, #31
    16e0:	bmi.n	16dc <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0xdc>
    16e2:	ldr.w	r3, [r8, #36]	; 0x24
    16e6:	lsls	r2, r3, #30
    16e8:	bmi.n	16dc <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0xdc>
    SDHC_IRQSTATEN |= SDHC_IRQSTATEN_CCSEN;
    16ea:	ldr	r3, [r5, #52]	; 0x34
}

// ---------- sends CMD13 to check uSD status
#define SDHC_CMD13_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD13) | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48))
//
static int sd_CMD13_Check_Status(uint32_t address){  return sd_CMD(SDHC_CMD13_XFERTYP, address);}
    16ec:	mov	r1, r7
    16ee:	ldr	r0, [pc, #104]	; (1758 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x158>)
// ---------- sends CMD13 to check uSD status and wait for ready
static int sd_CMD13_WaitForReady(uint32_t address)
{ int result;
  do
  { while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) ;
    SDHC_IRQSTATEN |= SDHC_IRQSTATEN_CCSEN;
    16f0:	orr.w	r3, r3, #1
    16f4:	str	r3, [r5, #52]	; 0x34
    SDHC_IRQSTAT=SDHC_IRQSTAT;
    16f6:	ldr	r3, [r5, #48]	; 0x30
    16f8:	str	r3, [r5, #48]	; 0x30
}

// ---------- sends CMD13 to check uSD status
#define SDHC_CMD13_XFERTYP (SDHC_XFERTYP_CMDINX(SDHC_CMD13) | SDHC_XFERTYP_RSPTYP(SDHC_XFERTYP_RSPTYP_48))
//
static int sd_CMD13_Check_Status(uint32_t address){  return sd_CMD(SDHC_CMD13_XFERTYP, address);}
    16fa:	bl	1060 <sd_CMD(unsigned long, unsigned long)>
  { while ((SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB) || (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB)) ;
    SDHC_IRQSTATEN |= SDHC_IRQSTATEN_CCSEN;
    SDHC_IRQSTAT=SDHC_IRQSTAT;
    // CMD13 to check uSD status
    result = sd_CMD13_Check_Status(sdCardDesc.address);
    if (result != SDHC_RESULT_OK)  return result;
    16fe:	cbnz	r0, 170a <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x10a>
  } while(!((SDHC_CMDRSP0 & CARD_STATUS_READY_FOR_DATA)==CARD_STATUS_READY_FOR_DATA)); // while data?
    1700:	ldr	r3, [r5, #16]

#define CARD_STATUS_READY_FOR_DATA	(1UL << 8)
// ---------- sends CMD13 to check uSD status and wait for ready
static int sd_CMD13_WaitForReady(uint32_t address)
{ int result;
  do
    1702:	lsls	r3, r3, #23
    1704:	bpl.n	16dc <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0xdc>
    1706:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  //check for SD status (if data are written?)
  result = sd_CMD13_WaitForReady(sdCardDesc.address);

	// Auto CMD12 is enabled for DMA so call it when transfer error
	if((result != SDHC_RESULT_OK) && (count>1))
    170a:	cmp	r6, #1
    170c:	bls.n	1716 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x116>
		result=sd_CMD12_StopTransferWaitForBusy();
  
  return result;
}
    170e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  //check for SD status (if data are written?)
  result = sd_CMD13_WaitForReady(sdCardDesc.address);

	// Auto CMD12 is enabled for DMA so call it when transfer error
	if((result != SDHC_RESULT_OK) && (count>1))
		result=sd_CMD12_StopTransferWaitForBusy();
    1712:	b.w	10dc <sd_CMD12_StopTransferWaitForBusy()>
  
  return result;
}
    1716:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    171a:	mov.w	lr, r6, lsl #16
    171e:	ldr	r7, [pc, #48]	; (1750 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x150>)

  // enable DMA
  dmaDone=0;
    1720:	ldr	r4, [pc, #48]	; (1754 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x154>)
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    1722:	and.w	r7, lr, r7
  dmaDone=0;
  SDHC_DSADDR  = (uint32_t)buff;
  //
  // send write command
  SDHC_CMDARG = sector;
  SDHC_XFERTYP = count==1 ? SDHC_CMD24_XFERTYP: SDHC_CMD25_XFERTYP; 
    1726:	ite	eq
    1728:	ldreq.w	ip, [pc, #56]	; 1764 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x164>
    172c:	ldrne.w	ip, [pc, #48]	; 1760 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0x160>
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_BCEN; // Block Count
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_MSBSEL; //for multi block transfer
      SDHC_MIX_CTRL |= SDHC_MIX_CTRL_AC12EN; //for multi block transfer
    }
  #endif
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(count) | SDHC_BLKATTR_BLKSIZE(512);
    1730:	orr.w	r7, r7, #512	; 0x200
    1734:	str	r7, [r2, #4]

  // enable DMA
  dmaDone=0;
    1736:	str	r3, [r4, #0]
  SDHC_DSADDR  = (uint32_t)buff;
    1738:	str	r0, [r2, #0]
  //
  // send write command
  SDHC_CMDARG = sector;
    173a:	str	r1, [r2, #8]
    173c:	b.n	16b6 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)+0xb6>
    173e:	nop
    1740:	.word	0x20001c68
    1744:	.word	0x402c0000
    1748:	.word	0x1022000a
    174c:	.word	0x1000000a
    1750:	.word	0x1fff0000
    1754:	.word	0x20001c84
    1758:	.word	0x0d020000
    175c:	.word	0xffddffce
    1760:	.word	0x19220027
    1764:	.word	0x18220003

00001768 <SDHC_disk_write>:
DRESULT SDHC_disk_read(BYTE *buff, DWORD sector, UINT count)
{	return (DRESULT) sd_CardReadBlocks((void *) buff, (uint32_t) sector, (uint32_t) count);
}

DRESULT SDHC_disk_write(const BYTE *buff, DWORD sector, UINT count)
{	return (DRESULT) sd_CardWriteBlocks((void *) buff, (uint32_t) sector, (uint32_t) count);
    1768:	push	{r3, lr}
    176a:	bl	1600 <sd_CardWriteBlocks(void const*, unsigned long, unsigned long)>
}
    176e:	uxtb	r0, r0
    1770:	pop	{r3, pc}
    1772:	nop

00001774 <sd_chipSelect(unsigned short) [clone .part.0]>:

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
	if(m_chipSelectPin<0) return;
//
  if(high_low==HIGH)
    1774:	cmp	r0, #1
    1776:	beq.n	178c <sd_chipSelect(unsigned short) [clone .part.0]+0x18>
    // insure MISO goes high impedance
    spi_send(0XFF); 
  }
  else
  {
    digitalWriteFast(m_chipSelectPin, LOW);
    1778:	ldr	r3, [pc, #60]	; (17b8 <sd_chipSelect(unsigned short) [clone .part.0]+0x44>)
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
		else *portClearRegister(pin) = digitalPinToBitMask(pin);
    177a:	ldr	r2, [pc, #64]	; (17bc <sd_chipSelect(unsigned short) [clone .part.0]+0x48>)
    177c:	ldrb	r3, [r3, #0]
    177e:	lsls	r3, r3, #4
    1780:	adds	r1, r2, r3
    1782:	ldr	r3, [r2, r3]
    1784:	ldr	r2, [r1, #12]
    1786:	str.w	r2, [r3, #136]	; 0x88
    178a:	bx	lr
{ 	if(!m_enableChipSelect) return;
	if(m_chipSelectPin<0) return;
//
  if(high_low==HIGH)
  {
	digitalWriteFast(m_chipSelectPin, HIGH);
    178c:	ldr	r3, [pc, #40]	; (17b8 <sd_chipSelect(unsigned short) [clone .part.0]+0x44>)
				CORE_PIN54_PORTCLEAR = CORE_PIN54_BITMASK;
#endif
			}
		}
	} else {
		if(val) *portSetRegister(pin) = digitalPinToBitMask(pin);
    178e:	ldr	r0, [pc, #44]	; (17bc <sd_chipSelect(unsigned short) [clone .part.0]+0x48>)
    1790:	ldrb	r3, [r3, #0]
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    1792:	ldr	r2, [pc, #44]	; (17c0 <sd_chipSelect(unsigned short) [clone .part.0]+0x4c>)
    1794:	lsls	r3, r3, #4
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    1796:	mov	r1, r2
  return TRUE;
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
    1798:	push	{r4, r5}
    179a:	adds	r5, r0, r3
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    179c:	movs	r4, #255	; 0xff
    179e:	ldr	r3, [r0, r3]
    17a0:	ldr	r0, [r5, #12]
    17a2:	str.w	r0, [r3, #132]	; 0x84
    17a6:	str	r4, [r2, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    17a8:	ldr	r3, [r1, #92]	; 0x5c
    17aa:	ldr	r2, [pc, #20]	; (17c0 <sd_chipSelect(unsigned short) [clone .part.0]+0x4c>)
		if (fifo > 0) return spi->RDR; 
    17ac:	tst.w	r3, #2031616	; 0x1f0000
    17b0:	beq.n	17a8 <sd_chipSelect(unsigned short) [clone .part.0]+0x34>
    17b2:	ldr	r3, [r2, #116]	; 0x74
  }
  else
  {
    digitalWriteFast(m_chipSelectPin, LOW);
  }
}
    17b4:	pop	{r4, r5}
    17b6:	bx	lr
    17b8:	.word	0x200017e0
    17bc:	.word	0x200006cc
    17c0:	.word	0x403a0000

000017c4 <spi_transfer(void const*, void*, unsigned int) [clone .part.4]>:
	  //spi->PUSHR = data; 
	  //while (!(spi->SR & SPI_SR_TCF)) ; // wait 
	  //return spi->POPR; 
	} 

	void spi_transfer(const void * buf, void * retbuf, size_t count)
    17c4:	push	{r4, r5}
		uint8_t *p_read = (uint8_t*)retbuf;
		size_t count_read = count;

	  // Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	  // Lets clear the reader queue
	  spi->CR = LPSPI_CR_RRF | LPSPI_CR_MEN;  // clear the queue and make sure still enabled. 
    17c6:	ldr	r3, [pc, #80]	; (1818 <spi_transfer(void const*, void*, unsigned int) [clone .part.4]+0x54>)
    17c8:	movw	r4, #513	; 0x201
    17cc:	str	r4, [r3, #16]

	  while (count > 0) {
    17ce:	cbz	r2, 1814 <spi_transfer(void const*, void*, unsigned int) [clone .part.4]+0x50>
    17d0:	mov	r5, r2
		// Push out the next byte; 
		spi->TDR = p_write? *p_write++ : 0xff;
    17d2:	cbz	r0, 1810 <spi_transfer(void const*, void*, unsigned int) [clone .part.4]+0x4c>
    17d4:	ldrb	r4, [r0, #0]
    17d6:	adds	r0, #1
		count--; // how many bytes left to output.
    17d8:	subs	r5, #1
	  // Lets clear the reader queue
	  spi->CR = LPSPI_CR_RRF | LPSPI_CR_MEN;  // clear the queue and make sure still enabled. 

	  while (count > 0) {
		// Push out the next byte; 
		spi->TDR = p_write? *p_write++ : 0xff;
    17da:	str	r4, [r3, #100]	; 0x64
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
		  if ((spi->RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    17dc:	ldr	r4, [r3, #112]	; 0x70
    17de:	lsls	r4, r4, #30
    17e0:	bmi.n	17ee <spi_transfer(void const*, void*, unsigned int) [clone .part.4]+0x2a>
			uint8_t b = spi->RDR;  // Read any pending RX bytes in
    17e2:	ldr	r4, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
			count_read--;
    17e4:	subs	r2, #1
		spi->TDR = p_write? *p_write++ : 0xff;
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
		  if ((spi->RSR & LPSPI_RSR_RXEMPTY) == 0)  {
			uint8_t b = spi->RDR;  // Read any pending RX bytes in
    17e6:	uxtb	r4, r4
			if (p_read) *p_read++ = b; 
    17e8:	cbz	r1, 17ee <spi_transfer(void const*, void*, unsigned int) [clone .part.4]+0x2a>
    17ea:	strb	r4, [r1, #0]
    17ec:	adds	r1, #1
			count_read--;
		  }
		} while ((spi->SR & LPSPI_SR_TDF) == 0) ;
    17ee:	ldr	r4, [r3, #20]
	  while (count > 0) {
		// Push out the next byte; 
		spi->TDR = p_write? *p_write++ : 0xff;
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
    17f0:	lsls	r4, r4, #31
    17f2:	bpl.n	17dc <spi_transfer(void const*, void*, unsigned int) [clone .part.4]+0x18>

	  // Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	  // Lets clear the reader queue
	  spi->CR = LPSPI_CR_RRF | LPSPI_CR_MEN;  // clear the queue and make sure still enabled. 

	  while (count > 0) {
    17f4:	cmp	r5, #0
    17f6:	bne.n	17d2 <spi_transfer(void const*, void*, unsigned int) [clone .part.4]+0xe>

	  }

	  // now lets wait for all of the read bytes to be returned...
	  while (count_read) {
		if ((spi->RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    17f8:	ldr	r0, [pc, #28]	; (1818 <spi_transfer(void const*, void*, unsigned int) [clone .part.4]+0x54>)
		} while ((spi->SR & LPSPI_SR_TDF) == 0) ;

	  }

	  // now lets wait for all of the read bytes to be returned...
	  while (count_read) {
    17fa:	cbz	r2, 1814 <spi_transfer(void const*, void*, unsigned int) [clone .part.4]+0x50>
		if ((spi->RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    17fc:	ldr	r3, [r0, #112]	; 0x70
    17fe:	lsls	r3, r3, #30
    1800:	bmi.n	17fc <spi_transfer(void const*, void*, unsigned int) [clone .part.4]+0x38>
		  uint8_t b = spi->RDR;  // Read any pending RX bytes in
    1802:	ldr	r3, [r0, #116]	; 0x74
    1804:	uxtb	r3, r3
		  if (p_read) *p_read++ = b; 
    1806:	cbz	r1, 180c <spi_transfer(void const*, void*, unsigned int) [clone .part.4]+0x48>
    1808:	strb	r3, [r1, #0]
    180a:	adds	r1, #1
		  count_read--;
    180c:	subs	r2, #1
    180e:	b.n	17fa <spi_transfer(void const*, void*, unsigned int) [clone .part.4]+0x36>
	  // Lets clear the reader queue
	  spi->CR = LPSPI_CR_RRF | LPSPI_CR_MEN;  // clear the queue and make sure still enabled. 

	  while (count > 0) {
		// Push out the next byte; 
		spi->TDR = p_write? *p_write++ : 0xff;
    1810:	movs	r4, #255	; 0xff
    1812:	b.n	17d8 <spi_transfer(void const*, void*, unsigned int) [clone .part.4]+0x14>
		  uint8_t b = spi->RDR;  // Read any pending RX bytes in
		  if (p_read) *p_read++ = b; 
		  count_read--;
		}
	  }
	}
    1814:	pop	{r4, r5}
    1816:	bx	lr
    1818:	.word	0x403a0000

0000181c <SPI_disk_ioctl(unsigned char, unsigned char*)>:
    return res;
}
void sd_setChipSelect(uint16_t pin);

DRESULT SPI_disk_ioctl(BYTE cmd, BYTE *buff)
{	if(cmd==1) sd_setChipSelect(*(uint16_t*) buff);
    181c:	cmp	r0, #1
    181e:	bne.n	1826 <SPI_disk_ioctl(unsigned char, unsigned char*)+0xa>
    1820:	ldrh	r2, [r1, #0]
void sd_setType(uint16_t type) {m_sd_type=type;}
uint16_t sd_getType(void) {return m_sd_type;}

void sd_enableChipSelect(void) {m_enableChipSelect=true;}
void sd_disableChipSelect(void) {m_enableChipSelect=false;}
void sd_setChipSelect(uint16_t pin) {m_chipSelectPin=pin;}
    1822:	ldr	r3, [pc, #8]	; (182c <SPI_disk_ioctl(unsigned char, unsigned char*)+0x10>)
    1824:	strh	r2, [r3, #0]
void sd_setChipSelect(uint16_t pin);

DRESULT SPI_disk_ioctl(BYTE cmd, BYTE *buff)
{	if(cmd==1) sd_setChipSelect(*(uint16_t*) buff);
    return RES_OK;
}
    1826:	movs	r0, #0
    1828:	bx	lr
    182a:	nop
    182c:	.word	0x200017e0

00001830 <sd_cardCommand(unsigned char, unsigned long)>:
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    1830:	ldr	r3, [pc, #268]	; (1940 <sd_cardCommand(unsigned char, unsigned long)+0x110>)
  }
}

// send command and return error code.  Return zero for OK
uint8_t sd_cardCommand(uint8_t cmd, uint32_t arg) 
{ uint8_t d[6], *pa, kk;
    1832:	push	{r4, r5, r6, r7, lr}
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    1834:	ldrh	r3, [r3, #0]
  }
}

// send command and return error code.  Return zero for OK
uint8_t sd_cardCommand(uint8_t cmd, uint32_t arg) 
{ uint8_t d[6], *pa, kk;
    1836:	sub	sp, #20
    1838:	mov	r4, r0
    183a:	str	r1, [sp, #4]
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    183c:	cmp	r3, #0
    183e:	bne.n	1924 <sd_cardCommand(unsigned char, unsigned long)+0xf4>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
    1840:	ldr	r0, [pc, #256]	; (1944 <sd_cardCommand(unsigned char, unsigned long)+0x114>)
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    1842:	movs	r6, #255	; 0xff
    1844:	ldr	r2, [pc, #256]	; (1948 <sd_cardCommand(unsigned char, unsigned long)+0x118>)
    1846:	ldr	r1, [r0, #0]
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    1848:	mov	r5, r2
{
  uint16_t t0;
  uint16_t ret;
  t0  = millis();
  while ((ret=spi_receive()) != 0XFF) 
  { if (((uint16_t)millis() - t0) >= timeoutMillis) return FALSE;
    184a:	uxth	r1, r1
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    184c:	str	r6, [r2, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    184e:	ldr	r3, [r2, #92]	; 0x5c
		if (fifo > 0) return spi->RDR; 
    1850:	tst.w	r3, #2031616	; 0x1f0000
    1854:	beq.n	184e <sd_cardCommand(unsigned char, unsigned long)+0x1e>
    1856:	ldr	r3, [r5, #116]	; 0x74
uint16_t sd_waitNotBusy(uint16_t timeoutMillis) 
{
  uint16_t t0;
  uint16_t ret;
  t0  = millis();
  while ((ret=spi_receive()) != 0XFF) 
    1858:	uxtb	r3, r3
    185a:	cmp	r3, #255	; 0xff
    185c:	beq.n	186a <sd_cardCommand(unsigned char, unsigned long)+0x3a>
    185e:	ldr	r3, [r0, #0]
  { if (((uint16_t)millis() - t0) >= timeoutMillis) return FALSE;
    1860:	uxth	r3, r3
    1862:	subs	r3, r3, r1
    1864:	cmp.w	r3, #600	; 0x258
    1868:	blt.n	184c <sd_cardCommand(unsigned char, unsigned long)+0x1c>

  // wait if busy
 // unused // 
 uint16_t ret=sd_waitNotBusy(SD_WRITE_TIMEOUT);
// form message
  d[0]=cmd | 0x40;
    186a:	orr.w	lr, r4, #64	; 0x40
  for(kk=1;kk<5;kk++) d[kk]=pa[4-kk];
    186e:	ldrb.w	r1, [sp, #7]
    1872:	ldrb.w	r2, [sp, #6]
    1876:	add	r6, sp, #8
    1878:	strb.w	r1, [sp, #9]
    187c:	add.w	ip, sp, #12
    1880:	strb.w	r2, [sp, #10]
    1884:	mov	r5, lr
    1886:	ldrb.w	r1, [sp, #5]
    188a:	mov	r7, r6
    188c:	ldrb.w	r2, [sp, #4]
    1890:	movs	r3, #0

  // wait if busy
 // unused // 
 uint16_t ret=sd_waitNotBusy(SD_WRITE_TIMEOUT);
// form message
  d[0]=cmd | 0x40;
    1892:	strb.w	lr, [sp, #8]
  for(kk=1;kk<5;kk++) d[kk]=pa[4-kk];
    1896:	strb.w	r1, [sp, #11]
    189a:	strb.w	r2, [sp, #12]
    189e:	movs	r2, #8
    uint8_t ii,jj;
    for (ii = 0; ii < n; ii++) 
    {
    uint8_t d = data[ii];
    for (jj = 0; jj < 8; jj++) {
      crc <<= 1;
    18a0:	lsls	r3, r3, #1
    18a2:	subs	r2, #1
      if ((d & 0x80) ^ (crc & 0x80)) crc ^= 0x09;
      d <<= 1;
    18a4:	lsls	r0, r5, #1
    uint8_t ii,jj;
    for (ii = 0; ii < n; ii++) 
    {
    uint8_t d = data[ii];
    for (jj = 0; jj < 8; jj++) {
      crc <<= 1;
    18a6:	uxtb	r3, r3
      if ((d & 0x80) ^ (crc & 0x80)) crc ^= 0x09;
    18a8:	eor.w	r1, r3, r5
      d <<= 1;
    18ac:	uxtb	r5, r0
    for (ii = 0; ii < n; ii++) 
    {
    uint8_t d = data[ii];
    for (jj = 0; jj < 8; jj++) {
      crc <<= 1;
      if ((d & 0x80) ^ (crc & 0x80)) crc ^= 0x09;
    18ae:	lsls	r1, r1, #24
    18b0:	it	mi
    18b2:	eormi.w	r3, r3, #9
    uint8_t crc = 0;
    uint8_t ii,jj;
    for (ii = 0; ii < n; ii++) 
    {
    uint8_t d = data[ii];
    for (jj = 0; jj < 8; jj++) {
    18b6:	ands.w	r2, r2, #255	; 0xff
    18ba:	bne.n	18a0 <sd_cardCommand(unsigned char, unsigned long)+0x70>
  //------------------------------------------------------------------------------
  // CRC functions
  static uint8_t CRC7(const uint8_t* data, uint8_t n) {
    uint8_t crc = 0;
    uint8_t ii,jj;
    for (ii = 0; ii < n; ii++) 
    18bc:	cmp	ip, r7
    18be:	beq.n	18c6 <sd_cardCommand(unsigned char, unsigned long)+0x96>
    18c0:	ldrb.w	r5, [r7, #1]!
    18c4:	b.n	189e <sd_cardCommand(unsigned char, unsigned long)+0x6e>
// form message
  d[0]=cmd | 0x40;
  for(kk=1;kk<5;kk++) d[kk]=pa[4-kk];
  
#ifdef USE_SD_CRC  // add crc
  d[5] = CRC7(d, 5);
    18c6:	lsls	r3, r3, #1
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    18c8:	ldr	r2, [pc, #124]	; (1948 <sd_cardCommand(unsigned char, unsigned long)+0x118>)
// form message
  d[0]=cmd | 0x40;
  for(kk=1;kk<5;kk++) d[kk]=pa[4-kk];
  
#ifdef USE_SD_CRC  // add crc
  d[5] = CRC7(d, 5);
    18ca:	add	r0, sp, #16
    18cc:	orr.w	r3, r3, #1
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    18d0:	mov	r5, r2
// form message
  d[0]=cmd | 0x40;
  for(kk=1;kk<5;kk++) d[kk]=pa[4-kk];
  
#ifdef USE_SD_CRC  // add crc
  d[5] = CRC7(d, 5);
    18d2:	strb.w	r3, [r0, #-3]!
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    18d6:	str.w	lr, [r2, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    18da:	ldr	r3, [r2, #92]	; 0x5c
    18dc:	ldr	r1, [pc, #104]	; (1948 <sd_cardCommand(unsigned char, unsigned long)+0x118>)
		if (fifo > 0) return spi->RDR; 
    18de:	tst.w	r3, #2031616	; 0x1f0000
    18e2:	beq.n	18da <sd_cardCommand(unsigned char, unsigned long)+0xaa>
#else
  d[5]=((cmd == CMD0) ? 0X95 : 0X87);
#endif  // USE_SD_CRC

  // send message
  for (kk = 0; kk < 6; kk++) spi_send(d[kk]);
    18e4:	cmp	r6, r0
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
		if (fifo > 0) return spi->RDR; 
    18e6:	ldr	r3, [r5, #116]	; 0x74
#else
  d[5]=((cmd == CMD0) ? 0X95 : 0X87);
#endif  // USE_SD_CRC

  // send message
  for (kk = 0; kk < 6; kk++) spi_send(d[kk]);
    18e8:	beq.n	18f0 <sd_cardCommand(unsigned char, unsigned long)+0xc0>
    18ea:	ldrb.w	lr, [r6, #1]!
    18ee:	b.n	18d6 <sd_cardCommand(unsigned char, unsigned long)+0xa6>

  // skip stuff byte for stop read
  if (cmd == CMD12) spi_receive();
    18f0:	cmp	r4, #12
    18f2:	beq.n	192c <sd_cardCommand(unsigned char, unsigned long)+0xfc>
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    18f4:	ldr	r2, [pc, #80]	; (1948 <sd_cardCommand(unsigned char, unsigned long)+0x118>)
  // wait if busy
 // unused // 
 uint16_t ret=sd_waitNotBusy(SD_WRITE_TIMEOUT);
// form message
  d[0]=cmd | 0x40;
  for(kk=1;kk<5;kk++) d[kk]=pa[4-kk];
    18f6:	movs	r1, #0
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    18f8:	movs	r6, #255	; 0xff
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    18fa:	mov	r5, r2
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    18fc:	str	r6, [r2, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    18fe:	ldr	r3, [r2, #92]	; 0x5c
		if (fifo > 0) return spi->RDR; 
    1900:	tst.w	r3, #2031616	; 0x1f0000
    1904:	beq.n	18fe <sd_cardCommand(unsigned char, unsigned long)+0xce>

  // skip stuff byte for stop read
  if (cmd == CMD12) spi_receive();

  // wait for response
  for (kk = 0; ((m_sd_status = spi_receive()) & 0X80) && kk != 0XFF; kk++);
    1906:	uxtb	r3, r1
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
		if (fifo > 0) return spi->RDR; 
    1908:	ldr	r0, [r5, #116]	; 0x74

  // skip stuff byte for stop read
  if (cmd == CMD12) spi_receive();

  // wait for response
  for (kk = 0; ((m_sd_status = spi_receive()) & 0X80) && kk != 0XFF; kk++);
    190a:	adds	r1, #1
    190c:	subs	r3, #255	; 0xff
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
		if (fifo > 0) return spi->RDR; 
    190e:	uxtb	r0, r0

  // skip stuff byte for stop read
  if (cmd == CMD12) spi_receive();

  // wait for response
  for (kk = 0; ((m_sd_status = spi_receive()) & 0X80) && kk != 0XFF; kk++);
    1910:	it	ne
    1912:	movne	r3, #1
    1914:	uxth	r4, r0
    1916:	ands.w	r3, r3, r0, lsr #7
    191a:	bne.n	18fc <sd_cardCommand(unsigned char, unsigned long)+0xcc>
    191c:	ldr	r3, [pc, #44]	; (194c <sd_cardCommand(unsigned char, unsigned long)+0x11c>)
    191e:	strh	r4, [r3, #0]
  return m_sd_status;
} 
    1920:	add	sp, #20
    1922:	pop	{r4, r5, r6, r7, pc}
    1924:	movs	r0, #0
    1926:	bl	1774 <sd_chipSelect(unsigned short) [clone .part.0]>
    192a:	b.n	1840 <sd_cardCommand(unsigned char, unsigned long)+0x10>
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    192c:	movs	r3, #255	; 0xff
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    192e:	mov	r0, r1
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    1930:	str	r3, [r1, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    1932:	ldr	r3, [r0, #92]	; 0x5c
    1934:	ldr	r2, [pc, #16]	; (1948 <sd_cardCommand(unsigned char, unsigned long)+0x118>)
		if (fifo > 0) return spi->RDR; 
    1936:	tst.w	r3, #2031616	; 0x1f0000
    193a:	beq.n	1932 <sd_cardCommand(unsigned char, unsigned long)+0x102>
    193c:	ldr	r3, [r2, #116]	; 0x74
    193e:	b.n	18f4 <sd_cardCommand(unsigned char, unsigned long)+0xc4>
    1940:	.word	0x200017e2
    1944:	.word	0x20009d58
    1948:	.word	0x403a0000
    194c:	.word	0x2000c7dc

00001950 <sd_readData(unsigned char*, unsigned int)>:
  // wait for response
  for (kk = 0; ((m_sd_status = spi_receive()) & 0X80) && kk != 0XFF; kk++);
  return m_sd_status;
} 

uint16_t sd_readData(uint8_t* dst, size_t count) {
    1950:	push	{r3, r4, r5, r6, r7, lr}
    1952:	ldr	r6, [pc, #236]	; (1a40 <sd_readData(unsigned char*, unsigned int)+0xf0>)
    1954:	mov	r5, r1
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    1956:	ldr	r2, [pc, #236]	; (1a44 <sd_readData(unsigned char*, unsigned int)+0xf4>)
  // wait for response
  for (kk = 0; ((m_sd_status = spi_receive()) & 0X80) && kk != 0XFF; kk++);
  return m_sd_status;
} 

uint16_t sd_readData(uint8_t* dst, size_t count) {
    1958:	mov	r4, r0
    195a:	ldr	r1, [r6, #0]
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    195c:	movs	r7, #255	; 0xff
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    195e:	mov	r0, r2
  uint16_t crc;
#endif  // USE_SD_CRC
  // wait for start block token
  uint16_t t0 = millis();
  while ((m_sd_status = spi_receive()) == 0XFF) {
    if (((uint16_t)millis() - t0) > SD_READ_TIMEOUT) {
    1960:	uxth	r1, r1
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    1962:	str	r7, [r2, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    1964:	ldr	r3, [r2, #92]	; 0x5c
		if (fifo > 0) return spi->RDR; 
    1966:	tst.w	r3, #2031616	; 0x1f0000
    196a:	beq.n	1964 <sd_readData(unsigned char*, unsigned int)+0x14>
    196c:	ldr	r3, [r0, #116]	; 0x74
    196e:	uxtb	r3, r3
#ifdef USE_SD_CRC
  uint16_t crc;
#endif  // USE_SD_CRC
  // wait for start block token
  uint16_t t0 = millis();
  while ((m_sd_status = spi_receive()) == 0XFF) {
    1970:	cmp	r3, #255	; 0xff
    1972:	uxth.w	lr, r3
    1976:	bne.n	1998 <sd_readData(unsigned char*, unsigned int)+0x48>
    1978:	ldr	r3, [r6, #0]
    if (((uint16_t)millis() - t0) > SD_READ_TIMEOUT) {
    197a:	uxth	r3, r3
    197c:	subs	r3, r3, r1
    197e:	cmp.w	r3, #300	; 0x12c
    1982:	ble.n	1962 <sd_readData(unsigned char*, unsigned int)+0x12>
    1984:	ldr	r1, [pc, #192]	; (1a48 <sd_readData(unsigned char*, unsigned int)+0xf8>)
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    1986:	movs	r2, #17
    1988:	ldr	r3, [pc, #192]	; (1a4c <sd_readData(unsigned char*, unsigned int)+0xfc>)
    198a:	strh.w	lr, [r1]
    198e:	strh	r2, [r3, #0]
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    1990:	ldr	r3, [pc, #188]	; (1a50 <sd_readData(unsigned char*, unsigned int)+0x100>)
    1992:	ldrh	r0, [r3, #0]
    1994:	cbnz	r0, 19b2 <sd_readData(unsigned char*, unsigned int)+0x62>
  return TRUE;

 fail:
  sd_chipSelect(HIGH);
  return FALSE;
}
    1996:	pop	{r3, r4, r5, r6, r7, pc}
    1998:	ldr	r6, [pc, #172]	; (1a48 <sd_readData(unsigned char*, unsigned int)+0xf8>)
    if (((uint16_t)millis() - t0) > SD_READ_TIMEOUT) {
      sd_setError(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  if (m_sd_status != DATA_START_BLOCK) {
    199a:	cmp.w	lr, #254	; 0xfe
    199e:	strh.w	lr, [r6]
    19a2:	beq.n	19bc <sd_readData(unsigned char*, unsigned int)+0x6c>
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    19a4:	ldr	r3, [pc, #164]	; (1a4c <sd_readData(unsigned char*, unsigned int)+0xfc>)
    19a6:	movs	r2, #15
    19a8:	strh	r2, [r3, #0]
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    19aa:	ldr	r3, [pc, #164]	; (1a50 <sd_readData(unsigned char*, unsigned int)+0x100>)
    19ac:	ldrh	r0, [r3, #0]
    19ae:	cmp	r0, #0
    19b0:	beq.n	1996 <sd_readData(unsigned char*, unsigned int)+0x46>
    19b2:	movs	r0, #1
    19b4:	bl	1774 <sd_chipSelect(unsigned short) [clone .part.0]>
  sd_chipSelect(HIGH);
  return TRUE;

 fail:
  sd_chipSelect(HIGH);
  return FALSE;
    19b8:	movs	r0, #0
    19ba:	pop	{r3, r4, r5, r6, r7, pc}
	} 

	void spi_transfer(const void * buf, void * retbuf, size_t count)
	{

	  if (count == 0) return;
    19bc:	cbnz	r5, 1a1c <sd_readData(unsigned char*, unsigned int)+0xcc>
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    19be:	ldr	r3, [pc, #132]	; (1a44 <sd_readData(unsigned char*, unsigned int)+0xf4>)
  if (m_sd_status != DATA_START_BLOCK) {
    sd_setError(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_sd_status = spi_receiveBulk(dst, count))) {
    19c0:	movs	r0, #0
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    19c2:	movs	r2, #255	; 0xff
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    19c4:	mov	r1, r3
  if (m_sd_status != DATA_START_BLOCK) {
    sd_setError(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_sd_status = spi_receiveBulk(dst, count))) {
    19c6:	strh	r0, [r6, #0]
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    19c8:	str	r2, [r3, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    19ca:	ldr	r3, [r1, #92]	; 0x5c
    19cc:	ldr	r2, [pc, #116]	; (1a44 <sd_readData(unsigned char*, unsigned int)+0xf4>)
		if (fifo > 0) return spi->RDR; 
    19ce:	tst.w	r3, #2031616	; 0x1f0000
    19d2:	beq.n	19ca <sd_readData(unsigned char*, unsigned int)+0x7a>
    19d4:	ldr	r0, [r2, #116]	; 0x74
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    19d6:	movs	r3, #255	; 0xff
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    19d8:	mov	r1, r2
    goto fail;
  }

#ifdef USE_SD_CRC
  // get crc
  crc = (spi_receive() << 8) | spi_receive();
    19da:	lsls	r0, r0, #8
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    19dc:	str	r3, [r2, #100]	; 0x64
    goto fail;
  }

#ifdef USE_SD_CRC
  // get crc
  crc = (spi_receive() << 8) | spi_receive();
    19de:	sxth	r0, r0
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    19e0:	ldr	r3, [r1, #92]	; 0x5c
    19e2:	ldr	r2, [pc, #96]	; (1a44 <sd_readData(unsigned char*, unsigned int)+0xf4>)
		if (fifo > 0) return spi->RDR; 
    19e4:	tst.w	r3, #2031616	; 0x1f0000
    19e8:	beq.n	19e0 <sd_readData(unsigned char*, unsigned int)+0x90>
    19ea:	ldr	r3, [r2, #116]	; 0x74
    goto fail;
  }

#ifdef USE_SD_CRC
  // get crc
  crc = (spi_receive() << 8) | spi_receive();
    19ec:	uxtb	r3, r3
    19ee:	orrs	r0, r3
    19f0:	uxth	r0, r0
    };

    static uint16_t CRC_CCITT(const uint8_t* data, size_t n) {
      uint16_t crc = 0;
      size_t ii;
      for (ii = 0; ii < n; ii++) {
    19f2:	cbz	r5, 1a3a <sd_readData(unsigned char*, unsigned int)+0xea>
    19f4:	movs	r3, #0
    19f6:	ldr	r1, [pc, #92]	; (1a54 <sd_readData(unsigned char*, unsigned int)+0x104>)
    19f8:	add	r5, r4
      crc = crctab[(crc >> 8 ^ data[ii]) & 0XFF] ^ (crc << 8);
    19fa:	ldrb.w	r2, [r4], #1
    19fe:	eor.w	r2, r2, r3, asr #8
    };

    static uint16_t CRC_CCITT(const uint8_t* data, size_t n) {
      uint16_t crc = 0;
      size_t ii;
      for (ii = 0; ii < n; ii++) {
    1a02:	cmp	r5, r4
      crc = crctab[(crc >> 8 ^ data[ii]) & 0XFF] ^ (crc << 8);
    1a04:	ldrh.w	r2, [r1, r2, lsl #1]
    1a08:	eor.w	r3, r2, r3, lsl #8
    1a0c:	uxth	r3, r3
    };

    static uint16_t CRC_CCITT(const uint8_t* data, size_t n) {
      uint16_t crc = 0;
      size_t ii;
      for (ii = 0; ii < n; ii++) {
    1a0e:	bne.n	19fa <sd_readData(unsigned char*, unsigned int)+0xaa>
  }

#ifdef USE_SD_CRC
  // get crc
  crc = (spi_receive() << 8) | spi_receive();
  if (crc != CRC_CCITT(dst, count)) {
    1a10:	cmp	r0, r3
    1a12:	beq.n	1a28 <sd_readData(unsigned char*, unsigned int)+0xd8>
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    1a14:	ldr	r3, [pc, #52]	; (1a4c <sd_readData(unsigned char*, unsigned int)+0xfc>)
    1a16:	movs	r2, #27
    1a18:	strh	r2, [r3, #0]
    1a1a:	b.n	1990 <sd_readData(unsigned char*, unsigned int)+0x40>
    1a1c:	mov	r2, r5
    1a1e:	mov	r1, r4
    1a20:	movs	r0, #0
    1a22:	bl	17c4 <spi_transfer(void const*, void*, unsigned int) [clone .part.4]>
    1a26:	b.n	19be <sd_readData(unsigned char*, unsigned int)+0x6e>
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    1a28:	ldr	r3, [pc, #36]	; (1a50 <sd_readData(unsigned char*, unsigned int)+0x100>)
  spi_receive();
  spi_receive();
#endif  // USE_SD_CRC

  sd_chipSelect(HIGH);
  return TRUE;
    1a2a:	movs	r0, #1
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    1a2c:	ldrh	r3, [r3, #0]
    1a2e:	cmp	r3, #0
    1a30:	beq.n	1996 <sd_readData(unsigned char*, unsigned int)+0x46>
    1a32:	bl	1774 <sd_chipSelect(unsigned short) [clone .part.0]>
  spi_receive();
  spi_receive();
#endif  // USE_SD_CRC

  sd_chipSelect(HIGH);
  return TRUE;
    1a36:	movs	r0, #1
    1a38:	pop	{r3, r4, r5, r6, r7, pc}
      0xEF1F, 0xFF3E, 0xCF5D, 0xDF7C, 0xAF9B, 0xBFBA, 0x8FD9, 0x9FF8,
      0x6E17, 0x7E36, 0x4E55, 0x5E74, 0x2E93, 0x3EB2, 0x0ED1, 0x1EF0
    };

    static uint16_t CRC_CCITT(const uint8_t* data, size_t n) {
      uint16_t crc = 0;
    1a3a:	mov	r3, r5
    1a3c:	b.n	1a10 <sd_readData(unsigned char*, unsigned int)+0xc0>
    1a3e:	nop
    1a40:	.word	0x20009d58
    1a44:	.word	0x403a0000
    1a48:	.word	0x2000c7dc
    1a4c:	.word	0x2000c7da
    1a50:	.word	0x200017e2
    1a54:	.word	0x20000384

00001a58 <sd_readRegister(unsigned char, void*)>:
  return FALSE;
}

// read CID or CSR register
uint16_t sd_readRegister(uint8_t cmd, void* buf) 
{
    1a58:	push	{r4, lr}
    1a5a:	mov	r4, r1
    uint8_t* dst = (uint8_t*)(buf);
  uint16_t ret=sd_cardCommand(cmd, 0);
    1a5c:	movs	r1, #0
    1a5e:	bl	1830 <sd_cardCommand(unsigned char, unsigned long)>
    if (ret) 
    1a62:	cbz	r0, 1a74 <sd_readRegister(unsigned char, void*)+0x1c>
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    1a64:	ldr	r3, [pc, #36]	; (1a8c <sd_readRegister(unsigned char, void*)+0x34>)
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    1a66:	movs	r1, #16
    1a68:	ldr	r2, [pc, #36]	; (1a90 <sd_readRegister(unsigned char, void*)+0x38>)
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    1a6a:	ldrh	r3, [r3, #0]
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    1a6c:	strh	r1, [r2, #0]
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    1a6e:	cbnz	r3, 1a80 <sd_readRegister(unsigned char, void*)+0x28>
    sd_chipSelect(HIGH);
    return FALSE;
    }
  ret= sd_readData(dst, 16);
  return ret;
}
    1a70:	movs	r0, #0
    1a72:	pop	{r4, pc}
    if (ret) 
  {   sd_setError(SD_CARD_ERROR_READ_REG);
    sd_chipSelect(HIGH);
    return FALSE;
    }
  ret= sd_readData(dst, 16);
    1a74:	mov	r0, r4
    1a76:	movs	r1, #16
  return ret;
}
    1a78:	ldmia.w	sp!, {r4, lr}
    if (ret) 
  {   sd_setError(SD_CARD_ERROR_READ_REG);
    sd_chipSelect(HIGH);
    return FALSE;
    }
  ret= sd_readData(dst, 16);
    1a7c:	b.w	1950 <sd_readData(unsigned char*, unsigned int)>
    1a80:	movs	r0, #1
    1a82:	bl	1774 <sd_chipSelect(unsigned short) [clone .part.0]>
  return ret;
}
    1a86:	movs	r0, #0
    1a88:	pop	{r4, pc}
    1a8a:	nop
    1a8c:	.word	0x200017e2
    1a90:	.word	0x2000c7da

00001a94 <sd_connect()>:
 * can be determined by calling errorCode() and errorData().
 */
 uint8_t sdCommandAndResponse(uint8_t cmd, uint32_t param);
 
int sd_connect()
{ int kk;
    1a94:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    1a98:	ldr	r6, [pc, #384]	; (1c1c <sd_connect()+0x188>)
    1a9a:	ldr	r5, [pc, #388]	; (1c20 <sd_connect()+0x18c>)
    1a9c:	ldrh	r3, [r6, #0]
    1a9e:	ldr	r7, [r5, #0]
    1aa0:	cmp	r3, #0
    1aa2:	bne.n	1b14 <sd_connect()+0x80>
  uint32_t arg;
  // uint8_t ret;
  // command to go idle in SPI mode
  sd_chipSelect(LOW);

  while (sd_cardCommand(CMD0, 0) != R1_IDLE_STATE) 
    1aa4:	movs	r1, #0
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    1aa6:	ldr	r4, [pc, #380]	; (1c24 <sd_connect()+0x190>)
  uint32_t arg;
  // uint8_t ret;
  // command to go idle in SPI mode
  sd_chipSelect(LOW);

  while (sd_cardCommand(CMD0, 0) != R1_IDLE_STATE) 
    1aa8:	mov	r0, r1
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    1aaa:	mov	r8, r4
  uint32_t arg;
  // uint8_t ret;
  // command to go idle in SPI mode
  sd_chipSelect(LOW);

  while (sd_cardCommand(CMD0, 0) != R1_IDLE_STATE) 
    1aac:	bl	1830 <sd_cardCommand(unsigned char, unsigned long)>
    1ab0:	cmp	r0, #1
    1ab2:	beq.n	1ade <sd_connect()+0x4a>
    1ab4:	ldr	r2, [r5, #0]
  {
    t1=(uint16_t)millis();
    if ((t1- t0) > SD_INIT_TIMEOUT) {
    1ab6:	uxth	r3, r7
    1ab8:	uxth	r2, r2
    1aba:	subs	r3, r2, r3
    1abc:	cmp.w	r3, #4000	; 0xfa0
    1ac0:	bgt.n	1b00 <sd_connect()+0x6c>
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    1ac2:	movs	r3, #255	; 0xff
    1ac4:	str	r3, [r4, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    1ac6:	ldr	r3, [r4, #92]	; 0x5c
		if (fifo > 0) return spi->RDR; 
    1ac8:	tst.w	r3, #2031616	; 0x1f0000
    1acc:	beq.n	1ac6 <sd_connect()+0x32>
  uint32_t arg;
  // uint8_t ret;
  // command to go idle in SPI mode
  sd_chipSelect(LOW);

  while (sd_cardCommand(CMD0, 0) != R1_IDLE_STATE) 
    1ace:	movs	r1, #0
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
		if (fifo > 0) return spi->RDR; 
    1ad0:	ldr.w	r3, [r8, #116]	; 0x74
  uint32_t arg;
  // uint8_t ret;
  // command to go idle in SPI mode
  sd_chipSelect(LOW);

  while (sd_cardCommand(CMD0, 0) != R1_IDLE_STATE) 
    1ad4:	mov	r0, r1
    1ad6:	bl	1830 <sd_cardCommand(unsigned char, unsigned long)>
    1ada:	cmp	r0, #1
    1adc:	bne.n	1ab4 <sd_connect()+0x20>
    }
   spi_send(0XFF);
  }
  
#ifdef USE_SD_CRC
  if (sd_cardCommand(CMD59, 1) != R1_IDLE_STATE) {
    1ade:	mov	r1, r0
    1ae0:	movs	r0, #59	; 0x3b
    1ae2:	bl	1830 <sd_cardCommand(unsigned char, unsigned long)>
    1ae6:	cmp	r0, #1
    1ae8:	beq.n	1b1c <sd_connect()+0x88>
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    1aea:	ldr	r3, [pc, #316]	; (1c28 <sd_connect()+0x194>)
    1aec:	movs	r2, #26
    1aee:	strh	r2, [r3, #0]
  
  sd_chipSelect(HIGH);
  return TRUE;

  fail:
  Serial.printf("E connect %d\n", m_sd_errorCode);
    1af0:	ldr	r1, [pc, #312]	; (1c2c <sd_connect()+0x198>)
    1af2:	ldr	r0, [pc, #316]	; (1c30 <sd_connect()+0x19c>)
    1af4:	bl	3e7c <Print::printf(char const*, ...)>
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    1af8:	ldrh	r0, [r6, #0]
    1afa:	cbnz	r0, 1b08 <sd_connect()+0x74>

  fail:
  Serial.printf("E connect %d\n", m_sd_errorCode);
  sd_chipSelect(HIGH);
  return FALSE;
}
    1afc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    1b00:	ldr	r3, [pc, #292]	; (1c28 <sd_connect()+0x194>)
    1b02:	movs	r2, #1
    1b04:	strh	r2, [r3, #0]
    1b06:	b.n	1af0 <sd_connect()+0x5c>
    1b08:	movs	r0, #1
    1b0a:	bl	1774 <sd_chipSelect(unsigned short) [clone .part.0]>
  return TRUE;

  fail:
  Serial.printf("E connect %d\n", m_sd_errorCode);
  sd_chipSelect(HIGH);
  return FALSE;
    1b0e:	movs	r0, #0
    1b10:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1b14:	movs	r0, #0
    1b16:	bl	1774 <sd_chipSelect(unsigned short) [clone .part.0]>
    1b1a:	b.n	1aa4 <sd_connect()+0x10>
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    1b1c:	ldr	r4, [pc, #260]	; (1c24 <sd_connect()+0x190>)
    1b1e:	ldr	r7, [r5, #0]
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    1b20:	mov	r8, r4

  // check SD version
  t0  = (uint16_t)millis();
  while (1) 
  {
    if (sd_cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) 
    1b22:	mov.w	r1, #426	; 0x1aa
    1b26:	movs	r0, #8
    1b28:	bl	1830 <sd_cardCommand(unsigned char, unsigned long)>
    1b2c:	cmp	r0, #5
    1b2e:	beq.n	1baa <sd_connect()+0x116>
    1b30:	movs	r2, #4
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    1b32:	movs	r1, #255	; 0xff
    1b34:	str	r1, [r4, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    1b36:	ldr	r3, [r4, #92]	; 0x5c
		if (fifo > 0) return spi->RDR; 
    1b38:	tst.w	r3, #2031616	; 0x1f0000
    1b3c:	beq.n	1b36 <sd_connect()+0xa2>
    1b3e:	ldr.w	r3, [r8, #116]	; 0x74
    if (sd_cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) 
  	{
      sd_setType(SD_CARD_TYPE_SD1);
      break;
    }
    for (kk = 0; kk < 4; kk++) m_sd_status = spi_receive();
    1b42:	subs	r2, #1
    1b44:	uxtb	r3, r3
    1b46:	bne.n	1b34 <sd_connect()+0xa0>
    1b48:	ldr	r2, [pc, #232]	; (1c34 <sd_connect()+0x1a0>)
    if (m_sd_status == 0XAA) 
    1b4a:	cmp	r3, #170	; 0xaa
    1b4c:	strh	r3, [r2, #0]
    1b4e:	beq.n	1b66 <sd_connect()+0xd2>
    1b50:	ldr	r2, [r5, #0]
	{
		sd_setType(SD_CARD_TYPE_SD2);
		break;
	}
	if (((uint16_t)millis() - t0) > SD_INIT_TIMEOUT) 
    1b52:	uxth	r3, r7
    1b54:	uxth	r2, r2
    1b56:	subs	r3, r2, r3
    1b58:	cmp.w	r3, #4000	; 0xfa0
    1b5c:	ble.n	1b22 <sd_connect()+0x8e>
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    1b5e:	ldr	r3, [pc, #200]	; (1c28 <sd_connect()+0x194>)
    1b60:	movs	r2, #2
    1b62:	strh	r2, [r3, #0]
    1b64:	b.n	1af0 <sd_connect()+0x5c>
uint16_t sd_getError(void) {return m_sd_errorCode;}

void sd_setType(uint16_t type) {m_sd_type=type;}
    1b66:	ldr.w	r8, [pc, #208]	; 1c38 <sd_connect()+0x1a4>
    1b6a:	movs	r3, #2
      goto fail;
    }
  }
  
  // initialize card and send host supports SDHC if SD2
  arg = (sd_getType() == SD_CARD_TYPE_SD2) ? 0X40000000 : 0;
    1b6c:	mov.w	r4, #1073741824	; 0x40000000

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
uint16_t sd_getError(void) {return m_sd_errorCode;}

void sd_setType(uint16_t type) {m_sd_type=type;}
    1b70:	strh.w	r3, [r8]
    1b74:	ldr	r7, [r5, #0]
    1b76:	b.n	1b84 <sd_connect()+0xf0>
    1b78:	ldr	r3, [r5, #0]
  t0  = (uint16_t)millis();
  while (sd_cardAcmd(ACMD41, arg) != R1_READY_STATE) 
  {
    // check for timeout
	t1  = (uint16_t)millis();
    if ((t1 - t0) > SD_INIT_TIMEOUT) 
    1b7a:	uxth	r3, r3
    1b7c:	subs	r3, r3, r2
    1b7e:	cmp.w	r3, #4000	; 0xfa0
    1b82:	bgt.n	1bb8 <sd_connect()+0x124>
  uint16_t sd_readCID(cid_t* cid) {  return sd_readRegister(CMD10, cid); }
  uint16_t sd_readCSD(csd_t* csd) {  return sd_readRegister(CMD9, csd); }

 
uint8_t sd_cardAcmd(uint8_t cmd, uint32_t arg) 
{   sd_cardCommand(CMD55, 0);
    1b84:	movs	r1, #0
    1b86:	movs	r0, #55	; 0x37
    1b88:	bl	1830 <sd_cardCommand(unsigned char, unsigned long)>
    return sd_cardCommand(cmd, arg);
    1b8c:	mov	r1, r4
    1b8e:	movs	r0, #41	; 0x29
    1b90:	bl	1830 <sd_cardCommand(unsigned char, unsigned long)>
  t0  = (uint16_t)millis();
  while (sd_cardAcmd(ACMD41, arg) != R1_READY_STATE) 
  {
    // check for timeout
	t1  = (uint16_t)millis();
    if ((t1 - t0) > SD_INIT_TIMEOUT) 
    1b94:	uxth	r2, r7
  
  // initialize card and send host supports SDHC if SD2
  arg = (sd_getType() == SD_CARD_TYPE_SD2) ? 0X40000000 : 0;

  t0  = (uint16_t)millis();
  while (sd_cardAcmd(ACMD41, arg) != R1_READY_STATE) 
    1b96:	cmp	r0, #0
    1b98:	bne.n	1b78 <sd_connect()+0xe4>
      goto fail;
    }
  }

  // if SD2 read OCR register to check for SDHC card
  if (sd_getType() == SD_CARD_TYPE_SD2) 
    1b9a:	ldrh.w	r3, [r8]
    1b9e:	cmp	r3, #2
    1ba0:	beq.n	1bc0 <sd_connect()+0x12c>
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    1ba2:	ldrh	r3, [r6, #0]
    1ba4:	cbnz	r3, 1bd2 <sd_connect()+0x13e>
    // Discard rest of ocr - contains allowed voltage range.
    for (kk = 0; kk < 3; kk++) spi_receive();
  }
  
  sd_chipSelect(HIGH);
  return TRUE;
    1ba6:	movs	r0, #1
    1ba8:	b.n	1afc <sd_connect()+0x68>

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
uint16_t sd_getError(void) {return m_sd_errorCode;}

void sd_setType(uint16_t type) {m_sd_type=type;}
    1baa:	ldr.w	r8, [pc, #140]	; 1c38 <sd_connect()+0x1a4>
    1bae:	movs	r3, #1
      goto fail;
    }
  }
  
  // initialize card and send host supports SDHC if SD2
  arg = (sd_getType() == SD_CARD_TYPE_SD2) ? 0X40000000 : 0;
    1bb0:	movs	r4, #0

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
uint16_t sd_getError(void) {return m_sd_errorCode;}

void sd_setType(uint16_t type) {m_sd_type=type;}
    1bb2:	strh.w	r3, [r8]
    1bb6:	b.n	1b74 <sd_connect()+0xe0>
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    1bb8:	ldr	r3, [pc, #108]	; (1c28 <sd_connect()+0x194>)
    1bba:	movs	r2, #10
    1bbc:	strh	r2, [r3, #0]
    1bbe:	b.n	1af0 <sd_connect()+0x5c>
  }

  // if SD2 read OCR register to check for SDHC card
  if (sd_getType() == SD_CARD_TYPE_SD2) 
  {
    if (sd_cardCommand(CMD58, 0))
    1bc0:	mov	r1, r0
    1bc2:	movs	r0, #58	; 0x3a
    1bc4:	bl	1830 <sd_cardCommand(unsigned char, unsigned long)>
    1bc8:	cbz	r0, 1bde <sd_connect()+0x14a>
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    1bca:	ldr	r3, [pc, #92]	; (1c28 <sd_connect()+0x194>)
    1bcc:	movs	r2, #8
    1bce:	strh	r2, [r3, #0]
    1bd0:	b.n	1af0 <sd_connect()+0x5c>
    1bd2:	movs	r0, #1
    1bd4:	bl	1774 <sd_chipSelect(unsigned short) [clone .part.0]>
    // Discard rest of ocr - contains allowed voltage range.
    for (kk = 0; kk < 3; kk++) spi_receive();
  }
  
  sd_chipSelect(HIGH);
  return TRUE;
    1bd8:	movs	r0, #1
    1bda:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    1bde:	ldr	r3, [pc, #68]	; (1c24 <sd_connect()+0x190>)
    1be0:	movs	r2, #255	; 0xff
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    1be2:	mov	r1, r3
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    1be4:	str	r2, [r3, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    1be6:	ldr	r2, [r1, #92]	; 0x5c
    1be8:	ldr	r3, [pc, #56]	; (1c24 <sd_connect()+0x190>)
		if (fifo > 0) return spi->RDR; 
    1bea:	tst.w	r2, #2031616	; 0x1f0000
    1bee:	beq.n	1be6 <sd_connect()+0x152>
    1bf0:	ldr	r3, [r3, #116]	; 0x74
    if (sd_cardCommand(CMD58, 0))
	{
      sd_setError(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spi_receive() & 0XC0) == 0XC0) sd_setType(SD_CARD_TYPE_SDHC);
    1bf2:	and.w	r3, r3, #192	; 0xc0
    1bf6:	cmp	r3, #192	; 0xc0
    1bf8:	bne.n	1c00 <sd_connect()+0x16c>

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
uint16_t sd_getError(void) {return m_sd_errorCode;}

void sd_setType(uint16_t type) {m_sd_type=type;}
    1bfa:	movs	r3, #3
    1bfc:	strh.w	r3, [r8]
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    1c00:	ldr	r3, [pc, #32]	; (1c24 <sd_connect()+0x190>)
      goto fail;
    }
  }
  
  // initialize card and send host supports SDHC if SD2
  arg = (sd_getType() == SD_CARD_TYPE_SD2) ? 0X40000000 : 0;
    1c02:	movs	r2, #3
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    1c04:	movs	r0, #255	; 0xff
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    1c06:	mov	r1, r3
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    1c08:	str	r0, [r3, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    1c0a:	ldr	r4, [r3, #92]	; 0x5c
		if (fifo > 0) return spi->RDR; 
    1c0c:	tst.w	r4, #2031616	; 0x1f0000
    1c10:	beq.n	1c0a <sd_connect()+0x176>
      sd_setError(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spi_receive() & 0XC0) == 0XC0) sd_setType(SD_CARD_TYPE_SDHC);
    // Discard rest of ocr - contains allowed voltage range.
    for (kk = 0; kk < 3; kk++) spi_receive();
    1c12:	subs	r2, #1
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
		if (fifo > 0) return spi->RDR; 
    1c14:	ldr	r4, [r1, #116]	; 0x74
      sd_setError(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spi_receive() & 0XC0) == 0XC0) sd_setType(SD_CARD_TYPE_SDHC);
    // Discard rest of ocr - contains allowed voltage range.
    for (kk = 0; kk < 3; kk++) spi_receive();
    1c16:	bne.n	1c08 <sd_connect()+0x174>
    1c18:	b.n	1ba2 <sd_connect()+0x10e>
    1c1a:	nop
    1c1c:	.word	0x200017e2
    1c20:	.word	0x20009d58
    1c24:	.word	0x403a0000
    1c28:	.word	0x2000c7da
    1c2c:	.word	0x20000cc8
    1c30:	.word	0x20001218
    1c34:	.word	0x2000c7dc
    1c38:	.word	0x2000c7de

00001c3c <sd_cardSize()>:
 *
 * \return The number of 512 byte data blocks in the card
 *         or zero if an error occurs.
 */
uint32_t sd_cardSize(void) 
{
    1c3c:	push	{r4, r5, lr}
    1c3e:	sub	sp, #20
  ret= sd_readData(dst, 16);
  return ret;
}

  uint16_t sd_readCID(cid_t* cid) {  return sd_readRegister(CMD10, cid); }
  uint16_t sd_readCSD(csd_t* csd) {  return sd_readRegister(CMD9, csd); }
    1c40:	movs	r0, #9
    1c42:	mov	r1, sp
    1c44:	bl	1a58 <sd_readRegister(unsigned char, void*)>
uint32_t sd_cardSize(void) 
{
  csd_t csd;
  uint16_t ret;
  //
  if (!(ret=sd_readCSD(&csd))) return 0;
    1c48:	cbz	r0, 1c60 <sd_cardSize()+0x24>
  //
  if (csd.v1.csd_ver == 0) 
    1c4a:	ldrb.w	r3, [sp]
    1c4e:	ands.w	r3, r3, #192	; 0xc0
    1c52:	beq.n	1c64 <sd_cardSize()+0x28>
                      | (csd.v1.c_size_mid << 2) | csd.v1.c_size_low;
    uint8_t c_size_mult = (csd.v1.c_size_mult_high << 1)
                          | csd.v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } 
  else if (csd.v2.csd_ver == 1) 
    1c54:	cmp	r3, #64	; 0x40
    1c56:	beq.n	1ca6 <sd_cardSize()+0x6a>
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    1c58:	ldr	r3, [pc, #104]	; (1cc4 <sd_cardSize()+0x88>)
    1c5a:	movs	r2, #11
    return (c_size + 1) <<9;
  } 
  else 
  {
    sd_setError(SD_CARD_ERROR_BAD_CSD);
    return 0;
    1c5c:	movs	r0, #0
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    1c5e:	strh	r2, [r3, #0]
  else 
  {
    sd_setError(SD_CARD_ERROR_BAD_CSD);
    return 0;
  }
}
    1c60:	add	sp, #20
    1c62:	pop	{r4, r5, pc}
  if (csd.v1.csd_ver == 0) 
  {
    uint8_t read_bl_len = csd.v1.read_bl_len;
    uint16_t c_size = (csd.v1.c_size_high << 10)
                      | (csd.v1.c_size_mid << 2) | csd.v1.c_size_low;
    uint8_t c_size_mult = (csd.v1.c_size_mult_high << 1)
    1c64:	ldrb.w	r4, [sp, #9]
  if (!(ret=sd_readCSD(&csd))) return 0;
  //
  if (csd.v1.csd_ver == 0) 
  {
    uint8_t read_bl_len = csd.v1.read_bl_len;
    uint16_t c_size = (csd.v1.c_size_high << 10)
    1c68:	ldrb.w	r3, [sp, #6]
                      | (csd.v1.c_size_mid << 2) | csd.v1.c_size_low;
    uint8_t c_size_mult = (csd.v1.c_size_mult_high << 1)
                          | csd.v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    1c6c:	ldrb.w	r2, [sp, #7]
    1c70:	and.w	r4, r4, #3
  {
    uint8_t read_bl_len = csd.v1.read_bl_len;
    uint16_t c_size = (csd.v1.c_size_high << 10)
                      | (csd.v1.c_size_mid << 2) | csd.v1.c_size_low;
    uint8_t c_size_mult = (csd.v1.c_size_mult_high << 1)
                          | csd.v1.c_size_mult_low;
    1c74:	ldrb.w	r0, [sp, #10]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    1c78:	and.w	r3, r3, #3
    1c7c:	lsls	r4, r4, #1
  //
  if (!(ret=sd_readCSD(&csd))) return 0;
  //
  if (csd.v1.csd_ver == 0) 
  {
    uint8_t read_bl_len = csd.v1.read_bl_len;
    1c7e:	ldrb.w	r1, [sp, #5]
    uint16_t c_size = (csd.v1.c_size_high << 10)
                      | (csd.v1.c_size_mid << 2) | csd.v1.c_size_low;
    uint8_t c_size_mult = (csd.v1.c_size_mult_high << 1)
                          | csd.v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    1c82:	lsls	r2, r2, #2
  //
  if (csd.v1.csd_ver == 0) 
  {
    uint8_t read_bl_len = csd.v1.read_bl_len;
    uint16_t c_size = (csd.v1.c_size_high << 10)
                      | (csd.v1.c_size_mid << 2) | csd.v1.c_size_low;
    1c84:	ldrb.w	r5, [sp, #8]
    uint8_t c_size_mult = (csd.v1.c_size_mult_high << 1)
                          | csd.v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    1c88:	orr.w	r0, r4, r0, lsr #7
    1c8c:	and.w	r1, r1, #15
    1c90:	orr.w	r3, r2, r3, lsl #10
    1c94:	add	r0, r1
    1c96:	orr.w	r3, r3, r5, lsr #6
    1c9a:	subs	r0, #7
    1c9c:	adds	r3, #1
    1c9e:	lsl.w	r0, r3, r0
  else 
  {
    sd_setError(SD_CARD_ERROR_BAD_CSD);
    return 0;
  }
}
    1ca2:	add	sp, #20
    1ca4:	pop	{r4, r5, pc}
  } 
  else if (csd.v2.csd_ver == 1) 
  {
    uint32_t c_size = 0X10000L * csd.v2.c_size_high + 0X100L
                      * (uint32_t)csd.v2.c_size_mid + csd.v2.c_size_low;
    return (c_size + 1) <<9;
    1ca6:	ldrb.w	r3, [sp, #9]
    1caa:	ldrb.w	r2, [sp, #8]
    1cae:	adds	r3, #1
                          | csd.v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } 
  else if (csd.v2.csd_ver == 1) 
  {
    uint32_t c_size = 0X10000L * csd.v2.c_size_high + 0X100L
    1cb0:	ldrb.w	r0, [sp, #7]
                      * (uint32_t)csd.v2.c_size_mid + csd.v2.c_size_low;
    return (c_size + 1) <<9;
    1cb4:	add.w	r3, r3, r2, lsl #8
    1cb8:	and.w	r0, r0, #63	; 0x3f
    1cbc:	add.w	r0, r3, r0, lsl #16
    1cc0:	lsls	r0, r0, #9
    1cc2:	b.n	1c60 <sd_cardSize()+0x24>
    1cc4:	.word	0x2000c7da

00001cc8 <sd_readBlock(unsigned long, unsigned char*)>:
// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
uint16_t sd_getError(void) {return m_sd_errorCode;}

void sd_setType(uint16_t type) {m_sd_type=type;}
uint16_t sd_getType(void) {return m_sd_type;}
    1cc8:	ldr	r3, [pc, #60]	; (1d08 <sd_readBlock(unsigned long, unsigned char*)+0x40>)
 
uint16_t sd_readBlock(uint32_t blockNumber, uint8_t* dst) 
{
//  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (sd_getType()!= SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    1cca:	ldrh	r3, [r3, #0]
    1ccc:	cmp	r3, #3
    1cce:	it	ne
    1cd0:	lslne	r0, r0, #9
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
 
uint16_t sd_readBlock(uint32_t blockNumber, uint8_t* dst) 
{
    1cd2:	push	{r4, lr}
    1cd4:	mov	r4, r1
//  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (sd_getType()!= SD_CARD_TYPE_SDHC) blockNumber <<= 9;
  if (sd_cardCommand(CMD17, blockNumber)) {
    1cd6:	mov	r1, r0
    1cd8:	movs	r0, #17
    1cda:	bl	1830 <sd_cardCommand(unsigned char, unsigned long)>
    1cde:	cbz	r0, 1cf0 <sd_readBlock(unsigned long, unsigned char*)+0x28>
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    1ce0:	ldr	r3, [pc, #40]	; (1d0c <sd_readBlock(unsigned long, unsigned char*)+0x44>)
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    1ce2:	movs	r1, #4
    1ce4:	ldr	r2, [pc, #40]	; (1d10 <sd_readBlock(unsigned long, unsigned char*)+0x48>)
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    1ce6:	ldrh	r3, [r3, #0]
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    1ce8:	strh	r1, [r2, #0]
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    1cea:	cbnz	r3, 1cfe <sd_readBlock(unsigned long, unsigned char*)+0x36>
  return sd_readData(dst, 512);

 fail:
  sd_chipSelect(HIGH);
  return FALSE;
}
    1cec:	movs	r0, #0
    1cee:	pop	{r4, pc}
  if (sd_getType()!= SD_CARD_TYPE_SDHC) blockNumber <<= 9;
  if (sd_cardCommand(CMD17, blockNumber)) {
    sd_setError(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  return sd_readData(dst, 512);
    1cf0:	mov	r0, r4
    1cf2:	mov.w	r1, #512	; 0x200

 fail:
  sd_chipSelect(HIGH);
  return FALSE;
}
    1cf6:	ldmia.w	sp!, {r4, lr}
  if (sd_getType()!= SD_CARD_TYPE_SDHC) blockNumber <<= 9;
  if (sd_cardCommand(CMD17, blockNumber)) {
    sd_setError(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  return sd_readData(dst, 512);
    1cfa:	b.w	1950 <sd_readData(unsigned char*, unsigned int)>
    1cfe:	movs	r0, #1
    1d00:	bl	1774 <sd_chipSelect(unsigned short) [clone .part.0]>

 fail:
  sd_chipSelect(HIGH);
  return FALSE;
}
    1d04:	movs	r0, #0
    1d06:	pop	{r4, pc}
    1d08:	.word	0x2000c7de
    1d0c:	.word	0x200017e2
    1d10:	.word	0x2000c7da

00001d14 <sd_readData2(unsigned char*)>:
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    1d14:	ldr	r3, [pc, #28]	; (1d34 <sd_readData2(unsigned char*)+0x20>)
    1d16:	ldrh	r3, [r3, #0]
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint16_t sd_readData2(uint8_t *dst) 
{
    1d18:	push	{r4, lr}
    1d1a:	mov	r4, r0
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    1d1c:	cbz	r3, 1d24 <sd_readData2(unsigned char*)+0x10>
    1d1e:	movs	r0, #0
    1d20:	bl	1774 <sd_chipSelect(unsigned short) [clone .part.0]>
 * the value zero, false, is returned for failure.
 */
uint16_t sd_readData2(uint8_t *dst) 
{
  sd_chipSelect(LOW);
  return sd_readData(dst, 512);
    1d24:	mov	r0, r4
    1d26:	mov.w	r1, #512	; 0x200
}
    1d2a:	ldmia.w	sp!, {r4, lr}
 * the value zero, false, is returned for failure.
 */
uint16_t sd_readData2(uint8_t *dst) 
{
  sd_chipSelect(LOW);
  return sd_readData(dst, 512);
    1d2e:	b.w	1950 <sd_readData(unsigned char*, unsigned int)>
    1d32:	nop
    1d34:	.word	0x200017e2

00001d38 <sd_readStart(unsigned long)>:
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint16_t sd_readStart(uint32_t blockNumber) 
{
    1d38:	push	{r3, lr}
// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
uint16_t sd_getError(void) {return m_sd_errorCode;}

void sd_setType(uint16_t type) {m_sd_type=type;}
uint16_t sd_getType(void) {return m_sd_type;}
    1d3a:	ldr	r3, [pc, #60]	; (1d78 <sd_readStart(unsigned long)+0x40>)
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint16_t sd_readStart(uint32_t blockNumber) 
{
    1d3c:	mov	r1, r0
  //SD_TRACE("RS", blockNumber);
  if (sd_getType()!= SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    1d3e:	ldrh	r3, [r3, #0]
    1d40:	cmp	r3, #3
    1d42:	it	ne
    1d44:	lslne	r1, r0, #9
  if (sd_cardCommand(CMD18, blockNumber)) {
    1d46:	movs	r0, #18
    1d48:	bl	1830 <sd_cardCommand(unsigned char, unsigned long)>
    1d4c:	cbz	r0, 1d5c <sd_readStart(unsigned long)+0x24>
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    1d4e:	ldr	r1, [pc, #44]	; (1d7c <sd_readStart(unsigned long)+0x44>)
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    1d50:	movs	r2, #5
    1d52:	ldr	r3, [pc, #44]	; (1d80 <sd_readStart(unsigned long)+0x48>)
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    1d54:	ldrh	r0, [r1, #0]
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    1d56:	strh	r2, [r3, #0]
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    1d58:	cbnz	r0, 1d6e <sd_readStart(unsigned long)+0x36>
  return TRUE;

 fail:
  sd_chipSelect(HIGH);
  return FALSE;
}
    1d5a:	pop	{r3, pc}
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    1d5c:	ldr	r3, [pc, #28]	; (1d7c <sd_readStart(unsigned long)+0x44>)
  if (sd_cardCommand(CMD18, blockNumber)) {
    sd_setError(SD_CARD_ERROR_CMD18);
    goto fail;
  }
  sd_chipSelect(HIGH);
  return TRUE;
    1d5e:	movs	r0, #1
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    1d60:	ldrh	r3, [r3, #0]
    1d62:	cmp	r3, #0
    1d64:	beq.n	1d5a <sd_readStart(unsigned long)+0x22>
    1d66:	bl	1774 <sd_chipSelect(unsigned short) [clone .part.0]>
  if (sd_cardCommand(CMD18, blockNumber)) {
    sd_setError(SD_CARD_ERROR_CMD18);
    goto fail;
  }
  sd_chipSelect(HIGH);
  return TRUE;
    1d6a:	movs	r0, #1
    1d6c:	pop	{r3, pc}
    1d6e:	movs	r0, #1
    1d70:	bl	1774 <sd_chipSelect(unsigned short) [clone .part.0]>
    1d74:	movs	r0, #0
    1d76:	pop	{r3, pc}
    1d78:	.word	0x2000c7de
    1d7c:	.word	0x200017e2
    1d80:	.word	0x2000c7da

00001d84 <sd_readStop()>:
* \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */

uint16_t sd_readStop() 
{
    1d84:	push	{r3, lr}
  if (sd_cardCommand(CMD12, 0)) {
    1d86:	movs	r1, #0
    1d88:	movs	r0, #12
    1d8a:	bl	1830 <sd_cardCommand(unsigned char, unsigned long)>
    1d8e:	cbz	r0, 1d9e <sd_readStop()+0x1a>
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    1d90:	ldr	r1, [pc, #40]	; (1dbc <sd_readStop()+0x38>)
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    1d92:	movs	r2, #3
    1d94:	ldr	r3, [pc, #40]	; (1dc0 <sd_readStop()+0x3c>)
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    1d96:	ldrh	r0, [r1, #0]
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    1d98:	strh	r2, [r3, #0]
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    1d9a:	cbnz	r0, 1db0 <sd_readStop()+0x2c>
  return TRUE;

 fail:
  sd_chipSelect(HIGH);
  return FALSE;
}
    1d9c:	pop	{r3, pc}
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    1d9e:	ldr	r3, [pc, #28]	; (1dbc <sd_readStop()+0x38>)
  if (sd_cardCommand(CMD12, 0)) {
    sd_setError(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  sd_chipSelect(HIGH);
  return TRUE;
    1da0:	movs	r0, #1
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    1da2:	ldrh	r3, [r3, #0]
    1da4:	cmp	r3, #0
    1da6:	beq.n	1d9c <sd_readStop()+0x18>
    1da8:	bl	1774 <sd_chipSelect(unsigned short) [clone .part.0]>
  if (sd_cardCommand(CMD12, 0)) {
    sd_setError(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  sd_chipSelect(HIGH);
  return TRUE;
    1dac:	movs	r0, #1
    1dae:	pop	{r3, pc}
    1db0:	movs	r0, #1
    1db2:	bl	1774 <sd_chipSelect(unsigned short) [clone .part.0]>
    1db6:	movs	r0, #0
    1db8:	pop	{r3, pc}
    1dba:	nop
    1dbc:	.word	0x200017e2
    1dc0:	.word	0x2000c7da

00001dc4 <SPI_disk_read(unsigned char*, unsigned long, unsigned int)>:
}

DRESULT SPI_disk_read(BYTE *buff, DWORD sector, UINT count)
{	
	DRESULT res = RES_OK;
	if(count==1)
    1dc4:	cmp	r2, #1
    
    return 0;
}

DRESULT SPI_disk_read(BYTE *buff, DWORD sector, UINT count)
{	
    1dc6:	push	{r3, r4, r5, r6, r7, lr}
    1dc8:	mov	r4, r0
    1dca:	mov	r0, r1
	DRESULT res = RES_OK;
	if(count==1)
    1dcc:	beq.n	1e02 <SPI_disk_read(unsigned char*, unsigned long, unsigned int)+0x3e>
    1dce:	mov	r7, r2
	{
		if(!sd_readBlock(sector, buff)) res = RES_READERROR;
	}
	else
	{
		if(!sd_readStart(sector)) res = RES_READERROR;
    1dd0:	bl	1d38 <sd_readStart(unsigned long)>
    1dd4:	cmp	r0, #0
    1dd6:	ite	ne
    1dd8:	movne	r6, #0
    1dda:	moveq	r6, #6
		for(UINT ii=0; ii<count;ii++)
    1ddc:	cbz	r7, 1df6 <SPI_disk_read(unsigned char*, unsigned long, unsigned int)+0x32>
    1dde:	movs	r5, #0
		{
		if(!sd_readData2(buff)) res = RES_READERROR;
    1de0:	mov	r0, r4
		if(!sd_readBlock(sector, buff)) res = RES_READERROR;
	}
	else
	{
		if(!sd_readStart(sector)) res = RES_READERROR;
		for(UINT ii=0; ii<count;ii++)
    1de2:	adds	r5, #1
		{
		if(!sd_readData2(buff)) res = RES_READERROR;
    1de4:	bl	1d14 <sd_readData2(unsigned char*)>
    1de8:	cmp	r0, #0
		sector++;
		buff += 512;    
    1dea:	add.w	r4, r4, #512	; 0x200
	else
	{
		if(!sd_readStart(sector)) res = RES_READERROR;
		for(UINT ii=0; ii<count;ii++)
		{
		if(!sd_readData2(buff)) res = RES_READERROR;
    1dee:	it	eq
    1df0:	moveq	r6, #6
		if(!sd_readBlock(sector, buff)) res = RES_READERROR;
	}
	else
	{
		if(!sd_readStart(sector)) res = RES_READERROR;
		for(UINT ii=0; ii<count;ii++)
    1df2:	cmp	r7, r5
    1df4:	bne.n	1de0 <SPI_disk_read(unsigned char*, unsigned long, unsigned int)+0x1c>
		{
		if(!sd_readData2(buff)) res = RES_READERROR;
		sector++;
		buff += 512;    
		}
		if(!sd_readStop()) res = RES_READERROR;
    1df6:	bl	1d84 <sd_readStop()>
    1dfa:	cbnz	r0, 1dfe <SPI_disk_read(unsigned char*, unsigned long, unsigned int)+0x3a>
DRESULT SPI_disk_read(BYTE *buff, DWORD sector, UINT count)
{	
	DRESULT res = RES_OK;
	if(count==1)
	{
		if(!sd_readBlock(sector, buff)) res = RES_READERROR;
    1dfc:	movs	r6, #6
		}
		if(!sd_readStop()) res = RES_READERROR;
	}

    return res;
}
    1dfe:	mov	r0, r6
    1e00:	pop	{r3, r4, r5, r6, r7, pc}
DRESULT SPI_disk_read(BYTE *buff, DWORD sector, UINT count)
{	
	DRESULT res = RES_OK;
	if(count==1)
	{
		if(!sd_readBlock(sector, buff)) res = RES_READERROR;
    1e02:	mov	r1, r4
    1e04:	bl	1cc8 <sd_readBlock(unsigned long, unsigned char*)>
    1e08:	cmp	r0, #0
    1e0a:	beq.n	1dfc <SPI_disk_read(unsigned char*, unsigned long, unsigned int)+0x38>
    return 0;
}

DRESULT SPI_disk_read(BYTE *buff, DWORD sector, UINT count)
{	
	DRESULT res = RES_OK;
    1e0c:	movs	r6, #0
    1e0e:	b.n	1dfe <SPI_disk_read(unsigned char*, unsigned long, unsigned int)+0x3a>

00001e10 <sd_writeData(unsigned char, unsigned char const*)>:
}

//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
uint16_t sd_writeData(uint8_t token, const uint8_t* src) 
{
    1e10:	push	{r3, r4, r5, r6, r7, lr}
    1e12:	subs	r2, r1, #1
      0xEF1F, 0xFF3E, 0xCF5D, 0xDF7C, 0xAF9B, 0xBFBA, 0x8FD9, 0x9FF8,
      0x6E17, 0x7E36, 0x4E55, 0x5E74, 0x2E93, 0x3EB2, 0x0ED1, 0x1EF0
    };

    static uint16_t CRC_CCITT(const uint8_t* data, size_t n) {
      uint16_t crc = 0;
    1e14:	movs	r5, #0
    1e16:	ldr	r7, [pc, #156]	; (1eb4 <sd_writeData(unsigned char, unsigned char const*)+0xa4>)
    1e18:	addw	r6, r1, #511	; 0x1ff
      size_t ii;
      for (ii = 0; ii < n; ii++) {
      crc = crctab[(crc >> 8 ^ data[ii]) & 0XFF] ^ (crc << 8);
    1e1c:	ldrb.w	r3, [r2, #1]!
    1e20:	eor.w	r3, r3, r5, lsr #8
    };

    static uint16_t CRC_CCITT(const uint8_t* data, size_t n) {
      uint16_t crc = 0;
      size_t ii;
      for (ii = 0; ii < n; ii++) {
    1e24:	cmp	r6, r2
      crc = crctab[(crc >> 8 ^ data[ii]) & 0XFF] ^ (crc << 8);
    1e26:	ldrh.w	r3, [r7, r3, lsl #1]
    1e2a:	eor.w	r4, r3, r5, lsl #8
    1e2e:	sxth	r4, r4
    1e30:	uxth	r5, r4
    };

    static uint16_t CRC_CCITT(const uint8_t* data, size_t n) {
      uint16_t crc = 0;
      size_t ii;
      for (ii = 0; ii < n; ii++) {
    1e32:	bne.n	1e1c <sd_writeData(unsigned char, unsigned char const*)+0xc>
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    1e34:	ldr	r3, [pc, #128]	; (1eb8 <sd_writeData(unsigned char, unsigned char const*)+0xa8>)
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    1e36:	mov	r2, r3
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    1e38:	str	r0, [r3, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    1e3a:	ldr	r3, [r2, #92]	; 0x5c
    1e3c:	ldr	r6, [pc, #120]	; (1eb8 <sd_writeData(unsigned char, unsigned char const*)+0xa8>)
		if (fifo > 0) return spi->RDR; 
    1e3e:	tst.w	r3, #2031616	; 0x1f0000
    1e42:	beq.n	1e3a <sd_writeData(unsigned char, unsigned char const*)+0x2a>
    1e44:	mov	r0, r1
    1e46:	mov.w	r2, #512	; 0x200
    1e4a:	movs	r1, #0
    1e4c:	ldr	r3, [r6, #116]	; 0x74
    1e4e:	bl	17c4 <spi_transfer(void const*, void*, unsigned int) [clone .part.4]>
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    1e52:	mov	r1, r6
    1e54:	asrs	r3, r5, #8
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    1e56:	str	r3, [r6, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    1e58:	ldr	r3, [r1, #92]	; 0x5c
    1e5a:	ldr	r2, [pc, #92]	; (1eb8 <sd_writeData(unsigned char, unsigned char const*)+0xa8>)
		if (fifo > 0) return spi->RDR; 
    1e5c:	tst.w	r3, #2031616	; 0x1f0000
    1e60:	beq.n	1e58 <sd_writeData(unsigned char, unsigned char const*)+0x48>
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    1e62:	uxtb	r4, r4
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    1e64:	mov	r1, r2
		if (fifo > 0) return spi->RDR; 
    1e66:	ldr	r3, [r2, #116]	; 0x74
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    1e68:	str	r4, [r2, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    1e6a:	ldr	r3, [r1, #92]	; 0x5c
    1e6c:	ldr	r2, [pc, #72]	; (1eb8 <sd_writeData(unsigned char, unsigned char const*)+0xa8>)
		if (fifo > 0) return spi->RDR; 
    1e6e:	tst.w	r3, #2031616	; 0x1f0000
    1e72:	beq.n	1e6a <sd_writeData(unsigned char, unsigned char const*)+0x5a>
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    1e74:	movs	r3, #255	; 0xff
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    1e76:	mov	r1, r2
		if (fifo > 0) return spi->RDR; 
    1e78:	ldr	r0, [r2, #116]	; 0x74
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    1e7a:	str	r3, [r2, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    1e7c:	ldr	r3, [r1, #92]	; 0x5c
    1e7e:	ldr	r2, [pc, #56]	; (1eb8 <sd_writeData(unsigned char, unsigned char const*)+0xa8>)
		if (fifo > 0) return spi->RDR; 
    1e80:	tst.w	r3, #2031616	; 0x1f0000
    1e84:	beq.n	1e7c <sd_writeData(unsigned char, unsigned char const*)+0x6c>
    1e86:	ldr	r3, [r2, #116]	; 0x74

  spi_send(token);
  spi_sendBulk(src, 512);
  spi_send(crc >> 8);
  spi_send(crc & 0XFF);
  m_sd_status=spi_receive();
    1e88:	ldr	r1, [pc, #48]	; (1ebc <sd_writeData(unsigned char, unsigned char const*)+0xac>)
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
		if (fifo > 0) return spi->RDR; 
    1e8a:	uxtb	r3, r3
  spi_sendBulk(src, 512);
  spi_send(crc >> 8);
  spi_send(crc & 0XFF);
  m_sd_status=spi_receive();

  if ((m_sd_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    1e8c:	and.w	r2, r3, #31

  spi_send(token);
  spi_sendBulk(src, 512);
  spi_send(crc >> 8);
  spi_send(crc & 0XFF);
  m_sd_status=spi_receive();
    1e90:	strh	r3, [r1, #0]

  if ((m_sd_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    1e92:	cmp	r2, #5
    1e94:	beq.n	1eae <sd_writeData(unsigned char, unsigned char const*)+0x9e>
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    1e96:	ldr	r1, [pc, #40]	; (1ec0 <sd_writeData(unsigned char, unsigned char const*)+0xb0>)
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    1e98:	movs	r2, #19
    1e9a:	ldr	r3, [pc, #40]	; (1ec4 <sd_writeData(unsigned char, unsigned char const*)+0xb4>)
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    1e9c:	ldrh	r0, [r1, #0]
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    1e9e:	strh	r2, [r3, #0]
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    1ea0:	cbnz	r0, 1ea4 <sd_writeData(unsigned char, unsigned char const*)+0x94>
  return TRUE;

 fail:
  sd_chipSelect(HIGH);
  return FALSE;
}
    1ea2:	pop	{r3, r4, r5, r6, r7, pc}
    1ea4:	movs	r0, #1
    1ea6:	bl	1774 <sd_chipSelect(unsigned short) [clone .part.0]>
  }
  return TRUE;

 fail:
  sd_chipSelect(HIGH);
  return FALSE;
    1eaa:	movs	r0, #0
    1eac:	pop	{r3, r4, r5, r6, r7, pc}
  if ((m_sd_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    sd_setError(SD_CARD_ERROR_WRITE);
//  fprintf(stderr,"write error %x\r\n",m_sd_status & DATA_RES_MASK);
    goto fail;
  }
  return TRUE;
    1eae:	movs	r0, #1

 fail:
  sd_chipSelect(HIGH);
  return FALSE;
}
    1eb0:	pop	{r3, r4, r5, r6, r7, pc}
    1eb2:	nop
    1eb4:	.word	0x20000384
    1eb8:	.word	0x403a0000
    1ebc:	.word	0x2000c7dc
    1ec0:	.word	0x200017e2
    1ec4:	.word	0x2000c7da

00001ec8 <sd_writeData2(unsigned char const*)>:
 * \param[in] src Pointer to the location of the data to be written.
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint16_t sd_writeData2(const uint8_t* src) 
{
    1ec8:	push	{r3, r4, r5, r6, r7, lr}
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    1eca:	ldr	r4, [pc, #108]	; (1f38 <sd_writeData2(unsigned char const*)+0x70>)
 * \param[in] src Pointer to the location of the data to be written.
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint16_t sd_writeData2(const uint8_t* src) 
{
    1ecc:	mov	r5, r0
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    1ece:	ldrh	r3, [r4, #0]
    1ed0:	cbnz	r3, 1f26 <sd_writeData2(unsigned char const*)+0x5e>
    1ed2:	ldr	r1, [pc, #104]	; (1f3c <sd_writeData2(unsigned char const*)+0x74>)
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    1ed4:	movs	r7, #255	; 0xff
    1ed6:	ldr	r2, [pc, #104]	; (1f40 <sd_writeData2(unsigned char const*)+0x78>)
    1ed8:	ldr	r0, [r1, #0]
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    1eda:	mov	r6, r2
{
  uint16_t t0;
  uint16_t ret;
  t0  = millis();
  while ((ret=spi_receive()) != 0XFF) 
  { if (((uint16_t)millis() - t0) >= timeoutMillis) return FALSE;
    1edc:	uxth	r0, r0
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    1ede:	str	r7, [r2, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    1ee0:	ldr	r3, [r2, #92]	; 0x5c
		if (fifo > 0) return spi->RDR; 
    1ee2:	tst.w	r3, #2031616	; 0x1f0000
    1ee6:	beq.n	1ee0 <sd_writeData2(unsigned char const*)+0x18>
    1ee8:	ldr	r3, [r6, #116]	; 0x74
uint16_t sd_waitNotBusy(uint16_t timeoutMillis) 
{
  uint16_t t0;
  uint16_t ret;
  t0  = millis();
  while ((ret=spi_receive()) != 0XFF) 
    1eea:	uxtb	r3, r3
    1eec:	cmp	r3, #255	; 0xff
    1eee:	beq.n	1f08 <sd_writeData2(unsigned char const*)+0x40>
    1ef0:	ldr	r3, [r1, #0]
  { if (((uint16_t)millis() - t0) >= timeoutMillis) return FALSE;
    1ef2:	uxth	r3, r3
    1ef4:	subs	r3, r3, r0
    1ef6:	cmp.w	r3, #600	; 0x258
    1efa:	blt.n	1ede <sd_writeData2(unsigned char const*)+0x16>
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    1efc:	movs	r2, #21
    1efe:	ldr	r3, [pc, #68]	; (1f44 <sd_writeData2(unsigned char const*)+0x7c>)
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    1f00:	ldrh	r0, [r4, #0]
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    1f02:	strh	r2, [r3, #0]
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    1f04:	cbnz	r0, 1f1c <sd_writeData2(unsigned char const*)+0x54>

 fail:
  sd_setError(SD_CARD_ERROR_WRITE_MULTIPLE);
  sd_chipSelect(HIGH);
  return FALSE;
}
    1f06:	pop	{r3, r4, r5, r6, r7, pc}
uint16_t sd_writeData2(const uint8_t* src) 
{
// unused // static long cnt=0;
  sd_chipSelect(LOW);
  if (!sd_waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
  if (!sd_writeData(WRITE_MULTIPLE_TOKEN, src)) goto fail;
    1f08:	mov	r1, r5
    1f0a:	movs	r0, #252	; 0xfc
    1f0c:	bl	1e10 <sd_writeData(unsigned char, unsigned char const*)>
    1f10:	cmp	r0, #0
    1f12:	beq.n	1efc <sd_writeData2(unsigned char const*)+0x34>
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    1f14:	ldrh	r3, [r4, #0]
    1f16:	movs	r0, #1
    1f18:	cbnz	r3, 1f2e <sd_writeData2(unsigned char const*)+0x66>
    1f1a:	pop	{r3, r4, r5, r6, r7, pc}
    1f1c:	movs	r0, #1
    1f1e:	bl	1774 <sd_chipSelect(unsigned short) [clone .part.0]>
  return TRUE;

 fail:
  sd_setError(SD_CARD_ERROR_WRITE_MULTIPLE);
  sd_chipSelect(HIGH);
  return FALSE;
    1f22:	movs	r0, #0
    1f24:	pop	{r3, r4, r5, r6, r7, pc}
    1f26:	movs	r0, #0
    1f28:	bl	1774 <sd_chipSelect(unsigned short) [clone .part.0]>
    1f2c:	b.n	1ed2 <sd_writeData2(unsigned char const*)+0xa>
    1f2e:	bl	1774 <sd_chipSelect(unsigned short) [clone .part.0]>
    1f32:	movs	r0, #1
    1f34:	pop	{r3, r4, r5, r6, r7, pc}
    1f36:	nop
    1f38:	.word	0x200017e2
    1f3c:	.word	0x20009d58
    1f40:	.word	0x403a0000
    1f44:	.word	0x2000c7da

00001f48 <sd_writeStart(unsigned long, unsigned long)>:
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint16_t sd_writeStart(uint32_t blockNumber, uint32_t eraseCount) 
{
    1f48:	push	{r3, r4, r5, lr}
    1f4a:	mov	r4, r0
  // send pre-erase count
  if(eraseCount)
    1f4c:	cbnz	r1, 1f82 <sd_writeStart(unsigned long, unsigned long)+0x3a>
// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
uint16_t sd_getError(void) {return m_sd_errorCode;}

void sd_setType(uint16_t type) {m_sd_type=type;}
uint16_t sd_getType(void) {return m_sd_type;}
    1f4e:	ldr	r3, [pc, #88]	; (1fa8 <sd_writeStart(unsigned long, unsigned long)+0x60>)
    goto fail;
    }
  }
  // use address if not SDHC card
  if (sd_getType() != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
  if (sd_cardCommand(CMD25, blockNumber)) {
    1f50:	movs	r0, #25
    sd_setError(SD_CARD_ERROR_ACMD23);
    goto fail;
    }
  }
  // use address if not SDHC card
  if (sd_getType() != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    1f52:	ldrh	r3, [r3, #0]
    1f54:	cmp	r3, #3
    1f56:	it	ne
    1f58:	lslne	r4, r4, #9
  if (sd_cardCommand(CMD25, blockNumber)) {
    1f5a:	mov	r1, r4
    1f5c:	bl	1830 <sd_cardCommand(unsigned char, unsigned long)>
    1f60:	cbz	r0, 1f78 <sd_writeStart(unsigned long, unsigned long)+0x30>
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    1f62:	ldr	r3, [pc, #72]	; (1fac <sd_writeStart(unsigned long, unsigned long)+0x64>)
    1f64:	movs	r2, #7
    1f66:	strh	r2, [r3, #0]
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    1f68:	ldr	r3, [pc, #68]	; (1fb0 <sd_writeStart(unsigned long, unsigned long)+0x68>)
    1f6a:	ldrh	r0, [r3, #0]
    1f6c:	cbz	r0, 1f80 <sd_writeStart(unsigned long, unsigned long)+0x38>
    1f6e:	movs	r0, #1
    1f70:	bl	1774 <sd_chipSelect(unsigned short) [clone .part.0]>
  sd_chipSelect(HIGH);
  return TRUE;

 fail:
  sd_chipSelect(HIGH);
  return FALSE;
    1f74:	movs	r0, #0
    1f76:	pop	{r3, r4, r5, pc}
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    1f78:	ldr	r3, [pc, #52]	; (1fb0 <sd_writeStart(unsigned long, unsigned long)+0x68>)
    1f7a:	movs	r0, #1
    1f7c:	ldrh	r3, [r3, #0]
    1f7e:	cbnz	r3, 1fa0 <sd_writeStart(unsigned long, unsigned long)+0x58>
  return TRUE;

 fail:
  sd_chipSelect(HIGH);
  return FALSE;
}
    1f80:	pop	{r3, r4, r5, pc}
    1f82:	mov	r5, r1
  uint16_t sd_readCID(cid_t* cid) {  return sd_readRegister(CMD10, cid); }
  uint16_t sd_readCSD(csd_t* csd) {  return sd_readRegister(CMD9, csd); }

 
uint8_t sd_cardAcmd(uint8_t cmd, uint32_t arg) 
{   sd_cardCommand(CMD55, 0);
    1f84:	movs	r0, #55	; 0x37
    1f86:	movs	r1, #0
    1f88:	bl	1830 <sd_cardCommand(unsigned char, unsigned long)>
    return sd_cardCommand(cmd, arg);
    1f8c:	mov	r1, r5
    1f8e:	movs	r0, #23
    1f90:	bl	1830 <sd_cardCommand(unsigned char, unsigned long)>
uint16_t sd_writeStart(uint32_t blockNumber, uint32_t eraseCount) 
{
  // send pre-erase count
  if(eraseCount)
  {
    if (sd_cardAcmd(ACMD23, eraseCount)) {
    1f94:	cmp	r0, #0
    1f96:	beq.n	1f4e <sd_writeStart(unsigned long, unsigned long)+0x6>
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    1f98:	ldr	r3, [pc, #16]	; (1fac <sd_writeStart(unsigned long, unsigned long)+0x64>)
    1f9a:	movs	r2, #9
    1f9c:	strh	r2, [r3, #0]
    1f9e:	b.n	1f68 <sd_writeStart(unsigned long, unsigned long)+0x20>
    1fa0:	bl	1774 <sd_chipSelect(unsigned short) [clone .part.0]>
    1fa4:	movs	r0, #1
    1fa6:	pop	{r3, r4, r5, pc}
    1fa8:	.word	0x2000c7de
    1fac:	.word	0x2000c7da
    1fb0:	.word	0x200017e2

00001fb4 <sd_writeStop()>:
 *
* \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint16_t sd_writeStop(void) 
{
    1fb4:	push	{r3, r4, r5, r6, r7, lr}
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    1fb6:	ldr	r4, [pc, #164]	; (205c <sd_writeStop()+0xa8>)
    1fb8:	ldrh	r0, [r4, #0]
    1fba:	cmp	r0, #0
    1fbc:	bne.n	2040 <sd_writeStop()+0x8c>
    1fbe:	ldr	r4, [pc, #160]	; (2060 <sd_writeStop()+0xac>)
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    1fc0:	movs	r7, #255	; 0xff
    1fc2:	ldr	r2, [pc, #160]	; (2064 <sd_writeStop()+0xb0>)
    1fc4:	ldr	r5, [r4, #0]
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    1fc6:	mov	r6, r2
{
  uint16_t t0;
  uint16_t ret;
  t0  = millis();
  while ((ret=spi_receive()) != 0XFF) 
  { if (((uint16_t)millis() - t0) >= timeoutMillis) return FALSE;
    1fc8:	uxth	r5, r5
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    1fca:	str	r7, [r2, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    1fcc:	ldr	r3, [r2, #92]	; 0x5c
    1fce:	ldr	r1, [pc, #148]	; (2064 <sd_writeStop()+0xb0>)
		if (fifo > 0) return spi->RDR; 
    1fd0:	tst.w	r3, #2031616	; 0x1f0000
    1fd4:	beq.n	1fcc <sd_writeStop()+0x18>
    1fd6:	ldr	r3, [r6, #116]	; 0x74
uint16_t sd_waitNotBusy(uint16_t timeoutMillis) 
{
  uint16_t t0;
  uint16_t ret;
  t0  = millis();
  while ((ret=spi_receive()) != 0XFF) 
    1fd8:	uxtb	r3, r3
    1fda:	cmp	r3, #255	; 0xff
    1fdc:	beq.n	1ff4 <sd_writeStop()+0x40>
    1fde:	ldr	r3, [r4, #0]
  { if (((uint16_t)millis() - t0) >= timeoutMillis) return FALSE;
    1fe0:	uxth	r3, r3
    1fe2:	subs	r3, r3, r5
    1fe4:	cmp.w	r3, #600	; 0x258
    1fe8:	blt.n	1fca <sd_writeStop()+0x16>
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    1fea:	ldr	r3, [pc, #124]	; (2068 <sd_writeStop()+0xb4>)
    1fec:	movs	r2, #18
    1fee:	strh	r2, [r3, #0]
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    1ff0:	cbnz	r0, 2036 <sd_writeStop()+0x82>

 fail:
  sd_setError(SD_CARD_ERROR_STOP_TRAN);
  sd_chipSelect(HIGH);
  return FALSE;
}
    1ff2:	pop	{r3, r4, r5, r6, r7, pc}
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    1ff4:	movs	r3, #253	; 0xfd
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    1ff6:	mov	r5, r1
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    1ff8:	str	r3, [r1, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    1ffa:	ldr	r3, [r5, #92]	; 0x5c
    1ffc:	ldr	r2, [pc, #100]	; (2064 <sd_writeStop()+0xb0>)
		if (fifo > 0) return spi->RDR; 
    1ffe:	tst.w	r3, #2031616	; 0x1f0000
    2002:	beq.n	1ffa <sd_writeStop()+0x46>
    2004:	ldr	r3, [r2, #116]	; 0x74
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    2006:	movs	r6, #255	; 0xff
    2008:	ldr	r1, [r4, #0]
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    200a:	mov	r5, r2
{
  uint16_t t0;
  uint16_t ret;
  t0  = millis();
  while ((ret=spi_receive()) != 0XFF) 
  { if (((uint16_t)millis() - t0) >= timeoutMillis) return FALSE;
    200c:	uxth	r1, r1
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    200e:	str	r6, [r2, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    2010:	ldr	r3, [r2, #92]	; 0x5c
		if (fifo > 0) return spi->RDR; 
    2012:	tst.w	r3, #2031616	; 0x1f0000
    2016:	beq.n	2010 <sd_writeStop()+0x5c>
    2018:	ldr	r3, [r5, #116]	; 0x74
uint16_t sd_waitNotBusy(uint16_t timeoutMillis) 
{
  uint16_t t0;
  uint16_t ret;
  t0  = millis();
  while ((ret=spi_receive()) != 0XFF) 
    201a:	uxtb	r3, r3
    201c:	cmp	r3, #255	; 0xff
    201e:	beq.n	204a <sd_writeStop()+0x96>
    2020:	ldr	r3, [r4, #0]
  { if (((uint16_t)millis() - t0) >= timeoutMillis) return FALSE;
    2022:	uxth	r3, r3
    2024:	subs	r3, r3, r1
    2026:	cmp.w	r3, #600	; 0x258
    202a:	blt.n	200e <sd_writeStop()+0x5a>
	uint16_t m_sckDivisor;
	uint16_t m_sd_status;
	uint16_t m_sd_type;

// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
    202c:	ldr	r3, [pc, #56]	; (2068 <sd_writeStop()+0xb4>)
    202e:	movs	r2, #18
    2030:	strh	r2, [r3, #0]
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    2032:	cmp	r0, #0
    2034:	beq.n	1ff2 <sd_writeStop()+0x3e>
    2036:	movs	r0, #1
    2038:	bl	1774 <sd_chipSelect(unsigned short) [clone .part.0]>
  return TRUE;

 fail:
  sd_setError(SD_CARD_ERROR_STOP_TRAN);
  sd_chipSelect(HIGH);
  return FALSE;
    203c:	movs	r0, #0
    203e:	pop	{r3, r4, r5, r6, r7, pc}
    2040:	movs	r0, #0
    2042:	bl	1774 <sd_chipSelect(unsigned short) [clone .part.0]>
    2046:	ldrh	r0, [r4, #0]
    2048:	b.n	1fbe <sd_writeStop()+0xa>
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    204a:	cbnz	r0, 2050 <sd_writeStop()+0x9c>
  sd_chipSelect(LOW);
  if (!sd_waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
  spi_send(STOP_TRAN_TOKEN);
  if (!sd_waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
  sd_chipSelect(HIGH);
  return TRUE;
    204c:	movs	r0, #1
    204e:	pop	{r3, r4, r5, r6, r7, pc}
    2050:	movs	r0, #1
    2052:	bl	1774 <sd_chipSelect(unsigned short) [clone .part.0]>
    2056:	movs	r0, #1
    2058:	pop	{r3, r4, r5, r6, r7, pc}
    205a:	nop
    205c:	.word	0x200017e2
    2060:	.word	0x20009d58
    2064:	.word	0x403a0000
    2068:	.word	0x2000c7da

0000206c <SPI_disk_write(unsigned char const*, unsigned long, unsigned int)>:
	}

    return res;
}
DRESULT SPI_disk_write(const BYTE *buff, DWORD sector, UINT count)
{
    206c:	push	{r3, r4, r5, r6, r7, lr}
    206e:	mov	r3, r1
    2070:	mov	r4, r0
    DRESULT res = RES_OK;
    if(!sd_writeStart(sector,count)) res = RES_WRITEERROR;
    2072:	mov	r1, r2
	}

    return res;
}
DRESULT SPI_disk_write(const BYTE *buff, DWORD sector, UINT count)
{
    2074:	mov	r7, r2
    DRESULT res = RES_OK;
    if(!sd_writeStart(sector,count)) res = RES_WRITEERROR;
    2076:	mov	r0, r3
    2078:	bl	1f48 <sd_writeStart(unsigned long, unsigned long)>
    207c:	cmp	r0, #0
    207e:	ite	ne
    2080:	movne	r6, #0
    2082:	moveq	r6, #7
	
    for(UINT ii=0; ii<count;ii++)
    2084:	cbz	r7, 209e <SPI_disk_write(unsigned char const*, unsigned long, unsigned int)+0x32>
    2086:	movs	r5, #0
    {
      if(!sd_writeData2(buff)) res = RES_WRITEERROR;
    2088:	mov	r0, r4
DRESULT SPI_disk_write(const BYTE *buff, DWORD sector, UINT count)
{
    DRESULT res = RES_OK;
    if(!sd_writeStart(sector,count)) res = RES_WRITEERROR;
	
    for(UINT ii=0; ii<count;ii++)
    208a:	adds	r5, #1
    {
      if(!sd_writeData2(buff)) res = RES_WRITEERROR;
    208c:	bl	1ec8 <sd_writeData2(unsigned char const*)>
    2090:	cmp	r0, #0
      sector++;
      buff += 512;    
    2092:	add.w	r4, r4, #512	; 0x200
    DRESULT res = RES_OK;
    if(!sd_writeStart(sector,count)) res = RES_WRITEERROR;
	
    for(UINT ii=0; ii<count;ii++)
    {
      if(!sd_writeData2(buff)) res = RES_WRITEERROR;
    2096:	it	eq
    2098:	moveq	r6, #7
DRESULT SPI_disk_write(const BYTE *buff, DWORD sector, UINT count)
{
    DRESULT res = RES_OK;
    if(!sd_writeStart(sector,count)) res = RES_WRITEERROR;
	
    for(UINT ii=0; ii<count;ii++)
    209a:	cmp	r7, r5
    209c:	bne.n	2088 <SPI_disk_write(unsigned char const*, unsigned long, unsigned int)+0x1c>
    {
      if(!sd_writeData2(buff)) res = RES_WRITEERROR;
      sector++;
      buff += 512;    
    }
	if(!sd_writeStop()) res = RES_WRITEERROR;
    209e:	bl	1fb4 <sd_writeStop()>
    20a2:	cmp	r0, #0

    return res;
}
    20a4:	ite	ne
    20a6:	movne	r0, r6
    20a8:	moveq	r0, #7
    20aa:	pop	{r3, r4, r5, r6, r7, pc}

000020ac <spi_begin(unsigned long, unsigned char, unsigned char)>:

	  spi->CR = LPSPI_CR_RST; 
	} 

	void spi_begin(uint32_t clck, uint8_t bitOrder, uint8_t dataMode)
	{
    20ac:	push	{r4, r5, r6, r7, lr}
		const uint32_t clk_sel[4] = {664615384,  // PLL3 PFD1
				   720000000,  // PLL3 PFD0
				   528000000,  // PLL2
				   396000000}; // PLL2 PFD2       
    20ae:	ldr	r3, [pc, #148]	; (2144 <spi_begin(unsigned long, unsigned char, unsigned char)+0x98>)

	  spi->CR = LPSPI_CR_RST; 
	} 

	void spi_begin(uint32_t clck, uint8_t bitOrder, uint8_t dataMode)
	{
    20b0:	sub	sp, #20
    20b2:	mov	r6, r0
				   396000000}; // PLL2 PFD2       
		uint32_t cbcmr = CCM_CBCMR;
		uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
		
		uint32_t d, div;    
		if (clck == 0) clck =1;
    20b4:	cmp	r0, #0
	void spi_begin(uint32_t clck, uint8_t bitOrder, uint8_t dataMode)
	{
		const uint32_t clk_sel[4] = {664615384,  // PLL3 PFD1
				   720000000,  // PLL3 PFD0
				   528000000,  // PLL2
				   396000000}; // PLL2 PFD2       
    20b6:	add.w	lr, sp, #16

	  spi->CR = LPSPI_CR_RST; 
	} 

	void spi_begin(uint32_t clck, uint8_t bitOrder, uint8_t dataMode)
	{
    20ba:	mov	r5, r1
    20bc:	mov	r4, r2
		const uint32_t clk_sel[4] = {664615384,  // PLL3 PFD1
				   720000000,  // PLL3 PFD0
				   528000000,  // PLL2
				   396000000}; // PLL2 PFD2       
		uint32_t cbcmr = CCM_CBCMR;
    20be:	ldr	r7, [pc, #136]	; (2148 <spi_begin(unsigned long, unsigned char, unsigned char)+0x9c>)
		uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
		
		uint32_t d, div;    
		if (clck == 0) clck =1;
    20c0:	it	eq
    20c2:	moveq	r6, #1
	void spi_begin(uint32_t clck, uint8_t bitOrder, uint8_t dataMode)
	{
		const uint32_t clk_sel[4] = {664615384,  // PLL3 PFD1
				   720000000,  // PLL3 PFD0
				   528000000,  // PLL2
				   396000000}; // PLL2 PFD2       
    20c4:	ldmia	r3, {r0, r1, r2, r3}
    20c6:	stmdb	lr, {r0, r1, r2, r3}
		uint32_t cbcmr = CCM_CBCMR;
    20ca:	ldr	r3, [r7, #24]
		uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    20cc:	ubfx	r2, r3, #4, #2
    20d0:	ubfx	r3, r3, #26, #3
    20d4:	add.w	r2, lr, r2, lsl #2
    20d8:	adds	r3, #1
    20da:	ldr.w	r2, [r2, #-16]
    20de:	udiv	r3, r2, r3
		
		uint32_t d, div;    
		if (clck == 0) clck =1;
		d= clkhz/clck;
    20e2:	udiv	r2, r3, r6
		if (d && clkhz/d > clck) d++;
    20e6:	cbz	r2, 20fc <spi_begin(unsigned long, unsigned char, unsigned char)+0x50>
    20e8:	udiv	r3, r3, r2
    20ec:	cmp	r6, r3
    20ee:	it	cc
    20f0:	addcc	r2, #1
		if (d > 257) d= 257;  // max div
    20f2:	cmp.w	r2, #258	; 0x102
    20f6:	bcc.n	2130 <spi_begin(unsigned long, unsigned char, unsigned char)+0x84>
    20f8:	movw	r2, #32767	; 0x7fff
		  div = d-2;
		} else {
		  div =0;
		}
		uint32_t ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);
		uint32_t tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    20fc:	cmp	r5, #0
    20fe:	ldr	r3, [pc, #76]	; (214c <spi_begin(unsigned long, unsigned char, unsigned char)+0xa0>)

		// PCS to SCK Delay Prescaler into the After SCK Delay Prescaler  
		if (dataMode & 0x04) tcr |= LPSPI_TCR_CPHA; 


	  spi->CR = 0; 
    2100:	mov.w	r5, #0
		  div = d-2;
		} else {
		  div =0;
		}
		uint32_t ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2);
		uint32_t tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    2104:	it	ne
    2106:	movne	r3, #7

		// handle LSB setup 
		if (bitOrder == LSBFIRST) tcr |= LPSPI_TCR_LSBF;

		// Handle Data Mode
		if (dataMode & 0x08) tcr |= LPSPI_TCR_CPOL;
    2108:	lsls	r0, r4, #28
	  spi->CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE; 
	//  spi->CCR = LPSPI_CCR_SCKDIV(4); 
	//  spi->TCR = LPSPI_TCR_FRAMESZ(7); 
	  spi->CCR = ccr; 
	  spi->TCR = tcr; 
	  spi->CR = LPSPI_CR_MEN; 
    210a:	mov.w	r0, #1

		// handle LSB setup 
		if (bitOrder == LSBFIRST) tcr |= LPSPI_TCR_LSBF;

		// Handle Data Mode
		if (dataMode & 0x08) tcr |= LPSPI_TCR_CPOL;
    210e:	it	mi
    2110:	orrmi.w	r3, r3, #2147483648	; 0x80000000

		// PCS to SCK Delay Prescaler into the After SCK Delay Prescaler  
		if (dataMode & 0x04) tcr |= LPSPI_TCR_CPHA; 
    2114:	lsls	r1, r4, #29


	  spi->CR = 0; 
    2116:	ldr	r1, [pc, #56]	; (2150 <spi_begin(unsigned long, unsigned char, unsigned char)+0xa4>)
	  spi->CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE; 
    2118:	mov.w	r4, #3

		// Handle Data Mode
		if (dataMode & 0x08) tcr |= LPSPI_TCR_CPOL;

		// PCS to SCK Delay Prescaler into the After SCK Delay Prescaler  
		if (dataMode & 0x04) tcr |= LPSPI_TCR_CPHA; 
    211c:	it	mi
    211e:	orrmi.w	r3, r3, #1073741824	; 0x40000000


	  spi->CR = 0; 
    2122:	str	r5, [r1, #16]
	  spi->CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE; 
    2124:	str	r4, [r1, #36]	; 0x24
	//  spi->CCR = LPSPI_CCR_SCKDIV(4); 
	//  spi->TCR = LPSPI_TCR_FRAMESZ(7); 
	  spi->CCR = ccr; 
    2126:	str	r2, [r1, #64]	; 0x40
	  spi->TCR = tcr; 
    2128:	str	r3, [r1, #96]	; 0x60
	  spi->CR = LPSPI_CR_MEN; 
    212a:	str	r0, [r1, #16]
	}
    212c:	add	sp, #20
    212e:	pop	{r4, r5, r6, r7, pc}
		uint32_t d, div;    
		if (clck == 0) clck =1;
		d= clkhz/clck;
		if (d && clkhz/d > clck) d++;
		if (d > 257) d= 257;  // max div
		if (d > 2) {
    2130:	cmp	r2, #2
    2132:	it	ls
    2134:	movls	r2, #0
    2136:	bls.n	20fc <spi_begin(unsigned long, unsigned char, unsigned char)+0x50>
    2138:	subs	r2, #2
    213a:	lsrs	r3, r2, #1
    213c:	orr.w	r2, r2, r3, lsl #8
    2140:	b.n	20fc <spi_begin(unsigned long, unsigned char, unsigned char)+0x50>
    2142:	nop
    2144:	.word	0x20000370
    2148:	.word	0x400fc000
    214c:	.word	0x00800007
    2150:	.word	0x403a0000

00002154 <spi_setup(unsigned long)>:
	void spi_configPorts(int iconf) 
	{ return;
	}

	uint32_t spi_setup(uint32_t clk)
	{	spi_init() ;
    2154:	push	{r3, r4, r5, r6, r7, lr}
	void spi_init(void) 
	{ 
	  // CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz 
	  // CBCMR[LPSPI_PODF] - div4 = 132 MHz 

	  CCM_CCGR1 &= ~CCM_CCGR1_LPSPIx(ISPI,CCM_CCGR_ON); 
    2156:	ldr	r3, [pc, #68]	; (219c <spi_setup(unsigned long)+0x48>)

	  CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) | 
								 CCM_CBCMR_LPSPI_PODF(6) | CCM_CBCMR_LPSPI_CLK_SEL(2); // pg 714 

	  uint32_t fastio = IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(3); 
	  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_01 = fastio; 
    2158:	movs	r5, #249	; 0xf9
	  // CBCMR[LPSPI_PODF] - div4 = 132 MHz 

	  CCM_CCGR1 &= ~CCM_CCGR1_LPSPIx(ISPI,CCM_CCGR_ON); 

	  CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) | 
								 CCM_CBCMR_LPSPI_PODF(6) | CCM_CBCMR_LPSPI_CLK_SEL(2); // pg 714 
    215a:	ldr	r1, [pc, #68]	; (21a0 <spi_setup(unsigned long)+0x4c>)
	  
//	  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_01 = 3 | 0x10; // SDI  //Pin12
//	  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_02 = 3 | 0x10; // SDO  //Pin11
//	  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 3 | 0x10; // SCK  //Pin13

	  spi->CR = LPSPI_CR_RST; 
    215c:	mov.w	lr, #2
	void spi_init(void) 
	{ 
	  // CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz 
	  // CBCMR[LPSPI_PODF] - div4 = 132 MHz 

	  CCM_CCGR1 &= ~CCM_CCGR1_LPSPIx(ISPI,CCM_CCGR_ON); 
    2160:	ldr	r7, [r3, #108]	; 0x6c
	{ return;
	}

	uint32_t spi_setup(uint32_t clk)
	{	spi_init() ;
		spi_begin(clk, MSBFIRST, SPI_MODE0);
    2162:	movs	r2, #0
	  // CBCMR[LPSPI_PODF] - div4 = 132 MHz 

	  CCM_CCGR1 &= ~CCM_CCGR1_LPSPIx(ISPI,CCM_CCGR_ON); 

	  CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) | 
								 CCM_CBCMR_LPSPI_PODF(6) | CCM_CBCMR_LPSPI_CLK_SEL(2); // pg 714 
    2164:	ldr	r6, [pc, #60]	; (21a4 <spi_setup(unsigned long)+0x50>)
	void spi_init(void) 
	{ 
	  // CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz 
	  // CBCMR[LPSPI_PODF] - div4 = 132 MHz 

	  CCM_CCGR1 &= ~CCM_CCGR1_LPSPIx(ISPI,CCM_CCGR_ON); 
    2166:	bic.w	r7, r7, #192	; 0xc0

	  CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) | 
								 CCM_CBCMR_LPSPI_PODF(6) | CCM_CBCMR_LPSPI_CLK_SEL(2); // pg 714 

	  uint32_t fastio = IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(3); 
	  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_01 = fastio; 
    216a:	ldr	r4, [pc, #60]	; (21a8 <spi_setup(unsigned long)+0x54>)
	void spi_init(void) 
	{ 
	  // CBCMR[LPSPI_CLK_SEL] - PLL2 = 528 MHz 
	  // CBCMR[LPSPI_PODF] - div4 = 132 MHz 

	  CCM_CCGR1 &= ~CCM_CCGR1_LPSPIx(ISPI,CCM_CCGR_ON); 
    216c:	str	r7, [r3, #108]	; 0x6c

	  CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) | 
    216e:	ldr	r7, [r3, #24]
								 CCM_CBCMR_LPSPI_PODF(6) | CCM_CBCMR_LPSPI_CLK_SEL(2); // pg 714 
    2170:	ands	r1, r7
	  
//	  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_01 = 3 | 0x10; // SDI  //Pin12
//	  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_02 = 3 | 0x10; // SDO  //Pin11
//	  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 3 | 0x10; // SCK  //Pin13

	  spi->CR = LPSPI_CR_RST; 
    2172:	ldr	r7, [pc, #56]	; (21ac <spi_setup(unsigned long)+0x58>)
	  // CBCMR[LPSPI_PODF] - div4 = 132 MHz 

	  CCM_CCGR1 &= ~CCM_CCGR1_LPSPIx(ISPI,CCM_CCGR_ON); 

	  CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) | 
								 CCM_CBCMR_LPSPI_PODF(6) | CCM_CBCMR_LPSPI_CLK_SEL(2); // pg 714 
    2174:	orrs	r6, r1
	{ return;
	}

	uint32_t spi_setup(uint32_t clk)
	{	spi_init() ;
		spi_begin(clk, MSBFIRST, SPI_MODE0);
    2176:	movs	r1, #1
	  // CBCMR[LPSPI_PODF] - div4 = 132 MHz 

	  CCM_CCGR1 &= ~CCM_CCGR1_LPSPIx(ISPI,CCM_CCGR_ON); 

	  CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) | 
								 CCM_CBCMR_LPSPI_PODF(6) | CCM_CBCMR_LPSPI_CLK_SEL(2); // pg 714 
    2178:	str	r6, [r3, #24]

	  uint32_t fastio = IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(7) | IOMUXC_PAD_SPEED(3); 
	  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_01 = fastio; 
    217a:	str.w	r5, [r4, #816]	; 0x330
	  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_02 = fastio; 
    217e:	str.w	r5, [r4, #820]	; 0x334
	  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = fastio; 
    2182:	str.w	r5, [r4, #824]	; 0x338

	  CCM_CCGR1 |= CCM_CCGR1_LPSPIx(ISPI, CCM_CCGR_ON); 
    2186:	ldr	r4, [r3, #108]	; 0x6c
    2188:	orr.w	r4, r4, #192	; 0xc0
    218c:	str	r4, [r3, #108]	; 0x6c
	  
//	  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_01 = 3 | 0x10; // SDI  //Pin12
//	  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_02 = 3 | 0x10; // SDO  //Pin11
//	  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 3 | 0x10; // SCK  //Pin13

	  spi->CR = LPSPI_CR_RST; 
    218e:	str.w	lr, [r7, #16]
	{ return;
	}

	uint32_t spi_setup(uint32_t clk)
	{	spi_init() ;
		spi_begin(clk, MSBFIRST, SPI_MODE0);
    2192:	bl	20ac <spi_begin(unsigned long, unsigned char, unsigned char)>
		return 0;
	}
    2196:	movs	r0, #0
    2198:	pop	{r3, r4, r5, r6, r7, pc}
    219a:	nop
    219c:	.word	0x400fc000
    21a0:	.word	0xe3ffffcf
    21a4:	.word	0x18000020
    21a8:	.word	0x401f8000
    21ac:	.word	0x403a0000

000021b0 <sd_init()>:
  #endif  // USE_SD_CCITT
#endif  // USE_SD_SRC

//***************************************************************************/
uint16_t sd_init(void)
{  int ii;
    21b0:	push	{r4, lr}
  pinMode(m_chipSelectPin, OUTPUT);
    21b2:	ldr	r4, [pc, #124]	; (2230 <sd_init()+0x80>)
    21b4:	movs	r1, #1
    21b6:	ldrb	r0, [r4, #0]
    21b8:	bl	3870 <pinMode>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    21bc:	ldrh	r1, [r4, #0]
    21be:	ldr	r0, [pc, #116]	; (2234 <sd_init()+0x84>)
    21c0:	bl	3f1c <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    21c4:	ldr	r0, [pc, #108]	; (2234 <sd_init()+0x84>)
    21c6:	bl	3e4c <Print::println()>
//  sd_setChipSelect(cs_pin);
  Serial.println(m_chipSelectPin);
  spi_configPorts(1); // 1 is PJRC Audio

  spi_setup(100);
    21ca:	movs	r0, #100	; 0x64
    21cc:	bl	2154 <spi_setup(unsigned long)>
}

//------------------------------------------------------------------------------

void sd_chipSelect(uint16_t high_low) 
{ 	if(!m_enableChipSelect) return;
    21d0:	ldr	r3, [pc, #100]	; (2238 <sd_init()+0x88>)
    21d2:	ldrh	r3, [r3, #0]
    21d4:	cbz	r3, 21dc <sd_init()+0x2c>
    21d6:	movs	r0, #1
    21d8:	bl	1774 <sd_chipSelect(unsigned short) [clone .part.0]>
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    21dc:	ldr	r2, [pc, #92]	; (223c <sd_init()+0x8c>)
  #endif  // USE_SD_CCITT
#endif  // USE_SD_SRC

//***************************************************************************/
uint16_t sd_init(void)
{  int ii;
    21de:	mov.w	r4, #1000	; 0x3e8
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    21e2:	movs	r0, #255	; 0xff
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    21e4:	mov	r1, r2
	}

	uint8_t spi_transfer8(uint8_t data) 
	{ 
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
    21e6:	str	r0, [r2, #100]	; 0x64
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
    21e8:	ldr	r3, [r2, #92]	; 0x5c
		if (fifo > 0) return spi->RDR; 
    21ea:	tst.w	r3, #2031616	; 0x1f0000
    21ee:	beq.n	21e8 <sd_init()+0x38>

  spi_setup(100);

  sd_chipSelect(HIGH);
  // must supply min of 74 clock cycles with CS high.
  for (ii = 0; ii < 1000; ii++) spi_send(0XFF);
    21f0:	subs	r4, #1
	  // TODO: check for space in fifo? 
	  spi->TDR = data; 
	  while (1) 
	  { 
		uint32_t fifo = (spi->FSR >> 16) & 0x1F; 
		if (fifo > 0) return spi->RDR; 
    21f2:	ldr	r3, [r1, #116]	; 0x74

  spi_setup(100);

  sd_chipSelect(HIGH);
  // must supply min of 74 clock cycles with CS high.
  for (ii = 0; ii < 1000; ii++) spi_send(0XFF);
    21f4:	bne.n	21e6 <sd_init()+0x36>

  if(!sd_connect())
    21f6:	bl	1a94 <sd_connect()>
    21fa:	cbz	r0, 2220 <sd_init()+0x70>
// some short functions 
void sd_setError(uint8_t error) {m_sd_errorCode=error;}
uint16_t sd_getError(void) {return m_sd_errorCode;}

void sd_setType(uint16_t type) {m_sd_type=type;}
uint16_t sd_getType(void) {return m_sd_type;}
    21fc:	ldr	r3, [pc, #64]	; (2240 <sd_init()+0x90>)
  {  
#ifdef DO_DEBUG
     int32_t sd_size,sd_type, bb[4]; 
     bb[0]=bb[1]=bb[2]=bb[3]=0;
     sd_type=sd_getType();
     Serial.printf("Card Type: %d\n",sd_type);
    21fe:	ldr	r1, [pc, #68]	; (2244 <sd_init()+0x94>)
    2200:	ldrh	r2, [r3, #0]
    2202:	ldr	r0, [pc, #48]	; (2234 <sd_init()+0x84>)
    2204:	bl	3e7c <Print::printf(char const*, ...)>
     sd_size=sd_cardSize();
    2208:	bl	1c3c <sd_cardSize()>
     Serial.printf("Card Size: %d\n",sd_size);
    220c:	ldr	r1, [pc, #56]	; (2248 <sd_init()+0x98>)
    220e:	mov	r2, r0
    2210:	ldr	r0, [pc, #32]	; (2234 <sd_init()+0x84>)
    2212:	bl	3e7c <Print::printf(char const*, ...)>
#endif
  }
  
  #define MEG (1000*1000)
  spi_setup(30*MEG);
    2216:	ldr	r0, [pc, #52]	; (224c <sd_init()+0x9c>)
    2218:	bl	2154 <spi_setup(unsigned long)>
    221c:	movs	r0, #1

  return true;
}
    221e:	pop	{r4, pc}
  for (ii = 0; ii < 1000; ii++) spi_send(0XFF);

  if(!sd_connect())
  {  // uint32_t errorcode=sd_getError();
//     printDebug("connect:", errorcode);
	Serial.printf("Connect %d\n",2);
    2220:	movs	r2, #2
    2222:	ldr	r1, [pc, #44]	; (2250 <sd_init()+0xa0>)
    2224:	ldr	r0, [pc, #12]	; (2234 <sd_init()+0x84>)
    2226:	bl	3e7c <Print::printf(char const*, ...)>
    return false;
    222a:	mov	r0, r4
    222c:	pop	{r4, pc}
    222e:	nop
    2230:	.word	0x200017e0
    2234:	.word	0x20001218
    2238:	.word	0x200017e2
    223c:	.word	0x403a0000
    2240:	.word	0x2000c7de
    2244:	.word	0x20000ce4
    2248:	.word	0x20000cf4
    224c:	.word	0x01c9c380
    2250:	.word	0x20000cd8

00002254 <SPI_disk_initialize()>:
DSTATUS SPI_disk_status()
{
    return 0;
}
DSTATUS SPI_disk_initialize(void)
{
    2254:	push	{r3, lr}
    if(!sd_init()) return STA_NOINIT;
    2256:	bl	21b0 <sd_init()>
    
    return 0;
}
    225a:	clz	r0, r0
    225e:	lsrs	r0, r0, #5
    2260:	pop	{r3, pc}
    2262:	nop

00002264 <MSC_disk_initialize>:
	}

	int MSC_ioctl(BYTE cmd, BYTE *buff) {return 0;}
#else
	int MSC_disk_status() {return STA_NOINIT;}
	int MSC_disk_initialize() {return STA_NOINIT;}
    2264:	movs	r0, #1
    2266:	bx	lr

00002268 <MSC_disk_read>:
    2268:	movs	r0, #1
    226a:	bx	lr

0000226c <MSC_disk_write>:
	int MSC_disk_read(BYTE *buff, DWORD sector, UINT count) {return STA_NOINIT;}
	int MSC_disk_write(const BYTE *buff, DWORD sector, UINT count) {return STA_NOINIT;}
    226c:	movs	r0, #1
    226e:	bx	lr

00002270 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    2270:	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    2272:	orr.w	r3, r1, r0
	ands	r3, r3, #3
    2276:	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    227a:	bne.n	2358 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    227c:	subs	r2, #64	; 0x40
	blo	.Lmid_block
    227e:	bcc.n	2304 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    2280:	ldr.w	r3, [r1], #4
    2284:	str.w	r3, [r0], #4
    2288:	ldr.w	r3, [r1], #4
    228c:	str.w	r3, [r0], #4
    2290:	ldr.w	r3, [r1], #4
    2294:	str.w	r3, [r0], #4
    2298:	ldr.w	r3, [r1], #4
    229c:	str.w	r3, [r0], #4
    22a0:	ldr.w	r3, [r1], #4
    22a4:	str.w	r3, [r0], #4
    22a8:	ldr.w	r3, [r1], #4
    22ac:	str.w	r3, [r0], #4
    22b0:	ldr.w	r3, [r1], #4
    22b4:	str.w	r3, [r0], #4
    22b8:	ldr.w	r3, [r1], #4
    22bc:	str.w	r3, [r0], #4
    22c0:	ldr.w	r3, [r1], #4
    22c4:	str.w	r3, [r0], #4
    22c8:	ldr.w	r3, [r1], #4
    22cc:	str.w	r3, [r0], #4
    22d0:	ldr.w	r3, [r1], #4
    22d4:	str.w	r3, [r0], #4
    22d8:	ldr.w	r3, [r1], #4
    22dc:	str.w	r3, [r0], #4
    22e0:	ldr.w	r3, [r1], #4
    22e4:	str.w	r3, [r0], #4
    22e8:	ldr.w	r3, [r1], #4
    22ec:	str.w	r3, [r0], #4
    22f0:	ldr.w	r3, [r1], #4
    22f4:	str.w	r3, [r0], #4
    22f8:	ldr.w	r3, [r1], #4
    22fc:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    2300:	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    2302:	bcs.n	2280 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    2304:	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    2306:	bcc.n	232c <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    2308:	ldr.w	r3, [r1], #4
    230c:	str.w	r3, [r0], #4
    2310:	ldr.w	r3, [r1], #4
    2314:	str.w	r3, [r0], #4
    2318:	ldr.w	r3, [r1], #4
    231c:	str.w	r3, [r0], #4
    2320:	ldr.w	r3, [r1], #4
    2324:	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    2328:	subs	r2, #16
	bhs	.Lmid_block_loop
    232a:	bcs.n	2308 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    232c:	adds	r2, #12
	blo	.Lcopy_less_than_4
    232e:	bcc.n	233c <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    2330:	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    2334:	str.w	r3, [r0], #4
	subs	r2, #4
    2338:	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    233a:	bcs.n	2330 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    233c:	adds	r2, #4
	beq	.Ldone
    233e:	beq.n	2352 <memcpy+0xe2>

	lsls	r2, r2, #31
    2340:	lsls	r2, r2, #31
	itt ne
    2342:	itt	ne
	ldrbne  r3, [r1], #1
    2344:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    2348:	strbne.w	r3, [r0], #1

	bcc	.Ldone
    234c:	bcc.n	2352 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    234e:	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    2350:	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    2352:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    2354:	bx	lr
    2356:	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    2358:	cmp	r2, #8
	blo	.Lbyte_copy
    235a:	bcc.n	2384 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    235c:	lsls	r3, r1, #30
	beq	.Ldst_aligned
    235e:	beq.n	227c <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    2360:	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    2364:	beq.n	227c <memcpy+0xc>

	rsb	r3, #4
    2366:	rsb	r3, r3, #4
	subs	r2, r3
    236a:	subs	r2, r2, r3

	lsls    r3, r3, #31
    236c:	lsls	r3, r3, #31
	itt ne
    236e:	itt	ne
	ldrbne  r3, [r1], #1
    2370:	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    2374:	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    2378:	bcc.n	227c <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    237a:	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    237e:	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    2382:	b.n	227c <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    2384:	subs	r2, #4
	blo	.Lcopy_less_than_4
    2386:	bcc.n	233c <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    2388:	subs	r2, #1
	ldrb    r3, [r1], #1
    238a:	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    238e:	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    2392:	bcs.n	2388 <memcpy+0x118>

	ldrb	r3, [r1]
    2394:	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    2396:	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    2398:	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    239a:	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    239c:	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    239e:	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    23a0:	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    23a2:	bx	lr

000023a4 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    23a4:	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    23a6:	ldr	r1, [pc, #80]	; (23f8 <rx_queue_transfer+0x54>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    23a8:	mov.w	r7, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    23ac:	ldr	r5, [pc, #76]	; (23fc <rx_queue_transfer+0x58>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    23ae:	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    23b0:	add.w	r4, r1, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    23b4:	ldr	r6, [pc, #72]	; (2400 <rx_queue_transfer+0x5c>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    23b6:	ldr	r2, [pc, #76]	; (2404 <rx_queue_transfer+0x60>)
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    23b8:	add.w	r5, r5, r0, lsl #5
    23bc:	mov	r1, r4
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    23be:	str	r7, [r2, #0]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    23c0:	mov	r0, r5
    23c2:	ldrh	r2, [r6, #0]
    23c4:	bl	338c <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    23c8:	ldrh	r1, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    23ca:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    23ce:	add	r1, r4
	asm volatile("": : :"memory");
	asm("dsb");
    23d0:	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    23d4:	ldr	r2, [pc, #48]	; (2408 <rx_queue_transfer+0x64>)
    23d6:	str	r3, [r2, #0]
		location += 32;
    23d8:	adds	r3, #32
	} while (location < end_addr);
    23da:	cmp	r1, r3
    23dc:	bhi.n	23d6 <rx_queue_transfer+0x32>
	asm("dsb");
    23de:	dsb	sy
	asm("isb");
    23e2:	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    23e6:	movs	r0, #3
    23e8:	mov	r1, r5
    23ea:	bl	33e4 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    23ee:	ldr	r3, [pc, #28]	; (240c <rx_queue_transfer+0x68>)
    23f0:	mov.w	r2, #131072	; 0x20000
    23f4:	str	r2, [r3, #0]
    23f6:	pop	{r3, r4, r5, r6, r7, pc}
    23f8:	.word	0x20200000
    23fc:	.word	0x20001ac0
    2400:	.word	0x2000c7e0
    2404:	.word	0xe000e18c
    2408:	.word	0xe000ef5c
    240c:	.word	0xe000e10c

00002410 <rx_event>:
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    2410:	ldr	r2, [pc, #144]	; (24a4 <rx_event+0x94>)
    2412:	ldr	r3, [r0, #4]
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
    2414:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    2418:	ubfx	r3, r3, #16, #15
    241c:	ldrh	r4, [r2, #0]
	int i = t->callback_param;
    241e:	ldr	r5, [r0, #28]
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    2420:	subs	r4, r4, r3
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    2422:	cmp	r4, #0
    2424:	ble.n	2498 <rx_event+0x88>
		// received a packet with data
		uint32_t head = rx_head;
    2426:	ldr	r1, [pc, #128]	; (24a8 <rx_event+0x98>)
		if (head != rx_tail) {
    2428:	ldr	r2, [pc, #128]	; (24ac <rx_event+0x9c>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    242a:	ldrb	r3, [r1, #0]
		if (head != rx_tail) {
    242c:	ldrb	r2, [r2, #0]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    242e:	uxtb	r3, r3
		if (head != rx_tail) {
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    2430:	ldr	r0, [pc, #124]	; (24b0 <rx_event+0xa0>)
			uint32_t count = rx_count[ii];
    2432:	ldr	r6, [pc, #128]	; (24b4 <rx_event+0xa4>)
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
		if (head != rx_tail) {
    2434:	cmp	r3, r2
    2436:	beq.n	2448 <rx_event+0x38>
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    2438:	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    243c:	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    2440:	rsb	r2, r7, #512	; 0x200
    2444:	cmp	r4, r2
    2446:	bls.n	246e <rx_event+0x5e>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    2448:	adds	r3, #1
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
    244a:	movs	r2, #0
    244c:	ldr	r7, [pc, #104]	; (24b8 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    244e:	cmp	r3, #8
				// TODO: trigger serialEvent
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
    2450:	strh.w	r4, [r6, r5, lsl #1]
		rx_index[i] = 0;
    2454:	strh.w	r2, [r7, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
    2458:	ldr	r6, [pc, #96]	; (24bc <rx_event+0xac>)
    245a:	ite	ls
    245c:	uxtbls	r2, r3
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    245e:	movhi	r3, r2
		rx_list[head] = i;
		rx_head = head;
    2460:	strb	r2, [r1, #0]
		rx_available += len;
    2462:	ldr	r2, [r6, #0]
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
    2464:	strb	r5, [r0, r3]
		rx_head = head;
		rx_available += len;
    2466:	add	r4, r2
    2468:	str	r4, [r6, #0]
    246a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    246e:	ldr	r3, [pc, #80]	; (24c0 <rx_event+0xb0>)
    2470:	add.w	r0, r7, r8, lsl #9
    2474:	mov	r2, r4
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    2476:	add	r7, r4
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    2478:	add.w	r1, r3, r5, lsl #9
    247c:	add	r0, r3
    247e:	bl	2270 <memcpy>
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
    2482:	ldr	r2, [pc, #56]	; (24bc <rx_event+0xac>)
				rx_queue_transfer(i);
    2484:	mov	r0, r5
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    2486:	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    248a:	ldr	r3, [r2, #0]
    248c:	add	r4, r3
    248e:	str	r4, [r2, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    2490:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
				rx_queue_transfer(i);
    2494:	b.w	23a4 <rx_queue_transfer>
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    2498:	mov	r0, r5
	}
}
    249a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    249e:	b.w	23a4 <rx_queue_transfer>
    24a2:	nop
    24a4:	.word	0x2000c7e0
    24a8:	.word	0x2000c7ec
    24ac:	.word	0x2000c7ed
    24b0:	.word	0x20009d34
    24b4:	.word	0x20009d14
    24b8:	.word	0x20009d24
    24bc:	.word	0x20009d10
    24c0:	.word	0x20200000

000024c4 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    24c4:	ldr	r3, [pc, #120]	; (2540 <usb_serial_flush_callback+0x7c>)
    24c6:	ldrb	r2, [r3, #0]
    24c8:	cbnz	r2, 24e2 <usb_serial_flush_callback+0x1e>
    24ca:	and.w	r3, r2, #255	; 0xff
	if (!usb_configuration) return;
    24ce:	ldr	r2, [pc, #116]	; (2544 <usb_serial_flush_callback+0x80>)
    24d0:	ldrb	r2, [r2, #0]
    24d2:	cbz	r2, 24e2 <usb_serial_flush_callback+0x1e>
	asm("dsb" ::: "memory");
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
    24d4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
    24d8:	ldr	r5, [pc, #108]	; (2548 <usb_serial_flush_callback+0x84>)
    24da:	ldrh	r2, [r5, #0]
    24dc:	cbnz	r2, 24e4 <usb_serial_flush_callback+0x20>
    24de:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    24e2:	bx	lr
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    24e4:	ldr	r6, [pc, #100]	; (254c <usb_serial_flush_callback+0x88>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    24e6:	rsb	r8, r2, #2048	; 0x800
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    24ea:	ldr	r7, [pc, #100]	; (2550 <usb_serial_flush_callback+0x8c>)
    24ec:	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    24ee:	mov	r2, r8
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    24f0:	ldr	r4, [pc, #96]	; (2554 <usb_serial_flush_callback+0x90>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    24f2:	add.w	r7, r7, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    24f6:	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    24fa:	mov	r0, r7
    24fc:	mov	r1, r4
    24fe:	bl	338c <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    2502:	add.w	r2, r8, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    2506:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    250a:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    250e:	ldr	r3, [pc, #72]	; (2558 <usb_serial_flush_callback+0x94>)
    2510:	str	r1, [r3, #0]
		location += 32;
    2512:	adds	r1, #32
	} while (location < end_addr);
    2514:	cmp	r2, r1
    2516:	bhi.n	2510 <usb_serial_flush_callback+0x4c>
	asm("dsb");
    2518:	dsb	sy
	asm("isb");
    251c:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    2520:	movs	r0, #4
    2522:	mov	r1, r7
    2524:	bl	33bc <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    2528:	ldrb	r3, [r6, #0]
    252a:	ldr	r2, [pc, #32]	; (254c <usb_serial_flush_callback+0x88>)
    252c:	adds	r3, #1
    252e:	uxtb	r3, r3
    2530:	cmp	r3, #3
    2532:	it	hi
    2534:	movhi	r3, #0
    2536:	strb	r3, [r2, #0]
	tx_available = 0;
    2538:	movs	r3, #0
    253a:	strh	r3, [r5, #0]
    253c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2540:	.word	0x2000c7f1
    2544:	.word	0x2000c7f3
    2548:	.word	0x2000c7e2
    254c:	.word	0x2000c7f0
    2550:	.word	0x20001bc0
    2554:	.word	0x20201000
    2558:	.word	0xe000ef70

0000255c <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    255c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2560:	sub	sp, #20
    2562:	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    2564:	str	r1, [sp, #0]
    2566:	cmp	r1, #0
    2568:	beq.w	26c2 <usb_serial_write.part.1+0x166>
    256c:	movs	r3, #0
    256e:	ldr	r5, [pc, #344]	; (26c8 <usb_serial_write.part.1+0x16c>)
    2570:	ldr.w	r8, [pc, #372]	; 26e8 <usb_serial_write.part.1+0x18c>
    2574:	ldr.w	sl, [pc, #352]	; 26d8 <usb_serial_write.part.1+0x17c>
				break;
			}
			asm("dsb" ::: "memory");
			tx_noautoflush = 0;
			if (!waiting) {
				wait_begin_at = systick_millis_count;
    2578:	ldr	r7, [pc, #336]	; (26cc <usb_serial_write.part.1+0x170>)
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    257a:	ldr.w	fp, [pc, #368]	; 26ec <usb_serial_write.part.1+0x190>
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    257e:	str	r3, [sp, #4]
		tx_noautoflush = 1;
    2580:	movs	r2, #1
		transfer_t *xfer = tx_transfer + tx_head;
    2582:	ldr	r3, [pc, #332]	; (26d0 <usb_serial_write.part.1+0x174>)
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		tx_noautoflush = 1;
    2584:	strb	r2, [r5, #0]
		transfer_t *xfer = tx_transfer + tx_head;
    2586:	ldrb	r4, [r3, #0]
    2588:	ldr	r2, [pc, #328]	; (26d4 <usb_serial_write.part.1+0x178>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    258a:	ldrh.w	r3, [r8]
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		tx_noautoflush = 1;
		transfer_t *xfer = tx_transfer + tx_head;
    258e:	add.w	r9, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    2592:	cbnz	r3, 25de <usb_serial_write.part.1+0x82>
    2594:	mov	r6, r3
    2596:	mov	r4, r3
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
    2598:	mov	r0, r9
    259a:	bl	3408 <usb_transfer_status>
			if (!(status & 0x80)) {
    259e:	ands.w	r0, r0, #128	; 0x80
    25a2:	beq.n	26a2 <usb_serial_write.part.1+0x146>
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			asm("dsb" ::: "memory");
    25a4:	dsb	sy
			tx_noautoflush = 0;
    25a8:	movs	r2, #0
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    25aa:	ldrb.w	r3, [sl]
    25ae:	ldr	r1, [pc, #296]	; (26d8 <usb_serial_write.part.1+0x17c>)
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			asm("dsb" ::: "memory");
			tx_noautoflush = 0;
    25b0:	strb	r2, [r5, #0]
			if (!waiting) {
    25b2:	cbnz	r4, 25b6 <usb_serial_write.part.1+0x5a>
				wait_begin_at = systick_millis_count;
    25b4:	ldr	r6, [r7, #0]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    25b6:	cmp	r3, #0
    25b8:	bne.n	2670 <usb_serial_write.part.1+0x114>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    25ba:	ldr	r3, [r7, #0]
    25bc:	subs	r3, r3, r6
    25be:	cmp	r3, #120	; 0x78
    25c0:	bhi.n	26b6 <usb_serial_write.part.1+0x15a>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    25c2:	ldrb.w	r3, [fp]
    25c6:	cmp	r3, #0
    25c8:	beq.n	2670 <usb_serial_write.part.1+0x114>
			yield();
    25ca:	bl	3c00 <yield>
			tx_noautoflush = 1;
    25ce:	movs	r4, #1
	while (size > 0) {
		tx_noautoflush = 1;
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    25d0:	ldrh.w	r3, [r8]
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
			yield();
			tx_noautoflush = 1;
    25d4:	strb	r4, [r5, #0]
	while (size > 0) {
		tx_noautoflush = 1;
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    25d6:	cmp	r3, #0
    25d8:	beq.n	2598 <usb_serial_write.part.1+0x3c>
    25da:	ldr	r2, [pc, #244]	; (26d0 <usb_serial_write.part.1+0x174>)
    25dc:	ldrb	r4, [r2, #0]
    25de:	mov	r2, r3
    25e0:	rsb	r0, r3, #2048	; 0x800
			if (!usb_configuration) return sent;
			yield();
			tx_noautoflush = 1;
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    25e4:	lsls	r4, r4, #11
		if (size >= tx_available) {
    25e6:	ldr	r6, [sp, #0]
			if (!usb_configuration) return sent;
			yield();
			tx_noautoflush = 1;
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    25e8:	ldr	r1, [pc, #240]	; (26dc <usb_serial_write.part.1+0x180>)
    25ea:	add	r0, r4
		if (size >= tx_available) {
    25ec:	cmp	r6, r2
			if (!usb_configuration) return sent;
			yield();
			tx_noautoflush = 1;
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    25ee:	add	r0, r1
		if (size >= tx_available) {
    25f0:	bcc.n	2678 <usb_serial_write.part.1+0x11c>
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    25f2:	add	r4, r1
			tx_noautoflush = 1;
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
    25f4:	ldr	r1, [sp, #8]
    25f6:	bl	2270 <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    25fa:	movs	r3, #0
    25fc:	mov	r1, r4
    25fe:	mov.w	r2, #2048	; 0x800
    2602:	mov	r0, r9
    2604:	bl	338c <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    2608:	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    260c:	add.w	r4, r4, #2048	; 0x800
	asm volatile("": : :"memory");
	asm("dsb");
    2610:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    2614:	ldr	r2, [pc, #200]	; (26e0 <usb_serial_write.part.1+0x184>)
    2616:	str	r3, [r2, #0]
		location += 32;
    2618:	adds	r3, #32
	} while (location < end_addr);
    261a:	cmp	r4, r3
    261c:	bhi.n	2614 <usb_serial_write.part.1+0xb8>
	asm("dsb");
    261e:	dsb	sy
	asm("isb");
    2622:	isb	sy
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    2626:	movs	r0, #4
    2628:	mov	r1, r9
    262a:	bl	33bc <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    262e:	ldr	r3, [pc, #160]	; (26d0 <usb_serial_write.part.1+0x174>)
    2630:	ldr	r2, [pc, #156]	; (26d0 <usb_serial_write.part.1+0x174>)
    2632:	ldrb	r3, [r3, #0]
			size -= tx_available;
    2634:	ldr	r0, [sp, #0]
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    2636:	adds	r3, #1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    2638:	ldr	r1, [pc, #168]	; (26e4 <usb_serial_write.part.1+0x188>)
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    263a:	uxtb	r3, r3
    263c:	cmp	r3, #3
    263e:	it	hi
    2640:	movhi	r3, #0
    2642:	strb	r3, [r2, #0]
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    2644:	movs	r2, #0
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
    2646:	ldrh.w	r3, [r8]
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    264a:	strh.w	r2, [r8]
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
    264e:	subs	r0, r0, r3
    2650:	str	r0, [sp, #0]
			sent += tx_available;
    2652:	ldr	r0, [sp, #4]
    2654:	add	r0, r3
    2656:	str	r0, [sp, #4]
			data += tx_available;
    2658:	ldr	r0, [sp, #8]
    265a:	add	r0, r3
    265c:	str	r0, [sp, #8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    265e:	str.w	r2, [r1, #132]	; 0x84
			tx_available -= size;
			sent += size;
			size = 0;
			timer_start_oneshot();
		}
		asm("dsb" ::: "memory");
    2662:	dsb	sy
		tx_noautoflush = 0;
    2666:	movs	r3, #0
    2668:	strb	r3, [r5, #0]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    266a:	ldr	r3, [sp, #0]
    266c:	cmp	r3, #0
    266e:	bne.n	2580 <usb_serial_write.part.1+0x24>
    2670:	ldr	r0, [sp, #4]
		}
		asm("dsb" ::: "memory");
		tx_noautoflush = 0;
	}
	return sent;
}
    2672:	add	sp, #20
    2674:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    2678:	ldr	r4, [sp, #0]
    267a:	str	r3, [sp, #12]
			tx_available -= size;
			sent += size;
    267c:	ldr	r3, [sp, #4]
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    267e:	mov	r2, r4
    2680:	ldr	r1, [sp, #8]
			tx_available -= size;
			sent += size;
    2682:	add	r3, r4
    2684:	str	r3, [sp, #4]
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    2686:	bl	2270 <memcpy>
			tx_available -= size;
    268a:	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    268c:	mov.w	r1, #3221225472	; 0xc0000000
    2690:	ldr	r2, [pc, #80]	; (26e4 <usb_serial_write.part.1+0x188>)
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
			sent += size;
			size = 0;
    2692:	movs	r0, #0
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    2694:	subs	r3, r3, r4
			sent += size;
			size = 0;
    2696:	str	r0, [sp, #0]
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    2698:	strh.w	r3, [r8]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    269c:	str.w	r1, [r2, #132]	; 0x84
    26a0:	b.n	2662 <usb_serial_write.part.1+0x106>
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    26a2:	mov.w	r3, #2048	; 0x800
    26a6:	ldr	r2, [pc, #40]	; (26d0 <usb_serial_write.part.1+0x174>)
				transmit_previous_timeout = 0;
    26a8:	strb.w	r0, [sl]
    26ac:	ldrb	r4, [r2, #0]
    26ae:	mov	r2, r3
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    26b0:	strh.w	r3, [r8]
    26b4:	b.n	25e4 <usb_serial_write.part.1+0x88>
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    26b6:	movs	r3, #1
				return sent;
    26b8:	ldr	r0, [sp, #4]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    26ba:	strb	r3, [r1, #0]
		}
		asm("dsb" ::: "memory");
		tx_noautoflush = 0;
	}
	return sent;
}
    26bc:	add	sp, #20
    26be:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    26c2:	ldr	r0, [sp, #0]
    26c4:	b.n	2672 <usb_serial_write.part.1+0x116>
    26c6:	nop
    26c8:	.word	0x2000c7f1
    26cc:	.word	0x20009d58
    26d0:	.word	0x2000c7f0
    26d4:	.word	0x20001bc0
    26d8:	.word	0x2000c7ef
    26dc:	.word	0x20201000
    26e0:	.word	0xe000ef70
    26e4:	.word	0x402e0000
    26e8:	.word	0x2000c7e2
    26ec:	.word	0x2000c7f3

000026f0 <usb_serial_reset>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_serial_reset(void)
{
    26f0:	bx	lr
    26f2:	nop

000026f4 <usb_serial_configure>:
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    26f4:	ldr	r3, [pc, #196]	; (27bc <usb_serial_configure+0xc8>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
    26f6:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    26fa:	ldrb	r3, [r3, #0]
		tx_packet_size = CDC_TX_SIZE_480;
    26fc:	ldr	r7, [pc, #192]	; (27c0 <usb_serial_configure+0xcc>)
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    26fe:	cmp	r3, #0
    2700:	beq.n	27ac <usb_serial_configure+0xb8>
		tx_packet_size = CDC_TX_SIZE_480;
    2702:	mov.w	r3, #512	; 0x200
		rx_packet_size = CDC_RX_SIZE_480;
    2706:	ldr.w	r8, [pc, #236]	; 27f4 <usb_serial_configure+0x100>
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
    270a:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    270c:	strh.w	r3, [r8]
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    2710:	movs	r1, #0
    2712:	movs	r2, #128	; 0x80
    2714:	ldr	r0, [pc, #172]	; (27c4 <usb_serial_configure+0xd0>)
	tx_head = 0;
    2716:	mov	r5, r1
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    2718:	ldr	r6, [pc, #172]	; (27c8 <usb_serial_configure+0xd4>)
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    271a:	bl	54f4 <memset>
	tx_head = 0;
    271e:	ldr	r4, [pc, #172]	; (27cc <usb_serial_configure+0xd8>)
	tx_available = 0;
    2720:	ldr	r3, [pc, #172]	; (27d0 <usb_serial_configure+0xdc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    2722:	mov	r1, r5
    2724:	mov.w	r2, #256	; 0x100
    2728:	ldr	r0, [pc, #168]	; (27d4 <usb_serial_configure+0xe0>)
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    272a:	strb	r5, [r4, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    272c:	mov	r4, r5
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    272e:	strh	r5, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    2730:	bl	54f4 <memset>
	memset(rx_count, 0, sizeof(rx_count));
    2734:	str	r5, [r6, #0]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    2736:	mov	r3, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    2738:	str	r5, [r6, #4]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    273a:	mov	r2, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    273c:	str	r5, [r6, #8]
    273e:	str	r5, [r6, #12]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    2740:	ldr	r1, [pc, #148]	; (27d8 <usb_serial_configure+0xe4>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    2742:	ldr	r6, [pc, #152]	; (27dc <usb_serial_configure+0xe8>)
	rx_head = 0;
	rx_tail = 0;
    2744:	ldr	r0, [pc, #152]	; (27e0 <usb_serial_configure+0xec>)
	rx_available = 0;
    2746:	ldr.w	lr, [pc, #176]	; 27f8 <usb_serial_configure+0x104>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    274a:	strb	r5, [r1, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    274c:	movs	r1, #16
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
    274e:	strb	r5, [r0, #0]
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    2750:	movs	r0, #2
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    2752:	str	r5, [r6, #0]
    2754:	str	r5, [r6, #4]
    2756:	str	r5, [r6, #8]
    2758:	str	r5, [r6, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
    275a:	str.w	r5, [lr]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    275e:	bl	3324 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    2762:	ldrh.w	r1, [r8]
    2766:	mov	r2, r5
    2768:	ldr	r3, [pc, #120]	; (27e4 <usb_serial_configure+0xf0>)
    276a:	movs	r0, #3
    276c:	bl	32c0 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    2770:	mov	r3, r5
    2772:	ldrh	r1, [r7, #0]
    2774:	movs	r2, #1
    2776:	movs	r0, #4
    2778:	bl	3324 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    277c:	mov	r0, r4
    277e:	adds	r4, #1
    2780:	bl	23a4 <rx_queue_transfer>
    2784:	cmp	r4, #8
    2786:	bne.n	277c <usb_serial_configure+0x88>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    2788:	ldr	r3, [pc, #92]	; (27e8 <usb_serial_configure+0xf4>)
	USB1_GPTIMER0LD = microseconds - 1;
    278a:	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    278c:	ldr	r0, [pc, #92]	; (27ec <usb_serial_configure+0xf8>)
	USB1_GPTIMER0CTRL = 0;
    278e:	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    2790:	ldr	r4, [pc, #92]	; (27f0 <usb_serial_configure+0xfc>)
    2792:	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    2794:	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    2798:	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    279c:	ldr.w	r2, [r3, #328]	; 0x148
    27a0:	orr.w	r2, r2, #16777216	; 0x1000000
    27a4:	str.w	r2, [r3, #328]	; 0x148
    27a8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    27ac:	movs	r3, #64	; 0x40
		rx_packet_size = CDC_RX_SIZE_12;
    27ae:	ldr.w	r8, [pc, #68]	; 27f4 <usb_serial_configure+0x100>
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    27b2:	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_12;
    27b4:	strh.w	r3, [r8]
    27b8:	b.n	2710 <usb_serial_configure+0x1c>
    27ba:	nop
    27bc:	.word	0x2000c7f4
    27c0:	.word	0x2000c7e4
    27c4:	.word	0x20001bc0
    27c8:	.word	0x20009d14
    27cc:	.word	0x2000c7f0
    27d0:	.word	0x2000c7e2
    27d4:	.word	0x20001ac0
    27d8:	.word	0x2000c7ec
    27dc:	.word	0x20009d24
    27e0:	.word	0x2000c7ed
    27e4:	.word	0x00002411
    27e8:	.word	0x402e0000
    27ec:	.word	0x20009d5c
    27f0:	.word	0x000024c5
    27f4:	.word	0x2000c7e0
    27f8:	.word	0x20009d10

000027fc <usb_serial_read>:
int usb_serial_read(void *buffer, uint32_t size)
{
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    27fc:	ldr	r3, [pc, #196]	; (28c4 <usb_serial_read+0xc8>)
    27fe:	mov.w	r2, #131072	; 0x20000

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    2802:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    2806:	str	r2, [r3, #0]

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    2808:	sub	sp, #12
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    280a:	ldr	r3, [pc, #188]	; (28c8 <usb_serial_read+0xcc>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    280c:	mov	r9, r1
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    280e:	ldrb	r4, [r3, #0]
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    2810:	cmp	r1, #0
    2812:	beq.n	28bc <usb_serial_read+0xc0>
    2814:	ldr	r3, [pc, #180]	; (28cc <usb_serial_read+0xd0>)
    2816:	uxtb	r4, r4
    2818:	ldrb	r3, [r3, #0]
    281a:	cmp	r4, r3
    281c:	beq.n	28c0 <usb_serial_read+0xc4>
    281e:	mov	sl, r0
    2820:	movs	r7, #0
    2822:	ldr.w	fp, [pc, #192]	; 28e4 <usb_serial_read+0xe8>
		if (++tail > RX_NUM) tail = 0;
    2826:	adds	r4, #1
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    2828:	ldr	r3, [pc, #164]	; (28d0 <usb_serial_read+0xd4>)
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
    282a:	rsb	r8, r7, r9
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    282e:	mov	r0, sl
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    2830:	cmp	r4, #9
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    2832:	str	r3, [sp, #4]
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
    2834:	ldr	r3, [pc, #156]	; (28d4 <usb_serial_read+0xd8>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    2836:	it	cs
    2838:	movcs	r4, #0
		uint32_t i = rx_list[tail];
    283a:	ldrb	r5, [r3, r4]
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    283c:	ldr	r3, [pc, #144]	; (28d0 <usb_serial_read+0xd4>)
    283e:	ldrh.w	lr, [r3, r5, lsl #1]
    2842:	ldr	r3, [pc, #148]	; (28d8 <usb_serial_read+0xdc>)
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    2844:	add.w	r1, lr, r5, lsl #9
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    2848:	ldrh.w	r6, [r3, r5, lsl #1]
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    284c:	ldr	r3, [pc, #140]	; (28dc <usb_serial_read+0xe0>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    284e:	rsb	r6, lr, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    2852:	add	r1, r3
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    2854:	cmp	r8, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    2856:	mov	r2, r6
			p += avail;
			rx_available -= avail;
			count += avail;
    2858:	add	r7, r6
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    285a:	bcs.n	2890 <usb_serial_read+0x94>
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    285c:	add.w	r1, lr, r5, lsl #9
    2860:	mov	r2, r8
    2862:	add	r1, r3
    2864:	bl	2270 <memcpy>
			rx_available -= len;
			rx_index[i] += len;
    2868:	ldr	r3, [sp, #4]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    286a:	ldr.w	r1, [fp]
    286e:	mov	r0, r9
			rx_index[i] += len;
    2870:	ldrh.w	r2, [r3, r5, lsl #1]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    2874:	rsb	r1, r8, r1
			rx_index[i] += len;
    2878:	add	r8, r2
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    287a:	str.w	r1, [fp]
			rx_index[i] += len;
    287e:	strh.w	r8, [r3, r5, lsl #1]
			count += avail;
			rx_tail = tail;
			rx_queue_transfer(i);
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
    2882:	ldr	r3, [pc, #92]	; (28e0 <usb_serial_read+0xe4>)
    2884:	mov.w	r2, #131072	; 0x20000
    2888:	str	r2, [r3, #0]
	return count;
}
    288a:	add	sp, #12
    288c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    2890:	bl	2270 <memcpy>
			p += avail;
			rx_available -= avail;
    2894:	ldr.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    2898:	uxtb	r3, r4
			rx_queue_transfer(i);
    289a:	mov	r0, r5
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
			rx_available -= avail;
    289c:	subs	r2, r2, r6
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
    289e:	add	sl, r6
			rx_available -= avail;
    28a0:	str.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    28a4:	ldr	r2, [pc, #32]	; (28c8 <usb_serial_read+0xcc>)
    28a6:	strb	r3, [r2, #0]
			rx_queue_transfer(i);
    28a8:	bl	23a4 <rx_queue_transfer>

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    28ac:	cmp	r9, r7
    28ae:	bls.n	28b8 <usb_serial_read+0xbc>
    28b0:	ldr	r3, [pc, #24]	; (28cc <usb_serial_read+0xd0>)
    28b2:	ldrb	r3, [r3, #0]
    28b4:	cmp	r4, r3
    28b6:	bne.n	2826 <usb_serial_read+0x2a>
    28b8:	mov	r0, r7
    28ba:	b.n	2882 <usb_serial_read+0x86>
    28bc:	mov	r0, r1
    28be:	b.n	2882 <usb_serial_read+0x86>
    28c0:	movs	r0, #0
    28c2:	b.n	2882 <usb_serial_read+0x86>
    28c4:	.word	0xe000e18c
    28c8:	.word	0x2000c7ed
    28cc:	.word	0x2000c7ec
    28d0:	.word	0x20009d24
    28d4:	.word	0x20009d34
    28d8:	.word	0x20009d14
    28dc:	.word	0x20200000
    28e0:	.word	0xe000e10c
    28e4:	.word	0x20009d10

000028e8 <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    28e8:	ldr	r3, [pc, #44]	; (2918 <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
    28ea:	ldr	r2, [pc, #48]	; (291c <usb_serial_peekchar+0x34>)
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    28ec:	ldrb	r3, [r3, #0]
	if (tail == rx_head) return -1;
    28ee:	ldrb	r2, [r2, #0]
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    28f0:	uxtb	r3, r3
	if (tail == rx_head) return -1;
    28f2:	cmp	r3, r2
    28f4:	beq.n	2912 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    28f6:	adds	r3, #1
	uint32_t i = rx_list[tail];
    28f8:	ldr	r0, [pc, #36]	; (2920 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    28fa:	ldr	r2, [pc, #40]	; (2924 <usb_serial_peekchar+0x3c>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    28fc:	cmp	r3, #9
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    28fe:	ldr	r1, [pc, #40]	; (2928 <usb_serial_peekchar+0x40>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    2900:	it	cs
    2902:	movcs	r3, #0
	uint32_t i = rx_list[tail];
    2904:	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    2906:	ldrh.w	r1, [r1, r3, lsl #1]
    290a:	add.w	r3, r2, r3, lsl #9
    290e:	ldrb	r0, [r3, r1]
    2910:	bx	lr

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
    2912:	mov.w	r0, #4294967295
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
}
    2916:	bx	lr
    2918:	.word	0x2000c7ed
    291c:	.word	0x2000c7ec
    2920:	.word	0x20009d34
    2924:	.word	0x20200000
    2928:	.word	0x20009d24

0000292c <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_available;
    292c:	ldr	r3, [pc, #4]	; (2934 <usb_serial_available+0x8>)
    292e:	ldr	r0, [r3, #0]
}
    2930:	bx	lr
    2932:	nop
    2934:	.word	0x20009d10

00002938 <usb_serial_flush_input>:

// discard any buffered input
void usb_serial_flush_input(void)
{
    2938:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    293c:	ldr	r6, [pc, #84]	; (2994 <usb_serial_flush_input+0x5c>)
	while (tail != rx_head) {
    293e:	ldr	r5, [pc, #88]	; (2998 <usb_serial_flush_input+0x60>)
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    2940:	ldrb	r4, [r6, #0]
	while (tail != rx_head) {
    2942:	ldrb	r3, [r5, #0]
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    2944:	uxtb	r4, r4
	while (tail != rx_head) {
    2946:	cmp	r4, r3
    2948:	beq.n	298e <usb_serial_flush_input+0x56>
    294a:	ldr.w	r9, [pc, #84]	; 29a0 <usb_serial_flush_input+0x68>
    294e:	ldr.w	fp, [pc, #84]	; 29a4 <usb_serial_flush_input+0x6c>
    2952:	ldr.w	r8, [pc, #84]	; 29a8 <usb_serial_flush_input+0x70>
    2956:	ldr	r7, [pc, #68]	; (299c <usb_serial_flush_input+0x64>)
		if (++tail > RX_NUM) tail = 0;
    2958:	adds	r4, #1
    295a:	cmp	r4, #8
    295c:	uxtb.w	sl, r4
    2960:	bls.n	2966 <usb_serial_flush_input+0x2e>
    2962:	movs	r4, #0
    2964:	mov	sl, r4
		uint32_t i = rx_list[tail];
    2966:	ldrb.w	r1, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    296a:	ldr.w	r2, [fp]
    296e:	ldrh.w	r3, [r8, r1, lsl #1]
		rx_queue_transfer(i);
    2972:	mov	r0, r1
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
    2974:	ldrh.w	r1, [r7, r1, lsl #1]
    2978:	subs	r3, r3, r1
    297a:	subs	r3, r2, r3
    297c:	str.w	r3, [fp]
		rx_queue_transfer(i);
    2980:	bl	23a4 <rx_queue_transfer>
		rx_tail = tail;
    2984:	strb.w	sl, [r6]

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
    2988:	ldrb	r3, [r5, #0]
    298a:	cmp	r4, r3
    298c:	bne.n	2958 <usb_serial_flush_input+0x20>
    298e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2992:	nop
    2994:	.word	0x2000c7ed
    2998:	.word	0x2000c7ec
    299c:	.word	0x20009d24
    29a0:	.word	0x20009d34
    29a4:	.word	0x20009d10
    29a8:	.word	0x20009d14

000029ac <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    29ac:	push	{lr}
    29ae:	sub	sp, #12
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
    29b0:	movs	r1, #1
    29b2:	add.w	r0, sp, #7
    29b6:	bl	27fc <usb_serial_read>
    29ba:	cbz	r0, 29c6 <usb_serial_getchar+0x1a>
    29bc:	ldrb.w	r0, [sp, #7]
	return -1;
}
    29c0:	add	sp, #12
    29c2:	ldr.w	pc, [sp], #4
// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
	return -1;
    29c6:	mov.w	r0, #4294967295
    29ca:	b.n	29c0 <usb_serial_getchar+0x14>

000029cc <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    29cc:	ldr	r3, [pc, #36]	; (29f4 <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    29ce:	push	{lr}
    29d0:	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    29d2:	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    29d4:	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    29d8:	cbnz	r3, 29e4 <usb_serial_putchar+0x18>
    29da:	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
    29de:	add	sp, #12
    29e0:	ldr.w	pc, [sp], #4
    29e4:	movs	r1, #1
    29e6:	add.w	r0, sp, #7
    29ea:	bl	255c <usb_serial_write.part.1>
    29ee:	add	sp, #12
    29f0:	ldr.w	pc, [sp], #4
    29f4:	.word	0x2000c7f3

000029f8 <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    29f8:	ldr	r3, [pc, #16]	; (2a0c <usb_serial_write+0x14>)
    29fa:	ldrb	r3, [r3, #0]
    29fc:	and.w	r2, r3, #255	; 0xff
    2a00:	cbz	r3, 2a06 <usb_serial_write+0xe>
    2a02:	b.w	255c <usb_serial_write.part.1>
		}
		asm("dsb" ::: "memory");
		tx_noautoflush = 0;
	}
	return sent;
}
    2a06:	mov	r0, r2
    2a08:	bx	lr
    2a0a:	nop
    2a0c:	.word	0x2000c7f3

00002a10 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    2a10:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    2a14:	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
    2a16:	ldr.w	r8, [pc, #68]	; 2a5c <usb_serial_write_buffer_free+0x4c>
    2a1a:	movs	r3, #1
    2a1c:	ldr	r5, [pc, #52]	; (2a54 <usb_serial_write_buffer_free+0x44>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
    2a1e:	mov	r7, r4
    2a20:	ldr	r6, [pc, #52]	; (2a58 <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
    2a22:	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    2a26:	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    2a28:	mov	r0, r5
    2a2a:	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    2a2c:	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    2a2e:	add.w	r4, r4, #1
		if (i == tx_head) continue;
    2a32:	beq.n	2a40 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    2a34:	bl	3408 <usb_transfer_status>
    2a38:	lsls	r3, r0, #24
    2a3a:	it	pl
    2a3c:	addpl.w	r7, r7, #2048	; 0x800

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    2a40:	cmp	r4, #4
    2a42:	bne.n	2a26 <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	asm("dsb" ::: "memory");
    2a44:	dsb	sy
	tx_noautoflush = 0;
    2a48:	movs	r3, #0
	return sum;
}
    2a4a:	mov	r0, r7
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	asm("dsb" ::: "memory");
	tx_noautoflush = 0;
    2a4c:	strb.w	r3, [r8]
	return sum;
}
    2a50:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2a54:	.word	0x20001bc0
    2a58:	.word	0x2000c7f0
    2a5c:	.word	0x2000c7f1

00002a60 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    2a60:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	if (!usb_configuration) return;
    2a64:	ldr	r3, [pc, #128]	; (2ae8 <usb_serial_flush_output+0x88>)
    2a66:	ldrb	r3, [r3, #0]
    2a68:	cbz	r3, 2a70 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    2a6a:	ldr	r5, [pc, #128]	; (2aec <usb_serial_flush_output+0x8c>)
    2a6c:	ldrh	r2, [r5, #0]
    2a6e:	cbnz	r2, 2a74 <usb_serial_flush_output+0x14>
    2a70:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    2a74:	ldr.w	r8, [pc, #136]	; 2b00 <usb_serial_flush_output+0xa0>
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    2a78:	rsb	r9, r2, #2048	; 0x800
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    2a7c:	ldr	r6, [pc, #112]	; (2af0 <usb_serial_flush_output+0x90>)
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    2a7e:	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
    2a82:	ldrb.w	r1, [r8]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    2a86:	mov	r2, r9

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    2a88:	ldr	r4, [pc, #104]	; (2af4 <usb_serial_flush_output+0x94>)
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    2a8a:	movs	r3, #0
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    2a8c:	add.w	r6, r6, r1, lsl #5
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    2a90:	ldr	r7, [pc, #100]	; (2af8 <usb_serial_flush_output+0x98>)
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    2a92:	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    2a96:	mov	r0, r6
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    2a98:	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    2a9c:	mov	r1, r4
    2a9e:	bl	338c <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    2aa2:	add.w	r2, r9, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    2aa6:	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    2aaa:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    2aae:	ldr	r3, [pc, #76]	; (2afc <usb_serial_flush_output+0x9c>)
    2ab0:	str	r1, [r3, #0]
		location += 32;
    2ab2:	adds	r1, #32
	} while (location < end_addr);
    2ab4:	cmp	r2, r1
    2ab6:	bhi.n	2ab0 <usb_serial_flush_output+0x50>
	asm("dsb");
    2ab8:	dsb	sy
	asm("isb");
    2abc:	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    2ac0:	movs	r0, #4
    2ac2:	mov	r1, r6
    2ac4:	bl	33bc <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    2ac8:	ldrb.w	r3, [r8]
    2acc:	ldr	r2, [pc, #48]	; (2b00 <usb_serial_flush_output+0xa0>)
    2ace:	adds	r3, #1
    2ad0:	uxtb	r3, r3
    2ad2:	cmp	r3, #3
    2ad4:	it	hi
    2ad6:	movhi	r3, #0
    2ad8:	strb	r3, [r2, #0]
	tx_available = 0;
    2ada:	movs	r3, #0
    2adc:	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
    2ade:	dsb	sy
	tx_noautoflush = 0;
    2ae2:	strb	r3, [r7, #0]
    2ae4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2ae8:	.word	0x2000c7f3
    2aec:	.word	0x2000c7e2
    2af0:	.word	0x20001bc0
    2af4:	.word	0x20201000
    2af8:	.word	0x2000c7f1
    2afc:	.word	0xe000ef70
    2b00:	.word	0x2000c7f0

00002b04 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    2b04:	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    2b06:	push	{r4, r5, r6, r7}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    2b08:	cbz	r3, 2b12 <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    2b0a:	ldr	r3, [r2, #4]
    2b0c:	orr.w	r3, r3, #32768	; 0x8000
    2b10:	str	r3, [r2, #4]
	}
	__disable_irq();
    2b12:	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    2b14:	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    2b16:	cbz	r4, 2b70 <schedule_transfer+0x6c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    2b18:	ldr	r3, [pc, #112]	; (2b8c <schedule_transfer+0x88>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    2b1a:	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    2b1c:	ldr.w	r4, [r3, #432]	; 0x1b0
    2b20:	tst	r4, r1
    2b22:	bne.n	2b50 <schedule_transfer+0x4c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    2b24:	ldr	r6, [pc, #104]	; (2b90 <schedule_transfer+0x8c>)
    2b26:	ldr	r7, [r6, #0]
    2b28:	b.n	2b34 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    2b2a:	ldr	r4, [r6, #0]
    2b2c:	subs	r4, r4, r7
    2b2e:	cmp.w	r4, #2400	; 0x960
    2b32:	bcs.n	2b4c <schedule_transfer+0x48>
		if (USB1_ENDPTPRIME & epmask) goto end;
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    2b34:	ldr.w	r4, [r3, #320]	; 0x140
    2b38:	orr.w	r4, r4, #16384	; 0x4000
    2b3c:	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    2b40:	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    2b44:	ldr.w	r4, [r3, #320]	; 0x140
    2b48:	lsls	r4, r4, #17
    2b4a:	bpl.n	2b2a <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    2b4c:	ands	r5, r1
    2b4e:	beq.n	2b58 <schedule_transfer+0x54>
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    2b50:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    2b52:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    2b54:	pop	{r4, r5, r6, r7}
    2b56:	bx	lr
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    2b58:	ldr	r4, [pc, #48]	; (2b8c <schedule_transfer+0x88>)
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
    2b5a:	str	r2, [r0, #8]
		endpoint->status = 0;
    2b5c:	str	r5, [r0, #12]
		USB1_ENDPTPRIME |= epmask;
    2b5e:	ldr.w	r3, [r4, #432]	; 0x1b0
    2b62:	orrs	r1, r3
    2b64:	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    2b68:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    2b6a:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    2b6c:	pop	{r4, r5, r6, r7}
    2b6e:	bx	lr
		goto end;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
    2b70:	ldr	r5, [pc, #24]	; (2b8c <schedule_transfer+0x88>)
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
		goto end;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    2b72:	str	r2, [r0, #8]
	endpoint->status = 0;
    2b74:	str	r4, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    2b76:	ldr.w	r3, [r5, #432]	; 0x1b0
    2b7a:	orrs	r1, r3
    2b7c:	str.w	r1, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    2b80:	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    2b82:	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    2b84:	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    2b86:	pop	{r4, r5, r6, r7}
    2b88:	bx	lr
    2b8a:	nop
    2b8c:	.word	0x402e0000
    2b90:	.word	0xe0001004

00002b94 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    2b94:	push	{r4, r5, r6, lr}
    2b96:	mov	r6, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    2b98:	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
    2b9a:	cbz	r0, 2bc2 <run_callbacks+0x2e>
    2b9c:	mov	r2, r0
    2b9e:	movs	r4, #0
    2ba0:	b.n	2baa <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    2ba2:	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    2ba4:	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
    2ba6:	cmp	r2, #1
    2ba8:	beq.n	2bc4 <run_callbacks+0x30>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    2baa:	ldr	r3, [r2, #4]
    2bac:	ands.w	r3, r3, #128	; 0x80
    2bb0:	beq.n	2ba2 <run_callbacks+0xe>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    2bb2:	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    2bb4:	cbz	r4, 2bc2 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
    2bb6:	ldr	r3, [r6, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
    2bb8:	ldr	r5, [r0, #0]
		ep->callback_function(first);
    2bba:	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    2bbc:	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
    2bbe:	mov	r0, r5
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    2bc0:	bne.n	2bb6 <run_callbacks+0x22>
    2bc2:	pop	{r4, r5, r6, pc}
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    2bc4:	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
    2bc6:	str	r3, [r6, #52]	; 0x34
			break;
    2bc8:	b.n	2bb4 <run_callbacks+0x20>
    2bca:	nop

00002bcc <endpoint0_transmit.constprop.1>:
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    2bcc:	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    2bce:	cbnz	r1, 2c0a <endpoint0_transmit.constprop.1+0x3e>
    2bd0:	ldr	r4, [pc, #132]	; (2c58 <endpoint0_transmit.constprop.1+0x8c>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2bd2:	ldr	r1, [pc, #136]	; (2c5c <endpoint0_transmit.constprop.1+0x90>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2bd4:	movs	r0, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2bd6:	ldr	r3, [pc, #136]	; (2c60 <endpoint0_transmit.constprop.1+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2bd8:	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2bda:	mov.w	r5, #65537	; 0x10001
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2bde:	movs	r6, #128	; 0x80
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2be0:	str	r2, [r1, #0]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    2be2:	mov	r2, r3
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    2be4:	str	r1, [r4, #8]
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2be6:	str	r6, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    2be8:	str	r0, [r4, #12]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2bea:	str.w	r5, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    2bee:	ldr.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    2bf2:	ldr	r5, [pc, #112]	; (2c64 <endpoint0_transmit.constprop.1+0x98>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    2bf4:	orr.w	r4, r4, #1
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2bf8:	str	r0, [r1, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    2bfa:	str.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    2bfe:	str	r0, [r5, #0]
	while (USB1_ENDPTPRIME) ;
    2c00:	ldr.w	r3, [r2, #432]	; 0x1b0
    2c04:	cmp	r3, #0
    2c06:	bne.n	2c00 <endpoint0_transmit.constprop.1+0x34>
}
    2c08:	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    2c0a:	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    2c0c:	ldr	r3, [pc, #88]	; (2c68 <endpoint0_transmit.constprop.1+0x9c>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    2c0e:	ldr	r5, [pc, #80]	; (2c60 <endpoint0_transmit.constprop.1+0x94>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    2c10:	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    2c12:	ldr	r4, [pc, #68]	; (2c58 <endpoint0_transmit.constprop.1+0x8c>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    2c14:	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    2c18:	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    2c1a:	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    2c1c:	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    2c1e:	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    2c22:	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    2c24:	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    2c28:	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    2c2a:	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    2c2e:	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    2c32:	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    2c36:	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    2c38:	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    2c3a:	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    2c3e:	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    2c42:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    2c46:	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    2c48:	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    2c4a:	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    2c4e:	ldr.w	r3, [r2, #432]	; 0x1b0
    2c52:	cmp	r3, #0
    2c54:	bne.n	2c4e <endpoint0_transmit.constprop.1+0x82>
    2c56:	b.n	2bd2 <endpoint0_transmit.constprop.1+0x6>
    2c58:	.word	0x20000000
    2c5c:	.word	0x2000c820
    2c60:	.word	0x402e0000
    2c64:	.word	0x20009cfc
    2c68:	.word	0x2000c800

00002c6c <usb_isr>:
	__builtin_unreachable();
}


void usb_isr(void)
{
    2c6c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    2c70:	ldr	r4, [pc, #740]	; (2f58 <usb_isr+0x2ec>)
	__builtin_unreachable();
}


void usb_isr(void)
{
    2c72:	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    2c74:	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    2c78:	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    2c7c:	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    2c80:	beq.n	2d40 <usb_isr+0xd4>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    2c82:	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2c86:	cmp	r3, #0
    2c88:	beq.n	2d36 <usb_isr+0xca>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    2c8a:	mov.w	fp, #65537	; 0x10001
    2c8e:	ldr.w	r9, [pc, #748]	; 2f7c <usb_isr+0x310>
    2c92:	ldr	r6, [pc, #712]	; (2f5c <usb_isr+0x2f0>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    2c94:	mov	r5, r4
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    2c96:	mov	sl, fp
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    2c98:	str.w	r3, [r4, #428]	; 0x1ac
    2c9c:	ldr	r0, [r6, #40]	; 0x28
    2c9e:	ldr	r2, [r6, #44]	; 0x2c
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    2ca0:	ldr.w	r3, [r4, #320]	; 0x140
    2ca4:	orr.w	r3, r3, #8192	; 0x2000
    2ca8:	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    2cac:	ldr.w	r3, [r4, #320]	; 0x140
    2cb0:	lsls	r7, r3, #18
    2cb2:	bpl.n	2ca0 <usb_isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    2cb4:	ldr.w	r3, [r5, #320]	; 0x140
    2cb8:	bic.w	r3, r3, #8192	; 0x2000
    2cbc:	str.w	r3, [r5, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    2cc0:	str.w	sl, [r5, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    2cc4:	ldr.w	r3, [r4, #436]	; 0x1b4
    2cc8:	ands.w	r3, r3, #65537	; 0x10001
    2ccc:	bne.n	2cc4 <usb_isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    2cce:	uxth	r1, r0
    2cd0:	movw	r7, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    2cd4:	str.w	r3, [r9]
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    2cd8:	cmp	r1, r7
    2cda:	bhi.w	2e38 <usb_isr+0x1cc>
    2cde:	cmp.w	r1, #1664	; 0x680
    2ce2:	bcs.w	30a2 <usb_isr+0x436>
    2ce6:	cmp.w	r1, #258	; 0x102
    2cea:	beq.w	2fae <usb_isr+0x342>
    2cee:	bhi.w	2ec2 <usb_isr+0x256>
    2cf2:	cmp	r1, #128	; 0x80
    2cf4:	beq.w	2f94 <usb_isr+0x328>
    2cf8:	cmp	r1, #130	; 0x82
    2cfa:	bne.w	2eb2 <usb_isr+0x246>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    2cfe:	uxth	r2, r2
    2d00:	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
    2d04:	cmp	r1, #7
    2d06:	bhi.w	2eb2 <usb_isr+0x246>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    2d0a:	lsls	r1, r1, #2
    2d0c:	ldr	r0, [pc, #592]	; (2f60 <usb_isr+0x2f4>)
		reply_buffer[0] = 0;
    2d0e:	ldr	r7, [pc, #596]	; (2f64 <usb_isr+0x2f8>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    2d10:	add	r0, r1
    2d12:	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    2d14:	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
    2d16:	strb	r3, [r7, #0]
		reply_buffer[1] = 0;
    2d18:	strb	r3, [r7, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    2d1a:	bpl.w	3120 <usb_isr+0x4b4>
    2d1e:	lsls	r2, r1, #15
    2d20:	bpl.n	2d26 <usb_isr+0xba>
			reply_buffer[0] = 1;
    2d22:	movs	r3, #1
    2d24:	strb	r3, [r7, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    2d26:	movs	r1, #2
    2d28:	ldr	r0, [pc, #568]	; (2f64 <usb_isr+0x2f8>)
    2d2a:	bl	2bcc <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2d2e:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2d32:	cmp	r3, #0
    2d34:	bne.n	2c98 <usb_isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    2d36:	ldr	r2, [pc, #544]	; (2f58 <usb_isr+0x2ec>)
    2d38:	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    2d3c:	cmp	r3, #0
    2d3e:	bne.n	2dd4 <usb_isr+0x168>
			}
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    2d40:	tst.w	r8, #64	; 0x40
    2d44:	beq.n	2d78 <usb_isr+0x10c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    2d46:	ldr	r3, [pc, #528]	; (2f58 <usb_isr+0x2ec>)
    2d48:	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    2d4c:	mov	r2, r3
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    2d4e:	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    2d52:	ldr.w	r1, [r3, #444]	; 0x1bc
    2d56:	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    2d5a:	ldr.w	r4, [r2, #432]	; 0x1b0
    2d5e:	ldr	r3, [pc, #504]	; (2f58 <usb_isr+0x2ec>)
    2d60:	cmp	r4, #0
    2d62:	bne.n	2d5a <usb_isr+0xee>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    2d64:	mov.w	r2, #4294967295
    2d68:	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    2d6c:	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    2d70:	bl	26f0 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    2d74:	ldr	r3, [pc, #496]	; (2f68 <usb_isr+0x2fc>)
    2d76:	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    2d78:	tst.w	r8, #16777216	; 0x1000000
    2d7c:	beq.n	2d86 <usb_isr+0x11a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    2d7e:	ldr	r3, [pc, #492]	; (2f6c <usb_isr+0x300>)
    2d80:	ldr	r3, [r3, #0]
    2d82:	cbz	r3, 2d86 <usb_isr+0x11a>
    2d84:	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    2d86:	tst.w	r8, #33554432	; 0x2000000
    2d8a:	beq.n	2d94 <usb_isr+0x128>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    2d8c:	ldr	r3, [pc, #480]	; (2f70 <usb_isr+0x304>)
    2d8e:	ldr	r3, [r3, #0]
    2d90:	cbz	r3, 2d94 <usb_isr+0x128>
    2d92:	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    2d94:	tst.w	r8, #4
    2d98:	beq.n	2dac <usb_isr+0x140>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    2d9a:	ldr	r3, [pc, #444]	; (2f58 <usb_isr+0x2ec>)
    2d9c:	ldr.w	r3, [r3, #388]	; 0x184
    2da0:	ands.w	r3, r3, #512	; 0x200
    2da4:	beq.n	2e32 <usb_isr+0x1c6>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
    2da6:	ldr	r3, [pc, #460]	; (2f74 <usb_isr+0x308>)
    2da8:	movs	r2, #1
    2daa:	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    2dac:	ldr	r3, [pc, #424]	; (2f58 <usb_isr+0x2ec>)
    2dae:	ldr.w	r2, [r3, #328]	; 0x148
    2db2:	lsls	r2, r2, #24
    2db4:	bpl.n	2dce <usb_isr+0x162>
    2db6:	tst.w	r8, #128	; 0x80
    2dba:	beq.n	2dce <usb_isr+0x162>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    2dbc:	ldr	r1, [pc, #440]	; (2f78 <usb_isr+0x30c>)
    2dbe:	ldrb	r2, [r1, #0]
    2dc0:	cbz	r2, 2dce <usb_isr+0x162>
			if (--usb_reboot_timer == 0) {
    2dc2:	subs	r2, #1
    2dc4:	uxtb	r2, r2
    2dc6:	strb	r2, [r1, #0]
    2dc8:	cmp	r2, #0
    2dca:	beq.w	3252 <usb_isr+0x5e6>
		#endif
		#ifdef FLIGHTSIM_INTERFACE
		usb_flightsim_flush_output();
		#endif
	}
}
    2dce:	add	sp, #12
    2dd0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    2dd4:	ldr	r1, [pc, #420]	; (2f7c <usb_isr+0x310>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    2dd6:	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    2dda:	ldr	r0, [r1, #0]
    2ddc:	tst	r3, r0
    2dde:	bne.w	31a6 <usb_isr+0x53a>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    2de2:	ldr	r2, [pc, #388]	; (2f68 <usb_isr+0x2fc>)
    2de4:	ldr	r5, [r2, #0]
#if 1
			if (completestatus) {
    2de6:	ands	r5, r3
    2de8:	beq.n	2d40 <usb_isr+0xd4>

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    2dea:	lsrs	r7, r5, #16
    2dec:	beq.n	2e0e <usb_isr+0x1a2>
    2dee:	ldr	r6, [pc, #364]	; (2f5c <usb_isr+0x2f0>)
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
    2df0:	mov.w	r9, #1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
    2df4:	rbit	r4, r7
    2df8:	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    2dfc:	add.w	r0, r6, r4, lsl #7
					tx &= ~(1<<p);
    2e00:	lsl.w	r4, r9, r4

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    2e04:	adds	r0, #64	; 0x40
    2e06:	bl	2b94 <run_callbacks>
#if 1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    2e0a:	bics	r7, r4
    2e0c:	bne.n	2df4 <usb_isr+0x188>
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
    2e0e:	uxth	r5, r5
				while(rx) {
    2e10:	cmp	r5, #0
    2e12:	beq.n	2d40 <usb_isr+0xd4>
    2e14:	ldr	r6, [pc, #324]	; (2f5c <usb_isr+0x2f0>)
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
					rx &= ~(1<<p);
    2e16:	movs	r7, #1
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
    2e18:	rbit	r4, r5
    2e1c:	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2);
    2e20:	add.w	r0, r6, r4, lsl #7
					rx &= ~(1<<p);
    2e24:	lsl.w	r4, r7, r4

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
    2e28:	bl	2b94 <run_callbacks>
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
    2e2c:	bics	r5, r4
    2e2e:	bne.n	2e18 <usb_isr+0x1ac>
    2e30:	b.n	2d40 <usb_isr+0xd4>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
    2e32:	ldr	r2, [pc, #320]	; (2f74 <usb_isr+0x308>)
    2e34:	strb	r3, [r2, #0]
    2e36:	b.n	2dac <usb_isr+0x140>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    2e38:	movw	r7, #8225	; 0x2021
    2e3c:	cmp	r1, r7
    2e3e:	beq.n	2eaa <usb_isr+0x23e>
    2e40:	bhi.n	2f12 <usb_isr+0x2a6>
    2e42:	cmp.w	r1, #2176	; 0x880
    2e46:	beq.w	3086 <usb_isr+0x41a>
    2e4a:	cmp.w	r1, #2304	; 0x900
    2e4e:	bne.n	2eb2 <usb_isr+0x246>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    2e50:	ubfx	r0, r0, #16, #8
    2e54:	ldr	r2, [pc, #296]	; (2f80 <usb_isr+0x314>)
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    2e56:	ldr	r1, [pc, #300]	; (2f84 <usb_isr+0x318>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    2e58:	strb	r0, [r2, #0]
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    2e5a:	ldr	r7, [pc, #300]	; (2f88 <usb_isr+0x31c>)
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    2e5c:	ldr	r2, [pc, #300]	; (2f8c <usb_isr+0x320>)
    2e5e:	str	r3, [sp, #4]
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    2e60:	str.w	r7, [r5, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    2e64:	str.w	r1, [r5, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    2e68:	str.w	r2, [r5, #464]	; 0x1d0
		#endif
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    2e6c:	bl	26f4 <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2e70:	ldr	r2, [pc, #284]	; (2f90 <usb_isr+0x324>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    2e72:	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2e74:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2e76:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2e78:	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2e7a:	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2e7c:	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    2e7e:	str	r3, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2e80:	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2e84:	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2e88:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    2e8a:	orr.w	r2, r1, #65536	; 0x10000
    2e8e:	str.w	r2, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    2e92:	ldr	r2, [pc, #232]	; (2f7c <usb_isr+0x310>)
    2e94:	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    2e96:	ldr.w	r3, [r4, #432]	; 0x1b0
    2e9a:	cmp	r3, #0
    2e9c:	bne.n	2e96 <usb_isr+0x22a>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2e9e:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2ea2:	cmp	r3, #0
    2ea4:	bne.w	2c98 <usb_isr+0x2c>
    2ea8:	b.n	2d36 <usb_isr+0xca>
		// fall through to next case, to always send ZLP ACK
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    2eaa:	lsrs	r1, r2, #16
    2eac:	cmp	r1, #7
    2eae:	beq.w	3128 <usb_isr+0x4bc>
			return;
		}
		break;
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    2eb2:	str.w	fp, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2eb6:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2eba:	cmp	r3, #0
    2ebc:	bne.w	2c98 <usb_isr+0x2c>
    2ec0:	b.n	2d36 <usb_isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    2ec2:	movw	r7, #770	; 0x302
    2ec6:	cmp	r1, r7
    2ec8:	beq.w	3026 <usb_isr+0x3ba>
    2ecc:	cmp.w	r1, #1280	; 0x500
    2ed0:	bne.n	2eb2 <usb_isr+0x246>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2ed2:	ldr	r2, [pc, #188]	; (2f90 <usb_isr+0x324>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2ed4:	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2ed6:	movs	r7, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    2ed8:	str	r3, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2eda:	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2edc:	str	r7, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2ede:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2ee0:	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2ee4:	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2ee8:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    2eea:	orr.w	r3, r1, #65536	; 0x10000
    2eee:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    2ef2:	ldr.w	r3, [r4, #432]	; 0x1b0
    2ef6:	cmp	r3, #0
    2ef8:	bne.n	2ef2 <usb_isr+0x286>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    2efa:	lsrs	r3, r0, #16
    2efc:	lsls	r3, r3, #25
    2efe:	orr.w	r3, r3, #16777216	; 0x1000000
    2f02:	str.w	r3, [r5, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2f06:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2f0a:	cmp	r3, #0
    2f0c:	bne.w	2c98 <usb_isr+0x2c>
    2f10:	b.n	2d36 <usb_isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    2f12:	movw	r3, #8737	; 0x2221
    2f16:	cmp	r1, r3
    2f18:	beq.n	300e <usb_isr+0x3a2>
    2f1a:	movw	r3, #8993	; 0x2321
    2f1e:	cmp	r1, r3
    2f20:	bne.n	2eb2 <usb_isr+0x246>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2f22:	ldr	r3, [pc, #108]	; (2f90 <usb_isr+0x324>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2f24:	movs	r2, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    2f26:	movs	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2f28:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2f2a:	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2f2c:	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2f2e:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    2f30:	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2f32:	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2f36:	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2f3a:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    2f3c:	orr.w	r3, r2, #65536	; 0x10000
    2f40:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    2f44:	ldr.w	r3, [r4, #432]	; 0x1b0
    2f48:	cmp	r3, #0
    2f4a:	bne.n	2f44 <usb_isr+0x2d8>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2f4c:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2f50:	cmp	r3, #0
    2f52:	bne.w	2c98 <usb_isr+0x2c>
    2f56:	b.n	2d36 <usb_isr+0xca>
    2f58:	.word	0x402e0000
    2f5c:	.word	0x20000000
    2f60:	.word	0x402e01c0
    2f64:	.word	0x20009d08
    2f68:	.word	0x20009d00
    2f6c:	.word	0x20009d5c
    2f70:	.word	0x20009d60
    2f74:	.word	0x2000c7f4
    2f78:	.word	0x2000c7f5
    2f7c:	.word	0x20009cfc
    2f80:	.word	0x2000c7f3
    2f84:	.word	0x000200c8
    2f88:	.word	0x00cc0002
    2f8c:	.word	0x00c80002
    2f90:	.word	0x2000c820
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    2f94:	ldr	r2, [pc, #728]	; (3270 <usb_isr+0x604>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    2f96:	movs	r1, #2
    2f98:	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    2f9a:	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    2f9c:	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    2f9e:	bl	2bcc <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    2fa2:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    2fa6:	cmp	r3, #0
    2fa8:	bne.w	2c98 <usb_isr+0x2c>
    2fac:	b.n	2d36 <usb_isr+0xca>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    2fae:	uxth	r2, r2
    2fb0:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    2fb4:	cmp	r3, #7
    2fb6:	bhi.w	2eb2 <usb_isr+0x246>
		dir = setup.wIndex & 0x80;
		if (dir) {
    2fba:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    2fbe:	mov.w	r3, r3, lsl #2
    2fc2:	ldr	r2, [pc, #688]	; (3274 <usb_isr+0x608>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2fc4:	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2fc8:	mov.w	r0, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    2fcc:	add	r2, r3
    2fce:	ldr	r3, [r2, #0]
    2fd0:	ite	ne
    2fd2:	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    2fd6:	biceq.w	r3, r3, #1
    2fda:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2fdc:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2fde:	ldr	r3, [pc, #664]	; (3278 <usb_isr+0x60c>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    2fe0:	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    2fe2:	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    2fe4:	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    2fe6:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    2fe8:	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    2fec:	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    2ff0:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    2ff2:	orr.w	r3, r2, #65536	; 0x10000
    2ff6:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    2ffa:	ldr.w	r3, [r4, #432]	; 0x1b0
    2ffe:	cmp	r3, #0
    3000:	bne.n	2ffa <usb_isr+0x38e>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    3002:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    3006:	cmp	r3, #0
    3008:	bne.w	2c98 <usb_isr+0x2c>
    300c:	b.n	2d36 <usb_isr+0xca>
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    300e:	uxth	r2, r2
    3010:	cmp	r2, #0
    3012:	bne.n	2f22 <usb_isr+0x2b6>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    3014:	ldr	r3, [pc, #612]	; (327c <usb_isr+0x610>)
			usb_cdc_line_rtsdtr = setup.wValue;
    3016:	ubfx	r0, r0, #16, #8
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    301a:	ldr	r2, [pc, #612]	; (3280 <usb_isr+0x614>)
    301c:	ldr	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    301e:	ldr	r3, [pc, #612]	; (3284 <usb_isr+0x618>)
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    3020:	str	r1, [r2, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    3022:	strb	r0, [r3, #0]
    3024:	b.n	2f22 <usb_isr+0x2b6>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    3026:	uxth	r2, r2
    3028:	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    302c:	cmp	r3, #7
    302e:	bhi.w	2eb2 <usb_isr+0x246>
		dir = setup.wIndex & 0x80;
		if (dir) {
    3032:	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    3036:	mov.w	r3, r3, lsl #2
    303a:	ldr	r2, [pc, #568]	; (3274 <usb_isr+0x608>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    303c:	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3040:	mov.w	r0, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    3044:	add	r2, r3
    3046:	ldr	r3, [r2, #0]
    3048:	ite	ne
    304a:	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    304e:	orreq.w	r3, r3, #1
    3052:	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3054:	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    3056:	ldr	r3, [pc, #544]	; (3278 <usb_isr+0x60c>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    3058:	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    305a:	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    305c:	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    305e:	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    3060:	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    3064:	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    3068:	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    306a:	orr.w	r3, r2, #65536	; 0x10000
    306e:	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    3072:	ldr.w	r3, [r4, #432]	; 0x1b0
    3076:	cmp	r3, #0
    3078:	bne.n	3072 <usb_isr+0x406>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    307a:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    307e:	cmp	r3, #0
    3080:	bne.w	2c98 <usb_isr+0x2c>
    3084:	b.n	2d36 <usb_isr+0xca>
		endpoint_queue_head[2].unused1 = (uint32_t)experimental_buffer;
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    3086:	ldr	r2, [pc, #512]	; (3288 <usb_isr+0x61c>)
		endpoint0_transmit(reply_buffer, 1, 0);
    3088:	movs	r1, #1
		endpoint_queue_head[2].unused1 = (uint32_t)experimental_buffer;
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    308a:	ldr	r3, [pc, #484]	; (3270 <usb_isr+0x604>)
    308c:	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    308e:	mov	r0, r3
		endpoint_queue_head[2].unused1 = (uint32_t)experimental_buffer;
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    3090:	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    3092:	bl	2bcc <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    3096:	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    309a:	cmp	r3, #0
    309c:	bne.w	2c98 <usb_isr+0x2c>
    30a0:	b.n	2d36 <usb_isr+0xca>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    30a2:	ldr	r3, [pc, #488]	; (328c <usb_isr+0x620>)
    30a4:	ldr	r1, [r3, #4]
    30a6:	cmp	r1, #0
    30a8:	beq.w	2eb2 <usb_isr+0x246>
    30ac:	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    30ae:	uxth.w	lr, r2
    30b2:	b.n	30be <usb_isr+0x452>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    30b4:	adds	r3, #12
    30b6:	ldr	r1, [r3, #4]
    30b8:	cmp	r1, #0
    30ba:	beq.w	2eb2 <usb_isr+0x246>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    30be:	ldrh	r7, [r3, #0]
    30c0:	cmp	r7, r0
    30c2:	bne.n	30b4 <usb_isr+0x448>
    30c4:	ldrh	r7, [r3, #2]
    30c6:	cmp	r7, lr
    30c8:	bne.n	30b4 <usb_isr+0x448>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
    30ca:	lsrs	r7, r0, #8
    30cc:	cmp	r7, #3
    30ce:	beq.w	3246 <usb_isr+0x5da>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
    30d2:	ldrh	r3, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    30d4:	lsrs	r2, r2, #16
    30d6:	cmp	r3, r2
    30d8:	it	cs
    30da:	movcs	r3, r2

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
    30dc:	cmp.w	r0, #512	; 0x200
    30e0:	beq.w	3228 <usb_isr+0x5bc>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
    30e4:	cmp.w	r0, #1792	; 0x700
    30e8:	beq.w	3202 <usb_isr+0x596>
    30ec:	ldr	r7, [pc, #416]	; (3290 <usb_isr+0x624>)
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    30ee:	mov	r2, r3
    30f0:	str	r3, [sp, #4]
    30f2:	mov	r0, r7
    30f4:	bl	2270 <memcpy>
    30f8:	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    30fa:	bic.w	r2, r7, #31
	uint32_t end_addr = (uint32_t)addr + size;
    30fe:	add	r7, r3
	asm volatile("": : :"memory");
	asm("dsb");
    3100:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    3104:	ldr	r1, [pc, #396]	; (3294 <usb_isr+0x628>)
    3106:	str	r2, [r1, #0]
		location += 32;
    3108:	adds	r2, #32
	} while (location < end_addr);
    310a:	cmp	r7, r2
    310c:	bhi.n	3104 <usb_isr+0x498>
	asm("dsb");
    310e:	dsb	sy
	asm("isb");
    3112:	isb	sy
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    3116:	ldr	r0, [pc, #376]	; (3290 <usb_isr+0x624>)
    3118:	mov	r1, r3
    311a:	bl	2bcc <endpoint0_transmit.constprop.1>
    311e:	b.n	2d2e <usb_isr+0xc2>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    3120:	lsls	r3, r1, #31
    3122:	bpl.w	2d26 <usb_isr+0xba>
    3126:	b.n	2d22 <usb_isr+0xb6>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    3128:	ldr	r7, [pc, #364]	; (3298 <usb_isr+0x62c>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    312a:	mov.w	lr, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    312e:	str	r3, [r6, #12]
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    3130:	ldr	r1, [pc, #360]	; (329c <usb_isr+0x630>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    3132:	ldr	r3, [pc, #364]	; (32a0 <usb_isr+0x634>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    3134:	str	r0, [r7, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    3136:	str.w	lr, [r3]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    313a:	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    313c:	str	r3, [r6, #8]
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
    313e:	ldr	r1, [pc, #356]	; (32a4 <usb_isr+0x638>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    3140:	ldr.w	r0, [r5, #432]	; 0x1b0
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    3144:	str	r2, [r7, #4]
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    3146:	add.w	r7, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    314a:	orr.w	r2, r0, lr
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    314e:	str	r1, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    3150:	add.w	lr, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    3154:	add.w	r0, r1, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    3158:	add.w	r1, r1, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    315c:	str.w	r2, [r5, #432]	; 0x1b0
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    3160:	str	r7, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    3162:	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    3166:	str	r0, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    3168:	str	r1, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    316a:	ldr.w	r3, [r4, #432]	; 0x1b0
    316e:	cmp	r3, #0
    3170:	bne.n	316a <usb_isr+0x4fe>
	}
	endpoint0_transfer_ack.next = 1;
    3172:	ldr	r2, [pc, #260]	; (3278 <usb_isr+0x60c>)
    3174:	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3176:	movw	r1, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    317a:	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    317c:	str	r0, [r2, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    317e:	mov.w	r0, #65536	; 0x10000
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    3182:	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    3184:	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    3186:	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    318a:	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    318e:	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    3190:	orr.w	r3, r1, r0
    3194:	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    3198:	str.w	r0, [r9]
	while (USB1_ENDPTPRIME) ;
    319c:	ldr.w	r3, [r4, #432]	; 0x1b0
    31a0:	cmp	r3, #0
    31a2:	bne.n	319c <usb_isr+0x530>
    31a4:	b.n	2d2e <usb_isr+0xc2>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    31a6:	ldr	r0, [pc, #240]	; (3298 <usb_isr+0x62c>)
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    31a8:	movw	r4, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    31ac:	movs	r6, #0

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    31ae:	ldrh	r5, [r0, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    31b0:	str	r6, [r1, #0]

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    31b2:	cmp	r5, r4

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    31b4:	ldr	r0, [r0, #4]
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    31b6:	bne.w	2de2 <usb_isr+0x176>
    31ba:	uxth	r1, r0
    31bc:	cmp	r1, #0
    31be:	bne.w	2de2 <usb_isr+0x176>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    31c2:	ldr	r1, [pc, #224]	; (32a4 <usb_isr+0x638>)
    31c4:	ldr	r4, [pc, #224]	; (32a8 <usb_isr+0x63c>)
    31c6:	ldmia	r1, {r0, r1}
    31c8:	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    31ca:	cmp	r0, #134	; 0x86
	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    31cc:	str	r0, [r4, #0]
    31ce:	strh	r1, [r4, #4]
    31d0:	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    31d2:	bne.w	2de2 <usb_isr+0x176>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
    31d6:	cpsid	i
	sof_usage |= (1 << interface);
    31d8:	ldr	r0, [pc, #208]	; (32ac <usb_isr+0x640>)
    31da:	ldrb	r1, [r0, #0]
    31dc:	orr.w	r1, r1, #4
    31e0:	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    31e2:	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    31e6:	lsls	r0, r1, #24
    31e8:	bmi.n	31f8 <usb_isr+0x58c>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    31ea:	orr.w	r1, r1, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    31ee:	movs	r0, #128	; 0x80
    31f0:	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    31f4:	str.w	r1, [r2, #328]	; 0x148
	}
	__enable_irq();
    31f8:	cpsie	i
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    31fa:	ldr	r2, [pc, #180]	; (32b0 <usb_isr+0x644>)
    31fc:	movs	r1, #80	; 0x50
    31fe:	strb	r1, [r2, #0]
    3200:	b.n	2de2 <usb_isr+0x176>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    3202:	ldr	r0, [pc, #176]	; (32b4 <usb_isr+0x648>)
					memcpy(usb_descriptor_buffer, src, datalen);
    3204:	mov	r2, r3
    3206:	ldr	r7, [pc, #136]	; (3290 <usb_isr+0x624>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    3208:	ldrb.w	lr, [r0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
    320c:	ldr	r1, [pc, #168]	; (32b8 <usb_isr+0x64c>)
    320e:	ldr	r0, [pc, #172]	; (32bc <usb_isr+0x650>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
    3210:	str	r3, [sp, #4]
    3212:	cmp.w	lr, #0
    3216:	it	eq
    3218:	moveq	r1, r0
    321a:	mov	r0, r7
    321c:	bl	2270 <memcpy>
					usb_descriptor_buffer[1] = 7;
    3220:	movs	r2, #7
    3222:	ldr	r3, [sp, #4]
    3224:	strb	r2, [r7, #1]
    3226:	b.n	30fa <usb_isr+0x48e>

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    3228:	ldr	r0, [pc, #136]	; (32b4 <usb_isr+0x648>)
					memcpy(usb_descriptor_buffer, src, datalen);
    322a:	mov	r2, r3
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    322c:	ldr	r1, [pc, #140]	; (32bc <usb_isr+0x650>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    322e:	ldrb	r7, [r0, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    3230:	ldr	r0, [pc, #132]	; (32b8 <usb_isr+0x64c>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
    3232:	str	r3, [sp, #4]
    3234:	cmp	r7, #0
    3236:	it	eq
    3238:	moveq	r1, r0
    323a:	ldr	r0, [pc, #84]	; (3290 <usb_isr+0x624>)
    323c:	bl	2270 <memcpy>
    3240:	ldr	r7, [pc, #76]	; (3290 <usb_isr+0x624>)
    3242:	ldr	r3, [sp, #4]
    3244:	b.n	30fa <usb_isr+0x48e>
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    3246:	lsrs	r2, r2, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    3248:	ldrb	r3, [r1, #0]
    324a:	cmp	r3, r2
    324c:	it	cs
    324e:	movcs	r3, r2
    3250:	b.n	30e4 <usb_isr+0x478>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
    3252:	ldr	r1, [pc, #88]	; (32ac <usb_isr+0x640>)
    3254:	ldrb	r2, [r1, #0]
    3256:	and.w	r2, r2, #251	; 0xfb
    325a:	strb	r2, [r1, #0]
	if (sof_usage == 0) {
    325c:	cbnz	r2, 326a <usb_isr+0x5fe>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    325e:	ldr.w	r2, [r3, #328]	; 0x148
    3262:	bic.w	r2, r2, #128	; 0x80
    3266:	str.w	r2, [r3, #328]	; 0x148
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				_reboot_Teensyduino_();
    326a:	bl	8e40 <___reboot_Teensyduino__veneer>
    326e:	nop
    3270:	.word	0x20009d08
    3274:	.word	0x402e01c0
    3278:	.word	0x2000c820
    327c:	.word	0x20009d58
    3280:	.word	0x2000c848
    3284:	.word	0x2000c7f2
    3288:	.word	0x2000c7f3
    328c:	.word	0x20000d68
    3290:	.word	0x20203000
    3294:	.word	0xe000ef70
    3298:	.word	0x20001c40
    329c:	.word	0x00070080
    32a0:	.word	0x2000c800
    32a4:	.word	0x20009cf4
    32a8:	.word	0x2000c840
    32ac:	.word	0x2000c7ee
    32b0:	.word	0x2000c7f5
    32b4:	.word	0x2000c7f4
    32b8:	.word	0x60001ea4
    32bc:	.word	0x60001ef0

000032c0 <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    32c0:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    32c2:	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    32c6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    32ca:	ite	ne
    32cc:	movne	r7, #0
    32ce:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    32d2:	cmp	r2, #2
    32d4:	bls.n	32da <usb_config_rx+0x1a>
    32d6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    32da:	mov.w	r9, r0, lsl #7
    32de:	ldr.w	sl, [pc, #64]	; 3320 <usb_config_rx+0x60>
    32e2:	mov	r5, r1
    32e4:	mov	r4, r0
    32e6:	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    32ea:	movs	r1, #0
    32ec:	movs	r2, #64	; 0x40
    32ee:	mov	r8, r3
    32f0:	mov	r0, r6
    32f2:	bl	54f4 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    32f6:	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    32f8:	orr.w	r1, r7, r5, lsl #16
    32fc:	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    3300:	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    3304:	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    3306:	cmp.w	r8, #0
    330a:	beq.n	32d6 <usb_config_rx+0x16>
    330c:	ldr	r3, [pc, #12]	; (331c <usb_config_rx+0x5c>)
    330e:	lsls	r0, r4
    3310:	ldr	r4, [r3, #0]
    3312:	orrs	r0, r4
    3314:	str	r0, [r3, #0]
    3316:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    331a:	nop
    331c:	.word	0x20009d00
    3320:	.word	0x20000000

00003324 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    3324:	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    3326:	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    332a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    332e:	ite	ne
    3330:	movne	r7, #0
    3332:	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    3336:	cmp	r2, #2
    3338:	bls.n	333e <usb_config_tx+0x1a>
    333a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    333e:	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    3340:	lsls	r5, r0, #7
    3342:	ldr.w	r9, [pc, #68]	; 3388 <usb_config_tx+0x64>
    3346:	mov	r8, r1
    3348:	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    334a:	movs	r1, #0
    334c:	mov	r4, r0
    334e:	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    3350:	add.w	sl, r9, r5
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    3354:	mov	r0, sl
    3356:	bl	54f4 <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    335a:	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    335c:	orr.w	r1, r7, r8, lsl #16
    3360:	str.w	r1, [r9, r5]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    3364:	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    3368:	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    336c:	cmp	r6, #0
    336e:	beq.n	333a <usb_config_tx+0x16>
    3370:	add.w	r0, r4, #16
    3374:	ldr	r3, [pc, #12]	; (3384 <usb_config_tx+0x60>)
    3376:	lsls	r2, r0
    3378:	ldr	r0, [r3, #0]
    337a:	orrs	r2, r0
    337c:	str	r2, [r3, #0]
    337e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3382:	nop
    3384:	.word	0x20009d00
    3388:	.word	0x20000000

0000338c <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    338c:	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    338e:	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    3390:	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    3392:	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    3396:	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    3398:	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    339a:	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    339c:	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    33a0:	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    33a4:	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    33a8:	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    33ac:	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    33ae:	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    33b0:	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    33b2:	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    33b4:	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    33b6:	pop	{r4, r5, r6, r7}
    33b8:	bx	lr
    33ba:	nop

000033bc <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    33bc:	subs	r3, r0, #2
    33be:	cmp	r3, #2
    33c0:	bls.n	33c4 <usb_transmit+0x8>
    33c2:	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    33c4:	ldr	r3, [pc, #24]	; (33e0 <usb_transmit+0x24>)
    33c6:	mov	r2, r1
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    33c8:	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    33ca:	add.w	r4, r0, #16
    33ce:	movs	r5, #1
    33d0:	add.w	r0, r3, r0, lsl #7
    33d4:	lsl.w	r1, r5, r4
    33d8:	adds	r0, #64	; 0x40
}
    33da:	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    33dc:	b.w	2b04 <schedule_transfer>
    33e0:	.word	0x20000000

000033e4 <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    33e4:	subs	r3, r0, #2
    33e6:	cmp	r3, #2
    33e8:	bls.n	33ec <usb_receive+0x8>
    33ea:	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    33ec:	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    33ee:	ldr	r3, [pc, #20]	; (3404 <usb_receive+0x20>)
    33f0:	movs	r4, #1
    33f2:	mov	r2, r1
    33f4:	lsl.w	r1, r4, r0
    33f8:	add.w	r0, r3, r0, lsl #7
}
    33fc:	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    3400:	b.w	2b04 <schedule_transfer>
    3404:	.word	0x20000000

00003408 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    3408:	ldr	r0, [r0, #4]
#endif
}
    340a:	bx	lr

0000340c <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    340c:	cmp	r0, #0
    340e:	beq.n	34c0 <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    3410:	movs	r2, #1
{

}*/

void delay(uint32_t msec)
{
    3412:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3416:	sub	sp, #20
    3418:	mov	fp, r0
    341a:	ldr	r4, [pc, #168]	; (34c4 <delay+0xb8>)
    341c:	ldr	r5, [pc, #168]	; (34c8 <delay+0xbc>)
    341e:	ldr	r6, [pc, #172]	; (34cc <delay+0xc0>)
    3420:	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    3424:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    3428:	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    342a:	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    342c:	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    3430:	cmp	r1, #0
    3432:	bne.n	3424 <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    3434:	ldr	r7, [pc, #152]	; (34d0 <delay+0xc4>)
    3436:	strd	r8, r9, [sp, #8]
    343a:	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    343c:	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    343e:	ldr	r2, [pc, #148]	; (34d4 <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    3440:	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    3444:	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    3446:	ldr	r2, [r2, #0]
    3448:	movs	r7, #1
    344a:	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
    344e:	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    3452:	mov	r8, r3
	if (frac > 1000) frac = 1000;
    3454:	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    3456:	cmp	r3, r1
    3458:	it	eq
    345a:	cmpeq	r2, r8
    345c:	ite	cs
    345e:	movcs	sl, r8
    3460:	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    3462:	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    3466:	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    346a:	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    346c:	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    346e:	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    3472:	cmp	r3, #0
    3474:	bne.n	3466 <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    3476:	ldr	r0, [sp, #4]
    3478:	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    347a:	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    347c:	ldr	r0, [pc, #84]	; (34d4 <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    347e:	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    3482:	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    3484:	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    3488:	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
    348c:	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    3490:	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    3494:	mov	r8, r1
	if (frac > 1000) frac = 1000;
    3496:	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    3498:	cmp	r1, r3
    349a:	it	eq
    349c:	cmpeq	r0, r8
    349e:	ite	cs
    34a0:	movcs	r3, r8
    34a2:	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    34a4:	add	r2, r3
    34a6:	cmp	r2, lr
    34a8:	bcc.n	34ba <delay+0xae>
			if (--msec == 0) return;
    34aa:	subs.w	fp, fp, #1
			start += 1000;
    34ae:	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
    34b2:	bne.n	3466 <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
    34b4:	add	sp, #20
    34b6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
    34ba:	bl	3c00 <yield>
	}
    34be:	b.n	3466 <delay+0x5a>
    34c0:	bx	lr
    34c2:	nop
    34c4:	.word	0x2000c84c
    34c8:	.word	0x20009d58
    34cc:	.word	0x20009d54
    34d0:	.word	0xe0001004
    34d4:	.word	0x20009d50

000034d8 <micros>:
	// TODO...
}

uint32_t micros(void)
{
    34d8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
    34dc:	ldr	r2, [pc, #72]	; (3528 <micros+0x50>)
    34de:	movs	r6, #1
    34e0:	ldr	r5, [pc, #72]	; (352c <micros+0x54>)
    34e2:	ldr	r4, [pc, #76]	; (3530 <micros+0x58>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    34e4:	ldrex	r3, [r2]
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    34e8:	ldr	r1, [r5, #0]
		scc = systick_cycle_count;
    34ea:	ldr	r0, [r4, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    34ec:	strex	r3, r6, [r2]
	} while ( __STREXW(1, &systick_safe_read));
    34f0:	cmp	r3, #0
    34f2:	bne.n	34e4 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    34f4:	ldr	r2, [pc, #60]	; (3534 <micros+0x5c>)
    34f6:	ldr	r6, [r2, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    34f8:	ldr	r7, [pc, #60]	; (3538 <micros+0x60>)
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    34fa:	subs	r2, r6, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
    34fc:	mov.w	r9, #0
    3500:	mov.w	r8, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    3504:	ldr	r6, [r7, #0]
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
    3506:	mov.w	r0, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    350a:	cmp	r9, r3
    350c:	umull	r6, r7, r2, r6
    3510:	it	eq
    3512:	cmpeq	r8, r7
    3514:	mov	r4, r7
    3516:	ite	cs
    3518:	movcs	r4, r7
    351a:	movcc	r4, r0
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
}
    351c:	mla	r0, r0, r1, r4
    3520:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    3524:	bx	lr
    3526:	nop
    3528:	.word	0x2000c84c
    352c:	.word	0x20009d58
    3530:	.word	0x20009d54
    3534:	.word	0xe0001004
    3538:	.word	0x20009d50

0000353c <unused_interrupt_vector>:
	const uint32_t *stack;
	struct arm_fault_info_struct *info;
	const uint32_t *p, *end;

	// disallow any nested interrupts
	__disable_irq();
    353c:	cpsid	i
	// store crash report info
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
    353e:	mrs	r3, IPSR
	info = (struct arm_fault_info_struct *)0x2027FF80;
	info->ipsr = ipsr;
    3542:	ldr	r5, [pc, #292]	; (3668 <unused_interrupt_vector+0x12c>)
    3544:	str	r3, [r5, #4]
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
    3546:	mrs	r3, MSP
	info->cfsr = SCB_CFSR;
    354a:	ldr	r4, [pc, #288]	; (366c <unused_interrupt_vector+0x130>)
	info->bfar = SCB_BFAR;
	info->ret = stack[6];
	info->xpsr = stack[7];
	info->temp = tempmonGetTemp();
	info->time = rtc_get();
	info->len = sizeof(*info) / 4;
    354c:	mov	r6, r5
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
	info = (struct arm_fault_info_struct *)0x2027FF80;
	info->ipsr = ipsr;
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
	info->cfsr = SCB_CFSR;
	info->hfsr = SCB_HFSR;
    354e:	ldr	r0, [pc, #288]	; (3670 <unused_interrupt_vector+0x134>)
	info->mmfar = SCB_MMFAR;
    3550:	ldr	r1, [pc, #288]	; (3674 <unused_interrupt_vector+0x138>)
	info->bfar = SCB_BFAR;
    3552:	ldr	r2, [pc, #292]	; (3678 <unused_interrupt_vector+0x13c>)
	// store crash report info
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
	info = (struct arm_fault_info_struct *)0x2027FF80;
	info->ipsr = ipsr;
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
	info->cfsr = SCB_CFSR;
    3554:	ldr	r4, [r4, #0]
	info->hfsr = SCB_HFSR;
    3556:	ldr	r0, [r0, #0]
	info->mmfar = SCB_MMFAR;
    3558:	ldr	r1, [r1, #0]
	info->bfar = SCB_BFAR;
    355a:	ldr	r2, [r2, #0]
	info = (struct arm_fault_info_struct *)0x2027FF80;
	info->ipsr = ipsr;
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
	info->cfsr = SCB_CFSR;
	info->hfsr = SCB_HFSR;
	info->mmfar = SCB_MMFAR;
    355c:	str	r1, [r5, #16]
	// store crash report info
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
	info = (struct arm_fault_info_struct *)0x2027FF80;
	info->ipsr = ipsr;
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
	info->cfsr = SCB_CFSR;
    355e:	str	r4, [r5, #8]
	info->hfsr = SCB_HFSR;
    3560:	str	r0, [r5, #12]
	info->mmfar = SCB_MMFAR;
	info->bfar = SCB_BFAR;
    3562:	str	r2, [r5, #20]
	info->ret = stack[6];
    3564:	ldr	r2, [r3, #24]
	crc = 0xFFFFFFFF;
	p = (uint32_t *)info;
	end = p + (sizeof(*info) / 4 - 1);
	while (p < end) {
		crc ^= *p++;
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    3566:	ldr	r4, [pc, #276]	; (367c <unused_interrupt_vector+0x140>)
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
	info->cfsr = SCB_CFSR;
	info->hfsr = SCB_HFSR;
	info->mmfar = SCB_MMFAR;
	info->bfar = SCB_BFAR;
	info->ret = stack[6];
    3568:	str	r2, [r5, #24]
	info->xpsr = stack[7];
    356a:	ldr	r3, [r3, #28]
	info->len = sizeof(*info) / 4;
	// add CRC to crash report
	crc = 0xFFFFFFFF;
	p = (uint32_t *)info;
	end = p + (sizeof(*info) / 4 - 1);
	while (p < end) {
    356c:	ldr	r7, [pc, #272]	; (3680 <unused_interrupt_vector+0x144>)
	info->cfsr = SCB_CFSR;
	info->hfsr = SCB_HFSR;
	info->mmfar = SCB_MMFAR;
	info->bfar = SCB_BFAR;
	info->ret = stack[6];
	info->xpsr = stack[7];
    356e:	str	r3, [r5, #28]
	info->temp = tempmonGetTemp();
    3570:	bl	3810 <tempmonGetTemp>
    3574:	vstr	s0, [r5, #32]
	info->time = rtc_get();
    3578:	bl	36fc <rtc_get>
	info->len = sizeof(*info) / 4;
    357c:	movs	r3, #11
	// add CRC to crash report
	crc = 0xFFFFFFFF;
    357e:	mov.w	r2, #4294967295
	info->mmfar = SCB_MMFAR;
	info->bfar = SCB_BFAR;
	info->ret = stack[6];
	info->xpsr = stack[7];
	info->temp = tempmonGetTemp();
	info->time = rtc_get();
    3582:	str	r0, [r5, #36]	; 0x24
	info->len = sizeof(*info) / 4;
    3584:	mov	r1, r3
    3586:	str	r3, [r5, #0]
	// add CRC to crash report
	crc = 0xFFFFFFFF;
	p = (uint32_t *)info;
	end = p + (sizeof(*info) / 4 - 1);
	while (p < end) {
		crc ^= *p++;
    3588:	eors	r2, r1
    358a:	movs	r1, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    358c:	and.w	r3, r2, #1
    3590:	subs	r1, #1
    3592:	mul.w	r3, r4, r3
    3596:	eor.w	r2, r3, r2, lsr #1
    359a:	bne.n	358c <unused_interrupt_vector+0x50>
	info->len = sizeof(*info) / 4;
	// add CRC to crash report
	crc = 0xFFFFFFFF;
	p = (uint32_t *)info;
	end = p + (sizeof(*info) / 4 - 1);
	while (p < end) {
    359c:	cmp	r6, r7
    359e:	beq.n	35a6 <unused_interrupt_vector+0x6a>
    35a0:	ldr.w	r1, [r6, #4]!
    35a4:	b.n	3588 <unused_interrupt_vector+0x4c>
		crc ^= *p++;
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
	}
	info->crc = crc;
    35a6:	ldr	r1, [pc, #192]	; (3668 <unused_interrupt_vector+0x12c>)
    35a8:	str	r2, [r1, #40]	; 0x28
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    35aa:	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    35ae:	ldr	r3, [pc, #212]	; (3684 <unused_interrupt_vector+0x148>)
    35b0:	ldr	r2, [pc, #212]	; (3688 <unused_interrupt_vector+0x14c>)
    35b2:	str	r1, [r3, #0]
    35b4:	str	r2, [r3, #0]
		location += 32;
	} while (location < end_addr);
	asm("dsb");
    35b6:	dsb	sy
	asm("isb");
    35ba:	isb	sy
	//IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
	//IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
	//GPIO7_GDIR |= (1 << 3);

	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    35be:	ldr	r2, [pc, #204]	; (368c <unused_interrupt_vector+0x150>)
	PIT_MCR = PIT_MCR_MDIS;
    35c0:	movs	r5, #2
    35c2:	ldr	r4, [pc, #204]	; (3690 <unused_interrupt_vector+0x154>)
	//IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
	//IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
	//GPIO7_GDIR |= (1 << 3);

	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    35c4:	ldr	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    35c6:	ldr	r1, [pc, #204]	; (3694 <unused_interrupt_vector+0x158>)
	//IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
	//IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
	//GPIO7_GDIR |= (1 << 3);

	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    35c8:	orr.w	r3, r3, #12288	; 0x3000
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    35cc:	ldr	r0, [pc, #200]	; (3698 <unused_interrupt_vector+0x15c>)
	//IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
	//IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
	//GPIO7_GDIR |= (1 << 3);

	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    35ce:	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    35d0:	str	r5, [r4, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    35d2:	ldr	r3, [r2, #28]
    35d4:	bic.w	r3, r3, #127	; 0x7f
    35d8:	orr.w	r3, r3, #64	; 0x40
    35dc:	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    35de:	ldr	r3, [r1, #0]
    35e0:	cmp	r3, r0
    35e2:	bhi.n	3662 <unused_interrupt_vector+0x126>
	PIT_MCR = 0;
    35e4:	ldr	r2, [pc, #168]	; (3690 <unused_interrupt_vector+0x154>)
    35e6:	movs	r1, #0
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    35e8:	movs	r0, #1
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    35ea:	ldr	r6, [pc, #176]	; (369c <unused_interrupt_vector+0x160>)
	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
	PIT_MCR = 0;
    35ec:	str	r1, [r2, #0]
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
	PIT_TCTRL0 = PIT_TCTRL_TEN;
	// disable all NVIC interrupts, as usb_isr() might use __enable_irq()
	NVIC_ICER0 = 0xFFFFFFFF;
    35ee:	mov.w	r3, #4294967295
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
    35f2:	str.w	r1, [r2, #264]	; 0x108
	NVIC_ICER4 = 0xFFFFFFFF;

	// keep USB running, so any unsent Serial.print() actually arrives in
	// the Arduino Serial Monitor, and we remain responsive to Upload
	// without requiring manual press of Teensy's pushbutton
	count = 0;
    35f6:	mov	r4, r1
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    35f8:	str.w	r6, [r2, #256]	; 0x100
	// keep USB running, so any unsent Serial.print() actually arrives in
	// the Arduino Serial Monitor, and we remain responsive to Upload
	// without requiring manual press of Teensy's pushbutton
	count = 0;
	while (1) {
		if (PIT_TFLG0) {
    35fc:	mov	r5, r2
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    35fe:	str.w	r0, [r2, #264]	; 0x108
	// without requiring manual press of Teensy's pushbutton
	count = 0;
	while (1) {
		if (PIT_TFLG0) {
			//GPIO7_DR_TOGGLE = (1 << 3); // blink LED
			PIT_TFLG0 = 1;
    3602:	mov	r7, r0
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
	PIT_TCTRL0 = PIT_TCTRL_TEN;
	// disable all NVIC interrupts, as usb_isr() might use __enable_irq()
	NVIC_ICER0 = 0xFFFFFFFF;
    3604:	ldr.w	lr, [pc, #192]	; 36c8 <unused_interrupt_vector+0x18c>
	NVIC_ICER1 = 0xFFFFFFFF;
    3608:	ldr	r6, [pc, #148]	; (36a0 <unused_interrupt_vector+0x164>)
	NVIC_ICER2 = 0xFFFFFFFF;
    360a:	ldr	r0, [pc, #152]	; (36a4 <unused_interrupt_vector+0x168>)
	NVIC_ICER3 = 0xFFFFFFFF;
    360c:	ldr	r1, [pc, #152]	; (36a8 <unused_interrupt_vector+0x16c>)
	NVIC_ICER4 = 0xFFFFFFFF;
    360e:	ldr	r2, [pc, #156]	; (36ac <unused_interrupt_vector+0x170>)
	PIT_MCR = 0;
	PIT_TCTRL0 = 0;
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
	PIT_TCTRL0 = PIT_TCTRL_TEN;
	// disable all NVIC interrupts, as usb_isr() might use __enable_irq()
	NVIC_ICER0 = 0xFFFFFFFF;
    3610:	str.w	r3, [lr]
	NVIC_ICER1 = 0xFFFFFFFF;
    3614:	str	r3, [r6, #0]
	NVIC_ICER2 = 0xFFFFFFFF;
    3616:	str	r3, [r0, #0]
	NVIC_ICER3 = 0xFFFFFFFF;
    3618:	str	r3, [r1, #0]
	NVIC_ICER4 = 0xFFFFFFFF;
    361a:	str	r3, [r2, #0]
    361c:	b.n	3622 <unused_interrupt_vector+0xe6>
		if (PIT_TFLG0) {
			//GPIO7_DR_TOGGLE = (1 << 3); // blink LED
			PIT_TFLG0 = 1;
			if (++count >= 80) break;  // reboot after 8 seconds
		}
		usb_isr();
    361e:	bl	2c6c <usb_isr>
	// keep USB running, so any unsent Serial.print() actually arrives in
	// the Arduino Serial Monitor, and we remain responsive to Upload
	// without requiring manual press of Teensy's pushbutton
	count = 0;
	while (1) {
		if (PIT_TFLG0) {
    3622:	ldr.w	r2, [r5, #268]	; 0x10c
    3626:	ldr	r3, [pc, #104]	; (3690 <unused_interrupt_vector+0x154>)
    3628:	cmp	r2, #0
    362a:	beq.n	361e <unused_interrupt_vector+0xe2>
			//GPIO7_DR_TOGGLE = (1 << 3); // blink LED
			PIT_TFLG0 = 1;
			if (++count >= 80) break;  // reboot after 8 seconds
    362c:	adds	r4, #1
	// without requiring manual press of Teensy's pushbutton
	count = 0;
	while (1) {
		if (PIT_TFLG0) {
			//GPIO7_DR_TOGGLE = (1 << 3); // blink LED
			PIT_TFLG0 = 1;
    362e:	str.w	r7, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    3632:	cmp	r4, #79	; 0x4f
    3634:	bls.n	361e <unused_interrupt_vector+0xe2>
		//   Complete writes to SD card
		//   Flush/sync LittleFS
	}
	// turn off USB
	USB1_USBCMD = USB_USBCMD_RST;
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    3636:	ldr	r2, [pc, #120]	; (36b0 <unused_interrupt_vector+0x174>)
		//   Transmit Serial1 - Serial8 data
		//   Complete writes to SD card
		//   Flush/sync LittleFS
	}
	// turn off USB
	USB1_USBCMD = USB_USBCMD_RST;
    3638:	movs	r4, #2
    363a:	ldr	r0, [pc, #120]	; (36b4 <unused_interrupt_vector+0x178>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    363c:	mov.w	r1, #2147483648	; 0x80000000
		//   Transmit Serial1 - Serial8 data
		//   Complete writes to SD card
		//   Flush/sync LittleFS
	}
	// turn off USB
	USB1_USBCMD = USB_USBCMD_RST;
    3640:	str.w	r4, [r0, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    3644:	str	r1, [r2, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    3646:	ldr.w	r2, [r3, #268]	; 0x10c
    364a:	cbnz	r2, 365a <unused_interrupt_vector+0x11e>
	// reboot
	SRC_GPR5 = 0x0BAD00F1;
    364c:	ldr	r1, [pc, #104]	; (36b8 <unused_interrupt_vector+0x17c>)
    364e:	ldr	r2, [pc, #108]	; (36bc <unused_interrupt_vector+0x180>)
    3650:	str	r2, [r1, #48]	; 0x30
		//   Flush/sync LittleFS
	}
	// turn off USB
	USB1_USBCMD = USB_USBCMD_RST;
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    3652:	ldr.w	r0, [r3, #268]	; 0x10c
    3656:	cmp	r0, #0
    3658:	beq.n	3650 <unused_interrupt_vector+0x114>
	// reboot
	SRC_GPR5 = 0x0BAD00F1;
	SCB_AIRCR = 0x05FA0004;
    365a:	ldr	r3, [pc, #100]	; (36c0 <unused_interrupt_vector+0x184>)
    365c:	ldr	r2, [pc, #100]	; (36c4 <unused_interrupt_vector+0x188>)
    365e:	str	r2, [r3, #0]
    3660:	b.n	3660 <unused_interrupt_vector+0x124>

	// reinitialize PIT timer and CPU clock
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
	PIT_MCR = PIT_MCR_MDIS;
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    3662:	bl	3f38 <set_arm_clock>
    3666:	b.n	35e4 <unused_interrupt_vector+0xa8>
    3668:	.word	0x2027ff80
    366c:	.word	0xe000ed28
    3670:	.word	0xe000ed2c
    3674:	.word	0xe000ed34
    3678:	.word	0xe000ed38
    367c:	.word	0xedb88320
    3680:	.word	0x2027ffa4
    3684:	.word	0xe000ef70
    3688:	.word	0x2027ffa0
    368c:	.word	0x400fc000
    3690:	.word	0x40084000
    3694:	.word	0x20001214
    3698:	.word	0x0bcd3d80
    369c:	.word	0x00249f00
    36a0:	.word	0xe000e184
    36a4:	.word	0xe000e188
    36a8:	.word	0xe000e18c
    36ac:	.word	0xe000e190
    36b0:	.word	0x400d9000
    36b4:	.word	0x402e0000
    36b8:	.word	0x400f8000
    36bc:	.word	0x0bad00f1
    36c0:	.word	0xe000ed0c
    36c4:	.word	0x05fa0004
    36c8:	.word	0xe000e180

000036cc <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
    36cc:	ldr	r2, [pc, #36]	; (36f4 <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
    36ce:	push	{r3, lr}
        char *prev = __brkval;
    36d0:	ldr	r3, [r2, #0]
        if (incr != 0) {
    36d2:	cbz	r0, 36de <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
    36d4:	add	r0, r3
    36d6:	ldr	r1, [pc, #32]	; (36f8 <_sbrk+0x2c>)
    36d8:	cmp	r0, r1
    36da:	bhi.n	36e2 <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
    36dc:	str	r0, [r2, #0]
        }
        return prev;
}
    36de:	mov	r0, r3
    36e0:	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    36e2:	bl	4e34 <__errno>
    36e6:	movs	r2, #12
                        return (void *)-1;
    36e8:	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    36ec:	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    36ee:	mov	r0, r3
    36f0:	pop	{r3, pc}
    36f2:	nop
    36f4:	.word	0x2000122c
    36f8:	.word	0x20280000

000036fc <rtc_get>:
#include "debug/printf.h"


unsigned long rtc_get(void)
{
	uint32_t hi1 = SNVS_HPRTCMR;
    36fc:	ldr	r3, [pc, #40]	; (3728 <rtc_get+0x2c>)
#include "imxrt.h"
#include "debug/printf.h"


unsigned long rtc_get(void)
{
    36fe:	push	{r4, r5}
	uint32_t hi1 = SNVS_HPRTCMR;
    3700:	ldr	r0, [r3, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;
    3702:	mov	r4, r3


unsigned long rtc_get(void)
{
	uint32_t hi1 = SNVS_HPRTCMR;
	uint32_t lo1 = SNVS_HPRTCLR;
    3704:	ldr	r1, [r3, #40]	; 0x28
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;
    3706:	ldr	r2, [r4, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    3708:	ldr	r3, [r4, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    370a:	cmp	r1, r3
    370c:	it	eq
    370e:	cmpeq	r0, r2
unsigned long rtc_get(void)
{
	uint32_t hi1 = SNVS_HPRTCMR;
	uint32_t lo1 = SNVS_HPRTCLR;
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;
    3710:	mov	r0, r2
		uint32_t lo2 = SNVS_HPRTCLR;
    3712:	mov	r1, r3
		if (lo1 == lo2 && hi1 == hi2) {
    3714:	ite	eq
    3716:	moveq	r5, #1
    3718:	movne	r5, #0
    371a:	cmp	r5, #0
    371c:	beq.n	3706 <rtc_get+0xa>
			return (hi2 << 17) | (lo2 >> 15);
    371e:	lsrs	r1, r3, #15
		}
		hi1 = hi2;
		lo1 = lo2;
	}
}
    3720:	pop	{r4, r5}
    3722:	orr.w	r0, r1, r2, lsl #17
    3726:	bx	lr
    3728:	.word	0x400d4000

0000372c <sm_align_pool>:
	if (spool->pool_size % HEADER_SZ) return 0;
	return 1;
}

int sm_align_pool(struct smalloc_pool *spool)
{
    372c:	push	{r3, lr}

struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
    372e:	ldr	r3, [r0, #0]
{
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
    3730:	ldr	r2, [r0, #4]

struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
    3732:	cbz	r3, 3764 <sm_align_pool+0x38>
    3734:	cbz	r2, 3756 <sm_align_pool+0x2a>
	if (spool->pool_size % HEADER_SZ) return 0;
    3736:	ldr	r3, [pc, #64]	; (3778 <sm_align_pool+0x4c>)
    3738:	umull	r1, r3, r3, r2
    373c:	lsrs	r3, r3, #3
    373e:	add.w	r3, r3, r3, lsl #1
    3742:	subs.w	r3, r2, r3, lsl #2
    3746:	beq.n	3750 <sm_align_pool+0x24>
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
	if (x) spool->pool_size -= x;
    3748:	subs	r2, r2, r3
    374a:	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
    374c:	cmp	r2, #240	; 0xf0
    374e:	bls.n	3756 <sm_align_pool+0x2a>

int sm_align_pool(struct smalloc_pool *spool)
{
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;
    3750:	movs	r3, #1
		errno = ENOSPC;
		return 0;
	}

	return 1;
}
    3752:	mov	r0, r3
    3754:	pop	{r3, pc}
	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
	if (x) spool->pool_size -= x;
	if (spool->pool_size <= MIN_POOL_SZ) {
		errno = ENOSPC;
    3756:	bl	4e34 <__errno>
    375a:	movs	r2, #28
    375c:	movs	r3, #0
    375e:	str	r2, [r0, #0]
		return 0;
	}

	return 1;
}
    3760:	mov	r0, r3
    3762:	pop	{r3, pc}
{
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
    3764:	ldr	r3, [pc, #16]	; (3778 <sm_align_pool+0x4c>)
    3766:	umull	r1, r3, r3, r2
    376a:	lsrs	r3, r3, #3
    376c:	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
    3770:	subs.w	r3, r2, r3, lsl #2
    3774:	bne.n	3748 <sm_align_pool+0x1c>
    3776:	b.n	374c <sm_align_pool+0x20>
    3778:	.word	0xaaaaaaab

0000377c <sm_set_pool>:

	return 1;
}

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
    377c:	push	{r4, r5, r6, lr}
	if (!spool) {
    377e:	mov	r4, r0
    3780:	cmp	r0, #0
    3782:	beq.n	37fa <sm_set_pool+0x7e>
		errno = EINVAL;
		return 0;
	}

	if (!new_pool || !new_pool_size) {
    3784:	cbz	r1, 378e <sm_set_pool+0x12>
    3786:	clz	r5, r2
    378a:	lsrs	r5, r5, #5
    378c:	cbz	r5, 37ce <sm_set_pool+0x52>

struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
    378e:	ldr	r0, [r4, #0]
    3790:	cbz	r0, 3796 <sm_set_pool+0x1a>
    3792:	ldr	r2, [r4, #4]
    3794:	cbnz	r2, 37a4 <sm_set_pool+0x28>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
			memset(spool, 0, sizeof(struct smalloc_pool));
			return 1;
		}

		errno = EINVAL;
    3796:	bl	4e34 <__errno>
    379a:	movs	r3, #22
		return 0;
    379c:	movs	r2, #0
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
			memset(spool, 0, sizeof(struct smalloc_pool));
			return 1;
		}

		errno = EINVAL;
    379e:	str	r3, [r0, #0]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    37a0:	mov	r0, r2
    37a2:	pop	{r4, r5, r6, pc}
struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
	if (spool->pool_size % HEADER_SZ) return 0;
    37a4:	ldr	r1, [pc, #96]	; (3808 <sm_set_pool+0x8c>)
    37a6:	umull	r3, r1, r1, r2
    37aa:	lsrs	r1, r1, #3
    37ac:	add.w	r1, r1, r1, lsl #1
    37b0:	subs.w	r1, r2, r1, lsl #2
    37b4:	bne.n	3796 <sm_set_pool+0x1a>
		return 0;
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
    37b6:	ldr	r3, [r4, #8]
    37b8:	cbz	r3, 37be <sm_set_pool+0x42>
    37ba:	bl	54f4 <memset>
			memset(spool, 0, sizeof(struct smalloc_pool));
    37be:	movs	r3, #0
			return 1;
    37c0:	movs	r2, #1
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
			memset(spool, 0, sizeof(struct smalloc_pool));
    37c2:	str	r3, [r4, #0]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    37c4:	mov	r0, r2
	}

	if (!new_pool || !new_pool_size) {
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
			memset(spool, 0, sizeof(struct smalloc_pool));
    37c6:	str	r3, [r4, #4]
    37c8:	str	r3, [r4, #8]
    37ca:	str	r3, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
    37cc:	pop	{r4, r5, r6, pc}
    37ce:	mov	r6, r3
		return 0;
	}

	spool->pool = new_pool;
	spool->pool_size = new_pool_size;
	spool->oomfn = oom_handler;
    37d0:	ldr	r3, [sp, #16]
		errno = EINVAL;
		return 0;
	}

	spool->pool = new_pool;
	spool->pool_size = new_pool_size;
    37d2:	stmia.w	r0, {r1, r2}
	spool->oomfn = oom_handler;
    37d6:	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
    37d8:	bl	372c <sm_align_pool>
    37dc:	mov	r2, r0
    37de:	cmp	r0, #0
    37e0:	beq.n	37a0 <sm_set_pool+0x24>

	if (do_zero) {
    37e2:	cbnz	r6, 37ea <sm_set_pool+0x6e>
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
    37e4:	movs	r2, #1
}
    37e6:	mov	r0, r2
    37e8:	pop	{r4, r5, r6, pc}
	spool->oomfn = oom_handler;
	if (!sm_align_pool(spool)) return 0;

	if (do_zero) {
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
    37ea:	ldmia.w	r4, {r0, r2}
	spool->pool_size = new_pool_size;
	spool->oomfn = oom_handler;
	if (!sm_align_pool(spool)) return 0;

	if (do_zero) {
		spool->do_zero = do_zero;
    37ee:	str	r6, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
    37f0:	mov	r1, r5
    37f2:	bl	54f4 <memset>
	}

	return 1;
    37f6:	movs	r2, #1
    37f8:	b.n	37a0 <sm_set_pool+0x24>
}

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
	if (!spool) {
		errno = EINVAL;
    37fa:	bl	4e34 <__errno>
    37fe:	movs	r3, #22
		return 0;
    3800:	mov	r2, r4
}

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
	if (!spool) {
		errno = EINVAL;
    3802:	str	r3, [r0, #0]
		return 0;
    3804:	b.n	37a0 <sm_set_pool+0x24>
    3806:	nop
    3808:	.word	0xaaaaaaab

0000380c <Panic_Temp_isr>:
static float s_hot_ROOM, s_roomC_hotC;

extern void unused_interrupt_vector(void); // startup.c

void Panic_Temp_isr(void) {
  unused_interrupt_vector();
    380c:	b.w	353c <unused_interrupt_vector>

00003810 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    3810:	ldr	r1, [pc, #72]	; (385c <tempmonGetTemp+0x4c>)
    3812:	ldr	r3, [r1, #0]
    3814:	ldr	r2, [pc, #68]	; (385c <tempmonGetTemp+0x4c>)
    3816:	lsls	r3, r3, #29
    3818:	bpl.n	3812 <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    381a:	ldr	r3, [r2, #0]
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    381c:	ldr	r1, [pc, #64]	; (3860 <tempmonGetTemp+0x50>)

    return tmeas;
    381e:	ubfx	r3, r3, #8, #12
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    3822:	ldr	r2, [pc, #64]	; (3864 <tempmonGetTemp+0x54>)

    return tmeas;
    3824:	vmov	s15, r3
    3828:	ldr	r3, [r1, #0]
    382a:	vldr	s12, [r2]
    382e:	vcvt.f32.s32	s14, s15
    3832:	vmov	s15, r3
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    3836:	ldr	r2, [pc, #48]	; (3868 <tempmonGetTemp+0x58>)

    return tmeas;
    3838:	vcvt.f32.u32	s15, s15
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    383c:	ldr	r3, [pc, #44]	; (386c <tempmonGetTemp+0x5c>)

    return tmeas;
    383e:	vldr	s13, [r2]
    3842:	vsub.f32	s15, s14, s15
    3846:	vldr	s14, [r3]
    384a:	vcvt.f32.u32	s14, s14
    384e:	vmul.f32	s15, s15, s12
    3852:	vdiv.f32	s0, s15, s13
}
    3856:	vsub.f32	s0, s14, s0
    385a:	bx	lr
    385c:	.word	0x400d8180
    3860:	.word	0x20009d40
    3864:	.word	0x20009d48
    3868:	.word	0x20009d4c
    386c:	.word	0x20009d44

00003870 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    3870:	cmp	r0, #54	; 0x36
    3872:	bhi.n	38ae <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
    3874:	lsls	r0, r0, #4
    3876:	ldr	r2, [pc, #104]	; (38e0 <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    3878:	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    387a:	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    387e:	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
    3880:	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    3882:	beq.n	38b0 <pinMode+0x40>
    3884:	cmp	r1, #4
    3886:	beq.n	38b0 <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    3888:	ldr	r4, [r3, #12]
    388a:	ldr	r2, [r0, #4]
    388c:	bic.w	r2, r2, r4
    3890:	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    3892:	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
    3894:	cbz	r1, 38d2 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
    3896:	cmp	r1, #2
    3898:	beq.n	38d8 <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    389a:	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    389c:	ldr	r3, [r3, #4]
}
    389e:	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    38a2:	ite	eq
    38a4:	ldreq	r1, [pc, #60]	; (38e4 <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    38a6:	ldrne	r1, [pc, #64]	; (38e8 <pinMode+0x78>)
    38a8:	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    38aa:	movs	r2, #21
    38ac:	str	r2, [r3, #0]
}
    38ae:	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    38b0:	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
    38b2:	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    38b4:	ldr	r4, [r0, #4]
    38b6:	orr.w	r2, r2, r4
    38ba:	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    38bc:	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
    38be:	beq.n	38d2 <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    38c0:	movw	r1, #2104	; 0x838
    38c4:	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    38c6:	ldr	r3, [r3, #4]
    38c8:	movs	r2, #21
}
    38ca:	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    38ce:	str	r2, [r3, #0]
}
    38d0:	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    38d2:	movs	r1, #56	; 0x38
    38d4:	str	r1, [r2, #0]
    38d6:	b.n	38c6 <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    38d8:	ldr	r1, [pc, #16]	; (38ec <pinMode+0x7c>)
    38da:	str	r1, [r2, #0]
    38dc:	b.n	38c6 <pinMode+0x56>
    38de:	nop
    38e0:	.word	0x200006cc
    38e4:	.word	0x00013038
    38e8:	.word	0x00010038
    38ec:	.word	0x0001f038

000038f0 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    38f0:	ldr	r0, [pc, #656]	; (3b84 <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    38f2:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    38f6:	ldr	r3, [pc, #656]	; (3b88 <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    38f8:	ldr	r2, [r0, #120]	; 0x78
    38fa:	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    38fe:	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    3900:	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    3902:	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    3904:	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3908:	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    390c:	ldr	r4, [pc, #636]	; (3b8c <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    390e:	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3912:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    3914:	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    3918:	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    391a:	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    391c:	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3920:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    3924:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    3928:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    392c:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    3930:	ldrh.w	r0, [r3, #392]	; 0x188
    3934:	uxth	r0, r0
    3936:	orr.w	r0, r0, #240	; 0xf0
    393a:	strh.w	r0, [r3, #392]	; 0x188
    393e:	add.w	r0, r1, r1, lsl #1
    3942:	ldr	r3, [pc, #580]	; (3b88 <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    3944:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    3946:	movs	r5, #0
    3948:	lsls	r0, r0, #5
    394a:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    394c:	cmp	r1, #4
    394e:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3950:	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    3954:	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    3956:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    3958:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    395a:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    395c:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    395e:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    3960:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    3962:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    3964:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    3966:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3968:	bne.n	393e <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    396a:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    396e:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3972:	ldr	r3, [pc, #540]	; (3b90 <pwm_init+0x2a0>)
    3974:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3978:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    397a:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    397c:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    3980:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3982:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    3986:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    398a:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    398e:	ldrh.w	r0, [r4, #392]	; 0x188
    3992:	uxth	r0, r0
    3994:	orr.w	r0, r0, #3840	; 0xf00
    3998:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    399c:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    39a0:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    39a4:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    39a8:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    39ac:	ldrh.w	r0, [r3, #392]	; 0x188
    39b0:	uxth	r0, r0
    39b2:	orr.w	r0, r0, #240	; 0xf0
    39b6:	strh.w	r0, [r3, #392]	; 0x188
    39ba:	add.w	r0, r1, r1, lsl #1
    39be:	ldr	r3, [pc, #464]	; (3b90 <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    39c0:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    39c2:	movs	r5, #0
    39c4:	lsls	r0, r0, #5
    39c6:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    39c8:	cmp	r1, #4
    39ca:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    39cc:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    39ce:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    39d2:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    39d4:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    39d6:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    39d8:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    39da:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    39dc:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    39de:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    39e0:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    39e2:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    39e4:	bne.n	39ba <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    39e6:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    39ea:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    39ee:	ldr	r3, [pc, #420]	; (3b94 <pwm_init+0x2a4>)
    39f0:	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    39f4:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    39f6:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    39f8:	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    39fc:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    39fe:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    3a02:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3a06:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    3a0a:	ldrh.w	r0, [r4, #392]	; 0x188
    3a0e:	uxth	r0, r0
    3a10:	orr.w	r0, r0, #3840	; 0xf00
    3a14:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3a18:	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    3a1c:	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    3a20:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    3a24:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    3a28:	ldrh.w	r0, [r3, #392]	; 0x188
    3a2c:	uxth	r0, r0
    3a2e:	orr.w	r0, r0, #240	; 0xf0
    3a32:	strh.w	r0, [r3, #392]	; 0x188
    3a36:	add.w	r0, r1, r1, lsl #1
    3a3a:	ldr	r3, [pc, #344]	; (3b94 <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    3a3c:	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    3a3e:	movs	r5, #0
    3a40:	lsls	r0, r0, #5
    3a42:	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3a44:	cmp	r1, #4
    3a46:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3a48:	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    3a4a:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    3a4e:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    3a50:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    3a52:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    3a54:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    3a56:	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    3a58:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    3a5a:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    3a5c:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    3a5e:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3a60:	bne.n	3a36 <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3a62:	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    3a66:	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3a6a:	ldr	r3, [pc, #300]	; (3b98 <pwm_init+0x2a8>)
    3a6c:	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3a70:	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3a72:	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3a74:	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    3a78:	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3a7a:	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    3a7e:	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3a82:	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    3a86:	ldrh.w	r0, [r4, #392]	; 0x188
    3a8a:	uxth	r0, r0
    3a8c:	orr.w	r0, r0, #3840	; 0xf00
    3a90:	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    3a94:	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    3a98:	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    3a9c:	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    3aa0:	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    3aa4:	ldrh.w	r0, [r3, #392]	; 0x188
    3aa8:	uxth	r0, r0
    3aaa:	orr.w	r0, r0, #240	; 0xf0
    3aae:	strh.w	r0, [r3, #392]	; 0x188
    3ab2:	add.w	r0, r1, r1, lsl #1
    3ab6:	ldr	r3, [pc, #224]	; (3b98 <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    3ab8:	adds	r1, #1
    3aba:	lsls	r0, r0, #5
    3abc:	mov	r4, r3
    3abe:	cmp	r1, #4
    3ac0:	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    3ac2:	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    3ac4:	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    3ac8:	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    3aca:	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    3acc:	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    3ace:	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    3ad0:	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    3ad2:	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    3ad4:	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    3ad6:	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    3ad8:	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    3ada:	bne.n	3ab2 <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3adc:	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    3ae0:	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3ae2:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    3ae4:	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3ae8:	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    3aea:	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    3aee:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    3af0:	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    3af4:	orrs	r3, r7
    3af6:	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    3afa:	ldrh.w	r3, [r4, #392]	; 0x188
    3afe:	uxth	r3, r3
    3b00:	orr.w	r3, r3, #3840	; 0xf00
    3b04:	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    3b08:	lsls	r0, r2, #5
    3b0a:	ldr	r3, [pc, #144]	; (3b9c <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3b0c:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    3b0e:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3b10:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    3b12:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    3b14:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    3b16:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    3b18:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    3b1a:	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    3b1e:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    3b20:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    3b22:	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3b24:	bne.n	3b08 <pwm_init+0x218>
    3b26:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    3b28:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    3b2a:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    3b2e:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    3b32:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    3b34:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    3b38:	lsls	r0, r2, #5
    3b3a:	ldr	r3, [pc, #100]	; (3ba0 <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3b3c:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    3b3e:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3b40:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    3b42:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    3b44:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    3b46:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    3b48:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    3b4a:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    3b4c:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    3b4e:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    3b50:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3b52:	bne.n	3b38 <pwm_init+0x248>
    3b54:	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    3b56:	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    3b58:	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    3b5c:	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    3b60:	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    3b62:	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    3b66:	lsls	r0, r2, #5
    3b68:	ldr	r3, [pc, #56]	; (3ba4 <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3b6a:	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    3b6c:	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3b6e:	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    3b70:	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    3b72:	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    3b74:	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    3b76:	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    3b78:	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    3b7a:	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    3b7c:	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    3b7e:	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    3b80:	bne.n	3b66 <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    3b82:	pop	{r4, r5, r6, r7, pc}
    3b84:	.word	0x400fc000
    3b88:	.word	0x403dc000
    3b8c:	.word	0xfc030000
    3b90:	.word	0x403e0000
    3b94:	.word	0x403e4000
    3b98:	.word	0x403e8000
    3b9c:	.word	0x401dc000
    3ba0:	.word	0x401e0000
    3ba4:	.word	0x401e4000

00003ba8 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    3ba8:	ldr	r2, [pc, #72]	; (3bf4 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    3baa:	ldr	r3, [pc, #76]	; (3bf8 <usb_init_serialnumber+0x50>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    3bac:	ldr.w	r0, [r2, #544]	; 0x220
    3bb0:	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    3bb4:	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    3bb6:	push	{r4, lr}
    3bb8:	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    3bba:	bhi.n	3bc2 <usb_init_serialnumber+0x1a>
    3bbc:	add.w	r0, r0, r0, lsl #2
    3bc0:	lsls	r0, r0, #1
    3bc2:	ldr	r4, [pc, #56]	; (3bfc <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    3bc4:	add	r1, sp, #4
    3bc6:	movs	r2, #10
    3bc8:	bl	41fc <ultoa>
    3bcc:	add	r1, sp, #4
	for (i=0; i<10; i++) {
    3bce:	movs	r3, #0
    3bd0:	mov	r0, r4
		char c = buf[i];
    3bd2:	ldrb.w	r2, [r1], #1
    3bd6:	adds	r3, #1
		if (!c) break;
    3bd8:	cbz	r2, 3bea <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    3bda:	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    3bdc:	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    3be0:	bne.n	3bd2 <usb_init_serialnumber+0x2a>
    3be2:	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    3be4:	strb	r3, [r4, #0]
}
    3be6:	add	sp, #16
    3be8:	pop	{r4, pc}
    3bea:	lsls	r3, r3, #1
    3bec:	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    3bee:	strb	r3, [r4, #0]
}
    3bf0:	add	sp, #16
    3bf2:	pop	{r4, pc}
    3bf4:	.word	0x401f4400
    3bf8:	.word	0x0098967f
    3bfc:	.word	0x200017c4

00003c00 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    3c00:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    3c04:	ldr	r6, [pc, #200]	; (3cd0 <yield+0xd0>)
    3c06:	ldrb	r3, [r6, #0]
    3c08:	cbz	r3, 3c30 <yield+0x30>
	if (running) return; // TODO: does this need to be atomic?
    3c0a:	ldr	r7, [pc, #200]	; (3cd4 <yield+0xd4>)
    3c0c:	ldrb	r2, [r7, #0]
    3c0e:	cbnz	r2, 3c30 <yield+0x30>
	running = 1;
    3c10:	movs	r2, #1


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    3c12:	lsls	r1, r3, #31
void yield(void)
{
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    3c14:	strb	r2, [r7, #0]


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    3c16:	bmi.n	3c88 <yield+0x88>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    3c18:	lsls	r2, r3, #30
    3c1a:	bmi.n	3c50 <yield+0x50>

	running = 0;
    3c1c:	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    3c1e:	lsls	r3, r3, #29
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();

	running = 0;
    3c20:	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    3c22:	bpl.n	3c30 <yield+0x30>
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    3c24:	ldr	r3, [pc, #176]	; (3cd8 <yield+0xd8>)
    3c26:	ldr	r2, [r3, #0]
    3c28:	cbz	r2, 3c30 <yield+0x30>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    3c2a:	mrs	r2, IPSR
		if (ipsr != 0) return;
    3c2e:	cbz	r2, 3c34 <yield+0x34>
    3c30:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3c34:	mrs	r0, PRIMASK
		__disable_irq();
    3c38:	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    3c3a:	ldr	r2, [r3, #0]
		if (first == nullptr) {
    3c3c:	cbz	r2, 3c46 <yield+0x46>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    3c3e:	ldr	r4, [pc, #156]	; (3cdc <yield+0xdc>)
    3c40:	ldrb	r1, [r4, #0]
    3c42:	cmp	r1, #0
    3c44:	beq.n	3ca6 <yield+0xa6>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3c46:	cmp	r0, #0
    3c48:	bne.n	3c30 <yield+0x30>
    3c4a:	cpsie	i
    3c4c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    3c50:	ldr.w	r8, [pc, #148]	; 3ce8 <yield+0xe8>
    3c54:	ldrb.w	r2, [r8]
    3c58:	cmp	r2, #0
    3c5a:	beq.n	3c1c <yield+0x1c>
    3c5c:	movs	r4, #0
    3c5e:	ldr.w	r9, [pc, #140]	; 3cec <yield+0xec>
    3c62:	b.n	3c70 <yield+0x70>
    3c64:	adds	r4, #1
    3c66:	ldrb.w	r3, [r8]
    3c6a:	uxtb	r4, r4
    3c6c:	cmp	r3, r4
    3c6e:	bls.n	3c98 <yield+0x98>
			s_serials_with_serial_events[i]->doYieldCode();
    3c70:	ldr.w	r5, [r9, r4, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    3c74:	ldr	r3, [r5, #0]
    3c76:	mov	r0, r5
    3c78:	ldr	r3, [r3, #16]
    3c7a:	blx	r3
    3c7c:	cmp	r0, #0
    3c7e:	beq.n	3c64 <yield+0x64>
    3c80:	ldr	r3, [r5, #20]
    3c82:	ldr	r3, [r3, #8]
    3c84:	blx	r3
    3c86:	b.n	3c64 <yield+0x64>
				if (elapsed > 750) break;
			}
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    3c88:	bl	292c <usb_serial_available>
	running = 1;


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    3c8c:	cbnz	r0, 3cc4 <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    3c8e:	ldr	r3, [pc, #80]	; (3ce0 <yield+0xe0>)
    3c90:	ldrb	r3, [r3, #0]
    3c92:	cbnz	r3, 3c9c <yield+0x9c>
    3c94:	ldrb	r3, [r6, #0]
    3c96:	b.n	3c18 <yield+0x18>
    3c98:	ldrb	r3, [r6, #0]
    3c9a:	b.n	3c1c <yield+0x1c>
    3c9c:	ldrb	r3, [r6, #0]
    3c9e:	and.w	r3, r3, #254	; 0xfe
    3ca2:	strb	r3, [r6, #0]
    3ca4:	b.n	3c18 <yield+0x18>
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    3ca6:	movs	r6, #1
		firstYield = first->_next;
    3ca8:	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    3caa:	strb	r6, [r4, #0]
		firstYield = first->_next;
    3cac:	str	r5, [r3, #0]
		if (firstYield) {
    3cae:	cbz	r5, 3cca <yield+0xca>
			firstYield->_prev = nullptr;
    3cb0:	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3cb2:	cbnz	r0, 3cb6 <yield+0xb6>
    3cb4:	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    3cb6:	movs	r5, #0
		(*(first->_function))(*first);
    3cb8:	ldr	r3, [r2, #8]
    3cba:	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    3cbc:	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    3cbe:	blx	r3
		runningFromYield = false;
    3cc0:	strb	r5, [r4, #0]
    3cc2:	b.n	3c30 <yield+0x30>
	running = 1;


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    3cc4:	bl	3f34 <serialEvent()>
    3cc8:	b.n	3c8e <yield+0x8e>
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    3cca:	ldr	r3, [pc, #24]	; (3ce4 <yield+0xe4>)
    3ccc:	str	r5, [r3, #0]
    3cce:	b.n	3cb2 <yield+0xb2>
    3cd0:	.word	0x200017e4
    3cd4:	.word	0x2000c7e9
    3cd8:	.word	0x20001c90
    3cdc:	.word	0x2000c7e7
    3ce0:	.word	0x60001f46
    3ce4:	.word	0x20001c9c
    3ce8:	.word	0x2000c7e8
    3cec:	.word	0x20001ca0

00003cf0 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    3cf0:	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3cf2:	mrs	r1, PRIMASK
		__disable_irq();
    3cf6:	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    3cf8:	ldr	r4, [pc, #48]	; (3d2c <EventResponder::runFromInterrupt()+0x3c>)
    3cfa:	ldr	r3, [r4, #0]
		if (first) {
    3cfc:	cbz	r3, 3d22 <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    3cfe:	ldr	r6, [pc, #48]	; (3d30 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    3d00:	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    3d02:	ldr	r2, [r3, #20]
    3d04:	str	r2, [r4, #0]
			if (firstInterrupt) {
    3d06:	cbz	r2, 3d28 <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    3d08:	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3d0a:	cbnz	r1, 3d0e <EventResponder::runFromInterrupt()+0x1e>
    3d0c:	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    3d0e:	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    3d10:	mov	r0, r3
    3d12:	ldr	r3, [r3, #8]
    3d14:	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3d16:	mrs	r1, PRIMASK
		__disable_irq();
    3d1a:	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    3d1c:	ldr	r3, [r4, #0]
		if (first) {
    3d1e:	cmp	r3, #0
    3d20:	bne.n	3d02 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3d22:	cbnz	r1, 3d26 <EventResponder::runFromInterrupt()+0x36>
    3d24:	cpsie	i
    3d26:	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    3d28:	str	r2, [r6, #0]
    3d2a:	b.n	3d0a <EventResponder::runFromInterrupt()+0x1a>
    3d2c:	.word	0x20001c98
    3d30:	.word	0x20001c94

00003d34 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    3d34:	b.w	3cf0 <EventResponder::runFromInterrupt()>

00003d38 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    3d38:	ldr	r2, [pc, #16]	; (3d4c <systick_isr+0x14>)
    3d3a:	ldr	r3, [pc, #20]	; (3d50 <systick_isr+0x18>)
    3d3c:	ldr	r1, [r2, #0]
	systick_millis_count++;
    3d3e:	ldr	r2, [pc, #20]	; (3d54 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    3d40:	str	r1, [r3, #0]
	systick_millis_count++;
    3d42:	ldr	r3, [r2, #0]
    3d44:	adds	r3, #1
    3d46:	str	r3, [r2, #0]
    3d48:	bx	lr
    3d4a:	nop
    3d4c:	.word	0xe0001004
    3d50:	.word	0x20009d54
    3d54:	.word	0x20009d58

00003d58 <usb_serial_class::clear()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    3d58:	b.w	2938 <usb_serial_flush_input>

00003d5c <usb_serial_class::peek()>:
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    3d5c:	b.w	28e8 <usb_serial_peekchar>

00003d60 <usb_serial_class::read()>:
			}
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    3d60:	b.w	29ac <usb_serial_getchar>

00003d64 <usb_serial_class::available()>:
				if (elapsed > 750) break;
			}
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    3d64:	b.w	292c <usb_serial_available>

00003d68 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    3d68:	b.w	2a60 <usb_serial_flush_output>

00003d6c <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    3d6c:	b.w	2a10 <usb_serial_write_buffer_free>

00003d70 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    3d70:	mov	r0, r1
    3d72:	mov	r1, r2
    3d74:	b.w	29f8 <usb_serial_write>

00003d78 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    3d78:	mov	r0, r1
    3d7a:	b.w	29cc <usb_serial_putchar>
    3d7e:	nop

00003d80 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    3d80:	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    3d82:	bl	7c <setup>
	while (1) {
		loop();
    3d86:	bl	4f4 <loop>
		yield();
    3d8a:	bl	3c00 <yield>
    3d8e:	b.n	3d86 <main+0x6>

00003d90 <Stream::timedPeek()>:
  return -1;     // -1 indicates timeout
}

// private method to peek stream with timeout
int Stream::timedPeek()
{
    3d90:	push	{r4, r5, r6, lr}
    3d92:	ldr	r5, [pc, #40]	; (3dbc <Stream::timedPeek()+0x2c>)
    3d94:	mov	r4, r0
    3d96:	ldr	r6, [r5, #0]
    3d98:	b.n	3da8 <Stream::timedPeek()+0x18>
  int c;
  unsigned long startMillis = millis();
  do {
    c = peek();
    if (c >= 0) return c;
    yield();
    3d9a:	bl	3c00 <yield>
    3d9e:	ldr	r3, [r5, #0]
// private method to peek stream with timeout
int Stream::timedPeek()
{
  int c;
  unsigned long startMillis = millis();
  do {
    3da0:	ldr	r2, [r4, #8]
    3da2:	subs	r3, r3, r6
    3da4:	cmp	r3, r2
    3da6:	bcs.n	3db6 <Stream::timedPeek()+0x26>
    c = peek();
    3da8:	ldr	r3, [r4, #0]
    3daa:	mov	r0, r4
    3dac:	ldr	r3, [r3, #24]
    3dae:	blx	r3
    if (c >= 0) return c;
    3db0:	cmp	r0, #0
    3db2:	blt.n	3d9a <Stream::timedPeek()+0xa>
    yield();
  } while(millis() - startMillis < _timeout);
  return -1;     // -1 indicates timeout
}
    3db4:	pop	{r4, r5, r6, pc}
  do {
    c = peek();
    if (c >= 0) return c;
    yield();
  } while(millis() - startMillis < _timeout);
  return -1;     // -1 indicates timeout
    3db6:	mov.w	r0, #4294967295
}
    3dba:	pop	{r4, r5, r6, pc}
    3dbc:	.word	0x20009d58

00003dc0 <Stream::peekNextDigit()>:

// returns peek of the next digit in the stream or -1 if timeout
// discards non-numeric characters
int Stream::peekNextDigit()
{
    3dc0:	push	{r4, lr}
    3dc2:	mov	r4, r0
    3dc4:	b.n	3dd4 <Stream::peekNextDigit()+0x14>
  int c;
  while (1) {
    c = timedPeek();
    if (c < 0) return c;  // timeout
    if (c == '-') return c;
    3dc6:	cmp	r3, #45	; 0x2d
    3dc8:	beq.n	3de4 <Stream::peekNextDigit()+0x24>
    if (c >= '0' && c <= '9') return c;
    3dca:	cmp	r2, #9
    3dcc:	bls.n	3de4 <Stream::peekNextDigit()+0x24>
    read();  // discard non-numeric
    3dce:	ldr	r3, [r4, #0]
    3dd0:	ldr	r3, [r3, #20]
    3dd2:	blx	r3
// discards non-numeric characters
int Stream::peekNextDigit()
{
  int c;
  while (1) {
    c = timedPeek();
    3dd4:	mov	r0, r4
    3dd6:	bl	3d90 <Stream::timedPeek()>
    if (c < 0) return c;  // timeout
    3dda:	subs	r3, r0, #0
    if (c == '-') return c;
    if (c >= '0' && c <= '9') return c;
    read();  // discard non-numeric
    3ddc:	mov	r0, r4
  int c;
  while (1) {
    c = timedPeek();
    if (c < 0) return c;  // timeout
    if (c == '-') return c;
    if (c >= '0' && c <= '9') return c;
    3dde:	sub.w	r2, r3, #48	; 0x30
int Stream::peekNextDigit()
{
  int c;
  while (1) {
    c = timedPeek();
    if (c < 0) return c;  // timeout
    3de2:	bge.n	3dc6 <Stream::peekNextDigit()+0x6>
    if (c == '-') return c;
    if (c >= '0' && c <= '9') return c;
    read();  // discard non-numeric
  }
}
    3de4:	mov	r0, r3
    3de6:	pop	{r4, pc}

00003de8 <Stream::parseInt(char)>:
}

// as above but a given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
long Stream::parseInt(char skipChar)
{
    3de8:	push	{r3, r4, r5, r6, r7, lr}
    3dea:	mov	r5, r1
    3dec:	mov	r4, r0
  boolean isNegative = false;
  long value = 0;
  int c;

  c = peekNextDigit();
    3dee:	bl	3dc0 <Stream::peekNextDigit()>
  // ignore non numeric leading characters
  if(c < 0)
    3df2:	cmp	r0, #0
    3df4:	blt.n	3e3e <Stream::parseInt(char)+0x56>
    3df6:	movs	r6, #0
    3df8:	mov	r7, r6
    return 0; // zero returned if timeout

  do{
    if(c == skipChar)
    3dfa:	cmp	r0, r5
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
    3dfc:	sub.w	r2, r0, #48	; 0x30
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout

  do{
    if(c == skipChar)
    3e00:	beq.n	3e16 <Stream::parseInt(char)+0x2e>
      ; // ignore this charactor
    else if(c == '-')
    3e02:	cmp	r0, #45	; 0x2d
    3e04:	beq.n	3e36 <Stream::parseInt(char)+0x4e>
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
      value = value * 10 + c - '0';
    3e06:	add.w	r3, r6, r6, lsl #2
  do{
    if(c == skipChar)
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
    3e0a:	cmp	r2, #9
      value = value * 10 + c - '0';
    3e0c:	add.w	r0, r0, r3, lsl #1
  do{
    if(c == skipChar)
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
    3e10:	bhi.n	3e16 <Stream::parseInt(char)+0x2e>
      value = value * 10 + c - '0';
    3e12:	sub.w	r6, r0, #48	; 0x30
    read();  // consume the character we got with peek
    3e16:	ldr	r3, [r4, #0]
    3e18:	mov	r0, r4
    3e1a:	ldr	r3, [r3, #20]
    3e1c:	blx	r3
    c = timedPeek();
    3e1e:	mov	r0, r4
    3e20:	bl	3d90 <Stream::timedPeek()>
  }
  while( (c >= '0' && c <= '9') || c == skipChar );
    3e24:	sub.w	r3, r0, #48	; 0x30
    3e28:	cmp	r3, #9
    3e2a:	bls.n	3dfa <Stream::parseInt(char)+0x12>
    3e2c:	cmp	r0, r5
    3e2e:	beq.n	3dfa <Stream::parseInt(char)+0x12>

  if(isNegative)
    3e30:	cbz	r7, 3e3a <Stream::parseInt(char)+0x52>
    value = -value;
    3e32:	negs	r0, r6
    3e34:	pop	{r3, r4, r5, r6, r7, pc}

  do{
    if(c == skipChar)
      ; // ignore this charactor
    else if(c == '-')
      isNegative = true;
    3e36:	movs	r7, #1
    3e38:	b.n	3e16 <Stream::parseInt(char)+0x2e>
    3e3a:	mov	r0, r6
  while( (c >= '0' && c <= '9') || c == skipChar );

  if(isNegative)
    value = -value;
  return value;
}
    3e3c:	pop	{r3, r4, r5, r6, r7, pc}
  int c;

  c = peekNextDigit();
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout
    3e3e:	movs	r0, #0
    3e40:	pop	{r3, r4, r5, r6, r7, pc}
    3e42:	nop

00003e44 <Stream::parseInt()>:
// returns the first valid (long) integer value from the current position.
// initial characters that are not digits (or the minus sign) are skipped
// function is terminated by the first character that is not a digit.
long Stream::parseInt()
{
  return parseInt(NO_SKIP_CHAR); // terminate on first non-digit character (or timeout)
    3e44:	movs	r1, #1
    3e46:	b.w	3de8 <Stream::parseInt(char)>
    3e4a:	nop

00003e4c <Print::println()>:
	if (n < 0) return printNumber64(-n, 10, 1);
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
    3e4c:	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
    3e4e:	ldr	r4, [pc, #24]	; (3e68 <Print::println()+0x1c>)
	if (n < 0) return printNumber64(-n, 10, 1);
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
    3e50:	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    3e52:	ldr	r3, [r0, #0]
    3e54:	movs	r2, #2
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    3e56:	ldrh	r4, [r4, #0]
	return write(buf, 2);
    3e58:	add	r1, sp, #4
    3e5a:	ldr	r3, [r3, #4]
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    3e5c:	strh.w	r4, [sp, #4]
	return write(buf, 2);
    3e60:	blx	r3
}
    3e62:	add	sp, #8
    3e64:	pop	{r4, pc}
    3e66:	nop
    3e68:	.word	0x20000380

00003e6c <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
	((class Print *)file)->write((uint8_t *)ptr, len);
    3e6c:	ldr	r3, [r0, #0]
}

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    3e6e:	push	{r4, lr}
    3e70:	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
    3e72:	ldr	r3, [r3, #4]
    3e74:	blx	r3
	return len;
}
    3e76:	mov	r0, r4
    3e78:	pop	{r4, pc}
    3e7a:	nop

00003e7c <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
    3e7c:	push	{r1, r2, r3}
    3e7e:	push	{lr}
    3e80:	sub	sp, #8
    3e82:	add	r3, sp, #12
    3e84:	ldr.w	r1, [r3], #4
	va_start(ap, format);
#ifdef __STRICT_ANSI__
	va_end(ap);
	return 0;  // TODO: make this work with -std=c++0x
#else
	int retval = vdprintf((int)this, format, ap);
    3e88:	mov	r2, r3
}

int Print::printf(const char *format, ...)
{
	va_list ap;
	va_start(ap, format);
    3e8a:	str	r3, [sp, #4]
#ifdef __STRICT_ANSI__
	va_end(ap);
	return 0;  // TODO: make this work with -std=c++0x
#else
	int retval = vdprintf((int)this, format, ap);
    3e8c:	bl	7310 <vdprintf>
	va_end(ap);
	return retval;
#endif
}
    3e90:	add	sp, #8
    3e92:	ldr.w	lr, [sp], #4
    3e96:	add	sp, #12
    3e98:	bx	lr
    3e9a:	nop

00003e9c <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	return retval;
#endif
}

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    3e9c:	push	{r4, r5, r6, r7, lr}
    3e9e:	mov	r6, r0
    3ea0:	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    3ea2:	cmp	r2, #0
    3ea4:	beq.n	3f0e <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    3ea6:	cmp	r2, #1
    3ea8:	it	eq
    3eaa:	moveq	r2, #10
	}


	if (n == 0) {
    3eac:	cbz	r1, 3f04 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    3eae:	movs	r5, #33	; 0x21
    3eb0:	b.n	3eb4 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    3eb2:	uxtb	r5, r7
    3eb4:	subs	r7, r5, #1
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    3eb6:	udiv	r4, r1, r2
    3eba:	mls	r1, r2, r4, r1
    3ebe:	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3ec0:	cmp	r1, #9
    3ec2:	add.w	r1, r0, #55	; 0x37
    3ec6:	add.w	r0, r0, #48	; 0x30
    3eca:	it	hi
    3ecc:	uxtbhi	r0, r1
			n /= base;
			if (n == 0) break;
    3ece:	mov	r1, r4
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3ed0:	add	r4, sp, #40	; 0x28
    3ed2:	it	ls
    3ed4:	uxtbls	r0, r0
    3ed6:	add	r4, r5
    3ed8:	strb.w	r0, [r4, #-36]
			n /= base;
			if (n == 0) break;
    3edc:	cmp	r1, #0
    3ede:	bne.n	3eb2 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    3ee0:	cbz	r3, 3ef0 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    3ee2:	subs	r5, #1
		buf[i] = '-';
    3ee4:	add	r3, sp, #40	; 0x28
    3ee6:	movs	r2, #45	; 0x2d
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
		i--;
    3ee8:	uxtb	r5, r5
		buf[i] = '-';
    3eea:	add	r3, r5
    3eec:	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    3ef0:	ldr	r3, [r6, #0]
    3ef2:	add	r1, sp, #4
    3ef4:	rsb	r2, r5, #34	; 0x22
    3ef8:	mov	r0, r6
    3efa:	add	r1, r5
    3efc:	ldr	r3, [r3, #4]
    3efe:	blx	r3
}
    3f00:	add	sp, #44	; 0x2c
    3f02:	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    3f04:	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    3f06:	movs	r5, #33	; 0x21
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    3f08:	strb.w	r2, [sp, #37]	; 0x25
    3f0c:	b.n	3ee0 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    3f0e:	ldr	r3, [r0, #0]
    3f10:	uxtb	r1, r1
    3f12:	ldr	r3, [r3, #0]
    3f14:	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    3f16:	add	sp, #44	; 0x2c
    3f18:	pop	{r4, r5, r6, r7, pc}
    3f1a:	nop

00003f1c <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    3f1c:	cmp	r1, #0
    3f1e:	blt.n	3f28 <Print::print(long)+0xc>
	return count;
}

size_t Print::print(long n)
{
	uint8_t sign=0;
    3f20:	movs	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    3f22:	movs	r2, #10
    3f24:	b.w	3e9c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
		n = -n;
    3f28:	negs	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    3f2a:	movs	r3, #45	; 0x2d
		n = -n;
	}
	return printNumber(n, 10, sign);
    3f2c:	movs	r2, #10
    3f2e:	b.w	3e9c <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    3f32:	nop

00003f34 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
    3f34:	bx	lr
    3f36:	nop

00003f38 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    3f38:	ldr	r2, [pc, #600]	; (4194 <set_arm_clock+0x25c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    3f3a:	ldr	r3, [pc, #604]	; (4198 <set_arm_clock+0x260>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    3f3c:	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    3f3e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
    3f42:	ldr	r4, [pc, #600]	; (419c <set_arm_clock+0x264>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    3f44:	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    3f48:	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    3f4a:	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    3f4c:	bls.n	3f88 <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    3f4e:	ldr	r3, [pc, #592]	; (41a0 <set_arm_clock+0x268>)
    3f50:	cmp	r0, r3
    3f52:	bls.w	4180 <set_arm_clock+0x248>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    3f56:	ldr	r3, [pc, #588]	; (41a4 <set_arm_clock+0x26c>)
    3f58:	movw	r5, #1575	; 0x627
    3f5c:	ldr	r7, [pc, #584]	; (41a8 <set_arm_clock+0x270>)
    3f5e:	add	r3, r0
    3f60:	ldr	r4, [pc, #584]	; (41ac <set_arm_clock+0x274>)
    3f62:	lsrs	r2, r3, #8
    3f64:	umull	r3, r2, r7, r2
    3f68:	lsrs	r3, r2, #7
    3f6a:	add.w	r3, r3, r3, lsl #2
    3f6e:	add.w	r2, r3, r3, lsl #2
    3f72:	addw	r3, r2, #1250	; 0x4e2
    3f76:	cmp	r3, r5
    3f78:	it	cs
    3f7a:	movcs	r3, r5
    3f7c:	sub.w	r3, r3, #800	; 0x320
    3f80:	umull	r3, r5, r4, r3
    3f84:	lsrs	r5, r5, #3
    3f86:	b.n	3f92 <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
    3f88:	ldr	r5, [pc, #548]	; (41b0 <set_arm_clock+0x278>)
    3f8a:	cmp	r0, r5
    3f8c:	ite	ls
    3f8e:	movls	r5, #6
    3f90:	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    3f92:	ldr	r2, [pc, #516]	; (4198 <set_arm_clock+0x260>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    3f94:	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    3f98:	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    3f9c:	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    3f9e:	orr.w	r3, r3, #192	; 0xc0
    3fa2:	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    3fa6:	bcs.n	3fbe <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    3fa8:	ldr	r3, [pc, #496]	; (419c <set_arm_clock+0x264>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    3faa:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    3fae:	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    3fb0:	orrs	r6, r5
		DCDC_REG3 = dcdc;
    3fb2:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    3fb4:	ldr	r3, [r2, #0]
    3fb6:	cmp	r3, #0
    3fb8:	bge.n	3fb4 <set_arm_clock+0x7c>
    3fba:	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    3fbe:	ands.w	r3, lr, #33554432	; 0x2000000
    3fc2:	bne.n	4028 <set_arm_clock+0xf0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    3fc4:	ldr	r4, [pc, #492]	; (41b4 <set_arm_clock+0x27c>)
    3fc6:	ldr	r2, [pc, #496]	; (41b8 <set_arm_clock+0x280>)
    3fc8:	ldr.w	ip, [r4, #16]
    3fcc:	mov	r4, r2
    3fce:	and.w	r2, ip, r2
    3fd2:	cmp	r2, r4
    3fd4:	itet	eq
    3fd6:	moveq.w	r3, #402653184	; 0x18000000
    3fda:	movne.w	r2, #4096	; 0x1000
    3fde:	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    3fe0:	eor.w	r4, lr, r3
    3fe4:	tst.w	r4, #939524096	; 0x38000000
    3fe8:	beq.n	3ffc <set_arm_clock+0xc4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    3fea:	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    3fee:	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
    3ff2:	ldr	r4, [pc, #420]	; (4198 <set_arm_clock+0x260>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    3ff4:	orr.w	lr, r3, lr
			CCM_CBCDR = cbcdr;
    3ff8:	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    3ffc:	eor.w	r3, r1, r2
    4000:	tst.w	r3, #12288	; 0x3000
    4004:	beq.n	4018 <set_arm_clock+0xe0>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    4006:	ldr	r3, [pc, #400]	; (4198 <set_arm_clock+0x260>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    4008:	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    400c:	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    400e:	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    4010:	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    4012:	ldr	r3, [r2, #72]	; 0x48
    4014:	lsls	r4, r3, #28
    4016:	bmi.n	4012 <set_arm_clock+0xda>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    4018:	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    401c:	ldr	r2, [pc, #376]	; (4198 <set_arm_clock+0x260>)
    401e:	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    4022:	ldr	r3, [r2, #72]	; 0x48
    4024:	lsls	r1, r3, #26
    4026:	bmi.n	4022 <set_arm_clock+0xea>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    4028:	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    402a:	ldr	r4, [pc, #400]	; (41bc <set_arm_clock+0x284>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    402c:	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    402e:	mul.w	r3, r1, r2
    4032:	mul.w	r3, r0, r3
    4036:	cmp	r3, r4
    4038:	bhi.n	404e <set_arm_clock+0x116>
		if (div_arm < 8) {
    403a:	cmp	r2, #7
    403c:	bhi.w	416a <set_arm_clock+0x232>
			div_arm = div_arm + 1;
    4040:	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    4042:	mul.w	r3, r1, r2
    4046:	mul.w	r3, r0, r3
    404a:	cmp	r3, r4
    404c:	bls.n	403a <set_arm_clock+0x102>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    404e:	ldr	r0, [pc, #368]	; (41c0 <set_arm_clock+0x288>)
    4050:	ldr	r4, [pc, #368]	; (41c4 <set_arm_clock+0x28c>)
    4052:	add	r0, r3
    4054:	umull	r0, r3, r4, r0
    4058:	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
    405a:	cmp	r3, #108	; 0x6c
    405c:	bhi.w	4176 <set_arm_clock+0x23e>
	if (mult < 54) mult = 54;
    4060:	cmp	r3, #53	; 0x35
    4062:	bhi.w	4184 <set_arm_clock+0x24c>
    4066:	ldr.w	r8, [pc, #392]	; 41f0 <set_arm_clock+0x2b8>
    406a:	movs	r3, #54	; 0x36
    406c:	ldr	r0, [pc, #344]	; (41c8 <set_arm_clock+0x290>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    406e:	ldr.w	ip, [pc, #324]	; 41b4 <set_arm_clock+0x27c>
    4072:	ldr	r4, [pc, #344]	; (41cc <set_arm_clock+0x294>)
    4074:	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    4078:	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    407c:	and.w	r4, r9, r4
    4080:	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    4082:	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    4086:	beq.n	40a0 <set_arm_clock+0x168>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    4088:	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    408c:	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    4090:	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    4092:	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    4096:	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    409a:	ldr	r3, [r4, #0]
    409c:	cmp	r3, #0
    409e:	bge.n	409a <set_arm_clock+0x162>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    40a0:	ldr.w	ip, [pc, #244]	; 4198 <set_arm_clock+0x260>
    40a4:	subs	r2, #1
    40a6:	ldr.w	r3, [ip, #16]
    40aa:	and.w	r3, r3, #7
    40ae:	cmp	r3, r2
    40b0:	beq.n	40c2 <set_arm_clock+0x18a>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    40b2:	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    40b6:	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    40b8:	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    40bc:	ldr	r3, [r4, #72]	; 0x48
    40be:	lsls	r3, r3, #15
    40c0:	bmi.n	40bc <set_arm_clock+0x184>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    40c2:	subs	r1, #1
    40c4:	lsls	r1, r1, #10
    40c6:	eor.w	r3, lr, r1
    40ca:	tst.w	r3, #7168	; 0x1c00
    40ce:	beq.n	40ea <set_arm_clock+0x1b2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
    40d0:	ldr	r3, [pc, #196]	; (4198 <set_arm_clock+0x260>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    40d2:	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    40d6:	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    40da:	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    40dc:	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
    40e0:	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    40e4:	ldr	r3, [r2, #72]	; 0x48
    40e6:	lsls	r1, r3, #30
    40e8:	bmi.n	40e4 <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    40ea:	ldr	r3, [pc, #228]	; (41d0 <set_arm_clock+0x298>)
    40ec:	ldr	r1, [pc, #228]	; (41d4 <set_arm_clock+0x29c>)
    40ee:	add	r3, r0
    40f0:	lsrs	r3, r3, #7
    40f2:	umull	r3, r1, r1, r3
    40f6:	lsrs	r1, r1, #12
    40f8:	cmp	r1, #4
    40fa:	it	cs
    40fc:	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    40fe:	subs	r3, r1, #1
    4100:	lsls	r3, r3, #8
    4102:	eor.w	r2, lr, r3
    4106:	tst.w	r2, #768	; 0x300
    410a:	beq.n	411c <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    410c:	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    4110:	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    4114:	ldr	r2, [pc, #128]	; (4198 <set_arm_clock+0x260>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    4116:	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    411a:	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    411c:	ldr	r3, [pc, #120]	; (4198 <set_arm_clock+0x260>)
    411e:	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    4120:	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    4122:	bic.w	r4, r4, #33554432	; 0x2000000
    4126:	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    4128:	ldr	r3, [r2, #72]	; 0x48
    412a:	lsls	r3, r3, #26
    412c:	bmi.n	4128 <set_arm_clock+0x1f0>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    412e:	ldr	r3, [pc, #168]	; (41d8 <set_arm_clock+0x2a0>)
    4130:	mov.w	r2, #4294967295
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    4134:	ldr	r4, [pc, #164]	; (41dc <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    4136:	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    4138:	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    413c:	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    413e:	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    4142:	ldr	r4, [pc, #156]	; (41e0 <set_arm_clock+0x2a8>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    4144:	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    4148:	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    414c:	ldr	r2, [pc, #148]	; (41e4 <set_arm_clock+0x2ac>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    414e:	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    4150:	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    4152:	bcs.n	4166 <set_arm_clock+0x22e>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    4154:	ldr	r3, [pc, #68]	; (419c <set_arm_clock+0x264>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    4156:	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    415a:	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    415c:	orrs	r6, r5
		DCDC_REG3 = dcdc;
    415e:	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    4160:	ldr	r3, [r2, #0]
    4162:	cmp	r3, #0
    4164:	bge.n	4160 <set_arm_clock+0x228>
	}

	return frequency;
}
    4166:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    416a:	cmp	r1, #4
    416c:	bhi.w	404e <set_arm_clock+0x116>
				div_ahb = div_ahb + 1;
    4170:	adds	r1, #1
				div_arm = 1;
    4172:	movs	r2, #1
    4174:	b.n	402e <set_arm_clock+0xf6>
    4176:	ldr.w	r8, [pc, #124]	; 41f4 <set_arm_clock+0x2bc>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    417a:	movs	r3, #108	; 0x6c
    417c:	ldr	r0, [pc, #104]	; (41e8 <set_arm_clock+0x2b0>)
    417e:	b.n	406e <set_arm_clock+0x136>
    4180:	movs	r5, #18
    4182:	b.n	3f92 <set_arm_clock+0x5a>
    4184:	ldr	r0, [pc, #100]	; (41ec <set_arm_clock+0x2b4>)
    4186:	ldr.w	r8, [pc, #112]	; 41f8 <set_arm_clock+0x2c0>
    418a:	mul.w	r0, r0, r3
    418e:	orr.w	r8, r3, r8
    4192:	b.n	406e <set_arm_clock+0x136>
    4194:	.word	0x1f78a400
    4198:	.word	0x400fc000
    419c:	.word	0x40080000
    41a0:	.word	0x23c34600
    41a4:	.word	0xdc3cba00
    41a8:	.word	0x004cb223
    41ac:	.word	0x51eb851f
    41b0:	.word	0x016e3600
    41b4:	.word	0x400d8000
    41b8:	.word	0x80003040
    41bc:	.word	0x269fb1ff
    41c0:	.word	0x005b8d80
    41c4:	.word	0x165e9f81
    41c8:	.word	0x269fb200
    41cc:	.word	0x8001307f
    41d0:	.word	0x08f0d17f
    41d4:	.word	0x00e5109f
    41d8:	.word	0x431bde83
    41dc:	.word	0x20001214
    41e0:	.word	0x20001210
    41e4:	.word	0x20009d50
    41e8:	.word	0x4d3f6400
    41ec:	.word	0x00b71b00
    41f0:	.word	0x80002036
    41f4:	.word	0x8000206c
    41f8:	.word	0x80002000

000041fc <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    41fc:	push	{r4, r5, r6, r7}
    41fe:	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    4200:	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    4202:	mov	r7, r6
    4204:	b.n	4208 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    4206:	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    4208:	udiv	r3, r0, r2
    420c:	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    4210:	add.w	r4, r0, #55	; 0x37
    4214:	cmp	r0, #9
    4216:	add.w	r0, r0, #48	; 0x30
    421a:	uxtb	r4, r4
    421c:	it	ls
    421e:	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    4220:	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    4222:	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    4226:	cmp	r3, #0
    4228:	bne.n	4206 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    422a:	adds	r2, r1, r5
    422c:	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    422e:	cbz	r5, 4244 <ultoa+0x48>
    4230:	adds	r3, #1
		t = buf[j];
    4232:	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    4236:	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    4238:	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    423a:	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    423c:	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    423e:	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    4242:	blt.n	4230 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    4244:	mov	r0, r1
    4246:	pop	{r4, r5, r6, r7}
    4248:	bx	lr
    424a:	nop

0000424c <__aeabi_drsub>:
    424c:	eor.w	r1, r1, #2147483648	; 0x80000000
    4250:	b.n	4258 <__adddf3>
    4252:	nop

00004254 <__aeabi_dsub>:
    4254:	eor.w	r3, r3, #2147483648	; 0x80000000

00004258 <__adddf3>:
    4258:	push	{r4, r5, lr}
    425a:	mov.w	r4, r1, lsl #1
    425e:	mov.w	r5, r3, lsl #1
    4262:	teq	r4, r5
    4266:	it	eq
    4268:	teqeq	r0, r2
    426c:	itttt	ne
    426e:	orrsne.w	ip, r4, r0
    4272:	orrsne.w	ip, r5, r2
    4276:	mvnsne.w	ip, r4, asr #21
    427a:	mvnsne.w	ip, r5, asr #21
    427e:	beq.w	4446 <__adddf3+0x1ee>
    4282:	mov.w	r4, r4, lsr #21
    4286:	rsbs	r5, r4, r5, lsr #21
    428a:	it	lt
    428c:	neglt	r5, r5
    428e:	ble.n	42aa <__adddf3+0x52>
    4290:	add	r4, r5
    4292:	eor.w	r2, r0, r2
    4296:	eor.w	r3, r1, r3
    429a:	eor.w	r0, r2, r0
    429e:	eor.w	r1, r3, r1
    42a2:	eor.w	r2, r0, r2
    42a6:	eor.w	r3, r1, r3
    42aa:	cmp	r5, #54	; 0x36
    42ac:	it	hi
    42ae:	pophi	{r4, r5, pc}
    42b0:	tst.w	r1, #2147483648	; 0x80000000
    42b4:	mov.w	r1, r1, lsl #12
    42b8:	mov.w	ip, #1048576	; 0x100000
    42bc:	orr.w	r1, ip, r1, lsr #12
    42c0:	beq.n	42c8 <__adddf3+0x70>
    42c2:	negs	r0, r0
    42c4:	sbc.w	r1, r1, r1, lsl #1
    42c8:	tst.w	r3, #2147483648	; 0x80000000
    42cc:	mov.w	r3, r3, lsl #12
    42d0:	orr.w	r3, ip, r3, lsr #12
    42d4:	beq.n	42dc <__adddf3+0x84>
    42d6:	negs	r2, r2
    42d8:	sbc.w	r3, r3, r3, lsl #1
    42dc:	teq	r4, r5
    42e0:	beq.w	4432 <__adddf3+0x1da>
    42e4:	sub.w	r4, r4, #1
    42e8:	rsbs	lr, r5, #32
    42ec:	blt.n	430a <__adddf3+0xb2>
    42ee:	lsl.w	ip, r2, lr
    42f2:	lsr.w	r2, r2, r5
    42f6:	adds	r0, r0, r2
    42f8:	adc.w	r1, r1, #0
    42fc:	lsl.w	r2, r3, lr
    4300:	adds	r0, r0, r2
    4302:	asr.w	r3, r3, r5
    4306:	adcs	r1, r3
    4308:	b.n	4328 <__adddf3+0xd0>
    430a:	sub.w	r5, r5, #32
    430e:	add.w	lr, lr, #32
    4312:	cmp	r2, #1
    4314:	lsl.w	ip, r3, lr
    4318:	it	cs
    431a:	orrcs.w	ip, ip, #2
    431e:	asr.w	r3, r3, r5
    4322:	adds	r0, r0, r3
    4324:	adcs.w	r1, r1, r3, asr #31
    4328:	and.w	r5, r1, #2147483648	; 0x80000000
    432c:	bpl.n	433e <__adddf3+0xe6>
    432e:	mov.w	lr, #0
    4332:	rsbs	ip, ip, #0
    4336:	sbcs.w	r0, lr, r0
    433a:	sbc.w	r1, lr, r1
    433e:	cmp.w	r1, #1048576	; 0x100000
    4342:	bcc.n	437c <__adddf3+0x124>
    4344:	cmp.w	r1, #2097152	; 0x200000
    4348:	bcc.n	4364 <__adddf3+0x10c>
    434a:	lsrs	r1, r1, #1
    434c:	movs.w	r0, r0, rrx
    4350:	mov.w	ip, ip, rrx
    4354:	add.w	r4, r4, #1
    4358:	mov.w	r2, r4, lsl #21
    435c:	cmn.w	r2, #4194304	; 0x400000
    4360:	bcs.w	4498 <__adddf3+0x240>
    4364:	cmp.w	ip, #2147483648	; 0x80000000
    4368:	it	eq
    436a:	movseq.w	ip, r0, lsr #1
    436e:	adcs.w	r0, r0, #0
    4372:	adc.w	r1, r1, r4, lsl #20
    4376:	orr.w	r1, r1, r5
    437a:	pop	{r4, r5, pc}
    437c:	movs.w	ip, ip, lsl #1
    4380:	adcs	r0, r0
    4382:	adc.w	r1, r1, r1
    4386:	tst.w	r1, #1048576	; 0x100000
    438a:	sub.w	r4, r4, #1
    438e:	bne.n	4364 <__adddf3+0x10c>
    4390:	teq	r1, #0
    4394:	itt	eq
    4396:	moveq	r1, r0
    4398:	moveq	r0, #0
    439a:	clz	r3, r1
    439e:	it	eq
    43a0:	addeq	r3, #32
    43a2:	sub.w	r3, r3, #11
    43a6:	subs.w	r2, r3, #32
    43aa:	bge.n	43c6 <__adddf3+0x16e>
    43ac:	adds	r2, #12
    43ae:	ble.n	43c2 <__adddf3+0x16a>
    43b0:	add.w	ip, r2, #20
    43b4:	rsb	r2, r2, #12
    43b8:	lsl.w	r0, r1, ip
    43bc:	lsr.w	r1, r1, r2
    43c0:	b.n	43dc <__adddf3+0x184>
    43c2:	add.w	r2, r2, #20
    43c6:	it	le
    43c8:	rsble	ip, r2, #32
    43cc:	lsl.w	r1, r1, r2
    43d0:	lsr.w	ip, r0, ip
    43d4:	itt	le
    43d6:	orrle.w	r1, r1, ip
    43da:	lslle	r0, r2
    43dc:	subs	r4, r4, r3
    43de:	ittt	ge
    43e0:	addge.w	r1, r1, r4, lsl #20
    43e4:	orrge	r1, r5
    43e6:	popge	{r4, r5, pc}
    43e8:	mvn.w	r4, r4
    43ec:	subs	r4, #31
    43ee:	bge.n	442a <__adddf3+0x1d2>
    43f0:	adds	r4, #12
    43f2:	bgt.n	4412 <__adddf3+0x1ba>
    43f4:	add.w	r4, r4, #20
    43f8:	rsb	r2, r4, #32
    43fc:	lsr.w	r0, r0, r4
    4400:	lsl.w	r3, r1, r2
    4404:	orr.w	r0, r0, r3
    4408:	lsr.w	r3, r1, r4
    440c:	orr.w	r1, r5, r3
    4410:	pop	{r4, r5, pc}
    4412:	rsb	r4, r4, #12
    4416:	rsb	r2, r4, #32
    441a:	lsr.w	r0, r0, r2
    441e:	lsl.w	r3, r1, r4
    4422:	orr.w	r0, r0, r3
    4426:	mov	r1, r5
    4428:	pop	{r4, r5, pc}
    442a:	lsr.w	r0, r1, r4
    442e:	mov	r1, r5
    4430:	pop	{r4, r5, pc}
    4432:	teq	r4, #0
    4436:	eor.w	r3, r3, #1048576	; 0x100000
    443a:	itte	eq
    443c:	eoreq.w	r1, r1, #1048576	; 0x100000
    4440:	addeq	r4, #1
    4442:	subne	r5, #1
    4444:	b.n	42e4 <__adddf3+0x8c>
    4446:	mvns.w	ip, r4, asr #21
    444a:	it	ne
    444c:	mvnsne.w	ip, r5, asr #21
    4450:	beq.n	44a6 <__adddf3+0x24e>
    4452:	teq	r4, r5
    4456:	it	eq
    4458:	teqeq	r0, r2
    445c:	beq.n	446a <__adddf3+0x212>
    445e:	orrs.w	ip, r4, r0
    4462:	itt	eq
    4464:	moveq	r1, r3
    4466:	moveq	r0, r2
    4468:	pop	{r4, r5, pc}
    446a:	teq	r1, r3
    446e:	ittt	ne
    4470:	movne	r1, #0
    4472:	movne	r0, #0
    4474:	popne	{r4, r5, pc}
    4476:	movs.w	ip, r4, lsr #21
    447a:	bne.n	4488 <__adddf3+0x230>
    447c:	lsls	r0, r0, #1
    447e:	adcs	r1, r1
    4480:	it	cs
    4482:	orrcs.w	r1, r1, #2147483648	; 0x80000000
    4486:	pop	{r4, r5, pc}
    4488:	adds.w	r4, r4, #4194304	; 0x400000
    448c:	itt	cc
    448e:	addcc.w	r1, r1, #1048576	; 0x100000
    4492:	popcc	{r4, r5, pc}
    4494:	and.w	r5, r1, #2147483648	; 0x80000000
    4498:	orr.w	r1, r5, #2130706432	; 0x7f000000
    449c:	orr.w	r1, r1, #15728640	; 0xf00000
    44a0:	mov.w	r0, #0
    44a4:	pop	{r4, r5, pc}
    44a6:	mvns.w	ip, r4, asr #21
    44aa:	itte	ne
    44ac:	movne	r1, r3
    44ae:	movne	r0, r2
    44b0:	mvnseq.w	ip, r5, asr #21
    44b4:	itt	ne
    44b6:	movne	r3, r1
    44b8:	movne	r2, r0
    44ba:	orrs.w	r4, r0, r1, lsl #12
    44be:	itte	eq
    44c0:	orrseq.w	r5, r2, r3, lsl #12
    44c4:	teqeq	r1, r3
    44c8:	orrne.w	r1, r1, #524288	; 0x80000
    44cc:	pop	{r4, r5, pc}
    44ce:	nop

000044d0 <__aeabi_ui2d>:
    44d0:	teq	r0, #0
    44d4:	itt	eq
    44d6:	moveq	r1, #0
    44d8:	bxeq	lr
    44da:	push	{r4, r5, lr}
    44dc:	mov.w	r4, #1024	; 0x400
    44e0:	add.w	r4, r4, #50	; 0x32
    44e4:	mov.w	r5, #0
    44e8:	mov.w	r1, #0
    44ec:	b.n	4390 <__adddf3+0x138>
    44ee:	nop

000044f0 <__aeabi_i2d>:
    44f0:	teq	r0, #0
    44f4:	itt	eq
    44f6:	moveq	r1, #0
    44f8:	bxeq	lr
    44fa:	push	{r4, r5, lr}
    44fc:	mov.w	r4, #1024	; 0x400
    4500:	add.w	r4, r4, #50	; 0x32
    4504:	ands.w	r5, r0, #2147483648	; 0x80000000
    4508:	it	mi
    450a:	negmi	r0, r0
    450c:	mov.w	r1, #0
    4510:	b.n	4390 <__adddf3+0x138>
    4512:	nop

00004514 <__aeabi_f2d>:
    4514:	lsls	r2, r0, #1
    4516:	mov.w	r1, r2, asr #3
    451a:	mov.w	r1, r1, rrx
    451e:	mov.w	r0, r2, lsl #28
    4522:	itttt	ne
    4524:	andsne.w	r3, r2, #4278190080	; 0xff000000
    4528:	teqne	r3, #4278190080	; 0xff000000
    452c:	eorne.w	r1, r1, #939524096	; 0x38000000
    4530:	bxne	lr
    4532:	teq	r2, #0
    4536:	ite	ne
    4538:	teqne	r3, #4278190080	; 0xff000000
    453c:	bxeq	lr
    453e:	push	{r4, r5, lr}
    4540:	mov.w	r4, #896	; 0x380
    4544:	and.w	r5, r1, #2147483648	; 0x80000000
    4548:	bic.w	r1, r1, #2147483648	; 0x80000000
    454c:	b.n	4390 <__adddf3+0x138>
    454e:	nop

00004550 <__aeabi_ul2d>:
    4550:	orrs.w	r2, r0, r1
    4554:	it	eq
    4556:	bxeq	lr
    4558:	push	{r4, r5, lr}
    455a:	mov.w	r5, #0
    455e:	b.n	4576 <__aeabi_l2d+0x16>

00004560 <__aeabi_l2d>:
    4560:	orrs.w	r2, r0, r1
    4564:	it	eq
    4566:	bxeq	lr
    4568:	push	{r4, r5, lr}
    456a:	ands.w	r5, r1, #2147483648	; 0x80000000
    456e:	bpl.n	4576 <__aeabi_l2d+0x16>
    4570:	negs	r0, r0
    4572:	sbc.w	r1, r1, r1, lsl #1
    4576:	mov.w	r4, #1024	; 0x400
    457a:	add.w	r4, r4, #50	; 0x32
    457e:	movs.w	ip, r1, lsr #22
    4582:	beq.w	433e <__adddf3+0xe6>
    4586:	mov.w	r2, #3
    458a:	movs.w	ip, ip, lsr #3
    458e:	it	ne
    4590:	addne	r2, #3
    4592:	movs.w	ip, ip, lsr #3
    4596:	it	ne
    4598:	addne	r2, #3
    459a:	add.w	r2, r2, ip, lsr #3
    459e:	rsb	r3, r2, #32
    45a2:	lsl.w	ip, r0, r3
    45a6:	lsr.w	r0, r0, r2
    45aa:	lsl.w	lr, r1, r3
    45ae:	orr.w	r0, r0, lr
    45b2:	lsr.w	r1, r1, r2
    45b6:	add	r4, r2
    45b8:	b.n	433e <__adddf3+0xe6>
    45ba:	nop

000045bc <__aeabi_dmul>:
    45bc:	push	{r4, r5, r6, lr}
    45be:	mov.w	ip, #255	; 0xff
    45c2:	orr.w	ip, ip, #1792	; 0x700
    45c6:	ands.w	r4, ip, r1, lsr #20
    45ca:	ittte	ne
    45cc:	andsne.w	r5, ip, r3, lsr #20
    45d0:	teqne	r4, ip
    45d4:	teqne	r5, ip
    45d8:	bleq	4798 <__aeabi_dmul+0x1dc>
    45dc:	add	r4, r5
    45de:	eor.w	r6, r1, r3
    45e2:	bic.w	r1, r1, ip, lsl #21
    45e6:	bic.w	r3, r3, ip, lsl #21
    45ea:	orrs.w	r5, r0, r1, lsl #12
    45ee:	it	ne
    45f0:	orrsne.w	r5, r2, r3, lsl #12
    45f4:	orr.w	r1, r1, #1048576	; 0x100000
    45f8:	orr.w	r3, r3, #1048576	; 0x100000
    45fc:	beq.n	4670 <__aeabi_dmul+0xb4>
    45fe:	umull	ip, lr, r0, r2
    4602:	mov.w	r5, #0
    4606:	umlal	lr, r5, r1, r2
    460a:	and.w	r2, r6, #2147483648	; 0x80000000
    460e:	umlal	lr, r5, r0, r3
    4612:	mov.w	r6, #0
    4616:	umlal	r5, r6, r1, r3
    461a:	teq	ip, #0
    461e:	it	ne
    4620:	orrne.w	lr, lr, #1
    4624:	sub.w	r4, r4, #255	; 0xff
    4628:	cmp.w	r6, #512	; 0x200
    462c:	sbc.w	r4, r4, #768	; 0x300
    4630:	bcs.n	463c <__aeabi_dmul+0x80>
    4632:	movs.w	lr, lr, lsl #1
    4636:	adcs	r5, r5
    4638:	adc.w	r6, r6, r6
    463c:	orr.w	r1, r2, r6, lsl #11
    4640:	orr.w	r1, r1, r5, lsr #21
    4644:	mov.w	r0, r5, lsl #11
    4648:	orr.w	r0, r0, lr, lsr #21
    464c:	mov.w	lr, lr, lsl #11
    4650:	subs.w	ip, r4, #253	; 0xfd
    4654:	it	hi
    4656:	cmphi.w	ip, #1792	; 0x700
    465a:	bhi.n	469a <__aeabi_dmul+0xde>
    465c:	cmp.w	lr, #2147483648	; 0x80000000
    4660:	it	eq
    4662:	movseq.w	lr, r0, lsr #1
    4666:	adcs.w	r0, r0, #0
    466a:	adc.w	r1, r1, r4, lsl #20
    466e:	pop	{r4, r5, r6, pc}
    4670:	and.w	r6, r6, #2147483648	; 0x80000000
    4674:	orr.w	r1, r6, r1
    4678:	orr.w	r0, r0, r2
    467c:	eor.w	r1, r1, r3
    4680:	subs.w	r4, r4, ip, lsr #1
    4684:	ittt	gt
    4686:	rsbsgt	r5, r4, ip
    468a:	orrgt.w	r1, r1, r4, lsl #20
    468e:	popgt	{r4, r5, r6, pc}
    4690:	orr.w	r1, r1, #1048576	; 0x100000
    4694:	mov.w	lr, #0
    4698:	subs	r4, #1
    469a:	bgt.w	47f4 <__aeabi_dmul+0x238>
    469e:	cmn.w	r4, #54	; 0x36
    46a2:	ittt	le
    46a4:	movle	r0, #0
    46a6:	andle.w	r1, r1, #2147483648	; 0x80000000
    46aa:	pople	{r4, r5, r6, pc}
    46ac:	rsb	r4, r4, #0
    46b0:	subs	r4, #32
    46b2:	bge.n	4720 <__aeabi_dmul+0x164>
    46b4:	adds	r4, #12
    46b6:	bgt.n	46f0 <__aeabi_dmul+0x134>
    46b8:	add.w	r4, r4, #20
    46bc:	rsb	r5, r4, #32
    46c0:	lsl.w	r3, r0, r5
    46c4:	lsr.w	r0, r0, r4
    46c8:	lsl.w	r2, r1, r5
    46cc:	orr.w	r0, r0, r2
    46d0:	and.w	r2, r1, #2147483648	; 0x80000000
    46d4:	bic.w	r1, r1, #2147483648	; 0x80000000
    46d8:	adds.w	r0, r0, r3, lsr #31
    46dc:	lsr.w	r6, r1, r4
    46e0:	adc.w	r1, r2, r6
    46e4:	orrs.w	lr, lr, r3, lsl #1
    46e8:	it	eq
    46ea:	biceq.w	r0, r0, r3, lsr #31
    46ee:	pop	{r4, r5, r6, pc}
    46f0:	rsb	r4, r4, #12
    46f4:	rsb	r5, r4, #32
    46f8:	lsl.w	r3, r0, r4
    46fc:	lsr.w	r0, r0, r5
    4700:	lsl.w	r2, r1, r4
    4704:	orr.w	r0, r0, r2
    4708:	and.w	r1, r1, #2147483648	; 0x80000000
    470c:	adds.w	r0, r0, r3, lsr #31
    4710:	adc.w	r1, r1, #0
    4714:	orrs.w	lr, lr, r3, lsl #1
    4718:	it	eq
    471a:	biceq.w	r0, r0, r3, lsr #31
    471e:	pop	{r4, r5, r6, pc}
    4720:	rsb	r5, r4, #32
    4724:	lsl.w	r2, r0, r5
    4728:	orr.w	lr, lr, r2
    472c:	lsr.w	r3, r0, r4
    4730:	lsl.w	r2, r1, r5
    4734:	orr.w	r3, r3, r2
    4738:	lsr.w	r0, r1, r4
    473c:	and.w	r1, r1, #2147483648	; 0x80000000
    4740:	lsr.w	r2, r1, r4
    4744:	bic.w	r0, r0, r2
    4748:	add.w	r0, r0, r3, lsr #31
    474c:	orrs.w	lr, lr, r3, lsl #1
    4750:	it	eq
    4752:	biceq.w	r0, r0, r3, lsr #31
    4756:	pop	{r4, r5, r6, pc}
    4758:	teq	r4, #0
    475c:	bne.n	477e <__aeabi_dmul+0x1c2>
    475e:	and.w	r6, r1, #2147483648	; 0x80000000
    4762:	lsls	r0, r0, #1
    4764:	adc.w	r1, r1, r1
    4768:	tst.w	r1, #1048576	; 0x100000
    476c:	it	eq
    476e:	subeq	r4, #1
    4770:	beq.n	4762 <__aeabi_dmul+0x1a6>
    4772:	orr.w	r1, r1, r6
    4776:	teq	r5, #0
    477a:	it	ne
    477c:	bxne	lr
    477e:	and.w	r6, r3, #2147483648	; 0x80000000
    4782:	lsls	r2, r2, #1
    4784:	adc.w	r3, r3, r3
    4788:	tst.w	r3, #1048576	; 0x100000
    478c:	it	eq
    478e:	subeq	r5, #1
    4790:	beq.n	4782 <__aeabi_dmul+0x1c6>
    4792:	orr.w	r3, r3, r6
    4796:	bx	lr
    4798:	teq	r4, ip
    479c:	and.w	r5, ip, r3, lsr #20
    47a0:	it	ne
    47a2:	teqne	r5, ip
    47a6:	beq.n	47c2 <__aeabi_dmul+0x206>
    47a8:	orrs.w	r6, r0, r1, lsl #1
    47ac:	it	ne
    47ae:	orrsne.w	r6, r2, r3, lsl #1
    47b2:	bne.n	4758 <__aeabi_dmul+0x19c>
    47b4:	eor.w	r1, r1, r3
    47b8:	and.w	r1, r1, #2147483648	; 0x80000000
    47bc:	mov.w	r0, #0
    47c0:	pop	{r4, r5, r6, pc}
    47c2:	orrs.w	r6, r0, r1, lsl #1
    47c6:	itte	eq
    47c8:	moveq	r0, r2
    47ca:	moveq	r1, r3
    47cc:	orrsne.w	r6, r2, r3, lsl #1
    47d0:	beq.n	4806 <__aeabi_dmul+0x24a>
    47d2:	teq	r4, ip
    47d6:	bne.n	47de <__aeabi_dmul+0x222>
    47d8:	orrs.w	r6, r0, r1, lsl #12
    47dc:	bne.n	4806 <__aeabi_dmul+0x24a>
    47de:	teq	r5, ip
    47e2:	bne.n	47f0 <__aeabi_dmul+0x234>
    47e4:	orrs.w	r6, r2, r3, lsl #12
    47e8:	itt	ne
    47ea:	movne	r0, r2
    47ec:	movne	r1, r3
    47ee:	bne.n	4806 <__aeabi_dmul+0x24a>
    47f0:	eor.w	r1, r1, r3
    47f4:	and.w	r1, r1, #2147483648	; 0x80000000
    47f8:	orr.w	r1, r1, #2130706432	; 0x7f000000
    47fc:	orr.w	r1, r1, #15728640	; 0xf00000
    4800:	mov.w	r0, #0
    4804:	pop	{r4, r5, r6, pc}
    4806:	orr.w	r1, r1, #2130706432	; 0x7f000000
    480a:	orr.w	r1, r1, #16252928	; 0xf80000
    480e:	pop	{r4, r5, r6, pc}

00004810 <__aeabi_ddiv>:
    4810:	push	{r4, r5, r6, lr}
    4812:	mov.w	ip, #255	; 0xff
    4816:	orr.w	ip, ip, #1792	; 0x700
    481a:	ands.w	r4, ip, r1, lsr #20
    481e:	ittte	ne
    4820:	andsne.w	r5, ip, r3, lsr #20
    4824:	teqne	r4, ip
    4828:	teqne	r5, ip
    482c:	bleq	497e <__aeabi_ddiv+0x16e>
    4830:	sub.w	r4, r4, r5
    4834:	eor.w	lr, r1, r3
    4838:	orrs.w	r5, r2, r3, lsl #12
    483c:	mov.w	r1, r1, lsl #12
    4840:	beq.w	4954 <__aeabi_ddiv+0x144>
    4844:	mov.w	r3, r3, lsl #12
    4848:	mov.w	r5, #268435456	; 0x10000000
    484c:	orr.w	r3, r5, r3, lsr #4
    4850:	orr.w	r3, r3, r2, lsr #24
    4854:	mov.w	r2, r2, lsl #8
    4858:	orr.w	r5, r5, r1, lsr #4
    485c:	orr.w	r5, r5, r0, lsr #24
    4860:	mov.w	r6, r0, lsl #8
    4864:	and.w	r1, lr, #2147483648	; 0x80000000
    4868:	cmp	r5, r3
    486a:	it	eq
    486c:	cmpeq	r6, r2
    486e:	adc.w	r4, r4, #253	; 0xfd
    4872:	add.w	r4, r4, #768	; 0x300
    4876:	bcs.n	487e <__aeabi_ddiv+0x6e>
    4878:	lsrs	r3, r3, #1
    487a:	mov.w	r2, r2, rrx
    487e:	subs	r6, r6, r2
    4880:	sbc.w	r5, r5, r3
    4884:	lsrs	r3, r3, #1
    4886:	mov.w	r2, r2, rrx
    488a:	mov.w	r0, #1048576	; 0x100000
    488e:	mov.w	ip, #524288	; 0x80000
    4892:	subs.w	lr, r6, r2
    4896:	sbcs.w	lr, r5, r3
    489a:	ittt	cs
    489c:	subcs	r6, r6, r2
    489e:	movcs	r5, lr
    48a0:	orrcs.w	r0, r0, ip
    48a4:	lsrs	r3, r3, #1
    48a6:	mov.w	r2, r2, rrx
    48aa:	subs.w	lr, r6, r2
    48ae:	sbcs.w	lr, r5, r3
    48b2:	ittt	cs
    48b4:	subcs	r6, r6, r2
    48b6:	movcs	r5, lr
    48b8:	orrcs.w	r0, r0, ip, lsr #1
    48bc:	lsrs	r3, r3, #1
    48be:	mov.w	r2, r2, rrx
    48c2:	subs.w	lr, r6, r2
    48c6:	sbcs.w	lr, r5, r3
    48ca:	ittt	cs
    48cc:	subcs	r6, r6, r2
    48ce:	movcs	r5, lr
    48d0:	orrcs.w	r0, r0, ip, lsr #2
    48d4:	lsrs	r3, r3, #1
    48d6:	mov.w	r2, r2, rrx
    48da:	subs.w	lr, r6, r2
    48de:	sbcs.w	lr, r5, r3
    48e2:	ittt	cs
    48e4:	subcs	r6, r6, r2
    48e6:	movcs	r5, lr
    48e8:	orrcs.w	r0, r0, ip, lsr #3
    48ec:	orrs.w	lr, r5, r6
    48f0:	beq.n	4924 <__aeabi_ddiv+0x114>
    48f2:	mov.w	r5, r5, lsl #4
    48f6:	orr.w	r5, r5, r6, lsr #28
    48fa:	mov.w	r6, r6, lsl #4
    48fe:	mov.w	r3, r3, lsl #3
    4902:	orr.w	r3, r3, r2, lsr #29
    4906:	mov.w	r2, r2, lsl #3
    490a:	movs.w	ip, ip, lsr #4
    490e:	bne.n	4892 <__aeabi_ddiv+0x82>
    4910:	tst.w	r1, #1048576	; 0x100000
    4914:	bne.n	492e <__aeabi_ddiv+0x11e>
    4916:	orr.w	r1, r1, r0
    491a:	mov.w	r0, #0
    491e:	mov.w	ip, #2147483648	; 0x80000000
    4922:	b.n	4892 <__aeabi_ddiv+0x82>
    4924:	tst.w	r1, #1048576	; 0x100000
    4928:	itt	eq
    492a:	orreq	r1, r0
    492c:	moveq	r0, #0
    492e:	subs.w	ip, r4, #253	; 0xfd
    4932:	it	hi
    4934:	cmphi.w	ip, #1792	; 0x700
    4938:	bhi.w	469a <__aeabi_dmul+0xde>
    493c:	subs.w	ip, r5, r3
    4940:	itt	eq
    4942:	subseq.w	ip, r6, r2
    4946:	movseq.w	ip, r0, lsr #1
    494a:	adcs.w	r0, r0, #0
    494e:	adc.w	r1, r1, r4, lsl #20
    4952:	pop	{r4, r5, r6, pc}
    4954:	and.w	lr, lr, #2147483648	; 0x80000000
    4958:	orr.w	r1, lr, r1, lsr #12
    495c:	adds.w	r4, r4, ip, lsr #1
    4960:	ittt	gt
    4962:	rsbsgt	r5, r4, ip
    4966:	orrgt.w	r1, r1, r4, lsl #20
    496a:	popgt	{r4, r5, r6, pc}
    496c:	orr.w	r1, r1, #1048576	; 0x100000
    4970:	mov.w	lr, #0
    4974:	subs	r4, #1
    4976:	b.n	469a <__aeabi_dmul+0xde>
    4978:	orr.w	lr, r5, r6
    497c:	b.n	469a <__aeabi_dmul+0xde>
    497e:	and.w	r5, ip, r3, lsr #20
    4982:	teq	r4, ip
    4986:	it	eq
    4988:	teqeq	r5, ip
    498c:	beq.w	4806 <__aeabi_dmul+0x24a>
    4990:	teq	r4, ip
    4994:	bne.n	49ac <__aeabi_ddiv+0x19c>
    4996:	orrs.w	r4, r0, r1, lsl #12
    499a:	bne.w	4806 <__aeabi_dmul+0x24a>
    499e:	teq	r5, ip
    49a2:	bne.w	47f0 <__aeabi_dmul+0x234>
    49a6:	mov	r0, r2
    49a8:	mov	r1, r3
    49aa:	b.n	4806 <__aeabi_dmul+0x24a>
    49ac:	teq	r5, ip
    49b0:	bne.n	49c0 <__aeabi_ddiv+0x1b0>
    49b2:	orrs.w	r5, r2, r3, lsl #12
    49b6:	beq.w	47b4 <__aeabi_dmul+0x1f8>
    49ba:	mov	r0, r2
    49bc:	mov	r1, r3
    49be:	b.n	4806 <__aeabi_dmul+0x24a>
    49c0:	orrs.w	r6, r0, r1, lsl #1
    49c4:	it	ne
    49c6:	orrsne.w	r6, r2, r3, lsl #1
    49ca:	bne.w	4758 <__aeabi_dmul+0x19c>
    49ce:	orrs.w	r4, r0, r1, lsl #1
    49d2:	bne.w	47f0 <__aeabi_dmul+0x234>
    49d6:	orrs.w	r5, r2, r3, lsl #1
    49da:	bne.w	47b4 <__aeabi_dmul+0x1f8>
    49de:	b.n	4806 <__aeabi_dmul+0x24a>

000049e0 <__gedf2>:
    49e0:	mov.w	ip, #4294967295
    49e4:	b.n	49f4 <__cmpdf2+0x4>
    49e6:	nop

000049e8 <__ledf2>:
    49e8:	mov.w	ip, #1
    49ec:	b.n	49f4 <__cmpdf2+0x4>
    49ee:	nop

000049f0 <__cmpdf2>:
    49f0:	mov.w	ip, #1
    49f4:	str.w	ip, [sp, #-4]!
    49f8:	mov.w	ip, r1, lsl #1
    49fc:	mvns.w	ip, ip, asr #21
    4a00:	mov.w	ip, r3, lsl #1
    4a04:	it	ne
    4a06:	mvnsne.w	ip, ip, asr #21
    4a0a:	beq.n	4a44 <__cmpdf2+0x54>
    4a0c:	add	sp, #4
    4a0e:	orrs.w	ip, r0, r1, lsl #1
    4a12:	ite	eq
    4a14:	orrseq.w	ip, r2, r3, lsl #1
    4a18:	teqne	r1, r3
    4a1c:	ittt	eq
    4a1e:	teqeq	r0, r2
    4a22:	moveq	r0, #0
    4a24:	bxeq	lr
    4a26:	cmn.w	r0, #0
    4a2a:	teq	r1, r3
    4a2e:	it	pl
    4a30:	cmppl	r1, r3
    4a32:	it	eq
    4a34:	cmpeq	r0, r2
    4a36:	ite	cs
    4a38:	asrcs	r0, r3, #31
    4a3a:	mvncc.w	r0, r3, asr #31
    4a3e:	orr.w	r0, r0, #1
    4a42:	bx	lr
    4a44:	mov.w	ip, r1, lsl #1
    4a48:	mvns.w	ip, ip, asr #21
    4a4c:	bne.n	4a54 <__cmpdf2+0x64>
    4a4e:	orrs.w	ip, r0, r1, lsl #12
    4a52:	bne.n	4a64 <__cmpdf2+0x74>
    4a54:	mov.w	ip, r3, lsl #1
    4a58:	mvns.w	ip, ip, asr #21
    4a5c:	bne.n	4a0c <__cmpdf2+0x1c>
    4a5e:	orrs.w	ip, r2, r3, lsl #12
    4a62:	beq.n	4a0c <__cmpdf2+0x1c>
    4a64:	ldr.w	r0, [sp], #4
    4a68:	bx	lr
    4a6a:	nop

00004a6c <__aeabi_cdrcmple>:
    4a6c:	mov	ip, r0
    4a6e:	mov	r0, r2
    4a70:	mov	r2, ip
    4a72:	mov	ip, r1
    4a74:	mov	r1, r3
    4a76:	mov	r3, ip
    4a78:	b.n	4a7c <__aeabi_cdcmpeq>
    4a7a:	nop

00004a7c <__aeabi_cdcmpeq>:
    4a7c:	push	{r0, lr}
    4a7e:	bl	49f0 <__cmpdf2>
    4a82:	cmp	r0, #0
    4a84:	it	mi
    4a86:	cmnmi.w	r0, #0
    4a8a:	pop	{r0, pc}

00004a8c <__aeabi_dcmpeq>:
    4a8c:	str.w	lr, [sp, #-8]!
    4a90:	bl	4a7c <__aeabi_cdcmpeq>
    4a94:	ite	eq
    4a96:	moveq	r0, #1
    4a98:	movne	r0, #0
    4a9a:	ldr.w	pc, [sp], #8
    4a9e:	nop

00004aa0 <__aeabi_dcmplt>:
    4aa0:	str.w	lr, [sp, #-8]!
    4aa4:	bl	4a7c <__aeabi_cdcmpeq>
    4aa8:	ite	cc
    4aaa:	movcc	r0, #1
    4aac:	movcs	r0, #0
    4aae:	ldr.w	pc, [sp], #8
    4ab2:	nop

00004ab4 <__aeabi_dcmple>:
    4ab4:	str.w	lr, [sp, #-8]!
    4ab8:	bl	4a7c <__aeabi_cdcmpeq>
    4abc:	ite	ls
    4abe:	movls	r0, #1
    4ac0:	movhi	r0, #0
    4ac2:	ldr.w	pc, [sp], #8
    4ac6:	nop

00004ac8 <__aeabi_dcmpge>:
    4ac8:	str.w	lr, [sp, #-8]!
    4acc:	bl	4a6c <__aeabi_cdrcmple>
    4ad0:	ite	ls
    4ad2:	movls	r0, #1
    4ad4:	movhi	r0, #0
    4ad6:	ldr.w	pc, [sp], #8
    4ada:	nop

00004adc <__aeabi_dcmpgt>:
    4adc:	str.w	lr, [sp, #-8]!
    4ae0:	bl	4a6c <__aeabi_cdrcmple>
    4ae4:	ite	cc
    4ae6:	movcc	r0, #1
    4ae8:	movcs	r0, #0
    4aea:	ldr.w	pc, [sp], #8
    4aee:	nop

00004af0 <__aeabi_dcmpun>:
    4af0:	mov.w	ip, r1, lsl #1
    4af4:	mvns.w	ip, ip, asr #21
    4af8:	bne.n	4b00 <__aeabi_dcmpun+0x10>
    4afa:	orrs.w	ip, r0, r1, lsl #12
    4afe:	bne.n	4b16 <__aeabi_dcmpun+0x26>
    4b00:	mov.w	ip, r3, lsl #1
    4b04:	mvns.w	ip, ip, asr #21
    4b08:	bne.n	4b10 <__aeabi_dcmpun+0x20>
    4b0a:	orrs.w	ip, r2, r3, lsl #12
    4b0e:	bne.n	4b16 <__aeabi_dcmpun+0x26>
    4b10:	mov.w	r0, #0
    4b14:	bx	lr
    4b16:	mov.w	r0, #1
    4b1a:	bx	lr

00004b1c <__aeabi_uldivmod>:
    4b1c:	cbnz	r3, 4b34 <__aeabi_uldivmod+0x18>
    4b1e:	cbnz	r2, 4b34 <__aeabi_uldivmod+0x18>
    4b20:	cmp	r1, #0
    4b22:	it	eq
    4b24:	cmpeq	r0, #0
    4b26:	itt	ne
    4b28:	movne.w	r1, #4294967295
    4b2c:	movne.w	r0, #4294967295
    4b30:	b.w	4e30 <__aeabi_idiv0>
    4b34:	sub.w	ip, sp, #8
    4b38:	strd	ip, lr, [sp, #-16]!
    4b3c:	bl	4b4c <__udivmoddi4>
    4b40:	ldr.w	lr, [sp, #4]
    4b44:	ldrd	r2, r3, [sp, #8]
    4b48:	add	sp, #16
    4b4a:	bx	lr

00004b4c <__udivmoddi4>:
    4b4c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4b50:	mov	ip, r1
    4b52:	mov	r6, r1
    4b54:	mov	r4, r0
    4b56:	ldr	r5, [sp, #32]
    4b58:	cmp	r3, #0
    4b5a:	bne.n	4bfe <__udivmoddi4+0xb2>
    4b5c:	cmp	r2, r1
    4b5e:	mov	r7, r2
    4b60:	bls.n	4c3c <__udivmoddi4+0xf0>
    4b62:	clz	lr, r2
    4b66:	cmp.w	lr, #0
    4b6a:	beq.n	4b84 <__udivmoddi4+0x38>
    4b6c:	rsb	r4, lr, #32
    4b70:	lsr.w	r4, r0, r4
    4b74:	lsl.w	r6, r1, lr
    4b78:	orr.w	ip, r4, r6
    4b7c:	lsl.w	r7, r2, lr
    4b80:	lsl.w	r4, r0, lr
    4b84:	mov.w	r9, r7, lsr #16
    4b88:	lsrs	r2, r4, #16
    4b8a:	udiv	r0, ip, r9
    4b8e:	uxth.w	r8, r7
    4b92:	mls	r6, r9, r0, ip
    4b96:	orr.w	r6, r2, r6, lsl #16
    4b9a:	mul.w	r3, r0, r8
    4b9e:	cmp	r3, r6
    4ba0:	bls.n	4bb6 <__udivmoddi4+0x6a>
    4ba2:	adds	r6, r6, r7
    4ba4:	add.w	r2, r0, #4294967295
    4ba8:	bcs.w	4df0 <__udivmoddi4+0x2a4>
    4bac:	cmp	r3, r6
    4bae:	bls.w	4df0 <__udivmoddi4+0x2a4>
    4bb2:	subs	r0, #2
    4bb4:	add	r6, r7
    4bb6:	subs	r6, r6, r3
    4bb8:	uxth	r2, r4
    4bba:	udiv	r3, r6, r9
    4bbe:	mls	r6, r9, r3, r6
    4bc2:	orr.w	r4, r2, r6, lsl #16
    4bc6:	mul.w	r8, r3, r8
    4bca:	cmp	r8, r4
    4bcc:	bls.n	4be2 <__udivmoddi4+0x96>
    4bce:	adds	r4, r4, r7
    4bd0:	add.w	r2, r3, #4294967295
    4bd4:	bcs.w	4dec <__udivmoddi4+0x2a0>
    4bd8:	cmp	r8, r4
    4bda:	bls.w	4dec <__udivmoddi4+0x2a0>
    4bde:	subs	r3, #2
    4be0:	add	r4, r7
    4be2:	rsb	r4, r8, r4
    4be6:	orr.w	r0, r3, r0, lsl #16
    4bea:	movs	r1, #0
    4bec:	cmp	r5, #0
    4bee:	beq.n	4cb6 <__udivmoddi4+0x16a>
    4bf0:	lsr.w	r4, r4, lr
    4bf4:	movs	r3, #0
    4bf6:	str	r4, [r5, #0]
    4bf8:	str	r3, [r5, #4]
    4bfa:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4bfe:	cmp	r3, r1
    4c00:	bls.n	4c12 <__udivmoddi4+0xc6>
    4c02:	cmp	r5, #0
    4c04:	beq.n	4cb2 <__udivmoddi4+0x166>
    4c06:	movs	r1, #0
    4c08:	stmia.w	r5, {r0, r6}
    4c0c:	mov	r0, r1
    4c0e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4c12:	clz	r1, r3
    4c16:	cmp	r1, #0
    4c18:	bne.w	4d3c <__udivmoddi4+0x1f0>
    4c1c:	cmp	r3, r6
    4c1e:	bcc.n	4c26 <__udivmoddi4+0xda>
    4c20:	cmp	r2, r0
    4c22:	bhi.w	4e16 <__udivmoddi4+0x2ca>
    4c26:	subs	r4, r0, r2
    4c28:	sbc.w	r6, r6, r3
    4c2c:	movs	r0, #1
    4c2e:	mov	ip, r6
    4c30:	cmp	r5, #0
    4c32:	beq.n	4cb6 <__udivmoddi4+0x16a>
    4c34:	stmia.w	r5, {r4, ip}
    4c38:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4c3c:	cbnz	r2, 4c44 <__udivmoddi4+0xf8>
    4c3e:	movs	r7, #1
    4c40:	udiv	r7, r7, r2
    4c44:	clz	lr, r7
    4c48:	cmp.w	lr, #0
    4c4c:	bne.n	4cba <__udivmoddi4+0x16e>
    4c4e:	subs	r3, r6, r7
    4c50:	mov.w	r8, r7, lsr #16
    4c54:	uxth.w	ip, r7
    4c58:	movs	r1, #1
    4c5a:	udiv	r0, r3, r8
    4c5e:	lsrs	r2, r4, #16
    4c60:	mls	r6, r8, r0, r3
    4c64:	orr.w	r6, r2, r6, lsl #16
    4c68:	mul.w	r3, ip, r0
    4c6c:	cmp	r3, r6
    4c6e:	bls.n	4c80 <__udivmoddi4+0x134>
    4c70:	adds	r6, r6, r7
    4c72:	add.w	r2, r0, #4294967295
    4c76:	bcs.n	4c7e <__udivmoddi4+0x132>
    4c78:	cmp	r3, r6
    4c7a:	bhi.w	4e1a <__udivmoddi4+0x2ce>
    4c7e:	mov	r0, r2
    4c80:	subs	r6, r6, r3
    4c82:	uxth	r2, r4
    4c84:	udiv	r3, r6, r8
    4c88:	mls	r6, r8, r3, r6
    4c8c:	orr.w	r4, r2, r6, lsl #16
    4c90:	mul.w	ip, ip, r3
    4c94:	cmp	ip, r4
    4c96:	bls.n	4ca8 <__udivmoddi4+0x15c>
    4c98:	adds	r4, r4, r7
    4c9a:	add.w	r2, r3, #4294967295
    4c9e:	bcs.n	4ca6 <__udivmoddi4+0x15a>
    4ca0:	cmp	ip, r4
    4ca2:	bhi.w	4e10 <__udivmoddi4+0x2c4>
    4ca6:	mov	r3, r2
    4ca8:	rsb	r4, ip, r4
    4cac:	orr.w	r0, r3, r0, lsl #16
    4cb0:	b.n	4bec <__udivmoddi4+0xa0>
    4cb2:	mov	r1, r5
    4cb4:	mov	r0, r5
    4cb6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4cba:	rsb	r1, lr, #32
    4cbe:	lsl.w	r3, r6, lr
    4cc2:	lsl.w	r7, r7, lr
    4cc6:	lsr.w	r9, r0, r1
    4cca:	mov.w	r8, r7, lsr #16
    4cce:	lsrs	r6, r1
    4cd0:	orr.w	r9, r9, r3
    4cd4:	udiv	sl, r6, r8
    4cd8:	mov.w	r4, r9, lsr #16
    4cdc:	mls	r6, r8, sl, r6
    4ce0:	uxth.w	ip, r7
    4ce4:	orr.w	r3, r4, r6, lsl #16
    4ce8:	mul.w	r2, sl, ip
    4cec:	cmp	r2, r3
    4cee:	lsl.w	r4, r0, lr
    4cf2:	bls.n	4d0a <__udivmoddi4+0x1be>
    4cf4:	adds	r3, r3, r7
    4cf6:	add.w	r1, sl, #4294967295
    4cfa:	bcs.w	4e0c <__udivmoddi4+0x2c0>
    4cfe:	cmp	r2, r3
    4d00:	bls.w	4e0c <__udivmoddi4+0x2c0>
    4d04:	sub.w	sl, sl, #2
    4d08:	add	r3, r7
    4d0a:	subs	r3, r3, r2
    4d0c:	uxth.w	r9, r9
    4d10:	udiv	r1, r3, r8
    4d14:	mls	r3, r8, r1, r3
    4d18:	orr.w	r3, r9, r3, lsl #16
    4d1c:	mul.w	r6, r1, ip
    4d20:	cmp	r6, r3
    4d22:	bls.n	4d34 <__udivmoddi4+0x1e8>
    4d24:	adds	r3, r3, r7
    4d26:	add.w	r2, r1, #4294967295
    4d2a:	bcs.n	4e04 <__udivmoddi4+0x2b8>
    4d2c:	cmp	r6, r3
    4d2e:	bls.n	4e04 <__udivmoddi4+0x2b8>
    4d30:	subs	r1, #2
    4d32:	add	r3, r7
    4d34:	subs	r3, r3, r6
    4d36:	orr.w	r1, r1, sl, lsl #16
    4d3a:	b.n	4c5a <__udivmoddi4+0x10e>
    4d3c:	rsb	lr, r1, #32
    4d40:	lsr.w	r4, r2, lr
    4d44:	lsls	r3, r1
    4d46:	orrs	r3, r4
    4d48:	lsr.w	r7, r0, lr
    4d4c:	lsl.w	r4, r6, r1
    4d50:	mov.w	ip, r3, lsr #16
    4d54:	lsr.w	r6, r6, lr
    4d58:	orrs	r4, r7
    4d5a:	udiv	r9, r6, ip
    4d5e:	lsrs	r7, r4, #16
    4d60:	mls	r6, ip, r9, r6
    4d64:	uxth.w	r8, r3
    4d68:	orr.w	r6, r7, r6, lsl #16
    4d6c:	mul.w	r7, r9, r8
    4d70:	cmp	r7, r6
    4d72:	lsl.w	r2, r2, r1
    4d76:	lsl.w	sl, r0, r1
    4d7a:	bls.n	4d8e <__udivmoddi4+0x242>
    4d7c:	adds	r6, r6, r3
    4d7e:	add.w	r0, r9, #4294967295
    4d82:	bcs.n	4e08 <__udivmoddi4+0x2bc>
    4d84:	cmp	r7, r6
    4d86:	bls.n	4e08 <__udivmoddi4+0x2bc>
    4d88:	sub.w	r9, r9, #2
    4d8c:	add	r6, r3
    4d8e:	subs	r6, r6, r7
    4d90:	uxth	r0, r4
    4d92:	udiv	r4, r6, ip
    4d96:	mls	r6, ip, r4, r6
    4d9a:	orr.w	r7, r0, r6, lsl #16
    4d9e:	mul.w	r8, r4, r8
    4da2:	cmp	r8, r7
    4da4:	bls.n	4db6 <__udivmoddi4+0x26a>
    4da6:	adds	r7, r7, r3
    4da8:	add.w	r0, r4, #4294967295
    4dac:	bcs.n	4e00 <__udivmoddi4+0x2b4>
    4dae:	cmp	r8, r7
    4db0:	bls.n	4e00 <__udivmoddi4+0x2b4>
    4db2:	subs	r4, #2
    4db4:	add	r7, r3
    4db6:	orr.w	r0, r4, r9, lsl #16
    4dba:	rsb	r7, r8, r7
    4dbe:	umull	r8, r9, r0, r2
    4dc2:	cmp	r7, r9
    4dc4:	mov	r4, r8
    4dc6:	mov	r6, r9
    4dc8:	bcc.n	4df4 <__udivmoddi4+0x2a8>
    4dca:	beq.n	4e20 <__udivmoddi4+0x2d4>
    4dcc:	cbz	r5, 4e28 <__udivmoddi4+0x2dc>
    4dce:	subs.w	r3, sl, r4
    4dd2:	sbc.w	r7, r7, r6
    4dd6:	lsl.w	lr, r7, lr
    4dda:	lsrs	r3, r1
    4ddc:	lsrs	r7, r1
    4dde:	orr.w	r3, lr, r3
    4de2:	stmia.w	r5, {r3, r7}
    4de6:	movs	r1, #0
    4de8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4dec:	mov	r3, r2
    4dee:	b.n	4be2 <__udivmoddi4+0x96>
    4df0:	mov	r0, r2
    4df2:	b.n	4bb6 <__udivmoddi4+0x6a>
    4df4:	subs.w	r4, r8, r2
    4df8:	sbc.w	r6, r9, r3
    4dfc:	subs	r0, #1
    4dfe:	b.n	4dcc <__udivmoddi4+0x280>
    4e00:	mov	r4, r0
    4e02:	b.n	4db6 <__udivmoddi4+0x26a>
    4e04:	mov	r1, r2
    4e06:	b.n	4d34 <__udivmoddi4+0x1e8>
    4e08:	mov	r9, r0
    4e0a:	b.n	4d8e <__udivmoddi4+0x242>
    4e0c:	mov	sl, r1
    4e0e:	b.n	4d0a <__udivmoddi4+0x1be>
    4e10:	subs	r3, #2
    4e12:	add	r4, r7
    4e14:	b.n	4ca8 <__udivmoddi4+0x15c>
    4e16:	mov	r0, r1
    4e18:	b.n	4c30 <__udivmoddi4+0xe4>
    4e1a:	subs	r0, #2
    4e1c:	add	r6, r7
    4e1e:	b.n	4c80 <__udivmoddi4+0x134>
    4e20:	cmp	sl, r8
    4e22:	bcc.n	4df4 <__udivmoddi4+0x2a8>
    4e24:	mov	r6, r7
    4e26:	b.n	4dcc <__udivmoddi4+0x280>
    4e28:	mov	r1, r5
    4e2a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4e2e:	nop

00004e30 <__aeabi_idiv0>:
    4e30:	bx	lr
    4e32:	nop

00004e34 <__errno>:
    4e34:	ldr	r3, [pc, #4]	; (4e3c <__errno+0x8>)
    4e36:	ldr	r0, [r3, #0]
    4e38:	bx	lr
    4e3a:	nop
    4e3c:	.word	0x200017ac

00004e40 <__libc_init_array>:
    4e40:	push	{r4, r5, r6, lr}
    4e42:	ldr	r6, [pc, #60]	; (4e80 <__libc_init_array+0x40>)
    4e44:	ldr	r5, [pc, #60]	; (4e84 <__libc_init_array+0x44>)
    4e46:	subs	r6, r6, r5
    4e48:	asrs	r6, r6, #2
    4e4a:	it	ne
    4e4c:	movne	r4, #0
    4e4e:	beq.n	4e5c <__libc_init_array+0x1c>
    4e50:	adds	r4, #1
    4e52:	ldr.w	r3, [r5], #4
    4e56:	blx	r3
    4e58:	cmp	r6, r4
    4e5a:	bne.n	4e50 <__libc_init_array+0x10>
    4e5c:	ldr	r6, [pc, #40]	; (4e88 <__libc_init_array+0x48>)
    4e5e:	ldr	r5, [pc, #44]	; (4e8c <__libc_init_array+0x4c>)
    4e60:	subs	r6, r6, r5
    4e62:	bl	8e38 <___init_veneer>
    4e66:	asrs	r6, r6, #2
    4e68:	it	ne
    4e6a:	movne	r4, #0
    4e6c:	beq.n	4e7c <__libc_init_array+0x3c>
    4e6e:	adds	r4, #1
    4e70:	ldr.w	r3, [r5], #4
    4e74:	blx	r3
    4e76:	cmp	r6, r4
    4e78:	bne.n	4e6e <__libc_init_array+0x2e>
    4e7a:	pop	{r4, r5, r6, pc}
    4e7c:	pop	{r4, r5, r6, pc}
    4e7e:	nop
    4e80:	.word	0x60001e68
    4e84:	.word	0x60001e68
    4e88:	.word	0x60001e70
    4e8c:	.word	0x60001e68

00004e90 <_malloc_r>:
    4e90:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4e94:	add.w	r5, r1, #11
    4e98:	cmp	r5, #22
    4e9a:	sub	sp, #12
    4e9c:	mov	r6, r0
    4e9e:	bls.w	4fe0 <_malloc_r+0x150>
    4ea2:	bics.w	r5, r5, #7
    4ea6:	bmi.w	5028 <_malloc_r+0x198>
    4eaa:	cmp	r1, r5
    4eac:	bhi.w	5028 <_malloc_r+0x198>
    4eb0:	bl	5590 <__malloc_lock>
    4eb4:	cmp.w	r5, #504	; 0x1f8
    4eb8:	bcc.w	53f4 <_malloc_r+0x564>
    4ebc:	lsrs	r3, r5, #9
    4ebe:	beq.w	5036 <_malloc_r+0x1a6>
    4ec2:	cmp	r3, #4
    4ec4:	bhi.w	51ce <_malloc_r+0x33e>
    4ec8:	lsrs	r0, r5, #6
    4eca:	add.w	lr, r0, #57	; 0x39
    4ece:	mov.w	r3, lr, lsl #1
    4ed2:	adds	r0, #56	; 0x38
    4ed4:	ldr	r7, [pc, #784]	; (51e8 <_malloc_r+0x358>)
    4ed6:	add.w	r3, r7, r3, lsl #2
    4eda:	sub.w	r1, r3, #8
    4ede:	ldr	r4, [r3, #4]
    4ee0:	cmp	r1, r4
    4ee2:	bne.n	4ef4 <_malloc_r+0x64>
    4ee4:	b.n	5040 <_malloc_r+0x1b0>
    4ee6:	cmp	r2, #0
    4ee8:	bge.w	5044 <_malloc_r+0x1b4>
    4eec:	ldr	r4, [r4, #12]
    4eee:	cmp	r1, r4
    4ef0:	beq.w	5040 <_malloc_r+0x1b0>
    4ef4:	ldr	r3, [r4, #4]
    4ef6:	bic.w	r3, r3, #3
    4efa:	subs	r2, r3, r5
    4efc:	cmp	r2, #15
    4efe:	ble.n	4ee6 <_malloc_r+0x56>
    4f00:	ldr	r1, [pc, #740]	; (51e8 <_malloc_r+0x358>)
    4f02:	ldr	r4, [r7, #16]
    4f04:	add.w	lr, r1, #8
    4f08:	cmp	r4, lr
    4f0a:	beq.w	5274 <_malloc_r+0x3e4>
    4f0e:	ldr	r3, [r4, #4]
    4f10:	bic.w	r3, r3, #3
    4f14:	subs	r2, r3, r5
    4f16:	cmp	r2, #15
    4f18:	bgt.w	524e <_malloc_r+0x3be>
    4f1c:	cmp	r2, #0
    4f1e:	str.w	lr, [r1, #20]
    4f22:	str.w	lr, [r1, #16]
    4f26:	bge.w	5066 <_malloc_r+0x1d6>
    4f2a:	cmp.w	r3, #512	; 0x200
    4f2e:	bcs.w	5200 <_malloc_r+0x370>
    4f32:	lsrs	r3, r3, #3
    4f34:	add.w	ip, r3, #1
    4f38:	movs	r2, #1
    4f3a:	asrs	r3, r3, #2
    4f3c:	lsl.w	r3, r2, r3
    4f40:	ldr	r2, [r1, #4]
    4f42:	ldr.w	r8, [r1, ip, lsl #3]
    4f46:	str.w	r8, [r4, #8]
    4f4a:	add.w	r9, r1, ip, lsl #3
    4f4e:	orrs	r2, r3
    4f50:	sub.w	r3, r9, #8
    4f54:	str	r3, [r4, #12]
    4f56:	str	r2, [r1, #4]
    4f58:	str.w	r4, [r1, ip, lsl #3]
    4f5c:	str.w	r4, [r8, #12]
    4f60:	asrs	r3, r0, #2
    4f62:	movs	r4, #1
    4f64:	lsls	r4, r3
    4f66:	cmp	r4, r2
    4f68:	bhi.w	5080 <_malloc_r+0x1f0>
    4f6c:	tst	r4, r2
    4f6e:	bne.n	4f7e <_malloc_r+0xee>
    4f70:	bic.w	r0, r0, #3
    4f74:	lsls	r4, r4, #1
    4f76:	tst	r4, r2
    4f78:	add.w	r0, r0, #4
    4f7c:	beq.n	4f74 <_malloc_r+0xe4>
    4f7e:	add.w	r9, r7, r0, lsl #3
    4f82:	mov	ip, r9
    4f84:	mov	r8, r0
    4f86:	ldr.w	r1, [ip, #12]
    4f8a:	cmp	ip, r1
    4f8c:	bne.n	4f9e <_malloc_r+0x10e>
    4f8e:	b.n	5278 <_malloc_r+0x3e8>
    4f90:	cmp	r2, #0
    4f92:	bge.w	5298 <_malloc_r+0x408>
    4f96:	ldr	r1, [r1, #12]
    4f98:	cmp	ip, r1
    4f9a:	beq.w	5278 <_malloc_r+0x3e8>
    4f9e:	ldr	r3, [r1, #4]
    4fa0:	bic.w	r3, r3, #3
    4fa4:	subs	r2, r3, r5
    4fa6:	cmp	r2, #15
    4fa8:	ble.n	4f90 <_malloc_r+0x100>
    4faa:	mov	r4, r1
    4fac:	ldr.w	ip, [r1, #12]
    4fb0:	ldr.w	r8, [r4, #8]!
    4fb4:	adds	r3, r1, r5
    4fb6:	orr.w	r5, r5, #1
    4fba:	str	r5, [r1, #4]
    4fbc:	orr.w	r1, r2, #1
    4fc0:	str.w	ip, [r8, #12]
    4fc4:	mov	r0, r6
    4fc6:	str.w	r8, [ip, #8]
    4fca:	str	r3, [r7, #20]
    4fcc:	str	r3, [r7, #16]
    4fce:	str.w	lr, [r3, #12]
    4fd2:	str.w	lr, [r3, #8]
    4fd6:	str	r1, [r3, #4]
    4fd8:	str	r2, [r3, r2]
    4fda:	bl	5594 <__malloc_unlock>
    4fde:	b.n	5020 <_malloc_r+0x190>
    4fe0:	cmp	r1, #16
    4fe2:	bhi.n	5028 <_malloc_r+0x198>
    4fe4:	bl	5590 <__malloc_lock>
    4fe8:	movs	r5, #16
    4fea:	movs	r3, #6
    4fec:	movs	r0, #2
    4fee:	ldr	r7, [pc, #504]	; (51e8 <_malloc_r+0x358>)
    4ff0:	add.w	r3, r7, r3, lsl #2
    4ff4:	sub.w	r2, r3, #8
    4ff8:	ldr	r4, [r3, #4]
    4ffa:	cmp	r4, r2
    4ffc:	beq.w	528a <_malloc_r+0x3fa>
    5000:	ldr	r3, [r4, #4]
    5002:	ldr	r1, [r4, #12]
    5004:	ldr	r5, [r4, #8]
    5006:	bic.w	r3, r3, #3
    500a:	add	r3, r4
    500c:	mov	r0, r6
    500e:	ldr	r2, [r3, #4]
    5010:	str	r1, [r5, #12]
    5012:	orr.w	r2, r2, #1
    5016:	str	r5, [r1, #8]
    5018:	str	r2, [r3, #4]
    501a:	bl	5594 <__malloc_unlock>
    501e:	adds	r4, #8
    5020:	mov	r0, r4
    5022:	add	sp, #12
    5024:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5028:	movs	r4, #0
    502a:	movs	r3, #12
    502c:	mov	r0, r4
    502e:	str	r3, [r6, #0]
    5030:	add	sp, #12
    5032:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5036:	movs	r3, #128	; 0x80
    5038:	mov.w	lr, #64	; 0x40
    503c:	movs	r0, #63	; 0x3f
    503e:	b.n	4ed4 <_malloc_r+0x44>
    5040:	mov	r0, lr
    5042:	b.n	4f00 <_malloc_r+0x70>
    5044:	add	r3, r4
    5046:	ldr	r1, [r4, #12]
    5048:	ldr	r2, [r3, #4]
    504a:	ldr	r5, [r4, #8]
    504c:	orr.w	r2, r2, #1
    5050:	str	r1, [r5, #12]
    5052:	mov	r0, r6
    5054:	str	r5, [r1, #8]
    5056:	str	r2, [r3, #4]
    5058:	bl	5594 <__malloc_unlock>
    505c:	adds	r4, #8
    505e:	mov	r0, r4
    5060:	add	sp, #12
    5062:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5066:	add	r3, r4
    5068:	mov	r0, r6
    506a:	ldr	r2, [r3, #4]
    506c:	orr.w	r2, r2, #1
    5070:	str	r2, [r3, #4]
    5072:	bl	5594 <__malloc_unlock>
    5076:	adds	r4, #8
    5078:	mov	r0, r4
    507a:	add	sp, #12
    507c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5080:	ldr	r4, [r7, #8]
    5082:	ldr	r3, [r4, #4]
    5084:	bic.w	r8, r3, #3
    5088:	cmp	r8, r5
    508a:	bcc.n	5096 <_malloc_r+0x206>
    508c:	rsb	r3, r5, r8
    5090:	cmp	r3, #15
    5092:	bgt.w	51ae <_malloc_r+0x31e>
    5096:	ldr	r3, [pc, #340]	; (51ec <_malloc_r+0x35c>)
    5098:	ldr.w	r9, [pc, #352]	; 51fc <_malloc_r+0x36c>
    509c:	ldr	r2, [r3, #0]
    509e:	ldr.w	r3, [r9]
    50a2:	adds	r3, #1
    50a4:	add	r2, r5
    50a6:	add.w	sl, r4, r8
    50aa:	beq.w	536e <_malloc_r+0x4de>
    50ae:	add.w	r2, r2, #4096	; 0x1000
    50b2:	adds	r2, #15
    50b4:	bic.w	r2, r2, #4080	; 0xff0
    50b8:	bic.w	r2, r2, #15
    50bc:	mov	r1, r2
    50be:	mov	r0, r6
    50c0:	str	r2, [sp, #4]
    50c2:	bl	5978 <_sbrk_r>
    50c6:	cmp.w	r0, #4294967295
    50ca:	mov	fp, r0
    50cc:	ldr	r2, [sp, #4]
    50ce:	beq.w	5382 <_malloc_r+0x4f2>
    50d2:	cmp	sl, r0
    50d4:	bhi.w	52d0 <_malloc_r+0x440>
    50d8:	ldr	r3, [pc, #276]	; (51f0 <_malloc_r+0x360>)
    50da:	ldr	r1, [r3, #0]
    50dc:	cmp	sl, fp
    50de:	add	r1, r2
    50e0:	str	r1, [r3, #0]
    50e2:	beq.w	538c <_malloc_r+0x4fc>
    50e6:	ldr.w	r0, [r9]
    50ea:	ldr.w	lr, [pc, #272]	; 51fc <_malloc_r+0x36c>
    50ee:	adds	r0, #1
    50f0:	ittet	ne
    50f2:	rsbne	sl, sl, fp
    50f6:	addne	r1, sl
    50f8:	streq.w	fp, [lr]
    50fc:	strne	r1, [r3, #0]
    50fe:	ands.w	r1, fp, #7
    5102:	beq.w	5334 <_malloc_r+0x4a4>
    5106:	rsb	r0, r1, #8
    510a:	rsb	r1, r1, #4096	; 0x1000
    510e:	add	fp, r0
    5110:	adds	r1, #8
    5112:	add	r2, fp
    5114:	ubfx	r2, r2, #0, #12
    5118:	rsb	r9, r2, r1
    511c:	mov	r1, r9
    511e:	mov	r0, r6
    5120:	str	r3, [sp, #4]
    5122:	bl	5978 <_sbrk_r>
    5126:	adds	r3, r0, #1
    5128:	ldr	r3, [sp, #4]
    512a:	beq.w	53ac <_malloc_r+0x51c>
    512e:	rsb	r2, fp, r0
    5132:	add	r2, r9
    5134:	orr.w	r2, r2, #1
    5138:	ldr	r1, [r3, #0]
    513a:	str.w	fp, [r7, #8]
    513e:	add	r1, r9
    5140:	cmp	r4, r7
    5142:	str.w	r2, [fp, #4]
    5146:	str	r1, [r3, #0]
    5148:	ldr.w	r9, [pc, #164]	; 51f0 <_malloc_r+0x360>
    514c:	beq.n	517c <_malloc_r+0x2ec>
    514e:	cmp.w	r8, #15
    5152:	bls.w	5350 <_malloc_r+0x4c0>
    5156:	ldr	r2, [r4, #4]
    5158:	sub.w	r3, r8, #12
    515c:	bic.w	r3, r3, #7
    5160:	adds	r0, r4, r3
    5162:	and.w	r2, r2, #1
    5166:	mov.w	lr, #5
    516a:	orrs	r2, r3
    516c:	cmp	r3, #15
    516e:	str	r2, [r4, #4]
    5170:	str.w	lr, [r0, #4]
    5174:	str.w	lr, [r0, #8]
    5178:	bhi.w	53b4 <_malloc_r+0x524>
    517c:	ldr	r3, [pc, #116]	; (51f4 <_malloc_r+0x364>)
    517e:	ldr	r4, [r7, #8]
    5180:	ldr	r2, [r3, #0]
    5182:	cmp	r1, r2
    5184:	it	hi
    5186:	strhi	r1, [r3, #0]
    5188:	ldr	r3, [pc, #108]	; (51f8 <_malloc_r+0x368>)
    518a:	ldr	r2, [r3, #0]
    518c:	cmp	r1, r2
    518e:	ldr	r2, [r4, #4]
    5190:	it	hi
    5192:	strhi	r1, [r3, #0]
    5194:	bic.w	r2, r2, #3
    5198:	cmp	r5, r2
    519a:	sub.w	r3, r2, r5
    519e:	bhi.n	51a4 <_malloc_r+0x314>
    51a0:	cmp	r3, #15
    51a2:	bgt.n	51ae <_malloc_r+0x31e>
    51a4:	mov	r0, r6
    51a6:	bl	5594 <__malloc_unlock>
    51aa:	movs	r4, #0
    51ac:	b.n	5020 <_malloc_r+0x190>
    51ae:	adds	r2, r4, r5
    51b0:	orr.w	r3, r3, #1
    51b4:	orr.w	r5, r5, #1
    51b8:	str	r5, [r4, #4]
    51ba:	mov	r0, r6
    51bc:	str	r2, [r7, #8]
    51be:	str	r3, [r2, #4]
    51c0:	bl	5594 <__malloc_unlock>
    51c4:	adds	r4, #8
    51c6:	mov	r0, r4
    51c8:	add	sp, #12
    51ca:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    51ce:	cmp	r3, #20
    51d0:	bls.n	52b6 <_malloc_r+0x426>
    51d2:	cmp	r3, #84	; 0x54
    51d4:	bhi.w	5320 <_malloc_r+0x490>
    51d8:	lsrs	r0, r5, #12
    51da:	add.w	lr, r0, #111	; 0x6f
    51de:	mov.w	r3, lr, lsl #1
    51e2:	adds	r0, #110	; 0x6e
    51e4:	b.n	4ed4 <_malloc_r+0x44>
    51e6:	nop
    51e8:	.word	0x2000139c
    51ec:	.word	0x20001cf0
    51f0:	.word	0x20001cc0
    51f4:	.word	0x20001ce8
    51f8:	.word	0x20001cec
    51fc:	.word	0x200017a4
    5200:	lsrs	r2, r3, #9
    5202:	cmp	r2, #4
    5204:	bls.n	52c4 <_malloc_r+0x434>
    5206:	cmp	r2, #20
    5208:	bhi.w	5372 <_malloc_r+0x4e2>
    520c:	add.w	r1, r2, #92	; 0x5c
    5210:	lsls	r1, r1, #1
    5212:	adds	r2, #91	; 0x5b
    5214:	add.w	ip, r7, r1, lsl #2
    5218:	ldr.w	r1, [r7, r1, lsl #2]
    521c:	ldr.w	r8, [pc, #476]	; 53fc <_malloc_r+0x56c>
    5220:	sub.w	ip, ip, #8
    5224:	cmp	ip, r1
    5226:	beq.w	533a <_malloc_r+0x4aa>
    522a:	ldr	r2, [r1, #4]
    522c:	bic.w	r2, r2, #3
    5230:	cmp	r3, r2
    5232:	bcs.n	523a <_malloc_r+0x3aa>
    5234:	ldr	r1, [r1, #8]
    5236:	cmp	ip, r1
    5238:	bne.n	522a <_malloc_r+0x39a>
    523a:	ldr.w	ip, [r1, #12]
    523e:	ldr	r2, [r7, #4]
    5240:	str.w	ip, [r4, #12]
    5244:	str	r1, [r4, #8]
    5246:	str.w	r4, [ip, #8]
    524a:	str	r4, [r1, #12]
    524c:	b.n	4f60 <_malloc_r+0xd0>
    524e:	adds	r3, r4, r5
    5250:	orr.w	r7, r2, #1
    5254:	orr.w	r5, r5, #1
    5258:	str	r5, [r4, #4]
    525a:	mov	r0, r6
    525c:	str	r3, [r1, #20]
    525e:	str	r3, [r1, #16]
    5260:	str.w	lr, [r3, #12]
    5264:	str.w	lr, [r3, #8]
    5268:	str	r7, [r3, #4]
    526a:	str	r2, [r3, r2]
    526c:	adds	r4, #8
    526e:	bl	5594 <__malloc_unlock>
    5272:	b.n	5020 <_malloc_r+0x190>
    5274:	ldr	r2, [r1, #4]
    5276:	b.n	4f60 <_malloc_r+0xd0>
    5278:	add.w	r8, r8, #1
    527c:	tst.w	r8, #3
    5280:	add.w	ip, ip, #8
    5284:	bne.w	4f86 <_malloc_r+0xf6>
    5288:	b.n	52ec <_malloc_r+0x45c>
    528a:	ldr	r4, [r3, #12]
    528c:	cmp	r3, r4
    528e:	it	eq
    5290:	addeq	r0, #2
    5292:	beq.w	4f00 <_malloc_r+0x70>
    5296:	b.n	5000 <_malloc_r+0x170>
    5298:	add	r3, r1
    529a:	mov	r4, r1
    529c:	ldr	r2, [r3, #4]
    529e:	ldr	r1, [r1, #12]
    52a0:	ldr.w	r5, [r4, #8]!
    52a4:	orr.w	r2, r2, #1
    52a8:	str	r2, [r3, #4]
    52aa:	mov	r0, r6
    52ac:	str	r1, [r5, #12]
    52ae:	str	r5, [r1, #8]
    52b0:	bl	5594 <__malloc_unlock>
    52b4:	b.n	5020 <_malloc_r+0x190>
    52b6:	add.w	lr, r3, #92	; 0x5c
    52ba:	add.w	r0, r3, #91	; 0x5b
    52be:	mov.w	r3, lr, lsl #1
    52c2:	b.n	4ed4 <_malloc_r+0x44>
    52c4:	lsrs	r2, r3, #6
    52c6:	add.w	r1, r2, #57	; 0x39
    52ca:	lsls	r1, r1, #1
    52cc:	adds	r2, #56	; 0x38
    52ce:	b.n	5214 <_malloc_r+0x384>
    52d0:	cmp	r4, r7
    52d2:	ldr	r3, [pc, #296]	; (53fc <_malloc_r+0x56c>)
    52d4:	beq.w	50d8 <_malloc_r+0x248>
    52d8:	ldr	r4, [r3, #8]
    52da:	ldr	r2, [r4, #4]
    52dc:	bic.w	r2, r2, #3
    52e0:	b.n	5198 <_malloc_r+0x308>
    52e2:	ldr.w	r3, [r9], #-8
    52e6:	cmp	r9, r3
    52e8:	bne.w	53f0 <_malloc_r+0x560>
    52ec:	tst.w	r0, #3
    52f0:	add.w	r0, r0, #4294967295
    52f4:	bne.n	52e2 <_malloc_r+0x452>
    52f6:	ldr	r3, [r7, #4]
    52f8:	bic.w	r3, r3, r4
    52fc:	str	r3, [r7, #4]
    52fe:	lsls	r4, r4, #1
    5300:	cmp	r4, r3
    5302:	bhi.w	5080 <_malloc_r+0x1f0>
    5306:	cmp	r4, #0
    5308:	beq.w	5080 <_malloc_r+0x1f0>
    530c:	tst	r4, r3
    530e:	mov	r0, r8
    5310:	bne.w	4f7e <_malloc_r+0xee>
    5314:	lsls	r4, r4, #1
    5316:	tst	r4, r3
    5318:	add.w	r0, r0, #4
    531c:	beq.n	5314 <_malloc_r+0x484>
    531e:	b.n	4f7e <_malloc_r+0xee>
    5320:	cmp.w	r3, #340	; 0x154
    5324:	bhi.n	5358 <_malloc_r+0x4c8>
    5326:	lsrs	r0, r5, #15
    5328:	add.w	lr, r0, #120	; 0x78
    532c:	mov.w	r3, lr, lsl #1
    5330:	adds	r0, #119	; 0x77
    5332:	b.n	4ed4 <_malloc_r+0x44>
    5334:	mov.w	r1, #4096	; 0x1000
    5338:	b.n	5112 <_malloc_r+0x282>
    533a:	movs	r1, #1
    533c:	ldr.w	r3, [r8, #4]
    5340:	asrs	r2, r2, #2
    5342:	lsl.w	r2, r1, r2
    5346:	orrs	r2, r3
    5348:	str.w	r2, [r8, #4]
    534c:	mov	r1, ip
    534e:	b.n	5240 <_malloc_r+0x3b0>
    5350:	movs	r3, #1
    5352:	str.w	r3, [fp, #4]
    5356:	b.n	51a4 <_malloc_r+0x314>
    5358:	movw	r2, #1364	; 0x554
    535c:	cmp	r3, r2
    535e:	bhi.n	53a2 <_malloc_r+0x512>
    5360:	lsrs	r0, r5, #18
    5362:	add.w	lr, r0, #125	; 0x7d
    5366:	mov.w	r3, lr, lsl #1
    536a:	adds	r0, #124	; 0x7c
    536c:	b.n	4ed4 <_malloc_r+0x44>
    536e:	adds	r2, #16
    5370:	b.n	50bc <_malloc_r+0x22c>
    5372:	cmp	r2, #84	; 0x54
    5374:	bhi.n	53c4 <_malloc_r+0x534>
    5376:	lsrs	r2, r3, #12
    5378:	add.w	r1, r2, #111	; 0x6f
    537c:	lsls	r1, r1, #1
    537e:	adds	r2, #110	; 0x6e
    5380:	b.n	5214 <_malloc_r+0x384>
    5382:	ldr	r4, [r7, #8]
    5384:	ldr	r2, [r4, #4]
    5386:	bic.w	r2, r2, #3
    538a:	b.n	5198 <_malloc_r+0x308>
    538c:	ubfx	r0, sl, #0, #12
    5390:	cmp	r0, #0
    5392:	bne.w	50e6 <_malloc_r+0x256>
    5396:	add	r2, r8
    5398:	ldr	r3, [r7, #8]
    539a:	orr.w	r2, r2, #1
    539e:	str	r2, [r3, #4]
    53a0:	b.n	517c <_malloc_r+0x2ec>
    53a2:	movs	r3, #254	; 0xfe
    53a4:	mov.w	lr, #127	; 0x7f
    53a8:	movs	r0, #126	; 0x7e
    53aa:	b.n	4ed4 <_malloc_r+0x44>
    53ac:	movs	r2, #1
    53ae:	mov.w	r9, #0
    53b2:	b.n	5138 <_malloc_r+0x2a8>
    53b4:	add.w	r1, r4, #8
    53b8:	mov	r0, r6
    53ba:	bl	8368 <_free_r>
    53be:	ldr.w	r1, [r9]
    53c2:	b.n	517c <_malloc_r+0x2ec>
    53c4:	cmp.w	r2, #340	; 0x154
    53c8:	bhi.n	53d6 <_malloc_r+0x546>
    53ca:	lsrs	r2, r3, #15
    53cc:	add.w	r1, r2, #120	; 0x78
    53d0:	lsls	r1, r1, #1
    53d2:	adds	r2, #119	; 0x77
    53d4:	b.n	5214 <_malloc_r+0x384>
    53d6:	movw	r1, #1364	; 0x554
    53da:	cmp	r2, r1
    53dc:	bhi.n	53ea <_malloc_r+0x55a>
    53de:	lsrs	r2, r3, #18
    53e0:	add.w	r1, r2, #125	; 0x7d
    53e4:	lsls	r1, r1, #1
    53e6:	adds	r2, #124	; 0x7c
    53e8:	b.n	5214 <_malloc_r+0x384>
    53ea:	movs	r1, #254	; 0xfe
    53ec:	movs	r2, #126	; 0x7e
    53ee:	b.n	5214 <_malloc_r+0x384>
    53f0:	ldr	r3, [r7, #4]
    53f2:	b.n	52fe <_malloc_r+0x46e>
    53f4:	lsrs	r0, r5, #3
    53f6:	adds	r3, r0, #1
    53f8:	lsls	r3, r3, #1
    53fa:	b.n	4fee <_malloc_r+0x15e>
    53fc:	.word	0x2000139c

00005400 <__ascii_mbtowc>:
    5400:	sub	sp, #8
    5402:	cbz	r1, 5418 <__ascii_mbtowc+0x18>
    5404:	cbz	r2, 541e <__ascii_mbtowc+0x1e>
    5406:	cbz	r3, 5424 <__ascii_mbtowc+0x24>
    5408:	ldrb	r3, [r2, #0]
    540a:	str	r3, [r1, #0]
    540c:	ldrb	r2, [r2, #0]
    540e:	adds	r0, r2, #0
    5410:	it	ne
    5412:	movne	r0, #1
    5414:	add	sp, #8
    5416:	bx	lr
    5418:	add	r1, sp, #4
    541a:	cmp	r2, #0
    541c:	bne.n	5406 <__ascii_mbtowc+0x6>
    541e:	mov	r0, r2
    5420:	add	sp, #8
    5422:	bx	lr
    5424:	mvn.w	r0, #1
    5428:	b.n	5414 <__ascii_mbtowc+0x14>
    542a:	nop

0000542c <memmove>:
    542c:	cmp	r0, r1
    542e:	push	{r4, r5, r6, r7, lr}
    5430:	bls.n	544e <memmove+0x22>
    5432:	adds	r3, r1, r2
    5434:	cmp	r0, r3
    5436:	bcs.n	544e <memmove+0x22>
    5438:	adds	r1, r0, r2
    543a:	cmp	r2, #0
    543c:	beq.n	54e2 <memmove+0xb6>
    543e:	subs	r2, r3, r2
    5440:	ldrb.w	r4, [r3, #-1]!
    5444:	strb.w	r4, [r1, #-1]!
    5448:	cmp	r3, r2
    544a:	bne.n	5440 <memmove+0x14>
    544c:	pop	{r4, r5, r6, r7, pc}
    544e:	cmp	r2, #15
    5450:	bls.n	54e4 <memmove+0xb8>
    5452:	orr.w	r3, r1, r0
    5456:	lsls	r3, r3, #30
    5458:	bne.n	54e8 <memmove+0xbc>
    545a:	add.w	r4, r0, #16
    545e:	add.w	r3, r1, #16
    5462:	mov	r5, r2
    5464:	ldr.w	r6, [r3, #-16]
    5468:	str.w	r6, [r4, #-16]
    546c:	ldr.w	r6, [r3, #-12]
    5470:	str.w	r6, [r4, #-12]
    5474:	ldr.w	r6, [r3, #-8]
    5478:	str.w	r6, [r4, #-8]
    547c:	subs	r5, #16
    547e:	ldr.w	r6, [r3, #-4]
    5482:	str.w	r6, [r4, #-4]
    5486:	cmp	r5, #15
    5488:	add.w	r3, r3, #16
    548c:	add.w	r4, r4, #16
    5490:	bhi.n	5464 <memmove+0x38>
    5492:	sub.w	r3, r2, #16
    5496:	bic.w	r3, r3, #15
    549a:	and.w	lr, r2, #15
    549e:	adds	r3, #16
    54a0:	cmp.w	lr, #3
    54a4:	add	r1, r3
    54a6:	add	r3, r0
    54a8:	bls.n	54ee <memmove+0xc2>
    54aa:	subs	r6, r3, #4
    54ac:	mov	r5, r1
    54ae:	mov	r4, lr
    54b0:	subs	r4, #4
    54b2:	ldr.w	r7, [r5], #4
    54b6:	str.w	r7, [r6, #4]!
    54ba:	cmp	r4, #3
    54bc:	bhi.n	54b0 <memmove+0x84>
    54be:	sub.w	r4, lr, #4
    54c2:	bic.w	r4, r4, #3
    54c6:	adds	r4, #4
    54c8:	add	r3, r4
    54ca:	add	r1, r4
    54cc:	and.w	r2, r2, #3
    54d0:	cbz	r2, 54ec <memmove+0xc0>
    54d2:	subs	r3, #1
    54d4:	add	r2, r1
    54d6:	ldrb.w	r4, [r1], #1
    54da:	strb.w	r4, [r3, #1]!
    54de:	cmp	r2, r1
    54e0:	bne.n	54d6 <memmove+0xaa>
    54e2:	pop	{r4, r5, r6, r7, pc}
    54e4:	mov	r3, r0
    54e6:	b.n	54d0 <memmove+0xa4>
    54e8:	mov	r3, r0
    54ea:	b.n	54d2 <memmove+0xa6>
    54ec:	pop	{r4, r5, r6, r7, pc}
    54ee:	mov	r2, lr
    54f0:	b.n	54d0 <memmove+0xa4>
    54f2:	nop

000054f4 <memset>:
    54f4:	push	{r4, r5, r6}
    54f6:	lsls	r4, r0, #30
    54f8:	beq.n	5588 <memset+0x94>
    54fa:	subs	r4, r2, #1
    54fc:	cmp	r2, #0
    54fe:	beq.n	5584 <memset+0x90>
    5500:	uxtb	r5, r1
    5502:	mov	r3, r0
    5504:	b.n	550c <memset+0x18>
    5506:	subs	r2, r4, #1
    5508:	cbz	r4, 5584 <memset+0x90>
    550a:	mov	r4, r2
    550c:	strb.w	r5, [r3], #1
    5510:	lsls	r2, r3, #30
    5512:	bne.n	5506 <memset+0x12>
    5514:	cmp	r4, #3
    5516:	bls.n	5576 <memset+0x82>
    5518:	uxtb	r5, r1
    551a:	orr.w	r5, r5, r5, lsl #8
    551e:	cmp	r4, #15
    5520:	orr.w	r5, r5, r5, lsl #16
    5524:	bls.n	555a <memset+0x66>
    5526:	add.w	r2, r3, #16
    552a:	mov	r6, r4
    552c:	subs	r6, #16
    552e:	cmp	r6, #15
    5530:	str.w	r5, [r2, #-16]
    5534:	str.w	r5, [r2, #-12]
    5538:	str.w	r5, [r2, #-8]
    553c:	str.w	r5, [r2, #-4]
    5540:	add.w	r2, r2, #16
    5544:	bhi.n	552c <memset+0x38>
    5546:	sub.w	r2, r4, #16
    554a:	bic.w	r2, r2, #15
    554e:	and.w	r4, r4, #15
    5552:	adds	r2, #16
    5554:	cmp	r4, #3
    5556:	add	r3, r2
    5558:	bls.n	5576 <memset+0x82>
    555a:	mov	r6, r3
    555c:	mov	r2, r4
    555e:	subs	r2, #4
    5560:	cmp	r2, #3
    5562:	str.w	r5, [r6], #4
    5566:	bhi.n	555e <memset+0x6a>
    5568:	subs	r2, r4, #4
    556a:	bic.w	r2, r2, #3
    556e:	adds	r2, #4
    5570:	add	r3, r2
    5572:	and.w	r4, r4, #3
    5576:	cbz	r4, 5584 <memset+0x90>
    5578:	uxtb	r1, r1
    557a:	add	r4, r3
    557c:	strb.w	r1, [r3], #1
    5580:	cmp	r3, r4
    5582:	bne.n	557c <memset+0x88>
    5584:	pop	{r4, r5, r6}
    5586:	bx	lr
    5588:	mov	r4, r2
    558a:	mov	r3, r0
    558c:	b.n	5514 <memset+0x20>
    558e:	nop

00005590 <__malloc_lock>:
    5590:	bx	lr
    5592:	nop

00005594 <__malloc_unlock>:
    5594:	bx	lr
    5596:	nop

00005598 <_realloc_r>:
    5598:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    559c:	mov	r7, r2
    559e:	sub	sp, #12
    55a0:	cmp	r1, #0
    55a2:	beq.w	5728 <_realloc_r+0x190>
    55a6:	mov	r6, r1
    55a8:	mov	r9, r0
    55aa:	add.w	r5, r7, #11
    55ae:	bl	5590 <__malloc_lock>
    55b2:	ldr.w	lr, [r6, #-4]
    55b6:	cmp	r5, #22
    55b8:	bic.w	r4, lr, #3
    55bc:	sub.w	r8, r6, #8
    55c0:	bhi.n	5644 <_realloc_r+0xac>
    55c2:	movs	r2, #16
    55c4:	mov	r5, r2
    55c6:	cmp	r7, r5
    55c8:	bhi.n	564e <_realloc_r+0xb6>
    55ca:	cmp	r4, r2
    55cc:	bge.n	56ba <_realloc_r+0x122>
    55ce:	ldr	r3, [pc, #804]	; (58f4 <_realloc_r+0x35c>)
    55d0:	ldr	r1, [r3, #8]
    55d2:	add.w	r0, r8, r4
    55d6:	cmp	r0, r1
    55d8:	ldr	r1, [r0, #4]
    55da:	beq.w	5790 <_realloc_r+0x1f8>
    55de:	bic.w	r3, r1, #1
    55e2:	add	r3, r0
    55e4:	ldr	r3, [r3, #4]
    55e6:	lsls	r3, r3, #31
    55e8:	bpl.n	56e6 <_realloc_r+0x14e>
    55ea:	tst.w	lr, #1
    55ee:	beq.n	565c <_realloc_r+0xc4>
    55f0:	mov	r1, r7
    55f2:	mov	r0, r9
    55f4:	bl	4e90 <_malloc_r>
    55f8:	mov	r7, r0
    55fa:	cbz	r0, 5636 <_realloc_r+0x9e>
    55fc:	ldr.w	r3, [r6, #-4]
    5600:	bic.w	r3, r3, #1
    5604:	add	r3, r8
    5606:	sub.w	r2, r0, #8
    560a:	cmp	r2, r3
    560c:	beq.w	5898 <_realloc_r+0x300>
    5610:	subs	r2, r4, #4
    5612:	cmp	r2, #36	; 0x24
    5614:	bhi.w	587a <_realloc_r+0x2e2>
    5618:	cmp	r2, #19
    561a:	bhi.w	5826 <_realloc_r+0x28e>
    561e:	mov	r3, r0
    5620:	mov	r2, r6
    5622:	ldr	r1, [r2, #0]
    5624:	str	r1, [r3, #0]
    5626:	ldr	r1, [r2, #4]
    5628:	str	r1, [r3, #4]
    562a:	ldr	r2, [r2, #8]
    562c:	str	r2, [r3, #8]
    562e:	mov	r1, r6
    5630:	mov	r0, r9
    5632:	bl	8368 <_free_r>
    5636:	mov	r0, r9
    5638:	bl	5594 <__malloc_unlock>
    563c:	mov	r0, r7
    563e:	add	sp, #12
    5640:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5644:	bic.w	r5, r5, #7
    5648:	cmp	r5, #0
    564a:	mov	r2, r5
    564c:	bge.n	55c6 <_realloc_r+0x2e>
    564e:	movs	r3, #12
    5650:	movs	r0, #0
    5652:	str.w	r3, [r9]
    5656:	add	sp, #12
    5658:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    565c:	ldr.w	r3, [r6, #-8]
    5660:	rsb	sl, r3, r8
    5664:	ldr.w	r3, [sl, #4]
    5668:	bic.w	ip, r3, #3
    566c:	add.w	r3, r4, ip
    5670:	cmp	r3, r2
    5672:	blt.n	55f0 <_realloc_r+0x58>
    5674:	mov	r7, sl
    5676:	ldr.w	r1, [sl, #12]
    567a:	ldr.w	r0, [r7, #8]!
    567e:	subs	r2, r4, #4
    5680:	cmp	r2, #36	; 0x24
    5682:	str	r1, [r0, #12]
    5684:	str	r0, [r1, #8]
    5686:	bhi.w	58b8 <_realloc_r+0x320>
    568a:	cmp	r2, #19
    568c:	bls.w	58b4 <_realloc_r+0x31c>
    5690:	ldr	r1, [r6, #0]
    5692:	str.w	r1, [sl, #8]
    5696:	ldr	r1, [r6, #4]
    5698:	str.w	r1, [sl, #12]
    569c:	cmp	r2, #27
    569e:	bhi.w	58f8 <_realloc_r+0x360>
    56a2:	adds	r6, #8
    56a4:	add.w	r2, sl, #16
    56a8:	ldr	r1, [r6, #0]
    56aa:	str	r1, [r2, #0]
    56ac:	ldr	r1, [r6, #4]
    56ae:	str	r1, [r2, #4]
    56b0:	ldr	r1, [r6, #8]
    56b2:	str	r1, [r2, #8]
    56b4:	mov	r6, r7
    56b6:	mov	r4, r3
    56b8:	mov	r8, sl
    56ba:	subs	r3, r4, r5
    56bc:	cmp	r3, #15
    56be:	bhi.n	56fc <_realloc_r+0x164>
    56c0:	ldr.w	r3, [r8, #4]
    56c4:	and.w	r3, r3, #1
    56c8:	orrs	r3, r4
    56ca:	add	r4, r8
    56cc:	str.w	r3, [r8, #4]
    56d0:	ldr	r3, [r4, #4]
    56d2:	orr.w	r3, r3, #1
    56d6:	str	r3, [r4, #4]
    56d8:	mov	r0, r9
    56da:	bl	5594 <__malloc_unlock>
    56de:	mov	r0, r6
    56e0:	add	sp, #12
    56e2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    56e6:	bic.w	r1, r1, #3
    56ea:	add	r1, r4
    56ec:	cmp	r1, r2
    56ee:	blt.n	5734 <_realloc_r+0x19c>
    56f0:	ldr	r3, [r0, #12]
    56f2:	ldr	r2, [r0, #8]
    56f4:	mov	r4, r1
    56f6:	str	r3, [r2, #12]
    56f8:	str	r2, [r3, #8]
    56fa:	b.n	56ba <_realloc_r+0x122>
    56fc:	ldr.w	r2, [r8, #4]
    5700:	add.w	r1, r8, r5
    5704:	and.w	r2, r2, #1
    5708:	orrs	r5, r2
    570a:	orr.w	r2, r3, #1
    570e:	add	r3, r1
    5710:	str.w	r5, [r8, #4]
    5714:	str	r2, [r1, #4]
    5716:	ldr	r2, [r3, #4]
    5718:	orr.w	r2, r2, #1
    571c:	adds	r1, #8
    571e:	str	r2, [r3, #4]
    5720:	mov	r0, r9
    5722:	bl	8368 <_free_r>
    5726:	b.n	56d8 <_realloc_r+0x140>
    5728:	mov	r1, r2
    572a:	add	sp, #12
    572c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5730:	b.w	4e90 <_malloc_r>
    5734:	tst.w	lr, #1
    5738:	bne.w	55f0 <_realloc_r+0x58>
    573c:	ldr.w	r3, [r6, #-8]
    5740:	rsb	sl, r3, r8
    5744:	ldr.w	r3, [sl, #4]
    5748:	bic.w	ip, r3, #3
    574c:	add.w	lr, r1, ip
    5750:	cmp	lr, r2
    5752:	blt.n	566c <_realloc_r+0xd4>
    5754:	ldr	r3, [r0, #12]
    5756:	ldr	r2, [r0, #8]
    5758:	mov	r7, sl
    575a:	str	r3, [r2, #12]
    575c:	str	r2, [r3, #8]
    575e:	ldr.w	r1, [r7, #8]!
    5762:	ldr.w	r3, [sl, #12]
    5766:	str	r3, [r1, #12]
    5768:	subs	r2, r4, #4
    576a:	cmp	r2, #36	; 0x24
    576c:	str	r1, [r3, #8]
    576e:	bhi.w	58a4 <_realloc_r+0x30c>
    5772:	cmp	r2, #19
    5774:	bls.n	583c <_realloc_r+0x2a4>
    5776:	ldr	r3, [r6, #0]
    5778:	str.w	r3, [sl, #8]
    577c:	ldr	r3, [r6, #4]
    577e:	str.w	r3, [sl, #12]
    5782:	cmp	r2, #27
    5784:	bhi.w	58c8 <_realloc_r+0x330>
    5788:	adds	r6, #8
    578a:	add.w	r3, sl, #16
    578e:	b.n	583e <_realloc_r+0x2a6>
    5790:	bic.w	fp, r1, #3
    5794:	add	fp, r4
    5796:	add.w	r0, r5, #16
    579a:	cmp	fp, r0
    579c:	bge.n	5852 <_realloc_r+0x2ba>
    579e:	tst.w	lr, #1
    57a2:	bne.w	55f0 <_realloc_r+0x58>
    57a6:	ldr.w	r1, [r6, #-8]
    57aa:	rsb	sl, r1, r8
    57ae:	ldr.w	r1, [sl, #4]
    57b2:	bic.w	ip, r1, #3
    57b6:	add	fp, ip
    57b8:	cmp	r0, fp
    57ba:	bgt.w	566c <_realloc_r+0xd4>
    57be:	mov	r7, sl
    57c0:	ldr.w	r1, [sl, #12]
    57c4:	ldr.w	r0, [r7, #8]!
    57c8:	subs	r2, r4, #4
    57ca:	cmp	r2, #36	; 0x24
    57cc:	str	r1, [r0, #12]
    57ce:	str	r0, [r1, #8]
    57d0:	bhi.w	593c <_realloc_r+0x3a4>
    57d4:	cmp	r2, #19
    57d6:	bls.w	5924 <_realloc_r+0x38c>
    57da:	ldr	r1, [r6, #0]
    57dc:	str.w	r1, [sl, #8]
    57e0:	ldr	r1, [r6, #4]
    57e2:	str.w	r1, [sl, #12]
    57e6:	cmp	r2, #27
    57e8:	bhi.w	594a <_realloc_r+0x3b2>
    57ec:	adds	r6, #8
    57ee:	add.w	r2, sl, #16
    57f2:	ldr	r1, [r6, #0]
    57f4:	str	r1, [r2, #0]
    57f6:	ldr	r1, [r6, #4]
    57f8:	str	r1, [r2, #4]
    57fa:	ldr	r1, [r6, #8]
    57fc:	str	r1, [r2, #8]
    57fe:	add.w	r1, sl, r5
    5802:	rsb	r2, r5, fp
    5806:	orr.w	r2, r2, #1
    580a:	str	r1, [r3, #8]
    580c:	str	r2, [r1, #4]
    580e:	ldr.w	r3, [sl, #4]
    5812:	and.w	r3, r3, #1
    5816:	orrs	r5, r3
    5818:	mov	r0, r9
    581a:	str.w	r5, [sl, #4]
    581e:	bl	5594 <__malloc_unlock>
    5822:	mov	r0, r7
    5824:	b.n	56e0 <_realloc_r+0x148>
    5826:	ldr	r3, [r6, #0]
    5828:	str	r3, [r0, #0]
    582a:	ldr	r3, [r6, #4]
    582c:	str	r3, [r0, #4]
    582e:	cmp	r2, #27
    5830:	bhi.n	5882 <_realloc_r+0x2ea>
    5832:	add.w	r3, r0, #8
    5836:	add.w	r2, r6, #8
    583a:	b.n	5622 <_realloc_r+0x8a>
    583c:	mov	r3, r7
    583e:	ldr	r2, [r6, #0]
    5840:	str	r2, [r3, #0]
    5842:	ldr	r2, [r6, #4]
    5844:	str	r2, [r3, #4]
    5846:	ldr	r2, [r6, #8]
    5848:	str	r2, [r3, #8]
    584a:	mov	r6, r7
    584c:	mov	r4, lr
    584e:	mov	r8, sl
    5850:	b.n	56ba <_realloc_r+0x122>
    5852:	add.w	r1, r8, r5
    5856:	rsb	fp, r5, fp
    585a:	orr.w	r2, fp, #1
    585e:	str	r1, [r3, #8]
    5860:	str	r2, [r1, #4]
    5862:	ldr.w	r3, [r6, #-4]
    5866:	and.w	r3, r3, #1
    586a:	orrs	r5, r3
    586c:	mov	r0, r9
    586e:	str.w	r5, [r6, #-4]
    5872:	bl	5594 <__malloc_unlock>
    5876:	mov	r0, r6
    5878:	b.n	56e0 <_realloc_r+0x148>
    587a:	mov	r1, r6
    587c:	bl	542c <memmove>
    5880:	b.n	562e <_realloc_r+0x96>
    5882:	ldr	r3, [r6, #8]
    5884:	str	r3, [r0, #8]
    5886:	ldr	r3, [r6, #12]
    5888:	str	r3, [r0, #12]
    588a:	cmp	r2, #36	; 0x24
    588c:	beq.n	58e0 <_realloc_r+0x348>
    588e:	add.w	r3, r0, #16
    5892:	add.w	r2, r6, #16
    5896:	b.n	5622 <_realloc_r+0x8a>
    5898:	ldr.w	r3, [r0, #-4]
    589c:	bic.w	r3, r3, #3
    58a0:	add	r4, r3
    58a2:	b.n	56ba <_realloc_r+0x122>
    58a4:	mov	r1, r6
    58a6:	mov	r0, r7
    58a8:	mov	r4, lr
    58aa:	mov	r8, sl
    58ac:	bl	542c <memmove>
    58b0:	mov	r6, r7
    58b2:	b.n	56ba <_realloc_r+0x122>
    58b4:	mov	r2, r7
    58b6:	b.n	56a8 <_realloc_r+0x110>
    58b8:	mov	r1, r6
    58ba:	mov	r0, r7
    58bc:	mov	r4, r3
    58be:	mov	r8, sl
    58c0:	bl	542c <memmove>
    58c4:	mov	r6, r7
    58c6:	b.n	56ba <_realloc_r+0x122>
    58c8:	ldr	r3, [r6, #8]
    58ca:	str.w	r3, [sl, #16]
    58ce:	ldr	r3, [r6, #12]
    58d0:	str.w	r3, [sl, #20]
    58d4:	cmp	r2, #36	; 0x24
    58d6:	beq.n	5910 <_realloc_r+0x378>
    58d8:	adds	r6, #16
    58da:	add.w	r3, sl, #24
    58de:	b.n	583e <_realloc_r+0x2a6>
    58e0:	ldr	r3, [r6, #16]
    58e2:	str	r3, [r0, #16]
    58e4:	ldr	r3, [r6, #20]
    58e6:	str	r3, [r0, #20]
    58e8:	add.w	r2, r6, #24
    58ec:	add.w	r3, r0, #24
    58f0:	b.n	5622 <_realloc_r+0x8a>
    58f2:	nop
    58f4:	.word	0x2000139c
    58f8:	ldr	r1, [r6, #8]
    58fa:	str.w	r1, [sl, #16]
    58fe:	ldr	r1, [r6, #12]
    5900:	str.w	r1, [sl, #20]
    5904:	cmp	r2, #36	; 0x24
    5906:	beq.n	5928 <_realloc_r+0x390>
    5908:	adds	r6, #16
    590a:	add.w	r2, sl, #24
    590e:	b.n	56a8 <_realloc_r+0x110>
    5910:	ldr	r3, [r6, #16]
    5912:	str.w	r3, [sl, #24]
    5916:	ldr	r3, [r6, #20]
    5918:	str.w	r3, [sl, #28]
    591c:	adds	r6, #24
    591e:	add.w	r3, sl, #32
    5922:	b.n	583e <_realloc_r+0x2a6>
    5924:	mov	r2, r7
    5926:	b.n	57f2 <_realloc_r+0x25a>
    5928:	ldr	r2, [r6, #16]
    592a:	str.w	r2, [sl, #24]
    592e:	ldr	r2, [r6, #20]
    5930:	str.w	r2, [sl, #28]
    5934:	adds	r6, #24
    5936:	add.w	r2, sl, #32
    593a:	b.n	56a8 <_realloc_r+0x110>
    593c:	mov	r1, r6
    593e:	mov	r0, r7
    5940:	str	r3, [sp, #4]
    5942:	bl	542c <memmove>
    5946:	ldr	r3, [sp, #4]
    5948:	b.n	57fe <_realloc_r+0x266>
    594a:	ldr	r1, [r6, #8]
    594c:	str.w	r1, [sl, #16]
    5950:	ldr	r1, [r6, #12]
    5952:	str.w	r1, [sl, #20]
    5956:	cmp	r2, #36	; 0x24
    5958:	beq.n	5962 <_realloc_r+0x3ca>
    595a:	adds	r6, #16
    595c:	add.w	r2, sl, #24
    5960:	b.n	57f2 <_realloc_r+0x25a>
    5962:	ldr	r2, [r6, #16]
    5964:	str.w	r2, [sl, #24]
    5968:	ldr	r2, [r6, #20]
    596a:	str.w	r2, [sl, #28]
    596e:	adds	r6, #24
    5970:	add.w	r2, sl, #32
    5974:	b.n	57f2 <_realloc_r+0x25a>
    5976:	nop

00005978 <_sbrk_r>:
    5978:	push	{r3, r4, r5, lr}
    597a:	ldr	r4, [pc, #28]	; (5998 <_sbrk_r+0x20>)
    597c:	movs	r3, #0
    597e:	mov	r5, r0
    5980:	mov	r0, r1
    5982:	str	r3, [r4, #0]
    5984:	bl	36cc <_sbrk>
    5988:	adds	r3, r0, #1
    598a:	beq.n	598e <_sbrk_r+0x16>
    598c:	pop	{r3, r4, r5, pc}
    598e:	ldr	r3, [r4, #0]
    5990:	cmp	r3, #0
    5992:	beq.n	598c <_sbrk_r+0x14>
    5994:	str	r3, [r5, #0]
    5996:	pop	{r3, r4, r5, pc}
    5998:	.word	0x2000c860

0000599c <sprintf>:
    599c:	push	{r1, r2, r3}
    599e:	push	{r4, r5, r6, r7, lr}
    59a0:	sub	sp, #112	; 0x70
    59a2:	add	r3, sp, #132	; 0x84
    59a4:	ldr	r1, [pc, #60]	; (59e4 <sprintf+0x48>)
    59a6:	ldr.w	r2, [r3], #4
    59aa:	str	r3, [sp, #4]
    59ac:	mov	r5, r0
    59ae:	mvn.w	r4, #2147483648	; 0x80000000
    59b2:	ldr	r0, [r1, #0]
    59b4:	str	r5, [sp, #8]
    59b6:	mov.w	r7, #520	; 0x208
    59ba:	movw	r6, #65535	; 0xffff
    59be:	add	r1, sp, #8
    59c0:	str	r5, [sp, #24]
    59c2:	strh.w	r7, [sp, #20]
    59c6:	str	r4, [sp, #16]
    59c8:	str	r4, [sp, #28]
    59ca:	strh.w	r6, [sp, #22]
    59ce:	bl	5be0 <_svfprintf_r>
    59d2:	ldr	r3, [sp, #8]
    59d4:	movs	r2, #0
    59d6:	strb	r2, [r3, #0]
    59d8:	add	sp, #112	; 0x70
    59da:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    59de:	add	sp, #12
    59e0:	bx	lr
    59e2:	nop
    59e4:	.word	0x200017ac

000059e8 <strcpy>:
    59e8:	eor.w	r2, r0, r1
    59ec:	mov	ip, r0
    59ee:	tst.w	r2, #3
    59f2:	bne.n	5a94 <strcpy+0xac>
    59f4:	tst.w	r1, #3
    59f8:	bne.n	5a60 <strcpy+0x78>
    59fa:	str.w	r4, [sp, #-4]!
    59fe:	tst.w	r1, #4
    5a02:	ldr.w	r3, [r1], #4
    5a06:	beq.n	5a20 <strcpy+0x38>
    5a08:	sub.w	r2, r3, #16843009	; 0x1010101
    5a0c:	bics	r2, r3
    5a0e:	tst.w	r2, #2155905152	; 0x80808080
    5a12:	itt	eq
    5a14:	streq.w	r3, [ip], #4
    5a18:	ldreq.w	r3, [r1], #4
    5a1c:	bne.n	5a4c <strcpy+0x64>
    5a1e:	nop
    5a20:	ldr.w	r4, [r1], #4
    5a24:	sub.w	r2, r3, #16843009	; 0x1010101
    5a28:	bics	r2, r3
    5a2a:	tst.w	r2, #2155905152	; 0x80808080
    5a2e:	sub.w	r2, r4, #16843009	; 0x1010101
    5a32:	bne.n	5a4c <strcpy+0x64>
    5a34:	str.w	r3, [ip], #4
    5a38:	bics	r2, r4
    5a3a:	tst.w	r2, #2155905152	; 0x80808080
    5a3e:	itt	eq
    5a40:	ldreq.w	r3, [r1], #4
    5a44:	streq.w	r4, [ip], #4
    5a48:	beq.n	5a20 <strcpy+0x38>
    5a4a:	mov	r3, r4
    5a4c:	strb.w	r3, [ip], #1
    5a50:	tst.w	r3, #255	; 0xff
    5a54:	mov.w	r3, r3, ror #8
    5a58:	bne.n	5a4c <strcpy+0x64>
    5a5a:	ldr.w	r4, [sp], #4
    5a5e:	bx	lr
    5a60:	tst.w	r1, #1
    5a64:	beq.n	5a74 <strcpy+0x8c>
    5a66:	ldrb.w	r2, [r1], #1
    5a6a:	strb.w	r2, [ip], #1
    5a6e:	cmp	r2, #0
    5a70:	it	eq
    5a72:	bxeq	lr
    5a74:	tst.w	r1, #2
    5a78:	beq.n	59fa <strcpy+0x12>
    5a7a:	ldrh.w	r2, [r1], #2
    5a7e:	tst.w	r2, #255	; 0xff
    5a82:	itet	ne
    5a84:	strhne.w	r2, [ip], #2
    5a88:	strbeq.w	r2, [ip]
    5a8c:	tstne.w	r2, #65280	; 0xff00
    5a90:	bne.n	59fa <strcpy+0x12>
    5a92:	bx	lr
    5a94:	ldrb.w	r2, [r1], #1
    5a98:	strb.w	r2, [ip], #1
    5a9c:	cmp	r2, #0
    5a9e:	bne.n	5a94 <strcpy+0xac>
    5aa0:	bx	lr
    5aa2:	nop

00005aa4 <strlcpy>:
    5aa4:	push	{r4}
    5aa6:	mov	r3, r1
    5aa8:	cbz	r2, 5abe <strlcpy+0x1a>
    5aaa:	b.n	5ab6 <strlcpy+0x12>
    5aac:	ldrb.w	r4, [r3], #1
    5ab0:	strb.w	r4, [r0], #1
    5ab4:	cbz	r4, 5ac6 <strlcpy+0x22>
    5ab6:	subs	r2, #1
    5ab8:	bne.n	5aac <strlcpy+0x8>
    5aba:	movs	r2, #0
    5abc:	strb	r2, [r0, #0]
    5abe:	ldrb.w	r2, [r3], #1
    5ac2:	cmp	r2, #0
    5ac4:	bne.n	5abe <strlcpy+0x1a>
    5ac6:	subs	r0, r3, r1
    5ac8:	subs	r0, #1
    5aca:	ldr.w	r4, [sp], #4
    5ace:	bx	lr
	...

00005b00 <strlen>:
    5b00:	pld	[r0]
    5b04:	strd	r4, r5, [sp, #-8]!
    5b08:	bic.w	r1, r0, #7
    5b0c:	mvn.w	ip, #0
    5b10:	ands.w	r4, r0, #7
    5b14:	pld	[r1, #32]
    5b18:	bne.w	5bae <strlen+0xae>
    5b1c:	mov.w	r4, #0
    5b20:	mvn.w	r0, #7
    5b24:	ldrd	r2, r3, [r1]
    5b28:	pld	[r1, #64]	; 0x40
    5b2c:	add.w	r0, r0, #8
    5b30:	uadd8	r2, r2, ip
    5b34:	sel	r2, r4, ip
    5b38:	uadd8	r3, r3, ip
    5b3c:	sel	r3, r2, ip
    5b40:	cbnz	r3, 5b96 <strlen+0x96>
    5b42:	ldrd	r2, r3, [r1, #8]
    5b46:	uadd8	r2, r2, ip
    5b4a:	add.w	r0, r0, #8
    5b4e:	sel	r2, r4, ip
    5b52:	uadd8	r3, r3, ip
    5b56:	sel	r3, r2, ip
    5b5a:	cbnz	r3, 5b96 <strlen+0x96>
    5b5c:	ldrd	r2, r3, [r1, #16]
    5b60:	uadd8	r2, r2, ip
    5b64:	add.w	r0, r0, #8
    5b68:	sel	r2, r4, ip
    5b6c:	uadd8	r3, r3, ip
    5b70:	sel	r3, r2, ip
    5b74:	cbnz	r3, 5b96 <strlen+0x96>
    5b76:	ldrd	r2, r3, [r1, #24]
    5b7a:	add.w	r1, r1, #32
    5b7e:	uadd8	r2, r2, ip
    5b82:	add.w	r0, r0, #8
    5b86:	sel	r2, r4, ip
    5b8a:	uadd8	r3, r3, ip
    5b8e:	sel	r3, r2, ip
    5b92:	cmp	r3, #0
    5b94:	beq.n	5b24 <strlen+0x24>
    5b96:	cmp	r2, #0
    5b98:	itt	eq
    5b9a:	addeq	r0, #4
    5b9c:	moveq	r2, r3
    5b9e:	rev	r2, r2
    5ba0:	clz	r2, r2
    5ba4:	ldrd	r4, r5, [sp], #8
    5ba8:	add.w	r0, r0, r2, lsr #3
    5bac:	bx	lr
    5bae:	ldrd	r2, r3, [r1]
    5bb2:	and.w	r5, r4, #3
    5bb6:	rsb	r0, r4, #0
    5bba:	mov.w	r5, r5, lsl #3
    5bbe:	tst.w	r4, #4
    5bc2:	pld	[r1, #64]	; 0x40
    5bc6:	lsl.w	r5, ip, r5
    5bca:	orn	r2, r2, r5
    5bce:	itt	ne
    5bd0:	ornne	r3, r3, r5
    5bd4:	movne	r2, ip
    5bd6:	mov.w	r4, #0
    5bda:	b.n	5b30 <strlen+0x30>
    5bdc:	movs	r0, r0
	...

00005be0 <_svfprintf_r>:
    5be0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5be4:	sub	sp, #260	; 0x104
    5be6:	mov	r4, r1
    5be8:	str	r1, [sp, #20]
    5bea:	mov	r5, r2
    5bec:	str	r3, [sp, #40]	; 0x28
    5bee:	str	r0, [sp, #24]
    5bf0:	bl	8538 <_localeconv_r>
    5bf4:	ldr	r3, [r0, #0]
    5bf6:	str	r3, [sp, #76]	; 0x4c
    5bf8:	mov	r0, r3
    5bfa:	bl	5b00 <strlen>
    5bfe:	ldrh	r3, [r4, #12]
    5c00:	str	r0, [sp, #72]	; 0x48
    5c02:	lsls	r6, r3, #24
    5c04:	bpl.n	5c0e <_svfprintf_r+0x2e>
    5c06:	ldr	r3, [r4, #16]
    5c08:	cmp	r3, #0
    5c0a:	beq.w	6e70 <_svfprintf_r+0x1290>
    5c0e:	vldr	d7, [pc, #664]	; 5ea8 <_svfprintf_r+0x2c8>
    5c12:	movs	r3, #0
    5c14:	vstr	d7, [sp, #64]	; 0x40
    5c18:	str	r3, [sp, #56]	; 0x38
    5c1a:	str	r3, [sp, #148]	; 0x94
    5c1c:	str	r3, [sp, #144]	; 0x90
    5c1e:	str	r3, [sp, #84]	; 0x54
    5c20:	str	r3, [sp, #28]
    5c22:	ldr.w	sl, [pc, #656]	; 5eb4 <_svfprintf_r+0x2d4>
    5c26:	add	r3, sp, #192	; 0xc0
    5c28:	str	r3, [sp, #140]	; 0x8c
    5c2a:	mov	r9, r3
    5c2c:	mov	r8, r5
    5c2e:	ldrb.w	r3, [r8]
    5c32:	mov	r4, r8
    5c34:	cbz	r3, 5c72 <_svfprintf_r+0x92>
    5c36:	cmp	r3, #37	; 0x25
    5c38:	bne.n	5c40 <_svfprintf_r+0x60>
    5c3a:	b.n	5c72 <_svfprintf_r+0x92>
    5c3c:	cmp	r3, #37	; 0x25
    5c3e:	beq.n	5c48 <_svfprintf_r+0x68>
    5c40:	ldrb.w	r3, [r4, #1]!
    5c44:	cmp	r3, #0
    5c46:	bne.n	5c3c <_svfprintf_r+0x5c>
    5c48:	rsb	r5, r8, r4
    5c4c:	cbz	r5, 5c72 <_svfprintf_r+0x92>
    5c4e:	ldr	r3, [sp, #144]	; 0x90
    5c50:	ldr	r2, [sp, #148]	; 0x94
    5c52:	str.w	r8, [r9]
    5c56:	adds	r3, #1
    5c58:	add	r2, r5
    5c5a:	cmp	r3, #7
    5c5c:	str.w	r5, [r9, #4]
    5c60:	str	r2, [sp, #148]	; 0x94
    5c62:	str	r3, [sp, #144]	; 0x90
    5c64:	bgt.w	5db4 <_svfprintf_r+0x1d4>
    5c68:	add.w	r9, r9, #8
    5c6c:	ldr	r3, [sp, #28]
    5c6e:	add	r3, r5
    5c70:	str	r3, [sp, #28]
    5c72:	ldrb	r3, [r4, #0]
    5c74:	cmp	r3, #0
    5c76:	beq.w	5dc6 <_svfprintf_r+0x1e6>
    5c7a:	movs	r3, #0
    5c7c:	mov	r2, r3
    5c7e:	strb.w	r3, [sp, #111]	; 0x6f
    5c82:	mov	r1, r3
    5c84:	str	r3, [sp, #32]
    5c86:	str	r3, [sp, #12]
    5c88:	mov.w	fp, #4294967295
    5c8c:	ldrb	r3, [r4, #1]
    5c8e:	add.w	r8, r4, #1
    5c92:	mov	r5, fp
    5c94:	add.w	r8, r8, #1
    5c98:	sub.w	r0, r3, #32
    5c9c:	cmp	r0, #88	; 0x58
    5c9e:	bhi.w	650a <_svfprintf_r+0x92a>
    5ca2:	tbh	[pc, r0, lsl #1]
    5ca6:	.short	0x03a0
    5ca8:	.word	0x04320432
    5cac:	.word	0x043203a8
    5cb0:	.word	0x04320432
    5cb4:	.word	0x04320432
    5cb8:	.word	0x03af0432
    5cbc:	.word	0x043203bd
    5cc0:	.word	0x00e2005d
    5cc4:	.word	0x01090432
    5cc8:	.word	0x01100110
    5ccc:	.word	0x01100110
    5cd0:	.word	0x01100110
    5cd4:	.word	0x01100110
    5cd8:	.word	0x04320110
    5cdc:	.word	0x04320432
    5ce0:	.word	0x04320432
    5ce4:	.word	0x04320432
    5ce8:	.word	0x04320432
    5cec:	.word	0x01200432
    5cf0:	.word	0x04320286
    5cf4:	.word	0x04320286
    5cf8:	.word	0x04320432
    5cfc:	.word	0x02d40432
    5d00:	.word	0x04320432
    5d04:	.word	0x043202e5
    5d08:	.word	0x04320432
    5d0c:	.word	0x04320432
    5d10:	.word	0x0432030f
    5d14:	.word	0x033d0432
    5d18:	.word	0x04320432
    5d1c:	.word	0x04320432
    5d20:	.word	0x04320432
    5d24:	.word	0x04320432
    5d28:	.word	0x04320432
    5d2c:	.word	0x0391037e
    5d30:	.word	0x02860286
    5d34:	.word	0x03990286
    5d38:	.word	0x04320391
    5d3c:	.word	0x04070432
    5d40:	.word	0x04120432
    5d44:	.word	0x006400a3
    5d48:	.word	0x043203c2
    5d4c:	.word	0x043203c9
    5d50:	.word	0x043203ea
    5d54:	.word	0x03f20432
    5d58:	ldr	r0, [sp, #32]
    5d5a:	str	r3, [sp, #40]	; 0x28
    5d5c:	negs	r0, r0
    5d5e:	str	r0, [sp, #32]
    5d60:	ldr	r3, [sp, #12]
    5d62:	orr.w	r3, r3, #4
    5d66:	str	r3, [sp, #12]
    5d68:	ldrb.w	r3, [r8]
    5d6c:	b.n	5c94 <_svfprintf_r+0xb4>
    5d6e:	ldr	r0, [sp, #40]	; 0x28
    5d70:	mov	fp, r5
    5d72:	movs	r1, #0
    5d74:	ldr	r4, [r0, #0]
    5d76:	strb.w	r1, [sp, #111]	; 0x6f
    5d7a:	adds	r7, r0, #4
    5d7c:	ldr	r0, [sp, #12]
    5d7e:	movs	r3, #48	; 0x30
    5d80:	movs	r2, #120	; 0x78
    5d82:	cmp	fp, r1
    5d84:	strb.w	r3, [sp, #112]	; 0x70
    5d88:	mov.w	r5, #0
    5d8c:	strb.w	r2, [sp, #113]	; 0x71
    5d90:	orr.w	r3, r0, #2
    5d94:	blt.w	6544 <_svfprintf_r+0x964>
    5d98:	bic.w	r3, r0, #128	; 0x80
    5d9c:	orr.w	r3, r3, #2
    5da0:	str	r3, [sp, #12]
    5da2:	orrs.w	r3, r4, r5
    5da6:	str	r7, [sp, #40]	; 0x28
    5da8:	beq.w	64f0 <_svfprintf_r+0x910>
    5dac:	mov	r7, r1
    5dae:	str	r2, [sp, #52]	; 0x34
    5db0:	ldr	r0, [pc, #252]	; (5eb0 <_svfprintf_r+0x2d0>)
    5db2:	b.n	6382 <_svfprintf_r+0x7a2>
    5db4:	add	r2, sp, #140	; 0x8c
    5db6:	ldr	r1, [sp, #20]
    5db8:	ldr	r0, [sp, #24]
    5dba:	bl	8c24 <__ssprint_r>
    5dbe:	cbnz	r0, 5dd4 <_svfprintf_r+0x1f4>
    5dc0:	add.w	r9, sp, #192	; 0xc0
    5dc4:	b.n	5c6c <_svfprintf_r+0x8c>
    5dc6:	ldr	r3, [sp, #148]	; 0x94
    5dc8:	cbz	r3, 5dd4 <_svfprintf_r+0x1f4>
    5dca:	ldr	r0, [sp, #24]
    5dcc:	ldr	r1, [sp, #20]
    5dce:	add	r2, sp, #140	; 0x8c
    5dd0:	bl	8c24 <__ssprint_r>
    5dd4:	ldr	r3, [sp, #20]
    5dd6:	ldrh	r3, [r3, #12]
    5dd8:	tst.w	r3, #64	; 0x40
    5ddc:	ldr	r3, [sp, #28]
    5dde:	it	ne
    5de0:	movne.w	r3, #4294967295
    5de4:	mov	r0, r3
    5de6:	add	sp, #260	; 0x104
    5de8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5dec:	str	r3, [sp, #52]	; 0x34
    5dee:	mov	fp, r5
    5df0:	cmp	r2, #0
    5df2:	bne.w	725c <_svfprintf_r+0x167c>
    5df6:	ldr	r2, [sp, #12]
    5df8:	ands.w	r3, r2, #32
    5dfc:	beq.w	628c <_svfprintf_r+0x6ac>
    5e00:	ldr	r7, [sp, #40]	; 0x28
    5e02:	adds	r7, #7
    5e04:	bic.w	r3, r7, #7
    5e08:	movs	r7, #0
    5e0a:	add.w	r1, r3, #8
    5e0e:	cmp	fp, r7
    5e10:	str	r1, [sp, #40]	; 0x28
    5e12:	ldrd	r4, r5, [r3]
    5e16:	strb.w	r7, [sp, #111]	; 0x6f
    5e1a:	blt.w	6ce2 <_svfprintf_r+0x1102>
    5e1e:	bic.w	r3, r2, #128	; 0x80
    5e22:	str	r3, [sp, #12]
    5e24:	orrs.w	r3, r4, r5
    5e28:	beq.w	6534 <_svfprintf_r+0x954>
    5e2c:	add	r6, sp, #192	; 0xc0
    5e2e:	lsrs	r2, r4, #3
    5e30:	orr.w	r2, r2, r5, lsl #29
    5e34:	lsrs	r1, r5, #3
    5e36:	and.w	r3, r4, #7
    5e3a:	mov	r5, r1
    5e3c:	mov	r4, r2
    5e3e:	adds	r3, #48	; 0x30
    5e40:	orrs.w	r2, r4, r5
    5e44:	strb.w	r3, [r6, #-1]!
    5e48:	bne.n	5e2e <_svfprintf_r+0x24e>
    5e4a:	ldr	r2, [sp, #12]
    5e4c:	lsls	r1, r2, #31
    5e4e:	bpl.w	5f70 <_svfprintf_r+0x390>
    5e52:	cmp	r3, #48	; 0x30
    5e54:	beq.w	5f70 <_svfprintf_r+0x390>
    5e58:	movs	r2, #48	; 0x30
    5e5a:	subs	r3, r6, #1
    5e5c:	strb.w	r2, [r6, #-1]
    5e60:	add	r2, sp, #192	; 0xc0
    5e62:	subs	r2, r2, r3
    5e64:	str	r2, [sp, #36]	; 0x24
    5e66:	mov	r6, r3
    5e68:	b.n	5f76 <_svfprintf_r+0x396>
    5e6a:	ldrb.w	r3, [r8]
    5e6e:	cmp	r3, #42	; 0x2a
    5e70:	add.w	r4, r8, #1
    5e74:	beq.w	7240 <_svfprintf_r+0x1660>
    5e78:	sub.w	r0, r3, #48	; 0x30
    5e7c:	cmp	r0, #9
    5e7e:	it	ls
    5e80:	movls	r5, #0
    5e82:	bhi.w	7192 <_svfprintf_r+0x15b2>
    5e86:	ldrb.w	r3, [r4], #1
    5e8a:	add.w	r5, r5, r5, lsl #2
    5e8e:	add.w	r5, r0, r5, lsl #1
    5e92:	sub.w	r0, r3, #48	; 0x30
    5e96:	cmp	r0, #9
    5e98:	bls.n	5e86 <_svfprintf_r+0x2a6>
    5e9a:	orr.w	r5, r5, r5, asr #31
    5e9e:	mov	r8, r4
    5ea0:	b.n	5c98 <_svfprintf_r+0xb8>
    5ea2:	nop
    5ea4:	nop.w
	...
    5eb0:	.word	0x20000d38
    5eb4:	.word	0x20000dd4
    5eb8:	ldr	r3, [sp, #12]
    5eba:	orr.w	r3, r3, #128	; 0x80
    5ebe:	str	r3, [sp, #12]
    5ec0:	ldrb.w	r3, [r8]
    5ec4:	b.n	5c94 <_svfprintf_r+0xb4>
    5ec6:	sub.w	r0, r3, #48	; 0x30
    5eca:	movs	r3, #0
    5ecc:	mov	r4, r3
    5ece:	ldrb.w	r3, [r8], #1
    5ed2:	add.w	r4, r4, r4, lsl #2
    5ed6:	add.w	r4, r0, r4, lsl #1
    5eda:	sub.w	r0, r3, #48	; 0x30
    5ede:	cmp	r0, #9
    5ee0:	bls.n	5ece <_svfprintf_r+0x2ee>
    5ee2:	str	r4, [sp, #32]
    5ee4:	b.n	5c98 <_svfprintf_r+0xb8>
    5ee6:	str	r3, [sp, #52]	; 0x34
    5ee8:	mov	fp, r5
    5eea:	cmp	r2, #0
    5eec:	bne.w	7278 <_svfprintf_r+0x1698>
    5ef0:	ldr	r3, [sp, #12]
    5ef2:	orr.w	r3, r3, #16
    5ef6:	str	r3, [sp, #12]
    5ef8:	ldr	r3, [sp, #12]
    5efa:	lsls	r4, r3, #26
    5efc:	bpl.w	696e <_svfprintf_r+0xd8e>
    5f00:	ldr	r7, [sp, #40]	; 0x28
    5f02:	adds	r7, #7
    5f04:	bic.w	r7, r7, #7
    5f08:	ldrd	r2, r3, [r7]
    5f0c:	add.w	r1, r7, #8
    5f10:	str	r1, [sp, #40]	; 0x28
    5f12:	mov	r4, r2
    5f14:	mov	r5, r3
    5f16:	cmp	r2, #0
    5f18:	sbcs.w	r3, r3, #0
    5f1c:	blt.w	69e4 <_svfprintf_r+0xe04>
    5f20:	cmp.w	fp, #0
    5f24:	ldrb.w	r7, [sp, #111]	; 0x6f
    5f28:	blt.w	69aa <_svfprintf_r+0xdca>
    5f2c:	ldr	r3, [sp, #12]
    5f2e:	bic.w	r3, r3, #128	; 0x80
    5f32:	str	r3, [sp, #12]
    5f34:	orrs.w	r3, r4, r5
    5f38:	beq.w	630c <_svfprintf_r+0x72c>
    5f3c:	cmp	r5, #0
    5f3e:	it	eq
    5f40:	cmpeq	r4, #10
    5f42:	bcc.w	6316 <_svfprintf_r+0x736>
    5f46:	add	r6, sp, #192	; 0xc0
    5f48:	mov	r0, r4
    5f4a:	mov	r1, r5
    5f4c:	movs	r2, #10
    5f4e:	movs	r3, #0
    5f50:	bl	4b1c <__aeabi_uldivmod>
    5f54:	adds	r2, #48	; 0x30
    5f56:	strb.w	r2, [r6, #-1]!
    5f5a:	mov	r0, r4
    5f5c:	mov	r1, r5
    5f5e:	movs	r3, #0
    5f60:	movs	r2, #10
    5f62:	bl	4b1c <__aeabi_uldivmod>
    5f66:	mov	r4, r0
    5f68:	mov	r5, r1
    5f6a:	orrs.w	r3, r4, r5
    5f6e:	bne.n	5f48 <_svfprintf_r+0x368>
    5f70:	add	r3, sp, #192	; 0xc0
    5f72:	subs	r3, r3, r6
    5f74:	str	r3, [sp, #36]	; 0x24
    5f76:	ldr	r3, [sp, #36]	; 0x24
    5f78:	cmp	r3, fp
    5f7a:	it	lt
    5f7c:	movlt	r3, fp
    5f7e:	str	r3, [sp, #16]
    5f80:	movs	r3, #0
    5f82:	str	r3, [sp, #60]	; 0x3c
    5f84:	cbz	r7, 5f8c <_svfprintf_r+0x3ac>
    5f86:	ldr	r3, [sp, #16]
    5f88:	adds	r3, #1
    5f8a:	str	r3, [sp, #16]
    5f8c:	ldr	r3, [sp, #12]
    5f8e:	ands.w	r3, r3, #2
    5f92:	str	r3, [sp, #44]	; 0x2c
    5f94:	beq.n	5f9c <_svfprintf_r+0x3bc>
    5f96:	ldr	r3, [sp, #16]
    5f98:	adds	r3, #2
    5f9a:	str	r3, [sp, #16]
    5f9c:	ldr	r3, [sp, #12]
    5f9e:	ands.w	r3, r3, #132	; 0x84
    5fa2:	str	r3, [sp, #48]	; 0x30
    5fa4:	bne.w	655e <_svfprintf_r+0x97e>
    5fa8:	ldr	r3, [sp, #32]
    5faa:	ldr	r2, [sp, #16]
    5fac:	subs	r5, r3, r2
    5fae:	cmp	r5, #0
    5fb0:	ble.w	655e <_svfprintf_r+0x97e>
    5fb4:	cmp	r5, #16
    5fb6:	ldr	r1, [sp, #148]	; 0x94
    5fb8:	ldr	r2, [sp, #144]	; 0x90
    5fba:	ldr	r7, [pc, #672]	; (625c <_svfprintf_r+0x67c>)
    5fbc:	ble.n	600e <_svfprintf_r+0x42e>
    5fbe:	str	r6, [sp, #80]	; 0x50
    5fc0:	mov	r0, r9
    5fc2:	movs	r4, #16
    5fc4:	mov	r9, r7
    5fc6:	ldr	r6, [sp, #20]
    5fc8:	mov	r7, r5
    5fca:	ldr	r5, [sp, #24]
    5fcc:	b.n	5fd8 <_svfprintf_r+0x3f8>
    5fce:	subs	r7, #16
    5fd0:	cmp	r7, #16
    5fd2:	add.w	r0, r0, #8
    5fd6:	ble.n	6006 <_svfprintf_r+0x426>
    5fd8:	adds	r2, #1
    5fda:	ldr	r3, [pc, #640]	; (625c <_svfprintf_r+0x67c>)
    5fdc:	str	r2, [sp, #144]	; 0x90
    5fde:	adds	r1, #16
    5fe0:	cmp	r2, #7
    5fe2:	str	r1, [sp, #148]	; 0x94
    5fe4:	stmia.w	r0, {r3, r4}
    5fe8:	ble.n	5fce <_svfprintf_r+0x3ee>
    5fea:	add	r2, sp, #140	; 0x8c
    5fec:	mov	r1, r6
    5fee:	mov	r0, r5
    5ff0:	bl	8c24 <__ssprint_r>
    5ff4:	cmp	r0, #0
    5ff6:	bne.w	5dd4 <_svfprintf_r+0x1f4>
    5ffa:	subs	r7, #16
    5ffc:	cmp	r7, #16
    5ffe:	ldr	r1, [sp, #148]	; 0x94
    6000:	ldr	r2, [sp, #144]	; 0x90
    6002:	add	r0, sp, #192	; 0xc0
    6004:	bgt.n	5fd8 <_svfprintf_r+0x3f8>
    6006:	ldr	r6, [sp, #80]	; 0x50
    6008:	mov	r5, r7
    600a:	mov	r7, r9
    600c:	mov	r9, r0
    600e:	adds	r2, #1
    6010:	adds	r4, r5, r1
    6012:	cmp	r2, #7
    6014:	str	r4, [sp, #148]	; 0x94
    6016:	str	r2, [sp, #144]	; 0x90
    6018:	str.w	r7, [r9]
    601c:	str.w	r5, [r9, #4]
    6020:	bgt.w	687e <_svfprintf_r+0xc9e>
    6024:	ldrb.w	r7, [sp, #111]	; 0x6f
    6028:	add.w	r9, r9, #8
    602c:	cbz	r7, 604c <_svfprintf_r+0x46c>
    602e:	ldr	r3, [sp, #144]	; 0x90
    6030:	adds	r3, #1
    6032:	adds	r4, #1
    6034:	add.w	r1, sp, #111	; 0x6f
    6038:	movs	r2, #1
    603a:	cmp	r3, #7
    603c:	str	r4, [sp, #148]	; 0x94
    603e:	str	r3, [sp, #144]	; 0x90
    6040:	stmia.w	r9, {r1, r2}
    6044:	bgt.w	6792 <_svfprintf_r+0xbb2>
    6048:	add.w	r9, r9, #8
    604c:	ldr	r3, [sp, #44]	; 0x2c
    604e:	cbz	r3, 606c <_svfprintf_r+0x48c>
    6050:	ldr	r3, [sp, #144]	; 0x90
    6052:	adds	r3, #1
    6054:	adds	r4, #2
    6056:	add	r1, sp, #112	; 0x70
    6058:	movs	r2, #2
    605a:	cmp	r3, #7
    605c:	str	r4, [sp, #148]	; 0x94
    605e:	str	r3, [sp, #144]	; 0x90
    6060:	stmia.w	r9, {r1, r2}
    6064:	bgt.w	67aa <_svfprintf_r+0xbca>
    6068:	add.w	r9, r9, #8
    606c:	ldr	r3, [sp, #48]	; 0x30
    606e:	cmp	r3, #128	; 0x80
    6070:	beq.w	6636 <_svfprintf_r+0xa56>
    6074:	ldr	r3, [sp, #36]	; 0x24
    6076:	rsb	r7, r3, fp
    607a:	cmp	r7, #0
    607c:	ble.n	60e6 <_svfprintf_r+0x506>
    607e:	ldr	r2, [pc, #480]	; (6260 <_svfprintf_r+0x680>)
    6080:	ldr	r3, [sp, #144]	; 0x90
    6082:	str	r2, [sp, #44]	; 0x2c
    6084:	cmp	r7, #16
    6086:	ble.n	60ce <_svfprintf_r+0x4ee>
    6088:	mov	r2, r4
    608a:	mov.w	fp, #16
    608e:	ldr	r5, [sp, #24]
    6090:	ldr	r4, [sp, #20]
    6092:	b.n	609e <_svfprintf_r+0x4be>
    6094:	subs	r7, #16
    6096:	cmp	r7, #16
    6098:	add.w	r9, r9, #8
    609c:	ble.n	60cc <_svfprintf_r+0x4ec>
    609e:	adds	r3, #1
    60a0:	adds	r2, #16
    60a2:	cmp	r3, #7
    60a4:	str	r2, [sp, #148]	; 0x94
    60a6:	str	r3, [sp, #144]	; 0x90
    60a8:	stmia.w	r9, {sl, fp}
    60ac:	ble.n	6094 <_svfprintf_r+0x4b4>
    60ae:	add	r2, sp, #140	; 0x8c
    60b0:	mov	r1, r4
    60b2:	mov	r0, r5
    60b4:	bl	8c24 <__ssprint_r>
    60b8:	cmp	r0, #0
    60ba:	bne.w	5dd4 <_svfprintf_r+0x1f4>
    60be:	subs	r7, #16
    60c0:	cmp	r7, #16
    60c2:	ldr	r2, [sp, #148]	; 0x94
    60c4:	ldr	r3, [sp, #144]	; 0x90
    60c6:	add.w	r9, sp, #192	; 0xc0
    60ca:	bgt.n	609e <_svfprintf_r+0x4be>
    60cc:	mov	r4, r2
    60ce:	adds	r3, #1
    60d0:	ldr	r2, [sp, #44]	; 0x2c
    60d2:	str	r3, [sp, #144]	; 0x90
    60d4:	add	r4, r7
    60d6:	cmp	r3, #7
    60d8:	str	r4, [sp, #148]	; 0x94
    60da:	stmia.w	r9, {r2, r7}
    60de:	bgt.w	677a <_svfprintf_r+0xb9a>
    60e2:	add.w	r9, r9, #8
    60e6:	ldr	r3, [sp, #12]
    60e8:	lsls	r2, r3, #23
    60ea:	bmi.w	6562 <_svfprintf_r+0x982>
    60ee:	ldr	r3, [sp, #144]	; 0x90
    60f0:	ldr	r1, [sp, #36]	; 0x24
    60f2:	str.w	r6, [r9]
    60f6:	adds	r3, #1
    60f8:	add	r4, r1
    60fa:	cmp	r3, #7
    60fc:	str	r4, [sp, #148]	; 0x94
    60fe:	str.w	r1, [r9, #4]
    6102:	str	r3, [sp, #144]	; 0x90
    6104:	bgt.w	674e <_svfprintf_r+0xb6e>
    6108:	add.w	r9, r9, #8
    610c:	ldr	r3, [sp, #12]
    610e:	lsls	r1, r3, #29
    6110:	bpl.n	6192 <_svfprintf_r+0x5b2>
    6112:	ldr	r3, [sp, #32]
    6114:	ldr	r2, [sp, #16]
    6116:	subs	r5, r3, r2
    6118:	cmp	r5, #0
    611a:	ble.n	6192 <_svfprintf_r+0x5b2>
    611c:	cmp	r5, #16
    611e:	ldr	r3, [sp, #144]	; 0x90
    6120:	ldr	r7, [pc, #312]	; (625c <_svfprintf_r+0x67c>)
    6122:	ble.n	616c <_svfprintf_r+0x58c>
    6124:	mov	r2, r4
    6126:	movs	r6, #16
    6128:	ldr.w	fp, [sp, #24]
    612c:	ldr	r4, [sp, #20]
    612e:	b.n	613a <_svfprintf_r+0x55a>
    6130:	subs	r5, #16
    6132:	cmp	r5, #16
    6134:	add.w	r9, r9, #8
    6138:	ble.n	616a <_svfprintf_r+0x58a>
    613a:	adds	r3, #1
    613c:	ldr	r1, [pc, #284]	; (625c <_svfprintf_r+0x67c>)
    613e:	str	r3, [sp, #144]	; 0x90
    6140:	adds	r2, #16
    6142:	cmp	r3, #7
    6144:	str	r2, [sp, #148]	; 0x94
    6146:	stmia.w	r9, {r1, r6}
    614a:	ble.n	6130 <_svfprintf_r+0x550>
    614c:	add	r2, sp, #140	; 0x8c
    614e:	mov	r1, r4
    6150:	mov	r0, fp
    6152:	bl	8c24 <__ssprint_r>
    6156:	cmp	r0, #0
    6158:	bne.w	5dd4 <_svfprintf_r+0x1f4>
    615c:	subs	r5, #16
    615e:	cmp	r5, #16
    6160:	ldr	r2, [sp, #148]	; 0x94
    6162:	ldr	r3, [sp, #144]	; 0x90
    6164:	add.w	r9, sp, #192	; 0xc0
    6168:	bgt.n	613a <_svfprintf_r+0x55a>
    616a:	mov	r4, r2
    616c:	adds	r3, #1
    616e:	add	r4, r5
    6170:	cmp	r3, #7
    6172:	str	r4, [sp, #148]	; 0x94
    6174:	str	r3, [sp, #144]	; 0x90
    6176:	str.w	r7, [r9]
    617a:	str.w	r5, [r9, #4]
    617e:	ble.n	6192 <_svfprintf_r+0x5b2>
    6180:	add	r2, sp, #140	; 0x8c
    6182:	ldr	r1, [sp, #20]
    6184:	ldr	r0, [sp, #24]
    6186:	bl	8c24 <__ssprint_r>
    618a:	cmp	r0, #0
    618c:	bne.w	5dd4 <_svfprintf_r+0x1f4>
    6190:	ldr	r4, [sp, #148]	; 0x94
    6192:	ldr	r3, [sp, #28]
    6194:	ldr	r2, [sp, #32]
    6196:	ldr	r1, [sp, #16]
    6198:	cmp	r2, r1
    619a:	ite	ge
    619c:	addge	r3, r3, r2
    619e:	addlt	r3, r3, r1
    61a0:	str	r3, [sp, #28]
    61a2:	cmp	r4, #0
    61a4:	bne.w	6766 <_svfprintf_r+0xb86>
    61a8:	movs	r3, #0
    61aa:	str	r3, [sp, #144]	; 0x90
    61ac:	add.w	r9, sp, #192	; 0xc0
    61b0:	b.n	5c2e <_svfprintf_r+0x4e>
    61b2:	str	r3, [sp, #52]	; 0x34
    61b4:	mov	fp, r5
    61b6:	cmp	r2, #0
    61b8:	bne.w	7280 <_svfprintf_r+0x16a0>
    61bc:	ldr	r3, [sp, #12]
    61be:	ldr	r7, [sp, #40]	; 0x28
    61c0:	lsls	r2, r3, #28
    61c2:	add.w	r7, r7, #7
    61c6:	bpl.w	6cb2 <_svfprintf_r+0x10d2>
    61ca:	bic.w	r3, r7, #7
    61ce:	vldr	d7, [r3]
    61d2:	vstr	d7, [sp, #64]	; 0x40
    61d6:	add.w	r2, r3, #8
    61da:	str	r2, [sp, #40]	; 0x28
    61dc:	ldrd	r1, r2, [sp, #64]	; 0x40
    61e0:	bic.w	r3, r2, #2147483648	; 0x80000000
    61e4:	str	r1, [sp, #88]	; 0x58
    61e6:	str	r3, [sp, #92]	; 0x5c
    61e8:	ldrd	r4, r5, [sp, #88]	; 0x58
    61ec:	mov.w	r2, #4294967295
    61f0:	mov	r0, r4
    61f2:	mov	r1, r5
    61f4:	ldr	r3, [pc, #108]	; (6264 <_svfprintf_r+0x684>)
    61f6:	bl	4af0 <__aeabi_dcmpun>
    61fa:	cmp	r0, #0
    61fc:	bne.w	6bb4 <_svfprintf_r+0xfd4>
    6200:	mov.w	r2, #4294967295
    6204:	ldr	r3, [pc, #92]	; (6264 <_svfprintf_r+0x684>)
    6206:	mov	r0, r4
    6208:	mov	r1, r5
    620a:	bl	4ab4 <__aeabi_dcmple>
    620e:	cmp	r0, #0
    6210:	bne.w	6bb4 <_svfprintf_r+0xfd4>
    6214:	movs	r2, #0
    6216:	movs	r3, #0
    6218:	ldrd	r0, r1, [sp, #64]	; 0x40
    621c:	bl	4aa0 <__aeabi_dcmplt>
    6220:	cmp	r0, #0
    6222:	bne.w	70ca <_svfprintf_r+0x14ea>
    6226:	ldrb.w	r7, [sp, #111]	; 0x6f
    622a:	ldr	r6, [pc, #60]	; (6268 <_svfprintf_r+0x688>)
    622c:	ldr	r3, [pc, #60]	; (626c <_svfprintf_r+0x68c>)
    622e:	ldr	r1, [sp, #12]
    6230:	bic.w	r1, r1, #128	; 0x80
    6234:	str	r1, [sp, #12]
    6236:	ldr	r1, [sp, #52]	; 0x34
    6238:	movs	r2, #3
    623a:	mov.w	fp, #0
    623e:	str	r2, [sp, #16]
    6240:	cmp	r1, #71	; 0x47
    6242:	it	le
    6244:	movle	r6, r3
    6246:	str	r2, [sp, #36]	; 0x24
    6248:	str.w	fp, [sp, #60]	; 0x3c
    624c:	b.n	5f84 <_svfprintf_r+0x3a4>
    624e:	ldr	r3, [sp, #12]
    6250:	orr.w	r3, r3, #8
    6254:	str	r3, [sp, #12]
    6256:	ldrb.w	r3, [r8]
    625a:	b.n	5c94 <_svfprintf_r+0xb4>
    625c:	.word	0x200006bc
    6260:	.word	0x20000dd4
    6264:	.word	0x7fefffff
    6268:	.word	0x20000d18
    626c:	.word	0x20000d14
    6270:	str	r3, [sp, #52]	; 0x34
    6272:	mov	fp, r5
    6274:	cmp	r2, #0
    6276:	bne.w	7298 <_svfprintf_r+0x16b8>
    627a:	ldr	r3, [sp, #12]
    627c:	orr.w	r3, r3, #16
    6280:	str	r3, [sp, #12]
    6282:	ldr	r2, [sp, #12]
    6284:	ands.w	r3, r2, #32
    6288:	bne.w	5e00 <_svfprintf_r+0x220>
    628c:	ldr	r1, [sp, #12]
    628e:	ands.w	r2, r1, #16
    6292:	beq.w	6b4c <_svfprintf_r+0xf6c>
    6296:	ldr	r0, [sp, #40]	; 0x28
    6298:	strb.w	r3, [sp, #111]	; 0x6f
    629c:	cmp.w	fp, #0
    62a0:	ldr	r4, [r0, #0]
    62a2:	add.w	r7, r0, #4
    62a6:	mov.w	r5, #0
    62aa:	blt.w	6ce0 <_svfprintf_r+0x1100>
    62ae:	mov	r2, r1
    62b0:	bic.w	r2, r2, #128	; 0x80
    62b4:	str	r2, [sp, #12]
    62b6:	orrs.w	r2, r4, r5
    62ba:	str	r7, [sp, #40]	; 0x28
    62bc:	beq.w	6534 <_svfprintf_r+0x954>
    62c0:	mov	r7, r3
    62c2:	b.n	5e2c <_svfprintf_r+0x24c>
    62c4:	str	r3, [sp, #52]	; 0x34
    62c6:	mov	fp, r5
    62c8:	cmp	r2, #0
    62ca:	bne.w	7290 <_svfprintf_r+0x16b0>
    62ce:	ldr	r3, [sp, #12]
    62d0:	orr.w	r3, r3, #16
    62d4:	str	r3, [sp, #12]
    62d6:	ldr	r2, [sp, #12]
    62d8:	ands.w	r3, r2, #32
    62dc:	beq.w	6938 <_svfprintf_r+0xd58>
    62e0:	ldr	r7, [sp, #40]	; 0x28
    62e2:	adds	r7, #7
    62e4:	bic.w	r3, r7, #7
    62e8:	movs	r7, #0
    62ea:	add.w	r1, r3, #8
    62ee:	cmp	fp, r7
    62f0:	str	r1, [sp, #40]	; 0x28
    62f2:	ldrd	r4, r5, [r3]
    62f6:	strb.w	r7, [sp, #111]	; 0x6f
    62fa:	blt.w	69aa <_svfprintf_r+0xdca>
    62fe:	bic.w	r3, r2, #128	; 0x80
    6302:	str	r3, [sp, #12]
    6304:	orrs.w	r3, r4, r5
    6308:	bne.w	5f3c <_svfprintf_r+0x35c>
    630c:	cmp.w	fp, #0
    6310:	beq.w	64fe <_svfprintf_r+0x91e>
    6314:	movs	r4, #0
    6316:	add	r6, sp, #256	; 0x100
    6318:	adds	r4, #48	; 0x30
    631a:	strb.w	r4, [r6, #-65]!
    631e:	b.n	5f70 <_svfprintf_r+0x390>
    6320:	str	r3, [sp, #52]	; 0x34
    6322:	mov	fp, r5
    6324:	cmp	r2, #0
    6326:	bne.w	7288 <_svfprintf_r+0x16a8>
    632a:	ldr	r3, [sp, #12]
    632c:	ldr	r0, [pc, #700]	; (65ec <_svfprintf_r+0xa0c>)
    632e:	lsls	r5, r3, #26
    6330:	bpl.w	649e <_svfprintf_r+0x8be>
    6334:	ldr	r7, [sp, #40]	; 0x28
    6336:	adds	r7, #7
    6338:	bic.w	r3, r7, #7
    633c:	ldrd	r4, r5, [r3]
    6340:	add.w	r2, r3, #8
    6344:	str	r2, [sp, #40]	; 0x28
    6346:	ldr	r2, [sp, #12]
    6348:	ands.w	r7, r2, #1
    634c:	beq.w	67c2 <_svfprintf_r+0xbe2>
    6350:	orrs.w	r3, r4, r5
    6354:	beq.w	6d5c <_svfprintf_r+0x117c>
    6358:	ldrb.w	r2, [sp, #52]	; 0x34
    635c:	strb.w	r2, [sp, #113]	; 0x71
    6360:	movs	r7, #0
    6362:	ldr	r2, [sp, #12]
    6364:	strb.w	r7, [sp, #111]	; 0x6f
    6368:	movs	r3, #48	; 0x30
    636a:	cmp	fp, r7
    636c:	strb.w	r3, [sp, #112]	; 0x70
    6370:	orr.w	r3, r2, #2
    6374:	blt.w	70d4 <_svfprintf_r+0x14f4>
    6378:	bic.w	r3, r2, #128	; 0x80
    637c:	orr.w	r3, r3, #2
    6380:	str	r3, [sp, #12]
    6382:	add	r6, sp, #192	; 0xc0
    6384:	lsrs	r3, r4, #4
    6386:	and.w	r1, r4, #15
    638a:	orr.w	r3, r3, r5, lsl #28
    638e:	lsrs	r2, r5, #4
    6390:	mov	r4, r3
    6392:	mov	r5, r2
    6394:	ldrb	r3, [r0, r1]
    6396:	strb.w	r3, [r6, #-1]!
    639a:	orrs.w	r3, r4, r5
    639e:	bne.n	6384 <_svfprintf_r+0x7a4>
    63a0:	b.n	5f70 <_svfprintf_r+0x390>
    63a2:	ldr	r1, [sp, #40]	; 0x28
    63a4:	str	r3, [sp, #52]	; 0x34
    63a6:	ldr	r2, [r1, #0]
    63a8:	strb.w	r2, [sp, #152]	; 0x98
    63ac:	movs	r3, #0
    63ae:	mov	r2, r1
    63b0:	mov	r7, r3
    63b2:	strb.w	r3, [sp, #111]	; 0x6f
    63b6:	adds	r2, #4
    63b8:	movs	r3, #1
    63ba:	str	r3, [sp, #16]
    63bc:	mov	fp, r7
    63be:	str	r7, [sp, #60]	; 0x3c
    63c0:	str	r2, [sp, #40]	; 0x28
    63c2:	str	r3, [sp, #36]	; 0x24
    63c4:	add	r6, sp, #152	; 0x98
    63c6:	b.n	5f8c <_svfprintf_r+0x3ac>
    63c8:	str	r3, [sp, #52]	; 0x34
    63ca:	mov	fp, r5
    63cc:	cmp	r2, #0
    63ce:	beq.w	5ef8 <_svfprintf_r+0x318>
    63d2:	strb.w	r1, [sp, #111]	; 0x6f
    63d6:	b.n	5ef8 <_svfprintf_r+0x318>
    63d8:	ldr	r3, [sp, #12]
    63da:	orr.w	r3, r3, #64	; 0x40
    63de:	str	r3, [sp, #12]
    63e0:	ldrb.w	r3, [r8]
    63e4:	b.n	5c94 <_svfprintf_r+0xb4>
    63e6:	ldrb.w	r3, [r8]
    63ea:	cmp	r1, #0
    63ec:	bne.w	5c94 <_svfprintf_r+0xb4>
    63f0:	movs	r2, #1
    63f2:	movs	r1, #32
    63f4:	b.n	5c94 <_svfprintf_r+0xb4>
    63f6:	ldr	r3, [sp, #12]
    63f8:	orr.w	r3, r3, #1
    63fc:	str	r3, [sp, #12]
    63fe:	ldrb.w	r3, [r8]
    6402:	b.n	5c94 <_svfprintf_r+0xb4>
    6404:	ldr	r4, [sp, #40]	; 0x28
    6406:	ldr	r3, [r4, #0]
    6408:	str	r3, [sp, #32]
    640a:	mov	r0, r3
    640c:	cmp	r0, #0
    640e:	mov	r3, r4
    6410:	add.w	r3, r3, #4
    6414:	blt.w	5d58 <_svfprintf_r+0x178>
    6418:	str	r3, [sp, #40]	; 0x28
    641a:	ldrb.w	r3, [r8]
    641e:	b.n	5c94 <_svfprintf_r+0xb4>
    6420:	ldrb.w	r3, [r8]
    6424:	movs	r2, #1
    6426:	movs	r1, #43	; 0x2b
    6428:	b.n	5c94 <_svfprintf_r+0xb4>
    642a:	ldr	r3, [sp, #12]
    642c:	orr.w	r3, r3, #32
    6430:	str	r3, [sp, #12]
    6432:	ldrb.w	r3, [r8]
    6436:	b.n	5c94 <_svfprintf_r+0xb4>
    6438:	ldr	r2, [sp, #40]	; 0x28
    643a:	str	r3, [sp, #52]	; 0x34
    643c:	ldr	r6, [r2, #0]
    643e:	movs	r4, #0
    6440:	strb.w	r4, [sp, #111]	; 0x6f
    6444:	adds	r7, r2, #4
    6446:	cmp	r6, #0
    6448:	beq.w	7084 <_svfprintf_r+0x14a4>
    644c:	cmp	r5, #0
    644e:	blt.w	6f14 <_svfprintf_r+0x1334>
    6452:	mov	r2, r5
    6454:	mov	r1, r4
    6456:	mov	r0, r6
    6458:	bl	8560 <memchr>
    645c:	cmp	r0, #0
    645e:	beq.w	7128 <_svfprintf_r+0x1548>
    6462:	subs	r3, r0, r6
    6464:	str	r3, [sp, #36]	; 0x24
    6466:	mov	fp, r4
    6468:	bic.w	r3, r3, r3, asr #31
    646c:	str	r7, [sp, #40]	; 0x28
    646e:	str	r3, [sp, #16]
    6470:	str.w	fp, [sp, #60]	; 0x3c
    6474:	ldrb.w	r7, [sp, #111]	; 0x6f
    6478:	b.n	5f84 <_svfprintf_r+0x3a4>
    647a:	str	r3, [sp, #52]	; 0x34
    647c:	mov	fp, r5
    647e:	cmp	r2, #0
    6480:	beq.w	62d6 <_svfprintf_r+0x6f6>
    6484:	strb.w	r1, [sp, #111]	; 0x6f
    6488:	b.n	62d6 <_svfprintf_r+0x6f6>
    648a:	str	r3, [sp, #52]	; 0x34
    648c:	mov	fp, r5
    648e:	cmp	r2, #0
    6490:	bne.w	72b0 <_svfprintf_r+0x16d0>
    6494:	ldr	r3, [sp, #12]
    6496:	ldr	r0, [pc, #344]	; (65f0 <_svfprintf_r+0xa10>)
    6498:	lsls	r5, r3, #26
    649a:	bmi.w	6334 <_svfprintf_r+0x754>
    649e:	ldr	r3, [sp, #12]
    64a0:	lsls	r4, r3, #27
    64a2:	bpl.w	6d22 <_svfprintf_r+0x1142>
    64a6:	ldr	r2, [sp, #40]	; 0x28
    64a8:	mov	r3, r2
    64aa:	adds	r3, #4
    64ac:	ldr	r4, [r2, #0]
    64ae:	str	r3, [sp, #40]	; 0x28
    64b0:	movs	r5, #0
    64b2:	b.n	6346 <_svfprintf_r+0x766>
    64b4:	ldrb.w	r3, [r8]
    64b8:	cmp	r3, #108	; 0x6c
    64ba:	beq.w	6e42 <_svfprintf_r+0x1262>
    64be:	ldr	r0, [sp, #12]
    64c0:	orr.w	r0, r0, #16
    64c4:	str	r0, [sp, #12]
    64c6:	b.w	5c94 <_svfprintf_r+0xb4>
    64ca:	cmp	r2, #0
    64cc:	bne.w	72a8 <_svfprintf_r+0x16c8>
    64d0:	ldr	r3, [sp, #12]
    64d2:	lsls	r3, r3, #26
    64d4:	bpl.w	6b86 <_svfprintf_r+0xfa6>
    64d8:	ldr	r2, [sp, #40]	; 0x28
    64da:	ldr	r1, [sp, #28]
    64dc:	ldr	r3, [r2, #0]
    64de:	asrs	r5, r1, #31
    64e0:	mov	r0, r1
    64e2:	adds	r2, #4
    64e4:	mov	r1, r5
    64e6:	str	r2, [sp, #40]	; 0x28
    64e8:	strd	r0, r1, [r3]
    64ec:	b.w	5c2e <_svfprintf_r+0x4e>
    64f0:	ldr	r0, [pc, #252]	; (65f0 <_svfprintf_r+0xa10>)
    64f2:	str	r2, [sp, #52]	; 0x34
    64f4:	cmp.w	fp, #0
    64f8:	bne.w	67e4 <_svfprintf_r+0xc04>
    64fc:	mov	r7, fp
    64fe:	mov.w	fp, #0
    6502:	str.w	fp, [sp, #36]	; 0x24
    6506:	add	r6, sp, #192	; 0xc0
    6508:	b.n	5f76 <_svfprintf_r+0x396>
    650a:	str	r3, [sp, #52]	; 0x34
    650c:	cmp	r2, #0
    650e:	bne.w	72a0 <_svfprintf_r+0x16c0>
    6512:	ldr	r2, [sp, #52]	; 0x34
    6514:	cmp	r2, #0
    6516:	beq.w	5dc6 <_svfprintf_r+0x1e6>
    651a:	movs	r3, #0
    651c:	movs	r1, #1
    651e:	mov	r7, r3
    6520:	str	r1, [sp, #16]
    6522:	strb.w	r2, [sp, #152]	; 0x98
    6526:	strb.w	r3, [sp, #111]	; 0x6f
    652a:	mov	fp, r3
    652c:	str	r3, [sp, #60]	; 0x3c
    652e:	str	r1, [sp, #36]	; 0x24
    6530:	add	r6, sp, #152	; 0x98
    6532:	b.n	5f8c <_svfprintf_r+0x3ac>
    6534:	cmp.w	fp, #0
    6538:	beq.w	7158 <_svfprintf_r+0x1578>
    653c:	movs	r7, #0
    653e:	movs	r4, #0
    6540:	movs	r5, #0
    6542:	b.n	5e2c <_svfprintf_r+0x24c>
    6544:	ldr	r0, [pc, #168]	; (65f0 <_svfprintf_r+0xa10>)
    6546:	str	r3, [sp, #12]
    6548:	str	r2, [sp, #52]	; 0x34
    654a:	orrs.w	r3, r4, r5
    654e:	str	r7, [sp, #40]	; 0x28
    6550:	mov.w	r7, #0
    6554:	bne.w	6382 <_svfprintf_r+0x7a2>
    6558:	movs	r4, #0
    655a:	movs	r5, #0
    655c:	b.n	6382 <_svfprintf_r+0x7a2>
    655e:	ldr	r4, [sp, #148]	; 0x94
    6560:	b.n	602c <_svfprintf_r+0x44c>
    6562:	ldr	r3, [sp, #52]	; 0x34
    6564:	cmp	r3, #101	; 0x65
    6566:	ble.w	66be <_svfprintf_r+0xade>
    656a:	movs	r2, #0
    656c:	movs	r3, #0
    656e:	ldrd	r0, r1, [sp, #64]	; 0x40
    6572:	bl	4a8c <__aeabi_dcmpeq>
    6576:	cmp	r0, #0
    6578:	beq.w	67e8 <_svfprintf_r+0xc08>
    657c:	ldr	r3, [sp, #144]	; 0x90
    657e:	ldr	r2, [pc, #116]	; (65f4 <_svfprintf_r+0xa14>)
    6580:	str.w	r2, [r9]
    6584:	adds	r3, #1
    6586:	adds	r4, #1
    6588:	movs	r2, #1
    658a:	cmp	r3, #7
    658c:	str	r4, [sp, #148]	; 0x94
    658e:	str	r3, [sp, #144]	; 0x90
    6590:	str.w	r2, [r9, #4]
    6594:	bgt.w	6d74 <_svfprintf_r+0x1194>
    6598:	add.w	r9, r9, #8
    659c:	ldr	r3, [sp, #116]	; 0x74
    659e:	ldr	r2, [sp, #56]	; 0x38
    65a0:	cmp	r3, r2
    65a2:	blt.n	65ac <_svfprintf_r+0x9cc>
    65a4:	ldr	r3, [sp, #12]
    65a6:	lsls	r3, r3, #31
    65a8:	bpl.w	610c <_svfprintf_r+0x52c>
    65ac:	ldr	r3, [sp, #144]	; 0x90
    65ae:	ldr	r1, [sp, #72]	; 0x48
    65b0:	ldr	r2, [sp, #76]	; 0x4c
    65b2:	str.w	r2, [r9]
    65b6:	adds	r3, #1
    65b8:	add	r4, r1
    65ba:	cmp	r3, #7
    65bc:	str	r4, [sp, #148]	; 0x94
    65be:	str.w	r1, [r9, #4]
    65c2:	str	r3, [sp, #144]	; 0x90
    65c4:	bgt.w	6e56 <_svfprintf_r+0x1276>
    65c8:	add.w	r9, r9, #8
    65cc:	ldr	r3, [sp, #56]	; 0x38
    65ce:	subs	r5, r3, #1
    65d0:	cmp	r5, #0
    65d2:	ble.w	610c <_svfprintf_r+0x52c>
    65d6:	ldr	r2, [pc, #32]	; (65f8 <_svfprintf_r+0xa18>)
    65d8:	ldr	r3, [sp, #144]	; 0x90
    65da:	str	r2, [sp, #44]	; 0x2c
    65dc:	cmp	r5, #16
    65de:	ble.w	69b4 <_svfprintf_r+0xdd4>
    65e2:	movs	r6, #16
    65e4:	ldr	r7, [sp, #24]
    65e6:	ldr.w	fp, [sp, #20]
    65ea:	b.n	6608 <_svfprintf_r+0xa28>
    65ec:	.word	0x20000d24
    65f0:	.word	0x20000d38
    65f4:	.word	0x20000d54
    65f8:	.word	0x20000dd4
    65fc:	add.w	r9, r9, #8
    6600:	subs	r5, #16
    6602:	cmp	r5, #16
    6604:	ble.w	69b4 <_svfprintf_r+0xdd4>
    6608:	adds	r3, #1
    660a:	adds	r4, #16
    660c:	cmp	r3, #7
    660e:	str	r4, [sp, #148]	; 0x94
    6610:	str	r3, [sp, #144]	; 0x90
    6612:	str.w	sl, [r9]
    6616:	str.w	r6, [r9, #4]
    661a:	ble.n	65fc <_svfprintf_r+0xa1c>
    661c:	add	r2, sp, #140	; 0x8c
    661e:	mov	r1, fp
    6620:	mov	r0, r7
    6622:	bl	8c24 <__ssprint_r>
    6626:	cmp	r0, #0
    6628:	bne.w	5dd4 <_svfprintf_r+0x1f4>
    662c:	ldr	r4, [sp, #148]	; 0x94
    662e:	ldr	r3, [sp, #144]	; 0x90
    6630:	add.w	r9, sp, #192	; 0xc0
    6634:	b.n	6600 <_svfprintf_r+0xa20>
    6636:	ldr	r3, [sp, #32]
    6638:	ldr	r2, [sp, #16]
    663a:	subs	r7, r3, r2
    663c:	cmp	r7, #0
    663e:	ble.w	6074 <_svfprintf_r+0x494>
    6642:	ldr	r2, [pc, #752]	; (6934 <_svfprintf_r+0xd54>)
    6644:	ldr	r3, [sp, #144]	; 0x90
    6646:	str	r2, [sp, #44]	; 0x2c
    6648:	cmp	r7, #16
    664a:	ble.n	66a4 <_svfprintf_r+0xac4>
    664c:	mov	r2, r9
    664e:	mov	r1, r4
    6650:	mov	r9, r7
    6652:	movs	r5, #16
    6654:	mov	r7, r6
    6656:	ldr	r4, [sp, #24]
    6658:	ldr	r6, [sp, #20]
    665a:	b.n	666a <_svfprintf_r+0xa8a>
    665c:	sub.w	r9, r9, #16
    6660:	cmp.w	r9, #16
    6664:	add.w	r2, r2, #8
    6668:	ble.n	669c <_svfprintf_r+0xabc>
    666a:	adds	r3, #1
    666c:	adds	r1, #16
    666e:	cmp	r3, #7
    6670:	str	r1, [sp, #148]	; 0x94
    6672:	str	r3, [sp, #144]	; 0x90
    6674:	str.w	sl, [r2]
    6678:	str	r5, [r2, #4]
    667a:	ble.n	665c <_svfprintf_r+0xa7c>
    667c:	add	r2, sp, #140	; 0x8c
    667e:	mov	r1, r6
    6680:	mov	r0, r4
    6682:	bl	8c24 <__ssprint_r>
    6686:	cmp	r0, #0
    6688:	bne.w	5dd4 <_svfprintf_r+0x1f4>
    668c:	sub.w	r9, r9, #16
    6690:	cmp.w	r9, #16
    6694:	ldr	r1, [sp, #148]	; 0x94
    6696:	ldr	r3, [sp, #144]	; 0x90
    6698:	add	r2, sp, #192	; 0xc0
    669a:	bgt.n	666a <_svfprintf_r+0xa8a>
    669c:	mov	r6, r7
    669e:	mov	r4, r1
    66a0:	mov	r7, r9
    66a2:	mov	r9, r2
    66a4:	adds	r3, #1
    66a6:	ldr	r2, [sp, #44]	; 0x2c
    66a8:	str	r3, [sp, #144]	; 0x90
    66aa:	add	r4, r7
    66ac:	cmp	r3, #7
    66ae:	str	r4, [sp, #148]	; 0x94
    66b0:	stmia.w	r9, {r2, r7}
    66b4:	bgt.w	6b32 <_svfprintf_r+0xf52>
    66b8:	add.w	r9, r9, #8
    66bc:	b.n	6074 <_svfprintf_r+0x494>
    66be:	ldr	r3, [sp, #56]	; 0x38
    66c0:	ldr	r5, [sp, #144]	; 0x90
    66c2:	cmp	r3, #1
    66c4:	ble.w	6adc <_svfprintf_r+0xefc>
    66c8:	adds	r5, #1
    66ca:	adds	r4, #1
    66cc:	movs	r3, #1
    66ce:	cmp	r5, #7
    66d0:	str	r4, [sp, #148]	; 0x94
    66d2:	str	r5, [sp, #144]	; 0x90
    66d4:	str.w	r6, [r9]
    66d8:	str.w	r3, [r9, #4]
    66dc:	bgt.w	6afe <_svfprintf_r+0xf1e>
    66e0:	add.w	r9, r9, #8
    66e4:	ldr	r2, [sp, #72]	; 0x48
    66e6:	ldr	r3, [sp, #76]	; 0x4c
    66e8:	str.w	r3, [r9]
    66ec:	adds	r5, #1
    66ee:	add	r4, r2
    66f0:	cmp	r5, #7
    66f2:	str	r4, [sp, #148]	; 0x94
    66f4:	str	r5, [sp, #144]	; 0x90
    66f6:	str.w	r2, [r9, #4]
    66fa:	bgt.w	6b18 <_svfprintf_r+0xf38>
    66fe:	add.w	r9, r9, #8
    6702:	movs	r3, #0
    6704:	movs	r2, #0
    6706:	ldrd	r0, r1, [sp, #64]	; 0x40
    670a:	bl	4a8c <__aeabi_dcmpeq>
    670e:	ldr	r3, [sp, #56]	; 0x38
    6710:	cmp	r0, #0
    6712:	bne.w	689c <_svfprintf_r+0xcbc>
    6716:	subs	r3, #1
    6718:	adds	r5, #1
    671a:	adds	r6, #1
    671c:	add	r4, r3
    671e:	cmp	r5, #7
    6720:	str	r5, [sp, #144]	; 0x90
    6722:	str	r4, [sp, #148]	; 0x94
    6724:	str.w	r6, [r9]
    6728:	str.w	r3, [r9, #4]
    672c:	bgt.w	691a <_svfprintf_r+0xd3a>
    6730:	add.w	r9, r9, #8
    6734:	ldr	r2, [sp, #84]	; 0x54
    6736:	str.w	r2, [r9, #4]
    673a:	adds	r5, #1
    673c:	add	r4, r2
    673e:	add	r3, sp, #124	; 0x7c
    6740:	cmp	r5, #7
    6742:	str	r4, [sp, #148]	; 0x94
    6744:	str	r5, [sp, #144]	; 0x90
    6746:	str.w	r3, [r9]
    674a:	ble.w	6108 <_svfprintf_r+0x528>
    674e:	add	r2, sp, #140	; 0x8c
    6750:	ldr	r1, [sp, #20]
    6752:	ldr	r0, [sp, #24]
    6754:	bl	8c24 <__ssprint_r>
    6758:	cmp	r0, #0
    675a:	bne.w	5dd4 <_svfprintf_r+0x1f4>
    675e:	ldr	r4, [sp, #148]	; 0x94
    6760:	add.w	r9, sp, #192	; 0xc0
    6764:	b.n	610c <_svfprintf_r+0x52c>
    6766:	add	r2, sp, #140	; 0x8c
    6768:	ldr	r1, [sp, #20]
    676a:	ldr	r0, [sp, #24]
    676c:	bl	8c24 <__ssprint_r>
    6770:	cmp	r0, #0
    6772:	beq.w	61a8 <_svfprintf_r+0x5c8>
    6776:	b.w	5dd4 <_svfprintf_r+0x1f4>
    677a:	add	r2, sp, #140	; 0x8c
    677c:	ldr	r1, [sp, #20]
    677e:	ldr	r0, [sp, #24]
    6780:	bl	8c24 <__ssprint_r>
    6784:	cmp	r0, #0
    6786:	bne.w	5dd4 <_svfprintf_r+0x1f4>
    678a:	ldr	r4, [sp, #148]	; 0x94
    678c:	add.w	r9, sp, #192	; 0xc0
    6790:	b.n	60e6 <_svfprintf_r+0x506>
    6792:	add	r2, sp, #140	; 0x8c
    6794:	ldr	r1, [sp, #20]
    6796:	ldr	r0, [sp, #24]
    6798:	bl	8c24 <__ssprint_r>
    679c:	cmp	r0, #0
    679e:	bne.w	5dd4 <_svfprintf_r+0x1f4>
    67a2:	ldr	r4, [sp, #148]	; 0x94
    67a4:	add.w	r9, sp, #192	; 0xc0
    67a8:	b.n	604c <_svfprintf_r+0x46c>
    67aa:	add	r2, sp, #140	; 0x8c
    67ac:	ldr	r1, [sp, #20]
    67ae:	ldr	r0, [sp, #24]
    67b0:	bl	8c24 <__ssprint_r>
    67b4:	cmp	r0, #0
    67b6:	bne.w	5dd4 <_svfprintf_r+0x1f4>
    67ba:	ldr	r4, [sp, #148]	; 0x94
    67bc:	add.w	r9, sp, #192	; 0xc0
    67c0:	b.n	606c <_svfprintf_r+0x48c>
    67c2:	cmp.w	fp, #0
    67c6:	strb.w	r7, [sp, #111]	; 0x6f
    67ca:	blt.w	6d8c <_svfprintf_r+0x11ac>
    67ce:	bic.w	r3, r2, #128	; 0x80
    67d2:	str	r3, [sp, #12]
    67d4:	orrs.w	r3, r4, r5
    67d8:	bne.w	6382 <_svfprintf_r+0x7a2>
    67dc:	cmp.w	fp, #0
    67e0:	beq.w	64fc <_svfprintf_r+0x91c>
    67e4:	movs	r7, #0
    67e6:	b.n	6558 <_svfprintf_r+0x978>
    67e8:	ldr	r5, [sp, #116]	; 0x74
    67ea:	cmp	r5, #0
    67ec:	ble.w	6d92 <_svfprintf_r+0x11b2>
    67f0:	ldr	r3, [sp, #60]	; 0x3c
    67f2:	ldr	r2, [sp, #56]	; 0x38
    67f4:	cmp	r3, r2
    67f6:	it	ge
    67f8:	movge	r3, r2
    67fa:	cmp	r3, #0
    67fc:	mov	r5, r3
    67fe:	ble.n	681c <_svfprintf_r+0xc3c>
    6800:	ldr	r3, [sp, #144]	; 0x90
    6802:	str.w	r6, [r9]
    6806:	adds	r3, #1
    6808:	add	r4, r5
    680a:	cmp	r3, #7
    680c:	str	r4, [sp, #148]	; 0x94
    680e:	str.w	r5, [r9, #4]
    6812:	str	r3, [sp, #144]	; 0x90
    6814:	bgt.w	6f6a <_svfprintf_r+0x138a>
    6818:	add.w	r9, r9, #8
    681c:	ldr	r3, [sp, #60]	; 0x3c
    681e:	cmp	r5, #0
    6820:	it	ge
    6822:	subge	r3, r3, r5
    6824:	cmp	r3, #0
    6826:	mov	r5, r3
    6828:	ble.w	6a1c <_svfprintf_r+0xe3c>
    682c:	ldr	r2, [pc, #260]	; (6934 <_svfprintf_r+0xd54>)
    682e:	ldr	r3, [sp, #144]	; 0x90
    6830:	str	r2, [sp, #44]	; 0x2c
    6832:	cmp	r5, #16
    6834:	ble.w	6d3e <_svfprintf_r+0x115e>
    6838:	mov	r2, r4
    683a:	movs	r7, #16
    683c:	ldr.w	fp, [sp, #24]
    6840:	ldr	r4, [sp, #20]
    6842:	b.n	6850 <_svfprintf_r+0xc70>
    6844:	add.w	r9, r9, #8
    6848:	subs	r5, #16
    684a:	cmp	r5, #16
    684c:	ble.w	6d3c <_svfprintf_r+0x115c>
    6850:	adds	r3, #1
    6852:	adds	r2, #16
    6854:	cmp	r3, #7
    6856:	str	r2, [sp, #148]	; 0x94
    6858:	str	r3, [sp, #144]	; 0x90
    685a:	str.w	sl, [r9]
    685e:	str.w	r7, [r9, #4]
    6862:	ble.n	6844 <_svfprintf_r+0xc64>
    6864:	add	r2, sp, #140	; 0x8c
    6866:	mov	r1, r4
    6868:	mov	r0, fp
    686a:	bl	8c24 <__ssprint_r>
    686e:	cmp	r0, #0
    6870:	bne.w	5dd4 <_svfprintf_r+0x1f4>
    6874:	ldr	r2, [sp, #148]	; 0x94
    6876:	ldr	r3, [sp, #144]	; 0x90
    6878:	add.w	r9, sp, #192	; 0xc0
    687c:	b.n	6848 <_svfprintf_r+0xc68>
    687e:	add	r2, sp, #140	; 0x8c
    6880:	ldr	r1, [sp, #20]
    6882:	ldr	r0, [sp, #24]
    6884:	bl	8c24 <__ssprint_r>
    6888:	cmp	r0, #0
    688a:	bne.w	5dd4 <_svfprintf_r+0x1f4>
    688e:	ldrb.w	r7, [sp, #111]	; 0x6f
    6892:	ldr	r4, [sp, #148]	; 0x94
    6894:	add.w	r9, sp, #192	; 0xc0
    6898:	b.w	602c <_svfprintf_r+0x44c>
    689c:	subs	r6, r3, #1
    689e:	cmp	r6, #0
    68a0:	ble.w	6734 <_svfprintf_r+0xb54>
    68a4:	ldr	r3, [pc, #140]	; (6934 <_svfprintf_r+0xd54>)
    68a6:	str	r3, [sp, #44]	; 0x2c
    68a8:	cmp	r6, #16
    68aa:	ble.n	6906 <_svfprintf_r+0xd26>
    68ac:	str.w	r8, [sp, #36]	; 0x24
    68b0:	movs	r7, #16
    68b2:	mov	r8, r6
    68b4:	ldr.w	fp, [sp, #24]
    68b8:	ldr	r6, [sp, #20]
    68ba:	b.n	68ca <_svfprintf_r+0xcea>
    68bc:	sub.w	r8, r8, #16
    68c0:	cmp.w	r8, #16
    68c4:	add.w	r9, r9, #8
    68c8:	ble.n	6900 <_svfprintf_r+0xd20>
    68ca:	adds	r5, #1
    68cc:	adds	r4, #16
    68ce:	cmp	r5, #7
    68d0:	str	r4, [sp, #148]	; 0x94
    68d2:	str	r5, [sp, #144]	; 0x90
    68d4:	str.w	sl, [r9]
    68d8:	str.w	r7, [r9, #4]
    68dc:	ble.n	68bc <_svfprintf_r+0xcdc>
    68de:	add	r2, sp, #140	; 0x8c
    68e0:	mov	r1, r6
    68e2:	mov	r0, fp
    68e4:	bl	8c24 <__ssprint_r>
    68e8:	cmp	r0, #0
    68ea:	bne.w	5dd4 <_svfprintf_r+0x1f4>
    68ee:	sub.w	r8, r8, #16
    68f2:	cmp.w	r8, #16
    68f6:	ldr	r4, [sp, #148]	; 0x94
    68f8:	ldr	r5, [sp, #144]	; 0x90
    68fa:	add.w	r9, sp, #192	; 0xc0
    68fe:	bgt.n	68ca <_svfprintf_r+0xcea>
    6900:	mov	r6, r8
    6902:	ldr.w	r8, [sp, #36]	; 0x24
    6906:	ldr	r3, [sp, #44]	; 0x2c
    6908:	adds	r5, #1
    690a:	add	r4, r6
    690c:	cmp	r5, #7
    690e:	str	r4, [sp, #148]	; 0x94
    6910:	str	r5, [sp, #144]	; 0x90
    6912:	stmia.w	r9, {r3, r6}
    6916:	ble.w	6730 <_svfprintf_r+0xb50>
    691a:	add	r2, sp, #140	; 0x8c
    691c:	ldr	r1, [sp, #20]
    691e:	ldr	r0, [sp, #24]
    6920:	bl	8c24 <__ssprint_r>
    6924:	cmp	r0, #0
    6926:	bne.w	5dd4 <_svfprintf_r+0x1f4>
    692a:	ldr	r4, [sp, #148]	; 0x94
    692c:	ldr	r5, [sp, #144]	; 0x90
    692e:	add.w	r9, sp, #192	; 0xc0
    6932:	b.n	6734 <_svfprintf_r+0xb54>
    6934:	.word	0x20000dd4
    6938:	ldr	r1, [sp, #12]
    693a:	ands.w	r2, r1, #16
    693e:	beq.w	6ce8 <_svfprintf_r+0x1108>
    6942:	ldr	r0, [sp, #40]	; 0x28
    6944:	strb.w	r3, [sp, #111]	; 0x6f
    6948:	cmp.w	fp, #0
    694c:	ldr	r4, [r0, #0]
    694e:	add.w	r7, r0, #4
    6952:	mov.w	r5, #0
    6956:	blt.n	69a6 <_svfprintf_r+0xdc6>
    6958:	mov	r2, r1
    695a:	bic.w	r2, r2, #128	; 0x80
    695e:	str	r2, [sp, #12]
    6960:	orrs.w	r2, r4, r5
    6964:	str	r7, [sp, #40]	; 0x28
    6966:	mov	r7, r3
    6968:	bne.w	5f3c <_svfprintf_r+0x35c>
    696c:	b.n	630c <_svfprintf_r+0x72c>
    696e:	ldr	r3, [sp, #12]
    6970:	lsls	r0, r3, #27
    6972:	bmi.n	69ca <_svfprintf_r+0xdea>
    6974:	ldr	r3, [sp, #12]
    6976:	lsls	r1, r3, #25
    6978:	bpl.n	69ca <_svfprintf_r+0xdea>
    697a:	ldr	r1, [sp, #40]	; 0x28
    697c:	ldrsh.w	r4, [r1]
    6980:	adds	r1, #4
    6982:	asrs	r5, r4, #31
    6984:	mov	r2, r4
    6986:	mov	r3, r5
    6988:	str	r1, [sp, #40]	; 0x28
    698a:	b.w	5f16 <_svfprintf_r+0x336>
    698e:	ldr	r1, [sp, #40]	; 0x28
    6990:	strb.w	r3, [sp, #111]	; 0x6f
    6994:	cmp.w	fp, #0
    6998:	ldr	r4, [r1, #0]
    699a:	add.w	r7, r1, #4
    699e:	mov.w	r5, #0
    69a2:	bge.w	6e3e <_svfprintf_r+0x125e>
    69a6:	str	r7, [sp, #40]	; 0x28
    69a8:	mov	r7, r3
    69aa:	orrs.w	r3, r4, r5
    69ae:	bne.w	5f3c <_svfprintf_r+0x35c>
    69b2:	b.n	6316 <_svfprintf_r+0x736>
    69b4:	adds	r3, #1
    69b6:	ldr	r2, [sp, #44]	; 0x2c
    69b8:	str	r3, [sp, #144]	; 0x90
    69ba:	add	r4, r5
    69bc:	cmp	r3, #7
    69be:	str	r4, [sp, #148]	; 0x94
    69c0:	stmia.w	r9, {r2, r5}
    69c4:	ble.w	6108 <_svfprintf_r+0x528>
    69c8:	b.n	674e <_svfprintf_r+0xb6e>
    69ca:	ldr	r2, [sp, #40]	; 0x28
    69cc:	ldr	r4, [r2, #0]
    69ce:	mov	r3, r2
    69d0:	adds	r3, #4
    69d2:	asrs	r5, r4, #31
    69d4:	mov	r2, r4
    69d6:	str	r3, [sp, #40]	; 0x28
    69d8:	cmp	r2, #0
    69da:	mov	r3, r5
    69dc:	sbcs.w	r3, r3, #0
    69e0:	bge.w	5f20 <_svfprintf_r+0x340>
    69e4:	negs	r4, r4
    69e6:	mov.w	r7, #45	; 0x2d
    69ea:	sbc.w	r5, r5, r5, lsl #1
    69ee:	cmp.w	fp, #0
    69f2:	strb.w	r7, [sp, #111]	; 0x6f
    69f6:	blt.w	5f3c <_svfprintf_r+0x35c>
    69fa:	ldr	r3, [sp, #12]
    69fc:	bic.w	r3, r3, #128	; 0x80
    6a00:	str	r3, [sp, #12]
    6a02:	b.w	5f3c <_svfprintf_r+0x35c>
    6a06:	add	r2, sp, #140	; 0x8c
    6a08:	ldr	r1, [sp, #20]
    6a0a:	ldr	r0, [sp, #24]
    6a0c:	bl	8c24 <__ssprint_r>
    6a10:	cmp	r0, #0
    6a12:	bne.w	5dd4 <_svfprintf_r+0x1f4>
    6a16:	ldr	r4, [sp, #148]	; 0x94
    6a18:	add.w	r9, sp, #192	; 0xc0
    6a1c:	ldr	r2, [sp, #60]	; 0x3c
    6a1e:	ldr	r3, [sp, #116]	; 0x74
    6a20:	add	r2, r6
    6a22:	mov	r7, r2
    6a24:	ldr	r2, [sp, #56]	; 0x38
    6a26:	cmp	r3, r2
    6a28:	blt.n	6aba <_svfprintf_r+0xeda>
    6a2a:	ldr	r2, [sp, #12]
    6a2c:	lsls	r5, r2, #31
    6a2e:	bmi.n	6aba <_svfprintf_r+0xeda>
    6a30:	ldr	r1, [sp, #56]	; 0x38
    6a32:	add	r6, r1
    6a34:	subs	r5, r6, r7
    6a36:	subs	r3, r1, r3
    6a38:	cmp	r5, r3
    6a3a:	it	ge
    6a3c:	movge	r5, r3
    6a3e:	cmp	r5, #0
    6a40:	mov	r6, r5
    6a42:	ble.n	6a60 <_svfprintf_r+0xe80>
    6a44:	ldr	r2, [sp, #144]	; 0x90
    6a46:	str.w	r7, [r9]
    6a4a:	adds	r2, #1
    6a4c:	add	r4, r5
    6a4e:	cmp	r2, #7
    6a50:	str	r4, [sp, #148]	; 0x94
    6a52:	str.w	r5, [r9, #4]
    6a56:	str	r2, [sp, #144]	; 0x90
    6a58:	bgt.w	7058 <_svfprintf_r+0x1478>
    6a5c:	add.w	r9, r9, #8
    6a60:	cmp	r6, #0
    6a62:	ite	ge
    6a64:	subge	r5, r3, r6
    6a66:	movlt	r5, r3
    6a68:	cmp	r5, #0
    6a6a:	ble.w	610c <_svfprintf_r+0x52c>
    6a6e:	ldr	r2, [pc, #744]	; (6d58 <_svfprintf_r+0x1178>)
    6a70:	ldr	r3, [sp, #144]	; 0x90
    6a72:	str	r2, [sp, #44]	; 0x2c
    6a74:	cmp	r5, #16
    6a76:	ble.n	69b4 <_svfprintf_r+0xdd4>
    6a78:	movs	r6, #16
    6a7a:	ldr	r7, [sp, #24]
    6a7c:	ldr.w	fp, [sp, #20]
    6a80:	b.n	6a8c <_svfprintf_r+0xeac>
    6a82:	add.w	r9, r9, #8
    6a86:	subs	r5, #16
    6a88:	cmp	r5, #16
    6a8a:	ble.n	69b4 <_svfprintf_r+0xdd4>
    6a8c:	adds	r3, #1
    6a8e:	adds	r4, #16
    6a90:	cmp	r3, #7
    6a92:	str	r4, [sp, #148]	; 0x94
    6a94:	str	r3, [sp, #144]	; 0x90
    6a96:	str.w	sl, [r9]
    6a9a:	str.w	r6, [r9, #4]
    6a9e:	ble.n	6a82 <_svfprintf_r+0xea2>
    6aa0:	add	r2, sp, #140	; 0x8c
    6aa2:	mov	r1, fp
    6aa4:	mov	r0, r7
    6aa6:	bl	8c24 <__ssprint_r>
    6aaa:	cmp	r0, #0
    6aac:	bne.w	5dd4 <_svfprintf_r+0x1f4>
    6ab0:	ldr	r4, [sp, #148]	; 0x94
    6ab2:	ldr	r3, [sp, #144]	; 0x90
    6ab4:	add.w	r9, sp, #192	; 0xc0
    6ab8:	b.n	6a86 <_svfprintf_r+0xea6>
    6aba:	ldr	r2, [sp, #144]	; 0x90
    6abc:	ldr	r0, [sp, #72]	; 0x48
    6abe:	ldr	r1, [sp, #76]	; 0x4c
    6ac0:	str.w	r1, [r9]
    6ac4:	adds	r2, #1
    6ac6:	add	r4, r0
    6ac8:	cmp	r2, #7
    6aca:	str	r4, [sp, #148]	; 0x94
    6acc:	str.w	r0, [r9, #4]
    6ad0:	str	r2, [sp, #144]	; 0x90
    6ad2:	bgt.w	703e <_svfprintf_r+0x145e>
    6ad6:	add.w	r9, r9, #8
    6ada:	b.n	6a30 <_svfprintf_r+0xe50>
    6adc:	ldr	r3, [sp, #12]
    6ade:	lsls	r0, r3, #31
    6ae0:	bmi.w	66c8 <_svfprintf_r+0xae8>
    6ae4:	adds	r5, #1
    6ae6:	adds	r4, #1
    6ae8:	movs	r3, #1
    6aea:	cmp	r5, #7
    6aec:	str	r4, [sp, #148]	; 0x94
    6aee:	str	r5, [sp, #144]	; 0x90
    6af0:	str.w	r6, [r9]
    6af4:	str.w	r3, [r9, #4]
    6af8:	ble.w	6730 <_svfprintf_r+0xb50>
    6afc:	b.n	691a <_svfprintf_r+0xd3a>
    6afe:	add	r2, sp, #140	; 0x8c
    6b00:	ldr	r1, [sp, #20]
    6b02:	ldr	r0, [sp, #24]
    6b04:	bl	8c24 <__ssprint_r>
    6b08:	cmp	r0, #0
    6b0a:	bne.w	5dd4 <_svfprintf_r+0x1f4>
    6b0e:	ldr	r4, [sp, #148]	; 0x94
    6b10:	ldr	r5, [sp, #144]	; 0x90
    6b12:	add.w	r9, sp, #192	; 0xc0
    6b16:	b.n	66e4 <_svfprintf_r+0xb04>
    6b18:	add	r2, sp, #140	; 0x8c
    6b1a:	ldr	r1, [sp, #20]
    6b1c:	ldr	r0, [sp, #24]
    6b1e:	bl	8c24 <__ssprint_r>
    6b22:	cmp	r0, #0
    6b24:	bne.w	5dd4 <_svfprintf_r+0x1f4>
    6b28:	ldr	r4, [sp, #148]	; 0x94
    6b2a:	ldr	r5, [sp, #144]	; 0x90
    6b2c:	add.w	r9, sp, #192	; 0xc0
    6b30:	b.n	6702 <_svfprintf_r+0xb22>
    6b32:	add	r2, sp, #140	; 0x8c
    6b34:	ldr	r1, [sp, #20]
    6b36:	ldr	r0, [sp, #24]
    6b38:	bl	8c24 <__ssprint_r>
    6b3c:	cmp	r0, #0
    6b3e:	bne.w	5dd4 <_svfprintf_r+0x1f4>
    6b42:	ldr	r4, [sp, #148]	; 0x94
    6b44:	add.w	r9, sp, #192	; 0xc0
    6b48:	b.w	6074 <_svfprintf_r+0x494>
    6b4c:	ldr	r1, [sp, #12]
    6b4e:	ands.w	r3, r1, #64	; 0x40
    6b52:	beq.w	6cc8 <_svfprintf_r+0x10e8>
    6b56:	ldr	r0, [sp, #40]	; 0x28
    6b58:	strb.w	r2, [sp, #111]	; 0x6f
    6b5c:	mov	r3, r0
    6b5e:	cmp.w	fp, #0
    6b62:	add.w	r3, r3, #4
    6b66:	ldrh	r4, [r0, #0]
    6b68:	mov.w	r5, #0
    6b6c:	blt.w	6ef0 <_svfprintf_r+0x1310>
    6b70:	bic.w	r1, r1, #128	; 0x80
    6b74:	str	r1, [sp, #12]
    6b76:	orrs.w	r1, r4, r5
    6b7a:	str	r3, [sp, #40]	; 0x28
    6b7c:	beq.w	6534 <_svfprintf_r+0x954>
    6b80:	mov	r7, r2
    6b82:	b.w	5e2c <_svfprintf_r+0x24c>
    6b86:	ldr	r3, [sp, #12]
    6b88:	lsls	r7, r3, #27
    6b8a:	bmi.n	6ba4 <_svfprintf_r+0xfc4>
    6b8c:	ldr	r3, [sp, #12]
    6b8e:	lsls	r6, r3, #25
    6b90:	bpl.n	6ba4 <_svfprintf_r+0xfc4>
    6b92:	ldr	r2, [sp, #40]	; 0x28
    6b94:	ldr	r3, [r2, #0]
    6b96:	adds	r2, #4
    6b98:	str	r2, [sp, #40]	; 0x28
    6b9a:	ldrh.w	r2, [sp, #28]
    6b9e:	strh	r2, [r3, #0]
    6ba0:	b.w	5c2e <_svfprintf_r+0x4e>
    6ba4:	ldr	r2, [sp, #40]	; 0x28
    6ba6:	ldr	r3, [r2, #0]
    6ba8:	adds	r2, #4
    6baa:	str	r2, [sp, #40]	; 0x28
    6bac:	ldr	r2, [sp, #28]
    6bae:	str	r2, [r3, #0]
    6bb0:	b.w	5c2e <_svfprintf_r+0x4e>
    6bb4:	ldrd	r0, r1, [sp, #64]	; 0x40
    6bb8:	mov	r2, r0
    6bba:	mov	r3, r1
    6bbc:	bl	4af0 <__aeabi_dcmpun>
    6bc0:	cmp	r0, #0
    6bc2:	bne.w	71c0 <_svfprintf_r+0x15e0>
    6bc6:	ldr	r3, [sp, #52]	; 0x34
    6bc8:	cmp.w	fp, #4294967295
    6bcc:	bic.w	r7, r3, #32
    6bd0:	beq.w	70a2 <_svfprintf_r+0x14c2>
    6bd4:	cmp	r7, #71	; 0x47
    6bd6:	beq.w	6ede <_svfprintf_r+0x12fe>
    6bda:	ldr	r3, [sp, #68]	; 0x44
    6bdc:	ldr	r2, [sp, #12]
    6bde:	cmp	r3, #0
    6be0:	orr.w	r2, r2, #256	; 0x100
    6be4:	str	r2, [sp, #44]	; 0x2c
    6be6:	blt.w	70da <_svfprintf_r+0x14fa>
    6bea:	vldr	d7, [sp, #64]	; 0x40
    6bee:	vstr	d7, [sp, #96]	; 0x60
    6bf2:	movs	r3, #0
    6bf4:	str	r3, [sp, #16]
    6bf6:	ldr	r3, [sp, #52]	; 0x34
    6bf8:	cmp	r3, #102	; 0x66
    6bfa:	beq.w	70a8 <_svfprintf_r+0x14c8>
    6bfe:	cmp	r3, #70	; 0x46
    6c00:	beq.w	6e8e <_svfprintf_r+0x12ae>
    6c04:	cmp	r7, #69	; 0x45
    6c06:	ite	eq
    6c08:	addeq.w	r5, fp, #1
    6c0c:	movne	r5, fp
    6c0e:	add	r2, sp, #132	; 0x84
    6c10:	add	r3, sp, #120	; 0x78
    6c12:	str	r2, [sp, #4]
    6c14:	str	r3, [sp, #0]
    6c16:	mov	r2, r5
    6c18:	add	r3, sp, #116	; 0x74
    6c1a:	movs	r1, #2
    6c1c:	vldr	d0, [sp, #96]	; 0x60
    6c20:	ldr	r0, [sp, #24]
    6c22:	bl	7498 <_dtoa_r>
    6c26:	ldr	r3, [sp, #52]	; 0x34
    6c28:	cmp	r3, #103	; 0x67
    6c2a:	mov	r6, r0
    6c2c:	bne.w	7106 <_svfprintf_r+0x1526>
    6c30:	ldr	r3, [sp, #12]
    6c32:	lsls	r2, r3, #31
    6c34:	bpl.w	71aa <_svfprintf_r+0x15ca>
    6c38:	adds	r4, r6, r5
    6c3a:	movs	r2, #0
    6c3c:	movs	r3, #0
    6c3e:	ldrd	r0, r1, [sp, #96]	; 0x60
    6c42:	bl	4a8c <__aeabi_dcmpeq>
    6c46:	cmp	r0, #0
    6c48:	bne.w	6f66 <_svfprintf_r+0x1386>
    6c4c:	ldr	r3, [sp, #132]	; 0x84
    6c4e:	cmp	r4, r3
    6c50:	bls.n	6c60 <_svfprintf_r+0x1080>
    6c52:	movs	r1, #48	; 0x30
    6c54:	adds	r2, r3, #1
    6c56:	str	r2, [sp, #132]	; 0x84
    6c58:	strb	r1, [r3, #0]
    6c5a:	ldr	r3, [sp, #132]	; 0x84
    6c5c:	cmp	r4, r3
    6c5e:	bhi.n	6c54 <_svfprintf_r+0x1074>
    6c60:	subs	r3, r3, r6
    6c62:	cmp	r7, #71	; 0x47
    6c64:	str	r3, [sp, #56]	; 0x38
    6c66:	beq.w	6f58 <_svfprintf_r+0x1378>
    6c6a:	ldr	r3, [sp, #52]	; 0x34
    6c6c:	cmp	r3, #101	; 0x65
    6c6e:	ble.w	7124 <_svfprintf_r+0x1544>
    6c72:	ldr	r3, [sp, #52]	; 0x34
    6c74:	cmp	r3, #102	; 0x66
    6c76:	ldr	r3, [sp, #116]	; 0x74
    6c78:	str	r3, [sp, #60]	; 0x3c
    6c7a:	beq.w	713e <_svfprintf_r+0x155e>
    6c7e:	ldr	r2, [sp, #60]	; 0x3c
    6c80:	ldr	r1, [sp, #56]	; 0x38
    6c82:	cmp	r2, r1
    6c84:	blt.w	70ec <_svfprintf_r+0x150c>
    6c88:	ldr	r3, [sp, #12]
    6c8a:	lsls	r1, r3, #31
    6c8c:	bmi.w	71ae <_svfprintf_r+0x15ce>
    6c90:	bic.w	r3, r2, r2, asr #31
    6c94:	str	r2, [sp, #36]	; 0x24
    6c96:	movs	r2, #103	; 0x67
    6c98:	str	r2, [sp, #52]	; 0x34
    6c9a:	ldr	r2, [sp, #16]
    6c9c:	cmp	r2, #0
    6c9e:	bne.w	6f00 <_svfprintf_r+0x1320>
    6ca2:	str	r3, [sp, #16]
    6ca4:	ldr	r3, [sp, #44]	; 0x2c
    6ca6:	str	r3, [sp, #12]
    6ca8:	mov	fp, r2
    6caa:	ldrb.w	r7, [sp, #111]	; 0x6f
    6cae:	b.w	5f84 <_svfprintf_r+0x3a4>
    6cb2:	bic.w	r7, r7, #7
    6cb6:	vldr	d7, [r7]
    6cba:	add.w	r3, r7, #8
    6cbe:	vstr	d7, [sp, #64]	; 0x40
    6cc2:	str	r3, [sp, #40]	; 0x28
    6cc4:	b.w	61dc <_svfprintf_r+0x5fc>
    6cc8:	ldr	r1, [sp, #40]	; 0x28
    6cca:	strb.w	r3, [sp, #111]	; 0x6f
    6cce:	cmp.w	fp, #0
    6cd2:	ldr	r4, [r1, #0]
    6cd4:	add.w	r7, r1, #4
    6cd8:	mov.w	r5, #0
    6cdc:	bge.w	6e38 <_svfprintf_r+0x1258>
    6ce0:	str	r7, [sp, #40]	; 0x28
    6ce2:	movs	r7, #0
    6ce4:	b.w	5e2c <_svfprintf_r+0x24c>
    6ce8:	ldr	r1, [sp, #12]
    6cea:	ands.w	r3, r1, #64	; 0x40
    6cee:	beq.w	698e <_svfprintf_r+0xdae>
    6cf2:	ldr	r0, [sp, #40]	; 0x28
    6cf4:	strb.w	r2, [sp, #111]	; 0x6f
    6cf8:	mov	r3, r0
    6cfa:	cmp.w	fp, #0
    6cfe:	add.w	r3, r3, #4
    6d02:	ldrh	r4, [r0, #0]
    6d04:	mov.w	r5, #0
    6d08:	blt.w	6eea <_svfprintf_r+0x130a>
    6d0c:	bic.w	r1, r1, #128	; 0x80
    6d10:	str	r1, [sp, #12]
    6d12:	orrs.w	r1, r4, r5
    6d16:	str	r3, [sp, #40]	; 0x28
    6d18:	mov	r7, r2
    6d1a:	bne.w	5f3c <_svfprintf_r+0x35c>
    6d1e:	b.w	630c <_svfprintf_r+0x72c>
    6d22:	ldr	r3, [sp, #12]
    6d24:	ldr	r2, [sp, #40]	; 0x28
    6d26:	tst.w	r3, #64	; 0x40
    6d2a:	mov	r3, r2
    6d2c:	beq.w	6ef4 <_svfprintf_r+0x1314>
    6d30:	adds	r3, #4
    6d32:	ldrh	r4, [r2, #0]
    6d34:	str	r3, [sp, #40]	; 0x28
    6d36:	movs	r5, #0
    6d38:	b.w	6346 <_svfprintf_r+0x766>
    6d3c:	mov	r4, r2
    6d3e:	adds	r3, #1
    6d40:	ldr	r2, [sp, #44]	; 0x2c
    6d42:	str	r3, [sp, #144]	; 0x90
    6d44:	add	r4, r5
    6d46:	cmp	r3, #7
    6d48:	str	r4, [sp, #148]	; 0x94
    6d4a:	stmia.w	r9, {r2, r5}
    6d4e:	bgt.w	6a06 <_svfprintf_r+0xe26>
    6d52:	add.w	r9, r9, #8
    6d56:	b.n	6a1c <_svfprintf_r+0xe3c>
    6d58:	.word	0x20000dd4
    6d5c:	movs	r7, #0
    6d5e:	cmp	fp, r7
    6d60:	strb.w	r7, [sp, #111]	; 0x6f
    6d64:	blt.w	6558 <_svfprintf_r+0x978>
    6d68:	ldr	r3, [sp, #12]
    6d6a:	bic.w	r3, r3, #128	; 0x80
    6d6e:	str	r3, [sp, #12]
    6d70:	b.w	64f4 <_svfprintf_r+0x914>
    6d74:	add	r2, sp, #140	; 0x8c
    6d76:	ldr	r1, [sp, #20]
    6d78:	ldr	r0, [sp, #24]
    6d7a:	bl	8c24 <__ssprint_r>
    6d7e:	cmp	r0, #0
    6d80:	bne.w	5dd4 <_svfprintf_r+0x1f4>
    6d84:	ldr	r4, [sp, #148]	; 0x94
    6d86:	add.w	r9, sp, #192	; 0xc0
    6d8a:	b.n	659c <_svfprintf_r+0x9bc>
    6d8c:	ldr	r7, [sp, #40]	; 0x28
    6d8e:	b.w	654a <_svfprintf_r+0x96a>
    6d92:	ldr	r3, [sp, #144]	; 0x90
    6d94:	ldr	r2, [pc, #736]	; (7078 <_svfprintf_r+0x1498>)
    6d96:	str.w	r2, [r9]
    6d9a:	adds	r3, #1
    6d9c:	adds	r4, #1
    6d9e:	movs	r2, #1
    6da0:	cmp	r3, #7
    6da2:	str	r4, [sp, #148]	; 0x94
    6da4:	str	r3, [sp, #144]	; 0x90
    6da6:	str.w	r2, [r9, #4]
    6daa:	bgt.w	6ec4 <_svfprintf_r+0x12e4>
    6dae:	add.w	r9, r9, #8
    6db2:	cbnz	r5, 6dc0 <_svfprintf_r+0x11e0>
    6db4:	ldr	r3, [sp, #56]	; 0x38
    6db6:	cbnz	r3, 6dc0 <_svfprintf_r+0x11e0>
    6db8:	ldr	r3, [sp, #12]
    6dba:	lsls	r7, r3, #31
    6dbc:	bpl.w	610c <_svfprintf_r+0x52c>
    6dc0:	ldr	r3, [sp, #144]	; 0x90
    6dc2:	ldr	r1, [sp, #72]	; 0x48
    6dc4:	ldr	r2, [sp, #76]	; 0x4c
    6dc6:	str.w	r2, [r9]
    6dca:	adds	r3, #1
    6dcc:	add	r4, r1
    6dce:	cmp	r3, #7
    6dd0:	str	r4, [sp, #148]	; 0x94
    6dd2:	str.w	r1, [r9, #4]
    6dd6:	str	r3, [sp, #144]	; 0x90
    6dd8:	bgt.w	7176 <_svfprintf_r+0x1596>
    6ddc:	add.w	r9, r9, #8
    6de0:	negs	r5, r5
    6de2:	cmp	r5, #0
    6de4:	ble.w	6f3c <_svfprintf_r+0x135c>
    6de8:	ldr	r2, [pc, #656]	; (707c <_svfprintf_r+0x149c>)
    6dea:	str	r2, [sp, #44]	; 0x2c
    6dec:	cmp	r5, #16
    6dee:	ble.w	6f84 <_svfprintf_r+0x13a4>
    6df2:	mov	r2, r4
    6df4:	movs	r7, #16
    6df6:	ldr.w	fp, [sp, #24]
    6dfa:	ldr	r4, [sp, #20]
    6dfc:	b.n	6e0a <_svfprintf_r+0x122a>
    6dfe:	add.w	r9, r9, #8
    6e02:	subs	r5, #16
    6e04:	cmp	r5, #16
    6e06:	ble.w	6f82 <_svfprintf_r+0x13a2>
    6e0a:	adds	r3, #1
    6e0c:	adds	r2, #16
    6e0e:	cmp	r3, #7
    6e10:	str	r2, [sp, #148]	; 0x94
    6e12:	str	r3, [sp, #144]	; 0x90
    6e14:	str.w	sl, [r9]
    6e18:	str.w	r7, [r9, #4]
    6e1c:	ble.n	6dfe <_svfprintf_r+0x121e>
    6e1e:	add	r2, sp, #140	; 0x8c
    6e20:	mov	r1, r4
    6e22:	mov	r0, fp
    6e24:	bl	8c24 <__ssprint_r>
    6e28:	cmp	r0, #0
    6e2a:	bne.w	5dd4 <_svfprintf_r+0x1f4>
    6e2e:	ldr	r2, [sp, #148]	; 0x94
    6e30:	ldr	r3, [sp, #144]	; 0x90
    6e32:	add.w	r9, sp, #192	; 0xc0
    6e36:	b.n	6e02 <_svfprintf_r+0x1222>
    6e38:	ldr	r2, [sp, #12]
    6e3a:	b.w	62b0 <_svfprintf_r+0x6d0>
    6e3e:	ldr	r2, [sp, #12]
    6e40:	b.n	695a <_svfprintf_r+0xd7a>
    6e42:	ldr	r3, [sp, #12]
    6e44:	orr.w	r3, r3, #32
    6e48:	str	r3, [sp, #12]
    6e4a:	add.w	r8, r8, #1
    6e4e:	ldrb.w	r3, [r8]
    6e52:	b.w	5c94 <_svfprintf_r+0xb4>
    6e56:	add	r2, sp, #140	; 0x8c
    6e58:	ldr	r1, [sp, #20]
    6e5a:	ldr	r0, [sp, #24]
    6e5c:	bl	8c24 <__ssprint_r>
    6e60:	cmp	r0, #0
    6e62:	bne.w	5dd4 <_svfprintf_r+0x1f4>
    6e66:	ldr	r4, [sp, #148]	; 0x94
    6e68:	add.w	r9, sp, #192	; 0xc0
    6e6c:	b.w	65cc <_svfprintf_r+0x9ec>
    6e70:	movs	r1, #64	; 0x40
    6e72:	ldr	r0, [sp, #24]
    6e74:	bl	4e90 <_malloc_r>
    6e78:	ldr	r2, [sp, #20]
    6e7a:	str	r0, [r2, #0]
    6e7c:	str	r0, [r2, #16]
    6e7e:	cmp	r0, #0
    6e80:	beq.w	726a <_svfprintf_r+0x168a>
    6e84:	ldr	r2, [sp, #20]
    6e86:	movs	r3, #64	; 0x40
    6e88:	str	r3, [r2, #20]
    6e8a:	b.w	5c0e <_svfprintf_r+0x2e>
    6e8e:	add	r2, sp, #132	; 0x84
    6e90:	add	r3, sp, #120	; 0x78
    6e92:	str	r2, [sp, #4]
    6e94:	str	r3, [sp, #0]
    6e96:	mov	r2, fp
    6e98:	add	r3, sp, #116	; 0x74
    6e9a:	movs	r1, #3
    6e9c:	vldr	d0, [sp, #96]	; 0x60
    6ea0:	ldr	r0, [sp, #24]
    6ea2:	bl	7498 <_dtoa_r>
    6ea6:	mov	r5, fp
    6ea8:	mov	r6, r0
    6eaa:	ldr	r3, [sp, #52]	; 0x34
    6eac:	cmp	r3, #70	; 0x46
    6eae:	add.w	r4, r6, r5
    6eb2:	bne.w	6c3a <_svfprintf_r+0x105a>
    6eb6:	ldrb	r3, [r6, #0]
    6eb8:	cmp	r3, #48	; 0x30
    6eba:	beq.w	71cc <_svfprintf_r+0x15ec>
    6ebe:	ldr	r5, [sp, #116]	; 0x74
    6ec0:	add	r4, r5
    6ec2:	b.n	6c3a <_svfprintf_r+0x105a>
    6ec4:	add	r2, sp, #140	; 0x8c
    6ec6:	ldr	r1, [sp, #20]
    6ec8:	ldr	r0, [sp, #24]
    6eca:	bl	8c24 <__ssprint_r>
    6ece:	cmp	r0, #0
    6ed0:	bne.w	5dd4 <_svfprintf_r+0x1f4>
    6ed4:	ldr	r5, [sp, #116]	; 0x74
    6ed6:	ldr	r4, [sp, #148]	; 0x94
    6ed8:	add.w	r9, sp, #192	; 0xc0
    6edc:	b.n	6db2 <_svfprintf_r+0x11d2>
    6ede:	cmp.w	fp, #0
    6ee2:	it	eq
    6ee4:	moveq.w	fp, #1
    6ee8:	b.n	6bda <_svfprintf_r+0xffa>
    6eea:	str	r3, [sp, #40]	; 0x28
    6eec:	mov	r7, r2
    6eee:	b.n	69aa <_svfprintf_r+0xdca>
    6ef0:	str	r3, [sp, #40]	; 0x28
    6ef2:	b.n	6ce2 <_svfprintf_r+0x1102>
    6ef4:	adds	r3, #4
    6ef6:	ldr	r4, [r2, #0]
    6ef8:	str	r3, [sp, #40]	; 0x28
    6efa:	movs	r5, #0
    6efc:	b.w	6346 <_svfprintf_r+0x766>
    6f00:	movs	r7, #45	; 0x2d
    6f02:	str	r3, [sp, #16]
    6f04:	ldr	r3, [sp, #44]	; 0x2c
    6f06:	str	r3, [sp, #12]
    6f08:	strb.w	r7, [sp, #111]	; 0x6f
    6f0c:	mov.w	fp, #0
    6f10:	b.w	5f86 <_svfprintf_r+0x3a6>
    6f14:	mov	r0, r6
    6f16:	bl	5b00 <strlen>
    6f1a:	mov	fp, r4
    6f1c:	mov	r3, r0
    6f1e:	str	r0, [sp, #36]	; 0x24
    6f20:	b.w	6468 <_svfprintf_r+0x888>
    6f24:	add	r2, sp, #140	; 0x8c
    6f26:	ldr	r1, [sp, #20]
    6f28:	ldr	r0, [sp, #24]
    6f2a:	bl	8c24 <__ssprint_r>
    6f2e:	cmp	r0, #0
    6f30:	bne.w	5dd4 <_svfprintf_r+0x1f4>
    6f34:	ldr	r4, [sp, #148]	; 0x94
    6f36:	ldr	r3, [sp, #144]	; 0x90
    6f38:	add.w	r9, sp, #192	; 0xc0
    6f3c:	ldr	r1, [sp, #56]	; 0x38
    6f3e:	str.w	r6, [r9]
    6f42:	adds	r3, #1
    6f44:	add	r4, r1
    6f46:	cmp	r3, #7
    6f48:	str	r4, [sp, #148]	; 0x94
    6f4a:	str	r3, [sp, #144]	; 0x90
    6f4c:	str.w	r1, [r9, #4]
    6f50:	ble.w	6108 <_svfprintf_r+0x528>
    6f54:	b.w	674e <_svfprintf_r+0xb6e>
    6f58:	ldr	r3, [sp, #116]	; 0x74
    6f5a:	adds	r5, r3, #3
    6f5c:	blt.n	6f9c <_svfprintf_r+0x13bc>
    6f5e:	cmp	fp, r3
    6f60:	blt.n	6f9c <_svfprintf_r+0x13bc>
    6f62:	str	r3, [sp, #60]	; 0x3c
    6f64:	b.n	6c7e <_svfprintf_r+0x109e>
    6f66:	mov	r3, r4
    6f68:	b.n	6c60 <_svfprintf_r+0x1080>
    6f6a:	add	r2, sp, #140	; 0x8c
    6f6c:	ldr	r1, [sp, #20]
    6f6e:	ldr	r0, [sp, #24]
    6f70:	bl	8c24 <__ssprint_r>
    6f74:	cmp	r0, #0
    6f76:	bne.w	5dd4 <_svfprintf_r+0x1f4>
    6f7a:	ldr	r4, [sp, #148]	; 0x94
    6f7c:	add.w	r9, sp, #192	; 0xc0
    6f80:	b.n	681c <_svfprintf_r+0xc3c>
    6f82:	mov	r4, r2
    6f84:	adds	r3, #1
    6f86:	ldr	r2, [sp, #44]	; 0x2c
    6f88:	str	r3, [sp, #144]	; 0x90
    6f8a:	add	r4, r5
    6f8c:	cmp	r3, #7
    6f8e:	str	r4, [sp, #148]	; 0x94
    6f90:	stmia.w	r9, {r2, r5}
    6f94:	bgt.n	6f24 <_svfprintf_r+0x1344>
    6f96:	add.w	r9, r9, #8
    6f9a:	b.n	6f3c <_svfprintf_r+0x135c>
    6f9c:	ldr	r2, [sp, #52]	; 0x34
    6f9e:	subs	r2, #2
    6fa0:	str	r2, [sp, #52]	; 0x34
    6fa2:	subs	r3, #1
    6fa4:	cmp	r3, #0
    6fa6:	ldrb.w	r2, [sp, #52]	; 0x34
    6faa:	str	r3, [sp, #116]	; 0x74
    6fac:	it	lt
    6fae:	neglt	r3, r3
    6fb0:	strb.w	r2, [sp, #124]	; 0x7c
    6fb4:	ite	lt
    6fb6:	movlt	r2, #45	; 0x2d
    6fb8:	movge	r2, #43	; 0x2b
    6fba:	cmp	r3, #9
    6fbc:	strb.w	r2, [sp, #125]	; 0x7d
    6fc0:	ble.w	719a <_svfprintf_r+0x15ba>
    6fc4:	add.w	r0, sp, #139	; 0x8b
    6fc8:	mov	r4, r0
    6fca:	ldr	r2, [pc, #180]	; (7080 <_svfprintf_r+0x14a0>)
    6fcc:	smull	r2, r1, r2, r3
    6fd0:	asrs	r2, r3, #31
    6fd2:	rsb	r2, r2, r1, asr #2
    6fd6:	add.w	r1, r2, r2, lsl #2
    6fda:	sub.w	r3, r3, r1, lsl #1
    6fde:	add.w	r1, r3, #48	; 0x30
    6fe2:	cmp	r2, #9
    6fe4:	mov	r3, r2
    6fe6:	strb.w	r1, [r4, #-1]!
    6fea:	bgt.n	6fca <_svfprintf_r+0x13ea>
    6fec:	mov	r1, r4
    6fee:	adds	r3, #48	; 0x30
    6ff0:	uxtb	r2, r3
    6ff2:	strb.w	r2, [r1, #-1]!
    6ff6:	cmp	r0, r1
    6ff8:	bls.w	7264 <_svfprintf_r+0x1684>
    6ffc:	add.w	r1, sp, #126	; 0x7e
    7000:	mov	r3, r4
    7002:	b.n	7008 <_svfprintf_r+0x1428>
    7004:	ldrb.w	r2, [r3], #1
    7008:	strb.w	r2, [r1], #1
    700c:	cmp	r0, r3
    700e:	bne.n	7004 <_svfprintf_r+0x1424>
    7010:	adds	r3, r0, #1
    7012:	subs	r3, r3, r4
    7014:	add.w	r2, sp, #126	; 0x7e
    7018:	add	r3, r2
    701a:	add	r2, sp, #124	; 0x7c
    701c:	subs	r3, r3, r2
    701e:	ldr	r2, [sp, #56]	; 0x38
    7020:	str	r3, [sp, #84]	; 0x54
    7022:	cmp	r2, #1
    7024:	add	r3, r2
    7026:	str	r3, [sp, #36]	; 0x24
    7028:	ble.w	71fa <_svfprintf_r+0x161a>
    702c:	ldr	r3, [sp, #36]	; 0x24
    702e:	ldr	r2, [sp, #72]	; 0x48
    7030:	add	r3, r2
    7032:	movs	r2, #0
    7034:	str	r3, [sp, #36]	; 0x24
    7036:	str	r2, [sp, #60]	; 0x3c
    7038:	bic.w	r3, r3, r3, asr #31
    703c:	b.n	6c9a <_svfprintf_r+0x10ba>
    703e:	add	r2, sp, #140	; 0x8c
    7040:	ldr	r1, [sp, #20]
    7042:	ldr	r0, [sp, #24]
    7044:	bl	8c24 <__ssprint_r>
    7048:	cmp	r0, #0
    704a:	bne.w	5dd4 <_svfprintf_r+0x1f4>
    704e:	ldr	r3, [sp, #116]	; 0x74
    7050:	ldr	r4, [sp, #148]	; 0x94
    7052:	add.w	r9, sp, #192	; 0xc0
    7056:	b.n	6a30 <_svfprintf_r+0xe50>
    7058:	add	r2, sp, #140	; 0x8c
    705a:	ldr	r1, [sp, #20]
    705c:	ldr	r0, [sp, #24]
    705e:	bl	8c24 <__ssprint_r>
    7062:	cmp	r0, #0
    7064:	bne.w	5dd4 <_svfprintf_r+0x1f4>
    7068:	ldr	r3, [sp, #116]	; 0x74
    706a:	ldr	r2, [sp, #56]	; 0x38
    706c:	ldr	r4, [sp, #148]	; 0x94
    706e:	subs	r3, r2, r3
    7070:	add.w	r9, sp, #192	; 0xc0
    7074:	b.n	6a60 <_svfprintf_r+0xe80>
    7076:	nop
    7078:	.word	0x20000d54
    707c:	.word	0x20000dd4
    7080:	.word	0x66666667
    7084:	cmp	r5, #6
    7086:	mov	r3, r5
    7088:	it	cs
    708a:	movcs	r3, #6
    708c:	str	r3, [sp, #36]	; 0x24
    708e:	bic.w	r3, r3, r3, asr #31
    7092:	mov	fp, r6
    7094:	str	r7, [sp, #40]	; 0x28
    7096:	str	r6, [sp, #60]	; 0x3c
    7098:	mov	r7, r6
    709a:	str	r3, [sp, #16]
    709c:	ldr	r6, [pc, #536]	; (72b8 <_svfprintf_r+0x16d8>)
    709e:	b.w	5f84 <_svfprintf_r+0x3a4>
    70a2:	mov.w	fp, #6
    70a6:	b.n	6bda <_svfprintf_r+0xffa>
    70a8:	add	r2, sp, #132	; 0x84
    70aa:	add	r3, sp, #120	; 0x78
    70ac:	str	r2, [sp, #4]
    70ae:	str	r3, [sp, #0]
    70b0:	mov	r2, fp
    70b2:	add	r3, sp, #116	; 0x74
    70b4:	movs	r1, #3
    70b6:	vldr	d0, [sp, #96]	; 0x60
    70ba:	ldr	r0, [sp, #24]
    70bc:	bl	7498 <_dtoa_r>
    70c0:	mov	r5, fp
    70c2:	mov	r6, r0
    70c4:	add.w	r4, r0, fp
    70c8:	b.n	6eb6 <_svfprintf_r+0x12d6>
    70ca:	movs	r7, #45	; 0x2d
    70cc:	strb.w	r7, [sp, #111]	; 0x6f
    70d0:	b.w	622a <_svfprintf_r+0x64a>
    70d4:	str	r3, [sp, #12]
    70d6:	b.w	6382 <_svfprintf_r+0x7a2>
    70da:	ldrd	r1, r2, [sp, #64]	; 0x40
    70de:	add.w	r3, r2, #2147483648	; 0x80000000
    70e2:	str	r3, [sp, #100]	; 0x64
    70e4:	movs	r3, #45	; 0x2d
    70e6:	str	r1, [sp, #96]	; 0x60
    70e8:	str	r3, [sp, #16]
    70ea:	b.n	6bf6 <_svfprintf_r+0x1016>
    70ec:	ldr	r2, [sp, #72]	; 0x48
    70ee:	ldr	r3, [sp, #56]	; 0x38
    70f0:	add	r3, r2
    70f2:	ldr	r2, [sp, #60]	; 0x3c
    70f4:	str	r3, [sp, #36]	; 0x24
    70f6:	cmp	r2, #0
    70f8:	ble.w	720e <_svfprintf_r+0x162e>
    70fc:	movs	r2, #103	; 0x67
    70fe:	bic.w	r3, r3, r3, asr #31
    7102:	str	r2, [sp, #52]	; 0x34
    7104:	b.n	6c9a <_svfprintf_r+0x10ba>
    7106:	ldr	r3, [sp, #52]	; 0x34
    7108:	cmp	r3, #71	; 0x47
    710a:	bne.w	6c38 <_svfprintf_r+0x1058>
    710e:	ldr	r3, [sp, #12]
    7110:	lsls	r3, r3, #31
    7112:	bmi.w	6eaa <_svfprintf_r+0x12ca>
    7116:	ldr	r3, [sp, #132]	; 0x84
    7118:	cmp	r7, #71	; 0x47
    711a:	sub.w	r3, r3, r6
    711e:	str	r3, [sp, #56]	; 0x38
    7120:	beq.w	6f58 <_svfprintf_r+0x1378>
    7124:	ldr	r3, [sp, #116]	; 0x74
    7126:	b.n	6fa2 <_svfprintf_r+0x13c2>
    7128:	bic.w	r3, r5, r5, asr #31
    712c:	str	r7, [sp, #40]	; 0x28
    712e:	str	r3, [sp, #16]
    7130:	str	r5, [sp, #36]	; 0x24
    7132:	mov	fp, r0
    7134:	str	r0, [sp, #60]	; 0x3c
    7136:	ldrb.w	r7, [sp, #111]	; 0x6f
    713a:	b.w	5f84 <_svfprintf_r+0x3a4>
    713e:	cmp	r3, #0
    7140:	ble.n	721e <_svfprintf_r+0x163e>
    7142:	cmp.w	fp, #0
    7146:	bne.n	71e8 <_svfprintf_r+0x1608>
    7148:	ldr	r2, [sp, #12]
    714a:	lsls	r4, r2, #31
    714c:	bmi.n	71e8 <_svfprintf_r+0x1608>
    714e:	mov	r2, r3
    7150:	str	r2, [sp, #36]	; 0x24
    7152:	bic.w	r3, r3, r3, asr #31
    7156:	b.n	6c9a <_svfprintf_r+0x10ba>
    7158:	ldr	r3, [sp, #12]
    715a:	lsls	r3, r3, #31
    715c:	mov	r7, fp
    715e:	bpl.n	716c <_svfprintf_r+0x158c>
    7160:	add	r6, sp, #256	; 0x100
    7162:	movs	r3, #48	; 0x30
    7164:	strb.w	r3, [r6, #-65]!
    7168:	b.w	5f70 <_svfprintf_r+0x390>
    716c:	str.w	fp, [sp, #36]	; 0x24
    7170:	add	r6, sp, #192	; 0xc0
    7172:	b.w	5f76 <_svfprintf_r+0x396>
    7176:	add	r2, sp, #140	; 0x8c
    7178:	ldr	r1, [sp, #20]
    717a:	ldr	r0, [sp, #24]
    717c:	bl	8c24 <__ssprint_r>
    7180:	cmp	r0, #0
    7182:	bne.w	5dd4 <_svfprintf_r+0x1f4>
    7186:	ldr	r5, [sp, #116]	; 0x74
    7188:	ldr	r4, [sp, #148]	; 0x94
    718a:	ldr	r3, [sp, #144]	; 0x90
    718c:	add.w	r9, sp, #192	; 0xc0
    7190:	b.n	6de0 <_svfprintf_r+0x1200>
    7192:	mov	r8, r4
    7194:	movs	r5, #0
    7196:	b.w	5c98 <_svfprintf_r+0xb8>
    719a:	adds	r3, #48	; 0x30
    719c:	movs	r2, #48	; 0x30
    719e:	strb.w	r3, [sp, #127]	; 0x7f
    71a2:	strb.w	r2, [sp, #126]	; 0x7e
    71a6:	add	r3, sp, #128	; 0x80
    71a8:	b.n	701a <_svfprintf_r+0x143a>
    71aa:	ldr	r3, [sp, #132]	; 0x84
    71ac:	b.n	6c60 <_svfprintf_r+0x1080>
    71ae:	ldr	r2, [sp, #72]	; 0x48
    71b0:	ldr	r3, [sp, #60]	; 0x3c
    71b2:	add	r3, r2
    71b4:	movs	r2, #103	; 0x67
    71b6:	str	r3, [sp, #36]	; 0x24
    71b8:	str	r2, [sp, #52]	; 0x34
    71ba:	bic.w	r3, r3, r3, asr #31
    71be:	b.n	6c9a <_svfprintf_r+0x10ba>
    71c0:	ldr	r6, [pc, #248]	; (72bc <_svfprintf_r+0x16dc>)
    71c2:	ldr	r3, [pc, #252]	; (72c0 <_svfprintf_r+0x16e0>)
    71c4:	ldrb.w	r7, [sp, #111]	; 0x6f
    71c8:	b.w	622e <_svfprintf_r+0x64e>
    71cc:	movs	r2, #0
    71ce:	movs	r3, #0
    71d0:	ldrd	r0, r1, [sp, #96]	; 0x60
    71d4:	bl	4a8c <__aeabi_dcmpeq>
    71d8:	cmp	r0, #0
    71da:	bne.w	6ebe <_svfprintf_r+0x12de>
    71de:	rsb	r5, r5, #1
    71e2:	str	r5, [sp, #116]	; 0x74
    71e4:	add	r4, r5
    71e6:	b.n	6c3a <_svfprintf_r+0x105a>
    71e8:	ldr	r3, [sp, #60]	; 0x3c
    71ea:	ldr	r2, [sp, #72]	; 0x48
    71ec:	adds	r5, r3, r2
    71ee:	add.w	r3, r5, fp
    71f2:	str	r3, [sp, #36]	; 0x24
    71f4:	bic.w	r3, r3, r3, asr #31
    71f8:	b.n	6c9a <_svfprintf_r+0x10ba>
    71fa:	ldr	r3, [sp, #12]
    71fc:	ands.w	r3, r3, #1
    7200:	bne.w	702c <_svfprintf_r+0x144c>
    7204:	str	r3, [sp, #60]	; 0x3c
    7206:	ldr	r3, [sp, #36]	; 0x24
    7208:	bic.w	r3, r3, r3, asr #31
    720c:	b.n	6c9a <_svfprintf_r+0x10ba>
    720e:	ldr	r3, [sp, #60]	; 0x3c
    7210:	ldr	r2, [sp, #36]	; 0x24
    7212:	rsb	r3, r3, #1
    7216:	add	r2, r3
    7218:	mov	r3, r2
    721a:	str	r2, [sp, #36]	; 0x24
    721c:	b.n	70fc <_svfprintf_r+0x151c>
    721e:	cmp.w	fp, #0
    7222:	bne.n	722a <_svfprintf_r+0x164a>
    7224:	ldr	r3, [sp, #12]
    7226:	lsls	r0, r3, #31
    7228:	bpl.n	723a <_svfprintf_r+0x165a>
    722a:	ldr	r3, [sp, #72]	; 0x48
    722c:	adds	r5, r3, #1
    722e:	add.w	r3, r5, fp
    7232:	str	r3, [sp, #36]	; 0x24
    7234:	bic.w	r3, r3, r3, asr #31
    7238:	b.n	6c9a <_svfprintf_r+0x10ba>
    723a:	movs	r3, #1
    723c:	str	r3, [sp, #36]	; 0x24
    723e:	b.n	6c9a <_svfprintf_r+0x10ba>
    7240:	ldr	r0, [sp, #40]	; 0x28
    7242:	ldrb.w	r3, [r8, #1]
    7246:	ldr	r5, [r0, #0]
    7248:	adds	r0, #4
    724a:	cmp	r5, #0
    724c:	str	r0, [sp, #40]	; 0x28
    724e:	mov	r8, r4
    7250:	bge.w	5c94 <_svfprintf_r+0xb4>
    7254:	mov.w	r5, #4294967295
    7258:	b.w	5c94 <_svfprintf_r+0xb4>
    725c:	strb.w	r1, [sp, #111]	; 0x6f
    7260:	b.w	5df6 <_svfprintf_r+0x216>
    7264:	add.w	r3, sp, #126	; 0x7e
    7268:	b.n	701a <_svfprintf_r+0x143a>
    726a:	ldr	r2, [sp, #24]
    726c:	movs	r3, #12
    726e:	str	r3, [r2, #0]
    7270:	mov.w	r0, #4294967295
    7274:	b.w	5de6 <_svfprintf_r+0x206>
    7278:	strb.w	r1, [sp, #111]	; 0x6f
    727c:	b.w	5ef0 <_svfprintf_r+0x310>
    7280:	strb.w	r1, [sp, #111]	; 0x6f
    7284:	b.w	61bc <_svfprintf_r+0x5dc>
    7288:	strb.w	r1, [sp, #111]	; 0x6f
    728c:	b.w	632a <_svfprintf_r+0x74a>
    7290:	strb.w	r1, [sp, #111]	; 0x6f
    7294:	b.w	62ce <_svfprintf_r+0x6ee>
    7298:	strb.w	r1, [sp, #111]	; 0x6f
    729c:	b.w	627a <_svfprintf_r+0x69a>
    72a0:	strb.w	r1, [sp, #111]	; 0x6f
    72a4:	b.w	6512 <_svfprintf_r+0x932>
    72a8:	strb.w	r1, [sp, #111]	; 0x6f
    72ac:	b.w	64d0 <_svfprintf_r+0x8f0>
    72b0:	strb.w	r1, [sp, #111]	; 0x6f
    72b4:	b.w	6494 <_svfprintf_r+0x8b4>
    72b8:	.word	0x20000d4c
    72bc:	.word	0x20000d20
    72c0:	.word	0x20000d1c

000072c4 <_vdprintf_r>:
    72c4:	push	{r4, r5, r6, r7, lr}
    72c6:	sub.w	sp, sp, #532	; 0x214
    72ca:	add	r5, sp, #16
    72cc:	str	r3, [sp, #0]
    72ce:	mov	r7, r1
    72d0:	mov	r3, r2
    72d2:	mov.w	r4, #512	; 0x200
    72d6:	add	r2, sp, #12
    72d8:	mov	r1, r5
    72da:	str	r4, [sp, #12]
    72dc:	mov	r6, r0
    72de:	bl	8d24 <_vasnprintf_r>
    72e2:	cbz	r0, 7308 <_vdprintf_r+0x44>
    72e4:	mov	r4, r0
    72e6:	mov	r2, r0
    72e8:	mov	r1, r7
    72ea:	ldr	r3, [sp, #12]
    72ec:	mov	r0, r6
    72ee:	bl	7344 <_write_r>
    72f2:	cmp	r4, r5
    72f4:	str	r0, [sp, #12]
    72f6:	beq.n	7302 <_vdprintf_r+0x3e>
    72f8:	mov	r0, r6
    72fa:	mov	r1, r4
    72fc:	bl	8368 <_free_r>
    7300:	ldr	r0, [sp, #12]
    7302:	add.w	sp, sp, #532	; 0x214
    7306:	pop	{r4, r5, r6, r7, pc}
    7308:	mov.w	r0, #4294967295
    730c:	b.n	7302 <_vdprintf_r+0x3e>
    730e:	nop

00007310 <vdprintf>:
    7310:	push	{r4}
    7312:	ldr	r4, [pc, #16]	; (7324 <vdprintf+0x14>)
    7314:	mov	r3, r2
    7316:	mov	r2, r1
    7318:	mov	r1, r0
    731a:	ldr	r0, [r4, #0]
    731c:	ldr.w	r4, [sp], #4
    7320:	b.w	72c4 <_vdprintf_r>
    7324:	.word	0x200017ac

00007328 <__ascii_wctomb>:
    7328:	cbz	r1, 7334 <__ascii_wctomb+0xc>
    732a:	cmp	r2, #255	; 0xff
    732c:	bhi.n	7338 <__ascii_wctomb+0x10>
    732e:	strb	r2, [r1, #0]
    7330:	movs	r0, #1
    7332:	bx	lr
    7334:	mov	r0, r1
    7336:	bx	lr
    7338:	movs	r3, #138	; 0x8a
    733a:	str	r3, [r0, #0]
    733c:	mov.w	r0, #4294967295
    7340:	bx	lr
    7342:	nop

00007344 <_write_r>:
    7344:	push	{r4, r5, r6, lr}
    7346:	mov	r5, r1
    7348:	ldr	r4, [pc, #32]	; (736c <_write_r+0x28>)
    734a:	mov	r1, r2
    734c:	mov	r6, r0
    734e:	mov	r2, r3
    7350:	mov	r0, r5
    7352:	movs	r3, #0
    7354:	str	r3, [r4, #0]
    7356:	bl	3e6c <_write>
    735a:	adds	r3, r0, #1
    735c:	beq.n	7360 <_write_r+0x1c>
    735e:	pop	{r4, r5, r6, pc}
    7360:	ldr	r3, [r4, #0]
    7362:	cmp	r3, #0
    7364:	beq.n	735e <_write_r+0x1a>
    7366:	str	r3, [r6, #0]
    7368:	pop	{r4, r5, r6, pc}
    736a:	nop
    736c:	.word	0x2000c860

00007370 <quorem>:
    7370:	ldr	r2, [r0, #16]
    7372:	ldr	r3, [r1, #16]
    7374:	cmp	r3, r2
    7376:	bgt.w	7494 <quorem+0x124>
    737a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    737e:	add.w	r8, r3, #4294967295
    7382:	add.w	r7, r1, #20
    7386:	add.w	fp, r0, #20
    738a:	ldr.w	r2, [r7, r8, lsl #2]
    738e:	ldr.w	r3, [fp, r8, lsl #2]
    7392:	mov.w	r4, r8, lsl #2
    7396:	sub	sp, #12
    7398:	adds	r2, #1
    739a:	udiv	r9, r3, r2
    739e:	add.w	r3, fp, r4
    73a2:	str	r4, [sp, #0]
    73a4:	add.w	sl, r7, r4
    73a8:	str	r3, [sp, #4]
    73aa:	cmp.w	r9, #0
    73ae:	beq.n	7424 <quorem+0xb4>
    73b0:	movs	r5, #0
    73b2:	mov	ip, r7
    73b4:	mov	lr, fp
    73b6:	mov	r3, r5
    73b8:	ldr.w	r6, [ip], #4
    73bc:	ldr.w	r2, [lr]
    73c0:	uxth	r4, r6
    73c2:	mla	r5, r9, r4, r5
    73c6:	lsrs	r6, r6, #16
    73c8:	lsrs	r4, r5, #16
    73ca:	mla	r4, r9, r6, r4
    73ce:	uxth	r5, r5
    73d0:	subs	r3, r3, r5
    73d2:	uxth	r6, r4
    73d4:	uxtah	r3, r3, r2
    73d8:	rsb	r6, r6, r2, lsr #16
    73dc:	add.w	r6, r6, r3, asr #16
    73e0:	uxth	r3, r3
    73e2:	orr.w	r3, r3, r6, lsl #16
    73e6:	cmp	sl, ip
    73e8:	str.w	r3, [lr], #4
    73ec:	mov.w	r5, r4, lsr #16
    73f0:	mov.w	r3, r6, asr #16
    73f4:	bcs.n	73b8 <quorem+0x48>
    73f6:	ldr	r3, [sp, #0]
    73f8:	ldr.w	r3, [fp, r3]
    73fc:	cbnz	r3, 7424 <quorem+0xb4>
    73fe:	ldr	r4, [sp, #4]
    7400:	subs	r3, r4, #4
    7402:	cmp	fp, r3
    7404:	bcs.n	7420 <quorem+0xb0>
    7406:	ldr.w	r3, [r4, #-4]
    740a:	cbnz	r3, 7420 <quorem+0xb0>
    740c:	sub.w	r3, r4, #8
    7410:	b.n	7418 <quorem+0xa8>
    7412:	ldr	r2, [r3, #0]
    7414:	subs	r3, #4
    7416:	cbnz	r2, 7420 <quorem+0xb0>
    7418:	cmp	fp, r3
    741a:	add.w	r8, r8, #4294967295
    741e:	bcc.n	7412 <quorem+0xa2>
    7420:	str.w	r8, [r0, #16]
    7424:	mov	r4, r0
    7426:	bl	8a10 <__mcmp>
    742a:	cmp	r0, #0
    742c:	blt.n	748c <quorem+0x11c>
    742e:	add.w	r9, r9, #1
    7432:	mov	r5, fp
    7434:	movs	r3, #0
    7436:	ldr.w	r1, [r7], #4
    743a:	ldr	r0, [r5, #0]
    743c:	uxth	r2, r1
    743e:	subs	r2, r3, r2
    7440:	lsrs	r1, r1, #16
    7442:	uxtah	r2, r2, r0
    7446:	rsb	r3, r1, r0, lsr #16
    744a:	add.w	r3, r3, r2, asr #16
    744e:	uxth	r1, r2
    7450:	orr.w	r1, r1, r3, lsl #16
    7454:	cmp	sl, r7
    7456:	str.w	r1, [r5], #4
    745a:	mov.w	r3, r3, asr #16
    745e:	bcs.n	7436 <quorem+0xc6>
    7460:	ldr.w	r2, [fp, r8, lsl #2]
    7464:	add.w	r3, fp, r8, lsl #2
    7468:	cbnz	r2, 748c <quorem+0x11c>
    746a:	subs	r2, r3, #4
    746c:	cmp	fp, r2
    746e:	bcs.n	7488 <quorem+0x118>
    7470:	ldr.w	r2, [r3, #-4]
    7474:	cbnz	r2, 7488 <quorem+0x118>
    7476:	subs	r3, #8
    7478:	b.n	7480 <quorem+0x110>
    747a:	ldr	r2, [r3, #0]
    747c:	subs	r3, #4
    747e:	cbnz	r2, 7488 <quorem+0x118>
    7480:	cmp	fp, r3
    7482:	add.w	r8, r8, #4294967295
    7486:	bcc.n	747a <quorem+0x10a>
    7488:	str.w	r8, [r4, #16]
    748c:	mov	r0, r9
    748e:	add	sp, #12
    7490:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7494:	movs	r0, #0
    7496:	bx	lr

00007498 <_dtoa_r>:
    7498:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    749c:	vmov	r6, r7, d0
    74a0:	sub	sp, #108	; 0x6c
    74a2:	ldr	r4, [r0, #64]	; 0x40
    74a4:	ldr	r5, [sp, #144]	; 0x90
    74a6:	str	r1, [sp, #0]
    74a8:	mov	r9, r0
    74aa:	str	r2, [sp, #20]
    74ac:	str	r3, [sp, #12]
    74ae:	vmov	sl, s0
    74b2:	mov	fp, r7
    74b4:	cbz	r4, 74cc <_dtoa_r+0x34>
    74b6:	ldr	r2, [r0, #68]	; 0x44
    74b8:	str	r2, [r4, #4]
    74ba:	movs	r3, #1
    74bc:	lsls	r3, r2
    74be:	str	r3, [r4, #8]
    74c0:	mov	r1, r4
    74c2:	bl	864c <_Bfree>
    74c6:	movs	r3, #0
    74c8:	str.w	r3, [r9, #64]	; 0x40
    74cc:	cmp.w	fp, #0
    74d0:	mov	r4, fp
    74d2:	blt.n	753e <_dtoa_r+0xa6>
    74d4:	movs	r3, #0
    74d6:	str	r3, [r5, #0]
    74d8:	ldr	r3, [pc, #644]	; (7760 <_dtoa_r+0x2c8>)
    74da:	mov	r2, r3
    74dc:	ands	r3, r4
    74de:	cmp	r3, r2
    74e0:	beq.n	7510 <_dtoa_r+0x78>
    74e2:	movs	r2, #0
    74e4:	movs	r3, #0
    74e6:	mov	r0, sl
    74e8:	mov	r1, fp
    74ea:	bl	4a8c <__aeabi_dcmpeq>
    74ee:	mov	r6, sl
    74f0:	mov	r7, fp
    74f2:	mov	r8, r0
    74f4:	cbz	r0, 754a <_dtoa_r+0xb2>
    74f6:	ldr	r2, [sp, #12]
    74f8:	movs	r3, #1
    74fa:	str	r3, [r2, #0]
    74fc:	ldr	r3, [sp, #148]	; 0x94
    74fe:	cmp	r3, #0
    7500:	beq.w	7680 <_dtoa_r+0x1e8>
    7504:	ldr	r0, [pc, #604]	; (7764 <_dtoa_r+0x2cc>)
    7506:	str	r0, [r3, #0]
    7508:	subs	r0, #1
    750a:	add	sp, #108	; 0x6c
    750c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7510:	ldr	r2, [sp, #12]
    7512:	movw	r3, #9999	; 0x270f
    7516:	str	r3, [r2, #0]
    7518:	cmp.w	sl, #0
    751c:	beq.w	7654 <_dtoa_r+0x1bc>
    7520:	ldr	r0, [pc, #580]	; (7768 <_dtoa_r+0x2d0>)
    7522:	ldr	r3, [sp, #148]	; 0x94
    7524:	cmp	r3, #0
    7526:	beq.n	750a <_dtoa_r+0x72>
    7528:	ldrb	r3, [r0, #3]
    752a:	cmp	r3, #0
    752c:	beq.w	7684 <_dtoa_r+0x1ec>
    7530:	add.w	r3, r0, #8
    7534:	ldr	r2, [sp, #148]	; 0x94
    7536:	str	r3, [r2, #0]
    7538:	add	sp, #108	; 0x6c
    753a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    753e:	movs	r3, #1
    7540:	bic.w	r4, fp, #2147483648	; 0x80000000
    7544:	str	r3, [r5, #0]
    7546:	mov	fp, r4
    7548:	b.n	74d8 <_dtoa_r+0x40>
    754a:	add	r2, sp, #96	; 0x60
    754c:	add	r1, sp, #100	; 0x64
    754e:	vmov	d0, r6, r7
    7552:	mov	r0, r9
    7554:	bl	8b68 <__d2b>
    7558:	lsrs	r5, r4, #20
    755a:	str	r0, [sp, #40]	; 0x28
    755c:	bne.w	7666 <_dtoa_r+0x1ce>
    7560:	ldr	r5, [sp, #96]	; 0x60
    7562:	ldr	r6, [sp, #100]	; 0x64
    7564:	add	r6, r5
    7566:	addw	r3, r6, #1074	; 0x432
    756a:	cmp	r3, #32
    756c:	ble.w	7a80 <_dtoa_r+0x5e8>
    7570:	rsb	r3, r3, #64	; 0x40
    7574:	addw	r0, r6, #1042	; 0x412
    7578:	lsls	r4, r3
    757a:	lsr.w	r0, sl, r0
    757e:	orrs	r0, r4
    7580:	bl	44d0 <__aeabi_ui2d>
    7584:	movs	r3, #1
    7586:	subs	r4, r6, #1
    7588:	sub.w	r1, r1, #32505856	; 0x1f00000
    758c:	str	r3, [sp, #60]	; 0x3c
    758e:	movs	r2, #0
    7590:	ldr	r3, [pc, #472]	; (776c <_dtoa_r+0x2d4>)
    7592:	bl	4254 <__aeabi_dsub>
    7596:	add	r3, pc, #432	; (adr r3, 7748 <_dtoa_r+0x2b0>)
    7598:	ldrd	r2, r3, [r3]
    759c:	bl	45bc <__aeabi_dmul>
    75a0:	add	r3, pc, #428	; (adr r3, 7750 <_dtoa_r+0x2b8>)
    75a2:	ldrd	r2, r3, [r3]
    75a6:	bl	4258 <__adddf3>
    75aa:	mov	r6, r0
    75ac:	mov	r0, r4
    75ae:	mov	r7, r1
    75b0:	bl	44f0 <__aeabi_i2d>
    75b4:	add	r3, pc, #416	; (adr r3, 7758 <_dtoa_r+0x2c0>)
    75b6:	ldrd	r2, r3, [r3]
    75ba:	bl	45bc <__aeabi_dmul>
    75be:	mov	r2, r0
    75c0:	mov	r3, r1
    75c2:	mov	r0, r6
    75c4:	mov	r1, r7
    75c6:	bl	4258 <__adddf3>
    75ca:	mov	r6, r0
    75cc:	mov	r7, r1
    75ce:	bl	8de4 <__aeabi_d2iz>
    75d2:	movs	r2, #0
    75d4:	str	r0, [sp, #16]
    75d6:	movs	r3, #0
    75d8:	mov	r0, r6
    75da:	mov	r1, r7
    75dc:	bl	4aa0 <__aeabi_dcmplt>
    75e0:	cmp	r0, #0
    75e2:	bne.w	7a36 <_dtoa_r+0x59e>
    75e6:	ldr	r6, [sp, #16]
    75e8:	cmp	r6, #22
    75ea:	bhi.w	7a30 <_dtoa_r+0x598>
    75ee:	ldr	r3, [pc, #384]	; (7770 <_dtoa_r+0x2d8>)
    75f0:	add.w	r3, r3, r6, lsl #3
    75f4:	ldrd	r0, r1, [r3]
    75f8:	mov	r2, sl
    75fa:	mov	r3, fp
    75fc:	bl	4adc <__aeabi_dcmpgt>
    7600:	cmp	r0, #0
    7602:	beq.w	7a8a <_dtoa_r+0x5f2>
    7606:	subs	r3, r6, #1
    7608:	str	r3, [sp, #16]
    760a:	movs	r3, #0
    760c:	str	r3, [sp, #52]	; 0x34
    760e:	subs	r5, r5, r4
    7610:	subs.w	r8, r5, #1
    7614:	bmi.w	7a6c <_dtoa_r+0x5d4>
    7618:	movs	r3, #0
    761a:	str	r3, [sp, #28]
    761c:	ldr	r3, [sp, #16]
    761e:	cmp	r3, #0
    7620:	blt.w	7a5a <_dtoa_r+0x5c2>
    7624:	add	r8, r3
    7626:	str	r3, [sp, #48]	; 0x30
    7628:	movs	r3, #0
    762a:	str	r3, [sp, #24]
    762c:	ldr	r3, [sp, #0]
    762e:	cmp	r3, #9
    7630:	bhi.n	7688 <_dtoa_r+0x1f0>
    7632:	cmp	r3, #5
    7634:	ble.w	82c0 <_dtoa_r+0xe28>
    7638:	subs	r3, #4
    763a:	str	r3, [sp, #0]
    763c:	movs	r6, #0
    763e:	ldr	r3, [sp, #0]
    7640:	subs	r3, #2
    7642:	cmp	r3, #3
    7644:	bhi.w	828e <_dtoa_r+0xdf6>
    7648:	tbh	[pc, r3, lsl #1]
    764c:	.word	0x0224032b
    7650:	.word	0x04500336
    7654:	ldr	r3, [pc, #272]	; (7768 <_dtoa_r+0x2d0>)
    7656:	ldr	r2, [pc, #284]	; (7774 <_dtoa_r+0x2dc>)
    7658:	ubfx	r0, r4, #0, #20
    765c:	cmp	r0, #0
    765e:	ite	ne
    7660:	movne	r0, r3
    7662:	moveq	r0, r2
    7664:	b.n	7522 <_dtoa_r+0x8a>
    7666:	ubfx	r3, fp, #0, #20
    766a:	orr.w	r1, r3, #1069547520	; 0x3fc00000
    766e:	subw	r4, r5, #1023	; 0x3ff
    7672:	mov	r0, sl
    7674:	str.w	r8, [sp, #60]	; 0x3c
    7678:	orr.w	r1, r1, #3145728	; 0x300000
    767c:	ldr	r5, [sp, #96]	; 0x60
    767e:	b.n	758e <_dtoa_r+0xf6>
    7680:	ldr	r0, [pc, #244]	; (7778 <_dtoa_r+0x2e0>)
    7682:	b.n	750a <_dtoa_r+0x72>
    7684:	adds	r3, r0, #3
    7686:	b.n	7534 <_dtoa_r+0x9c>
    7688:	movs	r1, #0
    768a:	str.w	r1, [r9, #68]	; 0x44
    768e:	mov	r0, r9
    7690:	mov	r4, r1
    7692:	str	r1, [sp, #0]
    7694:	bl	8600 <_Balloc>
    7698:	mov.w	r3, #4294967295
    769c:	str	r3, [sp, #32]
    769e:	str	r3, [sp, #56]	; 0x38
    76a0:	movs	r3, #1
    76a2:	str	r0, [sp, #36]	; 0x24
    76a4:	str.w	r0, [r9, #64]	; 0x40
    76a8:	str	r4, [sp, #20]
    76aa:	str	r3, [sp, #44]	; 0x2c
    76ac:	ldr	r3, [sp, #100]	; 0x64
    76ae:	cmp	r3, #0
    76b0:	blt.w	7854 <_dtoa_r+0x3bc>
    76b4:	ldr	r2, [sp, #16]
    76b6:	cmp	r2, #14
    76b8:	bgt.w	7854 <_dtoa_r+0x3bc>
    76bc:	ldr	r3, [pc, #176]	; (7770 <_dtoa_r+0x2d8>)
    76be:	add.w	r3, r3, r2, lsl #3
    76c2:	vldr	d7, [r3]
    76c6:	ldr	r3, [sp, #20]
    76c8:	cmp	r3, #0
    76ca:	vstr	d7, [sp]
    76ce:	blt.w	7cce <_dtoa_r+0x836>
    76d2:	mov	r6, sl
    76d4:	mov	r7, fp
    76d6:	ldrd	sl, fp, [sp]
    76da:	mov	r0, r6
    76dc:	mov	r2, sl
    76de:	mov	r3, fp
    76e0:	mov	r1, r7
    76e2:	bl	4810 <__aeabi_ddiv>
    76e6:	bl	8de4 <__aeabi_d2iz>
    76ea:	mov	r4, r0
    76ec:	bl	44f0 <__aeabi_i2d>
    76f0:	mov	r2, sl
    76f2:	mov	r3, fp
    76f4:	bl	45bc <__aeabi_dmul>
    76f8:	mov	r3, r1
    76fa:	mov	r2, r0
    76fc:	mov	r1, r7
    76fe:	mov	r0, r6
    7700:	bl	4254 <__aeabi_dsub>
    7704:	ldr	r5, [sp, #36]	; 0x24
    7706:	add.w	r3, r4, #48	; 0x30
    770a:	strb	r3, [r5, #0]
    770c:	ldr	r3, [sp, #32]
    770e:	cmp	r3, #1
    7710:	mov	r6, r0
    7712:	mov	r7, r1
    7714:	add.w	r5, r5, #1
    7718:	beq.n	77de <_dtoa_r+0x346>
    771a:	movs	r2, #0
    771c:	ldr	r3, [pc, #92]	; (777c <_dtoa_r+0x2e4>)
    771e:	bl	45bc <__aeabi_dmul>
    7722:	movs	r2, #0
    7724:	movs	r3, #0
    7726:	mov	r6, r0
    7728:	mov	r7, r1
    772a:	bl	4a8c <__aeabi_dcmpeq>
    772e:	cmp	r0, #0
    7730:	bne.n	782e <_dtoa_r+0x396>
    7732:	str.w	r9, [sp, #20]
    7736:	ldr.w	sl, [sp, #32]
    773a:	ldr.w	fp, [sp, #36]	; 0x24
    773e:	ldrd	r8, r9, [sp]
    7742:	b.n	7796 <_dtoa_r+0x2fe>
    7744:	nop.w
    7748:	.word	0x636f4361
    774c:	.word	0x3fd287a7
    7750:	.word	0x8b60c8b3
    7754:	.word	0x3fc68a28
    7758:	.word	0x509f79fb
    775c:	.word	0x3fd34413
    7760:	.word	0x7ff00000
    7764:	.word	0x20000d55
    7768:	.word	0x20000d64
    776c:	.word	0x3ff80000
    7770:	.word	0x200002a8
    7774:	.word	0x20000d58
    7778:	.word	0x20000d54
    777c:	.word	0x40240000
    7780:	bl	45bc <__aeabi_dmul>
    7784:	movs	r2, #0
    7786:	movs	r3, #0
    7788:	mov	r6, r0
    778a:	mov	r7, r1
    778c:	bl	4a8c <__aeabi_dcmpeq>
    7790:	cmp	r0, #0
    7792:	bne.w	7ef2 <_dtoa_r+0xa5a>
    7796:	mov	r2, r8
    7798:	mov	r3, r9
    779a:	mov	r0, r6
    779c:	mov	r1, r7
    779e:	bl	4810 <__aeabi_ddiv>
    77a2:	bl	8de4 <__aeabi_d2iz>
    77a6:	mov	r4, r0
    77a8:	bl	44f0 <__aeabi_i2d>
    77ac:	mov	r2, r8
    77ae:	mov	r3, r9
    77b0:	bl	45bc <__aeabi_dmul>
    77b4:	mov	r2, r0
    77b6:	mov	r3, r1
    77b8:	mov	r0, r6
    77ba:	mov	r1, r7
    77bc:	bl	4254 <__aeabi_dsub>
    77c0:	add.w	lr, r4, #48	; 0x30
    77c4:	strb.w	lr, [r5], #1
    77c8:	rsb	lr, fp, r5
    77cc:	cmp	lr, sl
    77ce:	mov	r6, r0
    77d0:	mov	r7, r1
    77d2:	mov.w	r2, #0
    77d6:	ldr	r3, [pc, #696]	; (7a90 <_dtoa_r+0x5f8>)
    77d8:	bne.n	7780 <_dtoa_r+0x2e8>
    77da:	ldr.w	r9, [sp, #20]
    77de:	mov	r2, r6
    77e0:	mov	r3, r7
    77e2:	mov	r0, r6
    77e4:	mov	r1, r7
    77e6:	bl	4258 <__adddf3>
    77ea:	mov	r6, r0
    77ec:	mov	r7, r1
    77ee:	mov	r2, r0
    77f0:	mov	r3, r1
    77f2:	ldrd	r0, r1, [sp]
    77f6:	bl	4aa0 <__aeabi_dcmplt>
    77fa:	cbnz	r0, 780e <_dtoa_r+0x376>
    77fc:	mov	r2, r6
    77fe:	mov	r3, r7
    7800:	ldrd	r0, r1, [sp]
    7804:	bl	4a8c <__aeabi_dcmpeq>
    7808:	cbz	r0, 782e <_dtoa_r+0x396>
    780a:	lsls	r3, r4, #31
    780c:	bpl.n	782e <_dtoa_r+0x396>
    780e:	ldrb.w	r4, [r5, #-1]
    7812:	ldr	r2, [sp, #36]	; 0x24
    7814:	subs	r3, r5, #1
    7816:	b.n	7822 <_dtoa_r+0x38a>
    7818:	cmp	r2, r3
    781a:	beq.w	8016 <_dtoa_r+0xb7e>
    781e:	ldrb.w	r4, [r3, #-1]!
    7822:	cmp	r4, #57	; 0x39
    7824:	add.w	r5, r3, #1
    7828:	beq.n	7818 <_dtoa_r+0x380>
    782a:	adds	r4, #1
    782c:	strb	r4, [r3, #0]
    782e:	ldr	r1, [sp, #40]	; 0x28
    7830:	mov	r0, r9
    7832:	bl	864c <_Bfree>
    7836:	movs	r2, #0
    7838:	ldr	r3, [sp, #16]
    783a:	strb	r2, [r5, #0]
    783c:	ldr	r2, [sp, #12]
    783e:	adds	r3, #1
    7840:	str	r3, [r2, #0]
    7842:	ldr	r3, [sp, #148]	; 0x94
    7844:	cmp	r3, #0
    7846:	beq.w	7f80 <_dtoa_r+0xae8>
    784a:	ldr	r0, [sp, #36]	; 0x24
    784c:	str	r5, [r3, #0]
    784e:	add	sp, #108	; 0x6c
    7850:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7854:	ldr	r2, [sp, #44]	; 0x2c
    7856:	cmp	r2, #0
    7858:	beq.w	7a78 <_dtoa_r+0x5e0>
    785c:	ldr	r2, [sp, #0]
    785e:	cmp	r2, #1
    7860:	ble.w	7d12 <_dtoa_r+0x87a>
    7864:	ldr	r3, [sp, #32]
    7866:	ldr	r2, [sp, #24]
    7868:	subs	r7, r3, #1
    786a:	cmp	r2, r7
    786c:	blt.w	7f86 <_dtoa_r+0xaee>
    7870:	subs	r7, r2, r7
    7872:	ldr	r3, [sp, #32]
    7874:	cmp	r3, #0
    7876:	blt.w	817a <_dtoa_r+0xce2>
    787a:	ldr	r5, [sp, #28]
    787c:	ldr	r3, [sp, #32]
    787e:	ldr	r2, [sp, #28]
    7880:	movs	r1, #1
    7882:	add	r2, r3
    7884:	mov	r0, r9
    7886:	str	r2, [sp, #28]
    7888:	add	r8, r3
    788a:	bl	877c <__i2b>
    788e:	mov	r6, r0
    7890:	cbz	r5, 78ac <_dtoa_r+0x414>
    7892:	cmp.w	r8, #0
    7896:	ble.n	78ac <_dtoa_r+0x414>
    7898:	cmp	r5, r8
    789a:	ldr	r2, [sp, #28]
    789c:	mov	r3, r5
    789e:	it	ge
    78a0:	movge	r3, r8
    78a2:	subs	r2, r2, r3
    78a4:	str	r2, [sp, #28]
    78a6:	subs	r5, r5, r3
    78a8:	rsb	r8, r3, r8
    78ac:	ldr	r3, [sp, #24]
    78ae:	cmp	r3, #0
    78b0:	ble.w	7e9e <_dtoa_r+0xa06>
    78b4:	ldr	r2, [sp, #44]	; 0x2c
    78b6:	cmp	r2, #0
    78b8:	beq.w	7cc0 <_dtoa_r+0x828>
    78bc:	cmp	r7, #0
    78be:	beq.w	7cc0 <_dtoa_r+0x828>
    78c2:	mov	r1, r6
    78c4:	mov	r2, r7
    78c6:	mov	r0, r9
    78c8:	bl	88c0 <__pow5mult>
    78cc:	ldr	r2, [sp, #40]	; 0x28
    78ce:	mov	r1, r0
    78d0:	mov	r6, r0
    78d2:	mov	r0, r9
    78d4:	bl	8790 <__multiply>
    78d8:	ldr	r1, [sp, #40]	; 0x28
    78da:	mov	r4, r0
    78dc:	mov	r0, r9
    78de:	bl	864c <_Bfree>
    78e2:	ldr	r3, [sp, #24]
    78e4:	subs	r3, r3, r7
    78e6:	str	r3, [sp, #24]
    78e8:	bne.w	7cbe <_dtoa_r+0x826>
    78ec:	movs	r1, #1
    78ee:	mov	r0, r9
    78f0:	bl	877c <__i2b>
    78f4:	ldr	r3, [sp, #48]	; 0x30
    78f6:	str	r0, [sp, #24]
    78f8:	cmp	r3, #0
    78fa:	beq.w	7d28 <_dtoa_r+0x890>
    78fe:	mov	r1, r0
    7900:	mov	r2, r3
    7902:	mov	r0, r9
    7904:	bl	88c0 <__pow5mult>
    7908:	ldr	r3, [sp, #0]
    790a:	str	r0, [sp, #24]
    790c:	cmp	r3, #1
    790e:	ble.w	7ef8 <_dtoa_r+0xa60>
    7912:	movs	r7, #0
    7914:	ldr	r2, [sp, #24]
    7916:	ldr	r3, [r2, #16]
    7918:	add.w	r3, r2, r3, lsl #2
    791c:	ldr	r0, [r3, #16]
    791e:	bl	86e0 <__hi0bits>
    7922:	rsb	r0, r0, #32
    7926:	add	r0, r8
    7928:	ands.w	r0, r0, #31
    792c:	beq.w	7d24 <_dtoa_r+0x88c>
    7930:	rsb	r3, r0, #32
    7934:	cmp	r3, #4
    7936:	ble.w	82b4 <_dtoa_r+0xe1c>
    793a:	rsb	r0, r0, #28
    793e:	ldr	r3, [sp, #28]
    7940:	add	r3, r0
    7942:	str	r3, [sp, #28]
    7944:	add	r5, r0
    7946:	add	r8, r0
    7948:	ldr	r3, [sp, #28]
    794a:	cmp	r3, #0
    794c:	ble.n	795a <_dtoa_r+0x4c2>
    794e:	mov	r1, r4
    7950:	mov	r2, r3
    7952:	mov	r0, r9
    7954:	bl	8960 <__lshift>
    7958:	mov	r4, r0
    795a:	cmp.w	r8, #0
    795e:	ble.n	796c <_dtoa_r+0x4d4>
    7960:	mov	r2, r8
    7962:	ldr	r1, [sp, #24]
    7964:	mov	r0, r9
    7966:	bl	8960 <__lshift>
    796a:	str	r0, [sp, #24]
    796c:	ldr	r3, [sp, #52]	; 0x34
    796e:	cmp	r3, #0
    7970:	bne.w	7e68 <_dtoa_r+0x9d0>
    7974:	ldr	r3, [sp, #32]
    7976:	cmp	r3, #0
    7978:	ble.w	7ea2 <_dtoa_r+0xa0a>
    797c:	ldr	r3, [sp, #44]	; 0x2c
    797e:	cmp	r3, #0
    7980:	bne.w	7d6c <_dtoa_r+0x8d4>
    7984:	ldr.w	fp, [sp, #36]	; 0x24
    7988:	ldr	r7, [sp, #32]
    798a:	ldr.w	r8, [sp, #24]
    798e:	mov	r5, fp
    7990:	b.n	7998 <_dtoa_r+0x500>
    7992:	bl	8660 <__multadd>
    7996:	mov	r4, r0
    7998:	mov	r1, r8
    799a:	mov	r0, r4
    799c:	bl	7370 <quorem>
    79a0:	add.w	sl, r0, #48	; 0x30
    79a4:	strb.w	sl, [r5], #1
    79a8:	rsb	r3, fp, r5
    79ac:	cmp	r3, r7
    79ae:	mov.w	r2, #10
    79b2:	mov.w	r3, #0
    79b6:	mov	r1, r4
    79b8:	mov	r0, r9
    79ba:	blt.n	7992 <_dtoa_r+0x4fa>
    79bc:	ldr	r3, [sp, #36]	; 0x24
    79be:	ldr	r2, [sp, #32]
    79c0:	cmp	r2, #1
    79c2:	ite	ge
    79c4:	addge	r3, r3, r2
    79c6:	addlt	r3, #1
    79c8:	mov	r5, r3
    79ca:	mov.w	fp, #0
    79ce:	mov	r1, r4
    79d0:	movs	r2, #1
    79d2:	mov	r0, r9
    79d4:	bl	8960 <__lshift>
    79d8:	ldr	r1, [sp, #24]
    79da:	str	r0, [sp, #40]	; 0x28
    79dc:	bl	8a10 <__mcmp>
    79e0:	cmp	r0, #0
    79e2:	ble.w	7ff0 <_dtoa_r+0xb58>
    79e6:	ldrb.w	r2, [r5, #-1]
    79ea:	ldr	r1, [sp, #36]	; 0x24
    79ec:	subs	r3, r5, #1
    79ee:	b.n	79fa <_dtoa_r+0x562>
    79f0:	cmp	r3, r1
    79f2:	beq.w	7ede <_dtoa_r+0xa46>
    79f6:	ldrb.w	r2, [r3, #-1]!
    79fa:	cmp	r2, #57	; 0x39
    79fc:	add.w	r5, r3, #1
    7a00:	beq.n	79f0 <_dtoa_r+0x558>
    7a02:	adds	r2, #1
    7a04:	strb	r2, [r3, #0]
    7a06:	ldr	r1, [sp, #24]
    7a08:	mov	r0, r9
    7a0a:	bl	864c <_Bfree>
    7a0e:	cmp	r6, #0
    7a10:	beq.w	782e <_dtoa_r+0x396>
    7a14:	cmp.w	fp, #0
    7a18:	beq.n	7a26 <_dtoa_r+0x58e>
    7a1a:	cmp	fp, r6
    7a1c:	beq.n	7a26 <_dtoa_r+0x58e>
    7a1e:	mov	r1, fp
    7a20:	mov	r0, r9
    7a22:	bl	864c <_Bfree>
    7a26:	mov	r1, r6
    7a28:	mov	r0, r9
    7a2a:	bl	864c <_Bfree>
    7a2e:	b.n	782e <_dtoa_r+0x396>
    7a30:	movs	r3, #1
    7a32:	str	r3, [sp, #52]	; 0x34
    7a34:	b.n	760e <_dtoa_r+0x176>
    7a36:	ldr.w	r8, [sp, #16]
    7a3a:	mov	r0, r8
    7a3c:	bl	44f0 <__aeabi_i2d>
    7a40:	mov	r2, r0
    7a42:	mov	r3, r1
    7a44:	mov	r0, r6
    7a46:	mov	r1, r7
    7a48:	bl	4a8c <__aeabi_dcmpeq>
    7a4c:	cmp	r0, #0
    7a4e:	bne.w	75e6 <_dtoa_r+0x14e>
    7a52:	add.w	r3, r8, #4294967295
    7a56:	str	r3, [sp, #16]
    7a58:	b.n	75e6 <_dtoa_r+0x14e>
    7a5a:	ldr	r2, [sp, #28]
    7a5c:	ldr	r3, [sp, #16]
    7a5e:	subs	r2, r2, r3
    7a60:	negs	r3, r3
    7a62:	str	r3, [sp, #24]
    7a64:	movs	r3, #0
    7a66:	str	r2, [sp, #28]
    7a68:	str	r3, [sp, #48]	; 0x30
    7a6a:	b.n	762c <_dtoa_r+0x194>
    7a6c:	rsb	r3, r8, #0
    7a70:	str	r3, [sp, #28]
    7a72:	mov.w	r8, #0
    7a76:	b.n	761c <_dtoa_r+0x184>
    7a78:	ldr	r7, [sp, #24]
    7a7a:	ldr	r5, [sp, #28]
    7a7c:	ldr	r6, [sp, #44]	; 0x2c
    7a7e:	b.n	7890 <_dtoa_r+0x3f8>
    7a80:	rsb	r4, r3, #32
    7a84:	lsl.w	r0, sl, r4
    7a88:	b.n	7580 <_dtoa_r+0xe8>
    7a8a:	str	r0, [sp, #52]	; 0x34
    7a8c:	b.n	760e <_dtoa_r+0x176>
    7a8e:	nop
    7a90:	.word	0x40240000
    7a94:	movs	r3, #0
    7a96:	str	r3, [sp, #44]	; 0x2c
    7a98:	ldr	r3, [sp, #16]
    7a9a:	ldr	r2, [sp, #20]
    7a9c:	add	r3, r2
    7a9e:	str	r3, [sp, #56]	; 0x38
    7aa0:	adds	r3, #1
    7aa2:	cmp	r3, #0
    7aa4:	str	r3, [sp, #32]
    7aa6:	ble.w	7fa4 <_dtoa_r+0xb0c>
    7aaa:	ldr	r4, [sp, #32]
    7aac:	mov	r5, r4
    7aae:	movs	r1, #0
    7ab0:	cmp	r5, #23
    7ab2:	str.w	r1, [r9, #68]	; 0x44
    7ab6:	bls.n	7ad0 <_dtoa_r+0x638>
    7ab8:	movs	r2, #1
    7aba:	movs	r3, #4
    7abc:	lsls	r3, r3, #1
    7abe:	add.w	r0, r3, #20
    7ac2:	cmp	r0, r5
    7ac4:	mov	r1, r2
    7ac6:	add.w	r2, r2, #1
    7aca:	bls.n	7abc <_dtoa_r+0x624>
    7acc:	str.w	r1, [r9, #68]	; 0x44
    7ad0:	mov	r0, r9
    7ad2:	bl	8600 <_Balloc>
    7ad6:	cmp	r4, #14
    7ad8:	str	r0, [sp, #36]	; 0x24
    7ada:	str.w	r0, [r9, #64]	; 0x40
    7ade:	bhi.w	76ac <_dtoa_r+0x214>
    7ae2:	cmp	r6, #0
    7ae4:	beq.w	76ac <_dtoa_r+0x214>
    7ae8:	ldr	r1, [sp, #16]
    7aea:	cmp	r1, #0
    7aec:	strd	sl, fp, [sp, #64]	; 0x40
    7af0:	ble.w	8028 <_dtoa_r+0xb90>
    7af4:	ldr	r3, [pc, #576]	; (7d38 <_dtoa_r+0x8a0>)
    7af6:	and.w	r2, r1, #15
    7afa:	asrs	r6, r1, #4
    7afc:	add.w	r3, r3, r2, lsl #3
    7b00:	lsls	r0, r6, #27
    7b02:	ldrd	r4, r5, [r3]
    7b06:	bpl.w	7f96 <_dtoa_r+0xafe>
    7b0a:	ldr	r3, [pc, #560]	; (7d3c <_dtoa_r+0x8a4>)
    7b0c:	mov	r0, sl
    7b0e:	mov	r1, fp
    7b10:	ldrd	r2, r3, [r3, #32]
    7b14:	bl	4810 <__aeabi_ddiv>
    7b18:	strd	r0, r1, [sp, #72]	; 0x48
    7b1c:	and.w	r6, r6, #15
    7b20:	mov.w	sl, #3
    7b24:	cbz	r6, 7b48 <_dtoa_r+0x6b0>
    7b26:	ldr	r7, [pc, #532]	; (7d3c <_dtoa_r+0x8a4>)
    7b28:	lsls	r1, r6, #31
    7b2a:	bpl.n	7b40 <_dtoa_r+0x6a8>
    7b2c:	mov	r0, r4
    7b2e:	mov	r1, r5
    7b30:	ldrd	r2, r3, [r7]
    7b34:	bl	45bc <__aeabi_dmul>
    7b38:	add.w	sl, sl, #1
    7b3c:	mov	r4, r0
    7b3e:	mov	r5, r1
    7b40:	asrs	r6, r6, #1
    7b42:	add.w	r7, r7, #8
    7b46:	bne.n	7b28 <_dtoa_r+0x690>
    7b48:	mov	r2, r4
    7b4a:	mov	r3, r5
    7b4c:	ldrd	r0, r1, [sp, #72]	; 0x48
    7b50:	bl	4810 <__aeabi_ddiv>
    7b54:	mov	r6, r0
    7b56:	mov	r7, r1
    7b58:	ldr	r3, [sp, #52]	; 0x34
    7b5a:	cbz	r3, 7b6e <_dtoa_r+0x6d6>
    7b5c:	movs	r2, #0
    7b5e:	ldr	r3, [pc, #480]	; (7d40 <_dtoa_r+0x8a8>)
    7b60:	mov	r0, r6
    7b62:	mov	r1, r7
    7b64:	bl	4aa0 <__aeabi_dcmplt>
    7b68:	cmp	r0, #0
    7b6a:	bne.w	81a2 <_dtoa_r+0xd0a>
    7b6e:	mov	r0, sl
    7b70:	bl	44f0 <__aeabi_i2d>
    7b74:	mov	r2, r6
    7b76:	mov	r3, r7
    7b78:	bl	45bc <__aeabi_dmul>
    7b7c:	ldr	r3, [pc, #452]	; (7d44 <_dtoa_r+0x8ac>)
    7b7e:	movs	r2, #0
    7b80:	bl	4258 <__adddf3>
    7b84:	ldr	r3, [sp, #32]
    7b86:	mov	r4, r0
    7b88:	sub.w	r5, r1, #54525952	; 0x3400000
    7b8c:	cmp	r3, #0
    7b8e:	beq.w	7f48 <_dtoa_r+0xab0>
    7b92:	ldr	r3, [sp, #16]
    7b94:	str	r3, [sp, #88]	; 0x58
    7b96:	ldr	r3, [sp, #32]
    7b98:	str	r3, [sp, #72]	; 0x48
    7b9a:	ldr	r3, [sp, #44]	; 0x2c
    7b9c:	cmp	r3, #0
    7b9e:	beq.w	80ca <_dtoa_r+0xc32>
    7ba2:	ldr	r2, [sp, #72]	; 0x48
    7ba4:	ldr	r3, [pc, #400]	; (7d38 <_dtoa_r+0x8a0>)
    7ba6:	ldr	r1, [pc, #416]	; (7d48 <_dtoa_r+0x8b0>)
    7ba8:	add.w	r3, r3, r2, lsl #3
    7bac:	ldrd	r2, r3, [r3, #-8]
    7bb0:	movs	r0, #0
    7bb2:	bl	4810 <__aeabi_ddiv>
    7bb6:	mov	r2, r4
    7bb8:	mov	r3, r5
    7bba:	bl	4254 <__aeabi_dsub>
    7bbe:	mov	sl, r0
    7bc0:	mov	fp, r1
    7bc2:	mov	r0, r6
    7bc4:	mov	r1, r7
    7bc6:	bl	8de4 <__aeabi_d2iz>
    7bca:	mov	r4, r0
    7bcc:	bl	44f0 <__aeabi_i2d>
    7bd0:	mov	r2, r0
    7bd2:	mov	r3, r1
    7bd4:	mov	r0, r6
    7bd6:	mov	r1, r7
    7bd8:	bl	4254 <__aeabi_dsub>
    7bdc:	adds	r4, #48	; 0x30
    7bde:	ldr	r5, [sp, #36]	; 0x24
    7be0:	uxtb	r4, r4
    7be2:	mov	r6, r0
    7be4:	mov	r7, r1
    7be6:	strb	r4, [r5, #0]
    7be8:	mov	r2, r0
    7bea:	mov	r3, r1
    7bec:	mov	r0, sl
    7bee:	mov	r1, fp
    7bf0:	adds	r5, #1
    7bf2:	bl	4adc <__aeabi_dcmpgt>
    7bf6:	cmp	r0, #0
    7bf8:	bne.n	7c9c <_dtoa_r+0x804>
    7bfa:	mov	r2, r6
    7bfc:	mov	r3, r7
    7bfe:	movs	r0, #0
    7c00:	ldr	r1, [pc, #316]	; (7d40 <_dtoa_r+0x8a8>)
    7c02:	bl	4254 <__aeabi_dsub>
    7c06:	mov	r2, r0
    7c08:	mov	r3, r1
    7c0a:	mov	r0, sl
    7c0c:	mov	r1, fp
    7c0e:	bl	4adc <__aeabi_dcmpgt>
    7c12:	cmp	r0, #0
    7c14:	bne.w	8228 <_dtoa_r+0xd90>
    7c18:	ldr	r2, [sp, #72]	; 0x48
    7c1a:	cmp	r2, #1
    7c1c:	ble.w	800e <_dtoa_r+0xb76>
    7c20:	ldr	r3, [sp, #72]	; 0x48
    7c22:	ldr	r2, [sp, #36]	; 0x24
    7c24:	str.w	r8, [sp, #72]	; 0x48
    7c28:	add	r3, r2
    7c2a:	mov	r8, r3
    7c2c:	b.n	7c4a <_dtoa_r+0x7b2>
    7c2e:	movs	r0, #0
    7c30:	ldr	r1, [pc, #268]	; (7d40 <_dtoa_r+0x8a8>)
    7c32:	bl	4254 <__aeabi_dsub>
    7c36:	mov	r2, sl
    7c38:	mov	r3, fp
    7c3a:	bl	4aa0 <__aeabi_dcmplt>
    7c3e:	cmp	r0, #0
    7c40:	bne.w	8228 <_dtoa_r+0xd90>
    7c44:	cmp	r5, r8
    7c46:	beq.w	800a <_dtoa_r+0xb72>
    7c4a:	mov	r0, sl
    7c4c:	mov	r1, fp
    7c4e:	movs	r2, #0
    7c50:	ldr	r3, [pc, #248]	; (7d4c <_dtoa_r+0x8b4>)
    7c52:	bl	45bc <__aeabi_dmul>
    7c56:	movs	r2, #0
    7c58:	ldr	r3, [pc, #240]	; (7d4c <_dtoa_r+0x8b4>)
    7c5a:	mov	sl, r0
    7c5c:	mov	fp, r1
    7c5e:	mov	r0, r6
    7c60:	mov	r1, r7
    7c62:	bl	45bc <__aeabi_dmul>
    7c66:	mov	r7, r1
    7c68:	mov	r6, r0
    7c6a:	bl	8de4 <__aeabi_d2iz>
    7c6e:	mov	r4, r0
    7c70:	bl	44f0 <__aeabi_i2d>
    7c74:	mov	r2, r0
    7c76:	mov	r3, r1
    7c78:	mov	r0, r6
    7c7a:	mov	r1, r7
    7c7c:	bl	4254 <__aeabi_dsub>
    7c80:	adds	r4, #48	; 0x30
    7c82:	uxtb	r4, r4
    7c84:	mov	r2, sl
    7c86:	mov	r3, fp
    7c88:	strb.w	r4, [r5], #1
    7c8c:	mov	r6, r0
    7c8e:	mov	r7, r1
    7c90:	bl	4aa0 <__aeabi_dcmplt>
    7c94:	mov	r2, r6
    7c96:	mov	r3, r7
    7c98:	cmp	r0, #0
    7c9a:	beq.n	7c2e <_dtoa_r+0x796>
    7c9c:	ldr	r3, [sp, #88]	; 0x58
    7c9e:	str	r3, [sp, #16]
    7ca0:	b.n	782e <_dtoa_r+0x396>
    7ca2:	movs	r3, #0
    7ca4:	str	r3, [sp, #44]	; 0x2c
    7ca6:	ldr	r3, [sp, #20]
    7ca8:	cmp	r3, #0
    7caa:	ble.w	7fae <_dtoa_r+0xb16>
    7cae:	mov	r5, r3
    7cb0:	mov	r4, r3
    7cb2:	str	r3, [sp, #56]	; 0x38
    7cb4:	str	r3, [sp, #32]
    7cb6:	b.n	7aae <_dtoa_r+0x616>
    7cb8:	movs	r3, #1
    7cba:	str	r3, [sp, #44]	; 0x2c
    7cbc:	b.n	7ca6 <_dtoa_r+0x80e>
    7cbe:	str	r4, [sp, #40]	; 0x28
    7cc0:	ldr	r2, [sp, #24]
    7cc2:	ldr	r1, [sp, #40]	; 0x28
    7cc4:	mov	r0, r9
    7cc6:	bl	88c0 <__pow5mult>
    7cca:	mov	r4, r0
    7ccc:	b.n	78ec <_dtoa_r+0x454>
    7cce:	ldr	r3, [sp, #32]
    7cd0:	cmp	r3, #0
    7cd2:	bgt.w	76d2 <_dtoa_r+0x23a>
    7cd6:	bne.w	7f78 <_dtoa_r+0xae0>
    7cda:	movs	r2, #0
    7cdc:	ldr	r3, [pc, #112]	; (7d50 <_dtoa_r+0x8b8>)
    7cde:	ldrd	r0, r1, [sp]
    7ce2:	bl	45bc <__aeabi_dmul>
    7ce6:	mov	r3, fp
    7ce8:	mov	r2, sl
    7cea:	bl	4ac8 <__aeabi_dcmpge>
    7cee:	ldr	r3, [sp, #32]
    7cf0:	str	r3, [sp, #24]
    7cf2:	mov	r6, r3
    7cf4:	cmp	r0, #0
    7cf6:	beq.w	7ece <_dtoa_r+0xa36>
    7cfa:	ldr	r3, [sp, #20]
    7cfc:	ldr	r5, [sp, #36]	; 0x24
    7cfe:	mvns	r3, r3
    7d00:	str	r3, [sp, #16]
    7d02:	ldr	r1, [sp, #24]
    7d04:	mov	r0, r9
    7d06:	bl	864c <_Bfree>
    7d0a:	cmp	r6, #0
    7d0c:	beq.w	782e <_dtoa_r+0x396>
    7d10:	b.n	7a26 <_dtoa_r+0x58e>
    7d12:	ldr	r2, [sp, #60]	; 0x3c
    7d14:	cmp	r2, #0
    7d16:	beq.w	818a <_dtoa_r+0xcf2>
    7d1a:	addw	r3, r3, #1075	; 0x433
    7d1e:	ldr	r7, [sp, #24]
    7d20:	ldr	r5, [sp, #28]
    7d22:	b.n	787e <_dtoa_r+0x3e6>
    7d24:	movs	r0, #28
    7d26:	b.n	793e <_dtoa_r+0x4a6>
    7d28:	ldr	r3, [sp, #0]
    7d2a:	cmp	r3, #1
    7d2c:	ble.w	8230 <_dtoa_r+0xd98>
    7d30:	ldr	r7, [sp, #48]	; 0x30
    7d32:	movs	r0, #1
    7d34:	b.n	7926 <_dtoa_r+0x48e>
    7d36:	nop
    7d38:	.word	0x200002a8
    7d3c:	.word	0x20000280
    7d40:	.word	0x3ff00000
    7d44:	.word	0x401c0000
    7d48:	.word	0x3fe00000
    7d4c:	.word	0x40240000
    7d50:	.word	0x40140000
    7d54:	mov	r1, r6
    7d56:	movs	r3, #0
    7d58:	movs	r2, #10
    7d5a:	mov	r0, r9
    7d5c:	bl	8660 <__multadd>
    7d60:	ldr	r3, [sp, #56]	; 0x38
    7d62:	cmp	r3, #0
    7d64:	mov	r6, r0
    7d66:	ble.w	8284 <_dtoa_r+0xdec>
    7d6a:	str	r3, [sp, #32]
    7d6c:	cmp	r5, #0
    7d6e:	ble.n	7d7c <_dtoa_r+0x8e4>
    7d70:	mov	r1, r6
    7d72:	mov	r2, r5
    7d74:	mov	r0, r9
    7d76:	bl	8960 <__lshift>
    7d7a:	mov	r6, r0
    7d7c:	cmp	r7, #0
    7d7e:	bne.w	807a <_dtoa_r+0xbe2>
    7d82:	mov	r8, r6
    7d84:	ldr	r3, [sp, #32]
    7d86:	ldr	r2, [sp, #36]	; 0x24
    7d88:	subs	r3, #1
    7d8a:	adds	r3, r2, r3
    7d8c:	str	r3, [sp, #32]
    7d8e:	and.w	r3, sl, #1
    7d92:	str	r3, [sp, #40]	; 0x28
    7d94:	mov	r7, r2
    7d96:	ldr.w	fp, [sp, #24]
    7d9a:	mov	r0, r4
    7d9c:	mov	r1, fp
    7d9e:	bl	7370 <quorem>
    7da2:	mov	r1, r6
    7da4:	mov	r5, r0
    7da6:	mov	r0, r4
    7da8:	bl	8a10 <__mcmp>
    7dac:	mov	r2, r8
    7dae:	mov	r1, fp
    7db0:	mov	sl, r0
    7db2:	mov	r0, r9
    7db4:	bl	8a54 <__mdiff>
    7db8:	ldr	r2, [r0, #12]
    7dba:	mov	fp, r0
    7dbc:	add.w	r3, r5, #48	; 0x30
    7dc0:	cmp	r2, #0
    7dc2:	bne.n	7e58 <_dtoa_r+0x9c0>
    7dc4:	mov	r1, r0
    7dc6:	mov	r0, r4
    7dc8:	str	r3, [sp, #28]
    7dca:	bl	8a10 <__mcmp>
    7dce:	mov	r1, fp
    7dd0:	str	r0, [sp, #20]
    7dd2:	mov	r0, r9
    7dd4:	bl	864c <_Bfree>
    7dd8:	ldr	r2, [sp, #20]
    7dda:	ldr	r3, [sp, #28]
    7ddc:	cbnz	r2, 7dea <_dtoa_r+0x952>
    7dde:	ldr	r1, [sp, #0]
    7de0:	cbnz	r1, 7dea <_dtoa_r+0x952>
    7de2:	ldr	r1, [sp, #40]	; 0x28
    7de4:	cmp	r1, #0
    7de6:	beq.w	8254 <_dtoa_r+0xdbc>
    7dea:	cmp.w	sl, #0
    7dee:	blt.w	7fb8 <_dtoa_r+0xb20>
    7df2:	bne.n	7e00 <_dtoa_r+0x968>
    7df4:	ldr	r1, [sp, #0]
    7df6:	cbnz	r1, 7e00 <_dtoa_r+0x968>
    7df8:	ldr	r1, [sp, #40]	; 0x28
    7dfa:	cmp	r1, #0
    7dfc:	beq.w	7fb8 <_dtoa_r+0xb20>
    7e00:	cmp	r2, #0
    7e02:	bgt.w	80a2 <_dtoa_r+0xc0a>
    7e06:	ldr	r2, [sp, #32]
    7e08:	strb	r3, [r7, #0]
    7e0a:	add.w	sl, r7, #1
    7e0e:	cmp	r7, r2
    7e10:	mov	r5, sl
    7e12:	beq.w	80ba <_dtoa_r+0xc22>
    7e16:	mov	r1, r4
    7e18:	movs	r3, #0
    7e1a:	movs	r2, #10
    7e1c:	mov	r0, r9
    7e1e:	bl	8660 <__multadd>
    7e22:	cmp	r6, r8
    7e24:	mov	r4, r0
    7e26:	mov	r1, r6
    7e28:	mov.w	r3, #0
    7e2c:	mov.w	r2, #10
    7e30:	mov	r0, r9
    7e32:	beq.n	7e4c <_dtoa_r+0x9b4>
    7e34:	bl	8660 <__multadd>
    7e38:	mov	r1, r8
    7e3a:	mov	r6, r0
    7e3c:	movs	r3, #0
    7e3e:	movs	r2, #10
    7e40:	mov	r0, r9
    7e42:	bl	8660 <__multadd>
    7e46:	mov	r7, sl
    7e48:	mov	r8, r0
    7e4a:	b.n	7d96 <_dtoa_r+0x8fe>
    7e4c:	bl	8660 <__multadd>
    7e50:	mov	r7, sl
    7e52:	mov	r6, r0
    7e54:	mov	r8, r0
    7e56:	b.n	7d96 <_dtoa_r+0x8fe>
    7e58:	mov	r1, r0
    7e5a:	mov	r0, r9
    7e5c:	str	r3, [sp, #20]
    7e5e:	bl	864c <_Bfree>
    7e62:	movs	r2, #1
    7e64:	ldr	r3, [sp, #20]
    7e66:	b.n	7dea <_dtoa_r+0x952>
    7e68:	ldr	r1, [sp, #24]
    7e6a:	mov	r0, r4
    7e6c:	bl	8a10 <__mcmp>
    7e70:	cmp	r0, #0
    7e72:	bge.w	7974 <_dtoa_r+0x4dc>
    7e76:	mov	r1, r4
    7e78:	ldr	r4, [sp, #16]
    7e7a:	movs	r3, #0
    7e7c:	subs	r4, #1
    7e7e:	movs	r2, #10
    7e80:	mov	r0, r9
    7e82:	str	r4, [sp, #16]
    7e84:	bl	8660 <__multadd>
    7e88:	ldr	r3, [sp, #44]	; 0x2c
    7e8a:	mov	r4, r0
    7e8c:	cmp	r3, #0
    7e8e:	bne.w	7d54 <_dtoa_r+0x8bc>
    7e92:	ldr	r3, [sp, #56]	; 0x38
    7e94:	cmp	r3, #0
    7e96:	ble.w	8274 <_dtoa_r+0xddc>
    7e9a:	str	r3, [sp, #32]
    7e9c:	b.n	7984 <_dtoa_r+0x4ec>
    7e9e:	ldr	r4, [sp, #40]	; 0x28
    7ea0:	b.n	78ec <_dtoa_r+0x454>
    7ea2:	ldr	r3, [sp, #0]
    7ea4:	cmp	r3, #2
    7ea6:	ble.w	797c <_dtoa_r+0x4e4>
    7eaa:	ldr	r3, [sp, #32]
    7eac:	cmp	r3, #0
    7eae:	bne.w	81ec <_dtoa_r+0xd54>
    7eb2:	ldr	r1, [sp, #24]
    7eb4:	movs	r2, #5
    7eb6:	mov	r0, r9
    7eb8:	bl	8660 <__multadd>
    7ebc:	mov	r1, r0
    7ebe:	str	r0, [sp, #24]
    7ec0:	mov	r0, r4
    7ec2:	bl	8a10 <__mcmp>
    7ec6:	cmp	r0, #0
    7ec8:	str	r4, [sp, #40]	; 0x28
    7eca:	ble.w	7cfa <_dtoa_r+0x862>
    7ece:	ldr	r2, [sp, #16]
    7ed0:	ldr	r1, [sp, #36]	; 0x24
    7ed2:	movs	r3, #49	; 0x31
    7ed4:	adds	r2, #1
    7ed6:	str	r2, [sp, #16]
    7ed8:	strb	r3, [r1, #0]
    7eda:	adds	r5, r1, #1
    7edc:	b.n	7d02 <_dtoa_r+0x86a>
    7ede:	ldr	r2, [sp, #16]
    7ee0:	adds	r2, #1
    7ee2:	str	r2, [sp, #16]
    7ee4:	ldr	r2, [sp, #36]	; 0x24
    7ee6:	movs	r3, #49	; 0x31
    7ee8:	strb	r3, [r2, #0]
    7eea:	b.n	7a06 <_dtoa_r+0x56e>
    7eec:	movs	r3, #1
    7eee:	str	r3, [sp, #44]	; 0x2c
    7ef0:	b.n	7a98 <_dtoa_r+0x600>
    7ef2:	ldr.w	r9, [sp, #20]
    7ef6:	b.n	782e <_dtoa_r+0x396>
    7ef8:	cmp.w	sl, #0
    7efc:	bne.w	7912 <_dtoa_r+0x47a>
    7f00:	ubfx	r3, fp, #0, #20
    7f04:	cmp	r3, #0
    7f06:	bne.w	8186 <_dtoa_r+0xcee>
    7f0a:	bic.w	r7, fp, #2147483648	; 0x80000000
    7f0e:	lsrs	r7, r7, #20
    7f10:	lsls	r7, r7, #20
    7f12:	cbz	r7, 7f20 <_dtoa_r+0xa88>
    7f14:	ldr	r3, [sp, #28]
    7f16:	adds	r3, #1
    7f18:	str	r3, [sp, #28]
    7f1a:	add.w	r8, r8, #1
    7f1e:	movs	r7, #1
    7f20:	ldr	r3, [sp, #48]	; 0x30
    7f22:	movs	r0, #1
    7f24:	cmp	r3, #0
    7f26:	beq.w	7926 <_dtoa_r+0x48e>
    7f2a:	b.n	7914 <_dtoa_r+0x47c>
    7f2c:	mov	r0, sl
    7f2e:	bl	44f0 <__aeabi_i2d>
    7f32:	mov	r2, r6
    7f34:	mov	r3, r7
    7f36:	bl	45bc <__aeabi_dmul>
    7f3a:	movs	r2, #0
    7f3c:	ldr	r3, [pc, #764]	; (823c <_dtoa_r+0xda4>)
    7f3e:	bl	4258 <__adddf3>
    7f42:	mov	r4, r0
    7f44:	sub.w	r5, r1, #54525952	; 0x3400000
    7f48:	mov	r0, r6
    7f4a:	mov	r1, r7
    7f4c:	movs	r2, #0
    7f4e:	ldr	r3, [pc, #752]	; (8240 <_dtoa_r+0xda8>)
    7f50:	bl	4254 <__aeabi_dsub>
    7f54:	mov	r2, r4
    7f56:	mov	r3, r5
    7f58:	mov	r6, r0
    7f5a:	mov	r7, r1
    7f5c:	bl	4adc <__aeabi_dcmpgt>
    7f60:	cmp	r0, #0
    7f62:	bne.w	80c2 <_dtoa_r+0xc2a>
    7f66:	mov	r2, r4
    7f68:	add.w	r3, r5, #2147483648	; 0x80000000
    7f6c:	mov	r0, r6
    7f6e:	mov	r1, r7
    7f70:	bl	4aa0 <__aeabi_dcmplt>
    7f74:	cmp	r0, #0
    7f76:	beq.n	800e <_dtoa_r+0xb76>
    7f78:	movs	r3, #0
    7f7a:	str	r3, [sp, #24]
    7f7c:	mov	r6, r3
    7f7e:	b.n	7cfa <_dtoa_r+0x862>
    7f80:	ldr	r0, [sp, #36]	; 0x24
    7f82:	b.w	750a <_dtoa_r+0x72>
    7f86:	ldr	r3, [sp, #24]
    7f88:	ldr	r2, [sp, #48]	; 0x30
    7f8a:	str	r7, [sp, #24]
    7f8c:	subs	r3, r7, r3
    7f8e:	add	r2, r3
    7f90:	str	r2, [sp, #48]	; 0x30
    7f92:	movs	r7, #0
    7f94:	b.n	7872 <_dtoa_r+0x3da>
    7f96:	vldr	d7, [sp, #64]	; 0x40
    7f9a:	mov.w	sl, #2
    7f9e:	vstr	d7, [sp, #72]	; 0x48
    7fa2:	b.n	7b24 <_dtoa_r+0x68c>
    7fa4:	mov	r4, r3
    7fa6:	movs	r1, #0
    7fa8:	str.w	r1, [r9, #68]	; 0x44
    7fac:	b.n	7ad0 <_dtoa_r+0x638>
    7fae:	movs	r4, #1
    7fb0:	str	r4, [sp, #56]	; 0x38
    7fb2:	str	r4, [sp, #32]
    7fb4:	str	r4, [sp, #20]
    7fb6:	b.n	7fa6 <_dtoa_r+0xb0e>
    7fb8:	cmp	r2, #0
    7fba:	mov	sl, r3
    7fbc:	ble.n	7fe2 <_dtoa_r+0xb4a>
    7fbe:	mov	r1, r4
    7fc0:	movs	r2, #1
    7fc2:	mov	r0, r9
    7fc4:	bl	8960 <__lshift>
    7fc8:	ldr	r1, [sp, #24]
    7fca:	mov	r4, r0
    7fcc:	bl	8a10 <__mcmp>
    7fd0:	cmp	r0, #0
    7fd2:	ble.w	8266 <_dtoa_r+0xdce>
    7fd6:	cmp.w	sl, #57	; 0x39
    7fda:	beq.w	81f0 <_dtoa_r+0xd58>
    7fde:	add.w	sl, r5, #49	; 0x31
    7fe2:	mov	fp, r6
    7fe4:	strb.w	sl, [r7]
    7fe8:	adds	r5, r7, #1
    7fea:	mov	r6, r8
    7fec:	str	r4, [sp, #40]	; 0x28
    7fee:	b.n	7a06 <_dtoa_r+0x56e>
    7ff0:	bne.n	7ffc <_dtoa_r+0xb64>
    7ff2:	tst.w	sl, #1
    7ff6:	beq.n	7ffc <_dtoa_r+0xb64>
    7ff8:	b.n	79e6 <_dtoa_r+0x54e>
    7ffa:	mov	r5, r2
    7ffc:	ldrb.w	r3, [r5, #-1]
    8000:	cmp	r3, #48	; 0x30
    8002:	add.w	r2, r5, #4294967295
    8006:	beq.n	7ffa <_dtoa_r+0xb62>
    8008:	b.n	7a06 <_dtoa_r+0x56e>
    800a:	ldr.w	r8, [sp, #72]	; 0x48
    800e:	ldrd	sl, fp, [sp, #64]	; 0x40
    8012:	b.w	76ac <_dtoa_r+0x214>
    8016:	ldr	r1, [sp, #36]	; 0x24
    8018:	movs	r2, #48	; 0x30
    801a:	strb	r2, [r1, #0]
    801c:	ldr	r2, [sp, #16]
    801e:	ldrb.w	r4, [r5, #-1]
    8022:	adds	r2, #1
    8024:	str	r2, [sp, #16]
    8026:	b.n	782a <_dtoa_r+0x392>
    8028:	ldr	r3, [sp, #16]
    802a:	negs	r4, r3
    802c:	cmp	r4, #0
    802e:	beq.w	8198 <_dtoa_r+0xd00>
    8032:	ldr	r3, [pc, #528]	; (8244 <_dtoa_r+0xdac>)
    8034:	and.w	r2, r4, #15
    8038:	add.w	r3, r3, r2, lsl #3
    803c:	ldrd	r2, r3, [r3]
    8040:	ldrd	r0, r1, [sp, #64]	; 0x40
    8044:	bl	45bc <__aeabi_dmul>
    8048:	asrs	r4, r4, #4
    804a:	mov	r6, r0
    804c:	mov	r7, r1
    804e:	beq.w	827e <_dtoa_r+0xde6>
    8052:	ldr	r5, [pc, #500]	; (8248 <_dtoa_r+0xdb0>)
    8054:	mov.w	sl, #2
    8058:	lsls	r2, r4, #31
    805a:	bpl.n	8070 <_dtoa_r+0xbd8>
    805c:	mov	r0, r6
    805e:	mov	r1, r7
    8060:	ldrd	r2, r3, [r5]
    8064:	bl	45bc <__aeabi_dmul>
    8068:	add.w	sl, sl, #1
    806c:	mov	r6, r0
    806e:	mov	r7, r1
    8070:	asrs	r4, r4, #1
    8072:	add.w	r5, r5, #8
    8076:	bne.n	8058 <_dtoa_r+0xbc0>
    8078:	b.n	7b58 <_dtoa_r+0x6c0>
    807a:	ldr	r1, [r6, #4]
    807c:	mov	r0, r9
    807e:	bl	8600 <_Balloc>
    8082:	ldr	r3, [r6, #16]
    8084:	adds	r2, r3, #2
    8086:	mov	r5, r0
    8088:	lsls	r2, r2, #2
    808a:	add.w	r1, r6, #12
    808e:	adds	r0, #12
    8090:	bl	2270 <memcpy>
    8094:	mov	r1, r5
    8096:	movs	r2, #1
    8098:	mov	r0, r9
    809a:	bl	8960 <__lshift>
    809e:	mov	r8, r0
    80a0:	b.n	7d84 <_dtoa_r+0x8ec>
    80a2:	cmp	r3, #57	; 0x39
    80a4:	beq.w	81f0 <_dtoa_r+0xd58>
    80a8:	add.w	sl, r3, #1
    80ac:	mov	fp, r6
    80ae:	strb.w	sl, [r7]
    80b2:	adds	r5, r7, #1
    80b4:	mov	r6, r8
    80b6:	str	r4, [sp, #40]	; 0x28
    80b8:	b.n	7a06 <_dtoa_r+0x56e>
    80ba:	mov	fp, r6
    80bc:	mov	sl, r3
    80be:	mov	r6, r8
    80c0:	b.n	79ce <_dtoa_r+0x536>
    80c2:	movs	r3, #0
    80c4:	str	r3, [sp, #24]
    80c6:	mov	r6, r3
    80c8:	b.n	7ece <_dtoa_r+0xa36>
    80ca:	ldr	r3, [sp, #72]	; 0x48
    80cc:	ldr	r1, [pc, #372]	; (8244 <_dtoa_r+0xdac>)
    80ce:	subs	r2, r3, #1
    80d0:	add.w	r1, r1, r2, lsl #3
    80d4:	mov	r3, r5
    80d6:	str	r2, [sp, #92]	; 0x5c
    80d8:	ldrd	r0, r1, [r1]
    80dc:	mov	r2, r4
    80de:	bl	45bc <__aeabi_dmul>
    80e2:	strd	r0, r1, [sp, #80]	; 0x50
    80e6:	mov	r1, r7
    80e8:	mov	r0, r6
    80ea:	bl	8de4 <__aeabi_d2iz>
    80ee:	mov	r4, r0
    80f0:	bl	44f0 <__aeabi_i2d>
    80f4:	mov	r3, r1
    80f6:	mov	r2, r0
    80f8:	mov	r1, r7
    80fa:	mov	r0, r6
    80fc:	bl	4254 <__aeabi_dsub>
    8100:	ldr	r3, [sp, #72]	; 0x48
    8102:	mov	r7, r1
    8104:	ldr	r1, [sp, #36]	; 0x24
    8106:	adds	r4, #48	; 0x30
    8108:	cmp	r3, #1
    810a:	mov	r6, r0
    810c:	strb	r4, [r1, #0]
    810e:	add.w	r5, r1, #1
    8112:	beq.n	8156 <_dtoa_r+0xcbe>
    8114:	ldr	r3, [sp, #72]	; 0x48
    8116:	ldr	r2, [sp, #36]	; 0x24
    8118:	add	r3, r2
    811a:	mov	sl, r3
    811c:	mov	fp, r5
    811e:	movs	r2, #0
    8120:	ldr	r3, [pc, #296]	; (824c <_dtoa_r+0xdb4>)
    8122:	mov	r0, r6
    8124:	mov	r1, r7
    8126:	bl	45bc <__aeabi_dmul>
    812a:	mov	r7, r1
    812c:	mov	r6, r0
    812e:	bl	8de4 <__aeabi_d2iz>
    8132:	mov	r4, r0
    8134:	bl	44f0 <__aeabi_i2d>
    8138:	adds	r4, #48	; 0x30
    813a:	mov	r2, r0
    813c:	mov	r3, r1
    813e:	mov	r0, r6
    8140:	mov	r1, r7
    8142:	bl	4254 <__aeabi_dsub>
    8146:	strb.w	r4, [fp], #1
    814a:	cmp	sl, fp
    814c:	mov	r6, r0
    814e:	mov	r7, r1
    8150:	bne.n	811e <_dtoa_r+0xc86>
    8152:	ldr	r3, [sp, #92]	; 0x5c
    8154:	add	r5, r3
    8156:	movs	r2, #0
    8158:	ldr	r3, [pc, #244]	; (8250 <_dtoa_r+0xdb8>)
    815a:	ldrd	r0, r1, [sp, #80]	; 0x50
    815e:	bl	4258 <__adddf3>
    8162:	mov	r2, r6
    8164:	mov	r3, r7
    8166:	bl	4aa0 <__aeabi_dcmplt>
    816a:	cmp	r0, #0
    816c:	beq.n	8200 <_dtoa_r+0xd68>
    816e:	ldr	r3, [sp, #88]	; 0x58
    8170:	str	r3, [sp, #16]
    8172:	ldrb.w	r4, [r5, #-1]
    8176:	b.w	7812 <_dtoa_r+0x37a>
    817a:	ldr	r3, [sp, #28]
    817c:	ldr	r2, [sp, #32]
    817e:	subs	r5, r3, r2
    8180:	movs	r3, #0
    8182:	b.w	787e <_dtoa_r+0x3e6>
    8186:	movs	r7, #0
    8188:	b.n	7f20 <_dtoa_r+0xa88>
    818a:	ldr	r3, [sp, #96]	; 0x60
    818c:	ldr	r7, [sp, #24]
    818e:	ldr	r5, [sp, #28]
    8190:	rsb	r3, r3, #54	; 0x36
    8194:	b.w	787e <_dtoa_r+0x3e6>
    8198:	ldrd	r6, r7, [sp, #64]	; 0x40
    819c:	mov.w	sl, #2
    81a0:	b.n	7b58 <_dtoa_r+0x6c0>
    81a2:	ldr	r3, [sp, #32]
    81a4:	cmp	r3, #0
    81a6:	beq.w	7f2c <_dtoa_r+0xa94>
    81aa:	ldr	r3, [sp, #56]	; 0x38
    81ac:	cmp	r3, #0
    81ae:	ble.w	800e <_dtoa_r+0xb76>
    81b2:	movs	r2, #0
    81b4:	ldr	r3, [pc, #148]	; (824c <_dtoa_r+0xdb4>)
    81b6:	mov	r0, r6
    81b8:	mov	r1, r7
    81ba:	bl	45bc <__aeabi_dmul>
    81be:	mov	r6, r0
    81c0:	mov	r7, r1
    81c2:	add.w	r0, sl, #1
    81c6:	bl	44f0 <__aeabi_i2d>
    81ca:	mov	r2, r6
    81cc:	mov	r3, r7
    81ce:	bl	45bc <__aeabi_dmul>
    81d2:	movs	r2, #0
    81d4:	ldr	r3, [pc, #100]	; (823c <_dtoa_r+0xda4>)
    81d6:	bl	4258 <__adddf3>
    81da:	ldr	r2, [sp, #16]
    81dc:	ldr	r3, [sp, #56]	; 0x38
    81de:	str	r3, [sp, #72]	; 0x48
    81e0:	subs	r2, #1
    81e2:	mov	r4, r0
    81e4:	sub.w	r5, r1, #54525952	; 0x3400000
    81e8:	str	r2, [sp, #88]	; 0x58
    81ea:	b.n	7b9a <_dtoa_r+0x702>
    81ec:	str	r4, [sp, #40]	; 0x28
    81ee:	b.n	7cfa <_dtoa_r+0x862>
    81f0:	movs	r2, #57	; 0x39
    81f2:	mov	fp, r6
    81f4:	str	r4, [sp, #40]	; 0x28
    81f6:	mov	r6, r8
    81f8:	strb	r2, [r7, #0]
    81fa:	adds	r5, r7, #1
    81fc:	b.w	79ea <_dtoa_r+0x552>
    8200:	ldrd	r2, r3, [sp, #80]	; 0x50
    8204:	movs	r0, #0
    8206:	ldr	r1, [pc, #72]	; (8250 <_dtoa_r+0xdb8>)
    8208:	bl	4254 <__aeabi_dsub>
    820c:	mov	r2, r6
    820e:	mov	r3, r7
    8210:	bl	4adc <__aeabi_dcmpgt>
    8214:	cbnz	r0, 821a <_dtoa_r+0xd82>
    8216:	b.n	800e <_dtoa_r+0xb76>
    8218:	mov	r5, r2
    821a:	ldrb.w	r3, [r5, #-1]
    821e:	cmp	r3, #48	; 0x30
    8220:	add.w	r2, r5, #4294967295
    8224:	beq.n	8218 <_dtoa_r+0xd80>
    8226:	b.n	7c9c <_dtoa_r+0x804>
    8228:	ldr	r3, [sp, #88]	; 0x58
    822a:	str	r3, [sp, #16]
    822c:	b.w	7812 <_dtoa_r+0x37a>
    8230:	cmp.w	sl, #0
    8234:	bne.w	7d30 <_dtoa_r+0x898>
    8238:	b.n	7f00 <_dtoa_r+0xa68>
    823a:	nop
    823c:	.word	0x401c0000
    8240:	.word	0x40140000
    8244:	.word	0x200002a8
    8248:	.word	0x20000280
    824c:	.word	0x40240000
    8250:	.word	0x3fe00000
    8254:	cmp	r3, #57	; 0x39
    8256:	mov	fp, sl
    8258:	mov	sl, r3
    825a:	beq.n	81f0 <_dtoa_r+0xd58>
    825c:	cmp.w	fp, #0
    8260:	bgt.w	7fde <_dtoa_r+0xb46>
    8264:	b.n	7fe2 <_dtoa_r+0xb4a>
    8266:	bne.w	7fe2 <_dtoa_r+0xb4a>
    826a:	tst.w	sl, #1
    826e:	beq.w	7fe2 <_dtoa_r+0xb4a>
    8272:	b.n	7fd6 <_dtoa_r+0xb3e>
    8274:	ldr	r3, [sp, #0]
    8276:	cmp	r3, #2
    8278:	bgt.n	82c6 <_dtoa_r+0xe2e>
    827a:	ldr	r3, [sp, #56]	; 0x38
    827c:	b.n	7e9a <_dtoa_r+0xa02>
    827e:	mov.w	sl, #2
    8282:	b.n	7b58 <_dtoa_r+0x6c0>
    8284:	ldr	r3, [sp, #0]
    8286:	cmp	r3, #2
    8288:	bgt.n	82c6 <_dtoa_r+0xe2e>
    828a:	ldr	r3, [sp, #56]	; 0x38
    828c:	b.n	7d6a <_dtoa_r+0x8d2>
    828e:	movs	r4, #0
    8290:	str.w	r4, [r9, #68]	; 0x44
    8294:	mov	r1, r4
    8296:	mov	r0, r9
    8298:	bl	8600 <_Balloc>
    829c:	mov.w	r3, #4294967295
    82a0:	str	r3, [sp, #32]
    82a2:	str	r3, [sp, #56]	; 0x38
    82a4:	movs	r3, #1
    82a6:	str	r0, [sp, #36]	; 0x24
    82a8:	str	r4, [sp, #20]
    82aa:	str.w	r0, [r9, #64]	; 0x40
    82ae:	str	r3, [sp, #44]	; 0x2c
    82b0:	b.w	76ac <_dtoa_r+0x214>
    82b4:	beq.w	7948 <_dtoa_r+0x4b0>
    82b8:	rsb	r0, r0, #60	; 0x3c
    82bc:	b.w	793e <_dtoa_r+0x4a6>
    82c0:	movs	r6, #1
    82c2:	b.w	763e <_dtoa_r+0x1a6>
    82c6:	ldr	r3, [sp, #56]	; 0x38
    82c8:	str	r3, [sp, #32]
    82ca:	b.n	7eaa <_dtoa_r+0xa12>

000082cc <_malloc_trim_r>:
    82cc:	push	{r3, r4, r5, r6, r7, lr}
    82ce:	ldr	r7, [pc, #140]	; (835c <_malloc_trim_r+0x90>)
    82d0:	mov	r4, r1
    82d2:	mov	r6, r0
    82d4:	bl	5590 <__malloc_lock>
    82d8:	ldr	r3, [r7, #8]
    82da:	ldr	r5, [r3, #4]
    82dc:	bic.w	r5, r5, #3
    82e0:	subs	r1, r5, r4
    82e2:	addw	r1, r1, #4079	; 0xfef
    82e6:	bic.w	r1, r1, #4080	; 0xff0
    82ea:	bic.w	r1, r1, #15
    82ee:	sub.w	r4, r1, #4096	; 0x1000
    82f2:	cmp.w	r4, #4096	; 0x1000
    82f6:	blt.n	8308 <_malloc_trim_r+0x3c>
    82f8:	movs	r1, #0
    82fa:	mov	r0, r6
    82fc:	bl	5978 <_sbrk_r>
    8300:	ldr	r3, [r7, #8]
    8302:	add	r3, r5
    8304:	cmp	r0, r3
    8306:	beq.n	8312 <_malloc_trim_r+0x46>
    8308:	mov	r0, r6
    830a:	bl	5594 <__malloc_unlock>
    830e:	movs	r0, #0
    8310:	pop	{r3, r4, r5, r6, r7, pc}
    8312:	negs	r1, r4
    8314:	mov	r0, r6
    8316:	bl	5978 <_sbrk_r>
    831a:	adds	r0, #1
    831c:	beq.n	833a <_malloc_trim_r+0x6e>
    831e:	ldr	r3, [pc, #64]	; (8360 <_malloc_trim_r+0x94>)
    8320:	ldr	r2, [r7, #8]
    8322:	ldr	r1, [r3, #0]
    8324:	subs	r5, r5, r4
    8326:	orr.w	r5, r5, #1
    832a:	mov	r0, r6
    832c:	subs	r1, r1, r4
    832e:	str	r5, [r2, #4]
    8330:	str	r1, [r3, #0]
    8332:	bl	5594 <__malloc_unlock>
    8336:	movs	r0, #1
    8338:	pop	{r3, r4, r5, r6, r7, pc}
    833a:	movs	r1, #0
    833c:	mov	r0, r6
    833e:	bl	5978 <_sbrk_r>
    8342:	ldr	r2, [r7, #8]
    8344:	subs	r3, r0, r2
    8346:	cmp	r3, #15
    8348:	ble.n	8308 <_malloc_trim_r+0x3c>
    834a:	ldr	r4, [pc, #24]	; (8364 <_malloc_trim_r+0x98>)
    834c:	ldr	r1, [pc, #16]	; (8360 <_malloc_trim_r+0x94>)
    834e:	ldr	r4, [r4, #0]
    8350:	orr.w	r3, r3, #1
    8354:	subs	r0, r0, r4
    8356:	str	r3, [r2, #4]
    8358:	str	r0, [r1, #0]
    835a:	b.n	8308 <_malloc_trim_r+0x3c>
    835c:	.word	0x2000139c
    8360:	.word	0x20001cc0
    8364:	.word	0x200017a4

00008368 <_free_r>:
    8368:	cmp	r1, #0
    836a:	beq.n	83f8 <_free_r+0x90>
    836c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8370:	mov	r5, r1
    8372:	mov	r8, r0
    8374:	bl	5590 <__malloc_lock>
    8378:	ldr.w	r7, [r5, #-4]
    837c:	ldr	r1, [pc, #424]	; (8528 <_free_r+0x1c0>)
    837e:	bic.w	r3, r7, #1
    8382:	sub.w	r4, r5, #8
    8386:	adds	r2, r4, r3
    8388:	ldr	r6, [r1, #8]
    838a:	ldr	r0, [r2, #4]
    838c:	cmp	r2, r6
    838e:	bic.w	r0, r0, #3
    8392:	beq.n	845a <_free_r+0xf2>
    8394:	lsls	r6, r7, #31
    8396:	str	r0, [r2, #4]
    8398:	bmi.n	83b2 <_free_r+0x4a>
    839a:	ldr.w	r7, [r5, #-8]
    839e:	subs	r4, r4, r7
    83a0:	add.w	lr, r1, #8
    83a4:	ldr	r5, [r4, #8]
    83a6:	cmp	r5, lr
    83a8:	add	r3, r7
    83aa:	beq.n	848c <_free_r+0x124>
    83ac:	ldr	r7, [r4, #12]
    83ae:	str	r7, [r5, #12]
    83b0:	str	r5, [r7, #8]
    83b2:	adds	r5, r2, r0
    83b4:	ldr	r5, [r5, #4]
    83b6:	lsls	r5, r5, #31
    83b8:	bpl.n	8440 <_free_r+0xd8>
    83ba:	orr.w	r2, r3, #1
    83be:	str	r2, [r4, #4]
    83c0:	str	r3, [r4, r3]
    83c2:	cmp.w	r3, #512	; 0x200
    83c6:	bcs.n	83fa <_free_r+0x92>
    83c8:	lsrs	r3, r3, #3
    83ca:	adds	r2, r3, #1
    83cc:	ldr	r5, [r1, #4]
    83ce:	ldr.w	r7, [r1, r2, lsl #3]
    83d2:	str	r7, [r4, #8]
    83d4:	movs	r0, #1
    83d6:	asrs	r3, r3, #2
    83d8:	lsl.w	r3, r0, r3
    83dc:	add.w	r0, r1, r2, lsl #3
    83e0:	orrs	r5, r3
    83e2:	subs	r0, #8
    83e4:	str	r0, [r4, #12]
    83e6:	str	r5, [r1, #4]
    83e8:	str.w	r4, [r1, r2, lsl #3]
    83ec:	str	r4, [r7, #12]
    83ee:	mov	r0, r8
    83f0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    83f4:	b.w	5594 <__malloc_unlock>
    83f8:	bx	lr
    83fa:	lsrs	r2, r3, #9
    83fc:	cmp	r2, #4
    83fe:	bhi.n	84a8 <_free_r+0x140>
    8400:	lsrs	r2, r3, #6
    8402:	add.w	r7, r2, #57	; 0x39
    8406:	lsls	r7, r7, #1
    8408:	add.w	r5, r2, #56	; 0x38
    840c:	add.w	r0, r1, r7, lsl #2
    8410:	ldr.w	r2, [r1, r7, lsl #2]
    8414:	ldr	r1, [pc, #272]	; (8528 <_free_r+0x1c0>)
    8416:	subs	r0, #8
    8418:	cmp	r0, r2
    841a:	beq.n	84b8 <_free_r+0x150>
    841c:	ldr	r1, [r2, #4]
    841e:	bic.w	r1, r1, #3
    8422:	cmp	r3, r1
    8424:	bcs.n	842c <_free_r+0xc4>
    8426:	ldr	r2, [r2, #8]
    8428:	cmp	r0, r2
    842a:	bne.n	841c <_free_r+0xb4>
    842c:	ldr	r0, [r2, #12]
    842e:	str	r0, [r4, #12]
    8430:	str	r2, [r4, #8]
    8432:	str	r4, [r0, #8]
    8434:	str	r4, [r2, #12]
    8436:	mov	r0, r8
    8438:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    843c:	b.w	5594 <__malloc_unlock>
    8440:	ldr	r5, [r2, #8]
    8442:	ldr	r7, [pc, #232]	; (852c <_free_r+0x1c4>)
    8444:	cmp	r5, r7
    8446:	add	r3, r0
    8448:	beq.n	84ca <_free_r+0x162>
    844a:	ldr	r0, [r2, #12]
    844c:	str	r0, [r5, #12]
    844e:	orr.w	r2, r3, #1
    8452:	str	r5, [r0, #8]
    8454:	str	r2, [r4, #4]
    8456:	str	r3, [r4, r3]
    8458:	b.n	83c2 <_free_r+0x5a>
    845a:	lsls	r7, r7, #31
    845c:	add	r3, r0
    845e:	bmi.n	8470 <_free_r+0x108>
    8460:	ldr.w	r2, [r5, #-8]
    8464:	subs	r4, r4, r2
    8466:	add	r3, r2
    8468:	ldr	r0, [r4, #8]
    846a:	ldr	r2, [r4, #12]
    846c:	str	r2, [r0, #12]
    846e:	str	r0, [r2, #8]
    8470:	ldr	r2, [pc, #188]	; (8530 <_free_r+0x1c8>)
    8472:	ldr	r2, [r2, #0]
    8474:	orr.w	r0, r3, #1
    8478:	cmp	r3, r2
    847a:	str	r0, [r4, #4]
    847c:	str	r4, [r1, #8]
    847e:	bcc.n	83ee <_free_r+0x86>
    8480:	ldr	r3, [pc, #176]	; (8534 <_free_r+0x1cc>)
    8482:	mov	r0, r8
    8484:	ldr	r1, [r3, #0]
    8486:	bl	82cc <_malloc_trim_r>
    848a:	b.n	83ee <_free_r+0x86>
    848c:	adds	r1, r2, r0
    848e:	ldr	r1, [r1, #4]
    8490:	lsls	r1, r1, #31
    8492:	bmi.n	851e <_free_r+0x1b6>
    8494:	ldr	r1, [r2, #8]
    8496:	ldr	r2, [r2, #12]
    8498:	str	r2, [r1, #12]
    849a:	add	r3, r0
    849c:	orr.w	r0, r3, #1
    84a0:	str	r1, [r2, #8]
    84a2:	str	r0, [r4, #4]
    84a4:	str	r3, [r4, r3]
    84a6:	b.n	83ee <_free_r+0x86>
    84a8:	cmp	r2, #20
    84aa:	bhi.n	84dc <_free_r+0x174>
    84ac:	add.w	r7, r2, #92	; 0x5c
    84b0:	lsls	r7, r7, #1
    84b2:	add.w	r5, r2, #91	; 0x5b
    84b6:	b.n	840c <_free_r+0xa4>
    84b8:	asrs	r2, r5, #2
    84ba:	ldr	r3, [r1, #4]
    84bc:	movs	r5, #1
    84be:	lsl.w	r2, r5, r2
    84c2:	orrs	r3, r2
    84c4:	str	r3, [r1, #4]
    84c6:	mov	r2, r0
    84c8:	b.n	842e <_free_r+0xc6>
    84ca:	orr.w	r2, r3, #1
    84ce:	str	r4, [r1, #20]
    84d0:	str	r4, [r1, #16]
    84d2:	str	r5, [r4, #12]
    84d4:	str	r5, [r4, #8]
    84d6:	str	r2, [r4, #4]
    84d8:	str	r3, [r4, r3]
    84da:	b.n	83ee <_free_r+0x86>
    84dc:	cmp	r2, #84	; 0x54
    84de:	bhi.n	84ee <_free_r+0x186>
    84e0:	lsrs	r2, r3, #12
    84e2:	add.w	r7, r2, #111	; 0x6f
    84e6:	lsls	r7, r7, #1
    84e8:	add.w	r5, r2, #110	; 0x6e
    84ec:	b.n	840c <_free_r+0xa4>
    84ee:	cmp.w	r2, #340	; 0x154
    84f2:	bhi.n	8502 <_free_r+0x19a>
    84f4:	lsrs	r2, r3, #15
    84f6:	add.w	r7, r2, #120	; 0x78
    84fa:	lsls	r7, r7, #1
    84fc:	add.w	r5, r2, #119	; 0x77
    8500:	b.n	840c <_free_r+0xa4>
    8502:	movw	r0, #1364	; 0x554
    8506:	cmp	r2, r0
    8508:	bhi.n	8518 <_free_r+0x1b0>
    850a:	lsrs	r2, r3, #18
    850c:	add.w	r7, r2, #125	; 0x7d
    8510:	lsls	r7, r7, #1
    8512:	add.w	r5, r2, #124	; 0x7c
    8516:	b.n	840c <_free_r+0xa4>
    8518:	movs	r7, #254	; 0xfe
    851a:	movs	r5, #126	; 0x7e
    851c:	b.n	840c <_free_r+0xa4>
    851e:	orr.w	r2, r3, #1
    8522:	str	r2, [r4, #4]
    8524:	str	r3, [r4, r3]
    8526:	b.n	83ee <_free_r+0x86>
    8528:	.word	0x2000139c
    852c:	.word	0x200013a4
    8530:	.word	0x200017a8
    8534:	.word	0x20001cf0

00008538 <_localeconv_r>:
    8538:	ldr	r2, [pc, #16]	; (854c <_localeconv_r+0x14>)
    853a:	ldr	r3, [pc, #20]	; (8550 <_localeconv_r+0x18>)
    853c:	ldr	r2, [r2, #0]
    853e:	ldr	r0, [r2, #52]	; 0x34
    8540:	cmp	r0, #0
    8542:	it	eq
    8544:	moveq	r0, r3
    8546:	adds	r0, #240	; 0xf0
    8548:	bx	lr
    854a:	nop
    854c:	.word	0x200017ac
    8550:	.word	0x20001230
	...

00008560 <memchr>:
    8560:	and.w	r1, r1, #255	; 0xff
    8564:	cmp	r2, #16
    8566:	blt.n	85c0 <memchr+0x60>
    8568:	tst.w	r0, #7
    856c:	beq.n	8580 <memchr+0x20>
    856e:	ldrb.w	r3, [r0], #1
    8572:	subs	r2, #1
    8574:	cmp	r3, r1
    8576:	beq.n	85d4 <memchr+0x74>
    8578:	tst.w	r0, #7
    857c:	cbz	r2, 85d0 <memchr+0x70>
    857e:	bne.n	856e <memchr+0xe>
    8580:	push	{r4, r5, r6, r7}
    8582:	orr.w	r1, r1, r1, lsl #8
    8586:	orr.w	r1, r1, r1, lsl #16
    858a:	bic.w	r4, r2, #7
    858e:	mvns.w	r7, #0
    8592:	movs	r3, #0
    8594:	ldrd	r5, r6, [r0], #8
    8598:	subs	r4, #8
    859a:	eor.w	r5, r5, r1
    859e:	eor.w	r6, r6, r1
    85a2:	uadd8	r5, r5, r7
    85a6:	sel	r5, r3, r7
    85aa:	uadd8	r6, r6, r7
    85ae:	sel	r6, r5, r7
    85b2:	cbnz	r6, 85d8 <memchr+0x78>
    85b4:	bne.n	8594 <memchr+0x34>
    85b6:	pop	{r4, r5, r6, r7}
    85b8:	and.w	r1, r1, #255	; 0xff
    85bc:	and.w	r2, r2, #7
    85c0:	cbz	r2, 85d0 <memchr+0x70>
    85c2:	ldrb.w	r3, [r0], #1
    85c6:	subs	r2, #1
    85c8:	eor.w	r3, r3, r1
    85cc:	cbz	r3, 85d4 <memchr+0x74>
    85ce:	bne.n	85c2 <memchr+0x62>
    85d0:	movs	r0, #0
    85d2:	bx	lr
    85d4:	subs	r0, #1
    85d6:	bx	lr
    85d8:	cmp	r5, #0
    85da:	itte	eq
    85dc:	moveq	r5, r6
    85de:	subeq	r0, #3
    85e0:	subne	r0, #7
    85e2:	tst.w	r5, #1
    85e6:	bne.n	85f8 <memchr+0x98>
    85e8:	adds	r0, #1
    85ea:	tst.w	r5, #256	; 0x100
    85ee:	ittt	eq
    85f0:	addeq	r0, #1
    85f2:	tsteq.w	r5, #98304	; 0x18000
    85f6:	addeq	r0, #1
    85f8:	pop	{r4, r5, r6, r7}
    85fa:	subs	r0, #1
    85fc:	bx	lr
    85fe:	nop

00008600 <_Balloc>:
    8600:	ldr	r3, [r0, #76]	; 0x4c
    8602:	push	{r4, r5, r6, lr}
    8604:	mov	r5, r0
    8606:	mov	r4, r1
    8608:	cbz	r3, 861e <_Balloc+0x1e>
    860a:	ldr.w	r0, [r3, r4, lsl #2]
    860e:	cbz	r0, 8632 <_Balloc+0x32>
    8610:	ldr	r2, [r0, #0]
    8612:	str.w	r2, [r3, r4, lsl #2]
    8616:	movs	r3, #0
    8618:	str	r3, [r0, #16]
    861a:	str	r3, [r0, #12]
    861c:	pop	{r4, r5, r6, pc}
    861e:	movs	r2, #33	; 0x21
    8620:	movs	r1, #4
    8622:	bl	8d84 <_calloc_r>
    8626:	str	r0, [r5, #76]	; 0x4c
    8628:	mov	r3, r0
    862a:	cmp	r0, #0
    862c:	bne.n	860a <_Balloc+0xa>
    862e:	movs	r0, #0
    8630:	pop	{r4, r5, r6, pc}
    8632:	movs	r1, #1
    8634:	lsl.w	r6, r1, r4
    8638:	adds	r2, r6, #5
    863a:	mov	r0, r5
    863c:	lsls	r2, r2, #2
    863e:	bl	8d84 <_calloc_r>
    8642:	cmp	r0, #0
    8644:	beq.n	862e <_Balloc+0x2e>
    8646:	str	r4, [r0, #4]
    8648:	str	r6, [r0, #8]
    864a:	b.n	8616 <_Balloc+0x16>

0000864c <_Bfree>:
    864c:	cbz	r1, 865c <_Bfree+0x10>
    864e:	ldr	r3, [r0, #76]	; 0x4c
    8650:	ldr	r2, [r1, #4]
    8652:	ldr.w	r0, [r3, r2, lsl #2]
    8656:	str	r0, [r1, #0]
    8658:	str.w	r1, [r3, r2, lsl #2]
    865c:	bx	lr
    865e:	nop

00008660 <__multadd>:
    8660:	push	{r4, r5, r6, r7, lr}
    8662:	ldr	r4, [r1, #16]
    8664:	sub	sp, #12
    8666:	mov	r5, r1
    8668:	mov	r6, r0
    866a:	add.w	lr, r1, #20
    866e:	movs	r7, #0
    8670:	ldr.w	r0, [lr]
    8674:	uxth	r1, r0
    8676:	mla	r1, r2, r1, r3
    867a:	lsrs	r3, r1, #16
    867c:	lsrs	r0, r0, #16
    867e:	mla	r3, r2, r0, r3
    8682:	uxth	r1, r1
    8684:	adds	r7, #1
    8686:	add.w	r1, r1, r3, lsl #16
    868a:	cmp	r4, r7
    868c:	str.w	r1, [lr], #4
    8690:	mov.w	r3, r3, lsr #16
    8694:	bgt.n	8670 <__multadd+0x10>
    8696:	cbz	r3, 86a8 <__multadd+0x48>
    8698:	ldr	r2, [r5, #8]
    869a:	cmp	r4, r2
    869c:	bge.n	86ae <__multadd+0x4e>
    869e:	add.w	r2, r5, r4, lsl #2
    86a2:	adds	r4, #1
    86a4:	str	r3, [r2, #20]
    86a6:	str	r4, [r5, #16]
    86a8:	mov	r0, r5
    86aa:	add	sp, #12
    86ac:	pop	{r4, r5, r6, r7, pc}
    86ae:	ldr	r1, [r5, #4]
    86b0:	str	r3, [sp, #4]
    86b2:	adds	r1, #1
    86b4:	mov	r0, r6
    86b6:	bl	8600 <_Balloc>
    86ba:	ldr	r2, [r5, #16]
    86bc:	adds	r2, #2
    86be:	add.w	r1, r5, #12
    86c2:	mov	r7, r0
    86c4:	lsls	r2, r2, #2
    86c6:	adds	r0, #12
    86c8:	bl	2270 <memcpy>
    86cc:	ldr	r2, [r6, #76]	; 0x4c
    86ce:	ldr	r1, [r5, #4]
    86d0:	ldr	r3, [sp, #4]
    86d2:	ldr.w	r0, [r2, r1, lsl #2]
    86d6:	str	r0, [r5, #0]
    86d8:	str.w	r5, [r2, r1, lsl #2]
    86dc:	mov	r5, r7
    86de:	b.n	869e <__multadd+0x3e>

000086e0 <__hi0bits>:
    86e0:	lsrs	r3, r0, #16
    86e2:	lsls	r3, r3, #16
    86e4:	cbnz	r3, 8714 <__hi0bits+0x34>
    86e6:	lsls	r0, r0, #16
    86e8:	movs	r3, #16
    86ea:	tst.w	r0, #4278190080	; 0xff000000
    86ee:	itt	eq
    86f0:	lsleq	r0, r0, #8
    86f2:	addeq	r3, #8
    86f4:	tst.w	r0, #4026531840	; 0xf0000000
    86f8:	itt	eq
    86fa:	lsleq	r0, r0, #4
    86fc:	addeq	r3, #4
    86fe:	tst.w	r0, #3221225472	; 0xc0000000
    8702:	itt	eq
    8704:	lsleq	r0, r0, #2
    8706:	addeq	r3, #2
    8708:	cmp	r0, #0
    870a:	blt.n	871c <__hi0bits+0x3c>
    870c:	lsls	r2, r0, #1
    870e:	bmi.n	8718 <__hi0bits+0x38>
    8710:	movs	r0, #32
    8712:	bx	lr
    8714:	movs	r3, #0
    8716:	b.n	86ea <__hi0bits+0xa>
    8718:	adds	r0, r3, #1
    871a:	bx	lr
    871c:	mov	r0, r3
    871e:	bx	lr

00008720 <__lo0bits>:
    8720:	ldr	r3, [r0, #0]
    8722:	ands.w	r2, r3, #7
    8726:	beq.n	8738 <__lo0bits+0x18>
    8728:	lsls	r1, r3, #31
    872a:	bmi.n	876e <__lo0bits+0x4e>
    872c:	lsls	r2, r3, #30
    872e:	bmi.n	8772 <__lo0bits+0x52>
    8730:	lsrs	r3, r3, #2
    8732:	str	r3, [r0, #0]
    8734:	movs	r0, #2
    8736:	bx	lr
    8738:	uxth	r1, r3
    873a:	cbnz	r1, 8740 <__lo0bits+0x20>
    873c:	lsrs	r3, r3, #16
    873e:	movs	r2, #16
    8740:	tst.w	r3, #255	; 0xff
    8744:	itt	eq
    8746:	lsreq	r3, r3, #8
    8748:	addeq	r2, #8
    874a:	lsls	r1, r3, #28
    874c:	itt	eq
    874e:	lsreq	r3, r3, #4
    8750:	addeq	r2, #4
    8752:	lsls	r1, r3, #30
    8754:	itt	eq
    8756:	lsreq	r3, r3, #2
    8758:	addeq	r2, #2
    875a:	lsls	r1, r3, #31
    875c:	bmi.n	8768 <__lo0bits+0x48>
    875e:	lsrs	r3, r3, #1
    8760:	bne.n	8766 <__lo0bits+0x46>
    8762:	movs	r0, #32
    8764:	bx	lr
    8766:	adds	r2, #1
    8768:	str	r3, [r0, #0]
    876a:	mov	r0, r2
    876c:	bx	lr
    876e:	movs	r0, #0
    8770:	bx	lr
    8772:	lsrs	r3, r3, #1
    8774:	str	r3, [r0, #0]
    8776:	movs	r0, #1
    8778:	bx	lr
    877a:	nop

0000877c <__i2b>:
    877c:	push	{r4, lr}
    877e:	mov	r4, r1
    8780:	movs	r1, #1
    8782:	bl	8600 <_Balloc>
    8786:	movs	r2, #1
    8788:	str	r4, [r0, #20]
    878a:	str	r2, [r0, #16]
    878c:	pop	{r4, pc}
    878e:	nop

00008790 <__multiply>:
    8790:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8794:	ldr	r5, [r1, #16]
    8796:	ldr	r7, [r2, #16]
    8798:	cmp	r5, r7
    879a:	sub	sp, #12
    879c:	mov	r4, r1
    879e:	mov	r6, r2
    87a0:	bge.n	87ac <__multiply+0x1c>
    87a2:	mov	r2, r5
    87a4:	mov	r4, r6
    87a6:	mov	r5, r7
    87a8:	mov	r6, r1
    87aa:	mov	r7, r2
    87ac:	ldr	r3, [r4, #8]
    87ae:	ldr	r1, [r4, #4]
    87b0:	add.w	r8, r5, r7
    87b4:	cmp	r8, r3
    87b6:	it	gt
    87b8:	addgt	r1, #1
    87ba:	bl	8600 <_Balloc>
    87be:	add.w	ip, r0, #20
    87c2:	add.w	r9, ip, r8, lsl #2
    87c6:	cmp	ip, r9
    87c8:	str	r0, [sp, #0]
    87ca:	bcs.n	87d8 <__multiply+0x48>
    87cc:	mov	r3, ip
    87ce:	movs	r1, #0
    87d0:	str.w	r1, [r3], #4
    87d4:	cmp	r9, r3
    87d6:	bhi.n	87d0 <__multiply+0x40>
    87d8:	add.w	r2, r6, #20
    87dc:	add.w	sl, r2, r7, lsl #2
    87e0:	add.w	r3, r4, #20
    87e4:	cmp	r2, sl
    87e6:	add.w	lr, r3, r5, lsl #2
    87ea:	bcs.n	8896 <__multiply+0x106>
    87ec:	str.w	r9, [sp, #4]
    87f0:	mov	r9, r3
    87f2:	ldr.w	r3, [r2], #4
    87f6:	uxth.w	fp, r3
    87fa:	cmp.w	fp, #0
    87fe:	beq.n	8842 <__multiply+0xb2>
    8800:	movs	r0, #0
    8802:	mov	r7, r9
    8804:	mov	r6, ip
    8806:	mov	r5, r0
    8808:	b.n	880c <__multiply+0x7c>
    880a:	mov	r6, r3
    880c:	ldr.w	r4, [r7], #4
    8810:	ldr	r0, [r6, #0]
    8812:	uxth	r1, r4
    8814:	uxth	r3, r0
    8816:	mla	r1, fp, r1, r3
    881a:	lsrs	r4, r4, #16
    881c:	lsrs	r0, r0, #16
    881e:	adds	r3, r1, r5
    8820:	mla	r0, fp, r4, r0
    8824:	add.w	r0, r0, r3, lsr #16
    8828:	uxth	r1, r3
    882a:	mov	r3, r6
    882c:	orr.w	r1, r1, r0, lsl #16
    8830:	cmp	lr, r7
    8832:	mov.w	r5, r0, lsr #16
    8836:	str.w	r1, [r3], #4
    883a:	bhi.n	880a <__multiply+0x7a>
    883c:	str	r5, [r6, #4]
    883e:	ldr.w	r3, [r2, #-4]
    8842:	movs.w	fp, r3, lsr #16
    8846:	beq.n	888a <__multiply+0xfa>
    8848:	ldr.w	r3, [ip]
    884c:	mov	r7, ip
    884e:	mov	r0, r3
    8850:	mov	r5, r9
    8852:	movs	r1, #0
    8854:	b.n	8858 <__multiply+0xc8>
    8856:	mov	r7, r6
    8858:	ldrh	r4, [r5, #0]
    885a:	lsrs	r0, r0, #16
    885c:	mla	r0, fp, r4, r0
    8860:	add	r1, r0
    8862:	uxth	r4, r3
    8864:	mov	r6, r7
    8866:	orr.w	r3, r4, r1, lsl #16
    886a:	str.w	r3, [r6], #4
    886e:	ldr	r0, [r7, #4]
    8870:	ldr.w	r4, [r5], #4
    8874:	uxth	r3, r0
    8876:	lsrs	r4, r4, #16
    8878:	mla	r4, fp, r4, r3
    887c:	add.w	r3, r4, r1, lsr #16
    8880:	cmp	lr, r5
    8882:	mov.w	r1, r3, lsr #16
    8886:	bhi.n	8856 <__multiply+0xc6>
    8888:	str	r3, [r7, #4]
    888a:	cmp	sl, r2
    888c:	add.w	ip, ip, #4
    8890:	bhi.n	87f2 <__multiply+0x62>
    8892:	ldr.w	r9, [sp, #4]
    8896:	cmp.w	r8, #0
    889a:	ble.n	88b4 <__multiply+0x124>
    889c:	ldr.w	r3, [r9, #-4]
    88a0:	sub.w	r9, r9, #4
    88a4:	cbz	r3, 88ae <__multiply+0x11e>
    88a6:	b.n	88b4 <__multiply+0x124>
    88a8:	ldr.w	r3, [r9, #-4]!
    88ac:	cbnz	r3, 88b4 <__multiply+0x124>
    88ae:	subs.w	r8, r8, #1
    88b2:	bne.n	88a8 <__multiply+0x118>
    88b4:	ldr	r0, [sp, #0]
    88b6:	str.w	r8, [r0, #16]
    88ba:	add	sp, #12
    88bc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000088c0 <__pow5mult>:
    88c0:	ands.w	r3, r2, #3
    88c4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    88c8:	mov	r4, r2
    88ca:	mov	r7, r0
    88cc:	bne.n	892c <__pow5mult+0x6c>
    88ce:	mov	r6, r1
    88d0:	asrs	r4, r4, #2
    88d2:	beq.n	890e <__pow5mult+0x4e>
    88d4:	ldr	r5, [r7, #72]	; 0x48
    88d6:	cbz	r5, 893e <__pow5mult+0x7e>
    88d8:	lsls	r3, r4, #31
    88da:	mov.w	r8, #0
    88de:	bmi.n	88ee <__pow5mult+0x2e>
    88e0:	asrs	r4, r4, #1
    88e2:	beq.n	890e <__pow5mult+0x4e>
    88e4:	ldr	r0, [r5, #0]
    88e6:	cbz	r0, 8914 <__pow5mult+0x54>
    88e8:	mov	r5, r0
    88ea:	lsls	r3, r4, #31
    88ec:	bpl.n	88e0 <__pow5mult+0x20>
    88ee:	mov	r2, r5
    88f0:	mov	r1, r6
    88f2:	mov	r0, r7
    88f4:	bl	8790 <__multiply>
    88f8:	cbz	r6, 8928 <__pow5mult+0x68>
    88fa:	ldr	r2, [r6, #4]
    88fc:	ldr	r3, [r7, #76]	; 0x4c
    88fe:	asrs	r4, r4, #1
    8900:	ldr.w	r1, [r3, r2, lsl #2]
    8904:	str	r1, [r6, #0]
    8906:	str.w	r6, [r3, r2, lsl #2]
    890a:	mov	r6, r0
    890c:	bne.n	88e4 <__pow5mult+0x24>
    890e:	mov	r0, r6
    8910:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8914:	mov	r2, r5
    8916:	mov	r1, r5
    8918:	mov	r0, r7
    891a:	bl	8790 <__multiply>
    891e:	str	r0, [r5, #0]
    8920:	str.w	r8, [r0]
    8924:	mov	r5, r0
    8926:	b.n	88ea <__pow5mult+0x2a>
    8928:	mov	r6, r0
    892a:	b.n	88e0 <__pow5mult+0x20>
    892c:	subs	r2, r3, #1
    892e:	ldr	r5, [pc, #44]	; (895c <__pow5mult+0x9c>)
    8930:	movs	r3, #0
    8932:	ldr.w	r2, [r5, r2, lsl #2]
    8936:	bl	8660 <__multadd>
    893a:	mov	r6, r0
    893c:	b.n	88d0 <__pow5mult+0x10>
    893e:	movs	r1, #1
    8940:	mov	r0, r7
    8942:	bl	8600 <_Balloc>
    8946:	movw	r1, #625	; 0x271
    894a:	movs	r2, #1
    894c:	movs	r3, #0
    894e:	str	r1, [r0, #20]
    8950:	str	r2, [r0, #16]
    8952:	mov	r5, r0
    8954:	str	r0, [r7, #72]	; 0x48
    8956:	str	r3, [r0, #0]
    8958:	b.n	88d8 <__pow5mult+0x18>
    895a:	nop
    895c:	.word	0x20000a3c

00008960 <__lshift>:
    8960:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8964:	mov	r9, r2
    8966:	ldr	r2, [r1, #16]
    8968:	ldr	r3, [r1, #8]
    896a:	mov.w	r4, r9, asr #5
    896e:	add.w	r8, r4, r2
    8972:	add.w	r5, r8, #1
    8976:	cmp	r5, r3
    8978:	mov	r6, r1
    897a:	mov	sl, r0
    897c:	ldr	r1, [r1, #4]
    897e:	ble.n	898a <__lshift+0x2a>
    8980:	lsls	r3, r3, #1
    8982:	cmp	r5, r3
    8984:	add.w	r1, r1, #1
    8988:	bgt.n	8980 <__lshift+0x20>
    898a:	mov	r0, sl
    898c:	bl	8600 <_Balloc>
    8990:	cmp	r4, #0
    8992:	add.w	r2, r0, #20
    8996:	ble.n	8a0a <__lshift+0xaa>
    8998:	add.w	r3, r2, r4, lsl #2
    899c:	movs	r1, #0
    899e:	str.w	r1, [r2], #4
    89a2:	cmp	r3, r2
    89a4:	bne.n	899e <__lshift+0x3e>
    89a6:	ldr	r4, [r6, #16]
    89a8:	add.w	r1, r6, #20
    89ac:	ands.w	r9, r9, #31
    89b0:	add.w	lr, r1, r4, lsl #2
    89b4:	beq.n	89fa <__lshift+0x9a>
    89b6:	rsb	r2, r9, #32
    89ba:	movs	r4, #0
    89bc:	ldr	r7, [r1, #0]
    89be:	lsl.w	ip, r7, r9
    89c2:	orr.w	r4, ip, r4
    89c6:	mov	ip, r3
    89c8:	str.w	r4, [r3], #4
    89cc:	ldr.w	r4, [r1], #4
    89d0:	cmp	lr, r1
    89d2:	lsr.w	r4, r4, r2
    89d6:	bhi.n	89bc <__lshift+0x5c>
    89d8:	str.w	r4, [ip, #4]
    89dc:	cbz	r4, 89e2 <__lshift+0x82>
    89de:	add.w	r5, r8, #2
    89e2:	ldr.w	r3, [sl, #76]	; 0x4c
    89e6:	ldr	r2, [r6, #4]
    89e8:	subs	r5, #1
    89ea:	ldr.w	r1, [r3, r2, lsl #2]
    89ee:	str	r5, [r0, #16]
    89f0:	str	r1, [r6, #0]
    89f2:	str.w	r6, [r3, r2, lsl #2]
    89f6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    89fa:	subs	r3, #4
    89fc:	ldr.w	r2, [r1], #4
    8a00:	str.w	r2, [r3, #4]!
    8a04:	cmp	lr, r1
    8a06:	bhi.n	89fc <__lshift+0x9c>
    8a08:	b.n	89e2 <__lshift+0x82>
    8a0a:	mov	r3, r2
    8a0c:	b.n	89a6 <__lshift+0x46>
    8a0e:	nop

00008a10 <__mcmp>:
    8a10:	ldr	r2, [r0, #16]
    8a12:	ldr	r3, [r1, #16]
    8a14:	subs	r2, r2, r3
    8a16:	bne.n	8a40 <__mcmp+0x30>
    8a18:	lsls	r3, r3, #2
    8a1a:	adds	r0, #20
    8a1c:	adds	r1, #20
    8a1e:	add	r1, r3
    8a20:	push	{r4}
    8a22:	add	r3, r0
    8a24:	b.n	8a2a <__mcmp+0x1a>
    8a26:	cmp	r0, r3
    8a28:	bcs.n	8a44 <__mcmp+0x34>
    8a2a:	ldr.w	r4, [r3, #-4]!
    8a2e:	ldr.w	r2, [r1, #-4]!
    8a32:	cmp	r4, r2
    8a34:	beq.n	8a26 <__mcmp+0x16>
    8a36:	bcc.n	8a4c <__mcmp+0x3c>
    8a38:	movs	r0, #1
    8a3a:	ldr.w	r4, [sp], #4
    8a3e:	bx	lr
    8a40:	mov	r0, r2
    8a42:	bx	lr
    8a44:	movs	r0, #0
    8a46:	ldr.w	r4, [sp], #4
    8a4a:	bx	lr
    8a4c:	mov.w	r0, #4294967295
    8a50:	b.n	8a3a <__mcmp+0x2a>
    8a52:	nop

00008a54 <__mdiff>:
    8a54:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8a58:	ldr	r3, [r1, #16]
    8a5a:	mov	r7, r1
    8a5c:	ldr	r1, [r2, #16]
    8a5e:	subs	r3, r3, r1
    8a60:	cmp	r3, #0
    8a62:	mov	r8, r2
    8a64:	bne.n	8a96 <__mdiff+0x42>
    8a66:	lsls	r1, r1, #2
    8a68:	add.w	r2, r7, #20
    8a6c:	add.w	r5, r8, #20
    8a70:	adds	r3, r2, r1
    8a72:	add	r1, r5
    8a74:	b.n	8a7a <__mdiff+0x26>
    8a76:	cmp	r2, r3
    8a78:	bcs.n	8b38 <__mdiff+0xe4>
    8a7a:	ldr.w	r6, [r3, #-4]!
    8a7e:	ldr.w	r4, [r1, #-4]!
    8a82:	cmp	r6, r4
    8a84:	beq.n	8a76 <__mdiff+0x22>
    8a86:	bcs.n	8b4a <__mdiff+0xf6>
    8a88:	mov	r3, r7
    8a8a:	mov	r4, r2
    8a8c:	mov	r7, r8
    8a8e:	mov.w	r9, #1
    8a92:	mov	r8, r3
    8a94:	b.n	8aa4 <__mdiff+0x50>
    8a96:	blt.n	8b54 <__mdiff+0x100>
    8a98:	add.w	r5, r7, #20
    8a9c:	add.w	r4, r2, #20
    8aa0:	mov.w	r9, #0
    8aa4:	ldr	r1, [r7, #4]
    8aa6:	bl	8600 <_Balloc>
    8aaa:	ldr.w	r3, [r8, #16]
    8aae:	ldr	r6, [r7, #16]
    8ab0:	str.w	r9, [r0, #12]
    8ab4:	add.w	ip, r4, r3, lsl #2
    8ab8:	mov	lr, r4
    8aba:	add.w	r7, r5, r6, lsl #2
    8abe:	add.w	r4, r0, #20
    8ac2:	movs	r3, #0
    8ac4:	ldr.w	r1, [lr], #4
    8ac8:	ldr.w	r8, [r5], #4
    8acc:	uxth	r2, r1
    8ace:	uxtah	r3, r3, r8
    8ad2:	lsrs	r1, r1, #16
    8ad4:	subs	r2, r3, r2
    8ad6:	rsb	r3, r1, r8, lsr #16
    8ada:	add.w	r3, r3, r2, asr #16
    8ade:	uxth	r2, r2
    8ae0:	orr.w	r2, r2, r3, lsl #16
    8ae4:	cmp	ip, lr
    8ae6:	str.w	r2, [r4], #4
    8aea:	mov.w	r3, r3, asr #16
    8aee:	bhi.n	8ac4 <__mdiff+0x70>
    8af0:	cmp	r7, r5
    8af2:	bls.n	8b24 <__mdiff+0xd0>
    8af4:	mov	ip, r4
    8af6:	mov	r1, r5
    8af8:	ldr.w	lr, [r1], #4
    8afc:	uxtah	r2, r3, lr
    8b00:	asrs	r3, r2, #16
    8b02:	add.w	r3, r3, lr, lsr #16
    8b06:	uxth	r2, r2
    8b08:	orr.w	r2, r2, r3, lsl #16
    8b0c:	cmp	r7, r1
    8b0e:	str.w	r2, [ip], #4
    8b12:	mov.w	r3, r3, asr #16
    8b16:	bhi.n	8af8 <__mdiff+0xa4>
    8b18:	mvns	r5, r5
    8b1a:	add	r5, r7
    8b1c:	bic.w	r5, r5, #3
    8b20:	adds	r5, #4
    8b22:	add	r4, r5
    8b24:	subs	r4, #4
    8b26:	cbnz	r2, 8b32 <__mdiff+0xde>
    8b28:	ldr.w	r3, [r4, #-4]!
    8b2c:	subs	r6, #1
    8b2e:	cmp	r3, #0
    8b30:	beq.n	8b28 <__mdiff+0xd4>
    8b32:	str	r6, [r0, #16]
    8b34:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8b38:	movs	r1, #0
    8b3a:	bl	8600 <_Balloc>
    8b3e:	movs	r2, #1
    8b40:	movs	r3, #0
    8b42:	str	r2, [r0, #16]
    8b44:	str	r3, [r0, #20]
    8b46:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8b4a:	mov	r4, r5
    8b4c:	mov.w	r9, #0
    8b50:	mov	r5, r2
    8b52:	b.n	8aa4 <__mdiff+0x50>
    8b54:	mov	r3, r7
    8b56:	add.w	r4, r7, #20
    8b5a:	add.w	r5, r8, #20
    8b5e:	mov	r7, r8
    8b60:	mov.w	r9, #1
    8b64:	mov	r8, r3
    8b66:	b.n	8aa4 <__mdiff+0x50>

00008b68 <__d2b>:
    8b68:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8b6c:	vmov	r6, r7, d0
    8b70:	sub	sp, #12
    8b72:	mov	r8, r1
    8b74:	movs	r1, #1
    8b76:	mov	r4, r7
    8b78:	ubfx	r5, r7, #20, #11
    8b7c:	mov	r7, r2
    8b7e:	bl	8600 <_Balloc>
    8b82:	ubfx	r4, r4, #0, #20
    8b86:	mov	r9, r0
    8b88:	cbz	r5, 8b8e <__d2b+0x26>
    8b8a:	orr.w	r4, r4, #1048576	; 0x100000
    8b8e:	str	r4, [sp, #4]
    8b90:	cbz	r6, 8bda <__d2b+0x72>
    8b92:	add	r0, sp, #8
    8b94:	str.w	r6, [r0, #-8]!
    8b98:	bl	8720 <__lo0bits>
    8b9c:	cmp	r0, #0
    8b9e:	bne.n	8c0a <__d2b+0xa2>
    8ba0:	ldmia.w	sp, {r2, r3}
    8ba4:	str.w	r2, [r9, #20]
    8ba8:	cmp	r3, #0
    8baa:	ite	eq
    8bac:	moveq	r1, #1
    8bae:	movne	r1, #2
    8bb0:	str.w	r3, [r9, #24]
    8bb4:	str.w	r1, [r9, #16]
    8bb8:	cbnz	r5, 8bf2 <__d2b+0x8a>
    8bba:	add.w	r3, r9, r1, lsl #2
    8bbe:	subw	r0, r0, #1074	; 0x432
    8bc2:	str.w	r0, [r8]
    8bc6:	ldr	r0, [r3, #16]
    8bc8:	bl	86e0 <__hi0bits>
    8bcc:	rsb	r0, r0, r1, lsl #5
    8bd0:	str	r0, [r7, #0]
    8bd2:	mov	r0, r9
    8bd4:	add	sp, #12
    8bd6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    8bda:	add	r0, sp, #4
    8bdc:	bl	8720 <__lo0bits>
    8be0:	ldr	r3, [sp, #4]
    8be2:	str.w	r3, [r9, #20]
    8be6:	movs	r1, #1
    8be8:	adds	r0, #32
    8bea:	str.w	r1, [r9, #16]
    8bee:	cmp	r5, #0
    8bf0:	beq.n	8bba <__d2b+0x52>
    8bf2:	subw	r5, r5, #1075	; 0x433
    8bf6:	add	r5, r0
    8bf8:	rsb	r0, r0, #53	; 0x35
    8bfc:	str.w	r5, [r8]
    8c00:	str	r0, [r7, #0]
    8c02:	mov	r0, r9
    8c04:	add	sp, #12
    8c06:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    8c0a:	ldmia.w	sp, {r2, r3}
    8c0e:	rsb	r1, r0, #32
    8c12:	lsl.w	r1, r3, r1
    8c16:	orrs	r2, r1
    8c18:	lsrs	r3, r0
    8c1a:	str	r3, [sp, #4]
    8c1c:	str.w	r2, [r9, #20]
    8c20:	b.n	8ba8 <__d2b+0x40>
    8c22:	nop

00008c24 <__ssprint_r>:
    8c24:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8c28:	ldr	r3, [r2, #8]
    8c2a:	sub	sp, #12
    8c2c:	mov	r8, r2
    8c2e:	cmp	r3, #0
    8c30:	beq.n	8d18 <__ssprint_r+0xf4>
    8c32:	mov	fp, r0
    8c34:	mov.w	r9, #0
    8c38:	ldr	r6, [r2, #0]
    8c3a:	ldr	r0, [r1, #0]
    8c3c:	ldr	r3, [r1, #8]
    8c3e:	mov	r5, r1
    8c40:	mov	r4, r9
    8c42:	cmp	r4, #0
    8c44:	beq.n	8cd2 <__ssprint_r+0xae>
    8c46:	cmp	r4, r3
    8c48:	mov	r7, r3
    8c4a:	mov	sl, r3
    8c4c:	bcc.n	8cdc <__ssprint_r+0xb8>
    8c4e:	ldrh	r3, [r5, #12]
    8c50:	tst.w	r3, #1152	; 0x480
    8c54:	beq.n	8cb2 <__ssprint_r+0x8e>
    8c56:	ldr	r7, [r5, #20]
    8c58:	ldr	r1, [r5, #16]
    8c5a:	add.w	r7, r7, r7, lsl #1
    8c5e:	rsb	sl, r1, r0
    8c62:	add.w	r7, r7, r7, lsr #31
    8c66:	adds	r0, r4, #1
    8c68:	asrs	r7, r7, #1
    8c6a:	add	r0, sl
    8c6c:	cmp	r0, r7
    8c6e:	mov	r2, r7
    8c70:	itt	hi
    8c72:	movhi	r7, r0
    8c74:	movhi	r2, r7
    8c76:	lsls	r3, r3, #21
    8c78:	bpl.n	8ce2 <__ssprint_r+0xbe>
    8c7a:	mov	r1, r2
    8c7c:	mov	r0, fp
    8c7e:	bl	4e90 <_malloc_r>
    8c82:	cmp	r0, #0
    8c84:	beq.n	8cf6 <__ssprint_r+0xd2>
    8c86:	mov	r2, sl
    8c88:	ldr	r1, [r5, #16]
    8c8a:	str	r0, [sp, #4]
    8c8c:	bl	2270 <memcpy>
    8c90:	ldrh	r2, [r5, #12]
    8c92:	ldr	r3, [sp, #4]
    8c94:	bic.w	r2, r2, #1152	; 0x480
    8c98:	orr.w	r2, r2, #128	; 0x80
    8c9c:	strh	r2, [r5, #12]
    8c9e:	rsb	r2, sl, r7
    8ca2:	add.w	r0, r3, sl
    8ca6:	str	r7, [r5, #20]
    8ca8:	str	r3, [r5, #16]
    8caa:	str	r0, [r5, #0]
    8cac:	str	r2, [r5, #8]
    8cae:	mov	r7, r4
    8cb0:	mov	sl, r4
    8cb2:	mov	r2, sl
    8cb4:	mov	r1, r9
    8cb6:	bl	542c <memmove>
    8cba:	ldr.w	r2, [r8, #8]
    8cbe:	ldr	r3, [r5, #8]
    8cc0:	ldr	r0, [r5, #0]
    8cc2:	subs	r3, r3, r7
    8cc4:	add	r0, sl
    8cc6:	subs	r4, r2, r4
    8cc8:	str	r3, [r5, #8]
    8cca:	str	r0, [r5, #0]
    8ccc:	str.w	r4, [r8, #8]
    8cd0:	cbz	r4, 8d18 <__ssprint_r+0xf4>
    8cd2:	ldr.w	r9, [r6]
    8cd6:	ldr	r4, [r6, #4]
    8cd8:	adds	r6, #8
    8cda:	b.n	8c42 <__ssprint_r+0x1e>
    8cdc:	mov	r7, r4
    8cde:	mov	sl, r4
    8ce0:	b.n	8cb2 <__ssprint_r+0x8e>
    8ce2:	mov	r0, fp
    8ce4:	bl	5598 <_realloc_r>
    8ce8:	mov	r3, r0
    8cea:	cmp	r0, #0
    8cec:	bne.n	8c9e <__ssprint_r+0x7a>
    8cee:	ldr	r1, [r5, #16]
    8cf0:	mov	r0, fp
    8cf2:	bl	8368 <_free_r>
    8cf6:	movs	r3, #12
    8cf8:	str.w	r3, [fp]
    8cfc:	ldrh	r3, [r5, #12]
    8cfe:	movs	r2, #0
    8d00:	orr.w	r3, r3, #64	; 0x40
    8d04:	mov.w	r0, #4294967295
    8d08:	strh	r3, [r5, #12]
    8d0a:	str.w	r2, [r8, #8]
    8d0e:	str.w	r2, [r8, #4]
    8d12:	add	sp, #12
    8d14:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8d18:	movs	r0, #0
    8d1a:	str.w	r0, [r8, #4]
    8d1e:	add	sp, #12
    8d20:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00008d24 <_vasnprintf_r>:
    8d24:	push	{r4, r5, r6, lr}
    8d26:	mov	r5, r2
    8d28:	sub	sp, #104	; 0x68
    8d2a:	ldr	r4, [r2, #0]
    8d2c:	cbz	r1, 8d32 <_vasnprintf_r+0xe>
    8d2e:	cmp	r4, #0
    8d30:	bne.n	8d68 <_vasnprintf_r+0x44>
    8d32:	movs	r4, #0
    8d34:	mov.w	r2, #648	; 0x288
    8d38:	strh.w	r2, [sp, #12]
    8d3c:	str	r4, [sp, #0]
    8d3e:	str	r4, [sp, #16]
    8d40:	mov	r2, r3
    8d42:	movw	r6, #65535	; 0xffff
    8d46:	ldr	r3, [sp, #120]	; 0x78
    8d48:	str	r4, [sp, #8]
    8d4a:	mov	r1, sp
    8d4c:	str	r4, [sp, #20]
    8d4e:	strh.w	r6, [sp, #14]
    8d52:	bl	5be0 <_svfprintf_r>
    8d56:	cmp	r0, #0
    8d58:	blt.n	8d7e <_vasnprintf_r+0x5a>
    8d5a:	ldr	r3, [sp, #0]
    8d5c:	str	r0, [r5, #0]
    8d5e:	movs	r2, #0
    8d60:	strb	r2, [r3, #0]
    8d62:	ldr	r0, [sp, #16]
    8d64:	add	sp, #104	; 0x68
    8d66:	pop	{r4, r5, r6, pc}
    8d68:	mov.w	r2, #1544	; 0x608
    8d6c:	str	r1, [sp, #0]
    8d6e:	str	r1, [sp, #16]
    8d70:	strh.w	r2, [sp, #12]
    8d74:	bge.n	8d40 <_vasnprintf_r+0x1c>
    8d76:	movs	r3, #139	; 0x8b
    8d78:	str	r3, [r0, #0]
    8d7a:	movs	r0, #0
    8d7c:	b.n	8d64 <_vasnprintf_r+0x40>
    8d7e:	movs	r0, #0
    8d80:	b.n	8d64 <_vasnprintf_r+0x40>
    8d82:	nop

00008d84 <_calloc_r>:
    8d84:	push	{r4, lr}
    8d86:	mul.w	r1, r2, r1
    8d8a:	bl	4e90 <_malloc_r>
    8d8e:	mov	r4, r0
    8d90:	cbz	r0, 8dca <_calloc_r+0x46>
    8d92:	ldr.w	r2, [r0, #-4]
    8d96:	bic.w	r2, r2, #3
    8d9a:	subs	r2, #4
    8d9c:	cmp	r2, #36	; 0x24
    8d9e:	bhi.n	8dd2 <_calloc_r+0x4e>
    8da0:	cmp	r2, #19
    8da2:	bls.n	8dce <_calloc_r+0x4a>
    8da4:	movs	r3, #0
    8da6:	cmp	r2, #27
    8da8:	str	r3, [r0, #0]
    8daa:	str	r3, [r0, #4]
    8dac:	bls.n	8ddc <_calloc_r+0x58>
    8dae:	cmp	r2, #36	; 0x24
    8db0:	str	r3, [r0, #8]
    8db2:	str	r3, [r0, #12]
    8db4:	iteee	ne
    8db6:	addne.w	r2, r0, #16
    8dba:	streq	r3, [r0, #16]
    8dbc:	streq	r3, [r0, #20]
    8dbe:	addeq.w	r2, r0, #24
    8dc2:	movs	r3, #0
    8dc4:	str	r3, [r2, #0]
    8dc6:	str	r3, [r2, #4]
    8dc8:	str	r3, [r2, #8]
    8dca:	mov	r0, r4
    8dcc:	pop	{r4, pc}
    8dce:	mov	r2, r0
    8dd0:	b.n	8dc2 <_calloc_r+0x3e>
    8dd2:	movs	r1, #0
    8dd4:	bl	54f4 <memset>
    8dd8:	mov	r0, r4
    8dda:	pop	{r4, pc}
    8ddc:	add.w	r2, r0, #8
    8de0:	b.n	8dc2 <_calloc_r+0x3e>
    8de2:	nop

00008de4 <__aeabi_d2iz>:
    8de4:	mov.w	r2, r1, lsl #1
    8de8:	adds.w	r2, r2, #2097152	; 0x200000
    8dec:	bcs.n	8e1a <__aeabi_d2iz+0x36>
    8dee:	bpl.n	8e14 <__aeabi_d2iz+0x30>
    8df0:	mvn.w	r3, #992	; 0x3e0
    8df4:	subs.w	r2, r3, r2, asr #21
    8df8:	bls.n	8e20 <__aeabi_d2iz+0x3c>
    8dfa:	mov.w	r3, r1, lsl #11
    8dfe:	orr.w	r3, r3, #2147483648	; 0x80000000
    8e02:	orr.w	r3, r3, r0, lsr #21
    8e06:	tst.w	r1, #2147483648	; 0x80000000
    8e0a:	lsr.w	r0, r3, r2
    8e0e:	it	ne
    8e10:	negne	r0, r0
    8e12:	bx	lr
    8e14:	mov.w	r0, #0
    8e18:	bx	lr
    8e1a:	orrs.w	r0, r0, r1, lsl #12
    8e1e:	bne.n	8e2c <__aeabi_d2iz+0x48>
    8e20:	ands.w	r0, r1, #2147483648	; 0x80000000
    8e24:	it	eq
    8e26:	mvneq.w	r0, #2147483648	; 0x80000000
    8e2a:	bx	lr
    8e2c:	mov.w	r0, #0
    8e30:	bx	lr
    8e32:	nop
    8e34:	movs	r0, r0
	...

00008e38 <___init_veneer>:
    8e38:	ldr.w	pc, [pc]	; 8e3c <___init_veneer+0x4>
    8e3c:	.word	0x60001e19

00008e40 <___reboot_Teensyduino__veneer>:
    8e40:	ldr.w	pc, [pc]	; 8e44 <___reboot_Teensyduino__veneer+0x4>
    8e44:	.word	0x60001741
	...

Disassembly of section .fini:

00008e50 <_fini>:
    8e50:	push	{r3, r4, r5, r6, r7, lr}
    8e52:	nop

Disassembly of section .text.csf:

6000c864 <_heap_end+0x3fd8c864>:
6000c864:	.word	0xffffffff
6000c868:	.word	0xffffffff
6000c86c:	.word	0xffffffff
6000c870:	.word	0xffffffff
6000c874:	.word	0xffffffff
6000c878:	.word	0xffffffff
6000c87c:	.word	0xffffffff
6000c880:	.word	0xffffffff
6000c884:	.word	0xffffffff
6000c888:	.word	0xffffffff
6000c88c:	.word	0xffffffff
6000c890:	.word	0xffffffff
6000c894:	.word	0xffffffff
6000c898:	.word	0xffffffff
6000c89c:	.word	0xffffffff
6000c8a0:	.word	0xffffffff
6000c8a4:	.word	0xffffffff
6000c8a8:	.word	0xffffffff
6000c8ac:	.word	0xffffffff
6000c8b0:	.word	0xffffffff
6000c8b4:	.word	0xffffffff
6000c8b8:	.word	0xffffffff
6000c8bc:	.word	0xffffffff
6000c8c0:	.word	0xffffffff
6000c8c4:	.word	0xffffffff
6000c8c8:	.word	0xffffffff
6000c8cc:	.word	0xffffffff
6000c8d0:	.word	0xffffffff
6000c8d4:	.word	0xffffffff
6000c8d8:	.word	0xffffffff
6000c8dc:	.word	0xffffffff
6000c8e0:	.word	0xffffffff
6000c8e4:	.word	0xffffffff
6000c8e8:	.word	0xffffffff
6000c8ec:	.word	0xffffffff
6000c8f0:	.word	0xffffffff
6000c8f4:	.word	0xffffffff
6000c8f8:	.word	0xffffffff
6000c8fc:	.word	0xffffffff
6000c900:	.word	0xffffffff
6000c904:	.word	0xffffffff
6000c908:	.word	0xffffffff
6000c90c:	.word	0xffffffff
6000c910:	.word	0xffffffff
6000c914:	.word	0xffffffff
6000c918:	.word	0xffffffff
6000c91c:	.word	0xffffffff
6000c920:	.word	0xffffffff
6000c924:	.word	0xffffffff
6000c928:	.word	0xffffffff
6000c92c:	.word	0xffffffff
6000c930:	.word	0xffffffff
6000c934:	.word	0xffffffff
6000c938:	.word	0xffffffff
6000c93c:	.word	0xffffffff
6000c940:	.word	0xffffffff
6000c944:	.word	0xffffffff
6000c948:	.word	0xffffffff
6000c94c:	.word	0xffffffff
6000c950:	.word	0xffffffff
6000c954:	.word	0xffffffff
6000c958:	.word	0xffffffff
6000c95c:	.word	0xffffffff
6000c960:	.word	0xffffffff
6000c964:	.word	0xffffffff
6000c968:	.word	0xffffffff
6000c96c:	.word	0xffffffff
6000c970:	.word	0xffffffff
6000c974:	.word	0xffffffff
6000c978:	.word	0xffffffff
6000c97c:	.word	0xffffffff
6000c980:	.word	0xffffffff
6000c984:	.word	0xffffffff
6000c988:	.word	0xffffffff
6000c98c:	.word	0xffffffff
6000c990:	.word	0xffffffff
6000c994:	.word	0xffffffff
6000c998:	.word	0xffffffff
6000c99c:	.word	0xffffffff
6000c9a0:	.word	0xffffffff
6000c9a4:	.word	0xffffffff
6000c9a8:	.word	0xffffffff
6000c9ac:	.word	0xffffffff
6000c9b0:	.word	0xffffffff
6000c9b4:	.word	0xffffffff
6000c9b8:	.word	0xffffffff
6000c9bc:	.word	0xffffffff
6000c9c0:	.word	0xffffffff
6000c9c4:	.word	0xffffffff
6000c9c8:	.word	0xffffffff
6000c9cc:	.word	0xffffffff
6000c9d0:	.word	0xffffffff
6000c9d4:	.word	0xffffffff
6000c9d8:	.word	0xffffffff
6000c9dc:	.word	0xffffffff
6000c9e0:	.word	0xffffffff
6000c9e4:	.word	0xffffffff
6000c9e8:	.word	0xffffffff
6000c9ec:	.word	0xffffffff
6000c9f0:	.word	0xffffffff
6000c9f4:	.word	0xffffffff
6000c9f8:	.word	0xffffffff
6000c9fc:	.word	0xffffffff
6000ca00:	.word	0xffffffff
6000ca04:	.word	0xffffffff
6000ca08:	.word	0xffffffff
6000ca0c:	.word	0xffffffff
6000ca10:	.word	0xffffffff
6000ca14:	.word	0xffffffff
6000ca18:	.word	0xffffffff
6000ca1c:	.word	0xffffffff
6000ca20:	.word	0xffffffff
6000ca24:	.word	0xffffffff
6000ca28:	.word	0xffffffff
6000ca2c:	.word	0xffffffff
6000ca30:	.word	0xffffffff
6000ca34:	.word	0xffffffff
6000ca38:	.word	0xffffffff
6000ca3c:	.word	0xffffffff
6000ca40:	.word	0xffffffff
6000ca44:	.word	0xffffffff
6000ca48:	.word	0xffffffff
6000ca4c:	.word	0xffffffff
6000ca50:	.word	0xffffffff
6000ca54:	.word	0xffffffff
6000ca58:	.word	0xffffffff
6000ca5c:	.word	0xffffffff
6000ca60:	.word	0xffffffff
6000ca64:	.word	0xffffffff
6000ca68:	.word	0xffffffff
6000ca6c:	.word	0xffffffff
6000ca70:	.word	0xffffffff
6000ca74:	.word	0xffffffff
6000ca78:	.word	0xffffffff
6000ca7c:	.word	0xffffffff
6000ca80:	.word	0xffffffff
6000ca84:	.word	0xffffffff
6000ca88:	.word	0xffffffff
6000ca8c:	.word	0xffffffff
6000ca90:	.word	0xffffffff
6000ca94:	.word	0xffffffff
6000ca98:	.word	0xffffffff
6000ca9c:	.word	0xffffffff
6000caa0:	.word	0xffffffff
6000caa4:	.word	0xffffffff
6000caa8:	.word	0xffffffff
6000caac:	.word	0xffffffff
6000cab0:	.word	0xffffffff
6000cab4:	.word	0xffffffff
6000cab8:	.word	0xffffffff
6000cabc:	.word	0xffffffff
6000cac0:	.word	0xffffffff
6000cac4:	.word	0xffffffff
6000cac8:	.word	0xffffffff
6000cacc:	.word	0xffffffff
6000cad0:	.word	0xffffffff
6000cad4:	.word	0xffffffff
6000cad8:	.word	0xffffffff
6000cadc:	.word	0xffffffff
6000cae0:	.word	0xffffffff
6000cae4:	.word	0xffffffff
6000cae8:	.word	0xffffffff
6000caec:	.word	0xffffffff
6000caf0:	.word	0xffffffff
6000caf4:	.word	0xffffffff
6000caf8:	.word	0xffffffff
6000cafc:	.word	0xffffffff
6000cb00:	.word	0xffffffff
6000cb04:	.word	0xffffffff
6000cb08:	.word	0xffffffff
6000cb0c:	.word	0xffffffff
6000cb10:	.word	0xffffffff
6000cb14:	.word	0xffffffff
6000cb18:	.word	0xffffffff
6000cb1c:	.word	0xffffffff
6000cb20:	.word	0xffffffff
6000cb24:	.word	0xffffffff
6000cb28:	.word	0xffffffff
6000cb2c:	.word	0xffffffff
6000cb30:	.word	0xffffffff
6000cb34:	.word	0xffffffff
6000cb38:	.word	0xffffffff
6000cb3c:	.word	0xffffffff
6000cb40:	.word	0xffffffff
6000cb44:	.word	0xffffffff
6000cb48:	.word	0xffffffff
6000cb4c:	.word	0xffffffff
6000cb50:	.word	0xffffffff
6000cb54:	.word	0xffffffff
6000cb58:	.word	0xffffffff
6000cb5c:	.word	0xffffffff
6000cb60:	.word	0xffffffff
6000cb64:	.word	0xffffffff
6000cb68:	.word	0xffffffff
6000cb6c:	.word	0xffffffff
6000cb70:	.word	0xffffffff
6000cb74:	.word	0xffffffff
6000cb78:	.word	0xffffffff
6000cb7c:	.word	0xffffffff
6000cb80:	.word	0xffffffff
6000cb84:	.word	0xffffffff
6000cb88:	.word	0xffffffff
6000cb8c:	.word	0xffffffff
6000cb90:	.word	0xffffffff
6000cb94:	.word	0xffffffff
6000cb98:	.word	0xffffffff
6000cb9c:	.word	0xffffffff
6000cba0:	.word	0xffffffff
6000cba4:	.word	0xffffffff
6000cba8:	.word	0xffffffff
6000cbac:	.word	0xffffffff
6000cbb0:	.word	0xffffffff
6000cbb4:	.word	0xffffffff
6000cbb8:	.word	0xffffffff
6000cbbc:	.word	0xffffffff
6000cbc0:	.word	0xffffffff
6000cbc4:	.word	0xffffffff
6000cbc8:	.word	0xffffffff
6000cbcc:	.word	0xffffffff
6000cbd0:	.word	0xffffffff
6000cbd4:	.word	0xffffffff
6000cbd8:	.word	0xffffffff
6000cbdc:	.word	0xffffffff
6000cbe0:	.word	0xffffffff
6000cbe4:	.word	0xffffffff
6000cbe8:	.word	0xffffffff
6000cbec:	.word	0xffffffff
6000cbf0:	.word	0xffffffff
6000cbf4:	.word	0xffffffff
6000cbf8:	.word	0xffffffff
6000cbfc:	.word	0xffffffff

6000cc00 <hab_csf>:
	...
